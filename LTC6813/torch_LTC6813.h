#ifndef INC_TORCH_LIB_H_
#define INC_TORCH_LIB_H_

#define CMD_LEN 4
#define PAYLOAD_LEN 8
#define SIDE_A 1
#define SIDE_B 0

extern uint16_t PEC15_table[256];		// PEC look up table
extern uint16_t CRC15_Poly;				// LTC6813 PEC polynomial


typedef struct LTC6813_registers
{
	uint8_t configRegisterA[6];
	uint8_t configRegisterB[2];
	uint8_t voltageRegisterA[6];
	uint8_t voltageRegisterB[6];
	uint8_t voltageRegisterC[6];
	uint8_t voltageRegisterD[6];
	uint8_t auxRegisterA[6];
	uint8_t auxRegisterB[6];
	uint8_t auxRegisterC[6];
	uint8_t auxRegisterD[6];
	uint8_t statRegisterA[6];
	uint8_t statRegisterB[6];
	uint8_t pwmRegister[6];
} LTC6813;


void setup_PEC15(void);					// Creates PEC look up table

uint16_t compute_PEC15(uint8_t *data_ptr,	// Pointer to the data that we're trying to create a PEC for
					   uint8_t len		// Length of the data in bytes (2 bytes for CMD, 6 bytes for register groups)
					   );

void append_PEC(uint8_t *data_ptr,		// Pointer to the data that we're trying to append the PEC code to
				uint8_t len,			// Length of the data in bytes (2 bytes for CMD, 6 bytes for register groups)
				uint16_t PEC			// 16-bit PEC code generated by the function 'compute_PEC15()'
				);

// Verifies the CRC code sent by the LTC6813. Returns 2 if it matches, 1 if the message was corrupted
uint8_t verify_PEC15(uint8_t *receivedData_ptr);

void action_cmd(uint8_t *cmd_ptr,
				uint8_t sideA
				);

void write_cmd(uint8_t *cmd_ptr,
			   uint8_t *payload_ptr,
			   uint8_t sideA
			   );

void read_cmd(uint8_t *cmd_ptr,
			  uint8_t *receivedPayload_ptr,
			  uint8_t sideA
			  );

// *** WRITE COMMANDS ***
//void WRCFGA(uint8_t *payload_ptr, uint8_t side);
void WRCFGA(LTC6813 *reg_ptr, uint8_t side);

//void WRCFGB(uint8_t *payload_ptr, uint8_t side);
void WRCFGB(LTC6813 *reg_ptr, uint8_t side);

//void WRPWM(uint8_t *payload_ptr, uint8_t side);
void WRPWM(LTC6813 *reg_ptr, uint8_t side);
// *** END WRITE COMMANDS ***

// *** READ COMMANDS ***
//void RDCFGA(uint8_t *configRegisterGroupA_ptr, uint8_t side);
void RDCFGA(LTC6813 *reg_ptr, uint8_t side);

//void RDCFGB(uint8_t *configRegisterGroupB_ptr, uint8_t side);
void RDCFGB(LTC6813 *reg_ptr, uint8_t side);

//void RDCVA(uint8_t *cellVoltageRegisterGroupA_ptr, uint8_t side);
void RDCVA(LTC6813 *reg_ptr, uint8_t side);

//void RDCVB(uint8_t *cellVoltageRegisterGroupB_ptr, uint8_t side);
void RDCVB(LTC6813 *reg_ptr, uint8_t side);

//void RDCVC(uint8_t *cellVoltageRegisterGroupC_ptr, uint8_t side);
void RDCVC(LTC6813 *reg_ptr, uint8_t side)

//void RDCVD(uint8_t *cellVoltageRegisterGroupD_ptr, uint8_t side);
void RDCVD(LTC6813 *reg_ptr, uint8_t side);

void RDAUXA(LTC6813 *reg_ptr, uint8_t side);

void RDAUXB(LTC6813 *reg_ptr, uint8_t side);

void RDAUXC(LTC6813 *reg_ptr, uint8_t side);

void RDAUXD(LTC6813 *reg_ptr, uint8_t side);

void RDSTATA(LTC6813 *reg_ptr, uint8_t side);

void RDSTATB(LTC6813 *reg_ptr, uint8_t side);

void RDPWM(LTC6813 *reg_ptr, uint8_t side);
// *** END READ COMMANDS ***

// *** ACTION COMMANDS ***
void ADOW(uint8_t variant, uint8_t side);

void CVST(uint8_t variant, uint8_t side);

void STATST(uint8_t variant, uint8_t side);

void ADSTATD(uint8_t side);

void ADAXD(uint8_t side);

void ADCV(uint8_t side);

void CLRCELL(uint8_t side);

void CLRSTAT(uint8_t side);

void DIAGN(uint8_t side);

void MUTE(uint8_t side);

void UNMUTE(uint8_t side);
// *** END ACTION COMMANDS ***
#endif


