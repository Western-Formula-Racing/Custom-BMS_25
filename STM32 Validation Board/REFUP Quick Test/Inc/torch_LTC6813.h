/*
	'torch_LTC6813.h' is the primary header file for the custom LTC6813 BMS ASIC library.
	All the code from here on out is tailored for the STM32F446RET6
*/

#ifndef INC_TORCH_LTC6813_H_
#define INC_TORCH_LTC6813_H_

extern uint16_t PEC15_table[256];			// Lookup table for the LTC6813 cyclic redundancy check (CRC)
extern uint16_t CRC15_Poly;					// The characteristic CRC polynomial, given on page 54 of the LTC6813's data sheet
extern SPI_HandleTypeDef hspi1;				// Autogenerated variable apart of STM32's HAL SPI library

/*
	Function 'setup_PEC15()' initializes the CRC lookup table. It only has to be called once at the start of the program.
	The code is given by Analog Devices. It can be found on page 78 of the LTC6813's data sheet.
*/
void setup_PEC15(void);

/*
	Function 'compute_PEC15()' calculates and returns the 15-bit PEC code necessary for CRC. It must be used for every CMD and DATA payload.
	The code is given by Analog Devices. It can be found on page 78 of the LTC6813's data sheet.
*/
uint16_t compute_PEC15(char *dataPtr,		// Pointer to the data block that we're trying to create a PEC for (either CMD or DATA payload array)
					   uint8_t len			// Length of the data block in bytes (2 bytes for CMD, 6 bytes for register groups)
					   );
					
/*
	Function 'append_PEC()' appends the PEC generated by the function 'compute_PEC15()' to the given data block.
*/
void append_PEC(uint8_t *dataPtr,		// Pointer to the data block that we're trying to append the PEC code to (either CMD or DATA payload array)
				uint8_t len,			// Length of the data block in bytes (2 bytes for CMD, 6 bytes for register groups)
				uint16_t PEC			// 16-bit PEC code generated by the function 'compute_PEC15()'
				);

#endif