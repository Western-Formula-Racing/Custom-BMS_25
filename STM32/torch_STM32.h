#ifndef INC_TORCH_STM32_H_
#define INC_TORCH_STM32_H_

extern SPI_HandleTypeDef hspi1;
extern SPI_HandleTypeDef hspi3;
extern ADC_HandleTypeDef hadc1;
extern CAN_HandleTypeDef hcan1;
extern TIM_HandleTypeDef htim2;

extern volatile uint32_t Counter;

void pull_low(GPIO_TypeDef *port_ptr, uint16_t pin);
void pull_high(GPIO_TypeDef *port_ptr, uint16_t pin);

uint8_t SPI_transmit(SPI_HandleTypeDef *hspi, uint8_t *data_ptr, uint8_t dataLen);

typedef struct LTC6813_registers
{
	uint8_t configRegisterA[6];
	uint8_t configRegisterB[2];
	uint8_t voltageRegisterA[6];
	uint8_t voltageRegisterB[6];
	uint8_t voltageRegisterC[6];
	uint8_t voltageRegisterD[6];
	uint8_t auxRegisterA[6];
	uint8_t auxRegisterB[6];
	uint8_t auxRegisterC[6];
	uint8_t auxRegisterD[6];
	uint8_t statRegisterA[6];
	uint8_t statRegisterB[6];
	uint8_t pwmRegister[6];
} LTC6813_registers;
// *** END LTC6813 VARIABLES ***


// *** LTC6813 FUNCTIONS ***
void setup_PEC15(void);					// Creates PEC look up table

uint16_t compute_PEC15(uint8_t *data_ptr,	// Pointer to the data that we're trying to create a PEC for
					   uint8_t len		// Length of the data in bytes (2 bytes for CMD, 6 bytes for register groups)
					   );

void append_PEC(uint8_t *data_ptr,		// Pointer to the data that we're trying to append the PEC code to
				uint8_t len,			// Length of the data in bytes (2 bytes for CMD, 6 bytes for register groups)
				uint16_t PEC			// 16-bit PEC code generated by the function 'compute_PEC15()'
				);

uint8_t verify_PEC15(uint8_t *receivedData_ptr);

void action_cmd(uint8_t *cmd_ptr,
				uint8_t sideA
				);

void write_cmd(uint8_t *cmd_ptr,
			   uint8_t *payload_ptr,
			   uint8_t sideA
			   );

void read_cmd(uint8_t *cmd_ptr,
			  uint8_t *receivedPayload_ptr,
			  uint8_t sideA
			  );

// *** WRITE COMMANDS ***
void WRCFGA(uint8_t *payload_ptr, uint8_t side);

void WRCFGB(uint8_t *payload_ptr, uint8_t side);

void WRPWM(uint8_t *payload_ptr, uint8_t side);
// *** END WRITE COMMANDS ***

// *** READ COMMANDS ***
void RDCFGA(uint8_t *configRegisterGroupA_ptr, uint8_t side);

void RDCFGB(uint8_t *configRegisterGroupB_ptr, uint8_t side);

void RDCVA(uint8_t *cellVoltageRegisterGroupA_ptr, uint8_t side);

void RDCVB(uint8_t *cellVoltageRegisterGroupB_ptr, uint8_t side);

void RDCVC(uint8_t *cellVoltageRegisterGroupC_ptr, uint8_t side);

void RDCVD(uint8_t *cellVoltageRegisterGroupD_ptr, uint8_t side);

void RDSTATA(uint8_t *statusRegisterGroupA_ptr, uint8_t side);

void RDSTATB(uint8_t *statusRegisterGroupB_ptr, uint8_t side);

void RDAUXB(uint8_t *auxiliaryRegisterGroupB_ptr, uint8_t side);

void RDSCTRL(uint8_t *SControlRegisterGroup_ptr, uint8_t side);

void RDPWM(uint8_t *PWMRegisterGroup_ptr, uint8_t side);

void RDPSB(uint8_t *PWMandSControlRegisterGroup_ptr, uint8_t side);
// *** END READ COMMANDS ***

// *** ACTION COMMANDS ***
void STSCTRL(uint8_t side);

void CLRSCTRL(uint8_t side);

void ADOW(uint8_t variant, uint8_t side);

void CVST(uint8_t variant, uint8_t side);

void STATST(uint8_t variant, uint8_t side);

void ADSTAT(uint8_t side);

void ADAX(uint8_t side);

void ADCVSC(uint8_t side);

void CLRCELL(uint8_t side);

void CLRSTAT(uint8_t side);

void DIAGN(uint8_t side);

void MUTE(uint8_t side);

void UNMUTE(uint8_t side);
// *** END ACTION COMMANDS ***
#endif


