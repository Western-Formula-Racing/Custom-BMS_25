#ifndef INC_TORCH_LTC6813_H_
#define INC_TORCH_LTC6813_

// *** STM32 PERIPHERAL VARIABLES ***
//extern CAN_HandleTypeDef hcan2;
// *** END STM32 PERIPHERAL VARIABLES ***

// *** LTC6813 VARIABLES ***
#define CMD_LEN 4
#define PAYLOAD_LEN 8
#define SIDE_A 1
#define SIDE_B 0

extern uint16_t PEC15_table[256];		// PEC look up table
extern uint16_t CRC15_Poly;				// LTC6813 PEC polynomial
// *** END LTC6813 VARIABLES ***


// *** LTC6813 FUNCTIONS ***
void setup_PEC15(void);					// Creates PEC look up table

uint16_t compute_PEC15(uint8_t *data_ptr,	// Pointer to the data that we're trying to create a PEC for
					   uint8_t len		// Length of the data in bytes (2 bytes for CMD, 6 bytes for register groups)
					   );

void append_PEC(uint8_t *data_ptr,		// Pointer to the data that we're trying to append the PEC code to
				uint8_t len,			// Length of the data in bytes (2 bytes for CMD, 6 bytes for register groups)
				uint16_t PEC			// 16-bit PEC code generated by the function 'compute_PEC15()'
				);

uint8_t verify_PEC15(uint8_t *receivedData_ptr);

void action_cmd(uint8_t *cmd_ptr,
				uint8_t sideA
				);

void write_cmd(uint8_t *cmd_ptr,
			   uint8_t *payload_ptr,
			   uint8_t sideA
			   );

void read_cmd(uint8_t *cmd_ptr,
			  uint8_t *receivedPayload_ptr,
			  uint8_t sideA
			  );

// *** WRITE COMMANDS ***
void WRCFGA(uint8_t *payload_ptr, uint8_t side);

void WRCFGB(uint8_t *payload_ptr, uint8_t side);

void WRSCTRL(uint8_t *payload_ptr, uint8_t side);

void WRPWM(uint8_t *payload_ptr, uint8_t side);

void WRPSB(uint8_t *payload_ptr, uint8_t side);
// *** END WRITE COMMANDS ***

// *** READ COMMANDS ***
void RDCFGA(uint8_t *configRegisterGroupA_ptr, uint8_t side);

void RDCFGB(uint8_t *configRegisterGroupB_ptr, uint8_t side);

void RDCVA(uint8_t *cellVoltageRegisterGroupA_ptr, uint8_t side);

void RDCVB(uint8_t *cellVoltageRegisterGroupB_ptr, uint8_t side);

void RDCVC(uint8_t *cellVoltageRegisterGroupC_ptr, uint8_t side);

void RDCVD(uint8_t *cellVoltageRegisterGroupD_ptr, uint8_t side);

void RDCVE(uint8_t *cellVoltageRegisterGroupE_ptr, uint8_t side);

void RDCVF(uint8_t *cellVoltageRegisterGroupF_ptr, uint8_t side);

void RDSTATA(uint8_t *statusRegisterGroupA_ptr, uint8_t side);

void RDSTATB(uint8_t *statusRegisterGroupB_ptr, uint8_t side);

void RDAUXA(uint8_t *auxiliaryRegisterGroupA_ptr, uint8_t side);

void RDAUXB(uint8_t *auxiliaryRegisterGroupB_ptr, uint8_t side);

void RDAUXC(uint8_t *auxiliaryRegisterGroupC_ptr, uint8_t side);

void RDAUXD(uint8_t *auxiliaryRegisterGroupD_ptr, uint8_t side);

void RDSCTRL(uint8_t *SControlRegisterGroup_ptr, uint8_t side);

void RDPWM(uint8_t *PWMRegisterGroup_ptr, uint8_t side);

void RDPSB(uint8_t *PWMandSControlRegisterGroup_ptr, uint8_t side);
// *** END READ COMMANDS ***

// *** ACTION COMMANDS ***
void STSCTRL(uint8_t side);

void CLRSCTRL(uint8_t side);

void ADOW(uint8_t variant, uint8_t side);

void ADOL(uint8_t side);

void CVST(uint8_t variant, uint8_t side);

void AXST(uint8_t variant, uint8_t side);

void STATST(uint8_t variant, uint8_t side);

void ADSTATD(uint8_t side);

void ADAXD(uint8_t side);

void ADCV(uint8_t side);

void CLRCELL(uint8_t side);

void CLRAUX(uint8_t side);

void CLRSTAT(uint8_t side);

void DIAGN(uint8_t side);

void MUTE(uint8_t side);

void UNMUTE(uint8_t side);
// *** END ACTION COMMANDS ***

void force_refup(void);

uint8_t refup_check(void);

void force_mute(void);

void force_unmute(void);

#endif
