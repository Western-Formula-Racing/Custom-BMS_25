
wfr25_torch_bms.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ff60  080001c8  080001c8  000011c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000034  08010128  08010128  00011128  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801015c  0801015c  00012060  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0801015c  0801015c  0001115c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010164  08010164  00012060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010164  08010164  00011164  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08010168  08010168  00011168  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  0801016c  00012000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004d4  20000060  080101cc  00012060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000534  080101cc  00012534  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00012060  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015d67  00000000  00000000  00012090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003173  00000000  00000000  00027df7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001230  00000000  00000000  0002af70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e02  00000000  00000000  0002c1a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000243c0  00000000  00000000  0002cfa2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019887  00000000  00000000  00051362  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e1ba9  00000000  00000000  0006abe9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0014c792  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005098  00000000  00000000  0014c7d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  00151870  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	@ (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	@ (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	20000060 	.word	0x20000060
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08010110 	.word	0x08010110

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	@ (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	@ (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	@ (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000064 	.word	0x20000064
 8000204:	08010110 	.word	0x08010110

08000208 <__aeabi_drsub>:
 8000208:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800020c:	e002      	b.n	8000214 <__adddf3>
 800020e:	bf00      	nop

08000210 <__aeabi_dsub>:
 8000210:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000214 <__adddf3>:
 8000214:	b530      	push	{r4, r5, lr}
 8000216:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800021a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800021e:	ea94 0f05 	teq	r4, r5
 8000222:	bf08      	it	eq
 8000224:	ea90 0f02 	teqeq	r0, r2
 8000228:	bf1f      	itttt	ne
 800022a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800022e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000232:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000236:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800023a:	f000 80e2 	beq.w	8000402 <__adddf3+0x1ee>
 800023e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000242:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000246:	bfb8      	it	lt
 8000248:	426d      	neglt	r5, r5
 800024a:	dd0c      	ble.n	8000266 <__adddf3+0x52>
 800024c:	442c      	add	r4, r5
 800024e:	ea80 0202 	eor.w	r2, r0, r2
 8000252:	ea81 0303 	eor.w	r3, r1, r3
 8000256:	ea82 0000 	eor.w	r0, r2, r0
 800025a:	ea83 0101 	eor.w	r1, r3, r1
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	2d36      	cmp	r5, #54	@ 0x36
 8000268:	bf88      	it	hi
 800026a:	bd30      	pophi	{r4, r5, pc}
 800026c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000270:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000274:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000278:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800027c:	d002      	beq.n	8000284 <__adddf3+0x70>
 800027e:	4240      	negs	r0, r0
 8000280:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000284:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000288:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800028c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000290:	d002      	beq.n	8000298 <__adddf3+0x84>
 8000292:	4252      	negs	r2, r2
 8000294:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000298:	ea94 0f05 	teq	r4, r5
 800029c:	f000 80a7 	beq.w	80003ee <__adddf3+0x1da>
 80002a0:	f1a4 0401 	sub.w	r4, r4, #1
 80002a4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a8:	db0d      	blt.n	80002c6 <__adddf3+0xb2>
 80002aa:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ae:	fa22 f205 	lsr.w	r2, r2, r5
 80002b2:	1880      	adds	r0, r0, r2
 80002b4:	f141 0100 	adc.w	r1, r1, #0
 80002b8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002bc:	1880      	adds	r0, r0, r2
 80002be:	fa43 f305 	asr.w	r3, r3, r5
 80002c2:	4159      	adcs	r1, r3
 80002c4:	e00e      	b.n	80002e4 <__adddf3+0xd0>
 80002c6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ca:	f10e 0e20 	add.w	lr, lr, #32
 80002ce:	2a01      	cmp	r2, #1
 80002d0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002d4:	bf28      	it	cs
 80002d6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002da:	fa43 f305 	asr.w	r3, r3, r5
 80002de:	18c0      	adds	r0, r0, r3
 80002e0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002e4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002e8:	d507      	bpl.n	80002fa <__adddf3+0xe6>
 80002ea:	f04f 0e00 	mov.w	lr, #0
 80002ee:	f1dc 0c00 	rsbs	ip, ip, #0
 80002f2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002f6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002fa:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002fe:	d31b      	bcc.n	8000338 <__adddf3+0x124>
 8000300:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000304:	d30c      	bcc.n	8000320 <__adddf3+0x10c>
 8000306:	0849      	lsrs	r1, r1, #1
 8000308:	ea5f 0030 	movs.w	r0, r0, rrx
 800030c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000310:	f104 0401 	add.w	r4, r4, #1
 8000314:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000318:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800031c:	f080 809a 	bcs.w	8000454 <__adddf3+0x240>
 8000320:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	ea41 0105 	orr.w	r1, r1, r5
 8000336:	bd30      	pop	{r4, r5, pc}
 8000338:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800033c:	4140      	adcs	r0, r0
 800033e:	eb41 0101 	adc.w	r1, r1, r1
 8000342:	3c01      	subs	r4, #1
 8000344:	bf28      	it	cs
 8000346:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800034a:	d2e9      	bcs.n	8000320 <__adddf3+0x10c>
 800034c:	f091 0f00 	teq	r1, #0
 8000350:	bf04      	itt	eq
 8000352:	4601      	moveq	r1, r0
 8000354:	2000      	moveq	r0, #0
 8000356:	fab1 f381 	clz	r3, r1
 800035a:	bf08      	it	eq
 800035c:	3320      	addeq	r3, #32
 800035e:	f1a3 030b 	sub.w	r3, r3, #11
 8000362:	f1b3 0220 	subs.w	r2, r3, #32
 8000366:	da0c      	bge.n	8000382 <__adddf3+0x16e>
 8000368:	320c      	adds	r2, #12
 800036a:	dd08      	ble.n	800037e <__adddf3+0x16a>
 800036c:	f102 0c14 	add.w	ip, r2, #20
 8000370:	f1c2 020c 	rsb	r2, r2, #12
 8000374:	fa01 f00c 	lsl.w	r0, r1, ip
 8000378:	fa21 f102 	lsr.w	r1, r1, r2
 800037c:	e00c      	b.n	8000398 <__adddf3+0x184>
 800037e:	f102 0214 	add.w	r2, r2, #20
 8000382:	bfd8      	it	le
 8000384:	f1c2 0c20 	rsble	ip, r2, #32
 8000388:	fa01 f102 	lsl.w	r1, r1, r2
 800038c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000390:	bfdc      	itt	le
 8000392:	ea41 010c 	orrle.w	r1, r1, ip
 8000396:	4090      	lslle	r0, r2
 8000398:	1ae4      	subs	r4, r4, r3
 800039a:	bfa2      	ittt	ge
 800039c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003a0:	4329      	orrge	r1, r5
 80003a2:	bd30      	popge	{r4, r5, pc}
 80003a4:	ea6f 0404 	mvn.w	r4, r4
 80003a8:	3c1f      	subs	r4, #31
 80003aa:	da1c      	bge.n	80003e6 <__adddf3+0x1d2>
 80003ac:	340c      	adds	r4, #12
 80003ae:	dc0e      	bgt.n	80003ce <__adddf3+0x1ba>
 80003b0:	f104 0414 	add.w	r4, r4, #20
 80003b4:	f1c4 0220 	rsb	r2, r4, #32
 80003b8:	fa20 f004 	lsr.w	r0, r0, r4
 80003bc:	fa01 f302 	lsl.w	r3, r1, r2
 80003c0:	ea40 0003 	orr.w	r0, r0, r3
 80003c4:	fa21 f304 	lsr.w	r3, r1, r4
 80003c8:	ea45 0103 	orr.w	r1, r5, r3
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	f1c4 040c 	rsb	r4, r4, #12
 80003d2:	f1c4 0220 	rsb	r2, r4, #32
 80003d6:	fa20 f002 	lsr.w	r0, r0, r2
 80003da:	fa01 f304 	lsl.w	r3, r1, r4
 80003de:	ea40 0003 	orr.w	r0, r0, r3
 80003e2:	4629      	mov	r1, r5
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ea:	4629      	mov	r1, r5
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f094 0f00 	teq	r4, #0
 80003f2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003f6:	bf06      	itte	eq
 80003f8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003fc:	3401      	addeq	r4, #1
 80003fe:	3d01      	subne	r5, #1
 8000400:	e74e      	b.n	80002a0 <__adddf3+0x8c>
 8000402:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000406:	bf18      	it	ne
 8000408:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800040c:	d029      	beq.n	8000462 <__adddf3+0x24e>
 800040e:	ea94 0f05 	teq	r4, r5
 8000412:	bf08      	it	eq
 8000414:	ea90 0f02 	teqeq	r0, r2
 8000418:	d005      	beq.n	8000426 <__adddf3+0x212>
 800041a:	ea54 0c00 	orrs.w	ip, r4, r0
 800041e:	bf04      	itt	eq
 8000420:	4619      	moveq	r1, r3
 8000422:	4610      	moveq	r0, r2
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	ea91 0f03 	teq	r1, r3
 800042a:	bf1e      	ittt	ne
 800042c:	2100      	movne	r1, #0
 800042e:	2000      	movne	r0, #0
 8000430:	bd30      	popne	{r4, r5, pc}
 8000432:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000436:	d105      	bne.n	8000444 <__adddf3+0x230>
 8000438:	0040      	lsls	r0, r0, #1
 800043a:	4149      	adcs	r1, r1
 800043c:	bf28      	it	cs
 800043e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000442:	bd30      	pop	{r4, r5, pc}
 8000444:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000448:	bf3c      	itt	cc
 800044a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800044e:	bd30      	popcc	{r4, r5, pc}
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000454:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000458:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800045c:	f04f 0000 	mov.w	r0, #0
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000466:	bf1a      	itte	ne
 8000468:	4619      	movne	r1, r3
 800046a:	4610      	movne	r0, r2
 800046c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000470:	bf1c      	itt	ne
 8000472:	460b      	movne	r3, r1
 8000474:	4602      	movne	r2, r0
 8000476:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800047a:	bf06      	itte	eq
 800047c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000480:	ea91 0f03 	teqeq	r1, r3
 8000484:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	bf00      	nop

0800048c <__aeabi_ui2d>:
 800048c:	f090 0f00 	teq	r0, #0
 8000490:	bf04      	itt	eq
 8000492:	2100      	moveq	r1, #0
 8000494:	4770      	bxeq	lr
 8000496:	b530      	push	{r4, r5, lr}
 8000498:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800049c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004a0:	f04f 0500 	mov.w	r5, #0
 80004a4:	f04f 0100 	mov.w	r1, #0
 80004a8:	e750      	b.n	800034c <__adddf3+0x138>
 80004aa:	bf00      	nop

080004ac <__aeabi_i2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004c0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004c4:	bf48      	it	mi
 80004c6:	4240      	negmi	r0, r0
 80004c8:	f04f 0100 	mov.w	r1, #0
 80004cc:	e73e      	b.n	800034c <__adddf3+0x138>
 80004ce:	bf00      	nop

080004d0 <__aeabi_f2d>:
 80004d0:	0042      	lsls	r2, r0, #1
 80004d2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004d6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004da:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004de:	bf1f      	itttt	ne
 80004e0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004e4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004e8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004ec:	4770      	bxne	lr
 80004ee:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004f2:	bf08      	it	eq
 80004f4:	4770      	bxeq	lr
 80004f6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004fa:	bf04      	itt	eq
 80004fc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000500:	4770      	bxeq	lr
 8000502:	b530      	push	{r4, r5, lr}
 8000504:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000510:	e71c      	b.n	800034c <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_ul2d>:
 8000514:	ea50 0201 	orrs.w	r2, r0, r1
 8000518:	bf08      	it	eq
 800051a:	4770      	bxeq	lr
 800051c:	b530      	push	{r4, r5, lr}
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	e00a      	b.n	800053a <__aeabi_l2d+0x16>

08000524 <__aeabi_l2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000532:	d502      	bpl.n	800053a <__aeabi_l2d+0x16>
 8000534:	4240      	negs	r0, r0
 8000536:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800053a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800053e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000542:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000546:	f43f aed8 	beq.w	80002fa <__adddf3+0xe6>
 800054a:	f04f 0203 	mov.w	r2, #3
 800054e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000552:	bf18      	it	ne
 8000554:	3203      	addne	r2, #3
 8000556:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800055a:	bf18      	it	ne
 800055c:	3203      	addne	r2, #3
 800055e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000562:	f1c2 0320 	rsb	r3, r2, #32
 8000566:	fa00 fc03 	lsl.w	ip, r0, r3
 800056a:	fa20 f002 	lsr.w	r0, r0, r2
 800056e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000572:	ea40 000e 	orr.w	r0, r0, lr
 8000576:	fa21 f102 	lsr.w	r1, r1, r2
 800057a:	4414      	add	r4, r2
 800057c:	e6bd      	b.n	80002fa <__adddf3+0xe6>
 800057e:	bf00      	nop

08000580 <__aeabi_dmul>:
 8000580:	b570      	push	{r4, r5, r6, lr}
 8000582:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000586:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800058a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800058e:	bf1d      	ittte	ne
 8000590:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000594:	ea94 0f0c 	teqne	r4, ip
 8000598:	ea95 0f0c 	teqne	r5, ip
 800059c:	f000 f8de 	bleq	800075c <__aeabi_dmul+0x1dc>
 80005a0:	442c      	add	r4, r5
 80005a2:	ea81 0603 	eor.w	r6, r1, r3
 80005a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005b2:	bf18      	it	ne
 80005b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005bc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005c0:	d038      	beq.n	8000634 <__aeabi_dmul+0xb4>
 80005c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ce:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005d6:	f04f 0600 	mov.w	r6, #0
 80005da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005de:	f09c 0f00 	teq	ip, #0
 80005e2:	bf18      	it	ne
 80005e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005e8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005ec:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005f0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005f4:	d204      	bcs.n	8000600 <__aeabi_dmul+0x80>
 80005f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005fa:	416d      	adcs	r5, r5
 80005fc:	eb46 0606 	adc.w	r6, r6, r6
 8000600:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000604:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000608:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800060c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000610:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000614:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000618:	bf88      	it	hi
 800061a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800061e:	d81e      	bhi.n	800065e <__aeabi_dmul+0xde>
 8000620:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000624:	bf08      	it	eq
 8000626:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800062a:	f150 0000 	adcs.w	r0, r0, #0
 800062e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000632:	bd70      	pop	{r4, r5, r6, pc}
 8000634:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000638:	ea46 0101 	orr.w	r1, r6, r1
 800063c:	ea40 0002 	orr.w	r0, r0, r2
 8000640:	ea81 0103 	eor.w	r1, r1, r3
 8000644:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000648:	bfc2      	ittt	gt
 800064a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800064e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000652:	bd70      	popgt	{r4, r5, r6, pc}
 8000654:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000658:	f04f 0e00 	mov.w	lr, #0
 800065c:	3c01      	subs	r4, #1
 800065e:	f300 80ab 	bgt.w	80007b8 <__aeabi_dmul+0x238>
 8000662:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000666:	bfde      	ittt	le
 8000668:	2000      	movle	r0, #0
 800066a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800066e:	bd70      	pople	{r4, r5, r6, pc}
 8000670:	f1c4 0400 	rsb	r4, r4, #0
 8000674:	3c20      	subs	r4, #32
 8000676:	da35      	bge.n	80006e4 <__aeabi_dmul+0x164>
 8000678:	340c      	adds	r4, #12
 800067a:	dc1b      	bgt.n	80006b4 <__aeabi_dmul+0x134>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f305 	lsl.w	r3, r0, r5
 8000688:	fa20 f004 	lsr.w	r0, r0, r4
 800068c:	fa01 f205 	lsl.w	r2, r1, r5
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000698:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800069c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a0:	fa21 f604 	lsr.w	r6, r1, r4
 80006a4:	eb42 0106 	adc.w	r1, r2, r6
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 040c 	rsb	r4, r4, #12
 80006b8:	f1c4 0520 	rsb	r5, r4, #32
 80006bc:	fa00 f304 	lsl.w	r3, r0, r4
 80006c0:	fa20 f005 	lsr.w	r0, r0, r5
 80006c4:	fa01 f204 	lsl.w	r2, r1, r4
 80006c8:	ea40 0002 	orr.w	r0, r0, r2
 80006cc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d4:	f141 0100 	adc.w	r1, r1, #0
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 0520 	rsb	r5, r4, #32
 80006e8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80006f0:	fa20 f304 	lsr.w	r3, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea43 0302 	orr.w	r3, r3, r2
 80006fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000704:	fa21 f204 	lsr.w	r2, r1, r4
 8000708:	ea20 0002 	bic.w	r0, r0, r2
 800070c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f094 0f00 	teq	r4, #0
 8000720:	d10f      	bne.n	8000742 <__aeabi_dmul+0x1c2>
 8000722:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000726:	0040      	lsls	r0, r0, #1
 8000728:	eb41 0101 	adc.w	r1, r1, r1
 800072c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000730:	bf08      	it	eq
 8000732:	3c01      	subeq	r4, #1
 8000734:	d0f7      	beq.n	8000726 <__aeabi_dmul+0x1a6>
 8000736:	ea41 0106 	orr.w	r1, r1, r6
 800073a:	f095 0f00 	teq	r5, #0
 800073e:	bf18      	it	ne
 8000740:	4770      	bxne	lr
 8000742:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000746:	0052      	lsls	r2, r2, #1
 8000748:	eb43 0303 	adc.w	r3, r3, r3
 800074c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000750:	bf08      	it	eq
 8000752:	3d01      	subeq	r5, #1
 8000754:	d0f7      	beq.n	8000746 <__aeabi_dmul+0x1c6>
 8000756:	ea43 0306 	orr.w	r3, r3, r6
 800075a:	4770      	bx	lr
 800075c:	ea94 0f0c 	teq	r4, ip
 8000760:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000764:	bf18      	it	ne
 8000766:	ea95 0f0c 	teqne	r5, ip
 800076a:	d00c      	beq.n	8000786 <__aeabi_dmul+0x206>
 800076c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000770:	bf18      	it	ne
 8000772:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000776:	d1d1      	bne.n	800071c <__aeabi_dmul+0x19c>
 8000778:	ea81 0103 	eor.w	r1, r1, r3
 800077c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000780:	f04f 0000 	mov.w	r0, #0
 8000784:	bd70      	pop	{r4, r5, r6, pc}
 8000786:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800078a:	bf06      	itte	eq
 800078c:	4610      	moveq	r0, r2
 800078e:	4619      	moveq	r1, r3
 8000790:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000794:	d019      	beq.n	80007ca <__aeabi_dmul+0x24a>
 8000796:	ea94 0f0c 	teq	r4, ip
 800079a:	d102      	bne.n	80007a2 <__aeabi_dmul+0x222>
 800079c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007a0:	d113      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007a2:	ea95 0f0c 	teq	r5, ip
 80007a6:	d105      	bne.n	80007b4 <__aeabi_dmul+0x234>
 80007a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007ac:	bf1c      	itt	ne
 80007ae:	4610      	movne	r0, r2
 80007b0:	4619      	movne	r1, r3
 80007b2:	d10a      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007b4:	ea81 0103 	eor.w	r1, r1, r3
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007c0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007c4:	f04f 0000 	mov.w	r0, #0
 80007c8:	bd70      	pop	{r4, r5, r6, pc}
 80007ca:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007ce:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007d2:	bd70      	pop	{r4, r5, r6, pc}

080007d4 <__aeabi_ddiv>:
 80007d4:	b570      	push	{r4, r5, r6, lr}
 80007d6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007da:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007de:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007e2:	bf1d      	ittte	ne
 80007e4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007e8:	ea94 0f0c 	teqne	r4, ip
 80007ec:	ea95 0f0c 	teqne	r5, ip
 80007f0:	f000 f8a7 	bleq	8000942 <__aeabi_ddiv+0x16e>
 80007f4:	eba4 0405 	sub.w	r4, r4, r5
 80007f8:	ea81 0e03 	eor.w	lr, r1, r3
 80007fc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000800:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000804:	f000 8088 	beq.w	8000918 <__aeabi_ddiv+0x144>
 8000808:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800080c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000810:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000814:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000818:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800081c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000820:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000824:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000828:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800082c:	429d      	cmp	r5, r3
 800082e:	bf08      	it	eq
 8000830:	4296      	cmpeq	r6, r2
 8000832:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000836:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800083a:	d202      	bcs.n	8000842 <__aeabi_ddiv+0x6e>
 800083c:	085b      	lsrs	r3, r3, #1
 800083e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000842:	1ab6      	subs	r6, r6, r2
 8000844:	eb65 0503 	sbc.w	r5, r5, r3
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000852:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 000c 	orrcs.w	r0, r0, ip
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008b0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008b4:	d018      	beq.n	80008e8 <__aeabi_ddiv+0x114>
 80008b6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ba:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008be:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008c2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008c6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ca:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ce:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008d2:	d1c0      	bne.n	8000856 <__aeabi_ddiv+0x82>
 80008d4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008d8:	d10b      	bne.n	80008f2 <__aeabi_ddiv+0x11e>
 80008da:	ea41 0100 	orr.w	r1, r1, r0
 80008de:	f04f 0000 	mov.w	r0, #0
 80008e2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008e6:	e7b6      	b.n	8000856 <__aeabi_ddiv+0x82>
 80008e8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008ec:	bf04      	itt	eq
 80008ee:	4301      	orreq	r1, r0
 80008f0:	2000      	moveq	r0, #0
 80008f2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008f6:	bf88      	it	hi
 80008f8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008fc:	f63f aeaf 	bhi.w	800065e <__aeabi_dmul+0xde>
 8000900:	ebb5 0c03 	subs.w	ip, r5, r3
 8000904:	bf04      	itt	eq
 8000906:	ebb6 0c02 	subseq.w	ip, r6, r2
 800090a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800090e:	f150 0000 	adcs.w	r0, r0, #0
 8000912:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000916:	bd70      	pop	{r4, r5, r6, pc}
 8000918:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800091c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000920:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000924:	bfc2      	ittt	gt
 8000926:	ebd4 050c 	rsbsgt	r5, r4, ip
 800092a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800092e:	bd70      	popgt	{r4, r5, r6, pc}
 8000930:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000934:	f04f 0e00 	mov.w	lr, #0
 8000938:	3c01      	subs	r4, #1
 800093a:	e690      	b.n	800065e <__aeabi_dmul+0xde>
 800093c:	ea45 0e06 	orr.w	lr, r5, r6
 8000940:	e68d      	b.n	800065e <__aeabi_dmul+0xde>
 8000942:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000946:	ea94 0f0c 	teq	r4, ip
 800094a:	bf08      	it	eq
 800094c:	ea95 0f0c 	teqeq	r5, ip
 8000950:	f43f af3b 	beq.w	80007ca <__aeabi_dmul+0x24a>
 8000954:	ea94 0f0c 	teq	r4, ip
 8000958:	d10a      	bne.n	8000970 <__aeabi_ddiv+0x19c>
 800095a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800095e:	f47f af34 	bne.w	80007ca <__aeabi_dmul+0x24a>
 8000962:	ea95 0f0c 	teq	r5, ip
 8000966:	f47f af25 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800096a:	4610      	mov	r0, r2
 800096c:	4619      	mov	r1, r3
 800096e:	e72c      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000970:	ea95 0f0c 	teq	r5, ip
 8000974:	d106      	bne.n	8000984 <__aeabi_ddiv+0x1b0>
 8000976:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800097a:	f43f aefd 	beq.w	8000778 <__aeabi_dmul+0x1f8>
 800097e:	4610      	mov	r0, r2
 8000980:	4619      	mov	r1, r3
 8000982:	e722      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000984:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800098e:	f47f aec5 	bne.w	800071c <__aeabi_dmul+0x19c>
 8000992:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000996:	f47f af0d 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800099a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800099e:	f47f aeeb 	bne.w	8000778 <__aeabi_dmul+0x1f8>
 80009a2:	e712      	b.n	80007ca <__aeabi_dmul+0x24a>

080009a4 <__aeabi_d2f>:
 80009a4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009a8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 80009ac:	bf24      	itt	cs
 80009ae:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 80009b2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 80009b6:	d90d      	bls.n	80009d4 <__aeabi_d2f+0x30>
 80009b8:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80009bc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80009c0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80009c4:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 80009c8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80009cc:	bf08      	it	eq
 80009ce:	f020 0001 	biceq.w	r0, r0, #1
 80009d2:	4770      	bx	lr
 80009d4:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 80009d8:	d121      	bne.n	8000a1e <__aeabi_d2f+0x7a>
 80009da:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 80009de:	bfbc      	itt	lt
 80009e0:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 80009e4:	4770      	bxlt	lr
 80009e6:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ea:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009ee:	f1c2 0218 	rsb	r2, r2, #24
 80009f2:	f1c2 0c20 	rsb	ip, r2, #32
 80009f6:	fa10 f30c 	lsls.w	r3, r0, ip
 80009fa:	fa20 f002 	lsr.w	r0, r0, r2
 80009fe:	bf18      	it	ne
 8000a00:	f040 0001 	orrne.w	r0, r0, #1
 8000a04:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a08:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a0c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a10:	ea40 000c 	orr.w	r0, r0, ip
 8000a14:	fa23 f302 	lsr.w	r3, r3, r2
 8000a18:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a1c:	e7cc      	b.n	80009b8 <__aeabi_d2f+0x14>
 8000a1e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a22:	d107      	bne.n	8000a34 <__aeabi_d2f+0x90>
 8000a24:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a28:	bf1e      	ittt	ne
 8000a2a:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000a2e:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000a32:	4770      	bxne	lr
 8000a34:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000a38:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000a3c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000a40:	4770      	bx	lr
 8000a42:	bf00      	nop

08000a44 <__aeabi_uldivmod>:
 8000a44:	b953      	cbnz	r3, 8000a5c <__aeabi_uldivmod+0x18>
 8000a46:	b94a      	cbnz	r2, 8000a5c <__aeabi_uldivmod+0x18>
 8000a48:	2900      	cmp	r1, #0
 8000a4a:	bf08      	it	eq
 8000a4c:	2800      	cmpeq	r0, #0
 8000a4e:	bf1c      	itt	ne
 8000a50:	f04f 31ff 	movne.w	r1, #4294967295
 8000a54:	f04f 30ff 	movne.w	r0, #4294967295
 8000a58:	f000 b988 	b.w	8000d6c <__aeabi_idiv0>
 8000a5c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a60:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a64:	f000 f806 	bl	8000a74 <__udivmoddi4>
 8000a68:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a6c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a70:	b004      	add	sp, #16
 8000a72:	4770      	bx	lr

08000a74 <__udivmoddi4>:
 8000a74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a78:	9d08      	ldr	r5, [sp, #32]
 8000a7a:	468e      	mov	lr, r1
 8000a7c:	4604      	mov	r4, r0
 8000a7e:	4688      	mov	r8, r1
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d14a      	bne.n	8000b1a <__udivmoddi4+0xa6>
 8000a84:	428a      	cmp	r2, r1
 8000a86:	4617      	mov	r7, r2
 8000a88:	d962      	bls.n	8000b50 <__udivmoddi4+0xdc>
 8000a8a:	fab2 f682 	clz	r6, r2
 8000a8e:	b14e      	cbz	r6, 8000aa4 <__udivmoddi4+0x30>
 8000a90:	f1c6 0320 	rsb	r3, r6, #32
 8000a94:	fa01 f806 	lsl.w	r8, r1, r6
 8000a98:	fa20 f303 	lsr.w	r3, r0, r3
 8000a9c:	40b7      	lsls	r7, r6
 8000a9e:	ea43 0808 	orr.w	r8, r3, r8
 8000aa2:	40b4      	lsls	r4, r6
 8000aa4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000aa8:	fa1f fc87 	uxth.w	ip, r7
 8000aac:	fbb8 f1fe 	udiv	r1, r8, lr
 8000ab0:	0c23      	lsrs	r3, r4, #16
 8000ab2:	fb0e 8811 	mls	r8, lr, r1, r8
 8000ab6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000aba:	fb01 f20c 	mul.w	r2, r1, ip
 8000abe:	429a      	cmp	r2, r3
 8000ac0:	d909      	bls.n	8000ad6 <__udivmoddi4+0x62>
 8000ac2:	18fb      	adds	r3, r7, r3
 8000ac4:	f101 30ff 	add.w	r0, r1, #4294967295
 8000ac8:	f080 80ea 	bcs.w	8000ca0 <__udivmoddi4+0x22c>
 8000acc:	429a      	cmp	r2, r3
 8000ace:	f240 80e7 	bls.w	8000ca0 <__udivmoddi4+0x22c>
 8000ad2:	3902      	subs	r1, #2
 8000ad4:	443b      	add	r3, r7
 8000ad6:	1a9a      	subs	r2, r3, r2
 8000ad8:	b2a3      	uxth	r3, r4
 8000ada:	fbb2 f0fe 	udiv	r0, r2, lr
 8000ade:	fb0e 2210 	mls	r2, lr, r0, r2
 8000ae2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000ae6:	fb00 fc0c 	mul.w	ip, r0, ip
 8000aea:	459c      	cmp	ip, r3
 8000aec:	d909      	bls.n	8000b02 <__udivmoddi4+0x8e>
 8000aee:	18fb      	adds	r3, r7, r3
 8000af0:	f100 32ff 	add.w	r2, r0, #4294967295
 8000af4:	f080 80d6 	bcs.w	8000ca4 <__udivmoddi4+0x230>
 8000af8:	459c      	cmp	ip, r3
 8000afa:	f240 80d3 	bls.w	8000ca4 <__udivmoddi4+0x230>
 8000afe:	443b      	add	r3, r7
 8000b00:	3802      	subs	r0, #2
 8000b02:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000b06:	eba3 030c 	sub.w	r3, r3, ip
 8000b0a:	2100      	movs	r1, #0
 8000b0c:	b11d      	cbz	r5, 8000b16 <__udivmoddi4+0xa2>
 8000b0e:	40f3      	lsrs	r3, r6
 8000b10:	2200      	movs	r2, #0
 8000b12:	e9c5 3200 	strd	r3, r2, [r5]
 8000b16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b1a:	428b      	cmp	r3, r1
 8000b1c:	d905      	bls.n	8000b2a <__udivmoddi4+0xb6>
 8000b1e:	b10d      	cbz	r5, 8000b24 <__udivmoddi4+0xb0>
 8000b20:	e9c5 0100 	strd	r0, r1, [r5]
 8000b24:	2100      	movs	r1, #0
 8000b26:	4608      	mov	r0, r1
 8000b28:	e7f5      	b.n	8000b16 <__udivmoddi4+0xa2>
 8000b2a:	fab3 f183 	clz	r1, r3
 8000b2e:	2900      	cmp	r1, #0
 8000b30:	d146      	bne.n	8000bc0 <__udivmoddi4+0x14c>
 8000b32:	4573      	cmp	r3, lr
 8000b34:	d302      	bcc.n	8000b3c <__udivmoddi4+0xc8>
 8000b36:	4282      	cmp	r2, r0
 8000b38:	f200 8105 	bhi.w	8000d46 <__udivmoddi4+0x2d2>
 8000b3c:	1a84      	subs	r4, r0, r2
 8000b3e:	eb6e 0203 	sbc.w	r2, lr, r3
 8000b42:	2001      	movs	r0, #1
 8000b44:	4690      	mov	r8, r2
 8000b46:	2d00      	cmp	r5, #0
 8000b48:	d0e5      	beq.n	8000b16 <__udivmoddi4+0xa2>
 8000b4a:	e9c5 4800 	strd	r4, r8, [r5]
 8000b4e:	e7e2      	b.n	8000b16 <__udivmoddi4+0xa2>
 8000b50:	2a00      	cmp	r2, #0
 8000b52:	f000 8090 	beq.w	8000c76 <__udivmoddi4+0x202>
 8000b56:	fab2 f682 	clz	r6, r2
 8000b5a:	2e00      	cmp	r6, #0
 8000b5c:	f040 80a4 	bne.w	8000ca8 <__udivmoddi4+0x234>
 8000b60:	1a8a      	subs	r2, r1, r2
 8000b62:	0c03      	lsrs	r3, r0, #16
 8000b64:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000b68:	b280      	uxth	r0, r0
 8000b6a:	b2bc      	uxth	r4, r7
 8000b6c:	2101      	movs	r1, #1
 8000b6e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000b72:	fb0e 221c 	mls	r2, lr, ip, r2
 8000b76:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000b7a:	fb04 f20c 	mul.w	r2, r4, ip
 8000b7e:	429a      	cmp	r2, r3
 8000b80:	d907      	bls.n	8000b92 <__udivmoddi4+0x11e>
 8000b82:	18fb      	adds	r3, r7, r3
 8000b84:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000b88:	d202      	bcs.n	8000b90 <__udivmoddi4+0x11c>
 8000b8a:	429a      	cmp	r2, r3
 8000b8c:	f200 80e0 	bhi.w	8000d50 <__udivmoddi4+0x2dc>
 8000b90:	46c4      	mov	ip, r8
 8000b92:	1a9b      	subs	r3, r3, r2
 8000b94:	fbb3 f2fe 	udiv	r2, r3, lr
 8000b98:	fb0e 3312 	mls	r3, lr, r2, r3
 8000b9c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000ba0:	fb02 f404 	mul.w	r4, r2, r4
 8000ba4:	429c      	cmp	r4, r3
 8000ba6:	d907      	bls.n	8000bb8 <__udivmoddi4+0x144>
 8000ba8:	18fb      	adds	r3, r7, r3
 8000baa:	f102 30ff 	add.w	r0, r2, #4294967295
 8000bae:	d202      	bcs.n	8000bb6 <__udivmoddi4+0x142>
 8000bb0:	429c      	cmp	r4, r3
 8000bb2:	f200 80ca 	bhi.w	8000d4a <__udivmoddi4+0x2d6>
 8000bb6:	4602      	mov	r2, r0
 8000bb8:	1b1b      	subs	r3, r3, r4
 8000bba:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000bbe:	e7a5      	b.n	8000b0c <__udivmoddi4+0x98>
 8000bc0:	f1c1 0620 	rsb	r6, r1, #32
 8000bc4:	408b      	lsls	r3, r1
 8000bc6:	fa22 f706 	lsr.w	r7, r2, r6
 8000bca:	431f      	orrs	r7, r3
 8000bcc:	fa0e f401 	lsl.w	r4, lr, r1
 8000bd0:	fa20 f306 	lsr.w	r3, r0, r6
 8000bd4:	fa2e fe06 	lsr.w	lr, lr, r6
 8000bd8:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000bdc:	4323      	orrs	r3, r4
 8000bde:	fa00 f801 	lsl.w	r8, r0, r1
 8000be2:	fa1f fc87 	uxth.w	ip, r7
 8000be6:	fbbe f0f9 	udiv	r0, lr, r9
 8000bea:	0c1c      	lsrs	r4, r3, #16
 8000bec:	fb09 ee10 	mls	lr, r9, r0, lr
 8000bf0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000bf4:	fb00 fe0c 	mul.w	lr, r0, ip
 8000bf8:	45a6      	cmp	lr, r4
 8000bfa:	fa02 f201 	lsl.w	r2, r2, r1
 8000bfe:	d909      	bls.n	8000c14 <__udivmoddi4+0x1a0>
 8000c00:	193c      	adds	r4, r7, r4
 8000c02:	f100 3aff 	add.w	sl, r0, #4294967295
 8000c06:	f080 809c 	bcs.w	8000d42 <__udivmoddi4+0x2ce>
 8000c0a:	45a6      	cmp	lr, r4
 8000c0c:	f240 8099 	bls.w	8000d42 <__udivmoddi4+0x2ce>
 8000c10:	3802      	subs	r0, #2
 8000c12:	443c      	add	r4, r7
 8000c14:	eba4 040e 	sub.w	r4, r4, lr
 8000c18:	fa1f fe83 	uxth.w	lr, r3
 8000c1c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000c20:	fb09 4413 	mls	r4, r9, r3, r4
 8000c24:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000c28:	fb03 fc0c 	mul.w	ip, r3, ip
 8000c2c:	45a4      	cmp	ip, r4
 8000c2e:	d908      	bls.n	8000c42 <__udivmoddi4+0x1ce>
 8000c30:	193c      	adds	r4, r7, r4
 8000c32:	f103 3eff 	add.w	lr, r3, #4294967295
 8000c36:	f080 8082 	bcs.w	8000d3e <__udivmoddi4+0x2ca>
 8000c3a:	45a4      	cmp	ip, r4
 8000c3c:	d97f      	bls.n	8000d3e <__udivmoddi4+0x2ca>
 8000c3e:	3b02      	subs	r3, #2
 8000c40:	443c      	add	r4, r7
 8000c42:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000c46:	eba4 040c 	sub.w	r4, r4, ip
 8000c4a:	fba0 ec02 	umull	lr, ip, r0, r2
 8000c4e:	4564      	cmp	r4, ip
 8000c50:	4673      	mov	r3, lr
 8000c52:	46e1      	mov	r9, ip
 8000c54:	d362      	bcc.n	8000d1c <__udivmoddi4+0x2a8>
 8000c56:	d05f      	beq.n	8000d18 <__udivmoddi4+0x2a4>
 8000c58:	b15d      	cbz	r5, 8000c72 <__udivmoddi4+0x1fe>
 8000c5a:	ebb8 0203 	subs.w	r2, r8, r3
 8000c5e:	eb64 0409 	sbc.w	r4, r4, r9
 8000c62:	fa04 f606 	lsl.w	r6, r4, r6
 8000c66:	fa22 f301 	lsr.w	r3, r2, r1
 8000c6a:	431e      	orrs	r6, r3
 8000c6c:	40cc      	lsrs	r4, r1
 8000c6e:	e9c5 6400 	strd	r6, r4, [r5]
 8000c72:	2100      	movs	r1, #0
 8000c74:	e74f      	b.n	8000b16 <__udivmoddi4+0xa2>
 8000c76:	fbb1 fcf2 	udiv	ip, r1, r2
 8000c7a:	0c01      	lsrs	r1, r0, #16
 8000c7c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000c80:	b280      	uxth	r0, r0
 8000c82:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000c86:	463b      	mov	r3, r7
 8000c88:	4638      	mov	r0, r7
 8000c8a:	463c      	mov	r4, r7
 8000c8c:	46b8      	mov	r8, r7
 8000c8e:	46be      	mov	lr, r7
 8000c90:	2620      	movs	r6, #32
 8000c92:	fbb1 f1f7 	udiv	r1, r1, r7
 8000c96:	eba2 0208 	sub.w	r2, r2, r8
 8000c9a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000c9e:	e766      	b.n	8000b6e <__udivmoddi4+0xfa>
 8000ca0:	4601      	mov	r1, r0
 8000ca2:	e718      	b.n	8000ad6 <__udivmoddi4+0x62>
 8000ca4:	4610      	mov	r0, r2
 8000ca6:	e72c      	b.n	8000b02 <__udivmoddi4+0x8e>
 8000ca8:	f1c6 0220 	rsb	r2, r6, #32
 8000cac:	fa2e f302 	lsr.w	r3, lr, r2
 8000cb0:	40b7      	lsls	r7, r6
 8000cb2:	40b1      	lsls	r1, r6
 8000cb4:	fa20 f202 	lsr.w	r2, r0, r2
 8000cb8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cbc:	430a      	orrs	r2, r1
 8000cbe:	fbb3 f8fe 	udiv	r8, r3, lr
 8000cc2:	b2bc      	uxth	r4, r7
 8000cc4:	fb0e 3318 	mls	r3, lr, r8, r3
 8000cc8:	0c11      	lsrs	r1, r2, #16
 8000cca:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cce:	fb08 f904 	mul.w	r9, r8, r4
 8000cd2:	40b0      	lsls	r0, r6
 8000cd4:	4589      	cmp	r9, r1
 8000cd6:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000cda:	b280      	uxth	r0, r0
 8000cdc:	d93e      	bls.n	8000d5c <__udivmoddi4+0x2e8>
 8000cde:	1879      	adds	r1, r7, r1
 8000ce0:	f108 3cff 	add.w	ip, r8, #4294967295
 8000ce4:	d201      	bcs.n	8000cea <__udivmoddi4+0x276>
 8000ce6:	4589      	cmp	r9, r1
 8000ce8:	d81f      	bhi.n	8000d2a <__udivmoddi4+0x2b6>
 8000cea:	eba1 0109 	sub.w	r1, r1, r9
 8000cee:	fbb1 f9fe 	udiv	r9, r1, lr
 8000cf2:	fb09 f804 	mul.w	r8, r9, r4
 8000cf6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000cfa:	b292      	uxth	r2, r2
 8000cfc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000d00:	4542      	cmp	r2, r8
 8000d02:	d229      	bcs.n	8000d58 <__udivmoddi4+0x2e4>
 8000d04:	18ba      	adds	r2, r7, r2
 8000d06:	f109 31ff 	add.w	r1, r9, #4294967295
 8000d0a:	d2c4      	bcs.n	8000c96 <__udivmoddi4+0x222>
 8000d0c:	4542      	cmp	r2, r8
 8000d0e:	d2c2      	bcs.n	8000c96 <__udivmoddi4+0x222>
 8000d10:	f1a9 0102 	sub.w	r1, r9, #2
 8000d14:	443a      	add	r2, r7
 8000d16:	e7be      	b.n	8000c96 <__udivmoddi4+0x222>
 8000d18:	45f0      	cmp	r8, lr
 8000d1a:	d29d      	bcs.n	8000c58 <__udivmoddi4+0x1e4>
 8000d1c:	ebbe 0302 	subs.w	r3, lr, r2
 8000d20:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000d24:	3801      	subs	r0, #1
 8000d26:	46e1      	mov	r9, ip
 8000d28:	e796      	b.n	8000c58 <__udivmoddi4+0x1e4>
 8000d2a:	eba7 0909 	sub.w	r9, r7, r9
 8000d2e:	4449      	add	r1, r9
 8000d30:	f1a8 0c02 	sub.w	ip, r8, #2
 8000d34:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d38:	fb09 f804 	mul.w	r8, r9, r4
 8000d3c:	e7db      	b.n	8000cf6 <__udivmoddi4+0x282>
 8000d3e:	4673      	mov	r3, lr
 8000d40:	e77f      	b.n	8000c42 <__udivmoddi4+0x1ce>
 8000d42:	4650      	mov	r0, sl
 8000d44:	e766      	b.n	8000c14 <__udivmoddi4+0x1a0>
 8000d46:	4608      	mov	r0, r1
 8000d48:	e6fd      	b.n	8000b46 <__udivmoddi4+0xd2>
 8000d4a:	443b      	add	r3, r7
 8000d4c:	3a02      	subs	r2, #2
 8000d4e:	e733      	b.n	8000bb8 <__udivmoddi4+0x144>
 8000d50:	f1ac 0c02 	sub.w	ip, ip, #2
 8000d54:	443b      	add	r3, r7
 8000d56:	e71c      	b.n	8000b92 <__udivmoddi4+0x11e>
 8000d58:	4649      	mov	r1, r9
 8000d5a:	e79c      	b.n	8000c96 <__udivmoddi4+0x222>
 8000d5c:	eba1 0109 	sub.w	r1, r1, r9
 8000d60:	46c4      	mov	ip, r8
 8000d62:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d66:	fb09 f804 	mul.w	r8, r9, r4
 8000d6a:	e7c4      	b.n	8000cf6 <__udivmoddi4+0x282>

08000d6c <__aeabi_idiv0>:
 8000d6c:	4770      	bx	lr
 8000d6e:	bf00      	nop

08000d70 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d74:	f00a ffe2 	bl	800bd3c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d78:	f000 f810 	bl	8000d9c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d7c:	f000 fa48 	bl	8001210 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000d80:	f000 f986 	bl	8001090 <MX_SPI1_Init>
  MX_SPI3_Init();
 8000d84:	f000 f9ba 	bl	80010fc <MX_SPI3_Init>
  MX_ADC1_Init();
 8000d88:	f000 f876 	bl	8000e78 <MX_ADC1_Init>
  MX_TIM2_Init();
 8000d8c:	f000 f9ec 	bl	8001168 <MX_TIM2_Init>
  MX_CAN1_Init();
 8000d90:	f000 f8c4 	bl	8000f1c <MX_CAN1_Init>
  /* USER CODE BEGIN 2 */
  torch_main();
 8000d94:	f009 f89c 	bl	8009ed0 <torch_main>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000d98:	bf00      	nop
 8000d9a:	e7fd      	b.n	8000d98 <main+0x28>

08000d9c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b094      	sub	sp, #80	@ 0x50
 8000da0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000da2:	f107 031c 	add.w	r3, r7, #28
 8000da6:	2234      	movs	r2, #52	@ 0x34
 8000da8:	2100      	movs	r1, #0
 8000daa:	4618      	mov	r0, r3
 8000dac:	f00e fc90 	bl	800f6d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000db0:	f107 0308 	add.w	r3, r7, #8
 8000db4:	2200      	movs	r2, #0
 8000db6:	601a      	str	r2, [r3, #0]
 8000db8:	605a      	str	r2, [r3, #4]
 8000dba:	609a      	str	r2, [r3, #8]
 8000dbc:	60da      	str	r2, [r3, #12]
 8000dbe:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	607b      	str	r3, [r7, #4]
 8000dc4:	4b2a      	ldr	r3, [pc, #168]	@ (8000e70 <SystemClock_Config+0xd4>)
 8000dc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dc8:	4a29      	ldr	r2, [pc, #164]	@ (8000e70 <SystemClock_Config+0xd4>)
 8000dca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000dce:	6413      	str	r3, [r2, #64]	@ 0x40
 8000dd0:	4b27      	ldr	r3, [pc, #156]	@ (8000e70 <SystemClock_Config+0xd4>)
 8000dd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dd4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000dd8:	607b      	str	r3, [r7, #4]
 8000dda:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000ddc:	2300      	movs	r3, #0
 8000dde:	603b      	str	r3, [r7, #0]
 8000de0:	4b24      	ldr	r3, [pc, #144]	@ (8000e74 <SystemClock_Config+0xd8>)
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000de8:	4a22      	ldr	r2, [pc, #136]	@ (8000e74 <SystemClock_Config+0xd8>)
 8000dea:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000dee:	6013      	str	r3, [r2, #0]
 8000df0:	4b20      	ldr	r3, [pc, #128]	@ (8000e74 <SystemClock_Config+0xd8>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000df8:	603b      	str	r3, [r7, #0]
 8000dfa:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000dfc:	2301      	movs	r3, #1
 8000dfe:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000e00:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000e04:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e06:	2302      	movs	r3, #2
 8000e08:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e0a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000e0e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000e10:	2310      	movs	r3, #16
 8000e12:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000e14:	23c0      	movs	r3, #192	@ 0xc0
 8000e16:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000e18:	2302      	movs	r3, #2
 8000e1a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000e1c:	2302      	movs	r3, #2
 8000e1e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000e20:	2302      	movs	r3, #2
 8000e22:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e24:	f107 031c 	add.w	r3, r7, #28
 8000e28:	4618      	mov	r0, r3
 8000e2a:	f00d f8bd 	bl	800dfa8 <HAL_RCC_OscConfig>
 8000e2e:	4603      	mov	r3, r0
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d001      	beq.n	8000e38 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000e34:	f000 fad4 	bl	80013e0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e38:	230f      	movs	r3, #15
 8000e3a:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e3c:	2302      	movs	r3, #2
 8000e3e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e40:	2300      	movs	r3, #0
 8000e42:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000e44:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000e48:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8000e4a:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000e4e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000e50:	f107 0308 	add.w	r3, r7, #8
 8000e54:	2103      	movs	r1, #3
 8000e56:	4618      	mov	r0, r3
 8000e58:	f00c fd92 	bl	800d980 <HAL_RCC_ClockConfig>
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d001      	beq.n	8000e66 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000e62:	f000 fabd 	bl	80013e0 <Error_Handler>
  }
}
 8000e66:	bf00      	nop
 8000e68:	3750      	adds	r7, #80	@ 0x50
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bd80      	pop	{r7, pc}
 8000e6e:	bf00      	nop
 8000e70:	40023800 	.word	0x40023800
 8000e74:	40007000 	.word	0x40007000

08000e78 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b084      	sub	sp, #16
 8000e7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000e7e:	463b      	mov	r3, r7
 8000e80:	2200      	movs	r2, #0
 8000e82:	601a      	str	r2, [r3, #0]
 8000e84:	605a      	str	r2, [r3, #4]
 8000e86:	609a      	str	r2, [r3, #8]
 8000e88:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000e8a:	4b21      	ldr	r3, [pc, #132]	@ (8000f10 <MX_ADC1_Init+0x98>)
 8000e8c:	4a21      	ldr	r2, [pc, #132]	@ (8000f14 <MX_ADC1_Init+0x9c>)
 8000e8e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000e90:	4b1f      	ldr	r3, [pc, #124]	@ (8000f10 <MX_ADC1_Init+0x98>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000e96:	4b1e      	ldr	r3, [pc, #120]	@ (8000f10 <MX_ADC1_Init+0x98>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000e9c:	4b1c      	ldr	r3, [pc, #112]	@ (8000f10 <MX_ADC1_Init+0x98>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000ea2:	4b1b      	ldr	r3, [pc, #108]	@ (8000f10 <MX_ADC1_Init+0x98>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000ea8:	4b19      	ldr	r3, [pc, #100]	@ (8000f10 <MX_ADC1_Init+0x98>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000eb0:	4b17      	ldr	r3, [pc, #92]	@ (8000f10 <MX_ADC1_Init+0x98>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000eb6:	4b16      	ldr	r3, [pc, #88]	@ (8000f10 <MX_ADC1_Init+0x98>)
 8000eb8:	4a17      	ldr	r2, [pc, #92]	@ (8000f18 <MX_ADC1_Init+0xa0>)
 8000eba:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ebc:	4b14      	ldr	r3, [pc, #80]	@ (8000f10 <MX_ADC1_Init+0x98>)
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000ec2:	4b13      	ldr	r3, [pc, #76]	@ (8000f10 <MX_ADC1_Init+0x98>)
 8000ec4:	2201      	movs	r2, #1
 8000ec6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000ec8:	4b11      	ldr	r3, [pc, #68]	@ (8000f10 <MX_ADC1_Init+0x98>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ed0:	4b0f      	ldr	r3, [pc, #60]	@ (8000f10 <MX_ADC1_Init+0x98>)
 8000ed2:	2201      	movs	r2, #1
 8000ed4:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000ed6:	480e      	ldr	r0, [pc, #56]	@ (8000f10 <MX_ADC1_Init+0x98>)
 8000ed8:	f00a ffc6 	bl	800be68 <HAL_ADC_Init>
 8000edc:	4603      	mov	r3, r0
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d001      	beq.n	8000ee6 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000ee2:	f000 fa7d 	bl	80013e0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8000ee6:	230f      	movs	r3, #15
 8000ee8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000eea:	2301      	movs	r3, #1
 8000eec:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ef2:	463b      	mov	r3, r7
 8000ef4:	4619      	mov	r1, r3
 8000ef6:	4806      	ldr	r0, [pc, #24]	@ (8000f10 <MX_ADC1_Init+0x98>)
 8000ef8:	f00b f998 	bl	800c22c <HAL_ADC_ConfigChannel>
 8000efc:	4603      	mov	r3, r0
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d001      	beq.n	8000f06 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000f02:	f000 fa6d 	bl	80013e0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000f06:	bf00      	nop
 8000f08:	3710      	adds	r7, #16
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bd80      	pop	{r7, pc}
 8000f0e:	bf00      	nop
 8000f10:	2000007c 	.word	0x2000007c
 8000f14:	40012000 	.word	0x40012000
 8000f18:	0f000001 	.word	0x0f000001

08000f1c <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b08a      	sub	sp, #40	@ 0x28
 8000f20:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000f22:	4b58      	ldr	r3, [pc, #352]	@ (8001084 <MX_CAN1_Init+0x168>)
 8000f24:	4a58      	ldr	r2, [pc, #352]	@ (8001088 <MX_CAN1_Init+0x16c>)
 8000f26:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 3;
 8000f28:	4b56      	ldr	r3, [pc, #344]	@ (8001084 <MX_CAN1_Init+0x168>)
 8000f2a:	2203      	movs	r2, #3
 8000f2c:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000f2e:	4b55      	ldr	r3, [pc, #340]	@ (8001084 <MX_CAN1_Init+0x168>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000f34:	4b53      	ldr	r3, [pc, #332]	@ (8001084 <MX_CAN1_Init+0x168>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_11TQ;
 8000f3a:	4b52      	ldr	r3, [pc, #328]	@ (8001084 <MX_CAN1_Init+0x168>)
 8000f3c:	f44f 2220 	mov.w	r2, #655360	@ 0xa0000
 8000f40:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_4TQ;
 8000f42:	4b50      	ldr	r3, [pc, #320]	@ (8001084 <MX_CAN1_Init+0x168>)
 8000f44:	f44f 1240 	mov.w	r2, #3145728	@ 0x300000
 8000f48:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000f4a:	4b4e      	ldr	r3, [pc, #312]	@ (8001084 <MX_CAN1_Init+0x168>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000f50:	4b4c      	ldr	r3, [pc, #304]	@ (8001084 <MX_CAN1_Init+0x168>)
 8000f52:	2200      	movs	r2, #0
 8000f54:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000f56:	4b4b      	ldr	r3, [pc, #300]	@ (8001084 <MX_CAN1_Init+0x168>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000f5c:	4b49      	ldr	r3, [pc, #292]	@ (8001084 <MX_CAN1_Init+0x168>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000f62:	4b48      	ldr	r3, [pc, #288]	@ (8001084 <MX_CAN1_Init+0x168>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000f68:	4b46      	ldr	r3, [pc, #280]	@ (8001084 <MX_CAN1_Init+0x168>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000f6e:	4845      	ldr	r0, [pc, #276]	@ (8001084 <MX_CAN1_Init+0x168>)
 8000f70:	f00b fb8a 	bl	800c688 <HAL_CAN_Init>
 8000f74:	4603      	mov	r3, r0
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d001      	beq.n	8000f7e <MX_CAN1_Init+0x62>
  {
    Error_Handler();
 8000f7a:	f000 fa31 	bl	80013e0 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  CAN_FilterTypeDef canFilter;

  canFilter.FilterActivation = CAN_FILTER_ENABLE;
 8000f7e:	2301      	movs	r3, #1
 8000f80:	623b      	str	r3, [r7, #32]
  canFilter.FilterBank = 1;
 8000f82:	2301      	movs	r3, #1
 8000f84:	617b      	str	r3, [r7, #20]
  canFilter.FilterFIFOAssignment = CAN_RX_FIFO0;
 8000f86:	2300      	movs	r3, #0
 8000f88:	613b      	str	r3, [r7, #16]
  canFilter.FilterIdHigh = CAN_FAULT_ID << 5;
 8000f8a:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8000f8e:	603b      	str	r3, [r7, #0]
  canFilter.FilterIdLow = 0x0000;
 8000f90:	2300      	movs	r3, #0
 8000f92:	607b      	str	r3, [r7, #4]
  canFilter.FilterMaskIdHigh = 0xFFE0;
 8000f94:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8000f98:	60bb      	str	r3, [r7, #8]
  canFilter.FilterMaskIdLow = 0x0000;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	60fb      	str	r3, [r7, #12]
  canFilter.FilterMode = CAN_FILTERMODE_IDMASK;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	61bb      	str	r3, [r7, #24]
  canFilter.FilterScale = CAN_FILTERSCALE_32BIT;
 8000fa2:	2301      	movs	r3, #1
 8000fa4:	61fb      	str	r3, [r7, #28]
  HAL_CAN_ConfigFilter(&hcan1, &canFilter);
 8000fa6:	463b      	mov	r3, r7
 8000fa8:	4619      	mov	r1, r3
 8000faa:	4836      	ldr	r0, [pc, #216]	@ (8001084 <MX_CAN1_Init+0x168>)
 8000fac:	f00b fc68 	bl	800c880 <HAL_CAN_ConfigFilter>

  canFilter.FilterBank = 2;
 8000fb0:	2302      	movs	r3, #2
 8000fb2:	617b      	str	r3, [r7, #20]
  canFilter.FilterIdHigh = CAN_START_BALANCE_ID << 5;
 8000fb4:	f647 43c0 	movw	r3, #31936	@ 0x7cc0
 8000fb8:	603b      	str	r3, [r7, #0]
  HAL_CAN_ConfigFilter(&hcan1, &canFilter);
 8000fba:	463b      	mov	r3, r7
 8000fbc:	4619      	mov	r1, r3
 8000fbe:	4831      	ldr	r0, [pc, #196]	@ (8001084 <MX_CAN1_Init+0x168>)
 8000fc0:	f00b fc5e 	bl	800c880 <HAL_CAN_ConfigFilter>

  canFilter.FilterBank = 3;
 8000fc4:	2303      	movs	r3, #3
 8000fc6:	617b      	str	r3, [r7, #20]
  canFilter.FilterIdHigh = CAN_STOP_BALANCE_ID << 5;
 8000fc8:	f647 43e0 	movw	r3, #31968	@ 0x7ce0
 8000fcc:	603b      	str	r3, [r7, #0]
  HAL_CAN_ConfigFilter(&hcan1, &canFilter);
 8000fce:	463b      	mov	r3, r7
 8000fd0:	4619      	mov	r1, r3
 8000fd2:	482c      	ldr	r0, [pc, #176]	@ (8001084 <MX_CAN1_Init+0x168>)
 8000fd4:	f00b fc54 	bl	800c880 <HAL_CAN_ConfigFilter>

  canFilter.FilterBank = 4;
 8000fd8:	2304      	movs	r3, #4
 8000fda:	617b      	str	r3, [r7, #20]
  canFilter.FilterFIFOAssignment = CAN_RX_FIFO1;
 8000fdc:	2301      	movs	r3, #1
 8000fde:	613b      	str	r3, [r7, #16]
  canFilter.FilterIdHigh = CAN_PACK_STATUS_ID << 5;
 8000fe0:	f44f 4304 	mov.w	r3, #33792	@ 0x8400
 8000fe4:	603b      	str	r3, [r7, #0]
  HAL_CAN_ConfigFilter(&hcan1, &canFilter);
 8000fe6:	463b      	mov	r3, r7
 8000fe8:	4619      	mov	r1, r3
 8000fea:	4826      	ldr	r0, [pc, #152]	@ (8001084 <MX_CAN1_Init+0x168>)
 8000fec:	f00b fc48 	bl	800c880 <HAL_CAN_ConfigFilter>

  switch(moduleID) {
 8000ff0:	4b26      	ldr	r3, [pc, #152]	@ (800108c <MX_CAN1_Init+0x170>)
 8000ff2:	781b      	ldrb	r3, [r3, #0]
 8000ff4:	2b01      	cmp	r3, #1
 8000ff6:	d12a      	bne.n	800104e <MX_CAN1_Init+0x132>
  	  case 1:
  		  canFilter.FilterBank = 5;
 8000ff8:	2305      	movs	r3, #5
 8000ffa:	617b      	str	r3, [r7, #20]
  		  canFilter.FilterFIFOAssignment = CAN_RX_FIFO0;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	613b      	str	r3, [r7, #16]
  		  canFilter.FilterIdHigh = CAN_M2_VMIN_ID << 5;
 8001000:	f647 4320 	movw	r3, #31776	@ 0x7c20
 8001004:	603b      	str	r3, [r7, #0]
  		  HAL_CAN_ConfigFilter(&hcan1, &canFilter);
 8001006:	463b      	mov	r3, r7
 8001008:	4619      	mov	r1, r3
 800100a:	481e      	ldr	r0, [pc, #120]	@ (8001084 <MX_CAN1_Init+0x168>)
 800100c:	f00b fc38 	bl	800c880 <HAL_CAN_ConfigFilter>

  		  canFilter.FilterBank = 6;
 8001010:	2306      	movs	r3, #6
 8001012:	617b      	str	r3, [r7, #20]
  		  canFilter.FilterIdHigh = CAN_M3_VMIN_ID << 5;
 8001014:	f647 4340 	movw	r3, #31808	@ 0x7c40
 8001018:	603b      	str	r3, [r7, #0]
  		  HAL_CAN_ConfigFilter(&hcan1, &canFilter);
 800101a:	463b      	mov	r3, r7
 800101c:	4619      	mov	r1, r3
 800101e:	4819      	ldr	r0, [pc, #100]	@ (8001084 <MX_CAN1_Init+0x168>)
 8001020:	f00b fc2e 	bl	800c880 <HAL_CAN_ConfigFilter>

  		  canFilter.FilterBank = 7;
 8001024:	2307      	movs	r3, #7
 8001026:	617b      	str	r3, [r7, #20]
  		  canFilter.FilterIdHigh = CAN_M4_VMIN_ID << 5;
 8001028:	f647 4360 	movw	r3, #31840	@ 0x7c60
 800102c:	603b      	str	r3, [r7, #0]
  		  HAL_CAN_ConfigFilter(&hcan1, &canFilter);
 800102e:	463b      	mov	r3, r7
 8001030:	4619      	mov	r1, r3
 8001032:	4814      	ldr	r0, [pc, #80]	@ (8001084 <MX_CAN1_Init+0x168>)
 8001034:	f00b fc24 	bl	800c880 <HAL_CAN_ConfigFilter>

  		  canFilter.FilterBank = 8;
 8001038:	2308      	movs	r3, #8
 800103a:	617b      	str	r3, [r7, #20]
  		  canFilter.FilterIdHigh = CAN_M5_VMIN_ID << 5;
 800103c:	f44f 43f9 	mov.w	r3, #31872	@ 0x7c80
 8001040:	603b      	str	r3, [r7, #0]
  		  HAL_CAN_ConfigFilter(&hcan1, &canFilter);
 8001042:	463b      	mov	r3, r7
 8001044:	4619      	mov	r1, r3
 8001046:	480f      	ldr	r0, [pc, #60]	@ (8001084 <MX_CAN1_Init+0x168>)
 8001048:	f00b fc1a 	bl	800c880 <HAL_CAN_ConfigFilter>
  		  break;
 800104c:	e016      	b.n	800107c <MX_CAN1_Init+0x160>
  	  default:
  		  canFilter.FilterBank = 5;
 800104e:	2305      	movs	r3, #5
 8001050:	617b      	str	r3, [r7, #20]
  		  canFilter.FilterFIFOAssignment = CAN_RX_FIFO0;
 8001052:	2300      	movs	r3, #0
 8001054:	613b      	str	r3, [r7, #16]
  		  canFilter.FilterIdHigh = CAN_EXTRACT_VMIN_ID << 5;
 8001056:	f44f 43f8 	mov.w	r3, #31744	@ 0x7c00
 800105a:	603b      	str	r3, [r7, #0]
  		  HAL_CAN_ConfigFilter(&hcan1, &canFilter);
 800105c:	463b      	mov	r3, r7
 800105e:	4619      	mov	r1, r3
 8001060:	4808      	ldr	r0, [pc, #32]	@ (8001084 <MX_CAN1_Init+0x168>)
 8001062:	f00b fc0d 	bl	800c880 <HAL_CAN_ConfigFilter>

  		  canFilter.FilterBank = 6;
 8001066:	2306      	movs	r3, #6
 8001068:	617b      	str	r3, [r7, #20]
  		  canFilter.FilterIdHigh = CAN_MIN_VCELL_ID << 5;
 800106a:	f647 43a0 	movw	r3, #31904	@ 0x7ca0
 800106e:	603b      	str	r3, [r7, #0]
  		  HAL_CAN_ConfigFilter(&hcan1, &canFilter);
 8001070:	463b      	mov	r3, r7
 8001072:	4619      	mov	r1, r3
 8001074:	4803      	ldr	r0, [pc, #12]	@ (8001084 <MX_CAN1_Init+0x168>)
 8001076:	f00b fc03 	bl	800c880 <HAL_CAN_ConfigFilter>
  		  break;
 800107a:	bf00      	nop
  }

  /* USER CODE END CAN1_Init 2 */

}
 800107c:	bf00      	nop
 800107e:	3728      	adds	r7, #40	@ 0x28
 8001080:	46bd      	mov	sp, r7
 8001082:	bd80      	pop	{r7, pc}
 8001084:	200000c4 	.word	0x200000c4
 8001088:	40006400 	.word	0x40006400
 800108c:	08010140 	.word	0x08010140

08001090 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001094:	4b17      	ldr	r3, [pc, #92]	@ (80010f4 <MX_SPI1_Init+0x64>)
 8001096:	4a18      	ldr	r2, [pc, #96]	@ (80010f8 <MX_SPI1_Init+0x68>)
 8001098:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800109a:	4b16      	ldr	r3, [pc, #88]	@ (80010f4 <MX_SPI1_Init+0x64>)
 800109c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80010a0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80010a2:	4b14      	ldr	r3, [pc, #80]	@ (80010f4 <MX_SPI1_Init+0x64>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80010a8:	4b12      	ldr	r3, [pc, #72]	@ (80010f4 <MX_SPI1_Init+0x64>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80010ae:	4b11      	ldr	r3, [pc, #68]	@ (80010f4 <MX_SPI1_Init+0x64>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80010b4:	4b0f      	ldr	r3, [pc, #60]	@ (80010f4 <MX_SPI1_Init+0x64>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80010ba:	4b0e      	ldr	r3, [pc, #56]	@ (80010f4 <MX_SPI1_Init+0x64>)
 80010bc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80010c0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80010c2:	4b0c      	ldr	r3, [pc, #48]	@ (80010f4 <MX_SPI1_Init+0x64>)
 80010c4:	2220      	movs	r2, #32
 80010c6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80010c8:	4b0a      	ldr	r3, [pc, #40]	@ (80010f4 <MX_SPI1_Init+0x64>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80010ce:	4b09      	ldr	r3, [pc, #36]	@ (80010f4 <MX_SPI1_Init+0x64>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80010d4:	4b07      	ldr	r3, [pc, #28]	@ (80010f4 <MX_SPI1_Init+0x64>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80010da:	4b06      	ldr	r3, [pc, #24]	@ (80010f4 <MX_SPI1_Init+0x64>)
 80010dc:	220a      	movs	r2, #10
 80010de:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80010e0:	4804      	ldr	r0, [pc, #16]	@ (80010f4 <MX_SPI1_Init+0x64>)
 80010e2:	f00d f9ff 	bl	800e4e4 <HAL_SPI_Init>
 80010e6:	4603      	mov	r3, r0
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d001      	beq.n	80010f0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80010ec:	f000 f978 	bl	80013e0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80010f0:	bf00      	nop
 80010f2:	bd80      	pop	{r7, pc}
 80010f4:	200000ec 	.word	0x200000ec
 80010f8:	40013000 	.word	0x40013000

080010fc <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8001100:	4b17      	ldr	r3, [pc, #92]	@ (8001160 <MX_SPI3_Init+0x64>)
 8001102:	4a18      	ldr	r2, [pc, #96]	@ (8001164 <MX_SPI3_Init+0x68>)
 8001104:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001106:	4b16      	ldr	r3, [pc, #88]	@ (8001160 <MX_SPI3_Init+0x64>)
 8001108:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800110c:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800110e:	4b14      	ldr	r3, [pc, #80]	@ (8001160 <MX_SPI3_Init+0x64>)
 8001110:	2200      	movs	r2, #0
 8001112:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001114:	4b12      	ldr	r3, [pc, #72]	@ (8001160 <MX_SPI3_Init+0x64>)
 8001116:	2200      	movs	r2, #0
 8001118:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800111a:	4b11      	ldr	r3, [pc, #68]	@ (8001160 <MX_SPI3_Init+0x64>)
 800111c:	2200      	movs	r2, #0
 800111e:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001120:	4b0f      	ldr	r3, [pc, #60]	@ (8001160 <MX_SPI3_Init+0x64>)
 8001122:	2200      	movs	r2, #0
 8001124:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001126:	4b0e      	ldr	r3, [pc, #56]	@ (8001160 <MX_SPI3_Init+0x64>)
 8001128:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800112c:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 800112e:	4b0c      	ldr	r3, [pc, #48]	@ (8001160 <MX_SPI3_Init+0x64>)
 8001130:	2220      	movs	r2, #32
 8001132:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001134:	4b0a      	ldr	r3, [pc, #40]	@ (8001160 <MX_SPI3_Init+0x64>)
 8001136:	2200      	movs	r2, #0
 8001138:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800113a:	4b09      	ldr	r3, [pc, #36]	@ (8001160 <MX_SPI3_Init+0x64>)
 800113c:	2200      	movs	r2, #0
 800113e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001140:	4b07      	ldr	r3, [pc, #28]	@ (8001160 <MX_SPI3_Init+0x64>)
 8001142:	2200      	movs	r2, #0
 8001144:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 10;
 8001146:	4b06      	ldr	r3, [pc, #24]	@ (8001160 <MX_SPI3_Init+0x64>)
 8001148:	220a      	movs	r2, #10
 800114a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800114c:	4804      	ldr	r0, [pc, #16]	@ (8001160 <MX_SPI3_Init+0x64>)
 800114e:	f00d f9c9 	bl	800e4e4 <HAL_SPI_Init>
 8001152:	4603      	mov	r3, r0
 8001154:	2b00      	cmp	r3, #0
 8001156:	d001      	beq.n	800115c <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8001158:	f000 f942 	bl	80013e0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800115c:	bf00      	nop
 800115e:	bd80      	pop	{r7, pc}
 8001160:	20000144 	.word	0x20000144
 8001164:	40003c00 	.word	0x40003c00

08001168 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b086      	sub	sp, #24
 800116c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800116e:	f107 0308 	add.w	r3, r7, #8
 8001172:	2200      	movs	r2, #0
 8001174:	601a      	str	r2, [r3, #0]
 8001176:	605a      	str	r2, [r3, #4]
 8001178:	609a      	str	r2, [r3, #8]
 800117a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800117c:	463b      	mov	r3, r7
 800117e:	2200      	movs	r2, #0
 8001180:	601a      	str	r2, [r3, #0]
 8001182:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001184:	4b21      	ldr	r3, [pc, #132]	@ (800120c <MX_TIM2_Init+0xa4>)
 8001186:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800118a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 187;
 800118c:	4b1f      	ldr	r3, [pc, #124]	@ (800120c <MX_TIM2_Init+0xa4>)
 800118e:	22bb      	movs	r2, #187	@ 0xbb
 8001190:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001192:	4b1e      	ldr	r3, [pc, #120]	@ (800120c <MX_TIM2_Init+0xa4>)
 8001194:	2200      	movs	r2, #0
 8001196:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 255;
 8001198:	4b1c      	ldr	r3, [pc, #112]	@ (800120c <MX_TIM2_Init+0xa4>)
 800119a:	22ff      	movs	r2, #255	@ 0xff
 800119c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800119e:	4b1b      	ldr	r3, [pc, #108]	@ (800120c <MX_TIM2_Init+0xa4>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011a4:	4b19      	ldr	r3, [pc, #100]	@ (800120c <MX_TIM2_Init+0xa4>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80011aa:	4818      	ldr	r0, [pc, #96]	@ (800120c <MX_TIM2_Init+0xa4>)
 80011ac:	f00d fdec 	bl	800ed88 <HAL_TIM_Base_Init>
 80011b0:	4603      	mov	r3, r0
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d001      	beq.n	80011ba <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 80011b6:	f000 f913 	bl	80013e0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011ba:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80011be:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80011c0:	f107 0308 	add.w	r3, r7, #8
 80011c4:	4619      	mov	r1, r3
 80011c6:	4811      	ldr	r0, [pc, #68]	@ (800120c <MX_TIM2_Init+0xa4>)
 80011c8:	f00d ffbd 	bl	800f146 <HAL_TIM_ConfigClockSource>
 80011cc:	4603      	mov	r3, r0
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d001      	beq.n	80011d6 <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 80011d2:	f000 f905 	bl	80013e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011d6:	2300      	movs	r3, #0
 80011d8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011da:	2300      	movs	r3, #0
 80011dc:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80011de:	463b      	mov	r3, r7
 80011e0:	4619      	mov	r1, r3
 80011e2:	480a      	ldr	r0, [pc, #40]	@ (800120c <MX_TIM2_Init+0xa4>)
 80011e4:	f00e f9e4 	bl	800f5b0 <HAL_TIMEx_MasterConfigSynchronization>
 80011e8:	4603      	mov	r3, r0
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d001      	beq.n	80011f2 <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 80011ee:	f000 f8f7 	bl	80013e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */
  HAL_NVIC_EnableIRQ(TIM2_IRQn);  // Enable TIM2 Interrupt in NVIC
 80011f2:	201c      	movs	r0, #28
 80011f4:	f00c f9fb 	bl	800d5ee <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);  // Set Priority
 80011f8:	2200      	movs	r2, #0
 80011fa:	2101      	movs	r1, #1
 80011fc:	201c      	movs	r0, #28
 80011fe:	f00c f9da 	bl	800d5b6 <HAL_NVIC_SetPriority>
  /* USER CODE END TIM2_Init 2 */

}
 8001202:	bf00      	nop
 8001204:	3718      	adds	r7, #24
 8001206:	46bd      	mov	sp, r7
 8001208:	bd80      	pop	{r7, pc}
 800120a:	bf00      	nop
 800120c:	2000019c 	.word	0x2000019c

08001210 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b08a      	sub	sp, #40	@ 0x28
 8001214:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001216:	f107 0314 	add.w	r3, r7, #20
 800121a:	2200      	movs	r2, #0
 800121c:	601a      	str	r2, [r3, #0]
 800121e:	605a      	str	r2, [r3, #4]
 8001220:	609a      	str	r2, [r3, #8]
 8001222:	60da      	str	r2, [r3, #12]
 8001224:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001226:	2300      	movs	r3, #0
 8001228:	613b      	str	r3, [r7, #16]
 800122a:	4b4d      	ldr	r3, [pc, #308]	@ (8001360 <MX_GPIO_Init+0x150>)
 800122c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800122e:	4a4c      	ldr	r2, [pc, #304]	@ (8001360 <MX_GPIO_Init+0x150>)
 8001230:	f043 0304 	orr.w	r3, r3, #4
 8001234:	6313      	str	r3, [r2, #48]	@ 0x30
 8001236:	4b4a      	ldr	r3, [pc, #296]	@ (8001360 <MX_GPIO_Init+0x150>)
 8001238:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800123a:	f003 0304 	and.w	r3, r3, #4
 800123e:	613b      	str	r3, [r7, #16]
 8001240:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001242:	2300      	movs	r3, #0
 8001244:	60fb      	str	r3, [r7, #12]
 8001246:	4b46      	ldr	r3, [pc, #280]	@ (8001360 <MX_GPIO_Init+0x150>)
 8001248:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800124a:	4a45      	ldr	r2, [pc, #276]	@ (8001360 <MX_GPIO_Init+0x150>)
 800124c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001250:	6313      	str	r3, [r2, #48]	@ 0x30
 8001252:	4b43      	ldr	r3, [pc, #268]	@ (8001360 <MX_GPIO_Init+0x150>)
 8001254:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001256:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800125a:	60fb      	str	r3, [r7, #12]
 800125c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800125e:	2300      	movs	r3, #0
 8001260:	60bb      	str	r3, [r7, #8]
 8001262:	4b3f      	ldr	r3, [pc, #252]	@ (8001360 <MX_GPIO_Init+0x150>)
 8001264:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001266:	4a3e      	ldr	r2, [pc, #248]	@ (8001360 <MX_GPIO_Init+0x150>)
 8001268:	f043 0301 	orr.w	r3, r3, #1
 800126c:	6313      	str	r3, [r2, #48]	@ 0x30
 800126e:	4b3c      	ldr	r3, [pc, #240]	@ (8001360 <MX_GPIO_Init+0x150>)
 8001270:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001272:	f003 0301 	and.w	r3, r3, #1
 8001276:	60bb      	str	r3, [r7, #8]
 8001278:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800127a:	2300      	movs	r3, #0
 800127c:	607b      	str	r3, [r7, #4]
 800127e:	4b38      	ldr	r3, [pc, #224]	@ (8001360 <MX_GPIO_Init+0x150>)
 8001280:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001282:	4a37      	ldr	r2, [pc, #220]	@ (8001360 <MX_GPIO_Init+0x150>)
 8001284:	f043 0302 	orr.w	r3, r3, #2
 8001288:	6313      	str	r3, [r2, #48]	@ 0x30
 800128a:	4b35      	ldr	r3, [pc, #212]	@ (8001360 <MX_GPIO_Init+0x150>)
 800128c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800128e:	f003 0302 	and.w	r3, r3, #2
 8001292:	607b      	str	r3, [r7, #4]
 8001294:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001296:	2300      	movs	r3, #0
 8001298:	603b      	str	r3, [r7, #0]
 800129a:	4b31      	ldr	r3, [pc, #196]	@ (8001360 <MX_GPIO_Init+0x150>)
 800129c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800129e:	4a30      	ldr	r2, [pc, #192]	@ (8001360 <MX_GPIO_Init+0x150>)
 80012a0:	f043 0308 	orr.w	r3, r3, #8
 80012a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80012a6:	4b2e      	ldr	r3, [pc, #184]	@ (8001360 <MX_GPIO_Init+0x150>)
 80012a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012aa:	f003 0308 	and.w	r3, r3, #8
 80012ae:	603b      	str	r3, [r7, #0]
 80012b0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_4|GPIO_PIN_7
 80012b2:	2200      	movs	r2, #0
 80012b4:	f246 3190 	movw	r1, #25488	@ 0x6390
 80012b8:	482a      	ldr	r0, [pc, #168]	@ (8001364 <MX_GPIO_Init+0x154>)
 80012ba:	f00c fb47 	bl	800d94c <HAL_GPIO_WritePin>
                          |GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_8
 80012be:	2200      	movs	r2, #0
 80012c0:	f248 111c 	movw	r1, #33052	@ 0x811c
 80012c4:	4828      	ldr	r0, [pc, #160]	@ (8001368 <MX_GPIO_Init+0x158>)
 80012c6:	f00c fb41 	bl	800d94c <HAL_GPIO_WritePin>
                          |GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 80012ca:	2200      	movs	r2, #0
 80012cc:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80012d0:	4826      	ldr	r0, [pc, #152]	@ (800136c <MX_GPIO_Init+0x15c>)
 80012d2:	f00c fb3b 	bl	800d94c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 80012d6:	2200      	movs	r2, #0
 80012d8:	2104      	movs	r1, #4
 80012da:	4825      	ldr	r0, [pc, #148]	@ (8001370 <MX_GPIO_Init+0x160>)
 80012dc:	f00c fb36 	bl	800d94c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 PC4 PC7
                           PC8 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_4|GPIO_PIN_7
 80012e0:	f246 3390 	movw	r3, #25488	@ 0x6390
 80012e4:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012e6:	2301      	movs	r3, #1
 80012e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ea:	2300      	movs	r3, #0
 80012ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012ee:	2300      	movs	r3, #0
 80012f0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012f2:	f107 0314 	add.w	r3, r7, #20
 80012f6:	4619      	mov	r1, r3
 80012f8:	481a      	ldr	r0, [pc, #104]	@ (8001364 <MX_GPIO_Init+0x154>)
 80012fa:	f00c f993 	bl	800d624 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 PA3 PA4 PA8
                           PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_8
 80012fe:	f248 131c 	movw	r3, #33052	@ 0x811c
 8001302:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001304:	2301      	movs	r3, #1
 8001306:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001308:	2300      	movs	r3, #0
 800130a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800130c:	2300      	movs	r3, #0
 800130e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001310:	f107 0314 	add.w	r3, r7, #20
 8001314:	4619      	mov	r1, r3
 8001316:	4814      	ldr	r0, [pc, #80]	@ (8001368 <MX_GPIO_Init+0x158>)
 8001318:	f00c f984 	bl	800d624 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 800131c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001320:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001322:	2301      	movs	r3, #1
 8001324:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001326:	2300      	movs	r3, #0
 8001328:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800132a:	2300      	movs	r3, #0
 800132c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800132e:	f107 0314 	add.w	r3, r7, #20
 8001332:	4619      	mov	r1, r3
 8001334:	480d      	ldr	r0, [pc, #52]	@ (800136c <MX_GPIO_Init+0x15c>)
 8001336:	f00c f975 	bl	800d624 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800133a:	2304      	movs	r3, #4
 800133c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800133e:	2301      	movs	r3, #1
 8001340:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001342:	2300      	movs	r3, #0
 8001344:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001346:	2300      	movs	r3, #0
 8001348:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800134a:	f107 0314 	add.w	r3, r7, #20
 800134e:	4619      	mov	r1, r3
 8001350:	4807      	ldr	r0, [pc, #28]	@ (8001370 <MX_GPIO_Init+0x160>)
 8001352:	f00c f967 	bl	800d624 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001356:	bf00      	nop
 8001358:	3728      	adds	r7, #40	@ 0x28
 800135a:	46bd      	mov	sp, r7
 800135c:	bd80      	pop	{r7, pc}
 800135e:	bf00      	nop
 8001360:	40023800 	.word	0x40023800
 8001364:	40020800 	.word	0x40020800
 8001368:	40020000 	.word	0x40020000
 800136c:	40020400 	.word	0x40020400
 8001370:	40020c00 	.word	0x40020c00

08001374 <TIM2_IRQHandler>:

/* USER CODE BEGIN 4 */
void TIM2_IRQHandler(void)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	af00      	add	r7, sp, #0
    HAL_TIM_IRQHandler(&htim2);  // Call HAL's IRQ handler
 8001378:	4802      	ldr	r0, [pc, #8]	@ (8001384 <TIM2_IRQHandler+0x10>)
 800137a:	f00d fdf4 	bl	800ef66 <HAL_TIM_IRQHandler>
}
 800137e:	bf00      	nop
 8001380:	bd80      	pop	{r7, pc}
 8001382:	bf00      	nop
 8001384:	2000019c 	.word	0x2000019c

08001388 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001388:	b480      	push	{r7}
 800138a:	b083      	sub	sp, #12
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM2) {
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001398:	d113      	bne.n	80013c2 <HAL_TIM_PeriodElapsedCallback+0x3a>
        transmitCounter++;
 800139a:	4b0d      	ldr	r3, [pc, #52]	@ (80013d0 <HAL_TIM_PeriodElapsedCallback+0x48>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	3301      	adds	r3, #1
 80013a0:	4a0b      	ldr	r2, [pc, #44]	@ (80013d0 <HAL_TIM_PeriodElapsedCallback+0x48>)
 80013a2:	6013      	str	r3, [r2, #0]
        measureCounter++;
 80013a4:	4b0b      	ldr	r3, [pc, #44]	@ (80013d4 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	3301      	adds	r3, #1
 80013aa:	4a0a      	ldr	r2, [pc, #40]	@ (80013d4 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 80013ac:	6013      	str	r3, [r2, #0]
        balanceCounter++;
 80013ae:	4b0a      	ldr	r3, [pc, #40]	@ (80013d8 <HAL_TIM_PeriodElapsedCallback+0x50>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	3301      	adds	r3, #1
 80013b4:	4a08      	ldr	r2, [pc, #32]	@ (80013d8 <HAL_TIM_PeriodElapsedCallback+0x50>)
 80013b6:	6013      	str	r3, [r2, #0]
        diagnosisCounter++;
 80013b8:	4b08      	ldr	r3, [pc, #32]	@ (80013dc <HAL_TIM_PeriodElapsedCallback+0x54>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	3301      	adds	r3, #1
 80013be:	4a07      	ldr	r2, [pc, #28]	@ (80013dc <HAL_TIM_PeriodElapsedCallback+0x54>)
 80013c0:	6013      	str	r3, [r2, #0]
    }
}
 80013c2:	bf00      	nop
 80013c4:	370c      	adds	r7, #12
 80013c6:	46bd      	mov	sp, r7
 80013c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013cc:	4770      	bx	lr
 80013ce:	bf00      	nop
 80013d0:	200003e8 	.word	0x200003e8
 80013d4:	200003ec 	.word	0x200003ec
 80013d8:	200003f0 	.word	0x200003f0
 80013dc:	200003f4 	.word	0x200003f4

080013e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013e0:	b480      	push	{r7}
 80013e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013e4:	b672      	cpsid	i
}
 80013e6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013e8:	bf00      	nop
 80013ea:	e7fd      	b.n	80013e8 <Error_Handler+0x8>

080013ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013ec:	b480      	push	{r7}
 80013ee:	b083      	sub	sp, #12
 80013f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013f2:	2300      	movs	r3, #0
 80013f4:	607b      	str	r3, [r7, #4]
 80013f6:	4b10      	ldr	r3, [pc, #64]	@ (8001438 <HAL_MspInit+0x4c>)
 80013f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013fa:	4a0f      	ldr	r2, [pc, #60]	@ (8001438 <HAL_MspInit+0x4c>)
 80013fc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001400:	6453      	str	r3, [r2, #68]	@ 0x44
 8001402:	4b0d      	ldr	r3, [pc, #52]	@ (8001438 <HAL_MspInit+0x4c>)
 8001404:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001406:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800140a:	607b      	str	r3, [r7, #4]
 800140c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800140e:	2300      	movs	r3, #0
 8001410:	603b      	str	r3, [r7, #0]
 8001412:	4b09      	ldr	r3, [pc, #36]	@ (8001438 <HAL_MspInit+0x4c>)
 8001414:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001416:	4a08      	ldr	r2, [pc, #32]	@ (8001438 <HAL_MspInit+0x4c>)
 8001418:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800141c:	6413      	str	r3, [r2, #64]	@ 0x40
 800141e:	4b06      	ldr	r3, [pc, #24]	@ (8001438 <HAL_MspInit+0x4c>)
 8001420:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001422:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001426:	603b      	str	r3, [r7, #0]
 8001428:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800142a:	bf00      	nop
 800142c:	370c      	adds	r7, #12
 800142e:	46bd      	mov	sp, r7
 8001430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001434:	4770      	bx	lr
 8001436:	bf00      	nop
 8001438:	40023800 	.word	0x40023800

0800143c <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b08a      	sub	sp, #40	@ 0x28
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001444:	f107 0314 	add.w	r3, r7, #20
 8001448:	2200      	movs	r2, #0
 800144a:	601a      	str	r2, [r3, #0]
 800144c:	605a      	str	r2, [r3, #4]
 800144e:	609a      	str	r2, [r3, #8]
 8001450:	60da      	str	r2, [r3, #12]
 8001452:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	4a17      	ldr	r2, [pc, #92]	@ (80014b8 <HAL_ADC_MspInit+0x7c>)
 800145a:	4293      	cmp	r3, r2
 800145c:	d127      	bne.n	80014ae <HAL_ADC_MspInit+0x72>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800145e:	2300      	movs	r3, #0
 8001460:	613b      	str	r3, [r7, #16]
 8001462:	4b16      	ldr	r3, [pc, #88]	@ (80014bc <HAL_ADC_MspInit+0x80>)
 8001464:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001466:	4a15      	ldr	r2, [pc, #84]	@ (80014bc <HAL_ADC_MspInit+0x80>)
 8001468:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800146c:	6453      	str	r3, [r2, #68]	@ 0x44
 800146e:	4b13      	ldr	r3, [pc, #76]	@ (80014bc <HAL_ADC_MspInit+0x80>)
 8001470:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001472:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001476:	613b      	str	r3, [r7, #16]
 8001478:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800147a:	2300      	movs	r3, #0
 800147c:	60fb      	str	r3, [r7, #12]
 800147e:	4b0f      	ldr	r3, [pc, #60]	@ (80014bc <HAL_ADC_MspInit+0x80>)
 8001480:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001482:	4a0e      	ldr	r2, [pc, #56]	@ (80014bc <HAL_ADC_MspInit+0x80>)
 8001484:	f043 0304 	orr.w	r3, r3, #4
 8001488:	6313      	str	r3, [r2, #48]	@ 0x30
 800148a:	4b0c      	ldr	r3, [pc, #48]	@ (80014bc <HAL_ADC_MspInit+0x80>)
 800148c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800148e:	f003 0304 	and.w	r3, r3, #4
 8001492:	60fb      	str	r3, [r7, #12]
 8001494:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC5     ------> ADC1_IN15
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001496:	2320      	movs	r3, #32
 8001498:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800149a:	2303      	movs	r3, #3
 800149c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800149e:	2300      	movs	r3, #0
 80014a0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014a2:	f107 0314 	add.w	r3, r7, #20
 80014a6:	4619      	mov	r1, r3
 80014a8:	4805      	ldr	r0, [pc, #20]	@ (80014c0 <HAL_ADC_MspInit+0x84>)
 80014aa:	f00c f8bb 	bl	800d624 <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 80014ae:	bf00      	nop
 80014b0:	3728      	adds	r7, #40	@ 0x28
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bd80      	pop	{r7, pc}
 80014b6:	bf00      	nop
 80014b8:	40012000 	.word	0x40012000
 80014bc:	40023800 	.word	0x40023800
 80014c0:	40020800 	.word	0x40020800

080014c4 <HAL_CAN_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcan: CAN handle pointer
  * @retval None
  */
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b08a      	sub	sp, #40	@ 0x28
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014cc:	f107 0314 	add.w	r3, r7, #20
 80014d0:	2200      	movs	r2, #0
 80014d2:	601a      	str	r2, [r3, #0]
 80014d4:	605a      	str	r2, [r3, #4]
 80014d6:	609a      	str	r2, [r3, #8]
 80014d8:	60da      	str	r2, [r3, #12]
 80014da:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	4a21      	ldr	r2, [pc, #132]	@ (8001568 <HAL_CAN_MspInit+0xa4>)
 80014e2:	4293      	cmp	r3, r2
 80014e4:	d13c      	bne.n	8001560 <HAL_CAN_MspInit+0x9c>
  {
    /* USER CODE BEGIN CAN1_MspInit 0 */

    /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80014e6:	2300      	movs	r3, #0
 80014e8:	613b      	str	r3, [r7, #16]
 80014ea:	4b20      	ldr	r3, [pc, #128]	@ (800156c <HAL_CAN_MspInit+0xa8>)
 80014ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014ee:	4a1f      	ldr	r2, [pc, #124]	@ (800156c <HAL_CAN_MspInit+0xa8>)
 80014f0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80014f4:	6413      	str	r3, [r2, #64]	@ 0x40
 80014f6:	4b1d      	ldr	r3, [pc, #116]	@ (800156c <HAL_CAN_MspInit+0xa8>)
 80014f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80014fe:	613b      	str	r3, [r7, #16]
 8001500:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001502:	2300      	movs	r3, #0
 8001504:	60fb      	str	r3, [r7, #12]
 8001506:	4b19      	ldr	r3, [pc, #100]	@ (800156c <HAL_CAN_MspInit+0xa8>)
 8001508:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800150a:	4a18      	ldr	r2, [pc, #96]	@ (800156c <HAL_CAN_MspInit+0xa8>)
 800150c:	f043 0301 	orr.w	r3, r3, #1
 8001510:	6313      	str	r3, [r2, #48]	@ 0x30
 8001512:	4b16      	ldr	r3, [pc, #88]	@ (800156c <HAL_CAN_MspInit+0xa8>)
 8001514:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001516:	f003 0301 	and.w	r3, r3, #1
 800151a:	60fb      	str	r3, [r7, #12]
 800151c:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800151e:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8001522:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001524:	2302      	movs	r3, #2
 8001526:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001528:	2300      	movs	r3, #0
 800152a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800152c:	2303      	movs	r3, #3
 800152e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001530:	2309      	movs	r3, #9
 8001532:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001534:	f107 0314 	add.w	r3, r7, #20
 8001538:	4619      	mov	r1, r3
 800153a:	480d      	ldr	r0, [pc, #52]	@ (8001570 <HAL_CAN_MspInit+0xac>)
 800153c:	f00c f872 	bl	800d624 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8001540:	2200      	movs	r2, #0
 8001542:	2100      	movs	r1, #0
 8001544:	2014      	movs	r0, #20
 8001546:	f00c f836 	bl	800d5b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 800154a:	2014      	movs	r0, #20
 800154c:	f00c f84f 	bl	800d5ee <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 8001550:	2200      	movs	r2, #0
 8001552:	2100      	movs	r1, #0
 8001554:	2015      	movs	r0, #21
 8001556:	f00c f82e 	bl	800d5b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 800155a:	2015      	movs	r0, #21
 800155c:	f00c f847 	bl	800d5ee <HAL_NVIC_EnableIRQ>

    /* USER CODE END CAN1_MspInit 1 */

  }

}
 8001560:	bf00      	nop
 8001562:	3728      	adds	r7, #40	@ 0x28
 8001564:	46bd      	mov	sp, r7
 8001566:	bd80      	pop	{r7, pc}
 8001568:	40006400 	.word	0x40006400
 800156c:	40023800 	.word	0x40023800
 8001570:	40020000 	.word	0x40020000

08001574 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b08c      	sub	sp, #48	@ 0x30
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800157c:	f107 031c 	add.w	r3, r7, #28
 8001580:	2200      	movs	r2, #0
 8001582:	601a      	str	r2, [r3, #0]
 8001584:	605a      	str	r2, [r3, #4]
 8001586:	609a      	str	r2, [r3, #8]
 8001588:	60da      	str	r2, [r3, #12]
 800158a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	4a32      	ldr	r2, [pc, #200]	@ (800165c <HAL_SPI_MspInit+0xe8>)
 8001592:	4293      	cmp	r3, r2
 8001594:	d12c      	bne.n	80015f0 <HAL_SPI_MspInit+0x7c>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001596:	2300      	movs	r3, #0
 8001598:	61bb      	str	r3, [r7, #24]
 800159a:	4b31      	ldr	r3, [pc, #196]	@ (8001660 <HAL_SPI_MspInit+0xec>)
 800159c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800159e:	4a30      	ldr	r2, [pc, #192]	@ (8001660 <HAL_SPI_MspInit+0xec>)
 80015a0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80015a4:	6453      	str	r3, [r2, #68]	@ 0x44
 80015a6:	4b2e      	ldr	r3, [pc, #184]	@ (8001660 <HAL_SPI_MspInit+0xec>)
 80015a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015aa:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80015ae:	61bb      	str	r3, [r7, #24]
 80015b0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015b2:	2300      	movs	r3, #0
 80015b4:	617b      	str	r3, [r7, #20]
 80015b6:	4b2a      	ldr	r3, [pc, #168]	@ (8001660 <HAL_SPI_MspInit+0xec>)
 80015b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015ba:	4a29      	ldr	r2, [pc, #164]	@ (8001660 <HAL_SPI_MspInit+0xec>)
 80015bc:	f043 0301 	orr.w	r3, r3, #1
 80015c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80015c2:	4b27      	ldr	r3, [pc, #156]	@ (8001660 <HAL_SPI_MspInit+0xec>)
 80015c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015c6:	f003 0301 	and.w	r3, r3, #1
 80015ca:	617b      	str	r3, [r7, #20]
 80015cc:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80015ce:	23e0      	movs	r3, #224	@ 0xe0
 80015d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015d2:	2302      	movs	r3, #2
 80015d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d6:	2300      	movs	r3, #0
 80015d8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015da:	2303      	movs	r3, #3
 80015dc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80015de:	2305      	movs	r3, #5
 80015e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015e2:	f107 031c 	add.w	r3, r7, #28
 80015e6:	4619      	mov	r1, r3
 80015e8:	481e      	ldr	r0, [pc, #120]	@ (8001664 <HAL_SPI_MspInit+0xf0>)
 80015ea:	f00c f81b 	bl	800d624 <HAL_GPIO_Init>
    /* USER CODE BEGIN SPI3_MspInit 1 */

    /* USER CODE END SPI3_MspInit 1 */
  }

}
 80015ee:	e031      	b.n	8001654 <HAL_SPI_MspInit+0xe0>
  else if(hspi->Instance==SPI3)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	4a1c      	ldr	r2, [pc, #112]	@ (8001668 <HAL_SPI_MspInit+0xf4>)
 80015f6:	4293      	cmp	r3, r2
 80015f8:	d12c      	bne.n	8001654 <HAL_SPI_MspInit+0xe0>
    __HAL_RCC_SPI3_CLK_ENABLE();
 80015fa:	2300      	movs	r3, #0
 80015fc:	613b      	str	r3, [r7, #16]
 80015fe:	4b18      	ldr	r3, [pc, #96]	@ (8001660 <HAL_SPI_MspInit+0xec>)
 8001600:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001602:	4a17      	ldr	r2, [pc, #92]	@ (8001660 <HAL_SPI_MspInit+0xec>)
 8001604:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001608:	6413      	str	r3, [r2, #64]	@ 0x40
 800160a:	4b15      	ldr	r3, [pc, #84]	@ (8001660 <HAL_SPI_MspInit+0xec>)
 800160c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800160e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001612:	613b      	str	r3, [r7, #16]
 8001614:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001616:	2300      	movs	r3, #0
 8001618:	60fb      	str	r3, [r7, #12]
 800161a:	4b11      	ldr	r3, [pc, #68]	@ (8001660 <HAL_SPI_MspInit+0xec>)
 800161c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800161e:	4a10      	ldr	r2, [pc, #64]	@ (8001660 <HAL_SPI_MspInit+0xec>)
 8001620:	f043 0304 	orr.w	r3, r3, #4
 8001624:	6313      	str	r3, [r2, #48]	@ 0x30
 8001626:	4b0e      	ldr	r3, [pc, #56]	@ (8001660 <HAL_SPI_MspInit+0xec>)
 8001628:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800162a:	f003 0304 	and.w	r3, r3, #4
 800162e:	60fb      	str	r3, [r7, #12]
 8001630:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8001632:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8001636:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001638:	2302      	movs	r3, #2
 800163a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800163c:	2300      	movs	r3, #0
 800163e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001640:	2303      	movs	r3, #3
 8001642:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001644:	2306      	movs	r3, #6
 8001646:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001648:	f107 031c 	add.w	r3, r7, #28
 800164c:	4619      	mov	r1, r3
 800164e:	4807      	ldr	r0, [pc, #28]	@ (800166c <HAL_SPI_MspInit+0xf8>)
 8001650:	f00b ffe8 	bl	800d624 <HAL_GPIO_Init>
}
 8001654:	bf00      	nop
 8001656:	3730      	adds	r7, #48	@ 0x30
 8001658:	46bd      	mov	sp, r7
 800165a:	bd80      	pop	{r7, pc}
 800165c:	40013000 	.word	0x40013000
 8001660:	40023800 	.word	0x40023800
 8001664:	40020000 	.word	0x40020000
 8001668:	40003c00 	.word	0x40003c00
 800166c:	40020800 	.word	0x40020800

08001670 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001670:	b480      	push	{r7}
 8001672:	b085      	sub	sp, #20
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001680:	d10d      	bne.n	800169e <HAL_TIM_Base_MspInit+0x2e>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001682:	2300      	movs	r3, #0
 8001684:	60fb      	str	r3, [r7, #12]
 8001686:	4b09      	ldr	r3, [pc, #36]	@ (80016ac <HAL_TIM_Base_MspInit+0x3c>)
 8001688:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800168a:	4a08      	ldr	r2, [pc, #32]	@ (80016ac <HAL_TIM_Base_MspInit+0x3c>)
 800168c:	f043 0301 	orr.w	r3, r3, #1
 8001690:	6413      	str	r3, [r2, #64]	@ 0x40
 8001692:	4b06      	ldr	r3, [pc, #24]	@ (80016ac <HAL_TIM_Base_MspInit+0x3c>)
 8001694:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001696:	f003 0301 	and.w	r3, r3, #1
 800169a:	60fb      	str	r3, [r7, #12]
 800169c:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 800169e:	bf00      	nop
 80016a0:	3714      	adds	r7, #20
 80016a2:	46bd      	mov	sp, r7
 80016a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a8:	4770      	bx	lr
 80016aa:	bf00      	nop
 80016ac:	40023800 	.word	0x40023800

080016b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016b0:	b480      	push	{r7}
 80016b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80016b4:	bf00      	nop
 80016b6:	e7fd      	b.n	80016b4 <NMI_Handler+0x4>

080016b8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016b8:	b480      	push	{r7}
 80016ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016bc:	bf00      	nop
 80016be:	e7fd      	b.n	80016bc <HardFault_Handler+0x4>

080016c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016c0:	b480      	push	{r7}
 80016c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016c4:	bf00      	nop
 80016c6:	e7fd      	b.n	80016c4 <MemManage_Handler+0x4>

080016c8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016c8:	b480      	push	{r7}
 80016ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016cc:	bf00      	nop
 80016ce:	e7fd      	b.n	80016cc <BusFault_Handler+0x4>

080016d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016d0:	b480      	push	{r7}
 80016d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016d4:	bf00      	nop
 80016d6:	e7fd      	b.n	80016d4 <UsageFault_Handler+0x4>

080016d8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80016d8:	b480      	push	{r7}
 80016da:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80016dc:	bf00      	nop
 80016de:	46bd      	mov	sp, r7
 80016e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e4:	4770      	bx	lr

080016e6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016e6:	b480      	push	{r7}
 80016e8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016ea:	bf00      	nop
 80016ec:	46bd      	mov	sp, r7
 80016ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f2:	4770      	bx	lr

080016f4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80016f4:	b480      	push	{r7}
 80016f6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016f8:	bf00      	nop
 80016fa:	46bd      	mov	sp, r7
 80016fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001700:	4770      	bx	lr

08001702 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001702:	b580      	push	{r7, lr}
 8001704:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001706:	f00a fb6b 	bl	800bde0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800170a:	bf00      	nop
 800170c:	bd80      	pop	{r7, pc}
	...

08001710 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001714:	4802      	ldr	r0, [pc, #8]	@ (8001720 <CAN1_RX0_IRQHandler+0x10>)
 8001716:	f00b fc3a 	bl	800cf8e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 800171a:	bf00      	nop
 800171c:	bd80      	pop	{r7, pc}
 800171e:	bf00      	nop
 8001720:	200000c4 	.word	0x200000c4

08001724 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001728:	4802      	ldr	r0, [pc, #8]	@ (8001734 <CAN1_RX1_IRQHandler+0x10>)
 800172a:	f00b fc30 	bl	800cf8e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 800172e:	bf00      	nop
 8001730:	bd80      	pop	{r7, pc}
 8001732:	bf00      	nop
 8001734:	200000c4 	.word	0x200000c4

08001738 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001738:	b480      	push	{r7}
 800173a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800173c:	4b06      	ldr	r3, [pc, #24]	@ (8001758 <SystemInit+0x20>)
 800173e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001742:	4a05      	ldr	r2, [pc, #20]	@ (8001758 <SystemInit+0x20>)
 8001744:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001748:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800174c:	bf00      	nop
 800174e:	46bd      	mov	sp, r7
 8001750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001754:	4770      	bx	lr
 8001756:	bf00      	nop
 8001758:	e000ed00 	.word	0xe000ed00

0800175c <resistor_temperature_sense>:
#include "torch_balance.h"
#include <math.h>


void resistor_temperature_sense(float *pcbTemperatures)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b0bc      	sub	sp, #240	@ 0xf0
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
	uint8_t sideA_attempts = 0;
 8001764:	2300      	movs	r3, #0
 8001766:	f887 30ef 	strb.w	r3, [r7, #239]	@ 0xef
	uint8_t sideB_attempts = 0;
 800176a:	2300      	movs	r3, #0
 800176c:	f887 30ee 	strb.w	r3, [r7, #238]	@ 0xee
	float sideB_boardThermistorVoltages[9];

	float sideA_temperatures[9];
	float sideB_temperatures[9];

	while(sideA_attempts < ATTEMPT_LIMIT || sideB_attempts < ATTEMPT_LIMIT) {
 8001770:	e112      	b.n	8001998 <resistor_temperature_sense+0x23c>
		CLRAUX(SIDE_A);
 8001772:	2001      	movs	r0, #1
 8001774:	f008 f9ad 	bl	8009ad2 <CLRAUX>
		CLRAUX(SIDE_B);
 8001778:	2000      	movs	r0, #0
 800177a:	f008 f9aa 	bl	8009ad2 <CLRAUX>
		wait(3);
 800177e:	2003      	movs	r0, #3
 8001780:	f009 f840 	bl	800a804 <wait>

		ADAXD(SIDE_A);
 8001784:	2001      	movs	r0, #1
 8001786:	f008 f93b 	bl	8009a00 <ADAXD>
		ADAXD(SIDE_B);
 800178a:	2000      	movs	r0, #0
 800178c:	f008 f938 	bl	8009a00 <ADAXD>
		wait(3);
 8001790:	2003      	movs	r0, #3
 8001792:	f009 f837 	bl	800a804 <wait>

		RDAUXA(sideA_auxRegisterA, SIDE_A);
 8001796:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800179a:	2101      	movs	r1, #1
 800179c:	4618      	mov	r0, r3
 800179e:	f007 ff7d 	bl	800969c <RDAUXA>
		RDAUXA(sideB_auxRegisterA, SIDE_B);
 80017a2:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 80017a6:	2100      	movs	r1, #0
 80017a8:	4618      	mov	r0, r3
 80017aa:	f007 ff77 	bl	800969c <RDAUXA>
		wait(1);
 80017ae:	2001      	movs	r0, #1
 80017b0:	f009 f828 	bl	800a804 <wait>
		RDAUXB(sideA_auxRegisterB, SIDE_A);
 80017b4:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 80017b8:	2101      	movs	r1, #1
 80017ba:	4618      	mov	r0, r3
 80017bc:	f007 ff92 	bl	80096e4 <RDAUXB>
		RDAUXB(sideB_auxRegisterB, SIDE_B);
 80017c0:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80017c4:	2100      	movs	r1, #0
 80017c6:	4618      	mov	r0, r3
 80017c8:	f007 ff8c 	bl	80096e4 <RDAUXB>
		wait(1);
 80017cc:	2001      	movs	r0, #1
 80017ce:	f009 f819 	bl	800a804 <wait>
		RDAUXC(sideA_auxRegisterC, SIDE_A);
 80017d2:	f107 03c4 	add.w	r3, r7, #196	@ 0xc4
 80017d6:	2101      	movs	r1, #1
 80017d8:	4618      	mov	r0, r3
 80017da:	f007 ffa7 	bl	800972c <RDAUXC>
		RDAUXC(sideB_auxRegisterC, SIDE_B);
 80017de:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80017e2:	2100      	movs	r1, #0
 80017e4:	4618      	mov	r0, r3
 80017e6:	f007 ffa1 	bl	800972c <RDAUXC>
		wait(1);
 80017ea:	2001      	movs	r0, #1
 80017ec:	f009 f80a 	bl	800a804 <wait>
		RDAUXD(sideA_auxRegisterD, SIDE_A);
 80017f0:	f107 03bc 	add.w	r3, r7, #188	@ 0xbc
 80017f4:	2101      	movs	r1, #1
 80017f6:	4618      	mov	r0, r3
 80017f8:	f007 ffbc 	bl	8009774 <RDAUXD>
		RDAUXD(sideB_auxRegisterD, SIDE_B);
 80017fc:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001800:	2100      	movs	r1, #0
 8001802:	4618      	mov	r0, r3
 8001804:	f007 ffb6 	bl	8009774 <RDAUXD>

		sideA_auxRegisterA_PECflag = verify_PEC15(sideA_auxRegisterA);
 8001808:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800180c:	4618      	mov	r0, r3
 800180e:	f007 fc7c 	bl	800910a <verify_PEC15>
 8001812:	4603      	mov	r3, r0
 8001814:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
		sideA_auxRegisterB_PECflag = verify_PEC15(sideA_auxRegisterB);
 8001818:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 800181c:	4618      	mov	r0, r3
 800181e:	f007 fc74 	bl	800910a <verify_PEC15>
 8001822:	4603      	mov	r3, r0
 8001824:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
		sideA_auxRegisterC_PECflag = verify_PEC15(sideA_auxRegisterC);
 8001828:	f107 03c4 	add.w	r3, r7, #196	@ 0xc4
 800182c:	4618      	mov	r0, r3
 800182e:	f007 fc6c 	bl	800910a <verify_PEC15>
 8001832:	4603      	mov	r3, r0
 8001834:	f887 30e1 	strb.w	r3, [r7, #225]	@ 0xe1
		sideA_auxRegisterD_PECflag = verify_PEC15(sideA_auxRegisterD);
 8001838:	f107 03bc 	add.w	r3, r7, #188	@ 0xbc
 800183c:	4618      	mov	r0, r3
 800183e:	f007 fc64 	bl	800910a <verify_PEC15>
 8001842:	4603      	mov	r3, r0
 8001844:	f887 30e0 	strb.w	r3, [r7, #224]	@ 0xe0

		sideB_auxRegisterA_PECflag = verify_PEC15(sideB_auxRegisterA);
 8001848:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 800184c:	4618      	mov	r0, r3
 800184e:	f007 fc5c 	bl	800910a <verify_PEC15>
 8001852:	4603      	mov	r3, r0
 8001854:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
		sideB_auxRegisterB_PECflag = verify_PEC15(sideB_auxRegisterB);
 8001858:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 800185c:	4618      	mov	r0, r3
 800185e:	f007 fc54 	bl	800910a <verify_PEC15>
 8001862:	4603      	mov	r3, r0
 8001864:	f887 30de 	strb.w	r3, [r7, #222]	@ 0xde
		sideB_auxRegisterC_PECflag = verify_PEC15(sideB_auxRegisterC);
 8001868:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800186c:	4618      	mov	r0, r3
 800186e:	f007 fc4c 	bl	800910a <verify_PEC15>
 8001872:	4603      	mov	r3, r0
 8001874:	f887 30dd 	strb.w	r3, [r7, #221]	@ 0xdd
		sideB_auxRegisterD_PECflag = verify_PEC15(sideB_auxRegisterD);
 8001878:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800187c:	4618      	mov	r0, r3
 800187e:	f007 fc44 	bl	800910a <verify_PEC15>
 8001882:	4603      	mov	r3, r0
 8001884:	f887 30dc 	strb.w	r3, [r7, #220]	@ 0xdc

		if(sideA_auxRegisterA_PECflag == 2 &&
 8001888:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800188c:	2b02      	cmp	r3, #2
 800188e:	d137      	bne.n	8001900 <resistor_temperature_sense+0x1a4>
 8001890:	f897 30e2 	ldrb.w	r3, [r7, #226]	@ 0xe2
 8001894:	2b02      	cmp	r3, #2
 8001896:	d133      	bne.n	8001900 <resistor_temperature_sense+0x1a4>
		   sideA_auxRegisterB_PECflag == 2 &&
 8001898:	f897 30e1 	ldrb.w	r3, [r7, #225]	@ 0xe1
 800189c:	2b02      	cmp	r3, #2
 800189e:	d12f      	bne.n	8001900 <resistor_temperature_sense+0x1a4>
		   sideA_auxRegisterC_PECflag == 2 &&
 80018a0:	f897 30e0 	ldrb.w	r3, [r7, #224]	@ 0xe0
 80018a4:	2b02      	cmp	r3, #2
 80018a6:	d12b      	bne.n	8001900 <resistor_temperature_sense+0x1a4>
		   sideA_auxRegisterD_PECflag == 2 &&
		   sideA_auxRegisterA[1] != 0xFF &&
 80018a8:	f897 30d5 	ldrb.w	r3, [r7, #213]	@ 0xd5
		   sideA_auxRegisterD_PECflag == 2 &&
 80018ac:	2bff      	cmp	r3, #255	@ 0xff
 80018ae:	d027      	beq.n	8001900 <resistor_temperature_sense+0x1a4>
		   sideA_auxRegisterA[3] != 0xFF &&
 80018b0:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
		   sideA_auxRegisterA[1] != 0xFF &&
 80018b4:	2bff      	cmp	r3, #255	@ 0xff
 80018b6:	d023      	beq.n	8001900 <resistor_temperature_sense+0x1a4>
		   sideA_auxRegisterA[5] != 0xFF &&
 80018b8:	f897 30d9 	ldrb.w	r3, [r7, #217]	@ 0xd9
		   sideA_auxRegisterA[3] != 0xFF &&
 80018bc:	2bff      	cmp	r3, #255	@ 0xff
 80018be:	d01f      	beq.n	8001900 <resistor_temperature_sense+0x1a4>
		   sideA_auxRegisterB[1] != 0xFF &&
 80018c0:	f897 30cd 	ldrb.w	r3, [r7, #205]	@ 0xcd
		   sideA_auxRegisterA[5] != 0xFF &&
 80018c4:	2bff      	cmp	r3, #255	@ 0xff
 80018c6:	d01b      	beq.n	8001900 <resistor_temperature_sense+0x1a4>
		   sideA_auxRegisterB[3] != 0xFF &&
 80018c8:	f897 30cf 	ldrb.w	r3, [r7, #207]	@ 0xcf
		   sideA_auxRegisterB[1] != 0xFF &&
 80018cc:	2bff      	cmp	r3, #255	@ 0xff
 80018ce:	d017      	beq.n	8001900 <resistor_temperature_sense+0x1a4>
		   sideA_auxRegisterB[5] != 0xFF &&
 80018d0:	f897 30d1 	ldrb.w	r3, [r7, #209]	@ 0xd1
		   sideA_auxRegisterB[3] != 0xFF &&
 80018d4:	2bff      	cmp	r3, #255	@ 0xff
 80018d6:	d013      	beq.n	8001900 <resistor_temperature_sense+0x1a4>
		   sideA_auxRegisterC[1] != 0xFF &&
 80018d8:	f897 30c5 	ldrb.w	r3, [r7, #197]	@ 0xc5
		   sideA_auxRegisterB[5] != 0xFF &&
 80018dc:	2bff      	cmp	r3, #255	@ 0xff
 80018de:	d00f      	beq.n	8001900 <resistor_temperature_sense+0x1a4>
		   sideA_auxRegisterC[3] != 0xFF &&
 80018e0:	f897 30c7 	ldrb.w	r3, [r7, #199]	@ 0xc7
		   sideA_auxRegisterC[1] != 0xFF &&
 80018e4:	2bff      	cmp	r3, #255	@ 0xff
 80018e6:	d00b      	beq.n	8001900 <resistor_temperature_sense+0x1a4>
		   sideA_auxRegisterC[5] != 0xFF &&
 80018e8:	f897 30c9 	ldrb.w	r3, [r7, #201]	@ 0xc9
		   sideA_auxRegisterC[3] != 0xFF &&
 80018ec:	2bff      	cmp	r3, #255	@ 0xff
 80018ee:	d007      	beq.n	8001900 <resistor_temperature_sense+0x1a4>
		   sideA_auxRegisterD[1] != 0xFF)
 80018f0:	f897 30bd 	ldrb.w	r3, [r7, #189]	@ 0xbd
		   sideA_auxRegisterC[5] != 0xFF &&
 80018f4:	2bff      	cmp	r3, #255	@ 0xff
 80018f6:	d003      	beq.n	8001900 <resistor_temperature_sense+0x1a4>
		{
			sideA_attempts = 13;
 80018f8:	230d      	movs	r3, #13
 80018fa:	f887 30ef 	strb.w	r3, [r7, #239]	@ 0xef
 80018fe:	e007      	b.n	8001910 <resistor_temperature_sense+0x1b4>
		}
		else {
			sideA_attempts++;
 8001900:	f897 30ef 	ldrb.w	r3, [r7, #239]	@ 0xef
 8001904:	3301      	adds	r3, #1
 8001906:	f887 30ef 	strb.w	r3, [r7, #239]	@ 0xef
			wait(1);
 800190a:	2001      	movs	r0, #1
 800190c:	f008 ff7a 	bl	800a804 <wait>
		}

		if(sideB_auxRegisterA_PECflag == 2 &&
 8001910:	f897 30df 	ldrb.w	r3, [r7, #223]	@ 0xdf
 8001914:	2b02      	cmp	r3, #2
 8001916:	d137      	bne.n	8001988 <resistor_temperature_sense+0x22c>
 8001918:	f897 30de 	ldrb.w	r3, [r7, #222]	@ 0xde
 800191c:	2b02      	cmp	r3, #2
 800191e:	d133      	bne.n	8001988 <resistor_temperature_sense+0x22c>
		   sideB_auxRegisterB_PECflag == 2 &&
 8001920:	f897 30dd 	ldrb.w	r3, [r7, #221]	@ 0xdd
 8001924:	2b02      	cmp	r3, #2
 8001926:	d12f      	bne.n	8001988 <resistor_temperature_sense+0x22c>
		   sideB_auxRegisterC_PECflag == 2 &&
 8001928:	f897 30dc 	ldrb.w	r3, [r7, #220]	@ 0xdc
 800192c:	2b02      	cmp	r3, #2
 800192e:	d12b      	bne.n	8001988 <resistor_temperature_sense+0x22c>
		   sideB_auxRegisterD_PECflag == 2 &&
		   sideB_auxRegisterA[1] != 0xFF &&
 8001930:	f897 30b5 	ldrb.w	r3, [r7, #181]	@ 0xb5
		   sideB_auxRegisterD_PECflag == 2 &&
 8001934:	2bff      	cmp	r3, #255	@ 0xff
 8001936:	d027      	beq.n	8001988 <resistor_temperature_sense+0x22c>
		   sideB_auxRegisterA[3] != 0xFF &&
 8001938:	f897 30b7 	ldrb.w	r3, [r7, #183]	@ 0xb7
		   sideB_auxRegisterA[1] != 0xFF &&
 800193c:	2bff      	cmp	r3, #255	@ 0xff
 800193e:	d023      	beq.n	8001988 <resistor_temperature_sense+0x22c>
		   sideB_auxRegisterA[5] != 0xFF &&
 8001940:	f897 30b9 	ldrb.w	r3, [r7, #185]	@ 0xb9
		   sideB_auxRegisterA[3] != 0xFF &&
 8001944:	2bff      	cmp	r3, #255	@ 0xff
 8001946:	d01f      	beq.n	8001988 <resistor_temperature_sense+0x22c>
		   sideB_auxRegisterB[1] != 0xFF &&
 8001948:	f897 30ad 	ldrb.w	r3, [r7, #173]	@ 0xad
		   sideB_auxRegisterA[5] != 0xFF &&
 800194c:	2bff      	cmp	r3, #255	@ 0xff
 800194e:	d01b      	beq.n	8001988 <resistor_temperature_sense+0x22c>
		   sideB_auxRegisterB[3] != 0xFF &&
 8001950:	f897 30af 	ldrb.w	r3, [r7, #175]	@ 0xaf
		   sideB_auxRegisterB[1] != 0xFF &&
 8001954:	2bff      	cmp	r3, #255	@ 0xff
 8001956:	d017      	beq.n	8001988 <resistor_temperature_sense+0x22c>
		   sideB_auxRegisterB[5] != 0xFF &&
 8001958:	f897 30b1 	ldrb.w	r3, [r7, #177]	@ 0xb1
		   sideB_auxRegisterB[3] != 0xFF &&
 800195c:	2bff      	cmp	r3, #255	@ 0xff
 800195e:	d013      	beq.n	8001988 <resistor_temperature_sense+0x22c>
		   sideB_auxRegisterC[1] != 0xFF &&
 8001960:	f897 30a5 	ldrb.w	r3, [r7, #165]	@ 0xa5
		   sideB_auxRegisterB[5] != 0xFF &&
 8001964:	2bff      	cmp	r3, #255	@ 0xff
 8001966:	d00f      	beq.n	8001988 <resistor_temperature_sense+0x22c>
		   sideB_auxRegisterC[3] != 0xFF &&
 8001968:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
		   sideB_auxRegisterC[1] != 0xFF &&
 800196c:	2bff      	cmp	r3, #255	@ 0xff
 800196e:	d00b      	beq.n	8001988 <resistor_temperature_sense+0x22c>
		   sideB_auxRegisterC[5] != 0xFF &&
 8001970:	f897 30a9 	ldrb.w	r3, [r7, #169]	@ 0xa9
		   sideB_auxRegisterC[3] != 0xFF &&
 8001974:	2bff      	cmp	r3, #255	@ 0xff
 8001976:	d007      	beq.n	8001988 <resistor_temperature_sense+0x22c>
		   sideB_auxRegisterD[1] != 0xFF)
 8001978:	f897 309d 	ldrb.w	r3, [r7, #157]	@ 0x9d
		   sideB_auxRegisterC[5] != 0xFF &&
 800197c:	2bff      	cmp	r3, #255	@ 0xff
 800197e:	d003      	beq.n	8001988 <resistor_temperature_sense+0x22c>
		{
			sideB_attempts = 13;
 8001980:	230d      	movs	r3, #13
 8001982:	f887 30ee 	strb.w	r3, [r7, #238]	@ 0xee
 8001986:	e007      	b.n	8001998 <resistor_temperature_sense+0x23c>
		}
		else {
			sideB_attempts++;
 8001988:	f897 30ee 	ldrb.w	r3, [r7, #238]	@ 0xee
 800198c:	3301      	adds	r3, #1
 800198e:	f887 30ee 	strb.w	r3, [r7, #238]	@ 0xee
			wait(1);
 8001992:	2001      	movs	r0, #1
 8001994:	f008 ff36 	bl	800a804 <wait>
	while(sideA_attempts < ATTEMPT_LIMIT || sideB_attempts < ATTEMPT_LIMIT) {
 8001998:	f897 30ef 	ldrb.w	r3, [r7, #239]	@ 0xef
 800199c:	2b09      	cmp	r3, #9
 800199e:	f67f aee8 	bls.w	8001772 <resistor_temperature_sense+0x16>
 80019a2:	f897 30ee 	ldrb.w	r3, [r7, #238]	@ 0xee
 80019a6:	2b09      	cmp	r3, #9
 80019a8:	f67f aee3 	bls.w	8001772 <resistor_temperature_sense+0x16>
		}
	}
	if(sideA_attempts != 13) { error_loop(ERROR_PEC, 0, 0, SIDE_A); }
 80019ac:	f897 30ef 	ldrb.w	r3, [r7, #239]	@ 0xef
 80019b0:	2b0d      	cmp	r3, #13
 80019b2:	d005      	beq.n	80019c0 <resistor_temperature_sense+0x264>
 80019b4:	2301      	movs	r3, #1
 80019b6:	2200      	movs	r2, #0
 80019b8:	2100      	movs	r1, #0
 80019ba:	2056      	movs	r0, #86	@ 0x56
 80019bc:	f003 fa1c 	bl	8004df8 <error_loop>

	if(sideB_attempts != 13) { error_loop(ERROR_PEC, 0, 0, SIDE_B); }
 80019c0:	f897 30ee 	ldrb.w	r3, [r7, #238]	@ 0xee
 80019c4:	2b0d      	cmp	r3, #13
 80019c6:	d005      	beq.n	80019d4 <resistor_temperature_sense+0x278>
 80019c8:	2300      	movs	r3, #0
 80019ca:	2200      	movs	r2, #0
 80019cc:	2100      	movs	r1, #0
 80019ce:	2056      	movs	r0, #86	@ 0x56
 80019d0:	f003 fa12 	bl	8004df8 <error_loop>

	sideA_boardThermistorVoltages[0] = ((sideA_auxRegisterA[1] << 8) | sideA_auxRegisterA[0]) / 10000.0f;
 80019d4:	f897 30d5 	ldrb.w	r3, [r7, #213]	@ 0xd5
 80019d8:	021b      	lsls	r3, r3, #8
 80019da:	f897 20d4 	ldrb.w	r2, [r7, #212]	@ 0xd4
 80019de:	4313      	orrs	r3, r2
 80019e0:	ee07 3a90 	vmov	s15, r3
 80019e4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80019e8:	eddf 6ac1 	vldr	s13, [pc, #772]	@ 8001cf0 <resistor_temperature_sense+0x594>
 80019ec:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80019f0:	edc7 7a1e 	vstr	s15, [r7, #120]	@ 0x78
	sideA_boardThermistorVoltages[1] = ((sideA_auxRegisterA[3] << 8) | sideA_auxRegisterA[2]) / 10000.0f;
 80019f4:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
 80019f8:	021b      	lsls	r3, r3, #8
 80019fa:	f897 20d6 	ldrb.w	r2, [r7, #214]	@ 0xd6
 80019fe:	4313      	orrs	r3, r2
 8001a00:	ee07 3a90 	vmov	s15, r3
 8001a04:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001a08:	eddf 6ab9 	vldr	s13, [pc, #740]	@ 8001cf0 <resistor_temperature_sense+0x594>
 8001a0c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001a10:	edc7 7a1f 	vstr	s15, [r7, #124]	@ 0x7c
	sideA_boardThermistorVoltages[2] = ((sideA_auxRegisterA[5] << 8) | sideA_auxRegisterA[4]) / 10000.0f;
 8001a14:	f897 30d9 	ldrb.w	r3, [r7, #217]	@ 0xd9
 8001a18:	021b      	lsls	r3, r3, #8
 8001a1a:	f897 20d8 	ldrb.w	r2, [r7, #216]	@ 0xd8
 8001a1e:	4313      	orrs	r3, r2
 8001a20:	ee07 3a90 	vmov	s15, r3
 8001a24:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001a28:	eddf 6ab1 	vldr	s13, [pc, #708]	@ 8001cf0 <resistor_temperature_sense+0x594>
 8001a2c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001a30:	edc7 7a20 	vstr	s15, [r7, #128]	@ 0x80
	sideA_boardThermistorVoltages[3] = ((sideA_auxRegisterB[1] << 8) | sideA_auxRegisterB[0]) / 10000.0f;
 8001a34:	f897 30cd 	ldrb.w	r3, [r7, #205]	@ 0xcd
 8001a38:	021b      	lsls	r3, r3, #8
 8001a3a:	f897 20cc 	ldrb.w	r2, [r7, #204]	@ 0xcc
 8001a3e:	4313      	orrs	r3, r2
 8001a40:	ee07 3a90 	vmov	s15, r3
 8001a44:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001a48:	eddf 6aa9 	vldr	s13, [pc, #676]	@ 8001cf0 <resistor_temperature_sense+0x594>
 8001a4c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001a50:	edc7 7a21 	vstr	s15, [r7, #132]	@ 0x84
	sideA_boardThermistorVoltages[4] = ((sideA_auxRegisterB[3] << 8) | sideA_auxRegisterB[2]) / 10000.0f;
 8001a54:	f897 30cf 	ldrb.w	r3, [r7, #207]	@ 0xcf
 8001a58:	021b      	lsls	r3, r3, #8
 8001a5a:	f897 20ce 	ldrb.w	r2, [r7, #206]	@ 0xce
 8001a5e:	4313      	orrs	r3, r2
 8001a60:	ee07 3a90 	vmov	s15, r3
 8001a64:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001a68:	eddf 6aa1 	vldr	s13, [pc, #644]	@ 8001cf0 <resistor_temperature_sense+0x594>
 8001a6c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001a70:	edc7 7a22 	vstr	s15, [r7, #136]	@ 0x88
	sideA_boardThermistorVoltages[5] = ((sideA_auxRegisterC[1] << 8) | sideA_auxRegisterC[0]) / 10000.0f;
 8001a74:	f897 30c5 	ldrb.w	r3, [r7, #197]	@ 0xc5
 8001a78:	021b      	lsls	r3, r3, #8
 8001a7a:	f897 20c4 	ldrb.w	r2, [r7, #196]	@ 0xc4
 8001a7e:	4313      	orrs	r3, r2
 8001a80:	ee07 3a90 	vmov	s15, r3
 8001a84:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001a88:	eddf 6a99 	vldr	s13, [pc, #612]	@ 8001cf0 <resistor_temperature_sense+0x594>
 8001a8c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001a90:	edc7 7a23 	vstr	s15, [r7, #140]	@ 0x8c
	sideA_boardThermistorVoltages[6] = ((sideA_auxRegisterC[3] << 8) | sideA_auxRegisterC[2]) / 10000.0f;
 8001a94:	f897 30c7 	ldrb.w	r3, [r7, #199]	@ 0xc7
 8001a98:	021b      	lsls	r3, r3, #8
 8001a9a:	f897 20c6 	ldrb.w	r2, [r7, #198]	@ 0xc6
 8001a9e:	4313      	orrs	r3, r2
 8001aa0:	ee07 3a90 	vmov	s15, r3
 8001aa4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001aa8:	eddf 6a91 	vldr	s13, [pc, #580]	@ 8001cf0 <resistor_temperature_sense+0x594>
 8001aac:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001ab0:	edc7 7a24 	vstr	s15, [r7, #144]	@ 0x90
	sideA_boardThermistorVoltages[7] = ((sideA_auxRegisterC[5] << 8) | sideA_auxRegisterC[4]) / 10000.0f;
 8001ab4:	f897 30c9 	ldrb.w	r3, [r7, #201]	@ 0xc9
 8001ab8:	021b      	lsls	r3, r3, #8
 8001aba:	f897 20c8 	ldrb.w	r2, [r7, #200]	@ 0xc8
 8001abe:	4313      	orrs	r3, r2
 8001ac0:	ee07 3a90 	vmov	s15, r3
 8001ac4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001ac8:	eddf 6a89 	vldr	s13, [pc, #548]	@ 8001cf0 <resistor_temperature_sense+0x594>
 8001acc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001ad0:	edc7 7a25 	vstr	s15, [r7, #148]	@ 0x94
	sideA_boardThermistorVoltages[8] = ((sideA_auxRegisterD[1] << 8) | sideA_auxRegisterD[0]) / 10000.0f;
 8001ad4:	f897 30bd 	ldrb.w	r3, [r7, #189]	@ 0xbd
 8001ad8:	021b      	lsls	r3, r3, #8
 8001ada:	f897 20bc 	ldrb.w	r2, [r7, #188]	@ 0xbc
 8001ade:	4313      	orrs	r3, r2
 8001ae0:	ee07 3a90 	vmov	s15, r3
 8001ae4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001ae8:	eddf 6a81 	vldr	s13, [pc, #516]	@ 8001cf0 <resistor_temperature_sense+0x594>
 8001aec:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001af0:	edc7 7a26 	vstr	s15, [r7, #152]	@ 0x98

	sideB_boardThermistorVoltages[0] = ((sideB_auxRegisterA[1] << 8) | sideB_auxRegisterA[0]) / 10000.0f;
 8001af4:	f897 30b5 	ldrb.w	r3, [r7, #181]	@ 0xb5
 8001af8:	021b      	lsls	r3, r3, #8
 8001afa:	f897 20b4 	ldrb.w	r2, [r7, #180]	@ 0xb4
 8001afe:	4313      	orrs	r3, r2
 8001b00:	ee07 3a90 	vmov	s15, r3
 8001b04:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001b08:	eddf 6a79 	vldr	s13, [pc, #484]	@ 8001cf0 <resistor_temperature_sense+0x594>
 8001b0c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001b10:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54
	sideB_boardThermistorVoltages[1] = ((sideB_auxRegisterA[3] << 8) | sideB_auxRegisterA[2]) / 10000.0f;
 8001b14:	f897 30b7 	ldrb.w	r3, [r7, #183]	@ 0xb7
 8001b18:	021b      	lsls	r3, r3, #8
 8001b1a:	f897 20b6 	ldrb.w	r2, [r7, #182]	@ 0xb6
 8001b1e:	4313      	orrs	r3, r2
 8001b20:	ee07 3a90 	vmov	s15, r3
 8001b24:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001b28:	eddf 6a71 	vldr	s13, [pc, #452]	@ 8001cf0 <resistor_temperature_sense+0x594>
 8001b2c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001b30:	edc7 7a16 	vstr	s15, [r7, #88]	@ 0x58
	sideB_boardThermistorVoltages[2] = ((sideB_auxRegisterA[5] << 8) | sideB_auxRegisterA[4]) / 10000.0f;
 8001b34:	f897 30b9 	ldrb.w	r3, [r7, #185]	@ 0xb9
 8001b38:	021b      	lsls	r3, r3, #8
 8001b3a:	f897 20b8 	ldrb.w	r2, [r7, #184]	@ 0xb8
 8001b3e:	4313      	orrs	r3, r2
 8001b40:	ee07 3a90 	vmov	s15, r3
 8001b44:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001b48:	eddf 6a69 	vldr	s13, [pc, #420]	@ 8001cf0 <resistor_temperature_sense+0x594>
 8001b4c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001b50:	edc7 7a17 	vstr	s15, [r7, #92]	@ 0x5c
	sideB_boardThermistorVoltages[3] = ((sideB_auxRegisterB[1] << 8) | sideB_auxRegisterB[0]) / 10000.0f;
 8001b54:	f897 30ad 	ldrb.w	r3, [r7, #173]	@ 0xad
 8001b58:	021b      	lsls	r3, r3, #8
 8001b5a:	f897 20ac 	ldrb.w	r2, [r7, #172]	@ 0xac
 8001b5e:	4313      	orrs	r3, r2
 8001b60:	ee07 3a90 	vmov	s15, r3
 8001b64:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001b68:	eddf 6a61 	vldr	s13, [pc, #388]	@ 8001cf0 <resistor_temperature_sense+0x594>
 8001b6c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001b70:	edc7 7a18 	vstr	s15, [r7, #96]	@ 0x60
	sideB_boardThermistorVoltages[4] = ((sideB_auxRegisterB[3] << 8) | sideB_auxRegisterB[2]) / 10000.0f;
 8001b74:	f897 30af 	ldrb.w	r3, [r7, #175]	@ 0xaf
 8001b78:	021b      	lsls	r3, r3, #8
 8001b7a:	f897 20ae 	ldrb.w	r2, [r7, #174]	@ 0xae
 8001b7e:	4313      	orrs	r3, r2
 8001b80:	ee07 3a90 	vmov	s15, r3
 8001b84:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001b88:	eddf 6a59 	vldr	s13, [pc, #356]	@ 8001cf0 <resistor_temperature_sense+0x594>
 8001b8c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001b90:	edc7 7a19 	vstr	s15, [r7, #100]	@ 0x64
	sideB_boardThermistorVoltages[5] = ((sideB_auxRegisterC[1] << 8) | sideB_auxRegisterC[0]) / 10000.0f;
 8001b94:	f897 30a5 	ldrb.w	r3, [r7, #165]	@ 0xa5
 8001b98:	021b      	lsls	r3, r3, #8
 8001b9a:	f897 20a4 	ldrb.w	r2, [r7, #164]	@ 0xa4
 8001b9e:	4313      	orrs	r3, r2
 8001ba0:	ee07 3a90 	vmov	s15, r3
 8001ba4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001ba8:	eddf 6a51 	vldr	s13, [pc, #324]	@ 8001cf0 <resistor_temperature_sense+0x594>
 8001bac:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001bb0:	edc7 7a1a 	vstr	s15, [r7, #104]	@ 0x68
	sideB_boardThermistorVoltages[6] = ((sideB_auxRegisterC[3] << 8) | sideB_auxRegisterC[2]) / 10000.0f;
 8001bb4:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 8001bb8:	021b      	lsls	r3, r3, #8
 8001bba:	f897 20a6 	ldrb.w	r2, [r7, #166]	@ 0xa6
 8001bbe:	4313      	orrs	r3, r2
 8001bc0:	ee07 3a90 	vmov	s15, r3
 8001bc4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001bc8:	eddf 6a49 	vldr	s13, [pc, #292]	@ 8001cf0 <resistor_temperature_sense+0x594>
 8001bcc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001bd0:	edc7 7a1b 	vstr	s15, [r7, #108]	@ 0x6c
	sideB_boardThermistorVoltages[7] = ((sideB_auxRegisterC[5] << 8) | sideB_auxRegisterC[4]) / 10000.0f;
 8001bd4:	f897 30a9 	ldrb.w	r3, [r7, #169]	@ 0xa9
 8001bd8:	021b      	lsls	r3, r3, #8
 8001bda:	f897 20a8 	ldrb.w	r2, [r7, #168]	@ 0xa8
 8001bde:	4313      	orrs	r3, r2
 8001be0:	ee07 3a90 	vmov	s15, r3
 8001be4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001be8:	eddf 6a41 	vldr	s13, [pc, #260]	@ 8001cf0 <resistor_temperature_sense+0x594>
 8001bec:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001bf0:	edc7 7a1c 	vstr	s15, [r7, #112]	@ 0x70
	sideB_boardThermistorVoltages[8] = ((sideB_auxRegisterD[1] << 8) | sideB_auxRegisterD[0]) / 10000.0f;
 8001bf4:	f897 309d 	ldrb.w	r3, [r7, #157]	@ 0x9d
 8001bf8:	021b      	lsls	r3, r3, #8
 8001bfa:	f897 209c 	ldrb.w	r2, [r7, #156]	@ 0x9c
 8001bfe:	4313      	orrs	r3, r2
 8001c00:	ee07 3a90 	vmov	s15, r3
 8001c04:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001c08:	eddf 6a39 	vldr	s13, [pc, #228]	@ 8001cf0 <resistor_temperature_sense+0x594>
 8001c0c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001c10:	edc7 7a1d 	vstr	s15, [r7, #116]	@ 0x74

	sideA_VREF2 = ((sideA_auxRegisterB[5] << 8) | sideA_auxRegisterB[4]) / 10000.0f;
 8001c14:	f897 30d1 	ldrb.w	r3, [r7, #209]	@ 0xd1
 8001c18:	021b      	lsls	r3, r3, #8
 8001c1a:	f897 20d0 	ldrb.w	r2, [r7, #208]	@ 0xd0
 8001c1e:	4313      	orrs	r3, r2
 8001c20:	ee07 3a90 	vmov	s15, r3
 8001c24:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001c28:	eddf 6a31 	vldr	s13, [pc, #196]	@ 8001cf0 <resistor_temperature_sense+0x594>
 8001c2c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001c30:	edc7 7a3a 	vstr	s15, [r7, #232]	@ 0xe8
	sideB_VREF2 = ((sideB_auxRegisterB[5] << 8) | sideB_auxRegisterB[4]) / 10000.0f;
 8001c34:	f897 30b1 	ldrb.w	r3, [r7, #177]	@ 0xb1
 8001c38:	021b      	lsls	r3, r3, #8
 8001c3a:	f897 20b0 	ldrb.w	r2, [r7, #176]	@ 0xb0
 8001c3e:	4313      	orrs	r3, r2
 8001c40:	ee07 3a90 	vmov	s15, r3
 8001c44:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001c48:	eddf 6a29 	vldr	s13, [pc, #164]	@ 8001cf0 <resistor_temperature_sense+0x594>
 8001c4c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001c50:	edc7 7a39 	vstr	s15, [r7, #228]	@ 0xe4

	board_temperature_sense(sideA_boardThermistorVoltages, sideA_VREF2, sideA_temperatures);
 8001c54:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8001c58:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8001c5c:	4611      	mov	r1, r2
 8001c5e:	ed97 0a3a 	vldr	s0, [r7, #232]	@ 0xe8
 8001c62:	4618      	mov	r0, r3
 8001c64:	f009 f870 	bl	800ad48 <board_temperature_sense>
	board_temperature_sense(sideB_boardThermistorVoltages, sideB_VREF2, sideB_temperatures);
 8001c68:	f107 020c 	add.w	r2, r7, #12
 8001c6c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001c70:	4611      	mov	r1, r2
 8001c72:	ed97 0a39 	vldr	s0, [r7, #228]	@ 0xe4
 8001c76:	4618      	mov	r0, r3
 8001c78:	f009 f866 	bl	800ad48 <board_temperature_sense>

	for(uint8_t i = 0; i < 9; i++) { *(pcbTemperatures + i) = sideA_temperatures[i]; }
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	f887 30ed 	strb.w	r3, [r7, #237]	@ 0xed
 8001c82:	e011      	b.n	8001ca8 <resistor_temperature_sense+0x54c>
 8001c84:	f897 20ed 	ldrb.w	r2, [r7, #237]	@ 0xed
 8001c88:	f897 30ed 	ldrb.w	r3, [r7, #237]	@ 0xed
 8001c8c:	009b      	lsls	r3, r3, #2
 8001c8e:	6879      	ldr	r1, [r7, #4]
 8001c90:	440b      	add	r3, r1
 8001c92:	0092      	lsls	r2, r2, #2
 8001c94:	32f0      	adds	r2, #240	@ 0xf0
 8001c96:	443a      	add	r2, r7
 8001c98:	3ac0      	subs	r2, #192	@ 0xc0
 8001c9a:	6812      	ldr	r2, [r2, #0]
 8001c9c:	601a      	str	r2, [r3, #0]
 8001c9e:	f897 30ed 	ldrb.w	r3, [r7, #237]	@ 0xed
 8001ca2:	3301      	adds	r3, #1
 8001ca4:	f887 30ed 	strb.w	r3, [r7, #237]	@ 0xed
 8001ca8:	f897 30ed 	ldrb.w	r3, [r7, #237]	@ 0xed
 8001cac:	2b08      	cmp	r3, #8
 8001cae:	d9e9      	bls.n	8001c84 <resistor_temperature_sense+0x528>

	for(uint8_t i = 9; i < 18; i++) { *(pcbTemperatures + i) = sideB_temperatures[i]; }
 8001cb0:	2309      	movs	r3, #9
 8001cb2:	f887 30ec 	strb.w	r3, [r7, #236]	@ 0xec
 8001cb6:	e011      	b.n	8001cdc <resistor_temperature_sense+0x580>
 8001cb8:	f897 20ec 	ldrb.w	r2, [r7, #236]	@ 0xec
 8001cbc:	f897 30ec 	ldrb.w	r3, [r7, #236]	@ 0xec
 8001cc0:	009b      	lsls	r3, r3, #2
 8001cc2:	6879      	ldr	r1, [r7, #4]
 8001cc4:	440b      	add	r3, r1
 8001cc6:	0092      	lsls	r2, r2, #2
 8001cc8:	32f0      	adds	r2, #240	@ 0xf0
 8001cca:	443a      	add	r2, r7
 8001ccc:	3ae4      	subs	r2, #228	@ 0xe4
 8001cce:	6812      	ldr	r2, [r2, #0]
 8001cd0:	601a      	str	r2, [r3, #0]
 8001cd2:	f897 30ec 	ldrb.w	r3, [r7, #236]	@ 0xec
 8001cd6:	3301      	adds	r3, #1
 8001cd8:	f887 30ec 	strb.w	r3, [r7, #236]	@ 0xec
 8001cdc:	f897 30ec 	ldrb.w	r3, [r7, #236]	@ 0xec
 8001ce0:	2b11      	cmp	r3, #17
 8001ce2:	d9e9      	bls.n	8001cb8 <resistor_temperature_sense+0x55c>
}
 8001ce4:	bf00      	nop
 8001ce6:	bf00      	nop
 8001ce8:	37f0      	adds	r7, #240	@ 0xf0
 8001cea:	46bd      	mov	sp, r7
 8001cec:	bd80      	pop	{r7, pc}
 8001cee:	bf00      	nop
 8001cf0:	461c4000 	.word	0x461c4000

08001cf4 <balance_check>:


uint8_t balance_check(uint8_t *cellsToBalance, uint16_t *cellVoltages, uint16_t minCellVoltage)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	b087      	sub	sp, #28
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	60f8      	str	r0, [r7, #12]
 8001cfc:	60b9      	str	r1, [r7, #8]
 8001cfe:	4613      	mov	r3, r2
 8001d00:	80fb      	strh	r3, [r7, #6]
	uint8_t cellsToBalanceQty = 0;
 8001d02:	2300      	movs	r3, #0
 8001d04:	75fb      	strb	r3, [r7, #23]

	// For loop below finds all cells that have a delta greater than the maximum delta
	for(uint8_t i = 0; i < CELL_QTY; i++) {
 8001d06:	2300      	movs	r3, #0
 8001d08:	75bb      	strb	r3, [r7, #22]
 8001d0a:	e016      	b.n	8001d3a <balance_check+0x46>
		if(*(cellVoltages + i) > minCellVoltage + MAX_DELTA) {
 8001d0c:	7dbb      	ldrb	r3, [r7, #22]
 8001d0e:	005b      	lsls	r3, r3, #1
 8001d10:	68ba      	ldr	r2, [r7, #8]
 8001d12:	4413      	add	r3, r2
 8001d14:	881b      	ldrh	r3, [r3, #0]
 8001d16:	461a      	mov	r2, r3
 8001d18:	88fb      	ldrh	r3, [r7, #6]
 8001d1a:	3396      	adds	r3, #150	@ 0x96
 8001d1c:	429a      	cmp	r2, r3
 8001d1e:	dd09      	ble.n	8001d34 <balance_check+0x40>
			*(cellsToBalance + cellsToBalanceQty) = i + 1;
 8001d20:	7dfb      	ldrb	r3, [r7, #23]
 8001d22:	68fa      	ldr	r2, [r7, #12]
 8001d24:	4413      	add	r3, r2
 8001d26:	7dba      	ldrb	r2, [r7, #22]
 8001d28:	3201      	adds	r2, #1
 8001d2a:	b2d2      	uxtb	r2, r2
 8001d2c:	701a      	strb	r2, [r3, #0]
			cellsToBalanceQty++;
 8001d2e:	7dfb      	ldrb	r3, [r7, #23]
 8001d30:	3301      	adds	r3, #1
 8001d32:	75fb      	strb	r3, [r7, #23]
	for(uint8_t i = 0; i < CELL_QTY; i++) {
 8001d34:	7dbb      	ldrb	r3, [r7, #22]
 8001d36:	3301      	adds	r3, #1
 8001d38:	75bb      	strb	r3, [r7, #22]
 8001d3a:	7dbb      	ldrb	r3, [r7, #22]
 8001d3c:	2b13      	cmp	r3, #19
 8001d3e:	d9e5      	bls.n	8001d0c <balance_check+0x18>
		}
	}

	// For loop below sorts the cells that need to balanced (cellsToBalance array) in descending order
    for (uint8_t i = 0; i < cellsToBalanceQty - 1; i++) {
 8001d40:	2300      	movs	r3, #0
 8001d42:	757b      	strb	r3, [r7, #21]
 8001d44:	e02e      	b.n	8001da4 <balance_check+0xb0>
        for (uint8_t j = 0; j < cellsToBalanceQty - i - 1; j++) {
 8001d46:	2300      	movs	r3, #0
 8001d48:	753b      	strb	r3, [r7, #20]
 8001d4a:	e021      	b.n	8001d90 <balance_check+0x9c>
            if (*(cellsToBalance + j) < *(cellsToBalance + j + 1)) {
 8001d4c:	7d3b      	ldrb	r3, [r7, #20]
 8001d4e:	68fa      	ldr	r2, [r7, #12]
 8001d50:	4413      	add	r3, r2
 8001d52:	781a      	ldrb	r2, [r3, #0]
 8001d54:	7d3b      	ldrb	r3, [r7, #20]
 8001d56:	3301      	adds	r3, #1
 8001d58:	68f9      	ldr	r1, [r7, #12]
 8001d5a:	440b      	add	r3, r1
 8001d5c:	781b      	ldrb	r3, [r3, #0]
 8001d5e:	429a      	cmp	r2, r3
 8001d60:	d213      	bcs.n	8001d8a <balance_check+0x96>
                uint8_t dummy = *(cellsToBalance + j);
 8001d62:	7d3b      	ldrb	r3, [r7, #20]
 8001d64:	68fa      	ldr	r2, [r7, #12]
 8001d66:	4413      	add	r3, r2
 8001d68:	781b      	ldrb	r3, [r3, #0]
 8001d6a:	74fb      	strb	r3, [r7, #19]
                *(cellsToBalance + j) = *(cellsToBalance + j + 1);
 8001d6c:	7d3b      	ldrb	r3, [r7, #20]
 8001d6e:	3301      	adds	r3, #1
 8001d70:	68fa      	ldr	r2, [r7, #12]
 8001d72:	441a      	add	r2, r3
 8001d74:	7d3b      	ldrb	r3, [r7, #20]
 8001d76:	68f9      	ldr	r1, [r7, #12]
 8001d78:	440b      	add	r3, r1
 8001d7a:	7812      	ldrb	r2, [r2, #0]
 8001d7c:	701a      	strb	r2, [r3, #0]
                *(cellsToBalance + j + 1) = dummy;
 8001d7e:	7d3b      	ldrb	r3, [r7, #20]
 8001d80:	3301      	adds	r3, #1
 8001d82:	68fa      	ldr	r2, [r7, #12]
 8001d84:	4413      	add	r3, r2
 8001d86:	7cfa      	ldrb	r2, [r7, #19]
 8001d88:	701a      	strb	r2, [r3, #0]
        for (uint8_t j = 0; j < cellsToBalanceQty - i - 1; j++) {
 8001d8a:	7d3b      	ldrb	r3, [r7, #20]
 8001d8c:	3301      	adds	r3, #1
 8001d8e:	753b      	strb	r3, [r7, #20]
 8001d90:	7d3a      	ldrb	r2, [r7, #20]
 8001d92:	7df9      	ldrb	r1, [r7, #23]
 8001d94:	7d7b      	ldrb	r3, [r7, #21]
 8001d96:	1acb      	subs	r3, r1, r3
 8001d98:	3b01      	subs	r3, #1
 8001d9a:	429a      	cmp	r2, r3
 8001d9c:	dbd6      	blt.n	8001d4c <balance_check+0x58>
    for (uint8_t i = 0; i < cellsToBalanceQty - 1; i++) {
 8001d9e:	7d7b      	ldrb	r3, [r7, #21]
 8001da0:	3301      	adds	r3, #1
 8001da2:	757b      	strb	r3, [r7, #21]
 8001da4:	7d7a      	ldrb	r2, [r7, #21]
 8001da6:	7dfb      	ldrb	r3, [r7, #23]
 8001da8:	3b01      	subs	r3, #1
 8001daa:	429a      	cmp	r2, r3
 8001dac:	dbcb      	blt.n	8001d46 <balance_check+0x52>
            }
        }
    }
    return cellsToBalanceQty;
 8001dae:	7dfb      	ldrb	r3, [r7, #23]
}
 8001db0:	4618      	mov	r0, r3
 8001db2:	371c      	adds	r7, #28
 8001db4:	46bd      	mov	sp, r7
 8001db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dba:	4770      	bx	lr

08001dbc <extract_min_cell_voltage>:


void extract_min_cell_voltage(uint16_t *absMinCellVoltage)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b0ac      	sub	sp, #176	@ 0xb0
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
	CAN_RxHeaderTypeDef RxHeader;
	uint8_t RxData[8];

	uint16_t cellVoltages[CELL_QTY];
	float moduleTemperatures[MODULE_THERM_QTY];
	uint16_t localMinCellVoltages[5] = {0};
 8001dc4:	f107 0308 	add.w	r3, r7, #8
 8001dc8:	2200      	movs	r2, #0
 8001dca:	601a      	str	r2, [r3, #0]
 8001dcc:	605a      	str	r2, [r3, #4]
 8001dce:	811a      	strh	r2, [r3, #8]

	uint8_t minCellVoltageReceptionFlag = 0;
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	f887 30af 	strb.w	r3, [r7, #175]	@ 0xaf

	uint16_t dummyMinValue;

	transmitCounter = 0;
 8001dd6:	4b97      	ldr	r3, [pc, #604]	@ (8002034 <extract_min_cell_voltage+0x278>)
 8001dd8:	2200      	movs	r2, #0
 8001dda:	601a      	str	r2, [r3, #0]
	measureCounter = 0;
 8001ddc:	4b96      	ldr	r3, [pc, #600]	@ (8002038 <extract_min_cell_voltage+0x27c>)
 8001dde:	2200      	movs	r2, #0
 8001de0:	601a      	str	r2, [r3, #0]
	while(!minCellVoltageReceptionFlag) {
 8001de2:	e0f5      	b.n	8001fd0 <extract_min_cell_voltage+0x214>
		if(measureCounter > MEASURE_INTERVAL) {
 8001de4:	4b94      	ldr	r3, [pc, #592]	@ (8002038 <extract_min_cell_voltage+0x27c>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	2b64      	cmp	r3, #100	@ 0x64
 8001dea:	d93e      	bls.n	8001e6a <extract_min_cell_voltage+0xae>
			if(!refup_check()) {
 8001dec:	f007 ff55 	bl	8009c9a <refup_check>
 8001df0:	4603      	mov	r3, r0
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d104      	bne.n	8001e00 <extract_min_cell_voltage+0x44>
				force_refup();
 8001df6:	f007 ff1b 	bl	8009c30 <force_refup>
				wait(1);
 8001dfa:	2001      	movs	r0, #1
 8001dfc:	f008 fd02 	bl	800a804 <wait>
			}

			temperature_sense(moduleTemperatures);
 8001e00:	f107 0314 	add.w	r3, r7, #20
 8001e04:	4618      	mov	r0, r3
 8001e06:	f008 ff6b 	bl	800ace0 <temperature_sense>
			voltage_sense(cellVoltages);
 8001e0a:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001e0e:	4618      	mov	r0, r3
 8001e10:	f009 fd3e 	bl	800b890 <voltage_sense>

			// Check for minimum cell voltage in own cell voltage set
			dummyMinValue = cellVoltages[0];
 8001e14:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 8001e18:	f8a7 30ac 	strh.w	r3, [r7, #172]	@ 0xac
			for(uint8_t i = 0; i < CELL_QTY; i++) {
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	f887 30ab 	strb.w	r3, [r7, #171]	@ 0xab
 8001e22:	e018      	b.n	8001e56 <extract_min_cell_voltage+0x9a>
				if(cellVoltages[i] < dummyMinValue) {
 8001e24:	f897 30ab 	ldrb.w	r3, [r7, #171]	@ 0xab
 8001e28:	005b      	lsls	r3, r3, #1
 8001e2a:	33b0      	adds	r3, #176	@ 0xb0
 8001e2c:	443b      	add	r3, r7
 8001e2e:	f833 3c54 	ldrh.w	r3, [r3, #-84]
 8001e32:	f8b7 20ac 	ldrh.w	r2, [r7, #172]	@ 0xac
 8001e36:	429a      	cmp	r2, r3
 8001e38:	d908      	bls.n	8001e4c <extract_min_cell_voltage+0x90>
					dummyMinValue = cellVoltages[i];
 8001e3a:	f897 30ab 	ldrb.w	r3, [r7, #171]	@ 0xab
 8001e3e:	005b      	lsls	r3, r3, #1
 8001e40:	33b0      	adds	r3, #176	@ 0xb0
 8001e42:	443b      	add	r3, r7
 8001e44:	f833 3c54 	ldrh.w	r3, [r3, #-84]
 8001e48:	f8a7 30ac 	strh.w	r3, [r7, #172]	@ 0xac
			for(uint8_t i = 0; i < CELL_QTY; i++) {
 8001e4c:	f897 30ab 	ldrb.w	r3, [r7, #171]	@ 0xab
 8001e50:	3301      	adds	r3, #1
 8001e52:	f887 30ab 	strb.w	r3, [r7, #171]	@ 0xab
 8001e56:	f897 30ab 	ldrb.w	r3, [r7, #171]	@ 0xab
 8001e5a:	2b13      	cmp	r3, #19
 8001e5c:	d9e2      	bls.n	8001e24 <extract_min_cell_voltage+0x68>
				}
			}
			localMinCellVoltages[0] = dummyMinValue;
 8001e5e:	f8b7 30ac 	ldrh.w	r3, [r7, #172]	@ 0xac
 8001e62:	813b      	strh	r3, [r7, #8]

			measureCounter = 0;
 8001e64:	4b74      	ldr	r3, [pc, #464]	@ (8002038 <extract_min_cell_voltage+0x27c>)
 8001e66:	2200      	movs	r2, #0
 8001e68:	601a      	str	r2, [r3, #0]
		}

		if(transmitCounter > transmissionDelay) {
 8001e6a:	4b74      	ldr	r3, [pc, #464]	@ (800203c <extract_min_cell_voltage+0x280>)
 8001e6c:	881b      	ldrh	r3, [r3, #0]
 8001e6e:	461a      	mov	r2, r3
 8001e70:	4b70      	ldr	r3, [pc, #448]	@ (8002034 <extract_min_cell_voltage+0x278>)
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	429a      	cmp	r2, r3
 8001e76:	d20e      	bcs.n	8001e96 <extract_min_cell_voltage+0xda>
			transmit_extract_vmin();
 8001e78:	f003 fb7a 	bl	8005570 <transmit_extract_vmin>
			transmit_voltages(cellVoltages);
 8001e7c:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001e80:	4618      	mov	r0, r3
 8001e82:	f003 fb87 	bl	8005594 <transmit_voltages>
			transmit_temperatures(moduleTemperatures);
 8001e86:	f107 0314 	add.w	r3, r7, #20
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	f003 fd52 	bl	8005934 <transmit_temperatures>

			transmitCounter = 0;
 8001e90:	4b68      	ldr	r3, [pc, #416]	@ (8002034 <extract_min_cell_voltage+0x278>)
 8001e92:	2200      	movs	r2, #0
 8001e94:	601a      	str	r2, [r3, #0]
		}

		if(HAL_CAN_GetRxFifoFillLevel(&hcan1, CAN_RX_FIFO0) > 0) {
 8001e96:	2100      	movs	r1, #0
 8001e98:	4869      	ldr	r0, [pc, #420]	@ (8002040 <extract_min_cell_voltage+0x284>)
 8001e9a:	f00b f850 	bl	800cf3e <HAL_CAN_GetRxFifoFillLevel>
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d076      	beq.n	8001f92 <extract_min_cell_voltage+0x1d6>
			uint8_t attempts = 0;
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	f887 30aa 	strb.w	r3, [r7, #170]	@ 0xaa

			while(attempts < ATTEMPT_LIMIT) {
 8001eaa:	e064      	b.n	8001f76 <extract_min_cell_voltage+0x1ba>
				if(HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &RxHeader, RxData) == HAL_OK) {
 8001eac:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8001eb0:	f107 028c 	add.w	r2, r7, #140	@ 0x8c
 8001eb4:	2100      	movs	r1, #0
 8001eb6:	4862      	ldr	r0, [pc, #392]	@ (8002040 <extract_min_cell_voltage+0x284>)
 8001eb8:	f00a ff1f 	bl	800ccfa <HAL_CAN_GetRxMessage>
 8001ebc:	4603      	mov	r3, r0
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d151      	bne.n	8001f66 <extract_min_cell_voltage+0x1aa>

					if(RxHeader.StdId == CAN_FAULT_ID) { silent_error_loop(); }
 8001ec2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001ec6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001eca:	d101      	bne.n	8001ed0 <extract_min_cell_voltage+0x114>
 8001ecc:	f002 ff4c 	bl	8004d68 <silent_error_loop>

					if(RxHeader.StdId == CAN_M2_VMIN_ID) { localMinCellVoltages[1] = (uint16_t)RxData[0] | ((uint16_t)RxData[1] << 8); }
 8001ed0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001ed4:	f240 32e1 	movw	r2, #993	@ 0x3e1
 8001ed8:	4293      	cmp	r3, r2
 8001eda:	d10b      	bne.n	8001ef4 <extract_min_cell_voltage+0x138>
 8001edc:	f897 3084 	ldrb.w	r3, [r7, #132]	@ 0x84
 8001ee0:	b21a      	sxth	r2, r3
 8001ee2:	f897 3085 	ldrb.w	r3, [r7, #133]	@ 0x85
 8001ee6:	b21b      	sxth	r3, r3
 8001ee8:	021b      	lsls	r3, r3, #8
 8001eea:	b21b      	sxth	r3, r3
 8001eec:	4313      	orrs	r3, r2
 8001eee:	b21b      	sxth	r3, r3
 8001ef0:	b29b      	uxth	r3, r3
 8001ef2:	817b      	strh	r3, [r7, #10]

					if(RxHeader.StdId == CAN_M3_VMIN_ID) { localMinCellVoltages[2] = (uint16_t)RxData[0] | ((uint16_t)RxData[1] << 8); }
 8001ef4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001ef8:	f240 32e2 	movw	r2, #994	@ 0x3e2
 8001efc:	4293      	cmp	r3, r2
 8001efe:	d10b      	bne.n	8001f18 <extract_min_cell_voltage+0x15c>
 8001f00:	f897 3084 	ldrb.w	r3, [r7, #132]	@ 0x84
 8001f04:	b21a      	sxth	r2, r3
 8001f06:	f897 3085 	ldrb.w	r3, [r7, #133]	@ 0x85
 8001f0a:	b21b      	sxth	r3, r3
 8001f0c:	021b      	lsls	r3, r3, #8
 8001f0e:	b21b      	sxth	r3, r3
 8001f10:	4313      	orrs	r3, r2
 8001f12:	b21b      	sxth	r3, r3
 8001f14:	b29b      	uxth	r3, r3
 8001f16:	81bb      	strh	r3, [r7, #12]

					if(RxHeader.StdId == CAN_M4_VMIN_ID) { localMinCellVoltages[3] = (uint16_t)RxData[0] | ((uint16_t)RxData[1] << 8); }
 8001f18:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001f1c:	f240 32e3 	movw	r2, #995	@ 0x3e3
 8001f20:	4293      	cmp	r3, r2
 8001f22:	d10b      	bne.n	8001f3c <extract_min_cell_voltage+0x180>
 8001f24:	f897 3084 	ldrb.w	r3, [r7, #132]	@ 0x84
 8001f28:	b21a      	sxth	r2, r3
 8001f2a:	f897 3085 	ldrb.w	r3, [r7, #133]	@ 0x85
 8001f2e:	b21b      	sxth	r3, r3
 8001f30:	021b      	lsls	r3, r3, #8
 8001f32:	b21b      	sxth	r3, r3
 8001f34:	4313      	orrs	r3, r2
 8001f36:	b21b      	sxth	r3, r3
 8001f38:	b29b      	uxth	r3, r3
 8001f3a:	81fb      	strh	r3, [r7, #14]

					if(RxHeader.StdId == CAN_M5_VMIN_ID) { localMinCellVoltages[4] = (uint16_t)RxData[0] | ((uint16_t)RxData[1] << 8); }
 8001f3c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001f40:	f5b3 7f79 	cmp.w	r3, #996	@ 0x3e4
 8001f44:	d10b      	bne.n	8001f5e <extract_min_cell_voltage+0x1a2>
 8001f46:	f897 3084 	ldrb.w	r3, [r7, #132]	@ 0x84
 8001f4a:	b21a      	sxth	r2, r3
 8001f4c:	f897 3085 	ldrb.w	r3, [r7, #133]	@ 0x85
 8001f50:	b21b      	sxth	r3, r3
 8001f52:	021b      	lsls	r3, r3, #8
 8001f54:	b21b      	sxth	r3, r3
 8001f56:	4313      	orrs	r3, r2
 8001f58:	b21b      	sxth	r3, r3
 8001f5a:	b29b      	uxth	r3, r3
 8001f5c:	823b      	strh	r3, [r7, #16]

					attempts = 13;
 8001f5e:	230d      	movs	r3, #13
 8001f60:	f887 30aa 	strb.w	r3, [r7, #170]	@ 0xaa
 8001f64:	e007      	b.n	8001f76 <extract_min_cell_voltage+0x1ba>
				}
				// If there's a problem with reading the CAN message, the 'attempts' counter will increment.
				else {
					attempts++;
 8001f66:	f897 30aa 	ldrb.w	r3, [r7, #170]	@ 0xaa
 8001f6a:	3301      	adds	r3, #1
 8001f6c:	f887 30aa 	strb.w	r3, [r7, #170]	@ 0xaa
					wait(5);
 8001f70:	2005      	movs	r0, #5
 8001f72:	f008 fc47 	bl	800a804 <wait>
			while(attempts < ATTEMPT_LIMIT) {
 8001f76:	f897 30aa 	ldrb.w	r3, [r7, #170]	@ 0xaa
 8001f7a:	2b09      	cmp	r3, #9
 8001f7c:	d996      	bls.n	8001eac <extract_min_cell_voltage+0xf0>
				}
			}
			// If the STM32 fails to read the CAN message 10 times in a row, fault!
			if(attempts != 13) { error_loop(ERROR_CAN_READ, 0, 0, MCU_FAULT); }
 8001f7e:	f897 30aa 	ldrb.w	r3, [r7, #170]	@ 0xaa
 8001f82:	2b0d      	cmp	r3, #13
 8001f84:	d005      	beq.n	8001f92 <extract_min_cell_voltage+0x1d6>
 8001f86:	2302      	movs	r3, #2
 8001f88:	2200      	movs	r2, #0
 8001f8a:	2100      	movs	r1, #0
 8001f8c:	2057      	movs	r0, #87	@ 0x57
 8001f8e:	f002 ff33 	bl	8004df8 <error_loop>
		}

		minCellVoltageReceptionFlag = 1;
 8001f92:	2301      	movs	r3, #1
 8001f94:	f887 30af 	strb.w	r3, [r7, #175]	@ 0xaf
		for(uint8_t i = 0; i < 5; i++) {
 8001f98:	2300      	movs	r3, #0
 8001f9a:	f887 30a9 	strb.w	r3, [r7, #169]	@ 0xa9
 8001f9e:	e010      	b.n	8001fc2 <extract_min_cell_voltage+0x206>
			if(localMinCellVoltages[i] == 0) {
 8001fa0:	f897 30a9 	ldrb.w	r3, [r7, #169]	@ 0xa9
 8001fa4:	005b      	lsls	r3, r3, #1
 8001fa6:	33b0      	adds	r3, #176	@ 0xb0
 8001fa8:	443b      	add	r3, r7
 8001faa:	f833 3ca8 	ldrh.w	r3, [r3, #-168]
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d102      	bne.n	8001fb8 <extract_min_cell_voltage+0x1fc>
				minCellVoltageReceptionFlag = 0;
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	f887 30af 	strb.w	r3, [r7, #175]	@ 0xaf
		for(uint8_t i = 0; i < 5; i++) {
 8001fb8:	f897 30a9 	ldrb.w	r3, [r7, #169]	@ 0xa9
 8001fbc:	3301      	adds	r3, #1
 8001fbe:	f887 30a9 	strb.w	r3, [r7, #169]	@ 0xa9
 8001fc2:	f897 30a9 	ldrb.w	r3, [r7, #169]	@ 0xa9
 8001fc6:	2b04      	cmp	r3, #4
 8001fc8:	d9ea      	bls.n	8001fa0 <extract_min_cell_voltage+0x1e4>
			}
		}

		wait(1);
 8001fca:	2001      	movs	r0, #1
 8001fcc:	f008 fc1a 	bl	800a804 <wait>
	while(!minCellVoltageReceptionFlag) {
 8001fd0:	f897 30af 	ldrb.w	r3, [r7, #175]	@ 0xaf
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	f43f af05 	beq.w	8001de4 <extract_min_cell_voltage+0x28>
	}

	// Find lowest cell voltage in pack
	dummyMinValue = localMinCellVoltages[0];
 8001fda:	893b      	ldrh	r3, [r7, #8]
 8001fdc:	f8a7 30ac 	strh.w	r3, [r7, #172]	@ 0xac
	for(uint8_t i = 0; i < 5; i++) {
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	f887 30a8 	strb.w	r3, [r7, #168]	@ 0xa8
 8001fe6:	e018      	b.n	800201a <extract_min_cell_voltage+0x25e>
		if(localMinCellVoltages[i] < dummyMinValue) {
 8001fe8:	f897 30a8 	ldrb.w	r3, [r7, #168]	@ 0xa8
 8001fec:	005b      	lsls	r3, r3, #1
 8001fee:	33b0      	adds	r3, #176	@ 0xb0
 8001ff0:	443b      	add	r3, r7
 8001ff2:	f833 3ca8 	ldrh.w	r3, [r3, #-168]
 8001ff6:	f8b7 20ac 	ldrh.w	r2, [r7, #172]	@ 0xac
 8001ffa:	429a      	cmp	r2, r3
 8001ffc:	d908      	bls.n	8002010 <extract_min_cell_voltage+0x254>
			dummyMinValue = localMinCellVoltages[i];
 8001ffe:	f897 30a8 	ldrb.w	r3, [r7, #168]	@ 0xa8
 8002002:	005b      	lsls	r3, r3, #1
 8002004:	33b0      	adds	r3, #176	@ 0xb0
 8002006:	443b      	add	r3, r7
 8002008:	f833 3ca8 	ldrh.w	r3, [r3, #-168]
 800200c:	f8a7 30ac 	strh.w	r3, [r7, #172]	@ 0xac
	for(uint8_t i = 0; i < 5; i++) {
 8002010:	f897 30a8 	ldrb.w	r3, [r7, #168]	@ 0xa8
 8002014:	3301      	adds	r3, #1
 8002016:	f887 30a8 	strb.w	r3, [r7, #168]	@ 0xa8
 800201a:	f897 30a8 	ldrb.w	r3, [r7, #168]	@ 0xa8
 800201e:	2b04      	cmp	r3, #4
 8002020:	d9e2      	bls.n	8001fe8 <extract_min_cell_voltage+0x22c>
		}
	}
	*absMinCellVoltage = dummyMinValue;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	f8b7 20ac 	ldrh.w	r2, [r7, #172]	@ 0xac
 8002028:	801a      	strh	r2, [r3, #0]
}
 800202a:	bf00      	nop
 800202c:	37b0      	adds	r7, #176	@ 0xb0
 800202e:	46bd      	mov	sp, r7
 8002030:	bd80      	pop	{r7, pc}
 8002032:	bf00      	nop
 8002034:	200003e8 	.word	0x200003e8
 8002038:	200003ec 	.word	0x200003ec
 800203c:	200003e6 	.word	0x200003e6
 8002040:	200000c4 	.word	0x200000c4

08002044 <balance_cycle>:


void balance_cycle(uint8_t *cellsToBalance, uint8_t cellsToBalanceQty, uint16_t absMinCellVoltage, uint8_t *haltBalanceFlag)
{
 8002044:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002048:	f5ad 7d1b 	sub.w	sp, sp, #620	@ 0x26c
 800204c:	af02      	add	r7, sp, #8
 800204e:	f507 7418 	add.w	r4, r7, #608	@ 0x260
 8002052:	f5a4 7403 	sub.w	r4, r4, #524	@ 0x20c
 8002056:	6020      	str	r0, [r4, #0]
 8002058:	4610      	mov	r0, r2
 800205a:	f507 7218 	add.w	r2, r7, #608	@ 0x260
 800205e:	f5a2 7205 	sub.w	r2, r2, #532	@ 0x214
 8002062:	6013      	str	r3, [r2, #0]
 8002064:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 8002068:	f2a3 220d 	subw	r2, r3, #525	@ 0x20d
 800206c:	460b      	mov	r3, r1
 800206e:	7013      	strb	r3, [r2, #0]
 8002070:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 8002074:	f5a3 7204 	sub.w	r2, r3, #528	@ 0x210
 8002078:	4603      	mov	r3, r0
 800207a:	8013      	strh	r3, [r2, #0]
 800207c:	466b      	mov	r3, sp
 800207e:	461c      	mov	r4, r3
	CAN_RxHeaderTypeDef RxHeader;
	uint8_t RxData[8];

	uint8_t evenCellsFlag = 1;
 8002080:	2301      	movs	r3, #1
 8002082:	f887 325f 	strb.w	r3, [r7, #607]	@ 0x25f
	uint8_t oddCellsFlag = 1;
 8002086:	2301      	movs	r3, #1
 8002088:	f887 325e 	strb.w	r3, [r7, #606]	@ 0x25e

	uint8_t evenCellCount = 0;
 800208c:	2300      	movs	r3, #0
 800208e:	f887 325d 	strb.w	r3, [r7, #605]	@ 0x25d
	uint8_t oddCellCount = 0;
 8002092:	2300      	movs	r3, #0
 8002094:	f887 325c 	strb.w	r3, [r7, #604]	@ 0x25c

	// For-loop below counts up all the even & odd cells that need to be balanced.
	for(uint8_t i = 0; i < cellsToBalanceQty; i++) {
 8002098:	2300      	movs	r3, #0
 800209a:	f887 325b 	strb.w	r3, [r7, #603]	@ 0x25b
 800209e:	e028      	b.n	80020f2 <balance_cycle+0xae>
		if(*(cellsToBalance + i) != 0) {
 80020a0:	f897 225b 	ldrb.w	r2, [r7, #603]	@ 0x25b
 80020a4:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 80020a8:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	4413      	add	r3, r2
 80020b0:	781b      	ldrb	r3, [r3, #0]
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d018      	beq.n	80020e8 <balance_cycle+0xa4>
			if(*(cellsToBalance + i) % 2 == 0) {
 80020b6:	f897 225b 	ldrb.w	r2, [r7, #603]	@ 0x25b
 80020ba:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 80020be:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	4413      	add	r3, r2
 80020c6:	781b      	ldrb	r3, [r3, #0]
 80020c8:	f003 0301 	and.w	r3, r3, #1
 80020cc:	b2db      	uxtb	r3, r3
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d105      	bne.n	80020de <balance_cycle+0x9a>
				evenCellCount++;
 80020d2:	f897 325d 	ldrb.w	r3, [r7, #605]	@ 0x25d
 80020d6:	3301      	adds	r3, #1
 80020d8:	f887 325d 	strb.w	r3, [r7, #605]	@ 0x25d
 80020dc:	e004      	b.n	80020e8 <balance_cycle+0xa4>
			}
			else {
				oddCellCount++;
 80020de:	f897 325c 	ldrb.w	r3, [r7, #604]	@ 0x25c
 80020e2:	3301      	adds	r3, #1
 80020e4:	f887 325c 	strb.w	r3, [r7, #604]	@ 0x25c
	for(uint8_t i = 0; i < cellsToBalanceQty; i++) {
 80020e8:	f897 325b 	ldrb.w	r3, [r7, #603]	@ 0x25b
 80020ec:	3301      	adds	r3, #1
 80020ee:	f887 325b 	strb.w	r3, [r7, #603]	@ 0x25b
 80020f2:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 80020f6:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 80020fa:	f897 225b 	ldrb.w	r2, [r7, #603]	@ 0x25b
 80020fe:	781b      	ldrb	r3, [r3, #0]
 8002100:	429a      	cmp	r2, r3
 8002102:	d3cd      	bcc.n	80020a0 <balance_cycle+0x5c>
			}
		}
	}

	uint8_t evenCells[evenCellCount];
 8002104:	f897 125d 	ldrb.w	r1, [r7, #605]	@ 0x25d
 8002108:	460b      	mov	r3, r1
 800210a:	3b01      	subs	r3, #1
 800210c:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
 8002110:	b2cb      	uxtb	r3, r1
 8002112:	2200      	movs	r2, #0
 8002114:	4698      	mov	r8, r3
 8002116:	4691      	mov	r9, r2
 8002118:	f04f 0200 	mov.w	r2, #0
 800211c:	f04f 0300 	mov.w	r3, #0
 8002120:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002124:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002128:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800212c:	b2cb      	uxtb	r3, r1
 800212e:	2200      	movs	r2, #0
 8002130:	469a      	mov	sl, r3
 8002132:	4693      	mov	fp, r2
 8002134:	f04f 0200 	mov.w	r2, #0
 8002138:	f04f 0300 	mov.w	r3, #0
 800213c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002140:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002144:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002148:	460b      	mov	r3, r1
 800214a:	3307      	adds	r3, #7
 800214c:	08db      	lsrs	r3, r3, #3
 800214e:	00db      	lsls	r3, r3, #3
 8002150:	ebad 0d03 	sub.w	sp, sp, r3
 8002154:	ab02      	add	r3, sp, #8
 8002156:	3300      	adds	r3, #0
 8002158:	f8c7 3210 	str.w	r3, [r7, #528]	@ 0x210
	uint8_t oddCells[oddCellCount];
 800215c:	f897 125c 	ldrb.w	r1, [r7, #604]	@ 0x25c
 8002160:	460b      	mov	r3, r1
 8002162:	3b01      	subs	r3, #1
 8002164:	f8c7 320c 	str.w	r3, [r7, #524]	@ 0x20c
 8002168:	b2cb      	uxtb	r3, r1
 800216a:	2200      	movs	r2, #0
 800216c:	461d      	mov	r5, r3
 800216e:	4616      	mov	r6, r2
 8002170:	f04f 0200 	mov.w	r2, #0
 8002174:	f04f 0300 	mov.w	r3, #0
 8002178:	00f3      	lsls	r3, r6, #3
 800217a:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
 800217e:	00ea      	lsls	r2, r5, #3
 8002180:	b2cb      	uxtb	r3, r1
 8002182:	2200      	movs	r2, #0
 8002184:	643b      	str	r3, [r7, #64]	@ 0x40
 8002186:	647a      	str	r2, [r7, #68]	@ 0x44
 8002188:	f04f 0200 	mov.w	r2, #0
 800218c:	f04f 0300 	mov.w	r3, #0
 8002190:	e9d7 5610 	ldrd	r5, r6, [r7, #64]	@ 0x40
 8002194:	4630      	mov	r0, r6
 8002196:	00c3      	lsls	r3, r0, #3
 8002198:	4628      	mov	r0, r5
 800219a:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800219e:	4628      	mov	r0, r5
 80021a0:	00c2      	lsls	r2, r0, #3
 80021a2:	460b      	mov	r3, r1
 80021a4:	3307      	adds	r3, #7
 80021a6:	08db      	lsrs	r3, r3, #3
 80021a8:	00db      	lsls	r3, r3, #3
 80021aa:	ebad 0d03 	sub.w	sp, sp, r3
 80021ae:	ab02      	add	r3, sp, #8
 80021b0:	3300      	adds	r3, #0
 80021b2:	f8c7 3208 	str.w	r3, [r7, #520]	@ 0x208
	uint8_t evenIndex = 0;
 80021b6:	2300      	movs	r3, #0
 80021b8:	f887 325a 	strb.w	r3, [r7, #602]	@ 0x25a
	uint8_t oddIndex = 0;
 80021bc:	2300      	movs	r3, #0
 80021be:	f887 3259 	strb.w	r3, [r7, #601]	@ 0x259

	// For-loop below assigns all even and odd cells in need of balancing to their own arrays.
	for(uint8_t i = 0; i < cellsToBalanceQty; i++) {
 80021c2:	2300      	movs	r3, #0
 80021c4:	f887 3258 	strb.w	r3, [r7, #600]	@ 0x258
 80021c8:	e042      	b.n	8002250 <balance_cycle+0x20c>
		if(*(cellsToBalance + i) != 0) {
 80021ca:	f897 2258 	ldrb.w	r2, [r7, #600]	@ 0x258
 80021ce:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 80021d2:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	4413      	add	r3, r2
 80021da:	781b      	ldrb	r3, [r3, #0]
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d032      	beq.n	8002246 <balance_cycle+0x202>
			if(*(cellsToBalance + i) % 2 == 0) {
 80021e0:	f897 2258 	ldrb.w	r2, [r7, #600]	@ 0x258
 80021e4:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 80021e8:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	4413      	add	r3, r2
 80021f0:	781b      	ldrb	r3, [r3, #0]
 80021f2:	f003 0301 	and.w	r3, r3, #1
 80021f6:	b2db      	uxtb	r3, r3
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d112      	bne.n	8002222 <balance_cycle+0x1de>
				evenCells[evenIndex++] = *(cellsToBalance + i);
 80021fc:	f897 2258 	ldrb.w	r2, [r7, #600]	@ 0x258
 8002200:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 8002204:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	1899      	adds	r1, r3, r2
 800220c:	f897 225a 	ldrb.w	r2, [r7, #602]	@ 0x25a
 8002210:	1c53      	adds	r3, r2, #1
 8002212:	f887 325a 	strb.w	r3, [r7, #602]	@ 0x25a
 8002216:	4610      	mov	r0, r2
 8002218:	780b      	ldrb	r3, [r1, #0]
 800221a:	f8d7 2210 	ldr.w	r2, [r7, #528]	@ 0x210
 800221e:	5413      	strb	r3, [r2, r0]
 8002220:	e011      	b.n	8002246 <balance_cycle+0x202>
			}
			else {
				oddCells[oddIndex++] = *(cellsToBalance + i);
 8002222:	f897 2258 	ldrb.w	r2, [r7, #600]	@ 0x258
 8002226:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 800222a:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	1899      	adds	r1, r3, r2
 8002232:	f897 2259 	ldrb.w	r2, [r7, #601]	@ 0x259
 8002236:	1c53      	adds	r3, r2, #1
 8002238:	f887 3259 	strb.w	r3, [r7, #601]	@ 0x259
 800223c:	4610      	mov	r0, r2
 800223e:	780b      	ldrb	r3, [r1, #0]
 8002240:	f8d7 2208 	ldr.w	r2, [r7, #520]	@ 0x208
 8002244:	5413      	strb	r3, [r2, r0]
	for(uint8_t i = 0; i < cellsToBalanceQty; i++) {
 8002246:	f897 3258 	ldrb.w	r3, [r7, #600]	@ 0x258
 800224a:	3301      	adds	r3, #1
 800224c:	f887 3258 	strb.w	r3, [r7, #600]	@ 0x258
 8002250:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 8002254:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 8002258:	f897 2258 	ldrb.w	r2, [r7, #600]	@ 0x258
 800225c:	781b      	ldrb	r3, [r3, #0]
 800225e:	429a      	cmp	r2, r3
 8002260:	d3b3      	bcc.n	80021ca <balance_cycle+0x186>
			}
		}
	}

	uint8_t sideAEvenCount = 0;
 8002262:	2300      	movs	r3, #0
 8002264:	f887 3257 	strb.w	r3, [r7, #599]	@ 0x257
	uint8_t sideAOddCount = 0;
 8002268:	2300      	movs	r3, #0
 800226a:	f887 3256 	strb.w	r3, [r7, #598]	@ 0x256
	uint8_t sideBEvenCount = 0;
 800226e:	2300      	movs	r3, #0
 8002270:	f887 3255 	strb.w	r3, [r7, #597]	@ 0x255
	uint8_t sideBOddCount = 0;
 8002274:	2300      	movs	r3, #0
 8002276:	f887 3254 	strb.w	r3, [r7, #596]	@ 0x254

	// For-loop below counts up all the side A even & odd cells.
	for(uint8_t i = 0; i < evenCellCount; i++) {
 800227a:	2300      	movs	r3, #0
 800227c:	f887 3253 	strb.w	r3, [r7, #595]	@ 0x253
 8002280:	e016      	b.n	80022b0 <balance_cycle+0x26c>
		if(evenCells[i] > 10) {
 8002282:	f897 2253 	ldrb.w	r2, [r7, #595]	@ 0x253
 8002286:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 800228a:	5c9b      	ldrb	r3, [r3, r2]
 800228c:	2b0a      	cmp	r3, #10
 800228e:	d905      	bls.n	800229c <balance_cycle+0x258>
			sideBEvenCount++;
 8002290:	f897 3255 	ldrb.w	r3, [r7, #597]	@ 0x255
 8002294:	3301      	adds	r3, #1
 8002296:	f887 3255 	strb.w	r3, [r7, #597]	@ 0x255
 800229a:	e004      	b.n	80022a6 <balance_cycle+0x262>
		}

		else {
			sideAEvenCount++;
 800229c:	f897 3257 	ldrb.w	r3, [r7, #599]	@ 0x257
 80022a0:	3301      	adds	r3, #1
 80022a2:	f887 3257 	strb.w	r3, [r7, #599]	@ 0x257
	for(uint8_t i = 0; i < evenCellCount; i++) {
 80022a6:	f897 3253 	ldrb.w	r3, [r7, #595]	@ 0x253
 80022aa:	3301      	adds	r3, #1
 80022ac:	f887 3253 	strb.w	r3, [r7, #595]	@ 0x253
 80022b0:	f897 2253 	ldrb.w	r2, [r7, #595]	@ 0x253
 80022b4:	f897 325d 	ldrb.w	r3, [r7, #605]	@ 0x25d
 80022b8:	429a      	cmp	r2, r3
 80022ba:	d3e2      	bcc.n	8002282 <balance_cycle+0x23e>
		}
	}
	// For-loop below counts up all the side B even & odd cells.
	for(uint8_t i = 0; i < oddCellCount; i++) {
 80022bc:	2300      	movs	r3, #0
 80022be:	f887 3252 	strb.w	r3, [r7, #594]	@ 0x252
 80022c2:	e016      	b.n	80022f2 <balance_cycle+0x2ae>
		if(oddCells[i] > 9) {
 80022c4:	f897 2252 	ldrb.w	r2, [r7, #594]	@ 0x252
 80022c8:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 80022cc:	5c9b      	ldrb	r3, [r3, r2]
 80022ce:	2b09      	cmp	r3, #9
 80022d0:	d905      	bls.n	80022de <balance_cycle+0x29a>
			sideBOddCount++;
 80022d2:	f897 3254 	ldrb.w	r3, [r7, #596]	@ 0x254
 80022d6:	3301      	adds	r3, #1
 80022d8:	f887 3254 	strb.w	r3, [r7, #596]	@ 0x254
 80022dc:	e004      	b.n	80022e8 <balance_cycle+0x2a4>
		}

		else {
			sideAOddCount++;
 80022de:	f897 3256 	ldrb.w	r3, [r7, #598]	@ 0x256
 80022e2:	3301      	adds	r3, #1
 80022e4:	f887 3256 	strb.w	r3, [r7, #598]	@ 0x256
	for(uint8_t i = 0; i < oddCellCount; i++) {
 80022e8:	f897 3252 	ldrb.w	r3, [r7, #594]	@ 0x252
 80022ec:	3301      	adds	r3, #1
 80022ee:	f887 3252 	strb.w	r3, [r7, #594]	@ 0x252
 80022f2:	f897 2252 	ldrb.w	r2, [r7, #594]	@ 0x252
 80022f6:	f897 325c 	ldrb.w	r3, [r7, #604]	@ 0x25c
 80022fa:	429a      	cmp	r2, r3
 80022fc:	d3e2      	bcc.n	80022c4 <balance_cycle+0x280>
		}
	}

	uint8_t sideAEvenCells[sideAEvenCount];
 80022fe:	f897 1257 	ldrb.w	r1, [r7, #599]	@ 0x257
 8002302:	460b      	mov	r3, r1
 8002304:	3b01      	subs	r3, #1
 8002306:	f8c7 3204 	str.w	r3, [r7, #516]	@ 0x204
 800230a:	b2cb      	uxtb	r3, r1
 800230c:	2200      	movs	r2, #0
 800230e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002310:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002312:	f04f 0200 	mov.w	r2, #0
 8002316:	f04f 0300 	mov.w	r3, #0
 800231a:	e9d7 560e 	ldrd	r5, r6, [r7, #56]	@ 0x38
 800231e:	4630      	mov	r0, r6
 8002320:	00c3      	lsls	r3, r0, #3
 8002322:	4628      	mov	r0, r5
 8002324:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8002328:	4628      	mov	r0, r5
 800232a:	00c2      	lsls	r2, r0, #3
 800232c:	b2cb      	uxtb	r3, r1
 800232e:	2200      	movs	r2, #0
 8002330:	633b      	str	r3, [r7, #48]	@ 0x30
 8002332:	637a      	str	r2, [r7, #52]	@ 0x34
 8002334:	f04f 0200 	mov.w	r2, #0
 8002338:	f04f 0300 	mov.w	r3, #0
 800233c:	e9d7 560c 	ldrd	r5, r6, [r7, #48]	@ 0x30
 8002340:	4630      	mov	r0, r6
 8002342:	00c3      	lsls	r3, r0, #3
 8002344:	4628      	mov	r0, r5
 8002346:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800234a:	4628      	mov	r0, r5
 800234c:	00c2      	lsls	r2, r0, #3
 800234e:	460b      	mov	r3, r1
 8002350:	3307      	adds	r3, #7
 8002352:	08db      	lsrs	r3, r3, #3
 8002354:	00db      	lsls	r3, r3, #3
 8002356:	ebad 0d03 	sub.w	sp, sp, r3
 800235a:	ab02      	add	r3, sp, #8
 800235c:	3300      	adds	r3, #0
 800235e:	f8c7 3200 	str.w	r3, [r7, #512]	@ 0x200
	uint8_t sideAOddCells[sideAOddCount];
 8002362:	f897 1256 	ldrb.w	r1, [r7, #598]	@ 0x256
 8002366:	460b      	mov	r3, r1
 8002368:	3b01      	subs	r3, #1
 800236a:	f8c7 31fc 	str.w	r3, [r7, #508]	@ 0x1fc
 800236e:	b2cb      	uxtb	r3, r1
 8002370:	2200      	movs	r2, #0
 8002372:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002374:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002376:	f04f 0200 	mov.w	r2, #0
 800237a:	f04f 0300 	mov.w	r3, #0
 800237e:	e9d7 560a 	ldrd	r5, r6, [r7, #40]	@ 0x28
 8002382:	4630      	mov	r0, r6
 8002384:	00c3      	lsls	r3, r0, #3
 8002386:	4628      	mov	r0, r5
 8002388:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800238c:	4628      	mov	r0, r5
 800238e:	00c2      	lsls	r2, r0, #3
 8002390:	b2cb      	uxtb	r3, r1
 8002392:	2200      	movs	r2, #0
 8002394:	623b      	str	r3, [r7, #32]
 8002396:	627a      	str	r2, [r7, #36]	@ 0x24
 8002398:	f04f 0200 	mov.w	r2, #0
 800239c:	f04f 0300 	mov.w	r3, #0
 80023a0:	e9d7 5608 	ldrd	r5, r6, [r7, #32]
 80023a4:	4630      	mov	r0, r6
 80023a6:	00c3      	lsls	r3, r0, #3
 80023a8:	4628      	mov	r0, r5
 80023aa:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80023ae:	4628      	mov	r0, r5
 80023b0:	00c2      	lsls	r2, r0, #3
 80023b2:	460b      	mov	r3, r1
 80023b4:	3307      	adds	r3, #7
 80023b6:	08db      	lsrs	r3, r3, #3
 80023b8:	00db      	lsls	r3, r3, #3
 80023ba:	ebad 0d03 	sub.w	sp, sp, r3
 80023be:	ab02      	add	r3, sp, #8
 80023c0:	3300      	adds	r3, #0
 80023c2:	f8c7 31f8 	str.w	r3, [r7, #504]	@ 0x1f8
	uint8_t sideBEvenCells[sideBEvenCount];
 80023c6:	f897 1255 	ldrb.w	r1, [r7, #597]	@ 0x255
 80023ca:	460b      	mov	r3, r1
 80023cc:	3b01      	subs	r3, #1
 80023ce:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
 80023d2:	b2cb      	uxtb	r3, r1
 80023d4:	2200      	movs	r2, #0
 80023d6:	61bb      	str	r3, [r7, #24]
 80023d8:	61fa      	str	r2, [r7, #28]
 80023da:	f04f 0200 	mov.w	r2, #0
 80023de:	f04f 0300 	mov.w	r3, #0
 80023e2:	e9d7 5606 	ldrd	r5, r6, [r7, #24]
 80023e6:	4630      	mov	r0, r6
 80023e8:	00c3      	lsls	r3, r0, #3
 80023ea:	4628      	mov	r0, r5
 80023ec:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80023f0:	4628      	mov	r0, r5
 80023f2:	00c2      	lsls	r2, r0, #3
 80023f4:	b2cb      	uxtb	r3, r1
 80023f6:	2200      	movs	r2, #0
 80023f8:	613b      	str	r3, [r7, #16]
 80023fa:	617a      	str	r2, [r7, #20]
 80023fc:	f04f 0200 	mov.w	r2, #0
 8002400:	f04f 0300 	mov.w	r3, #0
 8002404:	e9d7 5604 	ldrd	r5, r6, [r7, #16]
 8002408:	4630      	mov	r0, r6
 800240a:	00c3      	lsls	r3, r0, #3
 800240c:	4628      	mov	r0, r5
 800240e:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8002412:	4628      	mov	r0, r5
 8002414:	00c2      	lsls	r2, r0, #3
 8002416:	460b      	mov	r3, r1
 8002418:	3307      	adds	r3, #7
 800241a:	08db      	lsrs	r3, r3, #3
 800241c:	00db      	lsls	r3, r3, #3
 800241e:	ebad 0d03 	sub.w	sp, sp, r3
 8002422:	ab02      	add	r3, sp, #8
 8002424:	3300      	adds	r3, #0
 8002426:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
	uint8_t sideBOddCells[sideBOddCount];
 800242a:	f897 1254 	ldrb.w	r1, [r7, #596]	@ 0x254
 800242e:	460b      	mov	r3, r1
 8002430:	3b01      	subs	r3, #1
 8002432:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
 8002436:	b2cb      	uxtb	r3, r1
 8002438:	2200      	movs	r2, #0
 800243a:	60bb      	str	r3, [r7, #8]
 800243c:	60fa      	str	r2, [r7, #12]
 800243e:	f04f 0200 	mov.w	r2, #0
 8002442:	f04f 0300 	mov.w	r3, #0
 8002446:	e9d7 5602 	ldrd	r5, r6, [r7, #8]
 800244a:	4630      	mov	r0, r6
 800244c:	00c3      	lsls	r3, r0, #3
 800244e:	4628      	mov	r0, r5
 8002450:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8002454:	4628      	mov	r0, r5
 8002456:	00c2      	lsls	r2, r0, #3
 8002458:	b2cb      	uxtb	r3, r1
 800245a:	2200      	movs	r2, #0
 800245c:	603b      	str	r3, [r7, #0]
 800245e:	607a      	str	r2, [r7, #4]
 8002460:	f04f 0200 	mov.w	r2, #0
 8002464:	f04f 0300 	mov.w	r3, #0
 8002468:	e9d7 5600 	ldrd	r5, r6, [r7]
 800246c:	4630      	mov	r0, r6
 800246e:	00c3      	lsls	r3, r0, #3
 8002470:	4628      	mov	r0, r5
 8002472:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8002476:	4628      	mov	r0, r5
 8002478:	00c2      	lsls	r2, r0, #3
 800247a:	460b      	mov	r3, r1
 800247c:	3307      	adds	r3, #7
 800247e:	08db      	lsrs	r3, r3, #3
 8002480:	00db      	lsls	r3, r3, #3
 8002482:	ebad 0d03 	sub.w	sp, sp, r3
 8002486:	ab02      	add	r3, sp, #8
 8002488:	3300      	adds	r3, #0
 800248a:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
	uint8_t sideAEvenIndex = 0;
 800248e:	2300      	movs	r3, #0
 8002490:	f887 3251 	strb.w	r3, [r7, #593]	@ 0x251
	uint8_t sideAOddIndex = 0;
 8002494:	2300      	movs	r3, #0
 8002496:	f887 3250 	strb.w	r3, [r7, #592]	@ 0x250
	uint8_t sideBEvenIndex = 0;
 800249a:	2300      	movs	r3, #0
 800249c:	f887 324f 	strb.w	r3, [r7, #591]	@ 0x24f
	uint8_t sideBOddIndex = 0;
 80024a0:	2300      	movs	r3, #0
 80024a2:	f887 324e 	strb.w	r3, [r7, #590]	@ 0x24e

	// For-loop below sets up the two side A even & odd cells to balance.
	for(uint8_t i = 0; i < evenCellCount; i++) {
 80024a6:	2300      	movs	r3, #0
 80024a8:	f887 324d 	strb.w	r3, [r7, #589]	@ 0x24d
 80024ac:	e02b      	b.n	8002506 <balance_cycle+0x4c2>
		if(evenCells[i] > 10) {
 80024ae:	f897 324d 	ldrb.w	r3, [r7, #589]	@ 0x24d
 80024b2:	f8d7 2210 	ldr.w	r2, [r7, #528]	@ 0x210
 80024b6:	5cd3      	ldrb	r3, [r2, r3]
 80024b8:	2b0a      	cmp	r3, #10
 80024ba:	d911      	bls.n	80024e0 <balance_cycle+0x49c>
			sideBEvenCells[sideBEvenIndex++] = evenCells[i] - 10;
 80024bc:	f897 324d 	ldrb.w	r3, [r7, #589]	@ 0x24d
 80024c0:	f8d7 2210 	ldr.w	r2, [r7, #528]	@ 0x210
 80024c4:	5cd2      	ldrb	r2, [r2, r3]
 80024c6:	f897 324f 	ldrb.w	r3, [r7, #591]	@ 0x24f
 80024ca:	1c59      	adds	r1, r3, #1
 80024cc:	f887 124f 	strb.w	r1, [r7, #591]	@ 0x24f
 80024d0:	4619      	mov	r1, r3
 80024d2:	f1a2 030a 	sub.w	r3, r2, #10
 80024d6:	b2da      	uxtb	r2, r3
 80024d8:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 80024dc:	545a      	strb	r2, [r3, r1]
 80024de:	e00d      	b.n	80024fc <balance_cycle+0x4b8>
		}

		else {
			sideAEvenCells[sideAEvenIndex++] = evenCells[i];
 80024e0:	f897 224d 	ldrb.w	r2, [r7, #589]	@ 0x24d
 80024e4:	f897 3251 	ldrb.w	r3, [r7, #593]	@ 0x251
 80024e8:	1c59      	adds	r1, r3, #1
 80024ea:	f887 1251 	strb.w	r1, [r7, #593]	@ 0x251
 80024ee:	4619      	mov	r1, r3
 80024f0:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 80024f4:	5c9a      	ldrb	r2, [r3, r2]
 80024f6:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80024fa:	545a      	strb	r2, [r3, r1]
	for(uint8_t i = 0; i < evenCellCount; i++) {
 80024fc:	f897 324d 	ldrb.w	r3, [r7, #589]	@ 0x24d
 8002500:	3301      	adds	r3, #1
 8002502:	f887 324d 	strb.w	r3, [r7, #589]	@ 0x24d
 8002506:	f897 224d 	ldrb.w	r2, [r7, #589]	@ 0x24d
 800250a:	f897 325d 	ldrb.w	r3, [r7, #605]	@ 0x25d
 800250e:	429a      	cmp	r2, r3
 8002510:	d3cd      	bcc.n	80024ae <balance_cycle+0x46a>
		}
	}
	// For-loop below sets up the two side B even & odd cells to balance.
	for(uint8_t i = 0; i < oddCellCount; i++) {
 8002512:	2300      	movs	r3, #0
 8002514:	f887 324c 	strb.w	r3, [r7, #588]	@ 0x24c
 8002518:	e02b      	b.n	8002572 <balance_cycle+0x52e>
		if(oddCells[i] > 9) {
 800251a:	f897 324c 	ldrb.w	r3, [r7, #588]	@ 0x24c
 800251e:	f8d7 2208 	ldr.w	r2, [r7, #520]	@ 0x208
 8002522:	5cd3      	ldrb	r3, [r2, r3]
 8002524:	2b09      	cmp	r3, #9
 8002526:	d911      	bls.n	800254c <balance_cycle+0x508>
			sideBOddCells[sideBOddIndex++] = oddCells[i] - 10;
 8002528:	f897 324c 	ldrb.w	r3, [r7, #588]	@ 0x24c
 800252c:	f8d7 2208 	ldr.w	r2, [r7, #520]	@ 0x208
 8002530:	5cd2      	ldrb	r2, [r2, r3]
 8002532:	f897 324e 	ldrb.w	r3, [r7, #590]	@ 0x24e
 8002536:	1c59      	adds	r1, r3, #1
 8002538:	f887 124e 	strb.w	r1, [r7, #590]	@ 0x24e
 800253c:	4619      	mov	r1, r3
 800253e:	f1a2 030a 	sub.w	r3, r2, #10
 8002542:	b2da      	uxtb	r2, r3
 8002544:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 8002548:	545a      	strb	r2, [r3, r1]
 800254a:	e00d      	b.n	8002568 <balance_cycle+0x524>
		}

		else {
			sideAOddCells[sideAOddIndex++] = oddCells[i];
 800254c:	f897 224c 	ldrb.w	r2, [r7, #588]	@ 0x24c
 8002550:	f897 3250 	ldrb.w	r3, [r7, #592]	@ 0x250
 8002554:	1c59      	adds	r1, r3, #1
 8002556:	f887 1250 	strb.w	r1, [r7, #592]	@ 0x250
 800255a:	4619      	mov	r1, r3
 800255c:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 8002560:	5c9a      	ldrb	r2, [r3, r2]
 8002562:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002566:	545a      	strb	r2, [r3, r1]
	for(uint8_t i = 0; i < oddCellCount; i++) {
 8002568:	f897 324c 	ldrb.w	r3, [r7, #588]	@ 0x24c
 800256c:	3301      	adds	r3, #1
 800256e:	f887 324c 	strb.w	r3, [r7, #588]	@ 0x24c
 8002572:	f897 224c 	ldrb.w	r2, [r7, #588]	@ 0x24c
 8002576:	f897 325c 	ldrb.w	r3, [r7, #604]	@ 0x25c
 800257a:	429a      	cmp	r2, r3
 800257c:	d3cd      	bcc.n	800251a <balance_cycle+0x4d6>
		}
	}

	if(evenCellCount == 0) { evenCellsFlag = 0; }
 800257e:	f897 325d 	ldrb.w	r3, [r7, #605]	@ 0x25d
 8002582:	2b00      	cmp	r3, #0
 8002584:	d102      	bne.n	800258c <balance_cycle+0x548>
 8002586:	2300      	movs	r3, #0
 8002588:	f887 325f 	strb.w	r3, [r7, #607]	@ 0x25f

	if(oddCellCount == 0) { oddCellsFlag = 0; }
 800258c:	f897 325c 	ldrb.w	r3, [r7, #604]	@ 0x25c
 8002590:	2b00      	cmp	r3, #0
 8002592:	d102      	bne.n	800259a <balance_cycle+0x556>
 8002594:	2300      	movs	r3, #0
 8002596:	f887 325e 	strb.w	r3, [r7, #606]	@ 0x25e
	uint16_t minCellVoltage;
	uint16_t cellVoltageDelta;

	float maxResistorTemperature;
	uint16_t intMaxResistorTemperature;
	float tempScale = 100.0f;
 800259a:	4bde      	ldr	r3, [pc, #888]	@ (8002914 <balance_cycle+0x8d0>)
 800259c:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4

	uint8_t overheatFlag = 0;
 80025a0:	2300      	movs	r3, #0
 80025a2:	f887 3243 	strb.w	r3, [r7, #579]	@ 0x243
	uint8_t overheatCount = 0;
 80025a6:	2300      	movs	r3, #0
 80025a8:	f887 3242 	strb.w	r3, [r7, #578]	@ 0x242

	uint8_t faultThermistorQty = 0;
 80025ac:	2300      	movs	r3, #0
 80025ae:	f887 3241 	strb.w	r3, [r7, #577]	@ 0x241
	uint8_t faultThermistors[MODULE_THERM_QTY] = {0};
 80025b2:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 80025b6:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 80025ba:	2200      	movs	r2, #0
 80025bc:	601a      	str	r2, [r3, #0]
 80025be:	605a      	str	r2, [r3, #4]
 80025c0:	609a      	str	r2, [r3, #8]
 80025c2:	60da      	str	r2, [r3, #12]
 80025c4:	821a      	strh	r2, [r3, #16]
	uint8_t sideA_payloadRegisterPWM_evenCells[8];
	uint8_t sideB_payloadRegisterPWM_evenCells[8];
	uint8_t sideA_payloadRegisterPWM_oddCells[8];
	uint8_t sideB_payloadRegisterPWM_oddCells[8];

	uint8_t DCTO = 0x2;
 80025c6:	2302      	movs	r3, #2
 80025c8:	f887 31e3 	strb.w	r3, [r7, #483]	@ 0x1e3

	sideA_payloadRegisterA_evenCells[0] = 0xFE;
 80025cc:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 80025d0:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80025d4:	22fe      	movs	r2, #254	@ 0xfe
 80025d6:	701a      	strb	r2, [r3, #0]
	sideA_payloadRegisterA_evenCells[1] = 0x00;
 80025d8:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 80025dc:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80025e0:	2200      	movs	r2, #0
 80025e2:	705a      	strb	r2, [r3, #1]
	sideA_payloadRegisterA_evenCells[2] = 0x00;
 80025e4:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 80025e8:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80025ec:	2200      	movs	r2, #0
 80025ee:	709a      	strb	r2, [r3, #2]
	sideA_payloadRegisterA_evenCells[3] = 0x00;
 80025f0:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 80025f4:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80025f8:	2200      	movs	r2, #0
 80025fa:	70da      	strb	r2, [r3, #3]

	sideB_payloadRegisterA_evenCells[0] = 0xFE;
 80025fc:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 8002600:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8002604:	22fe      	movs	r2, #254	@ 0xfe
 8002606:	701a      	strb	r2, [r3, #0]
	sideB_payloadRegisterA_evenCells[1] = 0x00;
 8002608:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 800260c:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8002610:	2200      	movs	r2, #0
 8002612:	705a      	strb	r2, [r3, #1]
	sideB_payloadRegisterA_evenCells[2] = 0x00;
 8002614:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 8002618:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 800261c:	2200      	movs	r2, #0
 800261e:	709a      	strb	r2, [r3, #2]
	sideB_payloadRegisterA_evenCells[3] = 0x00;
 8002620:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 8002624:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8002628:	2200      	movs	r2, #0
 800262a:	70da      	strb	r2, [r3, #3]

	sideA_payloadRegisterA_oddCells[0] = 0xFE;
 800262c:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 8002630:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8002634:	22fe      	movs	r2, #254	@ 0xfe
 8002636:	701a      	strb	r2, [r3, #0]
	sideA_payloadRegisterA_oddCells[1] = 0x00;
 8002638:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 800263c:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8002640:	2200      	movs	r2, #0
 8002642:	705a      	strb	r2, [r3, #1]
	sideA_payloadRegisterA_oddCells[2] = 0x00;
 8002644:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 8002648:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 800264c:	2200      	movs	r2, #0
 800264e:	709a      	strb	r2, [r3, #2]
	sideA_payloadRegisterA_oddCells[3] = 0x00;
 8002650:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 8002654:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8002658:	2200      	movs	r2, #0
 800265a:	70da      	strb	r2, [r3, #3]

	sideB_payloadRegisterA_oddCells[0] = 0xFE;
 800265c:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 8002660:	f5a3 73d2 	sub.w	r3, r3, #420	@ 0x1a4
 8002664:	22fe      	movs	r2, #254	@ 0xfe
 8002666:	701a      	strb	r2, [r3, #0]
	sideB_payloadRegisterA_oddCells[1] = 0x00;
 8002668:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 800266c:	f5a3 73d2 	sub.w	r3, r3, #420	@ 0x1a4
 8002670:	2200      	movs	r2, #0
 8002672:	705a      	strb	r2, [r3, #1]
	sideB_payloadRegisterA_oddCells[2] = 0x00;
 8002674:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 8002678:	f5a3 73d2 	sub.w	r3, r3, #420	@ 0x1a4
 800267c:	2200      	movs	r2, #0
 800267e:	709a      	strb	r2, [r3, #2]
	sideB_payloadRegisterA_oddCells[3] = 0x00;
 8002680:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 8002684:	f5a3 73d2 	sub.w	r3, r3, #420	@ 0x1a4
 8002688:	2200      	movs	r2, #0
 800268a:	70da      	strb	r2, [r3, #3]

	config_DCC_bits(sideAEvenCells, sideAEvenCount, sideA_payloadRegisterA_evenCells, DCTO);
 800268c:	f897 31e3 	ldrb.w	r3, [r7, #483]	@ 0x1e3
 8002690:	f107 02d4 	add.w	r2, r7, #212	@ 0xd4
 8002694:	f897 1257 	ldrb.w	r1, [r7, #599]	@ 0x257
 8002698:	f8d7 0200 	ldr.w	r0, [r7, #512]	@ 0x200
 800269c:	f001 fbe2 	bl	8003e64 <config_DCC_bits>
	config_DCC_bits(sideAOddCells, sideAOddCount, sideA_payloadRegisterA_oddCells, DCTO);
 80026a0:	f897 31e3 	ldrb.w	r3, [r7, #483]	@ 0x1e3
 80026a4:	f107 02c4 	add.w	r2, r7, #196	@ 0xc4
 80026a8:	f897 1256 	ldrb.w	r1, [r7, #598]	@ 0x256
 80026ac:	f8d7 01f8 	ldr.w	r0, [r7, #504]	@ 0x1f8
 80026b0:	f001 fbd8 	bl	8003e64 <config_DCC_bits>

	config_DCC_bits(sideBEvenCells, sideBEvenCount, sideB_payloadRegisterA_evenCells, DCTO);
 80026b4:	f897 31e3 	ldrb.w	r3, [r7, #483]	@ 0x1e3
 80026b8:	f107 02cc 	add.w	r2, r7, #204	@ 0xcc
 80026bc:	f897 1255 	ldrb.w	r1, [r7, #597]	@ 0x255
 80026c0:	f8d7 01f0 	ldr.w	r0, [r7, #496]	@ 0x1f0
 80026c4:	f001 fbce 	bl	8003e64 <config_DCC_bits>
	config_DCC_bits(sideBOddCells, sideBOddCount, sideB_payloadRegisterA_oddCells, DCTO);
 80026c8:	f897 31e3 	ldrb.w	r3, [r7, #483]	@ 0x1e3
 80026cc:	f107 02bc 	add.w	r2, r7, #188	@ 0xbc
 80026d0:	f897 1254 	ldrb.w	r1, [r7, #596]	@ 0x254
 80026d4:	f8d7 01e8 	ldr.w	r0, [r7, #488]	@ 0x1e8
 80026d8:	f001 fbc4 	bl	8003e64 <config_DCC_bits>

	if(!refup_check()) {
 80026dc:	f007 fadd 	bl	8009c9a <refup_check>
 80026e0:	4603      	mov	r3, r0
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d104      	bne.n	80026f0 <balance_cycle+0x6ac>
		force_refup();
 80026e6:	f007 faa3 	bl	8009c30 <force_refup>
		wait(1);
 80026ea:	2001      	movs	r0, #1
 80026ec:	f008 f88a 	bl	800a804 <wait>
	}
	voltage_sense(cellVoltages);
 80026f0:	f507 73c4 	add.w	r3, r7, #392	@ 0x188
 80026f4:	4618      	mov	r0, r3
 80026f6:	f009 f8cb 	bl	800b890 <voltage_sense>

	maxCellVoltage = cellVoltages[0];
 80026fa:	f8b7 3188 	ldrh.w	r3, [r7, #392]	@ 0x188
 80026fe:	f8a7 324a 	strh.w	r3, [r7, #586]	@ 0x24a
	for(uint8_t i = 0; i < CELL_QTY; i++) {
 8002702:	2300      	movs	r3, #0
 8002704:	f887 3240 	strb.w	r3, [r7, #576]	@ 0x240
 8002708:	e01e      	b.n	8002748 <balance_cycle+0x704>
		if(cellVoltages[i] > maxCellVoltage) {
 800270a:	f897 3240 	ldrb.w	r3, [r7, #576]	@ 0x240
 800270e:	005b      	lsls	r3, r3, #1
 8002710:	f503 7306 	add.w	r3, r3, #536	@ 0x218
 8002714:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 8002718:	4413      	add	r3, r2
 800271a:	f833 3cd8 	ldrh.w	r3, [r3, #-216]
 800271e:	f8b7 224a 	ldrh.w	r2, [r7, #586]	@ 0x24a
 8002722:	429a      	cmp	r2, r3
 8002724:	d20b      	bcs.n	800273e <balance_cycle+0x6fa>
			maxCellVoltage = cellVoltages[i];
 8002726:	f897 3240 	ldrb.w	r3, [r7, #576]	@ 0x240
 800272a:	005b      	lsls	r3, r3, #1
 800272c:	f503 7306 	add.w	r3, r3, #536	@ 0x218
 8002730:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 8002734:	4413      	add	r3, r2
 8002736:	f833 3cd8 	ldrh.w	r3, [r3, #-216]
 800273a:	f8a7 324a 	strh.w	r3, [r7, #586]	@ 0x24a
	for(uint8_t i = 0; i < CELL_QTY; i++) {
 800273e:	f897 3240 	ldrb.w	r3, [r7, #576]	@ 0x240
 8002742:	3301      	adds	r3, #1
 8002744:	f887 3240 	strb.w	r3, [r7, #576]	@ 0x240
 8002748:	f897 3240 	ldrb.w	r3, [r7, #576]	@ 0x240
 800274c:	2b13      	cmp	r3, #19
 800274e:	d9dc      	bls.n	800270a <balance_cycle+0x6c6>
		}
	}
	cellVoltageDelta = maxCellVoltage - absMinCellVoltage;
 8002750:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 8002754:	f5a3 7304 	sub.w	r3, r3, #528	@ 0x210
 8002758:	f8b7 224a 	ldrh.w	r2, [r7, #586]	@ 0x24a
 800275c:	881b      	ldrh	r3, [r3, #0]
 800275e:	1ad3      	subs	r3, r2, r3
 8002760:	f8a7 31e0 	strh.w	r3, [r7, #480]	@ 0x1e0
	balanceMsg[0] = (uint8_t)(cellVoltageDelta & 0xFF);
 8002764:	f8b7 31e0 	ldrh.w	r3, [r7, #480]	@ 0x1e0
 8002768:	b2da      	uxtb	r2, r3
 800276a:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 800276e:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8002772:	701a      	strb	r2, [r3, #0]
	balanceMsg[1] = (uint8_t)((cellVoltageDelta >> 8) & 0xFF);
 8002774:	f8b7 31e0 	ldrh.w	r3, [r7, #480]	@ 0x1e0
 8002778:	0a1b      	lsrs	r3, r3, #8
 800277a:	b29b      	uxth	r3, r3
 800277c:	b2da      	uxtb	r2, r3
 800277e:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 8002782:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8002786:	705a      	strb	r2, [r3, #1]
	balanceMsg[7] = cellsToBalanceQty;
 8002788:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 800278c:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8002790:	f507 7218 	add.w	r2, r7, #608	@ 0x260
 8002794:	f2a2 220d 	subw	r2, r2, #525	@ 0x20d
 8002798:	7812      	ldrb	r2, [r2, #0]
 800279a:	71da      	strb	r2, [r3, #7]

	config_PWM_bits(sideAEvenCells, sideAEvenCount, sideA_payloadRegisterPWM_evenCells, cellVoltages, SIDE_A);
 800279c:	f507 73c4 	add.w	r3, r7, #392	@ 0x188
 80027a0:	f107 02b4 	add.w	r2, r7, #180	@ 0xb4
 80027a4:	f897 1257 	ldrb.w	r1, [r7, #599]	@ 0x257
 80027a8:	2001      	movs	r0, #1
 80027aa:	9000      	str	r0, [sp, #0]
 80027ac:	f8d7 0200 	ldr.w	r0, [r7, #512]	@ 0x200
 80027b0:	f001 fc16 	bl	8003fe0 <config_PWM_bits>
	config_PWM_bits(sideAOddCells, sideAOddCount, sideA_payloadRegisterPWM_oddCells, cellVoltages, SIDE_A);
 80027b4:	f507 73c4 	add.w	r3, r7, #392	@ 0x188
 80027b8:	f107 02a4 	add.w	r2, r7, #164	@ 0xa4
 80027bc:	f897 1256 	ldrb.w	r1, [r7, #598]	@ 0x256
 80027c0:	2001      	movs	r0, #1
 80027c2:	9000      	str	r0, [sp, #0]
 80027c4:	f8d7 01f8 	ldr.w	r0, [r7, #504]	@ 0x1f8
 80027c8:	f001 fc0a 	bl	8003fe0 <config_PWM_bits>

	config_PWM_bits(sideBEvenCells, sideBEvenCount, sideB_payloadRegisterPWM_evenCells, cellVoltages, SIDE_B);
 80027cc:	f507 73c4 	add.w	r3, r7, #392	@ 0x188
 80027d0:	f107 02ac 	add.w	r2, r7, #172	@ 0xac
 80027d4:	f897 1255 	ldrb.w	r1, [r7, #597]	@ 0x255
 80027d8:	2000      	movs	r0, #0
 80027da:	9000      	str	r0, [sp, #0]
 80027dc:	f8d7 01f0 	ldr.w	r0, [r7, #496]	@ 0x1f0
 80027e0:	f001 fbfe 	bl	8003fe0 <config_PWM_bits>
	config_PWM_bits(sideBOddCells, sideBOddCount, sideB_payloadRegisterPWM_oddCells, cellVoltages, SIDE_B);
 80027e4:	f507 73c4 	add.w	r3, r7, #392	@ 0x188
 80027e8:	f107 029c 	add.w	r2, r7, #156	@ 0x9c
 80027ec:	f897 1254 	ldrb.w	r1, [r7, #596]	@ 0x254
 80027f0:	2000      	movs	r0, #0
 80027f2:	9000      	str	r0, [sp, #0]
 80027f4:	f8d7 01e8 	ldr.w	r0, [r7, #488]	@ 0x1e8
 80027f8:	f001 fbf2 	bl	8003fe0 <config_PWM_bits>

	force_unmute();
 80027fc:	f007 fb01 	bl	8009e02 <force_unmute>
	wait(1);
 8002800:	2001      	movs	r0, #1
 8002802:	f007 ffff 	bl	800a804 <wait>

	if(evenCellsFlag) {
 8002806:	f897 325f 	ldrb.w	r3, [r7, #607]	@ 0x25f
 800280a:	2b00      	cmp	r3, #0
 800280c:	f000 821c 	beq.w	8002c48 <balance_cycle+0xc04>
		uint8_t sideA_attempts = 0;
 8002810:	2300      	movs	r3, #0
 8002812:	f887 323f 	strb.w	r3, [r7, #575]	@ 0x23f
		uint8_t sideB_attempts = 0;
 8002816:	2300      	movs	r3, #0
 8002818:	f887 323e 	strb.w	r3, [r7, #574]	@ 0x23e
		uint8_t sideA_subAttempts = 0;
 800281c:	2300      	movs	r3, #0
 800281e:	f887 323d 	strb.w	r3, [r7, #573]	@ 0x23d
		uint8_t sideB_subAttempts = 0;
 8002822:	2300      	movs	r3, #0
 8002824:	f887 323c 	strb.w	r3, [r7, #572]	@ 0x23c
		uint8_t sideB_receptionRegisterPWM[8];

		uint8_t sideA_receptionRegisterPWM_PECflag;
		uint8_t sideB_receptionRegisterPWM_PECflag;

		while(sideA_attempts < ATTEMPT_LIMIT || sideB_attempts < ATTEMPT_LIMIT) {
 8002828:	e0de      	b.n	80029e8 <balance_cycle+0x9a4>
			while(sideA_subAttempts < ATTEMPT_LIMIT || sideB_subAttempts < ATTEMPT_LIMIT) {
				WRPWM(sideA_payloadRegisterPWM_evenCells, SIDE_A);
 800282a:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 800282e:	2101      	movs	r1, #1
 8002830:	4618      	mov	r0, r3
 8002832:	f006 fda9 	bl	8009388 <WRPWM>
				WRPWM(sideB_payloadRegisterPWM_evenCells, SIDE_B);
 8002836:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 800283a:	2100      	movs	r1, #0
 800283c:	4618      	mov	r0, r3
 800283e:	f006 fda3 	bl	8009388 <WRPWM>
				wait(1);
 8002842:	2001      	movs	r0, #1
 8002844:	f007 ffde 	bl	800a804 <wait>

				RDPWM(sideA_receptionRegisterPWM, SIDE_A);
 8002848:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 800284c:	2101      	movs	r1, #1
 800284e:	4618      	mov	r0, r3
 8002850:	f006 ffb4 	bl	80097bc <RDPWM>
				RDPWM(sideB_receptionRegisterPWM, SIDE_B);
 8002854:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8002858:	2100      	movs	r1, #0
 800285a:	4618      	mov	r0, r3
 800285c:	f006 ffae 	bl	80097bc <RDPWM>
				wait(1);
 8002860:	2001      	movs	r0, #1
 8002862:	f007 ffcf 	bl	800a804 <wait>

				sideA_receptionRegisterPWM_PECflag = verify_PEC15(sideA_receptionRegisterPWM);
 8002866:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 800286a:	4618      	mov	r0, r3
 800286c:	f006 fc4d 	bl	800910a <verify_PEC15>
 8002870:	4603      	mov	r3, r0
 8002872:	f887 31dd 	strb.w	r3, [r7, #477]	@ 0x1dd
				sideB_receptionRegisterPWM_PECflag = verify_PEC15(sideB_receptionRegisterPWM);
 8002876:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 800287a:	4618      	mov	r0, r3
 800287c:	f006 fc45 	bl	800910a <verify_PEC15>
 8002880:	4603      	mov	r3, r0
 8002882:	f887 31dc 	strb.w	r3, [r7, #476]	@ 0x1dc

				if(sideA_receptionRegisterPWM_PECflag == 2) { sideA_subAttempts = 13; }
 8002886:	f897 31dd 	ldrb.w	r3, [r7, #477]	@ 0x1dd
 800288a:	2b02      	cmp	r3, #2
 800288c:	d103      	bne.n	8002896 <balance_cycle+0x852>
 800288e:	230d      	movs	r3, #13
 8002890:	f887 323d 	strb.w	r3, [r7, #573]	@ 0x23d
 8002894:	e007      	b.n	80028a6 <balance_cycle+0x862>

				else {
					sideA_subAttempts++;
 8002896:	f897 323d 	ldrb.w	r3, [r7, #573]	@ 0x23d
 800289a:	3301      	adds	r3, #1
 800289c:	f887 323d 	strb.w	r3, [r7, #573]	@ 0x23d
					wait(1);
 80028a0:	2001      	movs	r0, #1
 80028a2:	f007 ffaf 	bl	800a804 <wait>
				}

				if(sideB_receptionRegisterPWM_PECflag == 2) { sideB_subAttempts = 13; }
 80028a6:	f897 31dc 	ldrb.w	r3, [r7, #476]	@ 0x1dc
 80028aa:	2b02      	cmp	r3, #2
 80028ac:	d103      	bne.n	80028b6 <balance_cycle+0x872>
 80028ae:	230d      	movs	r3, #13
 80028b0:	f887 323c 	strb.w	r3, [r7, #572]	@ 0x23c
 80028b4:	e007      	b.n	80028c6 <balance_cycle+0x882>

				else {
					sideB_subAttempts++;
 80028b6:	f897 323c 	ldrb.w	r3, [r7, #572]	@ 0x23c
 80028ba:	3301      	adds	r3, #1
 80028bc:	f887 323c 	strb.w	r3, [r7, #572]	@ 0x23c
					wait(1);
 80028c0:	2001      	movs	r0, #1
 80028c2:	f007 ff9f 	bl	800a804 <wait>
			while(sideA_subAttempts < ATTEMPT_LIMIT || sideB_subAttempts < ATTEMPT_LIMIT) {
 80028c6:	f897 323d 	ldrb.w	r3, [r7, #573]	@ 0x23d
 80028ca:	2b09      	cmp	r3, #9
 80028cc:	d9ad      	bls.n	800282a <balance_cycle+0x7e6>
 80028ce:	f897 323c 	ldrb.w	r3, [r7, #572]	@ 0x23c
 80028d2:	2b09      	cmp	r3, #9
 80028d4:	d9a9      	bls.n	800282a <balance_cycle+0x7e6>
				}
			}
			if(sideA_subAttempts != 13) { error_loop(ERROR_PEC, 0, 0, SIDE_A); }
 80028d6:	f897 323d 	ldrb.w	r3, [r7, #573]	@ 0x23d
 80028da:	2b0d      	cmp	r3, #13
 80028dc:	d005      	beq.n	80028ea <balance_cycle+0x8a6>
 80028de:	2301      	movs	r3, #1
 80028e0:	2200      	movs	r2, #0
 80028e2:	2100      	movs	r1, #0
 80028e4:	2056      	movs	r0, #86	@ 0x56
 80028e6:	f002 fa87 	bl	8004df8 <error_loop>

			if(sideB_subAttempts != 13) { error_loop(ERROR_PEC, 0, 0, SIDE_B); }
 80028ea:	f897 323c 	ldrb.w	r3, [r7, #572]	@ 0x23c
 80028ee:	2b0d      	cmp	r3, #13
 80028f0:	d005      	beq.n	80028fe <balance_cycle+0x8ba>
 80028f2:	2300      	movs	r3, #0
 80028f4:	2200      	movs	r2, #0
 80028f6:	2100      	movs	r1, #0
 80028f8:	2056      	movs	r0, #86	@ 0x56
 80028fa:	f002 fa7d 	bl	8004df8 <error_loop>

			uint8_t sideA_matchFlag = 1;
 80028fe:	2301      	movs	r3, #1
 8002900:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
			uint8_t sideB_matchFlag = 1;
 8002904:	2301      	movs	r3, #1
 8002906:	f887 323a 	strb.w	r3, [r7, #570]	@ 0x23a

			for(uint8_t i = 0; i < 6; i++) {
 800290a:	2300      	movs	r3, #0
 800290c:	f887 3239 	strb.w	r3, [r7, #569]	@ 0x239
 8002910:	e01a      	b.n	8002948 <balance_cycle+0x904>
 8002912:	bf00      	nop
 8002914:	42c80000 	.word	0x42c80000
				if(sideA_receptionRegisterPWM[i] != sideA_payloadRegisterPWM_evenCells[i]) {
 8002918:	f897 3239 	ldrb.w	r3, [r7, #569]	@ 0x239
 800291c:	f507 7218 	add.w	r2, r7, #608	@ 0x260
 8002920:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8002924:	5cd2      	ldrb	r2, [r2, r3]
 8002926:	f897 3239 	ldrb.w	r3, [r7, #569]	@ 0x239
 800292a:	f507 7118 	add.w	r1, r7, #608	@ 0x260
 800292e:	f5a1 71d6 	sub.w	r1, r1, #428	@ 0x1ac
 8002932:	5ccb      	ldrb	r3, [r1, r3]
 8002934:	429a      	cmp	r2, r3
 8002936:	d002      	beq.n	800293e <balance_cycle+0x8fa>
					sideA_matchFlag = 0;
 8002938:	2300      	movs	r3, #0
 800293a:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
			for(uint8_t i = 0; i < 6; i++) {
 800293e:	f897 3239 	ldrb.w	r3, [r7, #569]	@ 0x239
 8002942:	3301      	adds	r3, #1
 8002944:	f887 3239 	strb.w	r3, [r7, #569]	@ 0x239
 8002948:	f897 3239 	ldrb.w	r3, [r7, #569]	@ 0x239
 800294c:	2b05      	cmp	r3, #5
 800294e:	d9e3      	bls.n	8002918 <balance_cycle+0x8d4>
				}
			}

			for(uint8_t i = 0; i < 6; i++) {
 8002950:	2300      	movs	r3, #0
 8002952:	f887 3238 	strb.w	r3, [r7, #568]	@ 0x238
 8002956:	e017      	b.n	8002988 <balance_cycle+0x944>
				if(sideB_receptionRegisterPWM[i] != sideB_payloadRegisterPWM_evenCells[i]) {
 8002958:	f897 3238 	ldrb.w	r3, [r7, #568]	@ 0x238
 800295c:	f507 7218 	add.w	r2, r7, #608	@ 0x260
 8002960:	f5a2 72ea 	sub.w	r2, r2, #468	@ 0x1d4
 8002964:	5cd2      	ldrb	r2, [r2, r3]
 8002966:	f897 3238 	ldrb.w	r3, [r7, #568]	@ 0x238
 800296a:	f507 7118 	add.w	r1, r7, #608	@ 0x260
 800296e:	f5a1 71da 	sub.w	r1, r1, #436	@ 0x1b4
 8002972:	5ccb      	ldrb	r3, [r1, r3]
 8002974:	429a      	cmp	r2, r3
 8002976:	d002      	beq.n	800297e <balance_cycle+0x93a>
					sideB_matchFlag = 0;
 8002978:	2300      	movs	r3, #0
 800297a:	f887 323a 	strb.w	r3, [r7, #570]	@ 0x23a
			for(uint8_t i = 0; i < 6; i++) {
 800297e:	f897 3238 	ldrb.w	r3, [r7, #568]	@ 0x238
 8002982:	3301      	adds	r3, #1
 8002984:	f887 3238 	strb.w	r3, [r7, #568]	@ 0x238
 8002988:	f897 3238 	ldrb.w	r3, [r7, #568]	@ 0x238
 800298c:	2b05      	cmp	r3, #5
 800298e:	d9e3      	bls.n	8002958 <balance_cycle+0x914>
				}
			}

			if(sideA_matchFlag) { sideA_attempts = 13; }
 8002990:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
 8002994:	2b00      	cmp	r3, #0
 8002996:	d003      	beq.n	80029a0 <balance_cycle+0x95c>
 8002998:	230d      	movs	r3, #13
 800299a:	f887 323f 	strb.w	r3, [r7, #575]	@ 0x23f
 800299e:	e00d      	b.n	80029bc <balance_cycle+0x978>

			else {
				sideA_attempts++;
 80029a0:	f897 323f 	ldrb.w	r3, [r7, #575]	@ 0x23f
 80029a4:	3301      	adds	r3, #1
 80029a6:	f887 323f 	strb.w	r3, [r7, #575]	@ 0x23f
				sideA_subAttempts = 0;
 80029aa:	2300      	movs	r3, #0
 80029ac:	f887 323d 	strb.w	r3, [r7, #573]	@ 0x23d
				sideB_subAttempts = 0;
 80029b0:	2300      	movs	r3, #0
 80029b2:	f887 323c 	strb.w	r3, [r7, #572]	@ 0x23c
				wait(1);
 80029b6:	2001      	movs	r0, #1
 80029b8:	f007 ff24 	bl	800a804 <wait>
			}

			if(sideB_matchFlag) { sideB_attempts = 13; }
 80029bc:	f897 323a 	ldrb.w	r3, [r7, #570]	@ 0x23a
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d003      	beq.n	80029cc <balance_cycle+0x988>
 80029c4:	230d      	movs	r3, #13
 80029c6:	f887 323e 	strb.w	r3, [r7, #574]	@ 0x23e
 80029ca:	e00d      	b.n	80029e8 <balance_cycle+0x9a4>

			else {
				sideB_attempts++;
 80029cc:	f897 323e 	ldrb.w	r3, [r7, #574]	@ 0x23e
 80029d0:	3301      	adds	r3, #1
 80029d2:	f887 323e 	strb.w	r3, [r7, #574]	@ 0x23e
				sideA_subAttempts = 0;
 80029d6:	2300      	movs	r3, #0
 80029d8:	f887 323d 	strb.w	r3, [r7, #573]	@ 0x23d
				sideB_subAttempts = 0;
 80029dc:	2300      	movs	r3, #0
 80029de:	f887 323c 	strb.w	r3, [r7, #572]	@ 0x23c
				wait(1);
 80029e2:	2001      	movs	r0, #1
 80029e4:	f007 ff0e 	bl	800a804 <wait>
		while(sideA_attempts < ATTEMPT_LIMIT || sideB_attempts < ATTEMPT_LIMIT) {
 80029e8:	f897 323f 	ldrb.w	r3, [r7, #575]	@ 0x23f
 80029ec:	2b09      	cmp	r3, #9
 80029ee:	f67f af6a 	bls.w	80028c6 <balance_cycle+0x882>
 80029f2:	f897 323e 	ldrb.w	r3, [r7, #574]	@ 0x23e
 80029f6:	2b09      	cmp	r3, #9
 80029f8:	f67f af65 	bls.w	80028c6 <balance_cycle+0x882>
			}
		}
		if(sideA_attempts != 13) { error_loop(ERROR_PWM_SETUP, 0, 0, SIDE_A); }
 80029fc:	f897 323f 	ldrb.w	r3, [r7, #575]	@ 0x23f
 8002a00:	2b0d      	cmp	r3, #13
 8002a02:	d005      	beq.n	8002a10 <balance_cycle+0x9cc>
 8002a04:	2301      	movs	r3, #1
 8002a06:	2200      	movs	r2, #0
 8002a08:	2100      	movs	r1, #0
 8002a0a:	2054      	movs	r0, #84	@ 0x54
 8002a0c:	f002 f9f4 	bl	8004df8 <error_loop>

		if(sideB_attempts != 13) { error_loop(ERROR_PWM_SETUP, 0, 0, SIDE_B); }
 8002a10:	f897 323e 	ldrb.w	r3, [r7, #574]	@ 0x23e
 8002a14:	2b0d      	cmp	r3, #13
 8002a16:	d005      	beq.n	8002a24 <balance_cycle+0x9e0>
 8002a18:	2300      	movs	r3, #0
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	2100      	movs	r1, #0
 8002a1e:	2054      	movs	r0, #84	@ 0x54
 8002a20:	f002 f9ea 	bl	8004df8 <error_loop>
		uint8_t sideB_receptionRegisterCFGA[8];

		uint8_t sideA_receptionRegisterCFGA_PECflag;
		uint8_t sideB_receptionRegisterCFGA_PECflag;

		sideA_attempts = 0;
 8002a24:	2300      	movs	r3, #0
 8002a26:	f887 323f 	strb.w	r3, [r7, #575]	@ 0x23f
		sideB_attempts = 0;
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	f887 323e 	strb.w	r3, [r7, #574]	@ 0x23e
		sideA_subAttempts = 0;
 8002a30:	2300      	movs	r3, #0
 8002a32:	f887 323d 	strb.w	r3, [r7, #573]	@ 0x23d
		sideB_subAttempts = 0;
 8002a36:	2300      	movs	r3, #0
 8002a38:	f887 323c 	strb.w	r3, [r7, #572]	@ 0x23c
		while(sideA_attempts < ATTEMPT_LIMIT || sideB_attempts < ATTEMPT_LIMIT) {
 8002a3c:	e0db      	b.n	8002bf6 <balance_cycle+0xbb2>
			while(sideA_subAttempts < ATTEMPT_LIMIT || sideB_subAttempts < ATTEMPT_LIMIT) {
				WRCFGA(sideA_payloadRegisterA_evenCells, SIDE_A);
 8002a3e:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002a42:	2101      	movs	r1, #1
 8002a44:	4618      	mov	r0, r3
 8002a46:	f006 fc59 	bl	80092fc <WRCFGA>
				WRCFGA(sideB_payloadRegisterA_evenCells, SIDE_B);
 8002a4a:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8002a4e:	2100      	movs	r1, #0
 8002a50:	4618      	mov	r0, r3
 8002a52:	f006 fc53 	bl	80092fc <WRCFGA>
				wait(1);
 8002a56:	2001      	movs	r0, #1
 8002a58:	f007 fed4 	bl	800a804 <wait>

				RDCFGA(sideA_receptionRegisterCFGA, SIDE_A);
 8002a5c:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8002a60:	2101      	movs	r1, #1
 8002a62:	4618      	mov	r0, r3
 8002a64:	f006 fcd6 	bl	8009414 <RDCFGA>
				RDCFGA(sideB_receptionRegisterCFGA, SIDE_B);
 8002a68:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8002a6c:	2100      	movs	r1, #0
 8002a6e:	4618      	mov	r0, r3
 8002a70:	f006 fcd0 	bl	8009414 <RDCFGA>
				wait(1);
 8002a74:	2001      	movs	r0, #1
 8002a76:	f007 fec5 	bl	800a804 <wait>

				sideA_receptionRegisterCFGA_PECflag = verify_PEC15(sideA_receptionRegisterCFGA);
 8002a7a:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8002a7e:	4618      	mov	r0, r3
 8002a80:	f006 fb43 	bl	800910a <verify_PEC15>
 8002a84:	4603      	mov	r3, r0
 8002a86:	f887 31df 	strb.w	r3, [r7, #479]	@ 0x1df
				sideB_receptionRegisterCFGA_PECflag = verify_PEC15(sideB_receptionRegisterCFGA);
 8002a8a:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8002a8e:	4618      	mov	r0, r3
 8002a90:	f006 fb3b 	bl	800910a <verify_PEC15>
 8002a94:	4603      	mov	r3, r0
 8002a96:	f887 31de 	strb.w	r3, [r7, #478]	@ 0x1de

				if(sideA_receptionRegisterCFGA_PECflag == 2) { sideA_subAttempts = 13; }
 8002a9a:	f897 31df 	ldrb.w	r3, [r7, #479]	@ 0x1df
 8002a9e:	2b02      	cmp	r3, #2
 8002aa0:	d103      	bne.n	8002aaa <balance_cycle+0xa66>
 8002aa2:	230d      	movs	r3, #13
 8002aa4:	f887 323d 	strb.w	r3, [r7, #573]	@ 0x23d
 8002aa8:	e007      	b.n	8002aba <balance_cycle+0xa76>

				else {
					sideA_subAttempts++;
 8002aaa:	f897 323d 	ldrb.w	r3, [r7, #573]	@ 0x23d
 8002aae:	3301      	adds	r3, #1
 8002ab0:	f887 323d 	strb.w	r3, [r7, #573]	@ 0x23d
					wait(1);
 8002ab4:	2001      	movs	r0, #1
 8002ab6:	f007 fea5 	bl	800a804 <wait>
				}

				if(sideB_receptionRegisterCFGA_PECflag == 2) { sideB_subAttempts = 13; }
 8002aba:	f897 31de 	ldrb.w	r3, [r7, #478]	@ 0x1de
 8002abe:	2b02      	cmp	r3, #2
 8002ac0:	d103      	bne.n	8002aca <balance_cycle+0xa86>
 8002ac2:	230d      	movs	r3, #13
 8002ac4:	f887 323c 	strb.w	r3, [r7, #572]	@ 0x23c
 8002ac8:	e007      	b.n	8002ada <balance_cycle+0xa96>

				else {
					sideB_subAttempts++;
 8002aca:	f897 323c 	ldrb.w	r3, [r7, #572]	@ 0x23c
 8002ace:	3301      	adds	r3, #1
 8002ad0:	f887 323c 	strb.w	r3, [r7, #572]	@ 0x23c
					wait(1);
 8002ad4:	2001      	movs	r0, #1
 8002ad6:	f007 fe95 	bl	800a804 <wait>
			while(sideA_subAttempts < ATTEMPT_LIMIT || sideB_subAttempts < ATTEMPT_LIMIT) {
 8002ada:	f897 323d 	ldrb.w	r3, [r7, #573]	@ 0x23d
 8002ade:	2b09      	cmp	r3, #9
 8002ae0:	d9ad      	bls.n	8002a3e <balance_cycle+0x9fa>
 8002ae2:	f897 323c 	ldrb.w	r3, [r7, #572]	@ 0x23c
 8002ae6:	2b09      	cmp	r3, #9
 8002ae8:	d9a9      	bls.n	8002a3e <balance_cycle+0x9fa>
				}
			}
			if(sideA_subAttempts != 13) { error_loop(ERROR_PEC, 0, 0, SIDE_A); }
 8002aea:	f897 323d 	ldrb.w	r3, [r7, #573]	@ 0x23d
 8002aee:	2b0d      	cmp	r3, #13
 8002af0:	d005      	beq.n	8002afe <balance_cycle+0xaba>
 8002af2:	2301      	movs	r3, #1
 8002af4:	2200      	movs	r2, #0
 8002af6:	2100      	movs	r1, #0
 8002af8:	2056      	movs	r0, #86	@ 0x56
 8002afa:	f002 f97d 	bl	8004df8 <error_loop>

			if(sideB_subAttempts != 13) { error_loop(ERROR_PEC, 0, 0, SIDE_B); }
 8002afe:	f897 323c 	ldrb.w	r3, [r7, #572]	@ 0x23c
 8002b02:	2b0d      	cmp	r3, #13
 8002b04:	d005      	beq.n	8002b12 <balance_cycle+0xace>
 8002b06:	2300      	movs	r3, #0
 8002b08:	2200      	movs	r2, #0
 8002b0a:	2100      	movs	r1, #0
 8002b0c:	2056      	movs	r0, #86	@ 0x56
 8002b0e:	f002 f973 	bl	8004df8 <error_loop>

			uint8_t sideA_matchFlag = 1;
 8002b12:	2301      	movs	r3, #1
 8002b14:	f887 3237 	strb.w	r3, [r7, #567]	@ 0x237
			uint8_t sideB_matchFlag = 1;
 8002b18:	2301      	movs	r3, #1
 8002b1a:	f887 3236 	strb.w	r3, [r7, #566]	@ 0x236

			for(uint8_t i = 4; i < 6; i++) {
 8002b1e:	2304      	movs	r3, #4
 8002b20:	f887 3235 	strb.w	r3, [r7, #565]	@ 0x235
 8002b24:	e017      	b.n	8002b56 <balance_cycle+0xb12>
				if(sideA_receptionRegisterCFGA[i] != sideA_payloadRegisterA_evenCells[i]) {
 8002b26:	f897 3235 	ldrb.w	r3, [r7, #565]	@ 0x235
 8002b2a:	f507 7218 	add.w	r2, r7, #608	@ 0x260
 8002b2e:	f5a2 72ee 	sub.w	r2, r2, #476	@ 0x1dc
 8002b32:	5cd2      	ldrb	r2, [r2, r3]
 8002b34:	f897 3235 	ldrb.w	r3, [r7, #565]	@ 0x235
 8002b38:	f507 7118 	add.w	r1, r7, #608	@ 0x260
 8002b3c:	f5a1 71c6 	sub.w	r1, r1, #396	@ 0x18c
 8002b40:	5ccb      	ldrb	r3, [r1, r3]
 8002b42:	429a      	cmp	r2, r3
 8002b44:	d002      	beq.n	8002b4c <balance_cycle+0xb08>
					sideA_matchFlag = 0;
 8002b46:	2300      	movs	r3, #0
 8002b48:	f887 3237 	strb.w	r3, [r7, #567]	@ 0x237
			for(uint8_t i = 4; i < 6; i++) {
 8002b4c:	f897 3235 	ldrb.w	r3, [r7, #565]	@ 0x235
 8002b50:	3301      	adds	r3, #1
 8002b52:	f887 3235 	strb.w	r3, [r7, #565]	@ 0x235
 8002b56:	f897 3235 	ldrb.w	r3, [r7, #565]	@ 0x235
 8002b5a:	2b05      	cmp	r3, #5
 8002b5c:	d9e3      	bls.n	8002b26 <balance_cycle+0xae2>
				}
			}

			for(uint8_t i = 4; i < 6; i++) {
 8002b5e:	2304      	movs	r3, #4
 8002b60:	f887 3234 	strb.w	r3, [r7, #564]	@ 0x234
 8002b64:	e017      	b.n	8002b96 <balance_cycle+0xb52>
				if(sideB_receptionRegisterCFGA[i] != sideB_payloadRegisterA_evenCells[i]) {
 8002b66:	f897 3234 	ldrb.w	r3, [r7, #564]	@ 0x234
 8002b6a:	f507 7218 	add.w	r2, r7, #608	@ 0x260
 8002b6e:	f5a2 72f2 	sub.w	r2, r2, #484	@ 0x1e4
 8002b72:	5cd2      	ldrb	r2, [r2, r3]
 8002b74:	f897 3234 	ldrb.w	r3, [r7, #564]	@ 0x234
 8002b78:	f507 7118 	add.w	r1, r7, #608	@ 0x260
 8002b7c:	f5a1 71ca 	sub.w	r1, r1, #404	@ 0x194
 8002b80:	5ccb      	ldrb	r3, [r1, r3]
 8002b82:	429a      	cmp	r2, r3
 8002b84:	d002      	beq.n	8002b8c <balance_cycle+0xb48>
					sideB_matchFlag = 0;
 8002b86:	2300      	movs	r3, #0
 8002b88:	f887 3236 	strb.w	r3, [r7, #566]	@ 0x236
			for(uint8_t i = 4; i < 6; i++) {
 8002b8c:	f897 3234 	ldrb.w	r3, [r7, #564]	@ 0x234
 8002b90:	3301      	adds	r3, #1
 8002b92:	f887 3234 	strb.w	r3, [r7, #564]	@ 0x234
 8002b96:	f897 3234 	ldrb.w	r3, [r7, #564]	@ 0x234
 8002b9a:	2b05      	cmp	r3, #5
 8002b9c:	d9e3      	bls.n	8002b66 <balance_cycle+0xb22>
				}
			}

			if(sideA_matchFlag) { sideA_attempts = 13; }
 8002b9e:	f897 3237 	ldrb.w	r3, [r7, #567]	@ 0x237
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d003      	beq.n	8002bae <balance_cycle+0xb6a>
 8002ba6:	230d      	movs	r3, #13
 8002ba8:	f887 323f 	strb.w	r3, [r7, #575]	@ 0x23f
 8002bac:	e00d      	b.n	8002bca <balance_cycle+0xb86>

			else {
				sideA_attempts++;
 8002bae:	f897 323f 	ldrb.w	r3, [r7, #575]	@ 0x23f
 8002bb2:	3301      	adds	r3, #1
 8002bb4:	f887 323f 	strb.w	r3, [r7, #575]	@ 0x23f
				sideA_subAttempts = 0;
 8002bb8:	2300      	movs	r3, #0
 8002bba:	f887 323d 	strb.w	r3, [r7, #573]	@ 0x23d
				sideB_subAttempts = 0;
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	f887 323c 	strb.w	r3, [r7, #572]	@ 0x23c
				wait(1);
 8002bc4:	2001      	movs	r0, #1
 8002bc6:	f007 fe1d 	bl	800a804 <wait>
			}

			if(sideB_matchFlag) { sideB_attempts = 13; }
 8002bca:	f897 3236 	ldrb.w	r3, [r7, #566]	@ 0x236
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d003      	beq.n	8002bda <balance_cycle+0xb96>
 8002bd2:	230d      	movs	r3, #13
 8002bd4:	f887 323e 	strb.w	r3, [r7, #574]	@ 0x23e
 8002bd8:	e00d      	b.n	8002bf6 <balance_cycle+0xbb2>

			else {
				sideB_attempts++;
 8002bda:	f897 323e 	ldrb.w	r3, [r7, #574]	@ 0x23e
 8002bde:	3301      	adds	r3, #1
 8002be0:	f887 323e 	strb.w	r3, [r7, #574]	@ 0x23e
				sideA_subAttempts = 0;
 8002be4:	2300      	movs	r3, #0
 8002be6:	f887 323d 	strb.w	r3, [r7, #573]	@ 0x23d
				sideB_subAttempts = 0;
 8002bea:	2300      	movs	r3, #0
 8002bec:	f887 323c 	strb.w	r3, [r7, #572]	@ 0x23c
				wait(1);
 8002bf0:	2001      	movs	r0, #1
 8002bf2:	f007 fe07 	bl	800a804 <wait>
		while(sideA_attempts < ATTEMPT_LIMIT || sideB_attempts < ATTEMPT_LIMIT) {
 8002bf6:	f897 323f 	ldrb.w	r3, [r7, #575]	@ 0x23f
 8002bfa:	2b09      	cmp	r3, #9
 8002bfc:	f67f af6d 	bls.w	8002ada <balance_cycle+0xa96>
 8002c00:	f897 323e 	ldrb.w	r3, [r7, #574]	@ 0x23e
 8002c04:	2b09      	cmp	r3, #9
 8002c06:	f67f af68 	bls.w	8002ada <balance_cycle+0xa96>
			}
		}
		if(sideA_attempts != 13) { error_loop(ERROR_BALANCE_INITIATION, 0, 0, SIDE_A); }
 8002c0a:	f897 323f 	ldrb.w	r3, [r7, #575]	@ 0x23f
 8002c0e:	2b0d      	cmp	r3, #13
 8002c10:	d005      	beq.n	8002c1e <balance_cycle+0xbda>
 8002c12:	2301      	movs	r3, #1
 8002c14:	2200      	movs	r2, #0
 8002c16:	2100      	movs	r1, #0
 8002c18:	2055      	movs	r0, #85	@ 0x55
 8002c1a:	f002 f8ed 	bl	8004df8 <error_loop>

		if(sideB_attempts != 13) { error_loop(ERROR_BALANCE_INITIATION, 0, 0, SIDE_B); }
 8002c1e:	f897 323e 	ldrb.w	r3, [r7, #574]	@ 0x23e
 8002c22:	2b0d      	cmp	r3, #13
 8002c24:	d005      	beq.n	8002c32 <balance_cycle+0xbee>
 8002c26:	2300      	movs	r3, #0
 8002c28:	2200      	movs	r2, #0
 8002c2a:	2100      	movs	r1, #0
 8002c2c:	2055      	movs	r0, #85	@ 0x55
 8002c2e:	f002 f8e3 	bl	8004df8 <error_loop>

		config_balance_flags(balanceMsg, evenCells, evenCellCount);
 8002c32:	f897 225d 	ldrb.w	r2, [r7, #605]	@ 0x25d
 8002c36:	f107 03f0 	add.w	r3, r7, #240	@ 0xf0
 8002c3a:	f8d7 1210 	ldr.w	r1, [r7, #528]	@ 0x210
 8002c3e:	4618      	mov	r0, r3
 8002c40:	f000 ffda 	bl	8003bf8 <config_balance_flags>
		balance_led_on();
 8002c44:	f007 fec6 	bl	800a9d4 <balance_led_on>
	}

	balanceCounter = 0;
 8002c48:	4bc5      	ldr	r3, [pc, #788]	@ (8002f60 <balance_cycle+0xf1c>)
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	601a      	str	r2, [r3, #0]
	measureCounter = 0;
 8002c4e:	4bc5      	ldr	r3, [pc, #788]	@ (8002f64 <balance_cycle+0xf20>)
 8002c50:	2200      	movs	r2, #0
 8002c52:	601a      	str	r2, [r3, #0]
	transmitCounter = 0;
 8002c54:	4bc4      	ldr	r3, [pc, #784]	@ (8002f68 <balance_cycle+0xf24>)
 8002c56:	2200      	movs	r2, #0
 8002c58:	601a      	str	r2, [r3, #0]
	while(evenCellsFlag) {
 8002c5a:	e1e4      	b.n	8003026 <balance_cycle+0xfe2>
		if(measureCounter > MEASURE_INTERVAL) {
 8002c5c:	4bc1      	ldr	r3, [pc, #772]	@ (8002f64 <balance_cycle+0xf20>)
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	2b64      	cmp	r3, #100	@ 0x64
 8002c62:	f240 80f4 	bls.w	8002e4e <balance_cycle+0xe0a>
			temperature_sense(moduleTemperatures);
 8002c66:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	f008 f838 	bl	800ace0 <temperature_sense>
			resistor_temperature_sense(pcbTemperatures);
 8002c70:	f107 03f8 	add.w	r3, r7, #248	@ 0xf8
 8002c74:	4618      	mov	r0, r3
 8002c76:	f7fe fd71 	bl	800175c <resistor_temperature_sense>

			maxResistorTemperature = 0;
 8002c7a:	f04f 0300 	mov.w	r3, #0
 8002c7e:	f8c7 3244 	str.w	r3, [r7, #580]	@ 0x244

			for(uint8_t i = 0; i < PCB_THERM_QTY; i++) {
 8002c82:	2300      	movs	r3, #0
 8002c84:	f887 3233 	strb.w	r3, [r7, #563]	@ 0x233
 8002c88:	e02f      	b.n	8002cea <balance_cycle+0xca6>
				if(!isnan(pcbTemperatures[i])) {
 8002c8a:	f897 3233 	ldrb.w	r3, [r7, #563]	@ 0x233
 8002c8e:	f507 7218 	add.w	r2, r7, #608	@ 0x260
 8002c92:	f5a2 72b4 	sub.w	r2, r2, #360	@ 0x168
 8002c96:	009b      	lsls	r3, r3, #2
 8002c98:	4413      	add	r3, r2
 8002c9a:	edd3 7a00 	vldr	s15, [r3]
 8002c9e:	eef4 7a67 	vcmp.f32	s15, s15
 8002ca2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ca6:	d61b      	bvs.n	8002ce0 <balance_cycle+0xc9c>
					if(pcbTemperatures[i] > maxResistorTemperature) {
 8002ca8:	f897 3233 	ldrb.w	r3, [r7, #563]	@ 0x233
 8002cac:	f507 7218 	add.w	r2, r7, #608	@ 0x260
 8002cb0:	f5a2 72b4 	sub.w	r2, r2, #360	@ 0x168
 8002cb4:	009b      	lsls	r3, r3, #2
 8002cb6:	4413      	add	r3, r2
 8002cb8:	edd3 7a00 	vldr	s15, [r3]
 8002cbc:	ed97 7a91 	vldr	s14, [r7, #580]	@ 0x244
 8002cc0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002cc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002cc8:	d50a      	bpl.n	8002ce0 <balance_cycle+0xc9c>
						maxResistorTemperature = pcbTemperatures[i];
 8002cca:	f897 3233 	ldrb.w	r3, [r7, #563]	@ 0x233
 8002cce:	f507 7218 	add.w	r2, r7, #608	@ 0x260
 8002cd2:	f5a2 72b4 	sub.w	r2, r2, #360	@ 0x168
 8002cd6:	009b      	lsls	r3, r3, #2
 8002cd8:	4413      	add	r3, r2
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f8c7 3244 	str.w	r3, [r7, #580]	@ 0x244
			for(uint8_t i = 0; i < PCB_THERM_QTY; i++) {
 8002ce0:	f897 3233 	ldrb.w	r3, [r7, #563]	@ 0x233
 8002ce4:	3301      	adds	r3, #1
 8002ce6:	f887 3233 	strb.w	r3, [r7, #563]	@ 0x233
 8002cea:	f897 3233 	ldrb.w	r3, [r7, #563]	@ 0x233
 8002cee:	2b11      	cmp	r3, #17
 8002cf0:	d9cb      	bls.n	8002c8a <balance_cycle+0xc46>
					}
				}
			}
			intMaxResistorTemperature = (uint16_t)(maxResistorTemperature*tempScale);
 8002cf2:	ed97 7a91 	vldr	s14, [r7, #580]	@ 0x244
 8002cf6:	edd7 7a79 	vldr	s15, [r7, #484]	@ 0x1e4
 8002cfa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002cfe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002d02:	ee17 3a90 	vmov	r3, s15
 8002d06:	f8a7 31d6 	strh.w	r3, [r7, #470]	@ 0x1d6
			balanceMsg[2] = (uint8_t)(intMaxResistorTemperature & 0xFF);
 8002d0a:	f8b7 31d6 	ldrh.w	r3, [r7, #470]	@ 0x1d6
 8002d0e:	b2da      	uxtb	r2, r3
 8002d10:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 8002d14:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8002d18:	709a      	strb	r2, [r3, #2]
			balanceMsg[3] = (uint8_t)((intMaxResistorTemperature >> 8) & 0xFF);
 8002d1a:	f8b7 31d6 	ldrh.w	r3, [r7, #470]	@ 0x1d6
 8002d1e:	0a1b      	lsrs	r3, r3, #8
 8002d20:	b29b      	uxth	r3, r3
 8002d22:	b2da      	uxtb	r2, r3
 8002d24:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 8002d28:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8002d2c:	70da      	strb	r2, [r3, #3]

			if(maxResistorTemperature > HOT_LED_THRESHOLD) { hot_led_on(); }
 8002d2e:	edd7 7a91 	vldr	s15, [r7, #580]	@ 0x244
 8002d32:	ed9f 7a8e 	vldr	s14, [pc, #568]	@ 8002f6c <balance_cycle+0xf28>
 8002d36:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002d3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d3e:	dd02      	ble.n	8002d46 <balance_cycle+0xd02>
 8002d40:	f007 fe60 	bl	800aa04 <hot_led_on>
 8002d44:	e001      	b.n	8002d4a <balance_cycle+0xd06>

			else { hot_led_off(); }
 8002d46:	f007 fe67 	bl	800aa18 <hot_led_off>

			if(maxResistorTemperature > RESISTOR_TEMPERATURE_LIMIT) {
 8002d4a:	edd7 7a91 	vldr	s15, [r7, #580]	@ 0x244
 8002d4e:	ed9f 7a88 	vldr	s14, [pc, #544]	@ 8002f70 <balance_cycle+0xf2c>
 8002d52:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002d56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d5a:	dd04      	ble.n	8002d66 <balance_cycle+0xd22>
				force_refup();
 8002d5c:	f006 ff68 	bl	8009c30 <force_refup>
				evenCellsFlag = 0;
 8002d60:	2300      	movs	r3, #0
 8002d62:	f887 325f 	strb.w	r3, [r7, #607]	@ 0x25f
			}

			for(uint8_t i = 0; i < MODULE_THERM_QTY; i++) {
 8002d66:	2300      	movs	r3, #0
 8002d68:	f887 3232 	strb.w	r3, [r7, #562]	@ 0x232
 8002d6c:	e028      	b.n	8002dc0 <balance_cycle+0xd7c>
				if(moduleTemperatures[i] > MAX_TEMPERATURE) {
 8002d6e:	f897 3232 	ldrb.w	r3, [r7, #562]	@ 0x232
 8002d72:	f507 7218 	add.w	r2, r7, #608	@ 0x260
 8002d76:	f5a2 7290 	sub.w	r2, r2, #288	@ 0x120
 8002d7a:	009b      	lsls	r3, r3, #2
 8002d7c:	4413      	add	r3, r2
 8002d7e:	edd3 7a00 	vldr	s15, [r3]
 8002d82:	ed9f 7a7c 	vldr	s14, [pc, #496]	@ 8002f74 <balance_cycle+0xf30>
 8002d86:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002d8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d8e:	dd12      	ble.n	8002db6 <balance_cycle+0xd72>
					overheatFlag = 1;
 8002d90:	2301      	movs	r3, #1
 8002d92:	f887 3243 	strb.w	r3, [r7, #579]	@ 0x243
					faultThermistors[faultThermistorQty] = i + 1;
 8002d96:	f897 3241 	ldrb.w	r3, [r7, #577]	@ 0x241
 8002d9a:	f897 2232 	ldrb.w	r2, [r7, #562]	@ 0x232
 8002d9e:	3201      	adds	r2, #1
 8002da0:	b2d1      	uxtb	r1, r2
 8002da2:	f507 7218 	add.w	r2, r7, #608	@ 0x260
 8002da6:	f5a2 72c2 	sub.w	r2, r2, #388	@ 0x184
 8002daa:	54d1      	strb	r1, [r2, r3]
					faultThermistorQty++;
 8002dac:	f897 3241 	ldrb.w	r3, [r7, #577]	@ 0x241
 8002db0:	3301      	adds	r3, #1
 8002db2:	f887 3241 	strb.w	r3, [r7, #577]	@ 0x241
			for(uint8_t i = 0; i < MODULE_THERM_QTY; i++) {
 8002db6:	f897 3232 	ldrb.w	r3, [r7, #562]	@ 0x232
 8002dba:	3301      	adds	r3, #1
 8002dbc:	f887 3232 	strb.w	r3, [r7, #562]	@ 0x232
 8002dc0:	f897 3232 	ldrb.w	r3, [r7, #562]	@ 0x232
 8002dc4:	2b11      	cmp	r3, #17
 8002dc6:	d9d2      	bls.n	8002d6e <balance_cycle+0xd2a>
				}
			}
			if(overheatFlag) { overheatCount++; }
 8002dc8:	f897 3243 	ldrb.w	r3, [r7, #579]	@ 0x243
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d005      	beq.n	8002ddc <balance_cycle+0xd98>
 8002dd0:	f897 3242 	ldrb.w	r3, [r7, #578]	@ 0x242
 8002dd4:	3301      	adds	r3, #1
 8002dd6:	f887 3242 	strb.w	r3, [r7, #578]	@ 0x242
 8002dda:	e020      	b.n	8002e1e <balance_cycle+0xdda>

			else {
				if(overheatCount > 0) { overheatCount--; }
 8002ddc:	f897 3242 	ldrb.w	r3, [r7, #578]	@ 0x242
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d004      	beq.n	8002dee <balance_cycle+0xdaa>
 8002de4:	f897 3242 	ldrb.w	r3, [r7, #578]	@ 0x242
 8002de8:	3b01      	subs	r3, #1
 8002dea:	f887 3242 	strb.w	r3, [r7, #578]	@ 0x242

				for(uint8_t i = 0; i < MODULE_THERM_QTY; i++) { faultThermistors[i] = 0; }
 8002dee:	2300      	movs	r3, #0
 8002df0:	f887 3231 	strb.w	r3, [r7, #561]	@ 0x231
 8002df4:	e00c      	b.n	8002e10 <balance_cycle+0xdcc>
 8002df6:	f897 3231 	ldrb.w	r3, [r7, #561]	@ 0x231
 8002dfa:	f507 7218 	add.w	r2, r7, #608	@ 0x260
 8002dfe:	f5a2 72c2 	sub.w	r2, r2, #388	@ 0x184
 8002e02:	2100      	movs	r1, #0
 8002e04:	54d1      	strb	r1, [r2, r3]
 8002e06:	f897 3231 	ldrb.w	r3, [r7, #561]	@ 0x231
 8002e0a:	3301      	adds	r3, #1
 8002e0c:	f887 3231 	strb.w	r3, [r7, #561]	@ 0x231
 8002e10:	f897 3231 	ldrb.w	r3, [r7, #561]	@ 0x231
 8002e14:	2b11      	cmp	r3, #17
 8002e16:	d9ee      	bls.n	8002df6 <balance_cycle+0xdb2>

				faultThermistorQty = 0;
 8002e18:	2300      	movs	r3, #0
 8002e1a:	f887 3241 	strb.w	r3, [r7, #577]	@ 0x241
			}
			// MODULE OVERHEAT FAULT
			if(overheatCount > ATTEMPT_LIMIT) {
 8002e1e:	f897 3242 	ldrb.w	r3, [r7, #578]	@ 0x242
 8002e22:	2b0a      	cmp	r3, #10
 8002e24:	d90d      	bls.n	8002e42 <balance_cycle+0xdfe>
				force_mute();
 8002e26:	f006 ff85 	bl	8009d34 <force_mute>
				wait(1);
 8002e2a:	2001      	movs	r0, #1
 8002e2c:	f007 fcea 	bl	800a804 <wait>
				force_refup();
 8002e30:	f006 fefe 	bl	8009c30 <force_refup>

				error_loop(ERROR_OVERHEAT, faultThermistors, 0, NOT_APPLICABLE);
 8002e34:	f107 01dc 	add.w	r1, r7, #220	@ 0xdc
 8002e38:	2303      	movs	r3, #3
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	2045      	movs	r0, #69	@ 0x45
 8002e3e:	f001 ffdb 	bl	8004df8 <error_loop>
			}
			overheatFlag = 0;
 8002e42:	2300      	movs	r3, #0
 8002e44:	f887 3243 	strb.w	r3, [r7, #579]	@ 0x243

			measureCounter = 0;
 8002e48:	4b46      	ldr	r3, [pc, #280]	@ (8002f64 <balance_cycle+0xf20>)
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	601a      	str	r2, [r3, #0]
		}

		if(transmitCounter > transmissionDelay) {
 8002e4e:	4b4a      	ldr	r3, [pc, #296]	@ (8002f78 <balance_cycle+0xf34>)
 8002e50:	881b      	ldrh	r3, [r3, #0]
 8002e52:	461a      	mov	r2, r3
 8002e54:	4b44      	ldr	r3, [pc, #272]	@ (8002f68 <balance_cycle+0xf24>)
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	429a      	cmp	r2, r3
 8002e5a:	d211      	bcs.n	8002e80 <balance_cycle+0xe3c>
			transmit_balance(balanceMsg);
 8002e5c:	f107 03f0 	add.w	r3, r7, #240	@ 0xf0
 8002e60:	4618      	mov	r0, r3
 8002e62:	f002 fac3 	bl	80053ec <transmit_balance>
			transmit_voltages(cellVoltages);
 8002e66:	f507 73c4 	add.w	r3, r7, #392	@ 0x188
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	f002 fb92 	bl	8005594 <transmit_voltages>
			transmit_temperatures(moduleTemperatures);
 8002e70:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002e74:	4618      	mov	r0, r3
 8002e76:	f002 fd5d 	bl	8005934 <transmit_temperatures>

			transmitCounter = 0;
 8002e7a:	4b3b      	ldr	r3, [pc, #236]	@ (8002f68 <balance_cycle+0xf24>)
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	601a      	str	r2, [r3, #0]
		}

		if(balanceCounter > BALANCE_CYCLE_DURATION) {
 8002e80:	4b37      	ldr	r3, [pc, #220]	@ (8002f60 <balance_cycle+0xf1c>)
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f64e 2260 	movw	r2, #60000	@ 0xea60
 8002e88:	4293      	cmp	r3, r2
 8002e8a:	d904      	bls.n	8002e96 <balance_cycle+0xe52>
			force_refup();
 8002e8c:	f006 fed0 	bl	8009c30 <force_refup>
			evenCellsFlag = 0;
 8002e90:	2300      	movs	r3, #0
 8002e92:	f887 325f 	strb.w	r3, [r7, #607]	@ 0x25f
		}

		if(HAL_CAN_GetRxFifoFillLevel(&hcan1, CAN_RX_FIFO0) > 0) {
 8002e96:	2100      	movs	r1, #0
 8002e98:	4838      	ldr	r0, [pc, #224]	@ (8002f7c <balance_cycle+0xf38>)
 8002e9a:	f00a f850 	bl	800cf3e <HAL_CAN_GetRxFifoFillLevel>
 8002e9e:	4603      	mov	r3, r0
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d051      	beq.n	8002f48 <balance_cycle+0xf04>
			uint8_t attempts = 0;
 8002ea4:	2300      	movs	r3, #0
 8002ea6:	f887 3230 	strb.w	r3, [r7, #560]	@ 0x230

			while(attempts < ATTEMPT_LIMIT) {
 8002eaa:	e03f      	b.n	8002f2c <balance_cycle+0xee8>
				if(HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &RxHeader, RxData) == HAL_OK) {
 8002eac:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 8002eb0:	f507 72dc 	add.w	r2, r7, #440	@ 0x1b8
 8002eb4:	2100      	movs	r1, #0
 8002eb6:	4831      	ldr	r0, [pc, #196]	@ (8002f7c <balance_cycle+0xf38>)
 8002eb8:	f009 ff1f 	bl	800ccfa <HAL_CAN_GetRxMessage>
 8002ebc:	4603      	mov	r3, r0
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d12c      	bne.n	8002f1c <balance_cycle+0xed8>

					if(RxHeader.StdId == CAN_FAULT_ID) {
 8002ec2:	f8d7 31b8 	ldr.w	r3, [r7, #440]	@ 0x1b8
 8002ec6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002eca:	d10b      	bne.n	8002ee4 <balance_cycle+0xea0>
						force_refup();
 8002ecc:	f006 feb0 	bl	8009c30 <force_refup>
						wait(1);
 8002ed0:	2001      	movs	r0, #1
 8002ed2:	f007 fc97 	bl	800a804 <wait>
						force_mute();
 8002ed6:	f006 ff2d 	bl	8009d34 <force_mute>
						wait(1);
 8002eda:	2001      	movs	r0, #1
 8002edc:	f007 fc92 	bl	800a804 <wait>
						silent_error_loop();
 8002ee0:	f001 ff42 	bl	8004d68 <silent_error_loop>
					}

					if(RxHeader.StdId == CAN_STOP_BALANCE_ID) {
 8002ee4:	f8d7 31b8 	ldr.w	r3, [r7, #440]	@ 0x1b8
 8002ee8:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002eec:	4293      	cmp	r3, r2
 8002eee:	d111      	bne.n	8002f14 <balance_cycle+0xed0>
						force_refup();
 8002ef0:	f006 fe9e 	bl	8009c30 <force_refup>
						wait(1);
 8002ef4:	2001      	movs	r0, #1
 8002ef6:	f007 fc85 	bl	800a804 <wait>
						*haltBalanceFlag = 0;
 8002efa:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 8002efe:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	2200      	movs	r2, #0
 8002f06:	701a      	strb	r2, [r3, #0]
						evenCellsFlag = 0;
 8002f08:	2300      	movs	r3, #0
 8002f0a:	f887 325f 	strb.w	r3, [r7, #607]	@ 0x25f
						oddCellsFlag = 0;
 8002f0e:	2300      	movs	r3, #0
 8002f10:	f887 325e 	strb.w	r3, [r7, #606]	@ 0x25e
					}

					attempts = 13;
 8002f14:	230d      	movs	r3, #13
 8002f16:	f887 3230 	strb.w	r3, [r7, #560]	@ 0x230
 8002f1a:	e007      	b.n	8002f2c <balance_cycle+0xee8>
				}
				else {
					attempts++;
 8002f1c:	f897 3230 	ldrb.w	r3, [r7, #560]	@ 0x230
 8002f20:	3301      	adds	r3, #1
 8002f22:	f887 3230 	strb.w	r3, [r7, #560]	@ 0x230
					wait(5);
 8002f26:	2005      	movs	r0, #5
 8002f28:	f007 fc6c 	bl	800a804 <wait>
			while(attempts < ATTEMPT_LIMIT) {
 8002f2c:	f897 3230 	ldrb.w	r3, [r7, #560]	@ 0x230
 8002f30:	2b09      	cmp	r3, #9
 8002f32:	d9bb      	bls.n	8002eac <balance_cycle+0xe68>
				}
			}
			if(attempts != 13) { error_loop(ERROR_CAN_READ, 0, 0, MCU_FAULT); }
 8002f34:	f897 3230 	ldrb.w	r3, [r7, #560]	@ 0x230
 8002f38:	2b0d      	cmp	r3, #13
 8002f3a:	d005      	beq.n	8002f48 <balance_cycle+0xf04>
 8002f3c:	2302      	movs	r3, #2
 8002f3e:	2200      	movs	r2, #0
 8002f40:	2100      	movs	r1, #0
 8002f42:	2057      	movs	r0, #87	@ 0x57
 8002f44:	f001 ff58 	bl	8004df8 <error_loop>
		}

		if(HAL_CAN_GetRxFifoFillLevel(&hcan1, CAN_RX_FIFO1) > 0) {
 8002f48:	2101      	movs	r1, #1
 8002f4a:	480c      	ldr	r0, [pc, #48]	@ (8002f7c <balance_cycle+0xf38>)
 8002f4c:	f009 fff7 	bl	800cf3e <HAL_CAN_GetRxFifoFillLevel>
 8002f50:	4603      	mov	r3, r0
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d064      	beq.n	8003020 <balance_cycle+0xfdc>
			uint8_t attempts = 0;
 8002f56:	2300      	movs	r3, #0
 8002f58:	f887 322f 	strb.w	r3, [r7, #559]	@ 0x22f

			while(attempts < ATTEMPT_LIMIT) {
 8002f5c:	e052      	b.n	8003004 <balance_cycle+0xfc0>
 8002f5e:	bf00      	nop
 8002f60:	200003f0 	.word	0x200003f0
 8002f64:	200003ec 	.word	0x200003ec
 8002f68:	200003e8 	.word	0x200003e8
 8002f6c:	42340000 	.word	0x42340000
 8002f70:	42e60000 	.word	0x42e60000
 8002f74:	42700000 	.word	0x42700000
 8002f78:	200003e6 	.word	0x200003e6
 8002f7c:	200000c4 	.word	0x200000c4
				if(HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO1, &RxHeader, RxData) == HAL_OK) {
 8002f80:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 8002f84:	f507 72dc 	add.w	r2, r7, #440	@ 0x1b8
 8002f88:	2101      	movs	r1, #1
 8002f8a:	48d9      	ldr	r0, [pc, #868]	@ (80032f0 <balance_cycle+0x12ac>)
 8002f8c:	f009 feb5 	bl	800ccfa <HAL_CAN_GetRxMessage>
 8002f90:	4603      	mov	r3, r0
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d12e      	bne.n	8002ff4 <balance_cycle+0xfb0>
					if(RxHeader.StdId == CAN_PACK_STATUS_ID) {
 8002f96:	f8d7 31b8 	ldr.w	r3, [r7, #440]	@ 0x1b8
 8002f9a:	f5b3 6f84 	cmp.w	r3, #1056	@ 0x420
 8002f9e:	d125      	bne.n	8002fec <balance_cycle+0xfa8>
						if(RxData[PACK_STATUS_BYTE_POSITION] == PACK_STATUS_PRECHARGE_START ||
 8002fa0:	f897 31b5 	ldrb.w	r3, [r7, #437]	@ 0x1b5
 8002fa4:	2b01      	cmp	r3, #1
 8002fa6:	d00f      	beq.n	8002fc8 <balance_cycle+0xf84>
						   RxData[PACK_STATUS_BYTE_POSITION] == PACK_STATUS_PRECHARGING ||
 8002fa8:	f897 31b5 	ldrb.w	r3, [r7, #437]	@ 0x1b5
						if(RxData[PACK_STATUS_BYTE_POSITION] == PACK_STATUS_PRECHARGE_START ||
 8002fac:	2b02      	cmp	r3, #2
 8002fae:	d00b      	beq.n	8002fc8 <balance_cycle+0xf84>
						   RxData[PACK_STATUS_BYTE_POSITION] == PACK_STATUS_ACTIVE ||
 8002fb0:	f897 31b5 	ldrb.w	r3, [r7, #437]	@ 0x1b5
						   RxData[PACK_STATUS_BYTE_POSITION] == PACK_STATUS_PRECHARGING ||
 8002fb4:	2b03      	cmp	r3, #3
 8002fb6:	d007      	beq.n	8002fc8 <balance_cycle+0xf84>
						   RxData[PACK_STATUS_BYTE_POSITION] == PACK_STATUS_CHARGING ||
 8002fb8:	f897 31b5 	ldrb.w	r3, [r7, #437]	@ 0x1b5
						   RxData[PACK_STATUS_BYTE_POSITION] == PACK_STATUS_ACTIVE ||
 8002fbc:	2b04      	cmp	r3, #4
 8002fbe:	d003      	beq.n	8002fc8 <balance_cycle+0xf84>
						   RxData[PACK_STATUS_BYTE_POSITION] == PACK_STATUS_CHARGING_COMPLETE)
 8002fc0:	f897 31b5 	ldrb.w	r3, [r7, #437]	@ 0x1b5
						   RxData[PACK_STATUS_BYTE_POSITION] == PACK_STATUS_CHARGING ||
 8002fc4:	2b05      	cmp	r3, #5
 8002fc6:	d111      	bne.n	8002fec <balance_cycle+0xfa8>
						{
							force_refup();
 8002fc8:	f006 fe32 	bl	8009c30 <force_refup>
							wait(1);
 8002fcc:	2001      	movs	r0, #1
 8002fce:	f007 fc19 	bl	800a804 <wait>
							*haltBalanceFlag = 0;
 8002fd2:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 8002fd6:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	2200      	movs	r2, #0
 8002fde:	701a      	strb	r2, [r3, #0]
							evenCellsFlag = 0;
 8002fe0:	2300      	movs	r3, #0
 8002fe2:	f887 325f 	strb.w	r3, [r7, #607]	@ 0x25f
							oddCellsFlag = 0;
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	f887 325e 	strb.w	r3, [r7, #606]	@ 0x25e
						}
					}
					attempts = 13;
 8002fec:	230d      	movs	r3, #13
 8002fee:	f887 322f 	strb.w	r3, [r7, #559]	@ 0x22f
 8002ff2:	e007      	b.n	8003004 <balance_cycle+0xfc0>
				}
				else {
					attempts++;
 8002ff4:	f897 322f 	ldrb.w	r3, [r7, #559]	@ 0x22f
 8002ff8:	3301      	adds	r3, #1
 8002ffa:	f887 322f 	strb.w	r3, [r7, #559]	@ 0x22f
					wait(5);
 8002ffe:	2005      	movs	r0, #5
 8003000:	f007 fc00 	bl	800a804 <wait>
			while(attempts < ATTEMPT_LIMIT) {
 8003004:	f897 322f 	ldrb.w	r3, [r7, #559]	@ 0x22f
 8003008:	2b09      	cmp	r3, #9
 800300a:	d9b9      	bls.n	8002f80 <balance_cycle+0xf3c>
				}
			}
			if(attempts != 13) { error_loop(ERROR_CAN_READ, 0, 0, MCU_FAULT); }
 800300c:	f897 322f 	ldrb.w	r3, [r7, #559]	@ 0x22f
 8003010:	2b0d      	cmp	r3, #13
 8003012:	d005      	beq.n	8003020 <balance_cycle+0xfdc>
 8003014:	2302      	movs	r3, #2
 8003016:	2200      	movs	r2, #0
 8003018:	2100      	movs	r1, #0
 800301a:	2057      	movs	r0, #87	@ 0x57
 800301c:	f001 feec 	bl	8004df8 <error_loop>
		}

		wait(1);
 8003020:	2001      	movs	r0, #1
 8003022:	f007 fbef 	bl	800a804 <wait>
	while(evenCellsFlag) {
 8003026:	f897 325f 	ldrb.w	r3, [r7, #607]	@ 0x25f
 800302a:	2b00      	cmp	r3, #0
 800302c:	f47f ae16 	bne.w	8002c5c <balance_cycle+0xc18>
	}

	if(oddCellsFlag) {
 8003030:	f897 325e 	ldrb.w	r3, [r7, #606]	@ 0x25e
 8003034:	2b00      	cmp	r3, #0
 8003036:	f000 821c 	beq.w	8003472 <balance_cycle+0x142e>
		uint8_t sideA_attempts = 0;
 800303a:	2300      	movs	r3, #0
 800303c:	f887 322e 	strb.w	r3, [r7, #558]	@ 0x22e
		uint8_t sideB_attempts = 0;
 8003040:	2300      	movs	r3, #0
 8003042:	f887 322d 	strb.w	r3, [r7, #557]	@ 0x22d
		uint8_t sideA_subAttempts = 0;
 8003046:	2300      	movs	r3, #0
 8003048:	f887 322c 	strb.w	r3, [r7, #556]	@ 0x22c
		uint8_t sideB_subAttempts = 0;
 800304c:	2300      	movs	r3, #0
 800304e:	f887 322b 	strb.w	r3, [r7, #555]	@ 0x22b
		uint8_t sideB_receptionRegisterPWM[8];

		uint8_t sideA_receptionRegisterPWM_PECflag;
		uint8_t sideB_receptionRegisterPWM_PECflag;

		while(sideA_attempts < ATTEMPT_LIMIT || sideB_attempts < ATTEMPT_LIMIT) {
 8003052:	e0db      	b.n	800320c <balance_cycle+0x11c8>
			while(sideA_subAttempts < ATTEMPT_LIMIT || sideB_subAttempts < ATTEMPT_LIMIT) {
				WRPWM(sideA_payloadRegisterPWM_oddCells, SIDE_A);
 8003054:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8003058:	2101      	movs	r1, #1
 800305a:	4618      	mov	r0, r3
 800305c:	f006 f994 	bl	8009388 <WRPWM>
				WRPWM(sideB_payloadRegisterPWM_oddCells, SIDE_B);
 8003060:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8003064:	2100      	movs	r1, #0
 8003066:	4618      	mov	r0, r3
 8003068:	f006 f98e 	bl	8009388 <WRPWM>
				wait(1);
 800306c:	2001      	movs	r0, #1
 800306e:	f007 fbc9 	bl	800a804 <wait>

				RDPWM(sideA_receptionRegisterPWM, SIDE_A);
 8003072:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8003076:	2101      	movs	r1, #1
 8003078:	4618      	mov	r0, r3
 800307a:	f006 fb9f 	bl	80097bc <RDPWM>
				RDPWM(sideB_receptionRegisterPWM, SIDE_B);
 800307e:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8003082:	2100      	movs	r1, #0
 8003084:	4618      	mov	r0, r3
 8003086:	f006 fb99 	bl	80097bc <RDPWM>
				wait(1);
 800308a:	2001      	movs	r0, #1
 800308c:	f007 fbba 	bl	800a804 <wait>

				sideA_receptionRegisterPWM_PECflag = verify_PEC15(sideA_receptionRegisterPWM);
 8003090:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8003094:	4618      	mov	r0, r3
 8003096:	f006 f838 	bl	800910a <verify_PEC15>
 800309a:	4603      	mov	r3, r0
 800309c:	f887 31d9 	strb.w	r3, [r7, #473]	@ 0x1d9
				sideB_receptionRegisterPWM_PECflag = verify_PEC15(sideB_receptionRegisterPWM);
 80030a0:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80030a4:	4618      	mov	r0, r3
 80030a6:	f006 f830 	bl	800910a <verify_PEC15>
 80030aa:	4603      	mov	r3, r0
 80030ac:	f887 31d8 	strb.w	r3, [r7, #472]	@ 0x1d8

				if(sideA_receptionRegisterPWM_PECflag == 2) { sideA_subAttempts = 13; }
 80030b0:	f897 31d9 	ldrb.w	r3, [r7, #473]	@ 0x1d9
 80030b4:	2b02      	cmp	r3, #2
 80030b6:	d103      	bne.n	80030c0 <balance_cycle+0x107c>
 80030b8:	230d      	movs	r3, #13
 80030ba:	f887 322c 	strb.w	r3, [r7, #556]	@ 0x22c
 80030be:	e007      	b.n	80030d0 <balance_cycle+0x108c>

				else {
					sideA_subAttempts++;
 80030c0:	f897 322c 	ldrb.w	r3, [r7, #556]	@ 0x22c
 80030c4:	3301      	adds	r3, #1
 80030c6:	f887 322c 	strb.w	r3, [r7, #556]	@ 0x22c
					wait(1);
 80030ca:	2001      	movs	r0, #1
 80030cc:	f007 fb9a 	bl	800a804 <wait>
				}

				if(sideB_receptionRegisterPWM_PECflag == 2) { sideB_subAttempts = 13; }
 80030d0:	f897 31d8 	ldrb.w	r3, [r7, #472]	@ 0x1d8
 80030d4:	2b02      	cmp	r3, #2
 80030d6:	d103      	bne.n	80030e0 <balance_cycle+0x109c>
 80030d8:	230d      	movs	r3, #13
 80030da:	f887 322b 	strb.w	r3, [r7, #555]	@ 0x22b
 80030de:	e007      	b.n	80030f0 <balance_cycle+0x10ac>

				else {
					sideB_subAttempts++;
 80030e0:	f897 322b 	ldrb.w	r3, [r7, #555]	@ 0x22b
 80030e4:	3301      	adds	r3, #1
 80030e6:	f887 322b 	strb.w	r3, [r7, #555]	@ 0x22b
					wait(1);
 80030ea:	2001      	movs	r0, #1
 80030ec:	f007 fb8a 	bl	800a804 <wait>
			while(sideA_subAttempts < ATTEMPT_LIMIT || sideB_subAttempts < ATTEMPT_LIMIT) {
 80030f0:	f897 322c 	ldrb.w	r3, [r7, #556]	@ 0x22c
 80030f4:	2b09      	cmp	r3, #9
 80030f6:	d9ad      	bls.n	8003054 <balance_cycle+0x1010>
 80030f8:	f897 322b 	ldrb.w	r3, [r7, #555]	@ 0x22b
 80030fc:	2b09      	cmp	r3, #9
 80030fe:	d9a9      	bls.n	8003054 <balance_cycle+0x1010>
				}
			}
			if(sideA_subAttempts != 13) { error_loop(ERROR_PEC, 0, 0, SIDE_A); }
 8003100:	f897 322c 	ldrb.w	r3, [r7, #556]	@ 0x22c
 8003104:	2b0d      	cmp	r3, #13
 8003106:	d005      	beq.n	8003114 <balance_cycle+0x10d0>
 8003108:	2301      	movs	r3, #1
 800310a:	2200      	movs	r2, #0
 800310c:	2100      	movs	r1, #0
 800310e:	2056      	movs	r0, #86	@ 0x56
 8003110:	f001 fe72 	bl	8004df8 <error_loop>

			if(sideB_subAttempts != 13) { error_loop(ERROR_PEC, 0, 0, SIDE_B); }
 8003114:	f897 322b 	ldrb.w	r3, [r7, #555]	@ 0x22b
 8003118:	2b0d      	cmp	r3, #13
 800311a:	d005      	beq.n	8003128 <balance_cycle+0x10e4>
 800311c:	2300      	movs	r3, #0
 800311e:	2200      	movs	r2, #0
 8003120:	2100      	movs	r1, #0
 8003122:	2056      	movs	r0, #86	@ 0x56
 8003124:	f001 fe68 	bl	8004df8 <error_loop>

			uint8_t sideA_matchFlag = 1;
 8003128:	2301      	movs	r3, #1
 800312a:	f887 322a 	strb.w	r3, [r7, #554]	@ 0x22a
			uint8_t sideB_matchFlag = 1;
 800312e:	2301      	movs	r3, #1
 8003130:	f887 3229 	strb.w	r3, [r7, #553]	@ 0x229

			for(uint8_t i = 0; i < 6; i++) {
 8003134:	2300      	movs	r3, #0
 8003136:	f887 3228 	strb.w	r3, [r7, #552]	@ 0x228
 800313a:	e017      	b.n	800316c <balance_cycle+0x1128>
				if(sideA_receptionRegisterPWM[i] != sideA_payloadRegisterPWM_oddCells[i]) {
 800313c:	f897 3228 	ldrb.w	r3, [r7, #552]	@ 0x228
 8003140:	f507 7218 	add.w	r2, r7, #608	@ 0x260
 8003144:	f5a2 72f6 	sub.w	r2, r2, #492	@ 0x1ec
 8003148:	5cd2      	ldrb	r2, [r2, r3]
 800314a:	f897 3228 	ldrb.w	r3, [r7, #552]	@ 0x228
 800314e:	f507 7118 	add.w	r1, r7, #608	@ 0x260
 8003152:	f5a1 71de 	sub.w	r1, r1, #444	@ 0x1bc
 8003156:	5ccb      	ldrb	r3, [r1, r3]
 8003158:	429a      	cmp	r2, r3
 800315a:	d002      	beq.n	8003162 <balance_cycle+0x111e>
					sideA_matchFlag = 0;
 800315c:	2300      	movs	r3, #0
 800315e:	f887 322a 	strb.w	r3, [r7, #554]	@ 0x22a
			for(uint8_t i = 0; i < 6; i++) {
 8003162:	f897 3228 	ldrb.w	r3, [r7, #552]	@ 0x228
 8003166:	3301      	adds	r3, #1
 8003168:	f887 3228 	strb.w	r3, [r7, #552]	@ 0x228
 800316c:	f897 3228 	ldrb.w	r3, [r7, #552]	@ 0x228
 8003170:	2b05      	cmp	r3, #5
 8003172:	d9e3      	bls.n	800313c <balance_cycle+0x10f8>
				}
			}

			for(uint8_t i = 0; i < 6; i++) {
 8003174:	2300      	movs	r3, #0
 8003176:	f887 3227 	strb.w	r3, [r7, #551]	@ 0x227
 800317a:	e017      	b.n	80031ac <balance_cycle+0x1168>
				if(sideB_receptionRegisterPWM[i] != sideB_payloadRegisterPWM_oddCells[i]) {
 800317c:	f897 3227 	ldrb.w	r3, [r7, #551]	@ 0x227
 8003180:	f507 7218 	add.w	r2, r7, #608	@ 0x260
 8003184:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8003188:	5cd2      	ldrb	r2, [r2, r3]
 800318a:	f897 3227 	ldrb.w	r3, [r7, #551]	@ 0x227
 800318e:	f507 7118 	add.w	r1, r7, #608	@ 0x260
 8003192:	f5a1 71e2 	sub.w	r1, r1, #452	@ 0x1c4
 8003196:	5ccb      	ldrb	r3, [r1, r3]
 8003198:	429a      	cmp	r2, r3
 800319a:	d002      	beq.n	80031a2 <balance_cycle+0x115e>
					sideB_matchFlag = 0;
 800319c:	2300      	movs	r3, #0
 800319e:	f887 3229 	strb.w	r3, [r7, #553]	@ 0x229
			for(uint8_t i = 0; i < 6; i++) {
 80031a2:	f897 3227 	ldrb.w	r3, [r7, #551]	@ 0x227
 80031a6:	3301      	adds	r3, #1
 80031a8:	f887 3227 	strb.w	r3, [r7, #551]	@ 0x227
 80031ac:	f897 3227 	ldrb.w	r3, [r7, #551]	@ 0x227
 80031b0:	2b05      	cmp	r3, #5
 80031b2:	d9e3      	bls.n	800317c <balance_cycle+0x1138>
				}
			}

			if(sideA_matchFlag) { sideA_attempts = 13; }
 80031b4:	f897 322a 	ldrb.w	r3, [r7, #554]	@ 0x22a
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d003      	beq.n	80031c4 <balance_cycle+0x1180>
 80031bc:	230d      	movs	r3, #13
 80031be:	f887 322e 	strb.w	r3, [r7, #558]	@ 0x22e
 80031c2:	e00d      	b.n	80031e0 <balance_cycle+0x119c>

			else {
				sideA_attempts++;
 80031c4:	f897 322e 	ldrb.w	r3, [r7, #558]	@ 0x22e
 80031c8:	3301      	adds	r3, #1
 80031ca:	f887 322e 	strb.w	r3, [r7, #558]	@ 0x22e
				sideA_subAttempts = 0;
 80031ce:	2300      	movs	r3, #0
 80031d0:	f887 322c 	strb.w	r3, [r7, #556]	@ 0x22c
				sideB_subAttempts = 0;
 80031d4:	2300      	movs	r3, #0
 80031d6:	f887 322b 	strb.w	r3, [r7, #555]	@ 0x22b
				wait(1);
 80031da:	2001      	movs	r0, #1
 80031dc:	f007 fb12 	bl	800a804 <wait>
			}

			if(sideB_matchFlag) { sideB_attempts = 13; }
 80031e0:	f897 3229 	ldrb.w	r3, [r7, #553]	@ 0x229
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d003      	beq.n	80031f0 <balance_cycle+0x11ac>
 80031e8:	230d      	movs	r3, #13
 80031ea:	f887 322d 	strb.w	r3, [r7, #557]	@ 0x22d
 80031ee:	e00d      	b.n	800320c <balance_cycle+0x11c8>

			else {
				sideB_attempts++;
 80031f0:	f897 322d 	ldrb.w	r3, [r7, #557]	@ 0x22d
 80031f4:	3301      	adds	r3, #1
 80031f6:	f887 322d 	strb.w	r3, [r7, #557]	@ 0x22d
				sideA_subAttempts = 0;
 80031fa:	2300      	movs	r3, #0
 80031fc:	f887 322c 	strb.w	r3, [r7, #556]	@ 0x22c
				sideB_subAttempts = 0;
 8003200:	2300      	movs	r3, #0
 8003202:	f887 322b 	strb.w	r3, [r7, #555]	@ 0x22b
				wait(1);
 8003206:	2001      	movs	r0, #1
 8003208:	f007 fafc 	bl	800a804 <wait>
		while(sideA_attempts < ATTEMPT_LIMIT || sideB_attempts < ATTEMPT_LIMIT) {
 800320c:	f897 322e 	ldrb.w	r3, [r7, #558]	@ 0x22e
 8003210:	2b09      	cmp	r3, #9
 8003212:	f67f af6d 	bls.w	80030f0 <balance_cycle+0x10ac>
 8003216:	f897 322d 	ldrb.w	r3, [r7, #557]	@ 0x22d
 800321a:	2b09      	cmp	r3, #9
 800321c:	f67f af68 	bls.w	80030f0 <balance_cycle+0x10ac>
			}
		}
		if(sideA_attempts != 13) { error_loop(ERROR_PWM_SETUP, 0, 0, SIDE_A); }
 8003220:	f897 322e 	ldrb.w	r3, [r7, #558]	@ 0x22e
 8003224:	2b0d      	cmp	r3, #13
 8003226:	d005      	beq.n	8003234 <balance_cycle+0x11f0>
 8003228:	2301      	movs	r3, #1
 800322a:	2200      	movs	r2, #0
 800322c:	2100      	movs	r1, #0
 800322e:	2054      	movs	r0, #84	@ 0x54
 8003230:	f001 fde2 	bl	8004df8 <error_loop>

		if(sideB_attempts != 13) { error_loop(ERROR_PWM_SETUP, 0, 0, SIDE_B); }
 8003234:	f897 322d 	ldrb.w	r3, [r7, #557]	@ 0x22d
 8003238:	2b0d      	cmp	r3, #13
 800323a:	d005      	beq.n	8003248 <balance_cycle+0x1204>
 800323c:	2300      	movs	r3, #0
 800323e:	2200      	movs	r2, #0
 8003240:	2100      	movs	r1, #0
 8003242:	2054      	movs	r0, #84	@ 0x54
 8003244:	f001 fdd8 	bl	8004df8 <error_loop>
		uint8_t sideB_receptionRegisterCFGA[8];

		uint8_t sideA_receptionRegisterCFGA_PECflag;
		uint8_t sideB_receptionRegisterCFGA_PECflag;

		sideA_attempts = 0;
 8003248:	2300      	movs	r3, #0
 800324a:	f887 322e 	strb.w	r3, [r7, #558]	@ 0x22e
		sideB_attempts = 0;
 800324e:	2300      	movs	r3, #0
 8003250:	f887 322d 	strb.w	r3, [r7, #557]	@ 0x22d
		sideA_subAttempts = 0;
 8003254:	2300      	movs	r3, #0
 8003256:	f887 322c 	strb.w	r3, [r7, #556]	@ 0x22c
		sideB_subAttempts = 0;
 800325a:	2300      	movs	r3, #0
 800325c:	f887 322b 	strb.w	r3, [r7, #555]	@ 0x22b
		while(sideA_attempts < ATTEMPT_LIMIT || sideB_attempts < ATTEMPT_LIMIT) {
 8003260:	e0de      	b.n	8003420 <balance_cycle+0x13dc>
			while(sideA_subAttempts < ATTEMPT_LIMIT || sideB_subAttempts < ATTEMPT_LIMIT) {
				WRCFGA(sideA_payloadRegisterA_oddCells, SIDE_A);
 8003262:	f107 03c4 	add.w	r3, r7, #196	@ 0xc4
 8003266:	2101      	movs	r1, #1
 8003268:	4618      	mov	r0, r3
 800326a:	f006 f847 	bl	80092fc <WRCFGA>
				WRCFGA(sideB_payloadRegisterA_oddCells, SIDE_B);
 800326e:	f107 03bc 	add.w	r3, r7, #188	@ 0xbc
 8003272:	2100      	movs	r1, #0
 8003274:	4618      	mov	r0, r3
 8003276:	f006 f841 	bl	80092fc <WRCFGA>
				wait(1);
 800327a:	2001      	movs	r0, #1
 800327c:	f007 fac2 	bl	800a804 <wait>

				RDCFGA(sideA_receptionRegisterCFGA, SIDE_A);
 8003280:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8003284:	2101      	movs	r1, #1
 8003286:	4618      	mov	r0, r3
 8003288:	f006 f8c4 	bl	8009414 <RDCFGA>
				RDCFGA(sideB_receptionRegisterCFGA, SIDE_B);
 800328c:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8003290:	2100      	movs	r1, #0
 8003292:	4618      	mov	r0, r3
 8003294:	f006 f8be 	bl	8009414 <RDCFGA>
				wait(1);
 8003298:	2001      	movs	r0, #1
 800329a:	f007 fab3 	bl	800a804 <wait>

				sideA_receptionRegisterCFGA_PECflag = verify_PEC15(sideA_receptionRegisterCFGA);
 800329e:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80032a2:	4618      	mov	r0, r3
 80032a4:	f005 ff31 	bl	800910a <verify_PEC15>
 80032a8:	4603      	mov	r3, r0
 80032aa:	f887 31db 	strb.w	r3, [r7, #475]	@ 0x1db
				sideB_receptionRegisterCFGA_PECflag = verify_PEC15(sideB_receptionRegisterCFGA);
 80032ae:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80032b2:	4618      	mov	r0, r3
 80032b4:	f005 ff29 	bl	800910a <verify_PEC15>
 80032b8:	4603      	mov	r3, r0
 80032ba:	f887 31da 	strb.w	r3, [r7, #474]	@ 0x1da

				if(sideA_receptionRegisterCFGA_PECflag == 2) { sideA_subAttempts = 13; }
 80032be:	f897 31db 	ldrb.w	r3, [r7, #475]	@ 0x1db
 80032c2:	2b02      	cmp	r3, #2
 80032c4:	d103      	bne.n	80032ce <balance_cycle+0x128a>
 80032c6:	230d      	movs	r3, #13
 80032c8:	f887 322c 	strb.w	r3, [r7, #556]	@ 0x22c
 80032cc:	e007      	b.n	80032de <balance_cycle+0x129a>

				else {
					sideA_subAttempts++;
 80032ce:	f897 322c 	ldrb.w	r3, [r7, #556]	@ 0x22c
 80032d2:	3301      	adds	r3, #1
 80032d4:	f887 322c 	strb.w	r3, [r7, #556]	@ 0x22c
					wait(1);
 80032d8:	2001      	movs	r0, #1
 80032da:	f007 fa93 	bl	800a804 <wait>
				}

				if(sideB_receptionRegisterCFGA_PECflag == 2) { sideB_subAttempts = 13; }
 80032de:	f897 31da 	ldrb.w	r3, [r7, #474]	@ 0x1da
 80032e2:	2b02      	cmp	r3, #2
 80032e4:	d106      	bne.n	80032f4 <balance_cycle+0x12b0>
 80032e6:	230d      	movs	r3, #13
 80032e8:	f887 322b 	strb.w	r3, [r7, #555]	@ 0x22b
 80032ec:	e00a      	b.n	8003304 <balance_cycle+0x12c0>
 80032ee:	bf00      	nop
 80032f0:	200000c4 	.word	0x200000c4

				else {
					sideB_subAttempts++;
 80032f4:	f897 322b 	ldrb.w	r3, [r7, #555]	@ 0x22b
 80032f8:	3301      	adds	r3, #1
 80032fa:	f887 322b 	strb.w	r3, [r7, #555]	@ 0x22b
					wait(1);
 80032fe:	2001      	movs	r0, #1
 8003300:	f007 fa80 	bl	800a804 <wait>
			while(sideA_subAttempts < ATTEMPT_LIMIT || sideB_subAttempts < ATTEMPT_LIMIT) {
 8003304:	f897 322c 	ldrb.w	r3, [r7, #556]	@ 0x22c
 8003308:	2b09      	cmp	r3, #9
 800330a:	d9aa      	bls.n	8003262 <balance_cycle+0x121e>
 800330c:	f897 322b 	ldrb.w	r3, [r7, #555]	@ 0x22b
 8003310:	2b09      	cmp	r3, #9
 8003312:	d9a6      	bls.n	8003262 <balance_cycle+0x121e>
				}
			}
			if(sideA_subAttempts != 13) { error_loop(ERROR_PEC, 0, 0, SIDE_A); }
 8003314:	f897 322c 	ldrb.w	r3, [r7, #556]	@ 0x22c
 8003318:	2b0d      	cmp	r3, #13
 800331a:	d005      	beq.n	8003328 <balance_cycle+0x12e4>
 800331c:	2301      	movs	r3, #1
 800331e:	2200      	movs	r2, #0
 8003320:	2100      	movs	r1, #0
 8003322:	2056      	movs	r0, #86	@ 0x56
 8003324:	f001 fd68 	bl	8004df8 <error_loop>

			if(sideB_subAttempts != 13) { error_loop(ERROR_PEC, 0, 0, SIDE_B); }
 8003328:	f897 322b 	ldrb.w	r3, [r7, #555]	@ 0x22b
 800332c:	2b0d      	cmp	r3, #13
 800332e:	d005      	beq.n	800333c <balance_cycle+0x12f8>
 8003330:	2300      	movs	r3, #0
 8003332:	2200      	movs	r2, #0
 8003334:	2100      	movs	r1, #0
 8003336:	2056      	movs	r0, #86	@ 0x56
 8003338:	f001 fd5e 	bl	8004df8 <error_loop>

			uint8_t sideA_matchFlag = 1;
 800333c:	2301      	movs	r3, #1
 800333e:	f887 3226 	strb.w	r3, [r7, #550]	@ 0x226
			uint8_t sideB_matchFlag = 1;
 8003342:	2301      	movs	r3, #1
 8003344:	f887 3225 	strb.w	r3, [r7, #549]	@ 0x225

			for(uint8_t i = 4; i < 6; i++) {
 8003348:	2304      	movs	r3, #4
 800334a:	f887 3224 	strb.w	r3, [r7, #548]	@ 0x224
 800334e:	e017      	b.n	8003380 <balance_cycle+0x133c>
				if(sideA_receptionRegisterCFGA[i] != sideA_payloadRegisterA_oddCells[i]) {
 8003350:	f897 3224 	ldrb.w	r3, [r7, #548]	@ 0x224
 8003354:	f507 7218 	add.w	r2, r7, #608	@ 0x260
 8003358:	f5a2 72fe 	sub.w	r2, r2, #508	@ 0x1fc
 800335c:	5cd2      	ldrb	r2, [r2, r3]
 800335e:	f897 3224 	ldrb.w	r3, [r7, #548]	@ 0x224
 8003362:	f507 7118 	add.w	r1, r7, #608	@ 0x260
 8003366:	f5a1 71ce 	sub.w	r1, r1, #412	@ 0x19c
 800336a:	5ccb      	ldrb	r3, [r1, r3]
 800336c:	429a      	cmp	r2, r3
 800336e:	d002      	beq.n	8003376 <balance_cycle+0x1332>
					sideA_matchFlag = 0;
 8003370:	2300      	movs	r3, #0
 8003372:	f887 3226 	strb.w	r3, [r7, #550]	@ 0x226
			for(uint8_t i = 4; i < 6; i++) {
 8003376:	f897 3224 	ldrb.w	r3, [r7, #548]	@ 0x224
 800337a:	3301      	adds	r3, #1
 800337c:	f887 3224 	strb.w	r3, [r7, #548]	@ 0x224
 8003380:	f897 3224 	ldrb.w	r3, [r7, #548]	@ 0x224
 8003384:	2b05      	cmp	r3, #5
 8003386:	d9e3      	bls.n	8003350 <balance_cycle+0x130c>
				}
			}

			for(uint8_t i = 4; i < 6; i++) {
 8003388:	2304      	movs	r3, #4
 800338a:	f887 3223 	strb.w	r3, [r7, #547]	@ 0x223
 800338e:	e017      	b.n	80033c0 <balance_cycle+0x137c>
				if(sideB_receptionRegisterCFGA[i] != sideB_payloadRegisterA_oddCells[i]) {
 8003390:	f897 3223 	ldrb.w	r3, [r7, #547]	@ 0x223
 8003394:	f507 7218 	add.w	r2, r7, #608	@ 0x260
 8003398:	f5a2 7201 	sub.w	r2, r2, #516	@ 0x204
 800339c:	5cd2      	ldrb	r2, [r2, r3]
 800339e:	f897 3223 	ldrb.w	r3, [r7, #547]	@ 0x223
 80033a2:	f507 7118 	add.w	r1, r7, #608	@ 0x260
 80033a6:	f5a1 71d2 	sub.w	r1, r1, #420	@ 0x1a4
 80033aa:	5ccb      	ldrb	r3, [r1, r3]
 80033ac:	429a      	cmp	r2, r3
 80033ae:	d002      	beq.n	80033b6 <balance_cycle+0x1372>
					sideB_matchFlag = 0;
 80033b0:	2300      	movs	r3, #0
 80033b2:	f887 3225 	strb.w	r3, [r7, #549]	@ 0x225
			for(uint8_t i = 4; i < 6; i++) {
 80033b6:	f897 3223 	ldrb.w	r3, [r7, #547]	@ 0x223
 80033ba:	3301      	adds	r3, #1
 80033bc:	f887 3223 	strb.w	r3, [r7, #547]	@ 0x223
 80033c0:	f897 3223 	ldrb.w	r3, [r7, #547]	@ 0x223
 80033c4:	2b05      	cmp	r3, #5
 80033c6:	d9e3      	bls.n	8003390 <balance_cycle+0x134c>
				}
			}

			if(sideA_matchFlag) { sideA_attempts = 13; }
 80033c8:	f897 3226 	ldrb.w	r3, [r7, #550]	@ 0x226
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d003      	beq.n	80033d8 <balance_cycle+0x1394>
 80033d0:	230d      	movs	r3, #13
 80033d2:	f887 322e 	strb.w	r3, [r7, #558]	@ 0x22e
 80033d6:	e00d      	b.n	80033f4 <balance_cycle+0x13b0>

			else {
				sideA_attempts++;
 80033d8:	f897 322e 	ldrb.w	r3, [r7, #558]	@ 0x22e
 80033dc:	3301      	adds	r3, #1
 80033de:	f887 322e 	strb.w	r3, [r7, #558]	@ 0x22e
				sideA_subAttempts = 0;
 80033e2:	2300      	movs	r3, #0
 80033e4:	f887 322c 	strb.w	r3, [r7, #556]	@ 0x22c
				sideB_subAttempts = 0;
 80033e8:	2300      	movs	r3, #0
 80033ea:	f887 322b 	strb.w	r3, [r7, #555]	@ 0x22b
				wait(1);
 80033ee:	2001      	movs	r0, #1
 80033f0:	f007 fa08 	bl	800a804 <wait>
			}

			if(sideB_matchFlag) { sideB_attempts = 13; }
 80033f4:	f897 3225 	ldrb.w	r3, [r7, #549]	@ 0x225
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d003      	beq.n	8003404 <balance_cycle+0x13c0>
 80033fc:	230d      	movs	r3, #13
 80033fe:	f887 322d 	strb.w	r3, [r7, #557]	@ 0x22d
 8003402:	e00d      	b.n	8003420 <balance_cycle+0x13dc>

			else {
				sideB_attempts++;
 8003404:	f897 322d 	ldrb.w	r3, [r7, #557]	@ 0x22d
 8003408:	3301      	adds	r3, #1
 800340a:	f887 322d 	strb.w	r3, [r7, #557]	@ 0x22d
				sideA_subAttempts = 0;
 800340e:	2300      	movs	r3, #0
 8003410:	f887 322c 	strb.w	r3, [r7, #556]	@ 0x22c
				sideB_subAttempts = 0;
 8003414:	2300      	movs	r3, #0
 8003416:	f887 322b 	strb.w	r3, [r7, #555]	@ 0x22b
				wait(1);
 800341a:	2001      	movs	r0, #1
 800341c:	f007 f9f2 	bl	800a804 <wait>
		while(sideA_attempts < ATTEMPT_LIMIT || sideB_attempts < ATTEMPT_LIMIT) {
 8003420:	f897 322e 	ldrb.w	r3, [r7, #558]	@ 0x22e
 8003424:	2b09      	cmp	r3, #9
 8003426:	f67f af6d 	bls.w	8003304 <balance_cycle+0x12c0>
 800342a:	f897 322d 	ldrb.w	r3, [r7, #557]	@ 0x22d
 800342e:	2b09      	cmp	r3, #9
 8003430:	f67f af68 	bls.w	8003304 <balance_cycle+0x12c0>
			}
		}
		if(sideA_attempts != 13) { error_loop(ERROR_BALANCE_INITIATION, 0, 0, SIDE_A); }
 8003434:	f897 322e 	ldrb.w	r3, [r7, #558]	@ 0x22e
 8003438:	2b0d      	cmp	r3, #13
 800343a:	d005      	beq.n	8003448 <balance_cycle+0x1404>
 800343c:	2301      	movs	r3, #1
 800343e:	2200      	movs	r2, #0
 8003440:	2100      	movs	r1, #0
 8003442:	2055      	movs	r0, #85	@ 0x55
 8003444:	f001 fcd8 	bl	8004df8 <error_loop>

		if(sideB_attempts != 13) { error_loop(ERROR_BALANCE_INITIATION, 0, 0, SIDE_B); }
 8003448:	f897 322d 	ldrb.w	r3, [r7, #557]	@ 0x22d
 800344c:	2b0d      	cmp	r3, #13
 800344e:	d005      	beq.n	800345c <balance_cycle+0x1418>
 8003450:	2300      	movs	r3, #0
 8003452:	2200      	movs	r2, #0
 8003454:	2100      	movs	r1, #0
 8003456:	2055      	movs	r0, #85	@ 0x55
 8003458:	f001 fcce 	bl	8004df8 <error_loop>

		config_balance_flags(balanceMsg, oddCells, oddCellCount);
 800345c:	f897 225c 	ldrb.w	r2, [r7, #604]	@ 0x25c
 8003460:	f107 03f0 	add.w	r3, r7, #240	@ 0xf0
 8003464:	f8d7 1208 	ldr.w	r1, [r7, #520]	@ 0x208
 8003468:	4618      	mov	r0, r3
 800346a:	f000 fbc5 	bl	8003bf8 <config_balance_flags>
		balance_led_on();
 800346e:	f007 fab1 	bl	800a9d4 <balance_led_on>
	}

	balanceCounter = 0;
 8003472:	4bc4      	ldr	r3, [pc, #784]	@ (8003784 <balance_cycle+0x1740>)
 8003474:	2200      	movs	r2, #0
 8003476:	601a      	str	r2, [r3, #0]
	measureCounter = 0;
 8003478:	4bc3      	ldr	r3, [pc, #780]	@ (8003788 <balance_cycle+0x1744>)
 800347a:	2200      	movs	r2, #0
 800347c:	601a      	str	r2, [r3, #0]
	transmitCounter = 0;
 800347e:	4bc3      	ldr	r3, [pc, #780]	@ (800378c <balance_cycle+0x1748>)
 8003480:	2200      	movs	r2, #0
 8003482:	601a      	str	r2, [r3, #0]
	while(oddCellsFlag) {
 8003484:	e1d2      	b.n	800382c <balance_cycle+0x17e8>
		if(measureCounter > MEASURE_INTERVAL) {
 8003486:	4bc0      	ldr	r3, [pc, #768]	@ (8003788 <balance_cycle+0x1744>)
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	2b64      	cmp	r3, #100	@ 0x64
 800348c:	f240 80f4 	bls.w	8003678 <balance_cycle+0x1634>
			temperature_sense(moduleTemperatures);
 8003490:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8003494:	4618      	mov	r0, r3
 8003496:	f007 fc23 	bl	800ace0 <temperature_sense>
			resistor_temperature_sense(pcbTemperatures);
 800349a:	f107 03f8 	add.w	r3, r7, #248	@ 0xf8
 800349e:	4618      	mov	r0, r3
 80034a0:	f7fe f95c 	bl	800175c <resistor_temperature_sense>

			maxResistorTemperature = 0;
 80034a4:	f04f 0300 	mov.w	r3, #0
 80034a8:	f8c7 3244 	str.w	r3, [r7, #580]	@ 0x244
			for(uint8_t i = 0; i < PCB_THERM_QTY; i++) {
 80034ac:	2300      	movs	r3, #0
 80034ae:	f887 3222 	strb.w	r3, [r7, #546]	@ 0x222
 80034b2:	e02f      	b.n	8003514 <balance_cycle+0x14d0>
				if(!isnan(pcbTemperatures[i])) {
 80034b4:	f897 3222 	ldrb.w	r3, [r7, #546]	@ 0x222
 80034b8:	f507 7218 	add.w	r2, r7, #608	@ 0x260
 80034bc:	f5a2 72b4 	sub.w	r2, r2, #360	@ 0x168
 80034c0:	009b      	lsls	r3, r3, #2
 80034c2:	4413      	add	r3, r2
 80034c4:	edd3 7a00 	vldr	s15, [r3]
 80034c8:	eef4 7a67 	vcmp.f32	s15, s15
 80034cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034d0:	d61b      	bvs.n	800350a <balance_cycle+0x14c6>
					if(pcbTemperatures[i] > maxResistorTemperature) {
 80034d2:	f897 3222 	ldrb.w	r3, [r7, #546]	@ 0x222
 80034d6:	f507 7218 	add.w	r2, r7, #608	@ 0x260
 80034da:	f5a2 72b4 	sub.w	r2, r2, #360	@ 0x168
 80034de:	009b      	lsls	r3, r3, #2
 80034e0:	4413      	add	r3, r2
 80034e2:	edd3 7a00 	vldr	s15, [r3]
 80034e6:	ed97 7a91 	vldr	s14, [r7, #580]	@ 0x244
 80034ea:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80034ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034f2:	d50a      	bpl.n	800350a <balance_cycle+0x14c6>
						maxResistorTemperature = pcbTemperatures[i];
 80034f4:	f897 3222 	ldrb.w	r3, [r7, #546]	@ 0x222
 80034f8:	f507 7218 	add.w	r2, r7, #608	@ 0x260
 80034fc:	f5a2 72b4 	sub.w	r2, r2, #360	@ 0x168
 8003500:	009b      	lsls	r3, r3, #2
 8003502:	4413      	add	r3, r2
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f8c7 3244 	str.w	r3, [r7, #580]	@ 0x244
			for(uint8_t i = 0; i < PCB_THERM_QTY; i++) {
 800350a:	f897 3222 	ldrb.w	r3, [r7, #546]	@ 0x222
 800350e:	3301      	adds	r3, #1
 8003510:	f887 3222 	strb.w	r3, [r7, #546]	@ 0x222
 8003514:	f897 3222 	ldrb.w	r3, [r7, #546]	@ 0x222
 8003518:	2b11      	cmp	r3, #17
 800351a:	d9cb      	bls.n	80034b4 <balance_cycle+0x1470>
					}
				}
			}
			intMaxResistorTemperature = (uint16_t)(maxResistorTemperature*tempScale);
 800351c:	ed97 7a91 	vldr	s14, [r7, #580]	@ 0x244
 8003520:	edd7 7a79 	vldr	s15, [r7, #484]	@ 0x1e4
 8003524:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003528:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800352c:	ee17 3a90 	vmov	r3, s15
 8003530:	f8a7 31d6 	strh.w	r3, [r7, #470]	@ 0x1d6
			balanceMsg[2] = (uint8_t)(intMaxResistorTemperature & 0xFF);
 8003534:	f8b7 31d6 	ldrh.w	r3, [r7, #470]	@ 0x1d6
 8003538:	b2da      	uxtb	r2, r3
 800353a:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 800353e:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8003542:	709a      	strb	r2, [r3, #2]
			balanceMsg[3] = (uint8_t)((intMaxResistorTemperature >> 8) & 0xFF);
 8003544:	f8b7 31d6 	ldrh.w	r3, [r7, #470]	@ 0x1d6
 8003548:	0a1b      	lsrs	r3, r3, #8
 800354a:	b29b      	uxth	r3, r3
 800354c:	b2da      	uxtb	r2, r3
 800354e:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 8003552:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8003556:	70da      	strb	r2, [r3, #3]

			if(maxResistorTemperature > HOT_LED_THRESHOLD) { hot_led_on(); }
 8003558:	edd7 7a91 	vldr	s15, [r7, #580]	@ 0x244
 800355c:	ed9f 7a8c 	vldr	s14, [pc, #560]	@ 8003790 <balance_cycle+0x174c>
 8003560:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003564:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003568:	dd02      	ble.n	8003570 <balance_cycle+0x152c>
 800356a:	f007 fa4b 	bl	800aa04 <hot_led_on>
 800356e:	e001      	b.n	8003574 <balance_cycle+0x1530>

			else { hot_led_off(); }
 8003570:	f007 fa52 	bl	800aa18 <hot_led_off>

			if(maxResistorTemperature > RESISTOR_TEMPERATURE_LIMIT) {
 8003574:	edd7 7a91 	vldr	s15, [r7, #580]	@ 0x244
 8003578:	ed9f 7a86 	vldr	s14, [pc, #536]	@ 8003794 <balance_cycle+0x1750>
 800357c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003580:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003584:	dd04      	ble.n	8003590 <balance_cycle+0x154c>
				force_refup();
 8003586:	f006 fb53 	bl	8009c30 <force_refup>
				oddCellsFlag = 0;
 800358a:	2300      	movs	r3, #0
 800358c:	f887 325e 	strb.w	r3, [r7, #606]	@ 0x25e
			}

			for(uint8_t i = 0; i < MODULE_THERM_QTY; i++) {
 8003590:	2300      	movs	r3, #0
 8003592:	f887 3221 	strb.w	r3, [r7, #545]	@ 0x221
 8003596:	e028      	b.n	80035ea <balance_cycle+0x15a6>
				if(moduleTemperatures[i] > MAX_TEMPERATURE) {
 8003598:	f897 3221 	ldrb.w	r3, [r7, #545]	@ 0x221
 800359c:	f507 7218 	add.w	r2, r7, #608	@ 0x260
 80035a0:	f5a2 7290 	sub.w	r2, r2, #288	@ 0x120
 80035a4:	009b      	lsls	r3, r3, #2
 80035a6:	4413      	add	r3, r2
 80035a8:	edd3 7a00 	vldr	s15, [r3]
 80035ac:	ed9f 7a7a 	vldr	s14, [pc, #488]	@ 8003798 <balance_cycle+0x1754>
 80035b0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80035b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80035b8:	dd12      	ble.n	80035e0 <balance_cycle+0x159c>
					overheatFlag = 1;
 80035ba:	2301      	movs	r3, #1
 80035bc:	f887 3243 	strb.w	r3, [r7, #579]	@ 0x243
					faultThermistors[faultThermistorQty] = i + 1;
 80035c0:	f897 3241 	ldrb.w	r3, [r7, #577]	@ 0x241
 80035c4:	f897 2221 	ldrb.w	r2, [r7, #545]	@ 0x221
 80035c8:	3201      	adds	r2, #1
 80035ca:	b2d1      	uxtb	r1, r2
 80035cc:	f507 7218 	add.w	r2, r7, #608	@ 0x260
 80035d0:	f5a2 72c2 	sub.w	r2, r2, #388	@ 0x184
 80035d4:	54d1      	strb	r1, [r2, r3]
					faultThermistorQty++;
 80035d6:	f897 3241 	ldrb.w	r3, [r7, #577]	@ 0x241
 80035da:	3301      	adds	r3, #1
 80035dc:	f887 3241 	strb.w	r3, [r7, #577]	@ 0x241
			for(uint8_t i = 0; i < MODULE_THERM_QTY; i++) {
 80035e0:	f897 3221 	ldrb.w	r3, [r7, #545]	@ 0x221
 80035e4:	3301      	adds	r3, #1
 80035e6:	f887 3221 	strb.w	r3, [r7, #545]	@ 0x221
 80035ea:	f897 3221 	ldrb.w	r3, [r7, #545]	@ 0x221
 80035ee:	2b11      	cmp	r3, #17
 80035f0:	d9d2      	bls.n	8003598 <balance_cycle+0x1554>
				}
			}

			if(overheatFlag) { overheatCount++; }
 80035f2:	f897 3243 	ldrb.w	r3, [r7, #579]	@ 0x243
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d005      	beq.n	8003606 <balance_cycle+0x15c2>
 80035fa:	f897 3242 	ldrb.w	r3, [r7, #578]	@ 0x242
 80035fe:	3301      	adds	r3, #1
 8003600:	f887 3242 	strb.w	r3, [r7, #578]	@ 0x242
 8003604:	e020      	b.n	8003648 <balance_cycle+0x1604>

			else {
				if(overheatCount > 0) { overheatCount--; }
 8003606:	f897 3242 	ldrb.w	r3, [r7, #578]	@ 0x242
 800360a:	2b00      	cmp	r3, #0
 800360c:	d004      	beq.n	8003618 <balance_cycle+0x15d4>
 800360e:	f897 3242 	ldrb.w	r3, [r7, #578]	@ 0x242
 8003612:	3b01      	subs	r3, #1
 8003614:	f887 3242 	strb.w	r3, [r7, #578]	@ 0x242

				for(uint8_t i = 0; i < MODULE_THERM_QTY; i++) { faultThermistors[i] = 0; }
 8003618:	2300      	movs	r3, #0
 800361a:	f887 3220 	strb.w	r3, [r7, #544]	@ 0x220
 800361e:	e00c      	b.n	800363a <balance_cycle+0x15f6>
 8003620:	f897 3220 	ldrb.w	r3, [r7, #544]	@ 0x220
 8003624:	f507 7218 	add.w	r2, r7, #608	@ 0x260
 8003628:	f5a2 72c2 	sub.w	r2, r2, #388	@ 0x184
 800362c:	2100      	movs	r1, #0
 800362e:	54d1      	strb	r1, [r2, r3]
 8003630:	f897 3220 	ldrb.w	r3, [r7, #544]	@ 0x220
 8003634:	3301      	adds	r3, #1
 8003636:	f887 3220 	strb.w	r3, [r7, #544]	@ 0x220
 800363a:	f897 3220 	ldrb.w	r3, [r7, #544]	@ 0x220
 800363e:	2b11      	cmp	r3, #17
 8003640:	d9ee      	bls.n	8003620 <balance_cycle+0x15dc>

				faultThermistorQty = 0;
 8003642:	2300      	movs	r3, #0
 8003644:	f887 3241 	strb.w	r3, [r7, #577]	@ 0x241
			}
			// MODULE OVERHEAT FAULT
			if(overheatCount > ATTEMPT_LIMIT) {
 8003648:	f897 3242 	ldrb.w	r3, [r7, #578]	@ 0x242
 800364c:	2b0a      	cmp	r3, #10
 800364e:	d90d      	bls.n	800366c <balance_cycle+0x1628>
				force_mute();
 8003650:	f006 fb70 	bl	8009d34 <force_mute>
				wait(1);
 8003654:	2001      	movs	r0, #1
 8003656:	f007 f8d5 	bl	800a804 <wait>
				force_refup();
 800365a:	f006 fae9 	bl	8009c30 <force_refup>

				error_loop(ERROR_OVERHEAT, faultThermistors, 0, NOT_APPLICABLE);
 800365e:	f107 01dc 	add.w	r1, r7, #220	@ 0xdc
 8003662:	2303      	movs	r3, #3
 8003664:	2200      	movs	r2, #0
 8003666:	2045      	movs	r0, #69	@ 0x45
 8003668:	f001 fbc6 	bl	8004df8 <error_loop>
			}
			overheatFlag = 0;
 800366c:	2300      	movs	r3, #0
 800366e:	f887 3243 	strb.w	r3, [r7, #579]	@ 0x243

			measureCounter = 0;
 8003672:	4b45      	ldr	r3, [pc, #276]	@ (8003788 <balance_cycle+0x1744>)
 8003674:	2200      	movs	r2, #0
 8003676:	601a      	str	r2, [r3, #0]
		}

		if(transmitCounter > transmissionDelay) {
 8003678:	4b48      	ldr	r3, [pc, #288]	@ (800379c <balance_cycle+0x1758>)
 800367a:	881b      	ldrh	r3, [r3, #0]
 800367c:	461a      	mov	r2, r3
 800367e:	4b43      	ldr	r3, [pc, #268]	@ (800378c <balance_cycle+0x1748>)
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	429a      	cmp	r2, r3
 8003684:	d211      	bcs.n	80036aa <balance_cycle+0x1666>
			transmit_balance(balanceMsg);
 8003686:	f107 03f0 	add.w	r3, r7, #240	@ 0xf0
 800368a:	4618      	mov	r0, r3
 800368c:	f001 feae 	bl	80053ec <transmit_balance>
			transmit_voltages(cellVoltages);
 8003690:	f507 73c4 	add.w	r3, r7, #392	@ 0x188
 8003694:	4618      	mov	r0, r3
 8003696:	f001 ff7d 	bl	8005594 <transmit_voltages>
			transmit_temperatures(moduleTemperatures);
 800369a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800369e:	4618      	mov	r0, r3
 80036a0:	f002 f948 	bl	8005934 <transmit_temperatures>

			transmitCounter = 0;
 80036a4:	4b39      	ldr	r3, [pc, #228]	@ (800378c <balance_cycle+0x1748>)
 80036a6:	2200      	movs	r2, #0
 80036a8:	601a      	str	r2, [r3, #0]
		}

		if(balanceCounter > BALANCE_CYCLE_DURATION) {
 80036aa:	4b36      	ldr	r3, [pc, #216]	@ (8003784 <balance_cycle+0x1740>)
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f64e 2260 	movw	r2, #60000	@ 0xea60
 80036b2:	4293      	cmp	r3, r2
 80036b4:	d904      	bls.n	80036c0 <balance_cycle+0x167c>
			force_refup();
 80036b6:	f006 fabb 	bl	8009c30 <force_refup>
			oddCellsFlag = 0;
 80036ba:	2300      	movs	r3, #0
 80036bc:	f887 325e 	strb.w	r3, [r7, #606]	@ 0x25e
		}

		if(HAL_CAN_GetRxFifoFillLevel(&hcan1, CAN_RX_FIFO0) > 0) {
 80036c0:	2100      	movs	r1, #0
 80036c2:	4837      	ldr	r0, [pc, #220]	@ (80037a0 <balance_cycle+0x175c>)
 80036c4:	f009 fc3b 	bl	800cf3e <HAL_CAN_GetRxFifoFillLevel>
 80036c8:	4603      	mov	r3, r0
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d04e      	beq.n	800376c <balance_cycle+0x1728>
			uint8_t attempts = 0;
 80036ce:	2300      	movs	r3, #0
 80036d0:	f887 321f 	strb.w	r3, [r7, #543]	@ 0x21f

			while(attempts < ATTEMPT_LIMIT) {
 80036d4:	e03c      	b.n	8003750 <balance_cycle+0x170c>
				if(HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &RxHeader, RxData) == HAL_OK) {
 80036d6:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 80036da:	f507 72dc 	add.w	r2, r7, #440	@ 0x1b8
 80036de:	2100      	movs	r1, #0
 80036e0:	482f      	ldr	r0, [pc, #188]	@ (80037a0 <balance_cycle+0x175c>)
 80036e2:	f009 fb0a 	bl	800ccfa <HAL_CAN_GetRxMessage>
 80036e6:	4603      	mov	r3, r0
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d129      	bne.n	8003740 <balance_cycle+0x16fc>

					if(RxHeader.StdId == CAN_FAULT_ID) {
 80036ec:	f8d7 31b8 	ldr.w	r3, [r7, #440]	@ 0x1b8
 80036f0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80036f4:	d10b      	bne.n	800370e <balance_cycle+0x16ca>
						force_refup();
 80036f6:	f006 fa9b 	bl	8009c30 <force_refup>
						wait(1);
 80036fa:	2001      	movs	r0, #1
 80036fc:	f007 f882 	bl	800a804 <wait>
						force_mute();
 8003700:	f006 fb18 	bl	8009d34 <force_mute>
						wait(1);
 8003704:	2001      	movs	r0, #1
 8003706:	f007 f87d 	bl	800a804 <wait>
						silent_error_loop();
 800370a:	f001 fb2d 	bl	8004d68 <silent_error_loop>
					}

					if(RxHeader.StdId == CAN_STOP_BALANCE_ID) {
 800370e:	f8d7 31b8 	ldr.w	r3, [r7, #440]	@ 0x1b8
 8003712:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8003716:	4293      	cmp	r3, r2
 8003718:	d10e      	bne.n	8003738 <balance_cycle+0x16f4>
						force_refup();
 800371a:	f006 fa89 	bl	8009c30 <force_refup>
						wait(1);
 800371e:	2001      	movs	r0, #1
 8003720:	f007 f870 	bl	800a804 <wait>
						*haltBalanceFlag = 0;
 8003724:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 8003728:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	2200      	movs	r2, #0
 8003730:	701a      	strb	r2, [r3, #0]
						oddCellsFlag = 0;
 8003732:	2300      	movs	r3, #0
 8003734:	f887 325e 	strb.w	r3, [r7, #606]	@ 0x25e
					}

					attempts = 13;
 8003738:	230d      	movs	r3, #13
 800373a:	f887 321f 	strb.w	r3, [r7, #543]	@ 0x21f
 800373e:	e007      	b.n	8003750 <balance_cycle+0x170c>
				}
				else {
					attempts++;
 8003740:	f897 321f 	ldrb.w	r3, [r7, #543]	@ 0x21f
 8003744:	3301      	adds	r3, #1
 8003746:	f887 321f 	strb.w	r3, [r7, #543]	@ 0x21f
					wait(5);
 800374a:	2005      	movs	r0, #5
 800374c:	f007 f85a 	bl	800a804 <wait>
			while(attempts < ATTEMPT_LIMIT) {
 8003750:	f897 321f 	ldrb.w	r3, [r7, #543]	@ 0x21f
 8003754:	2b09      	cmp	r3, #9
 8003756:	d9be      	bls.n	80036d6 <balance_cycle+0x1692>
				}
			}
			if(attempts != 13) { error_loop(ERROR_CAN_READ, 0, 0, MCU_FAULT); }
 8003758:	f897 321f 	ldrb.w	r3, [r7, #543]	@ 0x21f
 800375c:	2b0d      	cmp	r3, #13
 800375e:	d005      	beq.n	800376c <balance_cycle+0x1728>
 8003760:	2302      	movs	r3, #2
 8003762:	2200      	movs	r2, #0
 8003764:	2100      	movs	r1, #0
 8003766:	2057      	movs	r0, #87	@ 0x57
 8003768:	f001 fb46 	bl	8004df8 <error_loop>
		}

		if(HAL_CAN_GetRxFifoFillLevel(&hcan1, CAN_RX_FIFO1) > 0) {
 800376c:	2101      	movs	r1, #1
 800376e:	480c      	ldr	r0, [pc, #48]	@ (80037a0 <balance_cycle+0x175c>)
 8003770:	f009 fbe5 	bl	800cf3e <HAL_CAN_GetRxFifoFillLevel>
 8003774:	4603      	mov	r3, r0
 8003776:	2b00      	cmp	r3, #0
 8003778:	d055      	beq.n	8003826 <balance_cycle+0x17e2>
			uint8_t attempts = 0;
 800377a:	2300      	movs	r3, #0
 800377c:	f887 321e 	strb.w	r3, [r7, #542]	@ 0x21e

			while(attempts < ATTEMPT_LIMIT) {
 8003780:	e043      	b.n	800380a <balance_cycle+0x17c6>
 8003782:	bf00      	nop
 8003784:	200003f0 	.word	0x200003f0
 8003788:	200003ec 	.word	0x200003ec
 800378c:	200003e8 	.word	0x200003e8
 8003790:	42340000 	.word	0x42340000
 8003794:	42e60000 	.word	0x42e60000
 8003798:	42700000 	.word	0x42700000
 800379c:	200003e6 	.word	0x200003e6
 80037a0:	200000c4 	.word	0x200000c4
				if(HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO1, &RxHeader, RxData) == HAL_OK) {
 80037a4:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 80037a8:	f507 72dc 	add.w	r2, r7, #440	@ 0x1b8
 80037ac:	2101      	movs	r1, #1
 80037ae:	48c9      	ldr	r0, [pc, #804]	@ (8003ad4 <balance_cycle+0x1a90>)
 80037b0:	f009 faa3 	bl	800ccfa <HAL_CAN_GetRxMessage>
 80037b4:	4603      	mov	r3, r0
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d11f      	bne.n	80037fa <balance_cycle+0x17b6>
					if(RxHeader.StdId == CAN_PACK_STATUS_ID) {
 80037ba:	f8d7 31b8 	ldr.w	r3, [r7, #440]	@ 0x1b8
 80037be:	f5b3 6f84 	cmp.w	r3, #1056	@ 0x420
 80037c2:	d116      	bne.n	80037f2 <balance_cycle+0x17ae>
						if(RxData[PACK_STATUS_BYTE_POSITION] != PACK_STATUS_IDLE || RxData[PACK_STATUS_BYTE_POSITION] != PACK_STATUS_FAULT) {
 80037c4:	f897 31b5 	ldrb.w	r3, [r7, #437]	@ 0x1b5
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d103      	bne.n	80037d4 <balance_cycle+0x1790>
 80037cc:	f897 31b5 	ldrb.w	r3, [r7, #437]	@ 0x1b5
 80037d0:	2b06      	cmp	r3, #6
 80037d2:	d00e      	beq.n	80037f2 <balance_cycle+0x17ae>
							force_refup();
 80037d4:	f006 fa2c 	bl	8009c30 <force_refup>
							wait(1);
 80037d8:	2001      	movs	r0, #1
 80037da:	f007 f813 	bl	800a804 <wait>
							*haltBalanceFlag = 0;
 80037de:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 80037e2:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	2200      	movs	r2, #0
 80037ea:	701a      	strb	r2, [r3, #0]
							oddCellsFlag = 0;
 80037ec:	2300      	movs	r3, #0
 80037ee:	f887 325e 	strb.w	r3, [r7, #606]	@ 0x25e
						}
					}
					attempts = 13;
 80037f2:	230d      	movs	r3, #13
 80037f4:	f887 321e 	strb.w	r3, [r7, #542]	@ 0x21e
 80037f8:	e007      	b.n	800380a <balance_cycle+0x17c6>
				}
				else {
					attempts++;
 80037fa:	f897 321e 	ldrb.w	r3, [r7, #542]	@ 0x21e
 80037fe:	3301      	adds	r3, #1
 8003800:	f887 321e 	strb.w	r3, [r7, #542]	@ 0x21e
					wait(5);
 8003804:	2005      	movs	r0, #5
 8003806:	f006 fffd 	bl	800a804 <wait>
			while(attempts < ATTEMPT_LIMIT) {
 800380a:	f897 321e 	ldrb.w	r3, [r7, #542]	@ 0x21e
 800380e:	2b09      	cmp	r3, #9
 8003810:	d9c8      	bls.n	80037a4 <balance_cycle+0x1760>
				}
			}
			if(attempts != 13) { error_loop(ERROR_CAN_READ, 0, 0, MCU_FAULT); }
 8003812:	f897 321e 	ldrb.w	r3, [r7, #542]	@ 0x21e
 8003816:	2b0d      	cmp	r3, #13
 8003818:	d005      	beq.n	8003826 <balance_cycle+0x17e2>
 800381a:	2302      	movs	r3, #2
 800381c:	2200      	movs	r2, #0
 800381e:	2100      	movs	r1, #0
 8003820:	2057      	movs	r0, #87	@ 0x57
 8003822:	f001 fae9 	bl	8004df8 <error_loop>
		}

		wait(1);
 8003826:	2001      	movs	r0, #1
 8003828:	f006 ffec 	bl	800a804 <wait>
	while(oddCellsFlag) {
 800382c:	f897 325e 	ldrb.w	r3, [r7, #606]	@ 0x25e
 8003830:	2b00      	cmp	r3, #0
 8003832:	f47f ae28 	bne.w	8003486 <balance_cycle+0x1442>
	}

	force_mute();
 8003836:	f006 fa7d 	bl	8009d34 <force_mute>
	balance_led_off();
 800383a:	f007 f8d7 	bl	800a9ec <balance_led_off>

	// Set all cell balancing flags to zero
	for(uint8_t i = 4; i < 7; i++) { balanceMsg[i] = 0; }
 800383e:	2304      	movs	r3, #4
 8003840:	f887 321d 	strb.w	r3, [r7, #541]	@ 0x21d
 8003844:	e00c      	b.n	8003860 <balance_cycle+0x181c>
 8003846:	f897 321d 	ldrb.w	r3, [r7, #541]	@ 0x21d
 800384a:	f507 7218 	add.w	r2, r7, #608	@ 0x260
 800384e:	f5a2 72b8 	sub.w	r2, r2, #368	@ 0x170
 8003852:	2100      	movs	r1, #0
 8003854:	54d1      	strb	r1, [r2, r3]
 8003856:	f897 321d 	ldrb.w	r3, [r7, #541]	@ 0x21d
 800385a:	3301      	adds	r3, #1
 800385c:	f887 321d 	strb.w	r3, [r7, #541]	@ 0x21d
 8003860:	f897 321d 	ldrb.w	r3, [r7, #541]	@ 0x21d
 8003864:	2b06      	cmp	r3, #6
 8003866:	d9ee      	bls.n	8003846 <balance_cycle+0x1802>

	balanceCounter = 0;
 8003868:	4b9b      	ldr	r3, [pc, #620]	@ (8003ad8 <balance_cycle+0x1a94>)
 800386a:	2200      	movs	r2, #0
 800386c:	601a      	str	r2, [r3, #0]
	measureCounter = 0;
 800386e:	4b9b      	ldr	r3, [pc, #620]	@ (8003adc <balance_cycle+0x1a98>)
 8003870:	2200      	movs	r2, #0
 8003872:	601a      	str	r2, [r3, #0]
	transmitCounter = 0;
 8003874:	4b9a      	ldr	r3, [pc, #616]	@ (8003ae0 <balance_cycle+0x1a9c>)
 8003876:	2200      	movs	r2, #0
 8003878:	601a      	str	r2, [r3, #0]
	while(balanceCounter < POST_BALANCE_DELAY && *haltBalanceFlag == 73) {
 800387a:	e196      	b.n	8003baa <balance_cycle+0x1b66>
		if(measureCounter > MEASURE_INTERVAL) {
 800387c:	4b97      	ldr	r3, [pc, #604]	@ (8003adc <balance_cycle+0x1a98>)
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	2b64      	cmp	r3, #100	@ 0x64
 8003882:	f240 80df 	bls.w	8003a44 <balance_cycle+0x1a00>
			temperature_sense(moduleTemperatures);
 8003886:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800388a:	4618      	mov	r0, r3
 800388c:	f007 fa28 	bl	800ace0 <temperature_sense>
			resistor_temperature_sense(pcbTemperatures);
 8003890:	f107 03f8 	add.w	r3, r7, #248	@ 0xf8
 8003894:	4618      	mov	r0, r3
 8003896:	f7fd ff61 	bl	800175c <resistor_temperature_sense>

			maxResistorTemperature = 0;
 800389a:	f04f 0300 	mov.w	r3, #0
 800389e:	f8c7 3244 	str.w	r3, [r7, #580]	@ 0x244
			for(uint8_t i = 0; i < PCB_THERM_QTY; i++) {
 80038a2:	2300      	movs	r3, #0
 80038a4:	f887 321c 	strb.w	r3, [r7, #540]	@ 0x21c
 80038a8:	e02f      	b.n	800390a <balance_cycle+0x18c6>
				if(!isnan(pcbTemperatures[i])) {
 80038aa:	f897 321c 	ldrb.w	r3, [r7, #540]	@ 0x21c
 80038ae:	f507 7218 	add.w	r2, r7, #608	@ 0x260
 80038b2:	f5a2 72b4 	sub.w	r2, r2, #360	@ 0x168
 80038b6:	009b      	lsls	r3, r3, #2
 80038b8:	4413      	add	r3, r2
 80038ba:	edd3 7a00 	vldr	s15, [r3]
 80038be:	eef4 7a67 	vcmp.f32	s15, s15
 80038c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80038c6:	d61b      	bvs.n	8003900 <balance_cycle+0x18bc>
					if(pcbTemperatures[i] > maxResistorTemperature) {
 80038c8:	f897 321c 	ldrb.w	r3, [r7, #540]	@ 0x21c
 80038cc:	f507 7218 	add.w	r2, r7, #608	@ 0x260
 80038d0:	f5a2 72b4 	sub.w	r2, r2, #360	@ 0x168
 80038d4:	009b      	lsls	r3, r3, #2
 80038d6:	4413      	add	r3, r2
 80038d8:	edd3 7a00 	vldr	s15, [r3]
 80038dc:	ed97 7a91 	vldr	s14, [r7, #580]	@ 0x244
 80038e0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80038e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80038e8:	d50a      	bpl.n	8003900 <balance_cycle+0x18bc>
						maxResistorTemperature = pcbTemperatures[i];
 80038ea:	f897 321c 	ldrb.w	r3, [r7, #540]	@ 0x21c
 80038ee:	f507 7218 	add.w	r2, r7, #608	@ 0x260
 80038f2:	f5a2 72b4 	sub.w	r2, r2, #360	@ 0x168
 80038f6:	009b      	lsls	r3, r3, #2
 80038f8:	4413      	add	r3, r2
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f8c7 3244 	str.w	r3, [r7, #580]	@ 0x244
			for(uint8_t i = 0; i < PCB_THERM_QTY; i++) {
 8003900:	f897 321c 	ldrb.w	r3, [r7, #540]	@ 0x21c
 8003904:	3301      	adds	r3, #1
 8003906:	f887 321c 	strb.w	r3, [r7, #540]	@ 0x21c
 800390a:	f897 321c 	ldrb.w	r3, [r7, #540]	@ 0x21c
 800390e:	2b11      	cmp	r3, #17
 8003910:	d9cb      	bls.n	80038aa <balance_cycle+0x1866>
					}
				}
			}
			intMaxResistorTemperature = (uint16_t)(maxResistorTemperature*tempScale);
 8003912:	ed97 7a91 	vldr	s14, [r7, #580]	@ 0x244
 8003916:	edd7 7a79 	vldr	s15, [r7, #484]	@ 0x1e4
 800391a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800391e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003922:	ee17 3a90 	vmov	r3, s15
 8003926:	f8a7 31d6 	strh.w	r3, [r7, #470]	@ 0x1d6
			balanceMsg[2] = (uint8_t)(intMaxResistorTemperature & 0xFF);
 800392a:	f8b7 31d6 	ldrh.w	r3, [r7, #470]	@ 0x1d6
 800392e:	b2da      	uxtb	r2, r3
 8003930:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 8003934:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8003938:	709a      	strb	r2, [r3, #2]
			balanceMsg[3] = (uint8_t)((intMaxResistorTemperature >> 8) & 0xFF);
 800393a:	f8b7 31d6 	ldrh.w	r3, [r7, #470]	@ 0x1d6
 800393e:	0a1b      	lsrs	r3, r3, #8
 8003940:	b29b      	uxth	r3, r3
 8003942:	b2da      	uxtb	r2, r3
 8003944:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 8003948:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 800394c:	70da      	strb	r2, [r3, #3]

			if(maxResistorTemperature > HOT_LED_THRESHOLD) { hot_led_on(); }
 800394e:	edd7 7a91 	vldr	s15, [r7, #580]	@ 0x244
 8003952:	ed9f 7a64 	vldr	s14, [pc, #400]	@ 8003ae4 <balance_cycle+0x1aa0>
 8003956:	eef4 7ac7 	vcmpe.f32	s15, s14
 800395a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800395e:	dd02      	ble.n	8003966 <balance_cycle+0x1922>
 8003960:	f007 f850 	bl	800aa04 <hot_led_on>
 8003964:	e001      	b.n	800396a <balance_cycle+0x1926>

			else { hot_led_off(); }
 8003966:	f007 f857 	bl	800aa18 <hot_led_off>

			for(uint8_t i = 0; i < MODULE_THERM_QTY; i++) {
 800396a:	2300      	movs	r3, #0
 800396c:	f887 321b 	strb.w	r3, [r7, #539]	@ 0x21b
 8003970:	e028      	b.n	80039c4 <balance_cycle+0x1980>
				if(moduleTemperatures[i] > MAX_TEMPERATURE) {
 8003972:	f897 321b 	ldrb.w	r3, [r7, #539]	@ 0x21b
 8003976:	f507 7218 	add.w	r2, r7, #608	@ 0x260
 800397a:	f5a2 7290 	sub.w	r2, r2, #288	@ 0x120
 800397e:	009b      	lsls	r3, r3, #2
 8003980:	4413      	add	r3, r2
 8003982:	edd3 7a00 	vldr	s15, [r3]
 8003986:	ed9f 7a58 	vldr	s14, [pc, #352]	@ 8003ae8 <balance_cycle+0x1aa4>
 800398a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800398e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003992:	dd12      	ble.n	80039ba <balance_cycle+0x1976>
					overheatFlag = 1;
 8003994:	2301      	movs	r3, #1
 8003996:	f887 3243 	strb.w	r3, [r7, #579]	@ 0x243
					faultThermistors[faultThermistorQty] = i + 1;
 800399a:	f897 3241 	ldrb.w	r3, [r7, #577]	@ 0x241
 800399e:	f897 221b 	ldrb.w	r2, [r7, #539]	@ 0x21b
 80039a2:	3201      	adds	r2, #1
 80039a4:	b2d1      	uxtb	r1, r2
 80039a6:	f507 7218 	add.w	r2, r7, #608	@ 0x260
 80039aa:	f5a2 72c2 	sub.w	r2, r2, #388	@ 0x184
 80039ae:	54d1      	strb	r1, [r2, r3]
					faultThermistorQty++;
 80039b0:	f897 3241 	ldrb.w	r3, [r7, #577]	@ 0x241
 80039b4:	3301      	adds	r3, #1
 80039b6:	f887 3241 	strb.w	r3, [r7, #577]	@ 0x241
			for(uint8_t i = 0; i < MODULE_THERM_QTY; i++) {
 80039ba:	f897 321b 	ldrb.w	r3, [r7, #539]	@ 0x21b
 80039be:	3301      	adds	r3, #1
 80039c0:	f887 321b 	strb.w	r3, [r7, #539]	@ 0x21b
 80039c4:	f897 321b 	ldrb.w	r3, [r7, #539]	@ 0x21b
 80039c8:	2b11      	cmp	r3, #17
 80039ca:	d9d2      	bls.n	8003972 <balance_cycle+0x192e>
				}
			}
			if(overheatFlag) { overheatCount++; }
 80039cc:	f897 3243 	ldrb.w	r3, [r7, #579]	@ 0x243
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d005      	beq.n	80039e0 <balance_cycle+0x199c>
 80039d4:	f897 3242 	ldrb.w	r3, [r7, #578]	@ 0x242
 80039d8:	3301      	adds	r3, #1
 80039da:	f887 3242 	strb.w	r3, [r7, #578]	@ 0x242
 80039de:	e020      	b.n	8003a22 <balance_cycle+0x19de>

			else {
				if(overheatCount > 0) { overheatCount--; }
 80039e0:	f897 3242 	ldrb.w	r3, [r7, #578]	@ 0x242
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d004      	beq.n	80039f2 <balance_cycle+0x19ae>
 80039e8:	f897 3242 	ldrb.w	r3, [r7, #578]	@ 0x242
 80039ec:	3b01      	subs	r3, #1
 80039ee:	f887 3242 	strb.w	r3, [r7, #578]	@ 0x242

				for(uint8_t i = 0; i < MODULE_THERM_QTY; i++) { faultThermistors[i] = 0; }
 80039f2:	2300      	movs	r3, #0
 80039f4:	f887 321a 	strb.w	r3, [r7, #538]	@ 0x21a
 80039f8:	e00c      	b.n	8003a14 <balance_cycle+0x19d0>
 80039fa:	f897 321a 	ldrb.w	r3, [r7, #538]	@ 0x21a
 80039fe:	f507 7218 	add.w	r2, r7, #608	@ 0x260
 8003a02:	f5a2 72c2 	sub.w	r2, r2, #388	@ 0x184
 8003a06:	2100      	movs	r1, #0
 8003a08:	54d1      	strb	r1, [r2, r3]
 8003a0a:	f897 321a 	ldrb.w	r3, [r7, #538]	@ 0x21a
 8003a0e:	3301      	adds	r3, #1
 8003a10:	f887 321a 	strb.w	r3, [r7, #538]	@ 0x21a
 8003a14:	f897 321a 	ldrb.w	r3, [r7, #538]	@ 0x21a
 8003a18:	2b11      	cmp	r3, #17
 8003a1a:	d9ee      	bls.n	80039fa <balance_cycle+0x19b6>

				faultThermistorQty = 0;
 8003a1c:	2300      	movs	r3, #0
 8003a1e:	f887 3241 	strb.w	r3, [r7, #577]	@ 0x241
			}
			// MODULE OVERHEAT FAULT
			if(overheatCount > ATTEMPT_LIMIT) { error_loop(ERROR_OVERHEAT, faultThermistors, 0, NOT_APPLICABLE); }
 8003a22:	f897 3242 	ldrb.w	r3, [r7, #578]	@ 0x242
 8003a26:	2b0a      	cmp	r3, #10
 8003a28:	d906      	bls.n	8003a38 <balance_cycle+0x19f4>
 8003a2a:	f107 01dc 	add.w	r1, r7, #220	@ 0xdc
 8003a2e:	2303      	movs	r3, #3
 8003a30:	2200      	movs	r2, #0
 8003a32:	2045      	movs	r0, #69	@ 0x45
 8003a34:	f001 f9e0 	bl	8004df8 <error_loop>

			overheatFlag = 0;
 8003a38:	2300      	movs	r3, #0
 8003a3a:	f887 3243 	strb.w	r3, [r7, #579]	@ 0x243

			measureCounter = 0;
 8003a3e:	4b27      	ldr	r3, [pc, #156]	@ (8003adc <balance_cycle+0x1a98>)
 8003a40:	2200      	movs	r2, #0
 8003a42:	601a      	str	r2, [r3, #0]
		}

		if(transmitCounter > transmissionDelay) {
 8003a44:	4b29      	ldr	r3, [pc, #164]	@ (8003aec <balance_cycle+0x1aa8>)
 8003a46:	881b      	ldrh	r3, [r3, #0]
 8003a48:	461a      	mov	r2, r3
 8003a4a:	4b25      	ldr	r3, [pc, #148]	@ (8003ae0 <balance_cycle+0x1a9c>)
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	429a      	cmp	r2, r3
 8003a50:	d211      	bcs.n	8003a76 <balance_cycle+0x1a32>
			transmit_balance(balanceMsg);
 8003a52:	f107 03f0 	add.w	r3, r7, #240	@ 0xf0
 8003a56:	4618      	mov	r0, r3
 8003a58:	f001 fcc8 	bl	80053ec <transmit_balance>
			transmit_voltages(cellVoltages);
 8003a5c:	f507 73c4 	add.w	r3, r7, #392	@ 0x188
 8003a60:	4618      	mov	r0, r3
 8003a62:	f001 fd97 	bl	8005594 <transmit_voltages>
			transmit_temperatures(moduleTemperatures);
 8003a66:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	f001 ff62 	bl	8005934 <transmit_temperatures>

			transmitCounter = 0;
 8003a70:	4b1b      	ldr	r3, [pc, #108]	@ (8003ae0 <balance_cycle+0x1a9c>)
 8003a72:	2200      	movs	r2, #0
 8003a74:	601a      	str	r2, [r3, #0]
		}

		if(HAL_CAN_GetRxFifoFillLevel(&hcan1, CAN_RX_FIFO0) > 0) {
 8003a76:	2100      	movs	r1, #0
 8003a78:	4816      	ldr	r0, [pc, #88]	@ (8003ad4 <balance_cycle+0x1a90>)
 8003a7a:	f009 fa60 	bl	800cf3e <HAL_CAN_GetRxFifoFillLevel>
 8003a7e:	4603      	mov	r3, r0
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d04b      	beq.n	8003b1c <balance_cycle+0x1ad8>
			uint8_t attempts = 0;
 8003a84:	2300      	movs	r3, #0
 8003a86:	f887 3219 	strb.w	r3, [r7, #537]	@ 0x219

			while(attempts < ATTEMPT_LIMIT) {
 8003a8a:	e039      	b.n	8003b00 <balance_cycle+0x1abc>
				if(HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &RxHeader, RxData) == HAL_OK) {
 8003a8c:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 8003a90:	f507 72dc 	add.w	r2, r7, #440	@ 0x1b8
 8003a94:	2100      	movs	r1, #0
 8003a96:	480f      	ldr	r0, [pc, #60]	@ (8003ad4 <balance_cycle+0x1a90>)
 8003a98:	f009 f92f 	bl	800ccfa <HAL_CAN_GetRxMessage>
 8003a9c:	4603      	mov	r3, r0
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d126      	bne.n	8003af0 <balance_cycle+0x1aac>

					if(RxHeader.StdId == CAN_FAULT_ID) { silent_error_loop(); }
 8003aa2:	f8d7 31b8 	ldr.w	r3, [r7, #440]	@ 0x1b8
 8003aa6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003aaa:	d101      	bne.n	8003ab0 <balance_cycle+0x1a6c>
 8003aac:	f001 f95c 	bl	8004d68 <silent_error_loop>

					if(RxHeader.StdId == CAN_STOP_BALANCE_ID) { *haltBalanceFlag = 0; }
 8003ab0:	f8d7 31b8 	ldr.w	r3, [r7, #440]	@ 0x1b8
 8003ab4:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8003ab8:	4293      	cmp	r3, r2
 8003aba:	d106      	bne.n	8003aca <balance_cycle+0x1a86>
 8003abc:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 8003ac0:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	2200      	movs	r2, #0
 8003ac8:	701a      	strb	r2, [r3, #0]

					attempts = 13;
 8003aca:	230d      	movs	r3, #13
 8003acc:	f887 3219 	strb.w	r3, [r7, #537]	@ 0x219
 8003ad0:	e016      	b.n	8003b00 <balance_cycle+0x1abc>
 8003ad2:	bf00      	nop
 8003ad4:	200000c4 	.word	0x200000c4
 8003ad8:	200003f0 	.word	0x200003f0
 8003adc:	200003ec 	.word	0x200003ec
 8003ae0:	200003e8 	.word	0x200003e8
 8003ae4:	42340000 	.word	0x42340000
 8003ae8:	42700000 	.word	0x42700000
 8003aec:	200003e6 	.word	0x200003e6
				}
				else {
					attempts++;
 8003af0:	f897 3219 	ldrb.w	r3, [r7, #537]	@ 0x219
 8003af4:	3301      	adds	r3, #1
 8003af6:	f887 3219 	strb.w	r3, [r7, #537]	@ 0x219
					wait(5);
 8003afa:	2005      	movs	r0, #5
 8003afc:	f006 fe82 	bl	800a804 <wait>
			while(attempts < ATTEMPT_LIMIT) {
 8003b00:	f897 3219 	ldrb.w	r3, [r7, #537]	@ 0x219
 8003b04:	2b09      	cmp	r3, #9
 8003b06:	d9c1      	bls.n	8003a8c <balance_cycle+0x1a48>
				}
			}
			if(attempts != 13) { error_loop(ERROR_CAN_READ, 0, 0, MCU_FAULT); }
 8003b08:	f897 3219 	ldrb.w	r3, [r7, #537]	@ 0x219
 8003b0c:	2b0d      	cmp	r3, #13
 8003b0e:	d005      	beq.n	8003b1c <balance_cycle+0x1ad8>
 8003b10:	2302      	movs	r3, #2
 8003b12:	2200      	movs	r2, #0
 8003b14:	2100      	movs	r1, #0
 8003b16:	2057      	movs	r0, #87	@ 0x57
 8003b18:	f001 f96e 	bl	8004df8 <error_loop>
		}

		if(HAL_CAN_GetRxFifoFillLevel(&hcan1, CAN_RX_FIFO1) > 0) {
 8003b1c:	2101      	movs	r1, #1
 8003b1e:	4834      	ldr	r0, [pc, #208]	@ (8003bf0 <balance_cycle+0x1bac>)
 8003b20:	f009 fa0d 	bl	800cf3e <HAL_CAN_GetRxFifoFillLevel>
 8003b24:	4603      	mov	r3, r0
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d03c      	beq.n	8003ba4 <balance_cycle+0x1b60>
			uint8_t attempts = 0;
 8003b2a:	2300      	movs	r3, #0
 8003b2c:	f887 3218 	strb.w	r3, [r7, #536]	@ 0x218

			while(attempts < ATTEMPT_LIMIT) {
 8003b30:	e02a      	b.n	8003b88 <balance_cycle+0x1b44>
				if(HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO1, &RxHeader, RxData) == HAL_OK) {
 8003b32:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 8003b36:	f507 72dc 	add.w	r2, r7, #440	@ 0x1b8
 8003b3a:	2101      	movs	r1, #1
 8003b3c:	482c      	ldr	r0, [pc, #176]	@ (8003bf0 <balance_cycle+0x1bac>)
 8003b3e:	f009 f8dc 	bl	800ccfa <HAL_CAN_GetRxMessage>
 8003b42:	4603      	mov	r3, r0
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d117      	bne.n	8003b78 <balance_cycle+0x1b34>
					if(RxHeader.StdId == CAN_PACK_STATUS_ID) {
 8003b48:	f8d7 31b8 	ldr.w	r3, [r7, #440]	@ 0x1b8
 8003b4c:	f5b3 6f84 	cmp.w	r3, #1056	@ 0x420
 8003b50:	d10e      	bne.n	8003b70 <balance_cycle+0x1b2c>
						if(RxData[PACK_STATUS_BYTE_POSITION] != PACK_STATUS_IDLE || RxData[PACK_STATUS_BYTE_POSITION] != PACK_STATUS_FAULT) {
 8003b52:	f897 31b5 	ldrb.w	r3, [r7, #437]	@ 0x1b5
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d103      	bne.n	8003b62 <balance_cycle+0x1b1e>
 8003b5a:	f897 31b5 	ldrb.w	r3, [r7, #437]	@ 0x1b5
 8003b5e:	2b06      	cmp	r3, #6
 8003b60:	d006      	beq.n	8003b70 <balance_cycle+0x1b2c>
							*haltBalanceFlag = 0;
 8003b62:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 8003b66:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	701a      	strb	r2, [r3, #0]
						}
					}
					attempts = 13;
 8003b70:	230d      	movs	r3, #13
 8003b72:	f887 3218 	strb.w	r3, [r7, #536]	@ 0x218
 8003b76:	e007      	b.n	8003b88 <balance_cycle+0x1b44>
				}
				else {
					attempts++;
 8003b78:	f897 3218 	ldrb.w	r3, [r7, #536]	@ 0x218
 8003b7c:	3301      	adds	r3, #1
 8003b7e:	f887 3218 	strb.w	r3, [r7, #536]	@ 0x218
					wait(5);
 8003b82:	2005      	movs	r0, #5
 8003b84:	f006 fe3e 	bl	800a804 <wait>
			while(attempts < ATTEMPT_LIMIT) {
 8003b88:	f897 3218 	ldrb.w	r3, [r7, #536]	@ 0x218
 8003b8c:	2b09      	cmp	r3, #9
 8003b8e:	d9d0      	bls.n	8003b32 <balance_cycle+0x1aee>
				}
			}
			if(attempts != 13) { error_loop(ERROR_CAN_READ, 0, 0, MCU_FAULT); }
 8003b90:	f897 3218 	ldrb.w	r3, [r7, #536]	@ 0x218
 8003b94:	2b0d      	cmp	r3, #13
 8003b96:	d005      	beq.n	8003ba4 <balance_cycle+0x1b60>
 8003b98:	2302      	movs	r3, #2
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	2100      	movs	r1, #0
 8003b9e:	2057      	movs	r0, #87	@ 0x57
 8003ba0:	f001 f92a 	bl	8004df8 <error_loop>
		}

		wait(1);
 8003ba4:	2001      	movs	r0, #1
 8003ba6:	f006 fe2d 	bl	800a804 <wait>
	while(balanceCounter < POST_BALANCE_DELAY && *haltBalanceFlag == 73) {
 8003baa:	4b12      	ldr	r3, [pc, #72]	@ (8003bf4 <balance_cycle+0x1bb0>)
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8003bb2:	4293      	cmp	r3, r2
 8003bb4:	d808      	bhi.n	8003bc8 <balance_cycle+0x1b84>
 8003bb6:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 8003bba:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	781b      	ldrb	r3, [r3, #0]
 8003bc2:	2b49      	cmp	r3, #73	@ 0x49
 8003bc4:	f43f ae5a 	beq.w	800387c <balance_cycle+0x1838>
	}
	hot_led_off();
 8003bc8:	f006 ff26 	bl	800aa18 <hot_led_off>

	if(*haltBalanceFlag == 73) { quick_diagnosis(0); }
 8003bcc:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 8003bd0:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	781b      	ldrb	r3, [r3, #0]
 8003bd8:	2b49      	cmp	r3, #73	@ 0x49
 8003bda:	d102      	bne.n	8003be2 <balance_cycle+0x1b9e>
 8003bdc:	2000      	movs	r0, #0
 8003bde:	f002 f8a9 	bl	8005d34 <quick_diagnosis>
 8003be2:	46a5      	mov	sp, r4
}
 8003be4:	bf00      	nop
 8003be6:	f507 7719 	add.w	r7, r7, #612	@ 0x264
 8003bea:	46bd      	mov	sp, r7
 8003bec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003bf0:	200000c4 	.word	0x200000c4
 8003bf4:	200003f0 	.word	0x200003f0

08003bf8 <config_balance_flags>:


void config_balance_flags(uint8_t *balanceMsg, uint8_t *cellIndexes, uint8_t cellQty)
{
 8003bf8:	b480      	push	{r7}
 8003bfa:	b08b      	sub	sp, #44	@ 0x2c
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	60f8      	str	r0, [r7, #12]
 8003c00:	60b9      	str	r1, [r7, #8]
 8003c02:	4613      	mov	r3, r2
 8003c04:	71fb      	strb	r3, [r7, #7]
	uint8_t cell1Flag = 0;
 8003c06:	2300      	movs	r3, #0
 8003c08:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	uint8_t cell2Flag = 0;
 8003c0c:	2300      	movs	r3, #0
 8003c0e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	uint8_t cell3Flag = 0;
 8003c12:	2300      	movs	r3, #0
 8003c14:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
	uint8_t cell4Flag = 0;
 8003c18:	2300      	movs	r3, #0
 8003c1a:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
	uint8_t cell5Flag = 0;
 8003c1e:	2300      	movs	r3, #0
 8003c20:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
	uint8_t cell6Flag = 0;
 8003c24:	2300      	movs	r3, #0
 8003c26:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
	uint8_t cell7Flag = 0;
 8003c2a:	2300      	movs	r3, #0
 8003c2c:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
	uint8_t cell8Flag = 0;
 8003c30:	2300      	movs	r3, #0
 8003c32:	f887 3020 	strb.w	r3, [r7, #32]
	uint8_t cell9Flag = 0;
 8003c36:	2300      	movs	r3, #0
 8003c38:	77fb      	strb	r3, [r7, #31]
	uint8_t cell10Flag = 0;
 8003c3a:	2300      	movs	r3, #0
 8003c3c:	77bb      	strb	r3, [r7, #30]
	uint8_t cell11Flag = 0;
 8003c3e:	2300      	movs	r3, #0
 8003c40:	777b      	strb	r3, [r7, #29]
	uint8_t cell12Flag = 0;
 8003c42:	2300      	movs	r3, #0
 8003c44:	773b      	strb	r3, [r7, #28]
	uint8_t cell13Flag = 0;
 8003c46:	2300      	movs	r3, #0
 8003c48:	76fb      	strb	r3, [r7, #27]
	uint8_t cell14Flag = 0;
 8003c4a:	2300      	movs	r3, #0
 8003c4c:	76bb      	strb	r3, [r7, #26]
	uint8_t cell15Flag = 0;
 8003c4e:	2300      	movs	r3, #0
 8003c50:	767b      	strb	r3, [r7, #25]
	uint8_t cell16Flag = 0;
 8003c52:	2300      	movs	r3, #0
 8003c54:	763b      	strb	r3, [r7, #24]
	uint8_t cell17Flag = 0;
 8003c56:	2300      	movs	r3, #0
 8003c58:	75fb      	strb	r3, [r7, #23]
	uint8_t cell18Flag = 0;
 8003c5a:	2300      	movs	r3, #0
 8003c5c:	75bb      	strb	r3, [r7, #22]
	uint8_t cell19Flag = 0;
 8003c5e:	2300      	movs	r3, #0
 8003c60:	757b      	strb	r3, [r7, #21]
	uint8_t cell20Flag = 0;
 8003c62:	2300      	movs	r3, #0
 8003c64:	753b      	strb	r3, [r7, #20]

	for(uint8_t i = 0; i < cellQty; i++) {
 8003c66:	2300      	movs	r3, #0
 8003c68:	74fb      	strb	r3, [r7, #19]
 8003c6a:	e078      	b.n	8003d5e <config_balance_flags+0x166>
		switch(*(cellIndexes + i)) {
 8003c6c:	7cfb      	ldrb	r3, [r7, #19]
 8003c6e:	68ba      	ldr	r2, [r7, #8]
 8003c70:	4413      	add	r3, r2
 8003c72:	781b      	ldrb	r3, [r3, #0]
 8003c74:	3b01      	subs	r3, #1
 8003c76:	2b13      	cmp	r3, #19
 8003c78:	d86e      	bhi.n	8003d58 <config_balance_flags+0x160>
 8003c7a:	a201      	add	r2, pc, #4	@ (adr r2, 8003c80 <config_balance_flags+0x88>)
 8003c7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c80:	08003cd1 	.word	0x08003cd1
 8003c84:	08003cd9 	.word	0x08003cd9
 8003c88:	08003ce1 	.word	0x08003ce1
 8003c8c:	08003ce9 	.word	0x08003ce9
 8003c90:	08003cf1 	.word	0x08003cf1
 8003c94:	08003cf9 	.word	0x08003cf9
 8003c98:	08003d01 	.word	0x08003d01
 8003c9c:	08003d09 	.word	0x08003d09
 8003ca0:	08003d11 	.word	0x08003d11
 8003ca4:	08003d17 	.word	0x08003d17
 8003ca8:	08003d1d 	.word	0x08003d1d
 8003cac:	08003d23 	.word	0x08003d23
 8003cb0:	08003d29 	.word	0x08003d29
 8003cb4:	08003d2f 	.word	0x08003d2f
 8003cb8:	08003d35 	.word	0x08003d35
 8003cbc:	08003d3b 	.word	0x08003d3b
 8003cc0:	08003d41 	.word	0x08003d41
 8003cc4:	08003d47 	.word	0x08003d47
 8003cc8:	08003d4d 	.word	0x08003d4d
 8003ccc:	08003d53 	.word	0x08003d53
			case 1:
				cell1Flag = 1;
 8003cd0:	2301      	movs	r3, #1
 8003cd2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				break;
 8003cd6:	e03f      	b.n	8003d58 <config_balance_flags+0x160>
			case 2:
				cell2Flag = 1;
 8003cd8:	2301      	movs	r3, #1
 8003cda:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
				break;
 8003cde:	e03b      	b.n	8003d58 <config_balance_flags+0x160>
			case 3:
				cell3Flag = 1;
 8003ce0:	2301      	movs	r3, #1
 8003ce2:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
				break;
 8003ce6:	e037      	b.n	8003d58 <config_balance_flags+0x160>
			case 4:
				cell4Flag = 1;
 8003ce8:	2301      	movs	r3, #1
 8003cea:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
				break;
 8003cee:	e033      	b.n	8003d58 <config_balance_flags+0x160>
			case 5:
				cell5Flag = 1;
 8003cf0:	2301      	movs	r3, #1
 8003cf2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
				break;
 8003cf6:	e02f      	b.n	8003d58 <config_balance_flags+0x160>
			case 6:
				cell6Flag = 1;
 8003cf8:	2301      	movs	r3, #1
 8003cfa:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
				break;
 8003cfe:	e02b      	b.n	8003d58 <config_balance_flags+0x160>
			case 7:
				cell7Flag = 1;
 8003d00:	2301      	movs	r3, #1
 8003d02:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
				break;
 8003d06:	e027      	b.n	8003d58 <config_balance_flags+0x160>
			case 8:
				cell8Flag = 1;
 8003d08:	2301      	movs	r3, #1
 8003d0a:	f887 3020 	strb.w	r3, [r7, #32]
				break;
 8003d0e:	e023      	b.n	8003d58 <config_balance_flags+0x160>
			case 9:
				cell9Flag = 1;
 8003d10:	2301      	movs	r3, #1
 8003d12:	77fb      	strb	r3, [r7, #31]
				break;
 8003d14:	e020      	b.n	8003d58 <config_balance_flags+0x160>
			case 10:
				cell10Flag = 1;
 8003d16:	2301      	movs	r3, #1
 8003d18:	77bb      	strb	r3, [r7, #30]
				break;
 8003d1a:	e01d      	b.n	8003d58 <config_balance_flags+0x160>
			case 11:
				cell11Flag = 1;
 8003d1c:	2301      	movs	r3, #1
 8003d1e:	777b      	strb	r3, [r7, #29]
				break;
 8003d20:	e01a      	b.n	8003d58 <config_balance_flags+0x160>
			case 12:
				cell12Flag = 1;
 8003d22:	2301      	movs	r3, #1
 8003d24:	773b      	strb	r3, [r7, #28]
				break;
 8003d26:	e017      	b.n	8003d58 <config_balance_flags+0x160>
			case 13:
				cell13Flag = 1;
 8003d28:	2301      	movs	r3, #1
 8003d2a:	76fb      	strb	r3, [r7, #27]
				break;
 8003d2c:	e014      	b.n	8003d58 <config_balance_flags+0x160>
			case 14:
				cell14Flag = 1;
 8003d2e:	2301      	movs	r3, #1
 8003d30:	76bb      	strb	r3, [r7, #26]
				break;
 8003d32:	e011      	b.n	8003d58 <config_balance_flags+0x160>
			case 15:
				cell15Flag = 1;
 8003d34:	2301      	movs	r3, #1
 8003d36:	767b      	strb	r3, [r7, #25]
				break;
 8003d38:	e00e      	b.n	8003d58 <config_balance_flags+0x160>
			case 16:
				cell16Flag = 1;
 8003d3a:	2301      	movs	r3, #1
 8003d3c:	763b      	strb	r3, [r7, #24]
				break;
 8003d3e:	e00b      	b.n	8003d58 <config_balance_flags+0x160>
			case 17:
				cell17Flag = 1;
 8003d40:	2301      	movs	r3, #1
 8003d42:	75fb      	strb	r3, [r7, #23]
				break;
 8003d44:	e008      	b.n	8003d58 <config_balance_flags+0x160>
			case 18:
				cell18Flag = 1;
 8003d46:	2301      	movs	r3, #1
 8003d48:	75bb      	strb	r3, [r7, #22]
				break;
 8003d4a:	e005      	b.n	8003d58 <config_balance_flags+0x160>
			case 19:
				cell19Flag = 1;
 8003d4c:	2301      	movs	r3, #1
 8003d4e:	757b      	strb	r3, [r7, #21]
				break;
 8003d50:	e002      	b.n	8003d58 <config_balance_flags+0x160>
			case 20:
				cell20Flag = 1;
 8003d52:	2301      	movs	r3, #1
 8003d54:	753b      	strb	r3, [r7, #20]
				break;
 8003d56:	bf00      	nop
	for(uint8_t i = 0; i < cellQty; i++) {
 8003d58:	7cfb      	ldrb	r3, [r7, #19]
 8003d5a:	3301      	adds	r3, #1
 8003d5c:	74fb      	strb	r3, [r7, #19]
 8003d5e:	7cfa      	ldrb	r2, [r7, #19]
 8003d60:	79fb      	ldrb	r3, [r7, #7]
 8003d62:	429a      	cmp	r2, r3
 8003d64:	d382      	bcc.n	8003c6c <config_balance_flags+0x74>
		}
	}
	*(balanceMsg + 4) = (cell8Flag << 7) | (cell7Flag << 6) | (cell6Flag << 5) | (cell5Flag << 4) | (cell4Flag << 3) | (cell3Flag << 2) | (cell2Flag << 1) | (cell1Flag << 0);
 8003d66:	f997 3020 	ldrsb.w	r3, [r7, #32]
 8003d6a:	01db      	lsls	r3, r3, #7
 8003d6c:	b25a      	sxtb	r2, r3
 8003d6e:	f997 3021 	ldrsb.w	r3, [r7, #33]	@ 0x21
 8003d72:	019b      	lsls	r3, r3, #6
 8003d74:	b25b      	sxtb	r3, r3
 8003d76:	4313      	orrs	r3, r2
 8003d78:	b25a      	sxtb	r2, r3
 8003d7a:	f997 3022 	ldrsb.w	r3, [r7, #34]	@ 0x22
 8003d7e:	015b      	lsls	r3, r3, #5
 8003d80:	b25b      	sxtb	r3, r3
 8003d82:	4313      	orrs	r3, r2
 8003d84:	b25a      	sxtb	r2, r3
 8003d86:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 8003d8a:	011b      	lsls	r3, r3, #4
 8003d8c:	b25b      	sxtb	r3, r3
 8003d8e:	4313      	orrs	r3, r2
 8003d90:	b25a      	sxtb	r2, r3
 8003d92:	f997 3024 	ldrsb.w	r3, [r7, #36]	@ 0x24
 8003d96:	00db      	lsls	r3, r3, #3
 8003d98:	b25b      	sxtb	r3, r3
 8003d9a:	4313      	orrs	r3, r2
 8003d9c:	b25a      	sxtb	r2, r3
 8003d9e:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 8003da2:	009b      	lsls	r3, r3, #2
 8003da4:	b25b      	sxtb	r3, r3
 8003da6:	4313      	orrs	r3, r2
 8003da8:	b25a      	sxtb	r2, r3
 8003daa:	f997 3026 	ldrsb.w	r3, [r7, #38]	@ 0x26
 8003dae:	005b      	lsls	r3, r3, #1
 8003db0:	b25b      	sxtb	r3, r3
 8003db2:	4313      	orrs	r3, r2
 8003db4:	b25a      	sxtb	r2, r3
 8003db6:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8003dba:	4313      	orrs	r3, r2
 8003dbc:	b25a      	sxtb	r2, r3
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	3304      	adds	r3, #4
 8003dc2:	b2d2      	uxtb	r2, r2
 8003dc4:	701a      	strb	r2, [r3, #0]
	*(balanceMsg + 5) = (cell16Flag << 7) | (cell15Flag << 6) | (cell14Flag << 5) | (cell13Flag << 4) | (cell12Flag << 3) | (cell11Flag << 2) | (cell10Flag << 1) | (cell9Flag << 0);
 8003dc6:	f997 3018 	ldrsb.w	r3, [r7, #24]
 8003dca:	01db      	lsls	r3, r3, #7
 8003dcc:	b25a      	sxtb	r2, r3
 8003dce:	f997 3019 	ldrsb.w	r3, [r7, #25]
 8003dd2:	019b      	lsls	r3, r3, #6
 8003dd4:	b25b      	sxtb	r3, r3
 8003dd6:	4313      	orrs	r3, r2
 8003dd8:	b25a      	sxtb	r2, r3
 8003dda:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8003dde:	015b      	lsls	r3, r3, #5
 8003de0:	b25b      	sxtb	r3, r3
 8003de2:	4313      	orrs	r3, r2
 8003de4:	b25a      	sxtb	r2, r3
 8003de6:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8003dea:	011b      	lsls	r3, r3, #4
 8003dec:	b25b      	sxtb	r3, r3
 8003dee:	4313      	orrs	r3, r2
 8003df0:	b25a      	sxtb	r2, r3
 8003df2:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8003df6:	00db      	lsls	r3, r3, #3
 8003df8:	b25b      	sxtb	r3, r3
 8003dfa:	4313      	orrs	r3, r2
 8003dfc:	b25a      	sxtb	r2, r3
 8003dfe:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8003e02:	009b      	lsls	r3, r3, #2
 8003e04:	b25b      	sxtb	r3, r3
 8003e06:	4313      	orrs	r3, r2
 8003e08:	b25a      	sxtb	r2, r3
 8003e0a:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8003e0e:	005b      	lsls	r3, r3, #1
 8003e10:	b25b      	sxtb	r3, r3
 8003e12:	4313      	orrs	r3, r2
 8003e14:	b25a      	sxtb	r2, r3
 8003e16:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003e1a:	4313      	orrs	r3, r2
 8003e1c:	b25a      	sxtb	r2, r3
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	3305      	adds	r3, #5
 8003e22:	b2d2      	uxtb	r2, r2
 8003e24:	701a      	strb	r2, [r3, #0]
	*(balanceMsg + 6) = (cell20Flag << 3) | (cell19Flag << 2) | (cell18Flag << 1) | (cell17Flag << 0);
 8003e26:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8003e2a:	00db      	lsls	r3, r3, #3
 8003e2c:	b25a      	sxtb	r2, r3
 8003e2e:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8003e32:	009b      	lsls	r3, r3, #2
 8003e34:	b25b      	sxtb	r3, r3
 8003e36:	4313      	orrs	r3, r2
 8003e38:	b25a      	sxtb	r2, r3
 8003e3a:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8003e3e:	005b      	lsls	r3, r3, #1
 8003e40:	b25b      	sxtb	r3, r3
 8003e42:	4313      	orrs	r3, r2
 8003e44:	b25a      	sxtb	r2, r3
 8003e46:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003e4a:	4313      	orrs	r3, r2
 8003e4c:	b25a      	sxtb	r2, r3
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	3306      	adds	r3, #6
 8003e52:	b2d2      	uxtb	r2, r2
 8003e54:	701a      	strb	r2, [r3, #0]
}
 8003e56:	bf00      	nop
 8003e58:	372c      	adds	r7, #44	@ 0x2c
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e60:	4770      	bx	lr
 8003e62:	bf00      	nop

08003e64 <config_DCC_bits>:


void config_DCC_bits(uint8_t *cellsToBalance, uint8_t cellsToBalanceQty, uint8_t *payloadRegisterA, uint8_t DCTO)
{
 8003e64:	b480      	push	{r7}
 8003e66:	b089      	sub	sp, #36	@ 0x24
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	60f8      	str	r0, [r7, #12]
 8003e6c:	607a      	str	r2, [r7, #4]
 8003e6e:	461a      	mov	r2, r3
 8003e70:	460b      	mov	r3, r1
 8003e72:	72fb      	strb	r3, [r7, #11]
 8003e74:	4613      	mov	r3, r2
 8003e76:	72bb      	strb	r3, [r7, #10]
	uint8_t DCC1 = 0;
 8003e78:	2300      	movs	r3, #0
 8003e7a:	77fb      	strb	r3, [r7, #31]
	uint8_t DCC2 = 0;
 8003e7c:	2300      	movs	r3, #0
 8003e7e:	77bb      	strb	r3, [r7, #30]
	uint8_t DCC3 = 0;
 8003e80:	2300      	movs	r3, #0
 8003e82:	777b      	strb	r3, [r7, #29]
	uint8_t DCC4 = 0;
 8003e84:	2300      	movs	r3, #0
 8003e86:	773b      	strb	r3, [r7, #28]
	uint8_t DCC5 = 0;
 8003e88:	2300      	movs	r3, #0
 8003e8a:	76fb      	strb	r3, [r7, #27]
	uint8_t DCC6 = 0;
 8003e8c:	2300      	movs	r3, #0
 8003e8e:	76bb      	strb	r3, [r7, #26]
	uint8_t DCC7 = 0;
 8003e90:	2300      	movs	r3, #0
 8003e92:	767b      	strb	r3, [r7, #25]
	uint8_t DCC8 = 0;
 8003e94:	2300      	movs	r3, #0
 8003e96:	763b      	strb	r3, [r7, #24]
	uint8_t DCC9 = 0;
 8003e98:	2300      	movs	r3, #0
 8003e9a:	75fb      	strb	r3, [r7, #23]
	uint8_t DCC10 = 0;
 8003e9c:	2300      	movs	r3, #0
 8003e9e:	75bb      	strb	r3, [r7, #22]
	uint8_t DCC11 = 0;
 8003ea0:	2300      	movs	r3, #0
 8003ea2:	753b      	strb	r3, [r7, #20]
	uint8_t DCC12 = 0;
 8003ea4:	2300      	movs	r3, #0
 8003ea6:	74fb      	strb	r3, [r7, #19]

	for(uint8_t i = 0; i < cellsToBalanceQty; i++) {
 8003ea8:	2300      	movs	r3, #0
 8003eaa:	757b      	strb	r3, [r7, #21]
 8003eac:	e03f      	b.n	8003f2e <config_DCC_bits+0xca>
		switch(*(cellsToBalance + i)) {
 8003eae:	7d7b      	ldrb	r3, [r7, #21]
 8003eb0:	68fa      	ldr	r2, [r7, #12]
 8003eb2:	4413      	add	r3, r2
 8003eb4:	781b      	ldrb	r3, [r3, #0]
 8003eb6:	3b01      	subs	r3, #1
 8003eb8:	2b09      	cmp	r3, #9
 8003eba:	d835      	bhi.n	8003f28 <config_DCC_bits+0xc4>
 8003ebc:	a201      	add	r2, pc, #4	@ (adr r2, 8003ec4 <config_DCC_bits+0x60>)
 8003ebe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ec2:	bf00      	nop
 8003ec4:	08003eed 	.word	0x08003eed
 8003ec8:	08003ef3 	.word	0x08003ef3
 8003ecc:	08003ef9 	.word	0x08003ef9
 8003ed0:	08003eff 	.word	0x08003eff
 8003ed4:	08003f05 	.word	0x08003f05
 8003ed8:	08003f0b 	.word	0x08003f0b
 8003edc:	08003f11 	.word	0x08003f11
 8003ee0:	08003f17 	.word	0x08003f17
 8003ee4:	08003f1d 	.word	0x08003f1d
 8003ee8:	08003f23 	.word	0x08003f23
			case 1:
				DCC1 = 1;
 8003eec:	2301      	movs	r3, #1
 8003eee:	77fb      	strb	r3, [r7, #31]
				break;
 8003ef0:	e01a      	b.n	8003f28 <config_DCC_bits+0xc4>
			case 2:
				DCC2 = 1;
 8003ef2:	2301      	movs	r3, #1
 8003ef4:	77bb      	strb	r3, [r7, #30]
				break;
 8003ef6:	e017      	b.n	8003f28 <config_DCC_bits+0xc4>
			case 3:
				DCC3 = 1;
 8003ef8:	2301      	movs	r3, #1
 8003efa:	777b      	strb	r3, [r7, #29]
				break;
 8003efc:	e014      	b.n	8003f28 <config_DCC_bits+0xc4>
			case 4:
				DCC4 = 1;
 8003efe:	2301      	movs	r3, #1
 8003f00:	773b      	strb	r3, [r7, #28]
				break;
 8003f02:	e011      	b.n	8003f28 <config_DCC_bits+0xc4>
			case 5:
				DCC5 = 1;
 8003f04:	2301      	movs	r3, #1
 8003f06:	76fb      	strb	r3, [r7, #27]
				break;
 8003f08:	e00e      	b.n	8003f28 <config_DCC_bits+0xc4>
			case 6:
				DCC6 = 1;
 8003f0a:	2301      	movs	r3, #1
 8003f0c:	76bb      	strb	r3, [r7, #26]
				break;
 8003f0e:	e00b      	b.n	8003f28 <config_DCC_bits+0xc4>
			case 7:
				DCC7 = 1;
 8003f10:	2301      	movs	r3, #1
 8003f12:	767b      	strb	r3, [r7, #25]
				break;
 8003f14:	e008      	b.n	8003f28 <config_DCC_bits+0xc4>
			case 8:
				DCC8 = 1;
 8003f16:	2301      	movs	r3, #1
 8003f18:	763b      	strb	r3, [r7, #24]
				break;
 8003f1a:	e005      	b.n	8003f28 <config_DCC_bits+0xc4>
			case 9:
				DCC9 = 1;
 8003f1c:	2301      	movs	r3, #1
 8003f1e:	75fb      	strb	r3, [r7, #23]
				break;
 8003f20:	e002      	b.n	8003f28 <config_DCC_bits+0xc4>
			case 10:
				DCC10 = 1;
 8003f22:	2301      	movs	r3, #1
 8003f24:	75bb      	strb	r3, [r7, #22]
				break;
 8003f26:	bf00      	nop
	for(uint8_t i = 0; i < cellsToBalanceQty; i++) {
 8003f28:	7d7b      	ldrb	r3, [r7, #21]
 8003f2a:	3301      	adds	r3, #1
 8003f2c:	757b      	strb	r3, [r7, #21]
 8003f2e:	7d7a      	ldrb	r2, [r7, #21]
 8003f30:	7afb      	ldrb	r3, [r7, #11]
 8003f32:	429a      	cmp	r2, r3
 8003f34:	d3bb      	bcc.n	8003eae <config_DCC_bits+0x4a>
		}
	}
	*(payloadRegisterA + 4) = (DCC8 << 7) | (DCC7 << 6) | (DCC6 << 5) | (DCC5 << 4) | (DCC4 << 3) | (DCC3 << 2) | (DCC2 << 1) | (DCC1 << 0);
 8003f36:	f997 3018 	ldrsb.w	r3, [r7, #24]
 8003f3a:	01db      	lsls	r3, r3, #7
 8003f3c:	b25a      	sxtb	r2, r3
 8003f3e:	f997 3019 	ldrsb.w	r3, [r7, #25]
 8003f42:	019b      	lsls	r3, r3, #6
 8003f44:	b25b      	sxtb	r3, r3
 8003f46:	4313      	orrs	r3, r2
 8003f48:	b25a      	sxtb	r2, r3
 8003f4a:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8003f4e:	015b      	lsls	r3, r3, #5
 8003f50:	b25b      	sxtb	r3, r3
 8003f52:	4313      	orrs	r3, r2
 8003f54:	b25a      	sxtb	r2, r3
 8003f56:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8003f5a:	011b      	lsls	r3, r3, #4
 8003f5c:	b25b      	sxtb	r3, r3
 8003f5e:	4313      	orrs	r3, r2
 8003f60:	b25a      	sxtb	r2, r3
 8003f62:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8003f66:	00db      	lsls	r3, r3, #3
 8003f68:	b25b      	sxtb	r3, r3
 8003f6a:	4313      	orrs	r3, r2
 8003f6c:	b25a      	sxtb	r2, r3
 8003f6e:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8003f72:	009b      	lsls	r3, r3, #2
 8003f74:	b25b      	sxtb	r3, r3
 8003f76:	4313      	orrs	r3, r2
 8003f78:	b25a      	sxtb	r2, r3
 8003f7a:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8003f7e:	005b      	lsls	r3, r3, #1
 8003f80:	b25b      	sxtb	r3, r3
 8003f82:	4313      	orrs	r3, r2
 8003f84:	b25a      	sxtb	r2, r3
 8003f86:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003f8a:	4313      	orrs	r3, r2
 8003f8c:	b25a      	sxtb	r2, r3
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	3304      	adds	r3, #4
 8003f92:	b2d2      	uxtb	r2, r2
 8003f94:	701a      	strb	r2, [r3, #0]
	*(payloadRegisterA + 5) = (DCTO << 4) | (DCC12 << 3) | (DCC11 << 2) | (DCC10 << 1) | (DCC9 << 0);
 8003f96:	f997 300a 	ldrsb.w	r3, [r7, #10]
 8003f9a:	011b      	lsls	r3, r3, #4
 8003f9c:	b25a      	sxtb	r2, r3
 8003f9e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8003fa2:	00db      	lsls	r3, r3, #3
 8003fa4:	b25b      	sxtb	r3, r3
 8003fa6:	4313      	orrs	r3, r2
 8003fa8:	b25a      	sxtb	r2, r3
 8003faa:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8003fae:	009b      	lsls	r3, r3, #2
 8003fb0:	b25b      	sxtb	r3, r3
 8003fb2:	4313      	orrs	r3, r2
 8003fb4:	b25a      	sxtb	r2, r3
 8003fb6:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8003fba:	005b      	lsls	r3, r3, #1
 8003fbc:	b25b      	sxtb	r3, r3
 8003fbe:	4313      	orrs	r3, r2
 8003fc0:	b25a      	sxtb	r2, r3
 8003fc2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003fc6:	4313      	orrs	r3, r2
 8003fc8:	b25a      	sxtb	r2, r3
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	3305      	adds	r3, #5
 8003fce:	b2d2      	uxtb	r2, r2
 8003fd0:	701a      	strb	r2, [r3, #0]
}
 8003fd2:	bf00      	nop
 8003fd4:	3724      	adds	r7, #36	@ 0x24
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fdc:	4770      	bx	lr
 8003fde:	bf00      	nop

08003fe0 <config_PWM_bits>:


void config_PWM_bits(uint8_t *cellsToBalance, uint8_t cellsToBalanceQty, uint8_t *payloadRegisterPWM, uint16_t *cellVoltages, uint8_t side)
{
 8003fe0:	b480      	push	{r7}
 8003fe2:	b091      	sub	sp, #68	@ 0x44
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	60f8      	str	r0, [r7, #12]
 8003fe8:	607a      	str	r2, [r7, #4]
 8003fea:	603b      	str	r3, [r7, #0]
 8003fec:	460b      	mov	r3, r1
 8003fee:	72fb      	strb	r3, [r7, #11]
	uint8_t PWM1_0 = 1;
 8003ff0:	2301      	movs	r3, #1
 8003ff2:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	uint8_t PWM1_1 = 1;
 8003ff6:	2301      	movs	r3, #1
 8003ff8:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
	uint8_t PWM1_2 = 1;
 8003ffc:	2301      	movs	r3, #1
 8003ffe:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
	uint8_t PWM1_3 = 1;
 8004002:	2301      	movs	r3, #1
 8004004:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28

	uint8_t PWM2_0 = 1;
 8004008:	2301      	movs	r3, #1
 800400a:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
	uint8_t PWM2_1 = 1;
 800400e:	2301      	movs	r3, #1
 8004010:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
	uint8_t PWM2_2 = 1;
 8004014:	2301      	movs	r3, #1
 8004016:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	uint8_t PWM2_3 = 1;
 800401a:	2301      	movs	r3, #1
 800401c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

	uint8_t PWM3_0 = 1;
 8004020:	2301      	movs	r3, #1
 8004022:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
	uint8_t PWM3_1 = 1;
 8004026:	2301      	movs	r3, #1
 8004028:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
	uint8_t PWM3_2 = 1;
 800402c:	2301      	movs	r3, #1
 800402e:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
	uint8_t PWM3_3 = 1;
 8004032:	2301      	movs	r3, #1
 8004034:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24

	uint8_t PWM4_0 = 1;
 8004038:	2301      	movs	r3, #1
 800403a:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
	uint8_t PWM4_1 = 1;
 800403e:	2301      	movs	r3, #1
 8004040:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
	uint8_t PWM4_2 = 1;
 8004044:	2301      	movs	r3, #1
 8004046:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
	uint8_t PWM4_3 = 1;
 800404a:	2301      	movs	r3, #1
 800404c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22

	uint8_t PWM5_0 = 1;
 8004050:	2301      	movs	r3, #1
 8004052:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	uint8_t PWM5_1 = 1;
 8004056:	2301      	movs	r3, #1
 8004058:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
	uint8_t PWM5_2 = 1;
 800405c:	2301      	movs	r3, #1
 800405e:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
	uint8_t PWM5_3 = 1;
 8004062:	2301      	movs	r3, #1
 8004064:	f887 3020 	strb.w	r3, [r7, #32]

	uint8_t PWM6_0 = 1;
 8004068:	2301      	movs	r3, #1
 800406a:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
	uint8_t PWM6_1 = 1;
 800406e:	2301      	movs	r3, #1
 8004070:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
	uint8_t PWM6_2 = 1;
 8004074:	2301      	movs	r3, #1
 8004076:	77fb      	strb	r3, [r7, #31]
	uint8_t PWM6_3 = 1;
 8004078:	2301      	movs	r3, #1
 800407a:	77bb      	strb	r3, [r7, #30]

	uint8_t PWM7_0 = 1;
 800407c:	2301      	movs	r3, #1
 800407e:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
	uint8_t PWM7_1 = 1;
 8004082:	2301      	movs	r3, #1
 8004084:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
	uint8_t PWM7_2 = 1;
 8004088:	2301      	movs	r3, #1
 800408a:	777b      	strb	r3, [r7, #29]
	uint8_t PWM7_3 = 1;
 800408c:	2301      	movs	r3, #1
 800408e:	773b      	strb	r3, [r7, #28]

	uint8_t PWM8_0 = 1;
 8004090:	2301      	movs	r3, #1
 8004092:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
	uint8_t PWM8_1 = 1;
 8004096:	2301      	movs	r3, #1
 8004098:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
	uint8_t PWM8_2 = 1;
 800409c:	2301      	movs	r3, #1
 800409e:	76fb      	strb	r3, [r7, #27]
	uint8_t PWM8_3 = 1;
 80040a0:	2301      	movs	r3, #1
 80040a2:	76bb      	strb	r3, [r7, #26]

	uint8_t PWM9_0 = 1;
 80040a4:	2301      	movs	r3, #1
 80040a6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	uint8_t PWM9_1 = 1;
 80040aa:	2301      	movs	r3, #1
 80040ac:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
	uint8_t PWM9_2 = 1;
 80040b0:	2301      	movs	r3, #1
 80040b2:	767b      	strb	r3, [r7, #25]
	uint8_t PWM9_3 = 1;
 80040b4:	2301      	movs	r3, #1
 80040b6:	763b      	strb	r3, [r7, #24]

	uint8_t PWM10_0 = 1;
 80040b8:	2301      	movs	r3, #1
 80040ba:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
	uint8_t PWM10_1 = 1;
 80040be:	2301      	movs	r3, #1
 80040c0:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
	uint8_t PWM10_2 = 1;
 80040c4:	2301      	movs	r3, #1
 80040c6:	75fb      	strb	r3, [r7, #23]
	uint8_t PWM10_3 = 1;
 80040c8:	2301      	movs	r3, #1
 80040ca:	75bb      	strb	r3, [r7, #22]

	switch(side) {
 80040cc:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	f000 8294 	beq.w	80045fe <config_PWM_bits+0x61e>
 80040d6:	2b01      	cmp	r3, #1
 80040d8:	f040 8529 	bne.w	8004b2e <config_PWM_bits+0xb4e>
		case SIDE_A:
			for(uint8_t i = 0; i < cellsToBalanceQty; i++) {
 80040dc:	2300      	movs	r3, #0
 80040de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80040e2:	e285      	b.n	80045f0 <config_PWM_bits+0x610>
				switch(*(cellsToBalance + i)) {
 80040e4:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80040e8:	68fa      	ldr	r2, [r7, #12]
 80040ea:	4413      	add	r3, r2
 80040ec:	781b      	ldrb	r3, [r3, #0]
 80040ee:	3b01      	subs	r3, #1
 80040f0:	2b09      	cmp	r3, #9
 80040f2:	f200 8278 	bhi.w	80045e6 <config_PWM_bits+0x606>
 80040f6:	a201      	add	r2, pc, #4	@ (adr r2, 80040fc <config_PWM_bits+0x11c>)
 80040f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040fc:	08004125 	.word	0x08004125
 8004100:	08004191 	.word	0x08004191
 8004104:	08004209 	.word	0x08004209
 8004108:	08004281 	.word	0x08004281
 800410c:	080042f9 	.word	0x080042f9
 8004110:	08004371 	.word	0x08004371
 8004114:	080043e9 	.word	0x080043e9
 8004118:	08004461 	.word	0x08004461
 800411c:	080044d9 	.word	0x080044d9
 8004120:	0800454d 	.word	0x0800454d
					case 1:
						if(*cellVoltages < 42000 && *cellVoltages >= 40000) {
 8004124:	683b      	ldr	r3, [r7, #0]
 8004126:	881b      	ldrh	r3, [r3, #0]
 8004128:	f24a 420f 	movw	r2, #41999	@ 0xa40f
 800412c:	4293      	cmp	r3, r2
 800412e:	d80c      	bhi.n	800414a <config_PWM_bits+0x16a>
 8004130:	683b      	ldr	r3, [r7, #0]
 8004132:	881b      	ldrh	r3, [r3, #0]
 8004134:	f649 423f 	movw	r2, #39999	@ 0x9c3f
 8004138:	4293      	cmp	r3, r2
 800413a:	d906      	bls.n	800414a <config_PWM_bits+0x16a>
							PWM1_1 = 0;
 800413c:	2300      	movs	r3, #0
 800413e:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
							PWM1_0 = 0;
 8004142:	2300      	movs	r3, #0
 8004144:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8004148:	e021      	b.n	800418e <config_PWM_bits+0x1ae>
						}
						else if(*cellVoltages < 40000 && *cellVoltages >= 39000) {
 800414a:	683b      	ldr	r3, [r7, #0]
 800414c:	881b      	ldrh	r3, [r3, #0]
 800414e:	f649 423f 	movw	r2, #39999	@ 0x9c3f
 8004152:	4293      	cmp	r3, r2
 8004154:	d809      	bhi.n	800416a <config_PWM_bits+0x18a>
 8004156:	683b      	ldr	r3, [r7, #0]
 8004158:	881b      	ldrh	r3, [r3, #0]
 800415a:	f649 0257 	movw	r2, #38999	@ 0x9857
 800415e:	4293      	cmp	r3, r2
 8004160:	d903      	bls.n	800416a <config_PWM_bits+0x18a>
							PWM1_1 = 0;
 8004162:	2300      	movs	r3, #0
 8004164:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
 8004168:	e011      	b.n	800418e <config_PWM_bits+0x1ae>
						}
						else if(*cellVoltages < 39000 && *cellVoltages >= 38000) {
 800416a:	683b      	ldr	r3, [r7, #0]
 800416c:	881b      	ldrh	r3, [r3, #0]
 800416e:	f649 0257 	movw	r2, #38999	@ 0x9857
 8004172:	4293      	cmp	r3, r2
 8004174:	f200 8224 	bhi.w	80045c0 <config_PWM_bits+0x5e0>
 8004178:	683b      	ldr	r3, [r7, #0]
 800417a:	881b      	ldrh	r3, [r3, #0]
 800417c:	f249 426f 	movw	r2, #37999	@ 0x946f
 8004180:	4293      	cmp	r3, r2
 8004182:	f240 821d 	bls.w	80045c0 <config_PWM_bits+0x5e0>
							PWM1_0 = 0;
 8004186:	2300      	movs	r3, #0
 8004188:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
						}
						break;
 800418c:	e218      	b.n	80045c0 <config_PWM_bits+0x5e0>
 800418e:	e217      	b.n	80045c0 <config_PWM_bits+0x5e0>
					case 2:
						if(*(cellVoltages + 1) < 42000 && *(cellVoltages + 1) >= 40000) {
 8004190:	683b      	ldr	r3, [r7, #0]
 8004192:	3302      	adds	r3, #2
 8004194:	881b      	ldrh	r3, [r3, #0]
 8004196:	f24a 420f 	movw	r2, #41999	@ 0xa40f
 800419a:	4293      	cmp	r3, r2
 800419c:	d80d      	bhi.n	80041ba <config_PWM_bits+0x1da>
 800419e:	683b      	ldr	r3, [r7, #0]
 80041a0:	3302      	adds	r3, #2
 80041a2:	881b      	ldrh	r3, [r3, #0]
 80041a4:	f649 423f 	movw	r2, #39999	@ 0x9c3f
 80041a8:	4293      	cmp	r3, r2
 80041aa:	d906      	bls.n	80041ba <config_PWM_bits+0x1da>
							PWM2_1 = 0;
 80041ac:	2300      	movs	r3, #0
 80041ae:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
							PWM2_0 = 0;
 80041b2:	2300      	movs	r3, #0
 80041b4:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
 80041b8:	e025      	b.n	8004206 <config_PWM_bits+0x226>
						}
						else if(*(cellVoltages + 1) < 40000 && *(cellVoltages + 1) >= 39000) {
 80041ba:	683b      	ldr	r3, [r7, #0]
 80041bc:	3302      	adds	r3, #2
 80041be:	881b      	ldrh	r3, [r3, #0]
 80041c0:	f649 423f 	movw	r2, #39999	@ 0x9c3f
 80041c4:	4293      	cmp	r3, r2
 80041c6:	d80a      	bhi.n	80041de <config_PWM_bits+0x1fe>
 80041c8:	683b      	ldr	r3, [r7, #0]
 80041ca:	3302      	adds	r3, #2
 80041cc:	881b      	ldrh	r3, [r3, #0]
 80041ce:	f649 0257 	movw	r2, #38999	@ 0x9857
 80041d2:	4293      	cmp	r3, r2
 80041d4:	d903      	bls.n	80041de <config_PWM_bits+0x1fe>
							PWM2_1 = 0;
 80041d6:	2300      	movs	r3, #0
 80041d8:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
 80041dc:	e013      	b.n	8004206 <config_PWM_bits+0x226>
						}
						else if(*(cellVoltages + 1) < 39000 && *(cellVoltages + 1) >= 38000) {
 80041de:	683b      	ldr	r3, [r7, #0]
 80041e0:	3302      	adds	r3, #2
 80041e2:	881b      	ldrh	r3, [r3, #0]
 80041e4:	f649 0257 	movw	r2, #38999	@ 0x9857
 80041e8:	4293      	cmp	r3, r2
 80041ea:	f200 81eb 	bhi.w	80045c4 <config_PWM_bits+0x5e4>
 80041ee:	683b      	ldr	r3, [r7, #0]
 80041f0:	3302      	adds	r3, #2
 80041f2:	881b      	ldrh	r3, [r3, #0]
 80041f4:	f249 426f 	movw	r2, #37999	@ 0x946f
 80041f8:	4293      	cmp	r3, r2
 80041fa:	f240 81e3 	bls.w	80045c4 <config_PWM_bits+0x5e4>
							PWM2_0 = 0;
 80041fe:	2300      	movs	r3, #0
 8004200:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
						}
						break;
 8004204:	e1de      	b.n	80045c4 <config_PWM_bits+0x5e4>
 8004206:	e1dd      	b.n	80045c4 <config_PWM_bits+0x5e4>
					case 3:
						if(*(cellVoltages + 2) < 42000 && *(cellVoltages + 2) >= 40000) {
 8004208:	683b      	ldr	r3, [r7, #0]
 800420a:	3304      	adds	r3, #4
 800420c:	881b      	ldrh	r3, [r3, #0]
 800420e:	f24a 420f 	movw	r2, #41999	@ 0xa40f
 8004212:	4293      	cmp	r3, r2
 8004214:	d80d      	bhi.n	8004232 <config_PWM_bits+0x252>
 8004216:	683b      	ldr	r3, [r7, #0]
 8004218:	3304      	adds	r3, #4
 800421a:	881b      	ldrh	r3, [r3, #0]
 800421c:	f649 423f 	movw	r2, #39999	@ 0x9c3f
 8004220:	4293      	cmp	r3, r2
 8004222:	d906      	bls.n	8004232 <config_PWM_bits+0x252>
							PWM3_1 = 0;
 8004224:	2300      	movs	r3, #0
 8004226:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
							PWM3_0 = 0;
 800422a:	2300      	movs	r3, #0
 800422c:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
 8004230:	e025      	b.n	800427e <config_PWM_bits+0x29e>
						}
						else if(*(cellVoltages + 2) < 40000 && *(cellVoltages + 2) >= 39000) {
 8004232:	683b      	ldr	r3, [r7, #0]
 8004234:	3304      	adds	r3, #4
 8004236:	881b      	ldrh	r3, [r3, #0]
 8004238:	f649 423f 	movw	r2, #39999	@ 0x9c3f
 800423c:	4293      	cmp	r3, r2
 800423e:	d80a      	bhi.n	8004256 <config_PWM_bits+0x276>
 8004240:	683b      	ldr	r3, [r7, #0]
 8004242:	3304      	adds	r3, #4
 8004244:	881b      	ldrh	r3, [r3, #0]
 8004246:	f649 0257 	movw	r2, #38999	@ 0x9857
 800424a:	4293      	cmp	r3, r2
 800424c:	d903      	bls.n	8004256 <config_PWM_bits+0x276>
							PWM3_1 = 0;
 800424e:	2300      	movs	r3, #0
 8004250:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
 8004254:	e013      	b.n	800427e <config_PWM_bits+0x29e>
						}
						else if(*(cellVoltages + 2) < 39000 && *(cellVoltages + 2) >= 38000) {
 8004256:	683b      	ldr	r3, [r7, #0]
 8004258:	3304      	adds	r3, #4
 800425a:	881b      	ldrh	r3, [r3, #0]
 800425c:	f649 0257 	movw	r2, #38999	@ 0x9857
 8004260:	4293      	cmp	r3, r2
 8004262:	f200 81b1 	bhi.w	80045c8 <config_PWM_bits+0x5e8>
 8004266:	683b      	ldr	r3, [r7, #0]
 8004268:	3304      	adds	r3, #4
 800426a:	881b      	ldrh	r3, [r3, #0]
 800426c:	f249 426f 	movw	r2, #37999	@ 0x946f
 8004270:	4293      	cmp	r3, r2
 8004272:	f240 81a9 	bls.w	80045c8 <config_PWM_bits+0x5e8>
							PWM3_0 = 0;
 8004276:	2300      	movs	r3, #0
 8004278:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
						}
						break;
 800427c:	e1a4      	b.n	80045c8 <config_PWM_bits+0x5e8>
 800427e:	e1a3      	b.n	80045c8 <config_PWM_bits+0x5e8>
					case 4:
						if(*(cellVoltages + 3) < 42000 && *(cellVoltages + 3) >= 40000) {
 8004280:	683b      	ldr	r3, [r7, #0]
 8004282:	3306      	adds	r3, #6
 8004284:	881b      	ldrh	r3, [r3, #0]
 8004286:	f24a 420f 	movw	r2, #41999	@ 0xa40f
 800428a:	4293      	cmp	r3, r2
 800428c:	d80d      	bhi.n	80042aa <config_PWM_bits+0x2ca>
 800428e:	683b      	ldr	r3, [r7, #0]
 8004290:	3306      	adds	r3, #6
 8004292:	881b      	ldrh	r3, [r3, #0]
 8004294:	f649 423f 	movw	r2, #39999	@ 0x9c3f
 8004298:	4293      	cmp	r3, r2
 800429a:	d906      	bls.n	80042aa <config_PWM_bits+0x2ca>
							PWM4_1 = 0;
 800429c:	2300      	movs	r3, #0
 800429e:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
							PWM4_0 = 0;
 80042a2:	2300      	movs	r3, #0
 80042a4:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
 80042a8:	e025      	b.n	80042f6 <config_PWM_bits+0x316>
						}
						else if(*(cellVoltages + 3) < 40000 && *(cellVoltages + 3) >= 39000) {
 80042aa:	683b      	ldr	r3, [r7, #0]
 80042ac:	3306      	adds	r3, #6
 80042ae:	881b      	ldrh	r3, [r3, #0]
 80042b0:	f649 423f 	movw	r2, #39999	@ 0x9c3f
 80042b4:	4293      	cmp	r3, r2
 80042b6:	d80a      	bhi.n	80042ce <config_PWM_bits+0x2ee>
 80042b8:	683b      	ldr	r3, [r7, #0]
 80042ba:	3306      	adds	r3, #6
 80042bc:	881b      	ldrh	r3, [r3, #0]
 80042be:	f649 0257 	movw	r2, #38999	@ 0x9857
 80042c2:	4293      	cmp	r3, r2
 80042c4:	d903      	bls.n	80042ce <config_PWM_bits+0x2ee>
							PWM4_1 = 0;
 80042c6:	2300      	movs	r3, #0
 80042c8:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
 80042cc:	e013      	b.n	80042f6 <config_PWM_bits+0x316>
						}
						else if(*(cellVoltages + 3) < 39000 && *(cellVoltages + 3) >= 38000) {
 80042ce:	683b      	ldr	r3, [r7, #0]
 80042d0:	3306      	adds	r3, #6
 80042d2:	881b      	ldrh	r3, [r3, #0]
 80042d4:	f649 0257 	movw	r2, #38999	@ 0x9857
 80042d8:	4293      	cmp	r3, r2
 80042da:	f200 8177 	bhi.w	80045cc <config_PWM_bits+0x5ec>
 80042de:	683b      	ldr	r3, [r7, #0]
 80042e0:	3306      	adds	r3, #6
 80042e2:	881b      	ldrh	r3, [r3, #0]
 80042e4:	f249 426f 	movw	r2, #37999	@ 0x946f
 80042e8:	4293      	cmp	r3, r2
 80042ea:	f240 816f 	bls.w	80045cc <config_PWM_bits+0x5ec>
							PWM4_0 = 0;
 80042ee:	2300      	movs	r3, #0
 80042f0:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
						}
						break;
 80042f4:	e16a      	b.n	80045cc <config_PWM_bits+0x5ec>
 80042f6:	e169      	b.n	80045cc <config_PWM_bits+0x5ec>
					case 5:
						if(*(cellVoltages + 4) < 42000 && *(cellVoltages + 4) >= 40000) {
 80042f8:	683b      	ldr	r3, [r7, #0]
 80042fa:	3308      	adds	r3, #8
 80042fc:	881b      	ldrh	r3, [r3, #0]
 80042fe:	f24a 420f 	movw	r2, #41999	@ 0xa40f
 8004302:	4293      	cmp	r3, r2
 8004304:	d80d      	bhi.n	8004322 <config_PWM_bits+0x342>
 8004306:	683b      	ldr	r3, [r7, #0]
 8004308:	3308      	adds	r3, #8
 800430a:	881b      	ldrh	r3, [r3, #0]
 800430c:	f649 423f 	movw	r2, #39999	@ 0x9c3f
 8004310:	4293      	cmp	r3, r2
 8004312:	d906      	bls.n	8004322 <config_PWM_bits+0x342>
							PWM5_1 = 0;
 8004314:	2300      	movs	r3, #0
 8004316:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
							PWM5_0 = 0;
 800431a:	2300      	movs	r3, #0
 800431c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8004320:	e025      	b.n	800436e <config_PWM_bits+0x38e>
						}
						else if(*(cellVoltages + 4) < 40000 && *(cellVoltages + 4) >= 39000) {
 8004322:	683b      	ldr	r3, [r7, #0]
 8004324:	3308      	adds	r3, #8
 8004326:	881b      	ldrh	r3, [r3, #0]
 8004328:	f649 423f 	movw	r2, #39999	@ 0x9c3f
 800432c:	4293      	cmp	r3, r2
 800432e:	d80a      	bhi.n	8004346 <config_PWM_bits+0x366>
 8004330:	683b      	ldr	r3, [r7, #0]
 8004332:	3308      	adds	r3, #8
 8004334:	881b      	ldrh	r3, [r3, #0]
 8004336:	f649 0257 	movw	r2, #38999	@ 0x9857
 800433a:	4293      	cmp	r3, r2
 800433c:	d903      	bls.n	8004346 <config_PWM_bits+0x366>
							PWM5_1 = 0;
 800433e:	2300      	movs	r3, #0
 8004340:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
 8004344:	e013      	b.n	800436e <config_PWM_bits+0x38e>
						}
						else if(*(cellVoltages + 4) < 39000 && *(cellVoltages + 4) >= 38000) {
 8004346:	683b      	ldr	r3, [r7, #0]
 8004348:	3308      	adds	r3, #8
 800434a:	881b      	ldrh	r3, [r3, #0]
 800434c:	f649 0257 	movw	r2, #38999	@ 0x9857
 8004350:	4293      	cmp	r3, r2
 8004352:	f200 813d 	bhi.w	80045d0 <config_PWM_bits+0x5f0>
 8004356:	683b      	ldr	r3, [r7, #0]
 8004358:	3308      	adds	r3, #8
 800435a:	881b      	ldrh	r3, [r3, #0]
 800435c:	f249 426f 	movw	r2, #37999	@ 0x946f
 8004360:	4293      	cmp	r3, r2
 8004362:	f240 8135 	bls.w	80045d0 <config_PWM_bits+0x5f0>
							PWM5_0 = 0;
 8004366:	2300      	movs	r3, #0
 8004368:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
						}
						break;
 800436c:	e130      	b.n	80045d0 <config_PWM_bits+0x5f0>
 800436e:	e12f      	b.n	80045d0 <config_PWM_bits+0x5f0>
					case 6:
						if(*(cellVoltages + 5) < 42000 && *(cellVoltages + 5) >= 40000) {
 8004370:	683b      	ldr	r3, [r7, #0]
 8004372:	330a      	adds	r3, #10
 8004374:	881b      	ldrh	r3, [r3, #0]
 8004376:	f24a 420f 	movw	r2, #41999	@ 0xa40f
 800437a:	4293      	cmp	r3, r2
 800437c:	d80d      	bhi.n	800439a <config_PWM_bits+0x3ba>
 800437e:	683b      	ldr	r3, [r7, #0]
 8004380:	330a      	adds	r3, #10
 8004382:	881b      	ldrh	r3, [r3, #0]
 8004384:	f649 423f 	movw	r2, #39999	@ 0x9c3f
 8004388:	4293      	cmp	r3, r2
 800438a:	d906      	bls.n	800439a <config_PWM_bits+0x3ba>
							PWM6_1 = 0;
 800438c:	2300      	movs	r3, #0
 800438e:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
							PWM6_0 = 0;
 8004392:	2300      	movs	r3, #0
 8004394:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
 8004398:	e025      	b.n	80043e6 <config_PWM_bits+0x406>
						}
						else if(*(cellVoltages + 5) < 40000 && *(cellVoltages + 5) >= 39000) {
 800439a:	683b      	ldr	r3, [r7, #0]
 800439c:	330a      	adds	r3, #10
 800439e:	881b      	ldrh	r3, [r3, #0]
 80043a0:	f649 423f 	movw	r2, #39999	@ 0x9c3f
 80043a4:	4293      	cmp	r3, r2
 80043a6:	d80a      	bhi.n	80043be <config_PWM_bits+0x3de>
 80043a8:	683b      	ldr	r3, [r7, #0]
 80043aa:	330a      	adds	r3, #10
 80043ac:	881b      	ldrh	r3, [r3, #0]
 80043ae:	f649 0257 	movw	r2, #38999	@ 0x9857
 80043b2:	4293      	cmp	r3, r2
 80043b4:	d903      	bls.n	80043be <config_PWM_bits+0x3de>
							PWM6_1 = 0;
 80043b6:	2300      	movs	r3, #0
 80043b8:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
 80043bc:	e013      	b.n	80043e6 <config_PWM_bits+0x406>
						}
						else if(*(cellVoltages + 5) < 39000 && *(cellVoltages + 5) >= 38000) {
 80043be:	683b      	ldr	r3, [r7, #0]
 80043c0:	330a      	adds	r3, #10
 80043c2:	881b      	ldrh	r3, [r3, #0]
 80043c4:	f649 0257 	movw	r2, #38999	@ 0x9857
 80043c8:	4293      	cmp	r3, r2
 80043ca:	f200 8103 	bhi.w	80045d4 <config_PWM_bits+0x5f4>
 80043ce:	683b      	ldr	r3, [r7, #0]
 80043d0:	330a      	adds	r3, #10
 80043d2:	881b      	ldrh	r3, [r3, #0]
 80043d4:	f249 426f 	movw	r2, #37999	@ 0x946f
 80043d8:	4293      	cmp	r3, r2
 80043da:	f240 80fb 	bls.w	80045d4 <config_PWM_bits+0x5f4>
							PWM6_0 = 0;
 80043de:	2300      	movs	r3, #0
 80043e0:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
						}
						break;
 80043e4:	e0f6      	b.n	80045d4 <config_PWM_bits+0x5f4>
 80043e6:	e0f5      	b.n	80045d4 <config_PWM_bits+0x5f4>
					case 7:
						if(*(cellVoltages + 6) < 42000 && *(cellVoltages + 6) >= 40000) {
 80043e8:	683b      	ldr	r3, [r7, #0]
 80043ea:	330c      	adds	r3, #12
 80043ec:	881b      	ldrh	r3, [r3, #0]
 80043ee:	f24a 420f 	movw	r2, #41999	@ 0xa40f
 80043f2:	4293      	cmp	r3, r2
 80043f4:	d80d      	bhi.n	8004412 <config_PWM_bits+0x432>
 80043f6:	683b      	ldr	r3, [r7, #0]
 80043f8:	330c      	adds	r3, #12
 80043fa:	881b      	ldrh	r3, [r3, #0]
 80043fc:	f649 423f 	movw	r2, #39999	@ 0x9c3f
 8004400:	4293      	cmp	r3, r2
 8004402:	d906      	bls.n	8004412 <config_PWM_bits+0x432>
							PWM7_1 = 0;
 8004404:	2300      	movs	r3, #0
 8004406:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
							PWM7_0 = 0;
 800440a:	2300      	movs	r3, #0
 800440c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 8004410:	e025      	b.n	800445e <config_PWM_bits+0x47e>
						}
						else if(*(cellVoltages + 6) < 40000 && *(cellVoltages + 6) >= 39000) {
 8004412:	683b      	ldr	r3, [r7, #0]
 8004414:	330c      	adds	r3, #12
 8004416:	881b      	ldrh	r3, [r3, #0]
 8004418:	f649 423f 	movw	r2, #39999	@ 0x9c3f
 800441c:	4293      	cmp	r3, r2
 800441e:	d80a      	bhi.n	8004436 <config_PWM_bits+0x456>
 8004420:	683b      	ldr	r3, [r7, #0]
 8004422:	330c      	adds	r3, #12
 8004424:	881b      	ldrh	r3, [r3, #0]
 8004426:	f649 0257 	movw	r2, #38999	@ 0x9857
 800442a:	4293      	cmp	r3, r2
 800442c:	d903      	bls.n	8004436 <config_PWM_bits+0x456>
							PWM7_1 = 0;
 800442e:	2300      	movs	r3, #0
 8004430:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
 8004434:	e013      	b.n	800445e <config_PWM_bits+0x47e>
						}
						else if(*(cellVoltages + 6) < 39000 && *(cellVoltages + 6) >= 38000) {
 8004436:	683b      	ldr	r3, [r7, #0]
 8004438:	330c      	adds	r3, #12
 800443a:	881b      	ldrh	r3, [r3, #0]
 800443c:	f649 0257 	movw	r2, #38999	@ 0x9857
 8004440:	4293      	cmp	r3, r2
 8004442:	f200 80c9 	bhi.w	80045d8 <config_PWM_bits+0x5f8>
 8004446:	683b      	ldr	r3, [r7, #0]
 8004448:	330c      	adds	r3, #12
 800444a:	881b      	ldrh	r3, [r3, #0]
 800444c:	f249 426f 	movw	r2, #37999	@ 0x946f
 8004450:	4293      	cmp	r3, r2
 8004452:	f240 80c1 	bls.w	80045d8 <config_PWM_bits+0x5f8>
							PWM7_0 = 0;
 8004456:	2300      	movs	r3, #0
 8004458:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
						}
						break;
 800445c:	e0bc      	b.n	80045d8 <config_PWM_bits+0x5f8>
 800445e:	e0bb      	b.n	80045d8 <config_PWM_bits+0x5f8>
					case 8:
						if(*(cellVoltages + 7) < 42000 && *(cellVoltages + 7) >= 40000) {
 8004460:	683b      	ldr	r3, [r7, #0]
 8004462:	330e      	adds	r3, #14
 8004464:	881b      	ldrh	r3, [r3, #0]
 8004466:	f24a 420f 	movw	r2, #41999	@ 0xa40f
 800446a:	4293      	cmp	r3, r2
 800446c:	d80d      	bhi.n	800448a <config_PWM_bits+0x4aa>
 800446e:	683b      	ldr	r3, [r7, #0]
 8004470:	330e      	adds	r3, #14
 8004472:	881b      	ldrh	r3, [r3, #0]
 8004474:	f649 423f 	movw	r2, #39999	@ 0x9c3f
 8004478:	4293      	cmp	r3, r2
 800447a:	d906      	bls.n	800448a <config_PWM_bits+0x4aa>
							PWM8_1 = 0;
 800447c:	2300      	movs	r3, #0
 800447e:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
							PWM8_0 = 0;
 8004482:	2300      	movs	r3, #0
 8004484:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
 8004488:	e025      	b.n	80044d6 <config_PWM_bits+0x4f6>
						}
						else if(*(cellVoltages + 7) < 40000 && *(cellVoltages + 7) >= 39000) {
 800448a:	683b      	ldr	r3, [r7, #0]
 800448c:	330e      	adds	r3, #14
 800448e:	881b      	ldrh	r3, [r3, #0]
 8004490:	f649 423f 	movw	r2, #39999	@ 0x9c3f
 8004494:	4293      	cmp	r3, r2
 8004496:	d80a      	bhi.n	80044ae <config_PWM_bits+0x4ce>
 8004498:	683b      	ldr	r3, [r7, #0]
 800449a:	330e      	adds	r3, #14
 800449c:	881b      	ldrh	r3, [r3, #0]
 800449e:	f649 0257 	movw	r2, #38999	@ 0x9857
 80044a2:	4293      	cmp	r3, r2
 80044a4:	d903      	bls.n	80044ae <config_PWM_bits+0x4ce>
							PWM8_1 = 0;
 80044a6:	2300      	movs	r3, #0
 80044a8:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
 80044ac:	e013      	b.n	80044d6 <config_PWM_bits+0x4f6>
						}
						else if(*(cellVoltages + 7) < 39000 && *(cellVoltages + 7) >= 38000) {
 80044ae:	683b      	ldr	r3, [r7, #0]
 80044b0:	330e      	adds	r3, #14
 80044b2:	881b      	ldrh	r3, [r3, #0]
 80044b4:	f649 0257 	movw	r2, #38999	@ 0x9857
 80044b8:	4293      	cmp	r3, r2
 80044ba:	f200 808f 	bhi.w	80045dc <config_PWM_bits+0x5fc>
 80044be:	683b      	ldr	r3, [r7, #0]
 80044c0:	330e      	adds	r3, #14
 80044c2:	881b      	ldrh	r3, [r3, #0]
 80044c4:	f249 426f 	movw	r2, #37999	@ 0x946f
 80044c8:	4293      	cmp	r3, r2
 80044ca:	f240 8087 	bls.w	80045dc <config_PWM_bits+0x5fc>
							PWM8_0 = 0;
 80044ce:	2300      	movs	r3, #0
 80044d0:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
						}
						break;
 80044d4:	e082      	b.n	80045dc <config_PWM_bits+0x5fc>
 80044d6:	e081      	b.n	80045dc <config_PWM_bits+0x5fc>
					case 9:
						if(*(cellVoltages + 8) < 42000 && *(cellVoltages + 8) >= 40000) {
 80044d8:	683b      	ldr	r3, [r7, #0]
 80044da:	3310      	adds	r3, #16
 80044dc:	881b      	ldrh	r3, [r3, #0]
 80044de:	f24a 420f 	movw	r2, #41999	@ 0xa40f
 80044e2:	4293      	cmp	r3, r2
 80044e4:	d80d      	bhi.n	8004502 <config_PWM_bits+0x522>
 80044e6:	683b      	ldr	r3, [r7, #0]
 80044e8:	3310      	adds	r3, #16
 80044ea:	881b      	ldrh	r3, [r3, #0]
 80044ec:	f649 423f 	movw	r2, #39999	@ 0x9c3f
 80044f0:	4293      	cmp	r3, r2
 80044f2:	d906      	bls.n	8004502 <config_PWM_bits+0x522>
							PWM9_1 = 0;
 80044f4:	2300      	movs	r3, #0
 80044f6:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
							PWM9_0 = 0;
 80044fa:	2300      	movs	r3, #0
 80044fc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8004500:	e023      	b.n	800454a <config_PWM_bits+0x56a>
						}
						else if(*(cellVoltages + 8) < 40000 && *(cellVoltages + 8) >= 39000) {
 8004502:	683b      	ldr	r3, [r7, #0]
 8004504:	3310      	adds	r3, #16
 8004506:	881b      	ldrh	r3, [r3, #0]
 8004508:	f649 423f 	movw	r2, #39999	@ 0x9c3f
 800450c:	4293      	cmp	r3, r2
 800450e:	d80a      	bhi.n	8004526 <config_PWM_bits+0x546>
 8004510:	683b      	ldr	r3, [r7, #0]
 8004512:	3310      	adds	r3, #16
 8004514:	881b      	ldrh	r3, [r3, #0]
 8004516:	f649 0257 	movw	r2, #38999	@ 0x9857
 800451a:	4293      	cmp	r3, r2
 800451c:	d903      	bls.n	8004526 <config_PWM_bits+0x546>
							PWM9_1 = 0;
 800451e:	2300      	movs	r3, #0
 8004520:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 8004524:	e011      	b.n	800454a <config_PWM_bits+0x56a>
						}
						else if(*(cellVoltages + 8) < 39000 && *(cellVoltages + 8) >= 38000) {
 8004526:	683b      	ldr	r3, [r7, #0]
 8004528:	3310      	adds	r3, #16
 800452a:	881b      	ldrh	r3, [r3, #0]
 800452c:	f649 0257 	movw	r2, #38999	@ 0x9857
 8004530:	4293      	cmp	r3, r2
 8004532:	d855      	bhi.n	80045e0 <config_PWM_bits+0x600>
 8004534:	683b      	ldr	r3, [r7, #0]
 8004536:	3310      	adds	r3, #16
 8004538:	881b      	ldrh	r3, [r3, #0]
 800453a:	f249 426f 	movw	r2, #37999	@ 0x946f
 800453e:	4293      	cmp	r3, r2
 8004540:	d94e      	bls.n	80045e0 <config_PWM_bits+0x600>
							PWM9_0 = 0;
 8004542:	2300      	movs	r3, #0
 8004544:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
						}
						break;
 8004548:	e04a      	b.n	80045e0 <config_PWM_bits+0x600>
 800454a:	e049      	b.n	80045e0 <config_PWM_bits+0x600>
					case 10:
						if(*(cellVoltages + 9) < 42000 && *(cellVoltages + 9) >= 40000) {
 800454c:	683b      	ldr	r3, [r7, #0]
 800454e:	3312      	adds	r3, #18
 8004550:	881b      	ldrh	r3, [r3, #0]
 8004552:	f24a 420f 	movw	r2, #41999	@ 0xa40f
 8004556:	4293      	cmp	r3, r2
 8004558:	d80d      	bhi.n	8004576 <config_PWM_bits+0x596>
 800455a:	683b      	ldr	r3, [r7, #0]
 800455c:	3312      	adds	r3, #18
 800455e:	881b      	ldrh	r3, [r3, #0]
 8004560:	f649 423f 	movw	r2, #39999	@ 0x9c3f
 8004564:	4293      	cmp	r3, r2
 8004566:	d906      	bls.n	8004576 <config_PWM_bits+0x596>
							PWM10_1 = 0;
 8004568:	2300      	movs	r3, #0
 800456a:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
							PWM10_0 = 0;
 800456e:	2300      	movs	r3, #0
 8004570:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
 8004574:	e023      	b.n	80045be <config_PWM_bits+0x5de>
						}
						else if(*(cellVoltages + 9) < 40000 && *(cellVoltages + 9) >= 39000) {
 8004576:	683b      	ldr	r3, [r7, #0]
 8004578:	3312      	adds	r3, #18
 800457a:	881b      	ldrh	r3, [r3, #0]
 800457c:	f649 423f 	movw	r2, #39999	@ 0x9c3f
 8004580:	4293      	cmp	r3, r2
 8004582:	d80a      	bhi.n	800459a <config_PWM_bits+0x5ba>
 8004584:	683b      	ldr	r3, [r7, #0]
 8004586:	3312      	adds	r3, #18
 8004588:	881b      	ldrh	r3, [r3, #0]
 800458a:	f649 0257 	movw	r2, #38999	@ 0x9857
 800458e:	4293      	cmp	r3, r2
 8004590:	d903      	bls.n	800459a <config_PWM_bits+0x5ba>
							PWM10_1 = 0;
 8004592:	2300      	movs	r3, #0
 8004594:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
 8004598:	e011      	b.n	80045be <config_PWM_bits+0x5de>
						}
						else if(*(cellVoltages + 9) < 39000 && *(cellVoltages + 9) >= 38000) {
 800459a:	683b      	ldr	r3, [r7, #0]
 800459c:	3312      	adds	r3, #18
 800459e:	881b      	ldrh	r3, [r3, #0]
 80045a0:	f649 0257 	movw	r2, #38999	@ 0x9857
 80045a4:	4293      	cmp	r3, r2
 80045a6:	d81d      	bhi.n	80045e4 <config_PWM_bits+0x604>
 80045a8:	683b      	ldr	r3, [r7, #0]
 80045aa:	3312      	adds	r3, #18
 80045ac:	881b      	ldrh	r3, [r3, #0]
 80045ae:	f249 426f 	movw	r2, #37999	@ 0x946f
 80045b2:	4293      	cmp	r3, r2
 80045b4:	d916      	bls.n	80045e4 <config_PWM_bits+0x604>
							PWM10_0 = 0;
 80045b6:	2300      	movs	r3, #0
 80045b8:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
						}
						break;
 80045bc:	e012      	b.n	80045e4 <config_PWM_bits+0x604>
 80045be:	e011      	b.n	80045e4 <config_PWM_bits+0x604>
						break;
 80045c0:	bf00      	nop
 80045c2:	e010      	b.n	80045e6 <config_PWM_bits+0x606>
						break;
 80045c4:	bf00      	nop
 80045c6:	e00e      	b.n	80045e6 <config_PWM_bits+0x606>
						break;
 80045c8:	bf00      	nop
 80045ca:	e00c      	b.n	80045e6 <config_PWM_bits+0x606>
						break;
 80045cc:	bf00      	nop
 80045ce:	e00a      	b.n	80045e6 <config_PWM_bits+0x606>
						break;
 80045d0:	bf00      	nop
 80045d2:	e008      	b.n	80045e6 <config_PWM_bits+0x606>
						break;
 80045d4:	bf00      	nop
 80045d6:	e006      	b.n	80045e6 <config_PWM_bits+0x606>
						break;
 80045d8:	bf00      	nop
 80045da:	e004      	b.n	80045e6 <config_PWM_bits+0x606>
						break;
 80045dc:	bf00      	nop
 80045de:	e002      	b.n	80045e6 <config_PWM_bits+0x606>
						break;
 80045e0:	bf00      	nop
 80045e2:	e000      	b.n	80045e6 <config_PWM_bits+0x606>
						break;
 80045e4:	bf00      	nop
			for(uint8_t i = 0; i < cellsToBalanceQty; i++) {
 80045e6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80045ea:	3301      	adds	r3, #1
 80045ec:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80045f0:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 80045f4:	7afb      	ldrb	r3, [r7, #11]
 80045f6:	429a      	cmp	r2, r3
 80045f8:	f4ff ad74 	bcc.w	80040e4 <config_PWM_bits+0x104>
				}
			}
			break;
 80045fc:	e297      	b.n	8004b2e <config_PWM_bits+0xb4e>
		case SIDE_B:
			for(uint8_t i = 0; i < cellsToBalanceQty; i++) {
 80045fe:	2300      	movs	r3, #0
 8004600:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8004604:	e28c      	b.n	8004b20 <config_PWM_bits+0xb40>
				switch(*(cellsToBalance + i)) {
 8004606:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800460a:	68fa      	ldr	r2, [r7, #12]
 800460c:	4413      	add	r3, r2
 800460e:	781b      	ldrb	r3, [r3, #0]
 8004610:	3b01      	subs	r3, #1
 8004612:	2b09      	cmp	r3, #9
 8004614:	f200 827f 	bhi.w	8004b16 <config_PWM_bits+0xb36>
 8004618:	a201      	add	r2, pc, #4	@ (adr r2, 8004620 <config_PWM_bits+0x640>)
 800461a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800461e:	bf00      	nop
 8004620:	08004649 	.word	0x08004649
 8004624:	080046c1 	.word	0x080046c1
 8004628:	08004739 	.word	0x08004739
 800462c:	080047b1 	.word	0x080047b1
 8004630:	08004829 	.word	0x08004829
 8004634:	080048a1 	.word	0x080048a1
 8004638:	08004919 	.word	0x08004919
 800463c:	08004991 	.word	0x08004991
 8004640:	08004a09 	.word	0x08004a09
 8004644:	08004a7d 	.word	0x08004a7d
					case 1:
						if(*(cellVoltages + 10) < 42000 && *(cellVoltages + 10) >= 40000) {
 8004648:	683b      	ldr	r3, [r7, #0]
 800464a:	3314      	adds	r3, #20
 800464c:	881b      	ldrh	r3, [r3, #0]
 800464e:	f24a 420f 	movw	r2, #41999	@ 0xa40f
 8004652:	4293      	cmp	r3, r2
 8004654:	d80d      	bhi.n	8004672 <config_PWM_bits+0x692>
 8004656:	683b      	ldr	r3, [r7, #0]
 8004658:	3314      	adds	r3, #20
 800465a:	881b      	ldrh	r3, [r3, #0]
 800465c:	f649 423f 	movw	r2, #39999	@ 0x9c3f
 8004660:	4293      	cmp	r3, r2
 8004662:	d906      	bls.n	8004672 <config_PWM_bits+0x692>
							PWM1_1 = 0;
 8004664:	2300      	movs	r3, #0
 8004666:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
							PWM1_0 = 0;
 800466a:	2300      	movs	r3, #0
 800466c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8004670:	e025      	b.n	80046be <config_PWM_bits+0x6de>
						}
						else if(*(cellVoltages + 10) < 40000 && *(cellVoltages + 10) >= 39000) {
 8004672:	683b      	ldr	r3, [r7, #0]
 8004674:	3314      	adds	r3, #20
 8004676:	881b      	ldrh	r3, [r3, #0]
 8004678:	f649 423f 	movw	r2, #39999	@ 0x9c3f
 800467c:	4293      	cmp	r3, r2
 800467e:	d80a      	bhi.n	8004696 <config_PWM_bits+0x6b6>
 8004680:	683b      	ldr	r3, [r7, #0]
 8004682:	3314      	adds	r3, #20
 8004684:	881b      	ldrh	r3, [r3, #0]
 8004686:	f649 0257 	movw	r2, #38999	@ 0x9857
 800468a:	4293      	cmp	r3, r2
 800468c:	d903      	bls.n	8004696 <config_PWM_bits+0x6b6>
							PWM1_1 = 0;
 800468e:	2300      	movs	r3, #0
 8004690:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
 8004694:	e013      	b.n	80046be <config_PWM_bits+0x6de>
						}
						else if(*(cellVoltages + 10) < 39000 && *(cellVoltages + 10) >= 38000) {
 8004696:	683b      	ldr	r3, [r7, #0]
 8004698:	3314      	adds	r3, #20
 800469a:	881b      	ldrh	r3, [r3, #0]
 800469c:	f649 0257 	movw	r2, #38999	@ 0x9857
 80046a0:	4293      	cmp	r3, r2
 80046a2:	f200 8225 	bhi.w	8004af0 <config_PWM_bits+0xb10>
 80046a6:	683b      	ldr	r3, [r7, #0]
 80046a8:	3314      	adds	r3, #20
 80046aa:	881b      	ldrh	r3, [r3, #0]
 80046ac:	f249 426f 	movw	r2, #37999	@ 0x946f
 80046b0:	4293      	cmp	r3, r2
 80046b2:	f240 821d 	bls.w	8004af0 <config_PWM_bits+0xb10>
							PWM1_0 = 0;
 80046b6:	2300      	movs	r3, #0
 80046b8:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
						}
						break;
 80046bc:	e218      	b.n	8004af0 <config_PWM_bits+0xb10>
 80046be:	e217      	b.n	8004af0 <config_PWM_bits+0xb10>
					case 2:
						if(*(cellVoltages + 11) < 42000 && *(cellVoltages + 11) >= 40000) {
 80046c0:	683b      	ldr	r3, [r7, #0]
 80046c2:	3316      	adds	r3, #22
 80046c4:	881b      	ldrh	r3, [r3, #0]
 80046c6:	f24a 420f 	movw	r2, #41999	@ 0xa40f
 80046ca:	4293      	cmp	r3, r2
 80046cc:	d80d      	bhi.n	80046ea <config_PWM_bits+0x70a>
 80046ce:	683b      	ldr	r3, [r7, #0]
 80046d0:	3316      	adds	r3, #22
 80046d2:	881b      	ldrh	r3, [r3, #0]
 80046d4:	f649 423f 	movw	r2, #39999	@ 0x9c3f
 80046d8:	4293      	cmp	r3, r2
 80046da:	d906      	bls.n	80046ea <config_PWM_bits+0x70a>
							PWM2_1 = 0;
 80046dc:	2300      	movs	r3, #0
 80046de:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
							PWM2_0 = 0;
 80046e2:	2300      	movs	r3, #0
 80046e4:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
 80046e8:	e025      	b.n	8004736 <config_PWM_bits+0x756>
						}
						else if(*(cellVoltages + 11) < 40000 && *(cellVoltages + 11) >= 39000) {
 80046ea:	683b      	ldr	r3, [r7, #0]
 80046ec:	3316      	adds	r3, #22
 80046ee:	881b      	ldrh	r3, [r3, #0]
 80046f0:	f649 423f 	movw	r2, #39999	@ 0x9c3f
 80046f4:	4293      	cmp	r3, r2
 80046f6:	d80a      	bhi.n	800470e <config_PWM_bits+0x72e>
 80046f8:	683b      	ldr	r3, [r7, #0]
 80046fa:	3316      	adds	r3, #22
 80046fc:	881b      	ldrh	r3, [r3, #0]
 80046fe:	f649 0257 	movw	r2, #38999	@ 0x9857
 8004702:	4293      	cmp	r3, r2
 8004704:	d903      	bls.n	800470e <config_PWM_bits+0x72e>
							PWM2_1 = 0;
 8004706:	2300      	movs	r3, #0
 8004708:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
 800470c:	e013      	b.n	8004736 <config_PWM_bits+0x756>
						}
						else if(*(cellVoltages + 11) < 39000 && *(cellVoltages + 11) >= 38000) {
 800470e:	683b      	ldr	r3, [r7, #0]
 8004710:	3316      	adds	r3, #22
 8004712:	881b      	ldrh	r3, [r3, #0]
 8004714:	f649 0257 	movw	r2, #38999	@ 0x9857
 8004718:	4293      	cmp	r3, r2
 800471a:	f200 81eb 	bhi.w	8004af4 <config_PWM_bits+0xb14>
 800471e:	683b      	ldr	r3, [r7, #0]
 8004720:	3316      	adds	r3, #22
 8004722:	881b      	ldrh	r3, [r3, #0]
 8004724:	f249 426f 	movw	r2, #37999	@ 0x946f
 8004728:	4293      	cmp	r3, r2
 800472a:	f240 81e3 	bls.w	8004af4 <config_PWM_bits+0xb14>
							PWM2_0 = 0;
 800472e:	2300      	movs	r3, #0
 8004730:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
						}
						break;
 8004734:	e1de      	b.n	8004af4 <config_PWM_bits+0xb14>
 8004736:	e1dd      	b.n	8004af4 <config_PWM_bits+0xb14>
					case 3:
						if(*(cellVoltages + 12) < 42000 && *(cellVoltages + 12) >= 40000) {
 8004738:	683b      	ldr	r3, [r7, #0]
 800473a:	3318      	adds	r3, #24
 800473c:	881b      	ldrh	r3, [r3, #0]
 800473e:	f24a 420f 	movw	r2, #41999	@ 0xa40f
 8004742:	4293      	cmp	r3, r2
 8004744:	d80d      	bhi.n	8004762 <config_PWM_bits+0x782>
 8004746:	683b      	ldr	r3, [r7, #0]
 8004748:	3318      	adds	r3, #24
 800474a:	881b      	ldrh	r3, [r3, #0]
 800474c:	f649 423f 	movw	r2, #39999	@ 0x9c3f
 8004750:	4293      	cmp	r3, r2
 8004752:	d906      	bls.n	8004762 <config_PWM_bits+0x782>
							PWM3_1 = 0;
 8004754:	2300      	movs	r3, #0
 8004756:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
							PWM3_0 = 0;
 800475a:	2300      	movs	r3, #0
 800475c:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
 8004760:	e025      	b.n	80047ae <config_PWM_bits+0x7ce>
						}
						else if(*(cellVoltages + 12) < 40000 && *(cellVoltages + 12) >= 39000) {
 8004762:	683b      	ldr	r3, [r7, #0]
 8004764:	3318      	adds	r3, #24
 8004766:	881b      	ldrh	r3, [r3, #0]
 8004768:	f649 423f 	movw	r2, #39999	@ 0x9c3f
 800476c:	4293      	cmp	r3, r2
 800476e:	d80a      	bhi.n	8004786 <config_PWM_bits+0x7a6>
 8004770:	683b      	ldr	r3, [r7, #0]
 8004772:	3318      	adds	r3, #24
 8004774:	881b      	ldrh	r3, [r3, #0]
 8004776:	f649 0257 	movw	r2, #38999	@ 0x9857
 800477a:	4293      	cmp	r3, r2
 800477c:	d903      	bls.n	8004786 <config_PWM_bits+0x7a6>
							PWM3_1 = 0;
 800477e:	2300      	movs	r3, #0
 8004780:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
 8004784:	e013      	b.n	80047ae <config_PWM_bits+0x7ce>
						}
						else if(*(cellVoltages + 12) < 39000 && *(cellVoltages + 12) >= 38000) {
 8004786:	683b      	ldr	r3, [r7, #0]
 8004788:	3318      	adds	r3, #24
 800478a:	881b      	ldrh	r3, [r3, #0]
 800478c:	f649 0257 	movw	r2, #38999	@ 0x9857
 8004790:	4293      	cmp	r3, r2
 8004792:	f200 81b1 	bhi.w	8004af8 <config_PWM_bits+0xb18>
 8004796:	683b      	ldr	r3, [r7, #0]
 8004798:	3318      	adds	r3, #24
 800479a:	881b      	ldrh	r3, [r3, #0]
 800479c:	f249 426f 	movw	r2, #37999	@ 0x946f
 80047a0:	4293      	cmp	r3, r2
 80047a2:	f240 81a9 	bls.w	8004af8 <config_PWM_bits+0xb18>
							PWM3_0 = 0;
 80047a6:	2300      	movs	r3, #0
 80047a8:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
						}
						break;
 80047ac:	e1a4      	b.n	8004af8 <config_PWM_bits+0xb18>
 80047ae:	e1a3      	b.n	8004af8 <config_PWM_bits+0xb18>
					case 4:
						if(*(cellVoltages + 13) < 42000 && *(cellVoltages + 13) >= 40000) {
 80047b0:	683b      	ldr	r3, [r7, #0]
 80047b2:	331a      	adds	r3, #26
 80047b4:	881b      	ldrh	r3, [r3, #0]
 80047b6:	f24a 420f 	movw	r2, #41999	@ 0xa40f
 80047ba:	4293      	cmp	r3, r2
 80047bc:	d80d      	bhi.n	80047da <config_PWM_bits+0x7fa>
 80047be:	683b      	ldr	r3, [r7, #0]
 80047c0:	331a      	adds	r3, #26
 80047c2:	881b      	ldrh	r3, [r3, #0]
 80047c4:	f649 423f 	movw	r2, #39999	@ 0x9c3f
 80047c8:	4293      	cmp	r3, r2
 80047ca:	d906      	bls.n	80047da <config_PWM_bits+0x7fa>
							PWM4_1 = 0;
 80047cc:	2300      	movs	r3, #0
 80047ce:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
							PWM4_0 = 0;
 80047d2:	2300      	movs	r3, #0
 80047d4:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
 80047d8:	e025      	b.n	8004826 <config_PWM_bits+0x846>
						}
						else if(*(cellVoltages + 13) < 40000 && *(cellVoltages + 13) >= 39000) {
 80047da:	683b      	ldr	r3, [r7, #0]
 80047dc:	331a      	adds	r3, #26
 80047de:	881b      	ldrh	r3, [r3, #0]
 80047e0:	f649 423f 	movw	r2, #39999	@ 0x9c3f
 80047e4:	4293      	cmp	r3, r2
 80047e6:	d80a      	bhi.n	80047fe <config_PWM_bits+0x81e>
 80047e8:	683b      	ldr	r3, [r7, #0]
 80047ea:	331a      	adds	r3, #26
 80047ec:	881b      	ldrh	r3, [r3, #0]
 80047ee:	f649 0257 	movw	r2, #38999	@ 0x9857
 80047f2:	4293      	cmp	r3, r2
 80047f4:	d903      	bls.n	80047fe <config_PWM_bits+0x81e>
							PWM4_1 = 0;
 80047f6:	2300      	movs	r3, #0
 80047f8:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
 80047fc:	e013      	b.n	8004826 <config_PWM_bits+0x846>
						}
						else if(*(cellVoltages + 13) < 39000 && *(cellVoltages + 13) >= 38000) {
 80047fe:	683b      	ldr	r3, [r7, #0]
 8004800:	331a      	adds	r3, #26
 8004802:	881b      	ldrh	r3, [r3, #0]
 8004804:	f649 0257 	movw	r2, #38999	@ 0x9857
 8004808:	4293      	cmp	r3, r2
 800480a:	f200 8177 	bhi.w	8004afc <config_PWM_bits+0xb1c>
 800480e:	683b      	ldr	r3, [r7, #0]
 8004810:	331a      	adds	r3, #26
 8004812:	881b      	ldrh	r3, [r3, #0]
 8004814:	f249 426f 	movw	r2, #37999	@ 0x946f
 8004818:	4293      	cmp	r3, r2
 800481a:	f240 816f 	bls.w	8004afc <config_PWM_bits+0xb1c>
							PWM4_0 = 0;
 800481e:	2300      	movs	r3, #0
 8004820:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
						}
						break;
 8004824:	e16a      	b.n	8004afc <config_PWM_bits+0xb1c>
 8004826:	e169      	b.n	8004afc <config_PWM_bits+0xb1c>
					case 5:
						if(*(cellVoltages + 14) < 42000 && *(cellVoltages + 14) >= 40000) {
 8004828:	683b      	ldr	r3, [r7, #0]
 800482a:	331c      	adds	r3, #28
 800482c:	881b      	ldrh	r3, [r3, #0]
 800482e:	f24a 420f 	movw	r2, #41999	@ 0xa40f
 8004832:	4293      	cmp	r3, r2
 8004834:	d80d      	bhi.n	8004852 <config_PWM_bits+0x872>
 8004836:	683b      	ldr	r3, [r7, #0]
 8004838:	331c      	adds	r3, #28
 800483a:	881b      	ldrh	r3, [r3, #0]
 800483c:	f649 423f 	movw	r2, #39999	@ 0x9c3f
 8004840:	4293      	cmp	r3, r2
 8004842:	d906      	bls.n	8004852 <config_PWM_bits+0x872>
							PWM5_1 = 0;
 8004844:	2300      	movs	r3, #0
 8004846:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
							PWM5_0 = 0;
 800484a:	2300      	movs	r3, #0
 800484c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8004850:	e025      	b.n	800489e <config_PWM_bits+0x8be>
						}
						else if(*(cellVoltages + 14) < 40000 && *(cellVoltages + 14) >= 39000) {
 8004852:	683b      	ldr	r3, [r7, #0]
 8004854:	331c      	adds	r3, #28
 8004856:	881b      	ldrh	r3, [r3, #0]
 8004858:	f649 423f 	movw	r2, #39999	@ 0x9c3f
 800485c:	4293      	cmp	r3, r2
 800485e:	d80a      	bhi.n	8004876 <config_PWM_bits+0x896>
 8004860:	683b      	ldr	r3, [r7, #0]
 8004862:	331c      	adds	r3, #28
 8004864:	881b      	ldrh	r3, [r3, #0]
 8004866:	f649 0257 	movw	r2, #38999	@ 0x9857
 800486a:	4293      	cmp	r3, r2
 800486c:	d903      	bls.n	8004876 <config_PWM_bits+0x896>
							PWM5_1 = 0;
 800486e:	2300      	movs	r3, #0
 8004870:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
 8004874:	e013      	b.n	800489e <config_PWM_bits+0x8be>
						}
						else if(*(cellVoltages + 14) < 39000 && *(cellVoltages + 14) >= 38000) {
 8004876:	683b      	ldr	r3, [r7, #0]
 8004878:	331c      	adds	r3, #28
 800487a:	881b      	ldrh	r3, [r3, #0]
 800487c:	f649 0257 	movw	r2, #38999	@ 0x9857
 8004880:	4293      	cmp	r3, r2
 8004882:	f200 813d 	bhi.w	8004b00 <config_PWM_bits+0xb20>
 8004886:	683b      	ldr	r3, [r7, #0]
 8004888:	331c      	adds	r3, #28
 800488a:	881b      	ldrh	r3, [r3, #0]
 800488c:	f249 426f 	movw	r2, #37999	@ 0x946f
 8004890:	4293      	cmp	r3, r2
 8004892:	f240 8135 	bls.w	8004b00 <config_PWM_bits+0xb20>
							PWM5_0 = 0;
 8004896:	2300      	movs	r3, #0
 8004898:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
						}
						break;
 800489c:	e130      	b.n	8004b00 <config_PWM_bits+0xb20>
 800489e:	e12f      	b.n	8004b00 <config_PWM_bits+0xb20>
					case 6:
						if(*(cellVoltages + 15) < 42000 && *(cellVoltages + 15) >= 40000) {
 80048a0:	683b      	ldr	r3, [r7, #0]
 80048a2:	331e      	adds	r3, #30
 80048a4:	881b      	ldrh	r3, [r3, #0]
 80048a6:	f24a 420f 	movw	r2, #41999	@ 0xa40f
 80048aa:	4293      	cmp	r3, r2
 80048ac:	d80d      	bhi.n	80048ca <config_PWM_bits+0x8ea>
 80048ae:	683b      	ldr	r3, [r7, #0]
 80048b0:	331e      	adds	r3, #30
 80048b2:	881b      	ldrh	r3, [r3, #0]
 80048b4:	f649 423f 	movw	r2, #39999	@ 0x9c3f
 80048b8:	4293      	cmp	r3, r2
 80048ba:	d906      	bls.n	80048ca <config_PWM_bits+0x8ea>
							PWM6_1 = 0;
 80048bc:	2300      	movs	r3, #0
 80048be:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
							PWM6_0 = 0;
 80048c2:	2300      	movs	r3, #0
 80048c4:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
 80048c8:	e025      	b.n	8004916 <config_PWM_bits+0x936>
						}
						else if(*(cellVoltages + 15) < 40000 && *(cellVoltages + 15) >= 39000) {
 80048ca:	683b      	ldr	r3, [r7, #0]
 80048cc:	331e      	adds	r3, #30
 80048ce:	881b      	ldrh	r3, [r3, #0]
 80048d0:	f649 423f 	movw	r2, #39999	@ 0x9c3f
 80048d4:	4293      	cmp	r3, r2
 80048d6:	d80a      	bhi.n	80048ee <config_PWM_bits+0x90e>
 80048d8:	683b      	ldr	r3, [r7, #0]
 80048da:	331e      	adds	r3, #30
 80048dc:	881b      	ldrh	r3, [r3, #0]
 80048de:	f649 0257 	movw	r2, #38999	@ 0x9857
 80048e2:	4293      	cmp	r3, r2
 80048e4:	d903      	bls.n	80048ee <config_PWM_bits+0x90e>
							PWM6_1 = 0;
 80048e6:	2300      	movs	r3, #0
 80048e8:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
 80048ec:	e013      	b.n	8004916 <config_PWM_bits+0x936>
						}
						else if(*(cellVoltages + 15) < 39000 && *(cellVoltages + 15) >= 38000) {
 80048ee:	683b      	ldr	r3, [r7, #0]
 80048f0:	331e      	adds	r3, #30
 80048f2:	881b      	ldrh	r3, [r3, #0]
 80048f4:	f649 0257 	movw	r2, #38999	@ 0x9857
 80048f8:	4293      	cmp	r3, r2
 80048fa:	f200 8103 	bhi.w	8004b04 <config_PWM_bits+0xb24>
 80048fe:	683b      	ldr	r3, [r7, #0]
 8004900:	331e      	adds	r3, #30
 8004902:	881b      	ldrh	r3, [r3, #0]
 8004904:	f249 426f 	movw	r2, #37999	@ 0x946f
 8004908:	4293      	cmp	r3, r2
 800490a:	f240 80fb 	bls.w	8004b04 <config_PWM_bits+0xb24>
							PWM6_0 = 0;
 800490e:	2300      	movs	r3, #0
 8004910:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
						}
						break;
 8004914:	e0f6      	b.n	8004b04 <config_PWM_bits+0xb24>
 8004916:	e0f5      	b.n	8004b04 <config_PWM_bits+0xb24>
					case 7:
						if(*(cellVoltages + 16) < 42000 && *(cellVoltages + 16) >= 40000) {
 8004918:	683b      	ldr	r3, [r7, #0]
 800491a:	3320      	adds	r3, #32
 800491c:	881b      	ldrh	r3, [r3, #0]
 800491e:	f24a 420f 	movw	r2, #41999	@ 0xa40f
 8004922:	4293      	cmp	r3, r2
 8004924:	d80d      	bhi.n	8004942 <config_PWM_bits+0x962>
 8004926:	683b      	ldr	r3, [r7, #0]
 8004928:	3320      	adds	r3, #32
 800492a:	881b      	ldrh	r3, [r3, #0]
 800492c:	f649 423f 	movw	r2, #39999	@ 0x9c3f
 8004930:	4293      	cmp	r3, r2
 8004932:	d906      	bls.n	8004942 <config_PWM_bits+0x962>
							PWM7_1 = 0;
 8004934:	2300      	movs	r3, #0
 8004936:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
							PWM7_0 = 0;
 800493a:	2300      	movs	r3, #0
 800493c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 8004940:	e025      	b.n	800498e <config_PWM_bits+0x9ae>
						}
						else if(*(cellVoltages + 16) < 40000 && *(cellVoltages + 16) >= 39000) {
 8004942:	683b      	ldr	r3, [r7, #0]
 8004944:	3320      	adds	r3, #32
 8004946:	881b      	ldrh	r3, [r3, #0]
 8004948:	f649 423f 	movw	r2, #39999	@ 0x9c3f
 800494c:	4293      	cmp	r3, r2
 800494e:	d80a      	bhi.n	8004966 <config_PWM_bits+0x986>
 8004950:	683b      	ldr	r3, [r7, #0]
 8004952:	3320      	adds	r3, #32
 8004954:	881b      	ldrh	r3, [r3, #0]
 8004956:	f649 0257 	movw	r2, #38999	@ 0x9857
 800495a:	4293      	cmp	r3, r2
 800495c:	d903      	bls.n	8004966 <config_PWM_bits+0x986>
							PWM7_1 = 0;
 800495e:	2300      	movs	r3, #0
 8004960:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
 8004964:	e013      	b.n	800498e <config_PWM_bits+0x9ae>
						}
						else if(*(cellVoltages + 16) < 39000 && *(cellVoltages + 16) >= 38000) {
 8004966:	683b      	ldr	r3, [r7, #0]
 8004968:	3320      	adds	r3, #32
 800496a:	881b      	ldrh	r3, [r3, #0]
 800496c:	f649 0257 	movw	r2, #38999	@ 0x9857
 8004970:	4293      	cmp	r3, r2
 8004972:	f200 80c9 	bhi.w	8004b08 <config_PWM_bits+0xb28>
 8004976:	683b      	ldr	r3, [r7, #0]
 8004978:	3320      	adds	r3, #32
 800497a:	881b      	ldrh	r3, [r3, #0]
 800497c:	f249 426f 	movw	r2, #37999	@ 0x946f
 8004980:	4293      	cmp	r3, r2
 8004982:	f240 80c1 	bls.w	8004b08 <config_PWM_bits+0xb28>
							PWM7_0 = 0;
 8004986:	2300      	movs	r3, #0
 8004988:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
						}
						break;
 800498c:	e0bc      	b.n	8004b08 <config_PWM_bits+0xb28>
 800498e:	e0bb      	b.n	8004b08 <config_PWM_bits+0xb28>
					case 8:
						if(*(cellVoltages + 17) < 42000 && *(cellVoltages + 17) >= 40000) {
 8004990:	683b      	ldr	r3, [r7, #0]
 8004992:	3322      	adds	r3, #34	@ 0x22
 8004994:	881b      	ldrh	r3, [r3, #0]
 8004996:	f24a 420f 	movw	r2, #41999	@ 0xa40f
 800499a:	4293      	cmp	r3, r2
 800499c:	d80d      	bhi.n	80049ba <config_PWM_bits+0x9da>
 800499e:	683b      	ldr	r3, [r7, #0]
 80049a0:	3322      	adds	r3, #34	@ 0x22
 80049a2:	881b      	ldrh	r3, [r3, #0]
 80049a4:	f649 423f 	movw	r2, #39999	@ 0x9c3f
 80049a8:	4293      	cmp	r3, r2
 80049aa:	d906      	bls.n	80049ba <config_PWM_bits+0x9da>
							PWM8_1 = 0;
 80049ac:	2300      	movs	r3, #0
 80049ae:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
							PWM8_0 = 0;
 80049b2:	2300      	movs	r3, #0
 80049b4:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
 80049b8:	e025      	b.n	8004a06 <config_PWM_bits+0xa26>
						}
						else if(*(cellVoltages + 17) < 40000 && *(cellVoltages + 17) >= 39000) {
 80049ba:	683b      	ldr	r3, [r7, #0]
 80049bc:	3322      	adds	r3, #34	@ 0x22
 80049be:	881b      	ldrh	r3, [r3, #0]
 80049c0:	f649 423f 	movw	r2, #39999	@ 0x9c3f
 80049c4:	4293      	cmp	r3, r2
 80049c6:	d80a      	bhi.n	80049de <config_PWM_bits+0x9fe>
 80049c8:	683b      	ldr	r3, [r7, #0]
 80049ca:	3322      	adds	r3, #34	@ 0x22
 80049cc:	881b      	ldrh	r3, [r3, #0]
 80049ce:	f649 0257 	movw	r2, #38999	@ 0x9857
 80049d2:	4293      	cmp	r3, r2
 80049d4:	d903      	bls.n	80049de <config_PWM_bits+0x9fe>
							PWM8_1 = 0;
 80049d6:	2300      	movs	r3, #0
 80049d8:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
 80049dc:	e013      	b.n	8004a06 <config_PWM_bits+0xa26>
						}
						else if(*(cellVoltages + 17) < 39000 && *(cellVoltages + 17) >= 38000) {
 80049de:	683b      	ldr	r3, [r7, #0]
 80049e0:	3322      	adds	r3, #34	@ 0x22
 80049e2:	881b      	ldrh	r3, [r3, #0]
 80049e4:	f649 0257 	movw	r2, #38999	@ 0x9857
 80049e8:	4293      	cmp	r3, r2
 80049ea:	f200 808f 	bhi.w	8004b0c <config_PWM_bits+0xb2c>
 80049ee:	683b      	ldr	r3, [r7, #0]
 80049f0:	3322      	adds	r3, #34	@ 0x22
 80049f2:	881b      	ldrh	r3, [r3, #0]
 80049f4:	f249 426f 	movw	r2, #37999	@ 0x946f
 80049f8:	4293      	cmp	r3, r2
 80049fa:	f240 8087 	bls.w	8004b0c <config_PWM_bits+0xb2c>
							PWM8_0 = 0;
 80049fe:	2300      	movs	r3, #0
 8004a00:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
						}
						break;
 8004a04:	e082      	b.n	8004b0c <config_PWM_bits+0xb2c>
 8004a06:	e081      	b.n	8004b0c <config_PWM_bits+0xb2c>
					case 9:
						if(*(cellVoltages + 18) < 42000 && *(cellVoltages + 18) >= 40000) {
 8004a08:	683b      	ldr	r3, [r7, #0]
 8004a0a:	3324      	adds	r3, #36	@ 0x24
 8004a0c:	881b      	ldrh	r3, [r3, #0]
 8004a0e:	f24a 420f 	movw	r2, #41999	@ 0xa40f
 8004a12:	4293      	cmp	r3, r2
 8004a14:	d80d      	bhi.n	8004a32 <config_PWM_bits+0xa52>
 8004a16:	683b      	ldr	r3, [r7, #0]
 8004a18:	3324      	adds	r3, #36	@ 0x24
 8004a1a:	881b      	ldrh	r3, [r3, #0]
 8004a1c:	f649 423f 	movw	r2, #39999	@ 0x9c3f
 8004a20:	4293      	cmp	r3, r2
 8004a22:	d906      	bls.n	8004a32 <config_PWM_bits+0xa52>
							PWM9_1 = 0;
 8004a24:	2300      	movs	r3, #0
 8004a26:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
							PWM9_0 = 0;
 8004a2a:	2300      	movs	r3, #0
 8004a2c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8004a30:	e023      	b.n	8004a7a <config_PWM_bits+0xa9a>
						}
						else if(*(cellVoltages + 18) < 40000 && *(cellVoltages + 18) >= 39000) {
 8004a32:	683b      	ldr	r3, [r7, #0]
 8004a34:	3324      	adds	r3, #36	@ 0x24
 8004a36:	881b      	ldrh	r3, [r3, #0]
 8004a38:	f649 423f 	movw	r2, #39999	@ 0x9c3f
 8004a3c:	4293      	cmp	r3, r2
 8004a3e:	d80a      	bhi.n	8004a56 <config_PWM_bits+0xa76>
 8004a40:	683b      	ldr	r3, [r7, #0]
 8004a42:	3324      	adds	r3, #36	@ 0x24
 8004a44:	881b      	ldrh	r3, [r3, #0]
 8004a46:	f649 0257 	movw	r2, #38999	@ 0x9857
 8004a4a:	4293      	cmp	r3, r2
 8004a4c:	d903      	bls.n	8004a56 <config_PWM_bits+0xa76>
							PWM9_1 = 0;
 8004a4e:	2300      	movs	r3, #0
 8004a50:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 8004a54:	e011      	b.n	8004a7a <config_PWM_bits+0xa9a>
						}
						else if(*(cellVoltages + 18) < 39000 && *(cellVoltages + 18) >= 38000) {
 8004a56:	683b      	ldr	r3, [r7, #0]
 8004a58:	3324      	adds	r3, #36	@ 0x24
 8004a5a:	881b      	ldrh	r3, [r3, #0]
 8004a5c:	f649 0257 	movw	r2, #38999	@ 0x9857
 8004a60:	4293      	cmp	r3, r2
 8004a62:	d855      	bhi.n	8004b10 <config_PWM_bits+0xb30>
 8004a64:	683b      	ldr	r3, [r7, #0]
 8004a66:	3324      	adds	r3, #36	@ 0x24
 8004a68:	881b      	ldrh	r3, [r3, #0]
 8004a6a:	f249 426f 	movw	r2, #37999	@ 0x946f
 8004a6e:	4293      	cmp	r3, r2
 8004a70:	d94e      	bls.n	8004b10 <config_PWM_bits+0xb30>
							PWM9_0 = 0;
 8004a72:	2300      	movs	r3, #0
 8004a74:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
						}
						break;
 8004a78:	e04a      	b.n	8004b10 <config_PWM_bits+0xb30>
 8004a7a:	e049      	b.n	8004b10 <config_PWM_bits+0xb30>
					case 10:
						if(*(cellVoltages + 19) < 42000 && *(cellVoltages + 19) >= 40000) {
 8004a7c:	683b      	ldr	r3, [r7, #0]
 8004a7e:	3326      	adds	r3, #38	@ 0x26
 8004a80:	881b      	ldrh	r3, [r3, #0]
 8004a82:	f24a 420f 	movw	r2, #41999	@ 0xa40f
 8004a86:	4293      	cmp	r3, r2
 8004a88:	d80d      	bhi.n	8004aa6 <config_PWM_bits+0xac6>
 8004a8a:	683b      	ldr	r3, [r7, #0]
 8004a8c:	3326      	adds	r3, #38	@ 0x26
 8004a8e:	881b      	ldrh	r3, [r3, #0]
 8004a90:	f649 423f 	movw	r2, #39999	@ 0x9c3f
 8004a94:	4293      	cmp	r3, r2
 8004a96:	d906      	bls.n	8004aa6 <config_PWM_bits+0xac6>
							PWM10_1 = 0;
 8004a98:	2300      	movs	r3, #0
 8004a9a:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
							PWM10_0 = 0;
 8004a9e:	2300      	movs	r3, #0
 8004aa0:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
 8004aa4:	e023      	b.n	8004aee <config_PWM_bits+0xb0e>
						}
						else if(*(cellVoltages + 19) < 40000 && *(cellVoltages + 19) >= 39000) {
 8004aa6:	683b      	ldr	r3, [r7, #0]
 8004aa8:	3326      	adds	r3, #38	@ 0x26
 8004aaa:	881b      	ldrh	r3, [r3, #0]
 8004aac:	f649 423f 	movw	r2, #39999	@ 0x9c3f
 8004ab0:	4293      	cmp	r3, r2
 8004ab2:	d80a      	bhi.n	8004aca <config_PWM_bits+0xaea>
 8004ab4:	683b      	ldr	r3, [r7, #0]
 8004ab6:	3326      	adds	r3, #38	@ 0x26
 8004ab8:	881b      	ldrh	r3, [r3, #0]
 8004aba:	f649 0257 	movw	r2, #38999	@ 0x9857
 8004abe:	4293      	cmp	r3, r2
 8004ac0:	d903      	bls.n	8004aca <config_PWM_bits+0xaea>
							PWM10_1 = 0;
 8004ac2:	2300      	movs	r3, #0
 8004ac4:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
 8004ac8:	e011      	b.n	8004aee <config_PWM_bits+0xb0e>
						}
						else if(*(cellVoltages + 19) < 39000 && *(cellVoltages + 19) >= 38000) {
 8004aca:	683b      	ldr	r3, [r7, #0]
 8004acc:	3326      	adds	r3, #38	@ 0x26
 8004ace:	881b      	ldrh	r3, [r3, #0]
 8004ad0:	f649 0257 	movw	r2, #38999	@ 0x9857
 8004ad4:	4293      	cmp	r3, r2
 8004ad6:	d81d      	bhi.n	8004b14 <config_PWM_bits+0xb34>
 8004ad8:	683b      	ldr	r3, [r7, #0]
 8004ada:	3326      	adds	r3, #38	@ 0x26
 8004adc:	881b      	ldrh	r3, [r3, #0]
 8004ade:	f249 426f 	movw	r2, #37999	@ 0x946f
 8004ae2:	4293      	cmp	r3, r2
 8004ae4:	d916      	bls.n	8004b14 <config_PWM_bits+0xb34>
							PWM10_0 = 0;
 8004ae6:	2300      	movs	r3, #0
 8004ae8:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
						}
						break;
 8004aec:	e012      	b.n	8004b14 <config_PWM_bits+0xb34>
 8004aee:	e011      	b.n	8004b14 <config_PWM_bits+0xb34>
						break;
 8004af0:	bf00      	nop
 8004af2:	e010      	b.n	8004b16 <config_PWM_bits+0xb36>
						break;
 8004af4:	bf00      	nop
 8004af6:	e00e      	b.n	8004b16 <config_PWM_bits+0xb36>
						break;
 8004af8:	bf00      	nop
 8004afa:	e00c      	b.n	8004b16 <config_PWM_bits+0xb36>
						break;
 8004afc:	bf00      	nop
 8004afe:	e00a      	b.n	8004b16 <config_PWM_bits+0xb36>
						break;
 8004b00:	bf00      	nop
 8004b02:	e008      	b.n	8004b16 <config_PWM_bits+0xb36>
						break;
 8004b04:	bf00      	nop
 8004b06:	e006      	b.n	8004b16 <config_PWM_bits+0xb36>
						break;
 8004b08:	bf00      	nop
 8004b0a:	e004      	b.n	8004b16 <config_PWM_bits+0xb36>
						break;
 8004b0c:	bf00      	nop
 8004b0e:	e002      	b.n	8004b16 <config_PWM_bits+0xb36>
						break;
 8004b10:	bf00      	nop
 8004b12:	e000      	b.n	8004b16 <config_PWM_bits+0xb36>
						break;
 8004b14:	bf00      	nop
			for(uint8_t i = 0; i < cellsToBalanceQty; i++) {
 8004b16:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8004b1a:	3301      	adds	r3, #1
 8004b1c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8004b20:	f897 202a 	ldrb.w	r2, [r7, #42]	@ 0x2a
 8004b24:	7afb      	ldrb	r3, [r7, #11]
 8004b26:	429a      	cmp	r2, r3
 8004b28:	f4ff ad6d 	bcc.w	8004606 <config_PWM_bits+0x626>
				}
			}
			break;
 8004b2c:	bf00      	nop
	}
	*payloadRegisterPWM = (PWM2_3 << 7) | (PWM2_2 << 6) | (PWM2_1 << 5) | (PWM2_0 << 4) | (PWM1_3 << 3) | (PWM1_2 << 2) | (PWM1_1 <<1) | (PWM1_0 << 0);
 8004b2e:	f997 3026 	ldrsb.w	r3, [r7, #38]	@ 0x26
 8004b32:	01db      	lsls	r3, r3, #7
 8004b34:	b25a      	sxtb	r2, r3
 8004b36:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8004b3a:	019b      	lsls	r3, r3, #6
 8004b3c:	b25b      	sxtb	r3, r3
 8004b3e:	4313      	orrs	r3, r2
 8004b40:	b25a      	sxtb	r2, r3
 8004b42:	f997 303c 	ldrsb.w	r3, [r7, #60]	@ 0x3c
 8004b46:	015b      	lsls	r3, r3, #5
 8004b48:	b25b      	sxtb	r3, r3
 8004b4a:	4313      	orrs	r3, r2
 8004b4c:	b25a      	sxtb	r2, r3
 8004b4e:	f997 303d 	ldrsb.w	r3, [r7, #61]	@ 0x3d
 8004b52:	011b      	lsls	r3, r3, #4
 8004b54:	b25b      	sxtb	r3, r3
 8004b56:	4313      	orrs	r3, r2
 8004b58:	b25a      	sxtb	r2, r3
 8004b5a:	f997 3028 	ldrsb.w	r3, [r7, #40]	@ 0x28
 8004b5e:	00db      	lsls	r3, r3, #3
 8004b60:	b25b      	sxtb	r3, r3
 8004b62:	4313      	orrs	r3, r2
 8004b64:	b25a      	sxtb	r2, r3
 8004b66:	f997 3029 	ldrsb.w	r3, [r7, #41]	@ 0x29
 8004b6a:	009b      	lsls	r3, r3, #2
 8004b6c:	b25b      	sxtb	r3, r3
 8004b6e:	4313      	orrs	r3, r2
 8004b70:	b25a      	sxtb	r2, r3
 8004b72:	f997 303e 	ldrsb.w	r3, [r7, #62]	@ 0x3e
 8004b76:	005b      	lsls	r3, r3, #1
 8004b78:	b25b      	sxtb	r3, r3
 8004b7a:	4313      	orrs	r3, r2
 8004b7c:	b25a      	sxtb	r2, r3
 8004b7e:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 8004b82:	4313      	orrs	r3, r2
 8004b84:	b25b      	sxtb	r3, r3
 8004b86:	b2da      	uxtb	r2, r3
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	701a      	strb	r2, [r3, #0]
	*(payloadRegisterPWM + 1) = (PWM4_3 << 7) | (PWM4_2 << 6) | (PWM4_1 << 5) | (PWM4_0 << 4) | (PWM3_3 << 3) | (PWM3_2 << 2) | (PWM3_1 <<1) | (PWM3_0 << 0);
 8004b8c:	f997 3022 	ldrsb.w	r3, [r7, #34]	@ 0x22
 8004b90:	01db      	lsls	r3, r3, #7
 8004b92:	b25a      	sxtb	r2, r3
 8004b94:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 8004b98:	019b      	lsls	r3, r3, #6
 8004b9a:	b25b      	sxtb	r3, r3
 8004b9c:	4313      	orrs	r3, r2
 8004b9e:	b25a      	sxtb	r2, r3
 8004ba0:	f997 3038 	ldrsb.w	r3, [r7, #56]	@ 0x38
 8004ba4:	015b      	lsls	r3, r3, #5
 8004ba6:	b25b      	sxtb	r3, r3
 8004ba8:	4313      	orrs	r3, r2
 8004baa:	b25a      	sxtb	r2, r3
 8004bac:	f997 3039 	ldrsb.w	r3, [r7, #57]	@ 0x39
 8004bb0:	011b      	lsls	r3, r3, #4
 8004bb2:	b25b      	sxtb	r3, r3
 8004bb4:	4313      	orrs	r3, r2
 8004bb6:	b25a      	sxtb	r2, r3
 8004bb8:	f997 3024 	ldrsb.w	r3, [r7, #36]	@ 0x24
 8004bbc:	00db      	lsls	r3, r3, #3
 8004bbe:	b25b      	sxtb	r3, r3
 8004bc0:	4313      	orrs	r3, r2
 8004bc2:	b25a      	sxtb	r2, r3
 8004bc4:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 8004bc8:	009b      	lsls	r3, r3, #2
 8004bca:	b25b      	sxtb	r3, r3
 8004bcc:	4313      	orrs	r3, r2
 8004bce:	b25a      	sxtb	r2, r3
 8004bd0:	f997 303a 	ldrsb.w	r3, [r7, #58]	@ 0x3a
 8004bd4:	005b      	lsls	r3, r3, #1
 8004bd6:	b25b      	sxtb	r3, r3
 8004bd8:	4313      	orrs	r3, r2
 8004bda:	b25a      	sxtb	r2, r3
 8004bdc:	f997 303b 	ldrsb.w	r3, [r7, #59]	@ 0x3b
 8004be0:	4313      	orrs	r3, r2
 8004be2:	b25a      	sxtb	r2, r3
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	3301      	adds	r3, #1
 8004be8:	b2d2      	uxtb	r2, r2
 8004bea:	701a      	strb	r2, [r3, #0]
	*(payloadRegisterPWM + 2) = (PWM6_3 << 7) | (PWM6_2 << 6) | (PWM6_1 << 5) | (PWM6_0 << 4) | (PWM5_3 << 3) | (PWM5_2 << 2) | (PWM5_1 <<1) | (PWM5_0 << 0);
 8004bec:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8004bf0:	01db      	lsls	r3, r3, #7
 8004bf2:	b25a      	sxtb	r2, r3
 8004bf4:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8004bf8:	019b      	lsls	r3, r3, #6
 8004bfa:	b25b      	sxtb	r3, r3
 8004bfc:	4313      	orrs	r3, r2
 8004bfe:	b25a      	sxtb	r2, r3
 8004c00:	f997 3034 	ldrsb.w	r3, [r7, #52]	@ 0x34
 8004c04:	015b      	lsls	r3, r3, #5
 8004c06:	b25b      	sxtb	r3, r3
 8004c08:	4313      	orrs	r3, r2
 8004c0a:	b25a      	sxtb	r2, r3
 8004c0c:	f997 3035 	ldrsb.w	r3, [r7, #53]	@ 0x35
 8004c10:	011b      	lsls	r3, r3, #4
 8004c12:	b25b      	sxtb	r3, r3
 8004c14:	4313      	orrs	r3, r2
 8004c16:	b25a      	sxtb	r2, r3
 8004c18:	f997 3020 	ldrsb.w	r3, [r7, #32]
 8004c1c:	00db      	lsls	r3, r3, #3
 8004c1e:	b25b      	sxtb	r3, r3
 8004c20:	4313      	orrs	r3, r2
 8004c22:	b25a      	sxtb	r2, r3
 8004c24:	f997 3021 	ldrsb.w	r3, [r7, #33]	@ 0x21
 8004c28:	009b      	lsls	r3, r3, #2
 8004c2a:	b25b      	sxtb	r3, r3
 8004c2c:	4313      	orrs	r3, r2
 8004c2e:	b25a      	sxtb	r2, r3
 8004c30:	f997 3036 	ldrsb.w	r3, [r7, #54]	@ 0x36
 8004c34:	005b      	lsls	r3, r3, #1
 8004c36:	b25b      	sxtb	r3, r3
 8004c38:	4313      	orrs	r3, r2
 8004c3a:	b25a      	sxtb	r2, r3
 8004c3c:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 8004c40:	4313      	orrs	r3, r2
 8004c42:	b25a      	sxtb	r2, r3
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	3302      	adds	r3, #2
 8004c48:	b2d2      	uxtb	r2, r2
 8004c4a:	701a      	strb	r2, [r3, #0]
	*(payloadRegisterPWM + 3) = (PWM8_3 << 7) | (PWM8_2 << 6) | (PWM8_1 << 5) | (PWM8_0 << 4) | (PWM7_3 << 3) | (PWM7_2 << 2) | (PWM7_1 <<1) | (PWM7_0 << 0);
 8004c4c:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8004c50:	01db      	lsls	r3, r3, #7
 8004c52:	b25a      	sxtb	r2, r3
 8004c54:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8004c58:	019b      	lsls	r3, r3, #6
 8004c5a:	b25b      	sxtb	r3, r3
 8004c5c:	4313      	orrs	r3, r2
 8004c5e:	b25a      	sxtb	r2, r3
 8004c60:	f997 3030 	ldrsb.w	r3, [r7, #48]	@ 0x30
 8004c64:	015b      	lsls	r3, r3, #5
 8004c66:	b25b      	sxtb	r3, r3
 8004c68:	4313      	orrs	r3, r2
 8004c6a:	b25a      	sxtb	r2, r3
 8004c6c:	f997 3031 	ldrsb.w	r3, [r7, #49]	@ 0x31
 8004c70:	011b      	lsls	r3, r3, #4
 8004c72:	b25b      	sxtb	r3, r3
 8004c74:	4313      	orrs	r3, r2
 8004c76:	b25a      	sxtb	r2, r3
 8004c78:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8004c7c:	00db      	lsls	r3, r3, #3
 8004c7e:	b25b      	sxtb	r3, r3
 8004c80:	4313      	orrs	r3, r2
 8004c82:	b25a      	sxtb	r2, r3
 8004c84:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8004c88:	009b      	lsls	r3, r3, #2
 8004c8a:	b25b      	sxtb	r3, r3
 8004c8c:	4313      	orrs	r3, r2
 8004c8e:	b25a      	sxtb	r2, r3
 8004c90:	f997 3032 	ldrsb.w	r3, [r7, #50]	@ 0x32
 8004c94:	005b      	lsls	r3, r3, #1
 8004c96:	b25b      	sxtb	r3, r3
 8004c98:	4313      	orrs	r3, r2
 8004c9a:	b25a      	sxtb	r2, r3
 8004c9c:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8004ca0:	4313      	orrs	r3, r2
 8004ca2:	b25a      	sxtb	r2, r3
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	3303      	adds	r3, #3
 8004ca8:	b2d2      	uxtb	r2, r2
 8004caa:	701a      	strb	r2, [r3, #0]
	*(payloadRegisterPWM + 4) = (PWM10_3 << 7) | (PWM10_2 << 6) | (PWM10_1 << 5) | (PWM10_0 << 4) | (PWM9_3 << 3) | (PWM9_2 << 2) | (PWM9_1 <<1) | (PWM9_0 << 0);
 8004cac:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8004cb0:	01db      	lsls	r3, r3, #7
 8004cb2:	b25a      	sxtb	r2, r3
 8004cb4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004cb8:	019b      	lsls	r3, r3, #6
 8004cba:	b25b      	sxtb	r3, r3
 8004cbc:	4313      	orrs	r3, r2
 8004cbe:	b25a      	sxtb	r2, r3
 8004cc0:	f997 302c 	ldrsb.w	r3, [r7, #44]	@ 0x2c
 8004cc4:	015b      	lsls	r3, r3, #5
 8004cc6:	b25b      	sxtb	r3, r3
 8004cc8:	4313      	orrs	r3, r2
 8004cca:	b25a      	sxtb	r2, r3
 8004ccc:	f997 302d 	ldrsb.w	r3, [r7, #45]	@ 0x2d
 8004cd0:	011b      	lsls	r3, r3, #4
 8004cd2:	b25b      	sxtb	r3, r3
 8004cd4:	4313      	orrs	r3, r2
 8004cd6:	b25a      	sxtb	r2, r3
 8004cd8:	f997 3018 	ldrsb.w	r3, [r7, #24]
 8004cdc:	00db      	lsls	r3, r3, #3
 8004cde:	b25b      	sxtb	r3, r3
 8004ce0:	4313      	orrs	r3, r2
 8004ce2:	b25a      	sxtb	r2, r3
 8004ce4:	f997 3019 	ldrsb.w	r3, [r7, #25]
 8004ce8:	009b      	lsls	r3, r3, #2
 8004cea:	b25b      	sxtb	r3, r3
 8004cec:	4313      	orrs	r3, r2
 8004cee:	b25a      	sxtb	r2, r3
 8004cf0:	f997 302e 	ldrsb.w	r3, [r7, #46]	@ 0x2e
 8004cf4:	005b      	lsls	r3, r3, #1
 8004cf6:	b25b      	sxtb	r3, r3
 8004cf8:	4313      	orrs	r3, r2
 8004cfa:	b25a      	sxtb	r2, r3
 8004cfc:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8004d00:	4313      	orrs	r3, r2
 8004d02:	b25a      	sxtb	r2, r3
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	3304      	adds	r3, #4
 8004d08:	b2d2      	uxtb	r2, r2
 8004d0a:	701a      	strb	r2, [r3, #0]
	*(payloadRegisterPWM + 5) = 0xFF;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	3305      	adds	r3, #5
 8004d10:	22ff      	movs	r2, #255	@ 0xff
 8004d12:	701a      	strb	r2, [r3, #0]
}
 8004d14:	bf00      	nop
 8004d16:	3744      	adds	r7, #68	@ 0x44
 8004d18:	46bd      	mov	sp, r7
 8004d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1e:	4770      	bx	lr

08004d20 <can_transmit>:
#include "torch_dependencies.h"
#include "torch_diagnostic.h"


void can_transmit(uint16_t canMsgID, uint8_t *payload)
{
 8004d20:	b580      	push	{r7, lr}
 8004d22:	b08a      	sub	sp, #40	@ 0x28
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	4603      	mov	r3, r0
 8004d28:	6039      	str	r1, [r7, #0]
 8004d2a:	80fb      	strh	r3, [r7, #6]
	CAN_TxHeaderTypeDef TxHeader;
	uint32_t TxMailbox;

	TxHeader.DLC = 8;
 8004d2c:	2308      	movs	r3, #8
 8004d2e:	623b      	str	r3, [r7, #32]
	TxHeader.ExtId = 0;
 8004d30:	2300      	movs	r3, #0
 8004d32:	617b      	str	r3, [r7, #20]
	TxHeader.IDE = CAN_ID_STD;
 8004d34:	2300      	movs	r3, #0
 8004d36:	61bb      	str	r3, [r7, #24]
	TxHeader.RTR = CAN_RTR_DATA;
 8004d38:	2300      	movs	r3, #0
 8004d3a:	61fb      	str	r3, [r7, #28]
	TxHeader.StdId = canMsgID;
 8004d3c:	88fb      	ldrh	r3, [r7, #6]
 8004d3e:	613b      	str	r3, [r7, #16]
	TxHeader.TransmitGlobalTime = DISABLE;
 8004d40:	2300      	movs	r3, #0
 8004d42:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24

	HAL_CAN_AddTxMessage(&hcan1, &TxHeader, payload, &TxMailbox);
 8004d46:	f107 030c 	add.w	r3, r7, #12
 8004d4a:	f107 0110 	add.w	r1, r7, #16
 8004d4e:	683a      	ldr	r2, [r7, #0]
 8004d50:	4804      	ldr	r0, [pc, #16]	@ (8004d64 <can_transmit+0x44>)
 8004d52:	f007 ff02 	bl	800cb5a <HAL_CAN_AddTxMessage>
	wait(10);
 8004d56:	200a      	movs	r0, #10
 8004d58:	f005 fd54 	bl	800a804 <wait>
}
 8004d5c:	bf00      	nop
 8004d5e:	3728      	adds	r7, #40	@ 0x28
 8004d60:	46bd      	mov	sp, r7
 8004d62:	bd80      	pop	{r7, pc}
 8004d64:	200000c4 	.word	0x200000c4

08004d68 <silent_error_loop>:


void silent_error_loop(void)
{
 8004d68:	b580      	push	{r7, lr}
 8004d6a:	b09c      	sub	sp, #112	@ 0x70
 8004d6c:	af00      	add	r7, sp, #0
	active_led_on();
 8004d6e:	f005 fe01 	bl	800a974 <active_led_on>
	charge_led_on();
 8004d72:	f005 fe17 	bl	800a9a4 <charge_led_on>
	balance_led_off();
 8004d76:	f005 fe39 	bl	800a9ec <balance_led_off>
	hot_led_off();
 8004d7a:	f005 fe4d 	bl	800aa18 <hot_led_off>

	uint16_t cellVoltages[CELL_QTY];
	float moduleTemperatures[MODULE_THERM_QTY];
	transmitCounter = 0;
 8004d7e:	4b1b      	ldr	r3, [pc, #108]	@ (8004dec <silent_error_loop+0x84>)
 8004d80:	2200      	movs	r2, #0
 8004d82:	601a      	str	r2, [r3, #0]
	measureCounter = 0;
 8004d84:	4b1a      	ldr	r3, [pc, #104]	@ (8004df0 <silent_error_loop+0x88>)
 8004d86:	2200      	movs	r2, #0
 8004d88:	601a      	str	r2, [r3, #0]
	while(1) {

		if(measureCounter > MEASURE_INTERVAL) {
 8004d8a:	4b19      	ldr	r3, [pc, #100]	@ (8004df0 <silent_error_loop+0x88>)
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	2b64      	cmp	r3, #100	@ 0x64
 8004d90:	d915      	bls.n	8004dbe <silent_error_loop+0x56>
			if(!refup_check()) {
 8004d92:	f004 ff82 	bl	8009c9a <refup_check>
 8004d96:	4603      	mov	r3, r0
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d104      	bne.n	8004da6 <silent_error_loop+0x3e>
				force_refup();
 8004d9c:	f004 ff48 	bl	8009c30 <force_refup>
				wait(1);
 8004da0:	2001      	movs	r0, #1
 8004da2:	f005 fd2f 	bl	800a804 <wait>
			}

			temperature_sense(moduleTemperatures);
 8004da6:	463b      	mov	r3, r7
 8004da8:	4618      	mov	r0, r3
 8004daa:	f005 ff99 	bl	800ace0 <temperature_sense>
			voltage_sense(cellVoltages);
 8004dae:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8004db2:	4618      	mov	r0, r3
 8004db4:	f006 fd6c 	bl	800b890 <voltage_sense>

			measureCounter = 0;
 8004db8:	4b0d      	ldr	r3, [pc, #52]	@ (8004df0 <silent_error_loop+0x88>)
 8004dba:	2200      	movs	r2, #0
 8004dbc:	601a      	str	r2, [r3, #0]
		}

		if(transmitCounter > transmissionDelay) {
 8004dbe:	4b0d      	ldr	r3, [pc, #52]	@ (8004df4 <silent_error_loop+0x8c>)
 8004dc0:	881b      	ldrh	r3, [r3, #0]
 8004dc2:	461a      	mov	r2, r3
 8004dc4:	4b09      	ldr	r3, [pc, #36]	@ (8004dec <silent_error_loop+0x84>)
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	429a      	cmp	r2, r3
 8004dca:	d20b      	bcs.n	8004de4 <silent_error_loop+0x7c>
			transmit_voltages(cellVoltages);
 8004dcc:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8004dd0:	4618      	mov	r0, r3
 8004dd2:	f000 fbdf 	bl	8005594 <transmit_voltages>
			transmit_temperatures(moduleTemperatures);
 8004dd6:	463b      	mov	r3, r7
 8004dd8:	4618      	mov	r0, r3
 8004dda:	f000 fdab 	bl	8005934 <transmit_temperatures>

			transmitCounter = 0;
 8004dde:	4b03      	ldr	r3, [pc, #12]	@ (8004dec <silent_error_loop+0x84>)
 8004de0:	2200      	movs	r2, #0
 8004de2:	601a      	str	r2, [r3, #0]
		}

		wait(1);
 8004de4:	2001      	movs	r0, #1
 8004de6:	f005 fd0d 	bl	800a804 <wait>
		if(measureCounter > MEASURE_INTERVAL) {
 8004dea:	e7ce      	b.n	8004d8a <silent_error_loop+0x22>
 8004dec:	200003e8 	.word	0x200003e8
 8004df0:	200003ec 	.word	0x200003ec
 8004df4:	200003e6 	.word	0x200003e6

08004df8 <error_loop>:
	}
}


void error_loop(uint8_t errorCode, uint8_t *faultThermistors, uint8_t *faultCells, uint8_t faultComponent)
{
 8004df8:	b580      	push	{r7, lr}
 8004dfa:	b0ae      	sub	sp, #184	@ 0xb8
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	60b9      	str	r1, [r7, #8]
 8004e00:	607a      	str	r2, [r7, #4]
 8004e02:	461a      	mov	r2, r3
 8004e04:	4603      	mov	r3, r0
 8004e06:	73fb      	strb	r3, [r7, #15]
 8004e08:	4613      	mov	r3, r2
 8004e0a:	73bb      	strb	r3, [r7, #14]
	uint8_t msgFault[8];

	uint8_t cell0Status = 0;
 8004e0c:	2300      	movs	r3, #0
 8004e0e:	f887 30b7 	strb.w	r3, [r7, #183]	@ 0xb7
	uint8_t cell1Status = 0;
 8004e12:	2300      	movs	r3, #0
 8004e14:	f887 30b6 	strb.w	r3, [r7, #182]	@ 0xb6
	uint8_t cell2Status = 0;
 8004e18:	2300      	movs	r3, #0
 8004e1a:	f887 30b5 	strb.w	r3, [r7, #181]	@ 0xb5
	uint8_t cell3Status = 0;
 8004e1e:	2300      	movs	r3, #0
 8004e20:	f887 30b4 	strb.w	r3, [r7, #180]	@ 0xb4
	uint8_t cell4Status = 0;
 8004e24:	2300      	movs	r3, #0
 8004e26:	f887 30b3 	strb.w	r3, [r7, #179]	@ 0xb3
	uint8_t cell5Status = 0;
 8004e2a:	2300      	movs	r3, #0
 8004e2c:	f887 30b2 	strb.w	r3, [r7, #178]	@ 0xb2
	uint8_t cell6Status = 0;
 8004e30:	2300      	movs	r3, #0
 8004e32:	f887 30b1 	strb.w	r3, [r7, #177]	@ 0xb1
	uint8_t cell7Status = 0;
 8004e36:	2300      	movs	r3, #0
 8004e38:	f887 30b0 	strb.w	r3, [r7, #176]	@ 0xb0
	uint8_t cell8Status = 0;
 8004e3c:	2300      	movs	r3, #0
 8004e3e:	f887 30af 	strb.w	r3, [r7, #175]	@ 0xaf
	uint8_t cell9Status = 0;
 8004e42:	2300      	movs	r3, #0
 8004e44:	f887 30ae 	strb.w	r3, [r7, #174]	@ 0xae
	uint8_t cell10Status = 0;
 8004e48:	2300      	movs	r3, #0
 8004e4a:	f887 30ad 	strb.w	r3, [r7, #173]	@ 0xad
	uint8_t cell11Status = 0;
 8004e4e:	2300      	movs	r3, #0
 8004e50:	f887 30ac 	strb.w	r3, [r7, #172]	@ 0xac
	uint8_t cell12Status = 0;
 8004e54:	2300      	movs	r3, #0
 8004e56:	f887 30ab 	strb.w	r3, [r7, #171]	@ 0xab
	uint8_t cell13Status = 0;
 8004e5a:	2300      	movs	r3, #0
 8004e5c:	f887 30aa 	strb.w	r3, [r7, #170]	@ 0xaa
	uint8_t cell14Status = 0;
 8004e60:	2300      	movs	r3, #0
 8004e62:	f887 30a9 	strb.w	r3, [r7, #169]	@ 0xa9
	uint8_t cell15Status = 0;
 8004e66:	2300      	movs	r3, #0
 8004e68:	f887 30a8 	strb.w	r3, [r7, #168]	@ 0xa8
	uint8_t cell16Status = 0;
 8004e6c:	2300      	movs	r3, #0
 8004e6e:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
	uint8_t cell17Status = 0;
 8004e72:	2300      	movs	r3, #0
 8004e74:	f887 30a6 	strb.w	r3, [r7, #166]	@ 0xa6
	uint8_t cell18Status = 0;
 8004e78:	2300      	movs	r3, #0
 8004e7a:	f887 30a5 	strb.w	r3, [r7, #165]	@ 0xa5
	uint8_t cell19Status = 0;
 8004e7e:	2300      	movs	r3, #0
 8004e80:	f887 30a4 	strb.w	r3, [r7, #164]	@ 0xa4
	uint8_t cell20Status = 0;
 8004e84:	2300      	movs	r3, #0
 8004e86:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3

	uint8_t thermistor1Status = 0;
 8004e8a:	2300      	movs	r3, #0
 8004e8c:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
	uint8_t thermistor2Status = 0;
 8004e90:	2300      	movs	r3, #0
 8004e92:	f887 30a1 	strb.w	r3, [r7, #161]	@ 0xa1
	uint8_t thermistor3Status = 0;
 8004e96:	2300      	movs	r3, #0
 8004e98:	f887 30a0 	strb.w	r3, [r7, #160]	@ 0xa0
	uint8_t thermistor4Status = 0;
 8004e9c:	2300      	movs	r3, #0
 8004e9e:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
	uint8_t thermistor5Status = 0;
 8004ea2:	2300      	movs	r3, #0
 8004ea4:	f887 309e 	strb.w	r3, [r7, #158]	@ 0x9e
	uint8_t thermistor6Status = 0;
 8004ea8:	2300      	movs	r3, #0
 8004eaa:	f887 309d 	strb.w	r3, [r7, #157]	@ 0x9d
	uint8_t thermistor7Status = 0;
 8004eae:	2300      	movs	r3, #0
 8004eb0:	f887 309c 	strb.w	r3, [r7, #156]	@ 0x9c
	uint8_t thermistor8Status = 0;
 8004eb4:	2300      	movs	r3, #0
 8004eb6:	f887 309b 	strb.w	r3, [r7, #155]	@ 0x9b
	uint8_t thermistor9Status = 0;
 8004eba:	2300      	movs	r3, #0
 8004ebc:	f887 309a 	strb.w	r3, [r7, #154]	@ 0x9a
	uint8_t thermistor10Status = 0;
 8004ec0:	2300      	movs	r3, #0
 8004ec2:	f887 3099 	strb.w	r3, [r7, #153]	@ 0x99
	uint8_t thermistor11Status = 0;
 8004ec6:	2300      	movs	r3, #0
 8004ec8:	f887 3098 	strb.w	r3, [r7, #152]	@ 0x98
	uint8_t thermistor12Status = 0;
 8004ecc:	2300      	movs	r3, #0
 8004ece:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
	uint8_t thermistor13Status = 0;
 8004ed2:	2300      	movs	r3, #0
 8004ed4:	f887 3096 	strb.w	r3, [r7, #150]	@ 0x96
	uint8_t thermistor14Status = 0;
 8004ed8:	2300      	movs	r3, #0
 8004eda:	f887 3095 	strb.w	r3, [r7, #149]	@ 0x95
	uint8_t thermistor15Status = 0;
 8004ede:	2300      	movs	r3, #0
 8004ee0:	f887 3094 	strb.w	r3, [r7, #148]	@ 0x94
	uint8_t thermistor16Status = 0;
 8004ee4:	2300      	movs	r3, #0
 8004ee6:	f887 3093 	strb.w	r3, [r7, #147]	@ 0x93
	uint8_t thermistor17Status = 0;
 8004eea:	2300      	movs	r3, #0
 8004eec:	f887 3092 	strb.w	r3, [r7, #146]	@ 0x92
	uint8_t thermistor18Status = 0;
 8004ef0:	2300      	movs	r3, #0
 8004ef2:	f887 3091 	strb.w	r3, [r7, #145]	@ 0x91

	if(errorCode == ERROR_OVERHEAT || errorCode == ERROR_UNDERVOLT || errorCode == ERROR_OVERVOLT) { full_diagnosis(); }
 8004ef6:	7bfb      	ldrb	r3, [r7, #15]
 8004ef8:	2b45      	cmp	r3, #69	@ 0x45
 8004efa:	d005      	beq.n	8004f08 <error_loop+0x110>
 8004efc:	7bfb      	ldrb	r3, [r7, #15]
 8004efe:	2b46      	cmp	r3, #70	@ 0x46
 8004f00:	d002      	beq.n	8004f08 <error_loop+0x110>
 8004f02:	7bfb      	ldrb	r3, [r7, #15]
 8004f04:	2b47      	cmp	r3, #71	@ 0x47
 8004f06:	d101      	bne.n	8004f0c <error_loop+0x114>
 8004f08:	f000 fece 	bl	8005ca8 <full_diagnosis>

	msgFault[0] = moduleID;
 8004f0c:	4b95      	ldr	r3, [pc, #596]	@ (8005164 <error_loop+0x36c>)
 8004f0e:	781b      	ldrb	r3, [r3, #0]
 8004f10:	f887 3084 	strb.w	r3, [r7, #132]	@ 0x84
	msgFault[1] = errorCode;
 8004f14:	7bfb      	ldrb	r3, [r7, #15]
 8004f16:	f887 3085 	strb.w	r3, [r7, #133]	@ 0x85
	msgFault[2] = faultComponent;
 8004f1a:	7bbb      	ldrb	r3, [r7, #14]
 8004f1c:	f887 3086 	strb.w	r3, [r7, #134]	@ 0x86

	if(errorCode == ERROR_OVERHEAT || errorCode == ERROR_THERMISTOR_OPEN) {
 8004f20:	7bfb      	ldrb	r3, [r7, #15]
 8004f22:	2b45      	cmp	r3, #69	@ 0x45
 8004f24:	d003      	beq.n	8004f2e <error_loop+0x136>
 8004f26:	7bfb      	ldrb	r3, [r7, #15]
 8004f28:	2b49      	cmp	r3, #73	@ 0x49
 8004f2a:	f040 8086 	bne.w	800503a <error_loop+0x242>
		for(uint8_t i = 0; i < MODULE_THERM_QTY; i++) {
 8004f2e:	2300      	movs	r3, #0
 8004f30:	f887 3090 	strb.w	r3, [r7, #144]	@ 0x90
 8004f34:	e07b      	b.n	800502e <error_loop+0x236>
			switch(*(faultThermistors + i)) {
 8004f36:	f897 3090 	ldrb.w	r3, [r7, #144]	@ 0x90
 8004f3a:	68ba      	ldr	r2, [r7, #8]
 8004f3c:	4413      	add	r3, r2
 8004f3e:	781b      	ldrb	r3, [r3, #0]
 8004f40:	3b01      	subs	r3, #1
 8004f42:	2b11      	cmp	r3, #17
 8004f44:	d86e      	bhi.n	8005024 <error_loop+0x22c>
 8004f46:	a201      	add	r2, pc, #4	@ (adr r2, 8004f4c <error_loop+0x154>)
 8004f48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f4c:	08004f95 	.word	0x08004f95
 8004f50:	08004f9d 	.word	0x08004f9d
 8004f54:	08004fa5 	.word	0x08004fa5
 8004f58:	08004fad 	.word	0x08004fad
 8004f5c:	08004fb5 	.word	0x08004fb5
 8004f60:	08004fbd 	.word	0x08004fbd
 8004f64:	08004fc5 	.word	0x08004fc5
 8004f68:	08004fcd 	.word	0x08004fcd
 8004f6c:	08004fd5 	.word	0x08004fd5
 8004f70:	08004fdd 	.word	0x08004fdd
 8004f74:	08004fe5 	.word	0x08004fe5
 8004f78:	08004fed 	.word	0x08004fed
 8004f7c:	08004ff5 	.word	0x08004ff5
 8004f80:	08004ffd 	.word	0x08004ffd
 8004f84:	08005005 	.word	0x08005005
 8004f88:	0800500d 	.word	0x0800500d
 8004f8c:	08005015 	.word	0x08005015
 8004f90:	0800501d 	.word	0x0800501d
				case 1:
					thermistor1Status = 1;
 8004f94:	2301      	movs	r3, #1
 8004f96:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
					break;
 8004f9a:	e043      	b.n	8005024 <error_loop+0x22c>
				case 2:
					thermistor2Status = 1;
 8004f9c:	2301      	movs	r3, #1
 8004f9e:	f887 30a1 	strb.w	r3, [r7, #161]	@ 0xa1
					break;
 8004fa2:	e03f      	b.n	8005024 <error_loop+0x22c>
				case 3:
					thermistor3Status = 1;
 8004fa4:	2301      	movs	r3, #1
 8004fa6:	f887 30a0 	strb.w	r3, [r7, #160]	@ 0xa0
					break;
 8004faa:	e03b      	b.n	8005024 <error_loop+0x22c>
				case 4:
					thermistor4Status = 1;
 8004fac:	2301      	movs	r3, #1
 8004fae:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
					break;
 8004fb2:	e037      	b.n	8005024 <error_loop+0x22c>
				case 5:
					thermistor5Status = 1;
 8004fb4:	2301      	movs	r3, #1
 8004fb6:	f887 309e 	strb.w	r3, [r7, #158]	@ 0x9e
					break;
 8004fba:	e033      	b.n	8005024 <error_loop+0x22c>
				case 6:
					thermistor6Status = 1;
 8004fbc:	2301      	movs	r3, #1
 8004fbe:	f887 309d 	strb.w	r3, [r7, #157]	@ 0x9d
					break;
 8004fc2:	e02f      	b.n	8005024 <error_loop+0x22c>
				case 7:
					thermistor7Status = 1;
 8004fc4:	2301      	movs	r3, #1
 8004fc6:	f887 309c 	strb.w	r3, [r7, #156]	@ 0x9c
					break;
 8004fca:	e02b      	b.n	8005024 <error_loop+0x22c>
				case 8:
					thermistor8Status = 1;
 8004fcc:	2301      	movs	r3, #1
 8004fce:	f887 309b 	strb.w	r3, [r7, #155]	@ 0x9b
					break;
 8004fd2:	e027      	b.n	8005024 <error_loop+0x22c>
				case 9:
					thermistor9Status = 1;
 8004fd4:	2301      	movs	r3, #1
 8004fd6:	f887 309a 	strb.w	r3, [r7, #154]	@ 0x9a
					break;
 8004fda:	e023      	b.n	8005024 <error_loop+0x22c>
				case 10:
					thermistor10Status = 1;
 8004fdc:	2301      	movs	r3, #1
 8004fde:	f887 3099 	strb.w	r3, [r7, #153]	@ 0x99
					break;
 8004fe2:	e01f      	b.n	8005024 <error_loop+0x22c>
				case 11:
					thermistor11Status = 1;
 8004fe4:	2301      	movs	r3, #1
 8004fe6:	f887 3098 	strb.w	r3, [r7, #152]	@ 0x98
					break;
 8004fea:	e01b      	b.n	8005024 <error_loop+0x22c>
				case 12:
					thermistor12Status = 1;
 8004fec:	2301      	movs	r3, #1
 8004fee:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
					break;
 8004ff2:	e017      	b.n	8005024 <error_loop+0x22c>
				case 13:
					thermistor13Status = 1;
 8004ff4:	2301      	movs	r3, #1
 8004ff6:	f887 3096 	strb.w	r3, [r7, #150]	@ 0x96
					break;
 8004ffa:	e013      	b.n	8005024 <error_loop+0x22c>
				case 14:
					thermistor14Status = 1;
 8004ffc:	2301      	movs	r3, #1
 8004ffe:	f887 3095 	strb.w	r3, [r7, #149]	@ 0x95
					break;
 8005002:	e00f      	b.n	8005024 <error_loop+0x22c>
				case 15:
					thermistor15Status = 1;
 8005004:	2301      	movs	r3, #1
 8005006:	f887 3094 	strb.w	r3, [r7, #148]	@ 0x94
					break;
 800500a:	e00b      	b.n	8005024 <error_loop+0x22c>
				case 16:
					thermistor16Status = 1;
 800500c:	2301      	movs	r3, #1
 800500e:	f887 3093 	strb.w	r3, [r7, #147]	@ 0x93
					break;
 8005012:	e007      	b.n	8005024 <error_loop+0x22c>
				case 17:
					thermistor17Status = 1;
 8005014:	2301      	movs	r3, #1
 8005016:	f887 3092 	strb.w	r3, [r7, #146]	@ 0x92
					break;
 800501a:	e003      	b.n	8005024 <error_loop+0x22c>
				case 18:
					thermistor18Status = 1;
 800501c:	2301      	movs	r3, #1
 800501e:	f887 3091 	strb.w	r3, [r7, #145]	@ 0x91
					break;
 8005022:	bf00      	nop
		for(uint8_t i = 0; i < MODULE_THERM_QTY; i++) {
 8005024:	f897 3090 	ldrb.w	r3, [r7, #144]	@ 0x90
 8005028:	3301      	adds	r3, #1
 800502a:	f887 3090 	strb.w	r3, [r7, #144]	@ 0x90
 800502e:	f897 3090 	ldrb.w	r3, [r7, #144]	@ 0x90
 8005032:	2b11      	cmp	r3, #17
 8005034:	f67f af7f 	bls.w	8004f36 <error_loop+0x13e>
 8005038:	e0a4      	b.n	8005184 <error_loop+0x38c>
			}
		}
	}
	else if(errorCode == ERROR_UNDERVOLT || errorCode == ERROR_OVERVOLT || errorCode == ERROR_CELL_OPEN) {
 800503a:	7bfb      	ldrb	r3, [r7, #15]
 800503c:	2b46      	cmp	r3, #70	@ 0x46
 800503e:	d006      	beq.n	800504e <error_loop+0x256>
 8005040:	7bfb      	ldrb	r3, [r7, #15]
 8005042:	2b47      	cmp	r3, #71	@ 0x47
 8005044:	d003      	beq.n	800504e <error_loop+0x256>
 8005046:	7bfb      	ldrb	r3, [r7, #15]
 8005048:	2b48      	cmp	r3, #72	@ 0x48
 800504a:	f040 809b 	bne.w	8005184 <error_loop+0x38c>
		for(uint8_t i = 0; i < CELL_QTY + 1; i++) {
 800504e:	2300      	movs	r3, #0
 8005050:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
 8005054:	e091      	b.n	800517a <error_loop+0x382>
			switch(*(faultCells + i)) {
 8005056:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800505a:	687a      	ldr	r2, [r7, #4]
 800505c:	4413      	add	r3, r2
 800505e:	781b      	ldrb	r3, [r3, #0]
 8005060:	3b01      	subs	r3, #1
 8005062:	2b14      	cmp	r3, #20
 8005064:	f200 8084 	bhi.w	8005170 <error_loop+0x378>
 8005068:	a201      	add	r2, pc, #4	@ (adr r2, 8005070 <error_loop+0x278>)
 800506a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800506e:	bf00      	nop
 8005070:	080050c5 	.word	0x080050c5
 8005074:	080050cd 	.word	0x080050cd
 8005078:	080050d5 	.word	0x080050d5
 800507c:	080050dd 	.word	0x080050dd
 8005080:	080050e5 	.word	0x080050e5
 8005084:	080050ed 	.word	0x080050ed
 8005088:	080050f5 	.word	0x080050f5
 800508c:	080050fd 	.word	0x080050fd
 8005090:	08005105 	.word	0x08005105
 8005094:	0800510d 	.word	0x0800510d
 8005098:	08005115 	.word	0x08005115
 800509c:	0800511d 	.word	0x0800511d
 80050a0:	08005125 	.word	0x08005125
 80050a4:	0800512d 	.word	0x0800512d
 80050a8:	08005135 	.word	0x08005135
 80050ac:	0800513d 	.word	0x0800513d
 80050b0:	08005145 	.word	0x08005145
 80050b4:	0800514d 	.word	0x0800514d
 80050b8:	08005155 	.word	0x08005155
 80050bc:	0800515d 	.word	0x0800515d
 80050c0:	08005169 	.word	0x08005169
				case 1:
					cell1Status = 1;
 80050c4:	2301      	movs	r3, #1
 80050c6:	f887 30b6 	strb.w	r3, [r7, #182]	@ 0xb6
					break;
 80050ca:	e051      	b.n	8005170 <error_loop+0x378>
				case 2:
					cell2Status = 1;
 80050cc:	2301      	movs	r3, #1
 80050ce:	f887 30b5 	strb.w	r3, [r7, #181]	@ 0xb5
					break;
 80050d2:	e04d      	b.n	8005170 <error_loop+0x378>
				case 3:
					cell3Status = 1;
 80050d4:	2301      	movs	r3, #1
 80050d6:	f887 30b4 	strb.w	r3, [r7, #180]	@ 0xb4
					break;
 80050da:	e049      	b.n	8005170 <error_loop+0x378>
				case 4:
					cell4Status = 1;
 80050dc:	2301      	movs	r3, #1
 80050de:	f887 30b3 	strb.w	r3, [r7, #179]	@ 0xb3
					break;
 80050e2:	e045      	b.n	8005170 <error_loop+0x378>
				case 5:
					cell5Status = 1;
 80050e4:	2301      	movs	r3, #1
 80050e6:	f887 30b2 	strb.w	r3, [r7, #178]	@ 0xb2
					break;
 80050ea:	e041      	b.n	8005170 <error_loop+0x378>
				case 6:
					cell6Status = 1;
 80050ec:	2301      	movs	r3, #1
 80050ee:	f887 30b1 	strb.w	r3, [r7, #177]	@ 0xb1
					break;
 80050f2:	e03d      	b.n	8005170 <error_loop+0x378>
				case 7:
					cell7Status = 1;
 80050f4:	2301      	movs	r3, #1
 80050f6:	f887 30b0 	strb.w	r3, [r7, #176]	@ 0xb0
					break;
 80050fa:	e039      	b.n	8005170 <error_loop+0x378>
				case 8:
					cell8Status = 1;
 80050fc:	2301      	movs	r3, #1
 80050fe:	f887 30af 	strb.w	r3, [r7, #175]	@ 0xaf
					break;
 8005102:	e035      	b.n	8005170 <error_loop+0x378>
				case 9:
					cell9Status = 1;
 8005104:	2301      	movs	r3, #1
 8005106:	f887 30ae 	strb.w	r3, [r7, #174]	@ 0xae
					break;
 800510a:	e031      	b.n	8005170 <error_loop+0x378>
				case 10:
					cell10Status = 1;
 800510c:	2301      	movs	r3, #1
 800510e:	f887 30ad 	strb.w	r3, [r7, #173]	@ 0xad
					break;
 8005112:	e02d      	b.n	8005170 <error_loop+0x378>
				case 11:
					cell11Status = 1;
 8005114:	2301      	movs	r3, #1
 8005116:	f887 30ac 	strb.w	r3, [r7, #172]	@ 0xac
					break;
 800511a:	e029      	b.n	8005170 <error_loop+0x378>
				case 12:
					cell12Status = 1;
 800511c:	2301      	movs	r3, #1
 800511e:	f887 30ab 	strb.w	r3, [r7, #171]	@ 0xab
					break;
 8005122:	e025      	b.n	8005170 <error_loop+0x378>
				case 13:
					cell13Status = 1;
 8005124:	2301      	movs	r3, #1
 8005126:	f887 30aa 	strb.w	r3, [r7, #170]	@ 0xaa
					break;
 800512a:	e021      	b.n	8005170 <error_loop+0x378>
				case 14:
					cell14Status = 1;
 800512c:	2301      	movs	r3, #1
 800512e:	f887 30a9 	strb.w	r3, [r7, #169]	@ 0xa9
					break;
 8005132:	e01d      	b.n	8005170 <error_loop+0x378>
				case 15:
					cell15Status = 1;
 8005134:	2301      	movs	r3, #1
 8005136:	f887 30a8 	strb.w	r3, [r7, #168]	@ 0xa8
					break;
 800513a:	e019      	b.n	8005170 <error_loop+0x378>
				case 16:
					cell16Status = 1;
 800513c:	2301      	movs	r3, #1
 800513e:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
					break;
 8005142:	e015      	b.n	8005170 <error_loop+0x378>
				case 17:
					cell17Status = 1;
 8005144:	2301      	movs	r3, #1
 8005146:	f887 30a6 	strb.w	r3, [r7, #166]	@ 0xa6
					break;
 800514a:	e011      	b.n	8005170 <error_loop+0x378>
				case 18:
					cell18Status = 1;
 800514c:	2301      	movs	r3, #1
 800514e:	f887 30a5 	strb.w	r3, [r7, #165]	@ 0xa5
					break;
 8005152:	e00d      	b.n	8005170 <error_loop+0x378>
				case 19:
					cell19Status = 1;
 8005154:	2301      	movs	r3, #1
 8005156:	f887 30a4 	strb.w	r3, [r7, #164]	@ 0xa4
					break;
 800515a:	e009      	b.n	8005170 <error_loop+0x378>
				case 20:
					cell20Status = 1;
 800515c:	2301      	movs	r3, #1
 800515e:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
					break;
 8005162:	e005      	b.n	8005170 <error_loop+0x378>
 8005164:	08010140 	.word	0x08010140
				case 21:
					cell0Status = 1;
 8005168:	2301      	movs	r3, #1
 800516a:	f887 30b7 	strb.w	r3, [r7, #183]	@ 0xb7
					break;
 800516e:	bf00      	nop
		for(uint8_t i = 0; i < CELL_QTY + 1; i++) {
 8005170:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 8005174:	3301      	adds	r3, #1
 8005176:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
 800517a:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800517e:	2b14      	cmp	r3, #20
 8005180:	f67f af69 	bls.w	8005056 <error_loop+0x25e>
			}
		}
	}
	msgFault[3] = (cell7Status << 7) | (cell6Status << 6) | (cell5Status << 5) | (cell4Status << 4) | (cell3Status << 3) | (cell2Status << 2) | (cell1Status << 1) | (cell0Status << 0);
 8005184:	f997 30b0 	ldrsb.w	r3, [r7, #176]	@ 0xb0
 8005188:	01db      	lsls	r3, r3, #7
 800518a:	b25a      	sxtb	r2, r3
 800518c:	f997 30b1 	ldrsb.w	r3, [r7, #177]	@ 0xb1
 8005190:	019b      	lsls	r3, r3, #6
 8005192:	b25b      	sxtb	r3, r3
 8005194:	4313      	orrs	r3, r2
 8005196:	b25a      	sxtb	r2, r3
 8005198:	f997 30b2 	ldrsb.w	r3, [r7, #178]	@ 0xb2
 800519c:	015b      	lsls	r3, r3, #5
 800519e:	b25b      	sxtb	r3, r3
 80051a0:	4313      	orrs	r3, r2
 80051a2:	b25a      	sxtb	r2, r3
 80051a4:	f997 30b3 	ldrsb.w	r3, [r7, #179]	@ 0xb3
 80051a8:	011b      	lsls	r3, r3, #4
 80051aa:	b25b      	sxtb	r3, r3
 80051ac:	4313      	orrs	r3, r2
 80051ae:	b25a      	sxtb	r2, r3
 80051b0:	f997 30b4 	ldrsb.w	r3, [r7, #180]	@ 0xb4
 80051b4:	00db      	lsls	r3, r3, #3
 80051b6:	b25b      	sxtb	r3, r3
 80051b8:	4313      	orrs	r3, r2
 80051ba:	b25a      	sxtb	r2, r3
 80051bc:	f997 30b5 	ldrsb.w	r3, [r7, #181]	@ 0xb5
 80051c0:	009b      	lsls	r3, r3, #2
 80051c2:	b25b      	sxtb	r3, r3
 80051c4:	4313      	orrs	r3, r2
 80051c6:	b25a      	sxtb	r2, r3
 80051c8:	f997 30b6 	ldrsb.w	r3, [r7, #182]	@ 0xb6
 80051cc:	005b      	lsls	r3, r3, #1
 80051ce:	b25b      	sxtb	r3, r3
 80051d0:	4313      	orrs	r3, r2
 80051d2:	b25a      	sxtb	r2, r3
 80051d4:	f997 30b7 	ldrsb.w	r3, [r7, #183]	@ 0xb7
 80051d8:	4313      	orrs	r3, r2
 80051da:	b25b      	sxtb	r3, r3
 80051dc:	b2db      	uxtb	r3, r3
 80051de:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
	msgFault[4] = (cell15Status << 7) | (cell14Status << 6) | (cell13Status << 5) | (cell12Status << 4) | (cell11Status << 3) | (cell10Status << 2) | (cell9Status << 1) | (cell8Status << 0);
 80051e2:	f997 30a8 	ldrsb.w	r3, [r7, #168]	@ 0xa8
 80051e6:	01db      	lsls	r3, r3, #7
 80051e8:	b25a      	sxtb	r2, r3
 80051ea:	f997 30a9 	ldrsb.w	r3, [r7, #169]	@ 0xa9
 80051ee:	019b      	lsls	r3, r3, #6
 80051f0:	b25b      	sxtb	r3, r3
 80051f2:	4313      	orrs	r3, r2
 80051f4:	b25a      	sxtb	r2, r3
 80051f6:	f997 30aa 	ldrsb.w	r3, [r7, #170]	@ 0xaa
 80051fa:	015b      	lsls	r3, r3, #5
 80051fc:	b25b      	sxtb	r3, r3
 80051fe:	4313      	orrs	r3, r2
 8005200:	b25a      	sxtb	r2, r3
 8005202:	f997 30ab 	ldrsb.w	r3, [r7, #171]	@ 0xab
 8005206:	011b      	lsls	r3, r3, #4
 8005208:	b25b      	sxtb	r3, r3
 800520a:	4313      	orrs	r3, r2
 800520c:	b25a      	sxtb	r2, r3
 800520e:	f997 30ac 	ldrsb.w	r3, [r7, #172]	@ 0xac
 8005212:	00db      	lsls	r3, r3, #3
 8005214:	b25b      	sxtb	r3, r3
 8005216:	4313      	orrs	r3, r2
 8005218:	b25a      	sxtb	r2, r3
 800521a:	f997 30ad 	ldrsb.w	r3, [r7, #173]	@ 0xad
 800521e:	009b      	lsls	r3, r3, #2
 8005220:	b25b      	sxtb	r3, r3
 8005222:	4313      	orrs	r3, r2
 8005224:	b25a      	sxtb	r2, r3
 8005226:	f997 30ae 	ldrsb.w	r3, [r7, #174]	@ 0xae
 800522a:	005b      	lsls	r3, r3, #1
 800522c:	b25b      	sxtb	r3, r3
 800522e:	4313      	orrs	r3, r2
 8005230:	b25a      	sxtb	r2, r3
 8005232:	f997 30af 	ldrsb.w	r3, [r7, #175]	@ 0xaf
 8005236:	4313      	orrs	r3, r2
 8005238:	b25b      	sxtb	r3, r3
 800523a:	b2db      	uxtb	r3, r3
 800523c:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
	msgFault[5] = (thermistor3Status << 7) | (thermistor2Status << 6) | (thermistor1Status << 5) | (cell20Status << 4) | (cell19Status << 3) | (cell18Status << 2) | (cell17Status << 1) | (cell16Status << 0);
 8005240:	f997 30a0 	ldrsb.w	r3, [r7, #160]	@ 0xa0
 8005244:	01db      	lsls	r3, r3, #7
 8005246:	b25a      	sxtb	r2, r3
 8005248:	f997 30a1 	ldrsb.w	r3, [r7, #161]	@ 0xa1
 800524c:	019b      	lsls	r3, r3, #6
 800524e:	b25b      	sxtb	r3, r3
 8005250:	4313      	orrs	r3, r2
 8005252:	b25a      	sxtb	r2, r3
 8005254:	f997 30a2 	ldrsb.w	r3, [r7, #162]	@ 0xa2
 8005258:	015b      	lsls	r3, r3, #5
 800525a:	b25b      	sxtb	r3, r3
 800525c:	4313      	orrs	r3, r2
 800525e:	b25a      	sxtb	r2, r3
 8005260:	f997 30a3 	ldrsb.w	r3, [r7, #163]	@ 0xa3
 8005264:	011b      	lsls	r3, r3, #4
 8005266:	b25b      	sxtb	r3, r3
 8005268:	4313      	orrs	r3, r2
 800526a:	b25a      	sxtb	r2, r3
 800526c:	f997 30a4 	ldrsb.w	r3, [r7, #164]	@ 0xa4
 8005270:	00db      	lsls	r3, r3, #3
 8005272:	b25b      	sxtb	r3, r3
 8005274:	4313      	orrs	r3, r2
 8005276:	b25a      	sxtb	r2, r3
 8005278:	f997 30a5 	ldrsb.w	r3, [r7, #165]	@ 0xa5
 800527c:	009b      	lsls	r3, r3, #2
 800527e:	b25b      	sxtb	r3, r3
 8005280:	4313      	orrs	r3, r2
 8005282:	b25a      	sxtb	r2, r3
 8005284:	f997 30a6 	ldrsb.w	r3, [r7, #166]	@ 0xa6
 8005288:	005b      	lsls	r3, r3, #1
 800528a:	b25b      	sxtb	r3, r3
 800528c:	4313      	orrs	r3, r2
 800528e:	b25a      	sxtb	r2, r3
 8005290:	f997 30a7 	ldrsb.w	r3, [r7, #167]	@ 0xa7
 8005294:	4313      	orrs	r3, r2
 8005296:	b25b      	sxtb	r3, r3
 8005298:	b2db      	uxtb	r3, r3
 800529a:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89
	msgFault[6] = (thermistor11Status << 7) | (thermistor10Status << 6) | (thermistor9Status << 5) | (thermistor8Status << 4) | (thermistor7Status << 3) | (thermistor6Status << 2) | (thermistor5Status << 1) | (thermistor4Status << 0);
 800529e:	f997 3098 	ldrsb.w	r3, [r7, #152]	@ 0x98
 80052a2:	01db      	lsls	r3, r3, #7
 80052a4:	b25a      	sxtb	r2, r3
 80052a6:	f997 3099 	ldrsb.w	r3, [r7, #153]	@ 0x99
 80052aa:	019b      	lsls	r3, r3, #6
 80052ac:	b25b      	sxtb	r3, r3
 80052ae:	4313      	orrs	r3, r2
 80052b0:	b25a      	sxtb	r2, r3
 80052b2:	f997 309a 	ldrsb.w	r3, [r7, #154]	@ 0x9a
 80052b6:	015b      	lsls	r3, r3, #5
 80052b8:	b25b      	sxtb	r3, r3
 80052ba:	4313      	orrs	r3, r2
 80052bc:	b25a      	sxtb	r2, r3
 80052be:	f997 309b 	ldrsb.w	r3, [r7, #155]	@ 0x9b
 80052c2:	011b      	lsls	r3, r3, #4
 80052c4:	b25b      	sxtb	r3, r3
 80052c6:	4313      	orrs	r3, r2
 80052c8:	b25a      	sxtb	r2, r3
 80052ca:	f997 309c 	ldrsb.w	r3, [r7, #156]	@ 0x9c
 80052ce:	00db      	lsls	r3, r3, #3
 80052d0:	b25b      	sxtb	r3, r3
 80052d2:	4313      	orrs	r3, r2
 80052d4:	b25a      	sxtb	r2, r3
 80052d6:	f997 309d 	ldrsb.w	r3, [r7, #157]	@ 0x9d
 80052da:	009b      	lsls	r3, r3, #2
 80052dc:	b25b      	sxtb	r3, r3
 80052de:	4313      	orrs	r3, r2
 80052e0:	b25a      	sxtb	r2, r3
 80052e2:	f997 309e 	ldrsb.w	r3, [r7, #158]	@ 0x9e
 80052e6:	005b      	lsls	r3, r3, #1
 80052e8:	b25b      	sxtb	r3, r3
 80052ea:	4313      	orrs	r3, r2
 80052ec:	b25a      	sxtb	r2, r3
 80052ee:	f997 309f 	ldrsb.w	r3, [r7, #159]	@ 0x9f
 80052f2:	4313      	orrs	r3, r2
 80052f4:	b25b      	sxtb	r3, r3
 80052f6:	b2db      	uxtb	r3, r3
 80052f8:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
	msgFault[7] = (thermistor18Status << 6) | (thermistor17Status << 5) | (thermistor16Status << 4) | (thermistor15Status << 3) | (thermistor14Status << 2) | (thermistor13Status << 1) | (thermistor12Status << 0);
 80052fc:	f997 3091 	ldrsb.w	r3, [r7, #145]	@ 0x91
 8005300:	019b      	lsls	r3, r3, #6
 8005302:	b25a      	sxtb	r2, r3
 8005304:	f997 3092 	ldrsb.w	r3, [r7, #146]	@ 0x92
 8005308:	015b      	lsls	r3, r3, #5
 800530a:	b25b      	sxtb	r3, r3
 800530c:	4313      	orrs	r3, r2
 800530e:	b25a      	sxtb	r2, r3
 8005310:	f997 3093 	ldrsb.w	r3, [r7, #147]	@ 0x93
 8005314:	011b      	lsls	r3, r3, #4
 8005316:	b25b      	sxtb	r3, r3
 8005318:	4313      	orrs	r3, r2
 800531a:	b25a      	sxtb	r2, r3
 800531c:	f997 3094 	ldrsb.w	r3, [r7, #148]	@ 0x94
 8005320:	00db      	lsls	r3, r3, #3
 8005322:	b25b      	sxtb	r3, r3
 8005324:	4313      	orrs	r3, r2
 8005326:	b25a      	sxtb	r2, r3
 8005328:	f997 3095 	ldrsb.w	r3, [r7, #149]	@ 0x95
 800532c:	009b      	lsls	r3, r3, #2
 800532e:	b25b      	sxtb	r3, r3
 8005330:	4313      	orrs	r3, r2
 8005332:	b25a      	sxtb	r2, r3
 8005334:	f997 3096 	ldrsb.w	r3, [r7, #150]	@ 0x96
 8005338:	005b      	lsls	r3, r3, #1
 800533a:	b25b      	sxtb	r3, r3
 800533c:	4313      	orrs	r3, r2
 800533e:	b25a      	sxtb	r2, r3
 8005340:	f997 3097 	ldrsb.w	r3, [r7, #151]	@ 0x97
 8005344:	4313      	orrs	r3, r2
 8005346:	b25b      	sxtb	r3, r3
 8005348:	b2db      	uxtb	r3, r3
 800534a:	f887 308b 	strb.w	r3, [r7, #139]	@ 0x8b

	active_led_on();
 800534e:	f005 fb11 	bl	800a974 <active_led_on>
	charge_led_on();
 8005352:	f005 fb27 	bl	800a9a4 <charge_led_on>
	balance_led_off();
 8005356:	f005 fb49 	bl	800a9ec <balance_led_off>
	hot_led_off();
 800535a:	f005 fb5d 	bl	800aa18 <hot_led_off>

	uint16_t cellVoltages[CELL_QTY];
	float moduleTemperatures[MODULE_THERM_QTY];
	transmitCounter = 0;
 800535e:	4b20      	ldr	r3, [pc, #128]	@ (80053e0 <error_loop+0x5e8>)
 8005360:	2200      	movs	r2, #0
 8005362:	601a      	str	r2, [r3, #0]
	measureCounter = 0;
 8005364:	4b1f      	ldr	r3, [pc, #124]	@ (80053e4 <error_loop+0x5ec>)
 8005366:	2200      	movs	r2, #0
 8005368:	601a      	str	r2, [r3, #0]
	while(1) {

		if(measureCounter > MEASURE_INTERVAL) {
 800536a:	4b1e      	ldr	r3, [pc, #120]	@ (80053e4 <error_loop+0x5ec>)
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	2b64      	cmp	r3, #100	@ 0x64
 8005370:	d916      	bls.n	80053a0 <error_loop+0x5a8>
			if(!refup_check()) {
 8005372:	f004 fc92 	bl	8009c9a <refup_check>
 8005376:	4603      	mov	r3, r0
 8005378:	2b00      	cmp	r3, #0
 800537a:	d104      	bne.n	8005386 <error_loop+0x58e>
				force_refup();
 800537c:	f004 fc58 	bl	8009c30 <force_refup>
				wait(1);
 8005380:	2001      	movs	r0, #1
 8005382:	f005 fa3f 	bl	800a804 <wait>
			}

			temperature_sense(moduleTemperatures);
 8005386:	f107 0314 	add.w	r3, r7, #20
 800538a:	4618      	mov	r0, r3
 800538c:	f005 fca8 	bl	800ace0 <temperature_sense>
			voltage_sense(cellVoltages);
 8005390:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8005394:	4618      	mov	r0, r3
 8005396:	f006 fa7b 	bl	800b890 <voltage_sense>

			measureCounter = 0;
 800539a:	4b12      	ldr	r3, [pc, #72]	@ (80053e4 <error_loop+0x5ec>)
 800539c:	2200      	movs	r2, #0
 800539e:	601a      	str	r2, [r3, #0]
		}

		if(transmitCounter > transmissionDelay) {
 80053a0:	4b11      	ldr	r3, [pc, #68]	@ (80053e8 <error_loop+0x5f0>)
 80053a2:	881b      	ldrh	r3, [r3, #0]
 80053a4:	461a      	mov	r2, r3
 80053a6:	4b0e      	ldr	r3, [pc, #56]	@ (80053e0 <error_loop+0x5e8>)
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	429a      	cmp	r2, r3
 80053ac:	d213      	bcs.n	80053d6 <error_loop+0x5de>
			can_transmit(CAN_FAULT_ID, msgFault);
 80053ae:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 80053b2:	4619      	mov	r1, r3
 80053b4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80053b8:	f7ff fcb2 	bl	8004d20 <can_transmit>
			transmit_voltages(cellVoltages);
 80053bc:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80053c0:	4618      	mov	r0, r3
 80053c2:	f000 f8e7 	bl	8005594 <transmit_voltages>
			transmit_temperatures(moduleTemperatures);
 80053c6:	f107 0314 	add.w	r3, r7, #20
 80053ca:	4618      	mov	r0, r3
 80053cc:	f000 fab2 	bl	8005934 <transmit_temperatures>

			transmitCounter = 0;
 80053d0:	4b03      	ldr	r3, [pc, #12]	@ (80053e0 <error_loop+0x5e8>)
 80053d2:	2200      	movs	r2, #0
 80053d4:	601a      	str	r2, [r3, #0]
		}

		wait(1);
 80053d6:	2001      	movs	r0, #1
 80053d8:	f005 fa14 	bl	800a804 <wait>
		if(measureCounter > MEASURE_INTERVAL) {
 80053dc:	e7c5      	b.n	800536a <error_loop+0x572>
 80053de:	bf00      	nop
 80053e0:	200003e8 	.word	0x200003e8
 80053e4:	200003ec 	.word	0x200003ec
 80053e8:	200003e6 	.word	0x200003e6

080053ec <transmit_balance>:
	}
}


void transmit_balance(uint8_t *balanceMsg)
{
 80053ec:	b580      	push	{r7, lr}
 80053ee:	b086      	sub	sp, #24
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	6078      	str	r0, [r7, #4]
	uint8_t payload[8] = {0};
 80053f4:	f107 030c 	add.w	r3, r7, #12
 80053f8:	2200      	movs	r2, #0
 80053fa:	601a      	str	r2, [r3, #0]
 80053fc:	605a      	str	r2, [r3, #4]

	for(uint8_t i = 0; i < 8; i++) { payload[i] = *(balanceMsg + i); }
 80053fe:	2300      	movs	r3, #0
 8005400:	75fb      	strb	r3, [r7, #23]
 8005402:	e00b      	b.n	800541c <transmit_balance+0x30>
 8005404:	7dfb      	ldrb	r3, [r7, #23]
 8005406:	687a      	ldr	r2, [r7, #4]
 8005408:	441a      	add	r2, r3
 800540a:	7dfb      	ldrb	r3, [r7, #23]
 800540c:	7812      	ldrb	r2, [r2, #0]
 800540e:	3318      	adds	r3, #24
 8005410:	443b      	add	r3, r7
 8005412:	f803 2c0c 	strb.w	r2, [r3, #-12]
 8005416:	7dfb      	ldrb	r3, [r7, #23]
 8005418:	3301      	adds	r3, #1
 800541a:	75fb      	strb	r3, [r7, #23]
 800541c:	7dfb      	ldrb	r3, [r7, #23]
 800541e:	2b07      	cmp	r3, #7
 8005420:	d9f0      	bls.n	8005404 <transmit_balance+0x18>

	switch(moduleID) {
 8005422:	4b1f      	ldr	r3, [pc, #124]	@ (80054a0 <transmit_balance+0xb4>)
 8005424:	781b      	ldrb	r3, [r3, #0]
 8005426:	3b01      	subs	r3, #1
 8005428:	2b04      	cmp	r3, #4
 800542a:	d835      	bhi.n	8005498 <transmit_balance+0xac>
 800542c:	a201      	add	r2, pc, #4	@ (adr r2, 8005434 <transmit_balance+0x48>)
 800542e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005432:	bf00      	nop
 8005434:	08005449 	.word	0x08005449
 8005438:	08005459 	.word	0x08005459
 800543c:	08005469 	.word	0x08005469
 8005440:	08005479 	.word	0x08005479
 8005444:	08005489 	.word	0x08005489
		case 1:
			can_transmit(CAN_M1_BALANCE_ID, payload);
 8005448:	f107 030c 	add.w	r3, r7, #12
 800544c:	4619      	mov	r1, r3
 800544e:	f240 30e9 	movw	r0, #1001	@ 0x3e9
 8005452:	f7ff fc65 	bl	8004d20 <can_transmit>
			break;
 8005456:	e01f      	b.n	8005498 <transmit_balance+0xac>
		case 2:
			can_transmit(CAN_M2_BALANCE_ID, payload);
 8005458:	f107 030c 	add.w	r3, r7, #12
 800545c:	4619      	mov	r1, r3
 800545e:	f240 30ea 	movw	r0, #1002	@ 0x3ea
 8005462:	f7ff fc5d 	bl	8004d20 <can_transmit>
			break;
 8005466:	e017      	b.n	8005498 <transmit_balance+0xac>
		case 3:
			can_transmit(CAN_M3_BALANCE_ID, payload);
 8005468:	f107 030c 	add.w	r3, r7, #12
 800546c:	4619      	mov	r1, r3
 800546e:	f240 30eb 	movw	r0, #1003	@ 0x3eb
 8005472:	f7ff fc55 	bl	8004d20 <can_transmit>
			break;
 8005476:	e00f      	b.n	8005498 <transmit_balance+0xac>
		case 4:
			can_transmit(CAN_M4_BALANCE_ID, payload);
 8005478:	f107 030c 	add.w	r3, r7, #12
 800547c:	4619      	mov	r1, r3
 800547e:	f44f 707b 	mov.w	r0, #1004	@ 0x3ec
 8005482:	f7ff fc4d 	bl	8004d20 <can_transmit>
			break;
 8005486:	e007      	b.n	8005498 <transmit_balance+0xac>
		case 5:
			can_transmit(CAN_M5_BALANCE_ID, payload);
 8005488:	f107 030c 	add.w	r3, r7, #12
 800548c:	4619      	mov	r1, r3
 800548e:	f240 30ed 	movw	r0, #1005	@ 0x3ed
 8005492:	f7ff fc45 	bl	8004d20 <can_transmit>
			break;
 8005496:	bf00      	nop
	}
}
 8005498:	bf00      	nop
 800549a:	3718      	adds	r7, #24
 800549c:	46bd      	mov	sp, r7
 800549e:	bd80      	pop	{r7, pc}
 80054a0:	08010140 	.word	0x08010140

080054a4 <transmit_balance_initiation>:


void transmit_balance_initiation(uint16_t absMinCellVoltage)
{
 80054a4:	b580      	push	{r7, lr}
 80054a6:	b084      	sub	sp, #16
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	4603      	mov	r3, r0
 80054ac:	80fb      	strh	r3, [r7, #6]
	uint8_t payload[8] = {0};
 80054ae:	f107 0308 	add.w	r3, r7, #8
 80054b2:	2200      	movs	r2, #0
 80054b4:	601a      	str	r2, [r3, #0]
 80054b6:	605a      	str	r2, [r3, #4]

	payload[0] = (uint8_t)(absMinCellVoltage & 0xFF);
 80054b8:	88fb      	ldrh	r3, [r7, #6]
 80054ba:	b2db      	uxtb	r3, r3
 80054bc:	723b      	strb	r3, [r7, #8]
	payload[1] = (uint8_t)((absMinCellVoltage >> 8) & 0xFF);
 80054be:	88fb      	ldrh	r3, [r7, #6]
 80054c0:	0a1b      	lsrs	r3, r3, #8
 80054c2:	b29b      	uxth	r3, r3
 80054c4:	b2db      	uxtb	r3, r3
 80054c6:	727b      	strb	r3, [r7, #9]

	can_transmit(CAN_MIN_VCELL_ID, payload);
 80054c8:	f107 0308 	add.w	r3, r7, #8
 80054cc:	4619      	mov	r1, r3
 80054ce:	f240 30e5 	movw	r0, #997	@ 0x3e5
 80054d2:	f7ff fc25 	bl	8004d20 <can_transmit>
}
 80054d6:	bf00      	nop
 80054d8:	3710      	adds	r7, #16
 80054da:	46bd      	mov	sp, r7
 80054dc:	bd80      	pop	{r7, pc}
	...

080054e0 <transmit_vmin>:


void transmit_vmin(uint16_t minCellVoltage)
{
 80054e0:	b580      	push	{r7, lr}
 80054e2:	b084      	sub	sp, #16
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	4603      	mov	r3, r0
 80054e8:	80fb      	strh	r3, [r7, #6]
	uint8_t payload[8] = {0};
 80054ea:	f107 0308 	add.w	r3, r7, #8
 80054ee:	2200      	movs	r2, #0
 80054f0:	601a      	str	r2, [r3, #0]
 80054f2:	605a      	str	r2, [r3, #4]

	payload[0] = (uint8_t)(minCellVoltage & 0xFF);
 80054f4:	88fb      	ldrh	r3, [r7, #6]
 80054f6:	b2db      	uxtb	r3, r3
 80054f8:	723b      	strb	r3, [r7, #8]
	payload[1] = (uint8_t)((minCellVoltage >> 8) & 0xFF);
 80054fa:	88fb      	ldrh	r3, [r7, #6]
 80054fc:	0a1b      	lsrs	r3, r3, #8
 80054fe:	b29b      	uxth	r3, r3
 8005500:	b2db      	uxtb	r3, r3
 8005502:	727b      	strb	r3, [r7, #9]

	switch(moduleID) {
 8005504:	4b19      	ldr	r3, [pc, #100]	@ (800556c <transmit_vmin+0x8c>)
 8005506:	781b      	ldrb	r3, [r3, #0]
 8005508:	3b02      	subs	r3, #2
 800550a:	2b03      	cmp	r3, #3
 800550c:	d82a      	bhi.n	8005564 <transmit_vmin+0x84>
 800550e:	a201      	add	r2, pc, #4	@ (adr r2, 8005514 <transmit_vmin+0x34>)
 8005510:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005514:	08005525 	.word	0x08005525
 8005518:	08005535 	.word	0x08005535
 800551c:	08005545 	.word	0x08005545
 8005520:	08005555 	.word	0x08005555
		case 2:
			can_transmit(CAN_M2_VMIN_ID, payload);
 8005524:	f107 0308 	add.w	r3, r7, #8
 8005528:	4619      	mov	r1, r3
 800552a:	f240 30e1 	movw	r0, #993	@ 0x3e1
 800552e:	f7ff fbf7 	bl	8004d20 <can_transmit>
			break;
 8005532:	e017      	b.n	8005564 <transmit_vmin+0x84>
		case 3:
			can_transmit(CAN_M3_VMIN_ID, payload);
 8005534:	f107 0308 	add.w	r3, r7, #8
 8005538:	4619      	mov	r1, r3
 800553a:	f240 30e2 	movw	r0, #994	@ 0x3e2
 800553e:	f7ff fbef 	bl	8004d20 <can_transmit>
			break;
 8005542:	e00f      	b.n	8005564 <transmit_vmin+0x84>
		case 4:
			can_transmit(CAN_M4_VMIN_ID, payload);
 8005544:	f107 0308 	add.w	r3, r7, #8
 8005548:	4619      	mov	r1, r3
 800554a:	f240 30e3 	movw	r0, #995	@ 0x3e3
 800554e:	f7ff fbe7 	bl	8004d20 <can_transmit>
			break;
 8005552:	e007      	b.n	8005564 <transmit_vmin+0x84>
		case 5:
			can_transmit(CAN_M5_VMIN_ID, payload);
 8005554:	f107 0308 	add.w	r3, r7, #8
 8005558:	4619      	mov	r1, r3
 800555a:	f44f 7079 	mov.w	r0, #996	@ 0x3e4
 800555e:	f7ff fbdf 	bl	8004d20 <can_transmit>
			break;
 8005562:	bf00      	nop
	}
}
 8005564:	bf00      	nop
 8005566:	3710      	adds	r7, #16
 8005568:	46bd      	mov	sp, r7
 800556a:	bd80      	pop	{r7, pc}
 800556c:	08010140 	.word	0x08010140

08005570 <transmit_extract_vmin>:

void transmit_extract_vmin(void)
{
 8005570:	b580      	push	{r7, lr}
 8005572:	b082      	sub	sp, #8
 8005574:	af00      	add	r7, sp, #0
	uint8_t zeroPayload[8] = {0};
 8005576:	463b      	mov	r3, r7
 8005578:	2200      	movs	r2, #0
 800557a:	601a      	str	r2, [r3, #0]
 800557c:	605a      	str	r2, [r3, #4]

	can_transmit(CAN_EXTRACT_VMIN_ID, zeroPayload);
 800557e:	463b      	mov	r3, r7
 8005580:	4619      	mov	r1, r3
 8005582:	f44f 7078 	mov.w	r0, #992	@ 0x3e0
 8005586:	f7ff fbcb 	bl	8004d20 <can_transmit>
}
 800558a:	bf00      	nop
 800558c:	3708      	adds	r7, #8
 800558e:	46bd      	mov	sp, r7
 8005590:	bd80      	pop	{r7, pc}
	...

08005594 <transmit_voltages>:


void transmit_voltages(uint16_t *cellVoltages)
{
 8005594:	b580      	push	{r7, lr}
 8005596:	b08c      	sub	sp, #48	@ 0x30
 8005598:	af00      	add	r7, sp, #0
 800559a:	6078      	str	r0, [r7, #4]
	uint8_t msgV2[8];
	uint8_t msgV3[8];
	uint8_t msgV4[8];
	uint8_t msgV5[8];

	msgV1[0] = (uint8_t)(*cellVoltages & 0xFF);
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	881b      	ldrh	r3, [r3, #0]
 80055a0:	b2db      	uxtb	r3, r3
 80055a2:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
	msgV1[1] = (uint8_t)((*cellVoltages >> 8) & 0xFF);
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	881b      	ldrh	r3, [r3, #0]
 80055aa:	0a1b      	lsrs	r3, r3, #8
 80055ac:	b29b      	uxth	r3, r3
 80055ae:	b2db      	uxtb	r3, r3
 80055b0:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
	msgV1[2] = (uint8_t)(*(cellVoltages + 1) & 0xFF);
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	3302      	adds	r3, #2
 80055b8:	881b      	ldrh	r3, [r3, #0]
 80055ba:	b2db      	uxtb	r3, r3
 80055bc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
	msgV1[3] = (uint8_t)((*(cellVoltages + 1) >> 8) & 0xFF);
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	3302      	adds	r3, #2
 80055c4:	881b      	ldrh	r3, [r3, #0]
 80055c6:	0a1b      	lsrs	r3, r3, #8
 80055c8:	b29b      	uxth	r3, r3
 80055ca:	b2db      	uxtb	r3, r3
 80055cc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
	msgV1[4] = (uint8_t)(*(cellVoltages + 2) & 0xFF);
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	3304      	adds	r3, #4
 80055d4:	881b      	ldrh	r3, [r3, #0]
 80055d6:	b2db      	uxtb	r3, r3
 80055d8:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
	msgV1[5] = (uint8_t)((*(cellVoltages + 2) >> 8) & 0xFF);
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	3304      	adds	r3, #4
 80055e0:	881b      	ldrh	r3, [r3, #0]
 80055e2:	0a1b      	lsrs	r3, r3, #8
 80055e4:	b29b      	uxth	r3, r3
 80055e6:	b2db      	uxtb	r3, r3
 80055e8:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
	msgV1[6] = (uint8_t)(*(cellVoltages + 3) & 0xFF);
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	3306      	adds	r3, #6
 80055f0:	881b      	ldrh	r3, [r3, #0]
 80055f2:	b2db      	uxtb	r3, r3
 80055f4:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
	msgV1[7] = (uint8_t)((*(cellVoltages + 3) >> 8) & 0xFF);
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	3306      	adds	r3, #6
 80055fc:	881b      	ldrh	r3, [r3, #0]
 80055fe:	0a1b      	lsrs	r3, r3, #8
 8005600:	b29b      	uxth	r3, r3
 8005602:	b2db      	uxtb	r3, r3
 8005604:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

	msgV2[0] = (uint8_t)(*(cellVoltages + 4) & 0xFF);
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	3308      	adds	r3, #8
 800560c:	881b      	ldrh	r3, [r3, #0]
 800560e:	b2db      	uxtb	r3, r3
 8005610:	f887 3020 	strb.w	r3, [r7, #32]
	msgV2[1] = (uint8_t)((*(cellVoltages + 4) >> 8) & 0xFF);
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	3308      	adds	r3, #8
 8005618:	881b      	ldrh	r3, [r3, #0]
 800561a:	0a1b      	lsrs	r3, r3, #8
 800561c:	b29b      	uxth	r3, r3
 800561e:	b2db      	uxtb	r3, r3
 8005620:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
	msgV2[2] = (uint8_t)(*(cellVoltages + 5) & 0xFF);
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	330a      	adds	r3, #10
 8005628:	881b      	ldrh	r3, [r3, #0]
 800562a:	b2db      	uxtb	r3, r3
 800562c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
	msgV2[3] = (uint8_t)((*(cellVoltages + 5) >> 8) & 0xFF);
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	330a      	adds	r3, #10
 8005634:	881b      	ldrh	r3, [r3, #0]
 8005636:	0a1b      	lsrs	r3, r3, #8
 8005638:	b29b      	uxth	r3, r3
 800563a:	b2db      	uxtb	r3, r3
 800563c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
	msgV2[4] = (uint8_t)(*(cellVoltages + 6) & 0xFF);
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	330c      	adds	r3, #12
 8005644:	881b      	ldrh	r3, [r3, #0]
 8005646:	b2db      	uxtb	r3, r3
 8005648:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
	msgV2[5] = (uint8_t)((*(cellVoltages + 6) >> 8) & 0xFF);
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	330c      	adds	r3, #12
 8005650:	881b      	ldrh	r3, [r3, #0]
 8005652:	0a1b      	lsrs	r3, r3, #8
 8005654:	b29b      	uxth	r3, r3
 8005656:	b2db      	uxtb	r3, r3
 8005658:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
	msgV2[6] = (uint8_t)(*(cellVoltages + 7) & 0xFF);
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	330e      	adds	r3, #14
 8005660:	881b      	ldrh	r3, [r3, #0]
 8005662:	b2db      	uxtb	r3, r3
 8005664:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	msgV2[7] = (uint8_t)((*(cellVoltages + 7) >> 8) & 0xFF);
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	330e      	adds	r3, #14
 800566c:	881b      	ldrh	r3, [r3, #0]
 800566e:	0a1b      	lsrs	r3, r3, #8
 8005670:	b29b      	uxth	r3, r3
 8005672:	b2db      	uxtb	r3, r3
 8005674:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

	msgV3[0] = (uint8_t)(*(cellVoltages + 8) & 0xFF);
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	3310      	adds	r3, #16
 800567c:	881b      	ldrh	r3, [r3, #0]
 800567e:	b2db      	uxtb	r3, r3
 8005680:	763b      	strb	r3, [r7, #24]
	msgV3[1] = (uint8_t)((*(cellVoltages + 8) >> 8) & 0xFF);
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	3310      	adds	r3, #16
 8005686:	881b      	ldrh	r3, [r3, #0]
 8005688:	0a1b      	lsrs	r3, r3, #8
 800568a:	b29b      	uxth	r3, r3
 800568c:	b2db      	uxtb	r3, r3
 800568e:	767b      	strb	r3, [r7, #25]
	msgV3[2] = (uint8_t)(*(cellVoltages + 9) & 0xFF);
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	3312      	adds	r3, #18
 8005694:	881b      	ldrh	r3, [r3, #0]
 8005696:	b2db      	uxtb	r3, r3
 8005698:	76bb      	strb	r3, [r7, #26]
	msgV3[3] = (uint8_t)((*(cellVoltages + 9) >> 8) & 0xFF);
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	3312      	adds	r3, #18
 800569e:	881b      	ldrh	r3, [r3, #0]
 80056a0:	0a1b      	lsrs	r3, r3, #8
 80056a2:	b29b      	uxth	r3, r3
 80056a4:	b2db      	uxtb	r3, r3
 80056a6:	76fb      	strb	r3, [r7, #27]
	msgV3[4] = (uint8_t)(*(cellVoltages + 10) & 0xFF);
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	3314      	adds	r3, #20
 80056ac:	881b      	ldrh	r3, [r3, #0]
 80056ae:	b2db      	uxtb	r3, r3
 80056b0:	773b      	strb	r3, [r7, #28]
	msgV3[5] = (uint8_t)((*(cellVoltages + 10) >> 8) & 0xFF);
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	3314      	adds	r3, #20
 80056b6:	881b      	ldrh	r3, [r3, #0]
 80056b8:	0a1b      	lsrs	r3, r3, #8
 80056ba:	b29b      	uxth	r3, r3
 80056bc:	b2db      	uxtb	r3, r3
 80056be:	777b      	strb	r3, [r7, #29]
	msgV3[6] = (uint8_t)(*(cellVoltages + 11) & 0xFF);
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	3316      	adds	r3, #22
 80056c4:	881b      	ldrh	r3, [r3, #0]
 80056c6:	b2db      	uxtb	r3, r3
 80056c8:	77bb      	strb	r3, [r7, #30]
	msgV3[7] = (uint8_t)((*(cellVoltages + 11) >> 8) & 0xFF);
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	3316      	adds	r3, #22
 80056ce:	881b      	ldrh	r3, [r3, #0]
 80056d0:	0a1b      	lsrs	r3, r3, #8
 80056d2:	b29b      	uxth	r3, r3
 80056d4:	b2db      	uxtb	r3, r3
 80056d6:	77fb      	strb	r3, [r7, #31]

	msgV4[0] = (uint8_t)(*(cellVoltages + 12) & 0xFF);
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	3318      	adds	r3, #24
 80056dc:	881b      	ldrh	r3, [r3, #0]
 80056de:	b2db      	uxtb	r3, r3
 80056e0:	743b      	strb	r3, [r7, #16]
	msgV4[1] = (uint8_t)((*(cellVoltages + 12) >> 8) & 0xFF);
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	3318      	adds	r3, #24
 80056e6:	881b      	ldrh	r3, [r3, #0]
 80056e8:	0a1b      	lsrs	r3, r3, #8
 80056ea:	b29b      	uxth	r3, r3
 80056ec:	b2db      	uxtb	r3, r3
 80056ee:	747b      	strb	r3, [r7, #17]
	msgV4[2] = (uint8_t)(*(cellVoltages + 13) & 0xFF);
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	331a      	adds	r3, #26
 80056f4:	881b      	ldrh	r3, [r3, #0]
 80056f6:	b2db      	uxtb	r3, r3
 80056f8:	74bb      	strb	r3, [r7, #18]
	msgV4[3] = (uint8_t)((*(cellVoltages + 13) >> 8) & 0xFF);
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	331a      	adds	r3, #26
 80056fe:	881b      	ldrh	r3, [r3, #0]
 8005700:	0a1b      	lsrs	r3, r3, #8
 8005702:	b29b      	uxth	r3, r3
 8005704:	b2db      	uxtb	r3, r3
 8005706:	74fb      	strb	r3, [r7, #19]
	msgV4[4] = (uint8_t)(*(cellVoltages + 14) & 0xFF);
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	331c      	adds	r3, #28
 800570c:	881b      	ldrh	r3, [r3, #0]
 800570e:	b2db      	uxtb	r3, r3
 8005710:	753b      	strb	r3, [r7, #20]
	msgV4[5] = (uint8_t)((*(cellVoltages + 14) >> 8) & 0xFF);
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	331c      	adds	r3, #28
 8005716:	881b      	ldrh	r3, [r3, #0]
 8005718:	0a1b      	lsrs	r3, r3, #8
 800571a:	b29b      	uxth	r3, r3
 800571c:	b2db      	uxtb	r3, r3
 800571e:	757b      	strb	r3, [r7, #21]
	msgV4[6] = (uint8_t)(*(cellVoltages + 15) & 0xFF);
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	331e      	adds	r3, #30
 8005724:	881b      	ldrh	r3, [r3, #0]
 8005726:	b2db      	uxtb	r3, r3
 8005728:	75bb      	strb	r3, [r7, #22]
	msgV4[7] = (uint8_t)((*(cellVoltages + 15) >> 8) & 0xFF);
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	331e      	adds	r3, #30
 800572e:	881b      	ldrh	r3, [r3, #0]
 8005730:	0a1b      	lsrs	r3, r3, #8
 8005732:	b29b      	uxth	r3, r3
 8005734:	b2db      	uxtb	r3, r3
 8005736:	75fb      	strb	r3, [r7, #23]

	msgV5[0] = (uint8_t)(*(cellVoltages + 16) & 0xFF);
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	3320      	adds	r3, #32
 800573c:	881b      	ldrh	r3, [r3, #0]
 800573e:	b2db      	uxtb	r3, r3
 8005740:	723b      	strb	r3, [r7, #8]
	msgV5[1] = (uint8_t)((*(cellVoltages + 16) >> 8) & 0xFF);
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	3320      	adds	r3, #32
 8005746:	881b      	ldrh	r3, [r3, #0]
 8005748:	0a1b      	lsrs	r3, r3, #8
 800574a:	b29b      	uxth	r3, r3
 800574c:	b2db      	uxtb	r3, r3
 800574e:	727b      	strb	r3, [r7, #9]
	msgV5[2] = (uint8_t)(*(cellVoltages + 17) & 0xFF);
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	3322      	adds	r3, #34	@ 0x22
 8005754:	881b      	ldrh	r3, [r3, #0]
 8005756:	b2db      	uxtb	r3, r3
 8005758:	72bb      	strb	r3, [r7, #10]
	msgV5[3] = (uint8_t)((*(cellVoltages + 17) >> 8) & 0xFF);
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	3322      	adds	r3, #34	@ 0x22
 800575e:	881b      	ldrh	r3, [r3, #0]
 8005760:	0a1b      	lsrs	r3, r3, #8
 8005762:	b29b      	uxth	r3, r3
 8005764:	b2db      	uxtb	r3, r3
 8005766:	72fb      	strb	r3, [r7, #11]
	msgV5[4] = (uint8_t)(*(cellVoltages + 18) & 0xFF);
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	3324      	adds	r3, #36	@ 0x24
 800576c:	881b      	ldrh	r3, [r3, #0]
 800576e:	b2db      	uxtb	r3, r3
 8005770:	733b      	strb	r3, [r7, #12]
	msgV5[5] = (uint8_t)((*(cellVoltages + 18) >> 8) & 0xFF);
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	3324      	adds	r3, #36	@ 0x24
 8005776:	881b      	ldrh	r3, [r3, #0]
 8005778:	0a1b      	lsrs	r3, r3, #8
 800577a:	b29b      	uxth	r3, r3
 800577c:	b2db      	uxtb	r3, r3
 800577e:	737b      	strb	r3, [r7, #13]
	msgV5[6] = (uint8_t)(*(cellVoltages + 19) & 0xFF);
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	3326      	adds	r3, #38	@ 0x26
 8005784:	881b      	ldrh	r3, [r3, #0]
 8005786:	b2db      	uxtb	r3, r3
 8005788:	73bb      	strb	r3, [r7, #14]
	msgV5[7] = (uint8_t)((*(cellVoltages + 19) >> 8) & 0xFF);
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	3326      	adds	r3, #38	@ 0x26
 800578e:	881b      	ldrh	r3, [r3, #0]
 8005790:	0a1b      	lsrs	r3, r3, #8
 8005792:	b29b      	uxth	r3, r3
 8005794:	b2db      	uxtb	r3, r3
 8005796:	73fb      	strb	r3, [r7, #15]

	switch(moduleID) {
 8005798:	4b65      	ldr	r3, [pc, #404]	@ (8005930 <transmit_voltages+0x39c>)
 800579a:	781b      	ldrb	r3, [r3, #0]
 800579c:	3b01      	subs	r3, #1
 800579e:	2b04      	cmp	r3, #4
 80057a0:	f200 80c2 	bhi.w	8005928 <transmit_voltages+0x394>
 80057a4:	a201      	add	r2, pc, #4	@ (adr r2, 80057ac <transmit_voltages+0x218>)
 80057a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057aa:	bf00      	nop
 80057ac:	080057c1 	.word	0x080057c1
 80057b0:	08005809 	.word	0x08005809
 80057b4:	08005851 	.word	0x08005851
 80057b8:	08005899 	.word	0x08005899
 80057bc:	080058e1 	.word	0x080058e1
		case 1:
			can_transmit(CAN_M1_V1_ID, msgV1);
 80057c0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80057c4:	4619      	mov	r1, r3
 80057c6:	f240 30ee 	movw	r0, #1006	@ 0x3ee
 80057ca:	f7ff faa9 	bl	8004d20 <can_transmit>
			can_transmit(CAN_M1_V2_ID, msgV2);
 80057ce:	f107 0320 	add.w	r3, r7, #32
 80057d2:	4619      	mov	r1, r3
 80057d4:	f240 30ef 	movw	r0, #1007	@ 0x3ef
 80057d8:	f7ff faa2 	bl	8004d20 <can_transmit>
			can_transmit(CAN_M1_V3_ID, msgV3);
 80057dc:	f107 0318 	add.w	r3, r7, #24
 80057e0:	4619      	mov	r1, r3
 80057e2:	f44f 707c 	mov.w	r0, #1008	@ 0x3f0
 80057e6:	f7ff fa9b 	bl	8004d20 <can_transmit>
			can_transmit(CAN_M1_V4_ID, msgV4);
 80057ea:	f107 0310 	add.w	r3, r7, #16
 80057ee:	4619      	mov	r1, r3
 80057f0:	f240 30f1 	movw	r0, #1009	@ 0x3f1
 80057f4:	f7ff fa94 	bl	8004d20 <can_transmit>
			can_transmit(CAN_M1_V5_ID, msgV5);
 80057f8:	f107 0308 	add.w	r3, r7, #8
 80057fc:	4619      	mov	r1, r3
 80057fe:	f240 30f2 	movw	r0, #1010	@ 0x3f2
 8005802:	f7ff fa8d 	bl	8004d20 <can_transmit>
			break;
 8005806:	e08f      	b.n	8005928 <transmit_voltages+0x394>
		case 2:
			can_transmit(CAN_M2_V1_ID, msgV1);
 8005808:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800580c:	4619      	mov	r1, r3
 800580e:	f240 30f3 	movw	r0, #1011	@ 0x3f3
 8005812:	f7ff fa85 	bl	8004d20 <can_transmit>
			can_transmit(CAN_M2_V2_ID, msgV2);
 8005816:	f107 0320 	add.w	r3, r7, #32
 800581a:	4619      	mov	r1, r3
 800581c:	f44f 707d 	mov.w	r0, #1012	@ 0x3f4
 8005820:	f7ff fa7e 	bl	8004d20 <can_transmit>
			can_transmit(CAN_M2_V3_ID, msgV3);
 8005824:	f107 0318 	add.w	r3, r7, #24
 8005828:	4619      	mov	r1, r3
 800582a:	f240 30f5 	movw	r0, #1013	@ 0x3f5
 800582e:	f7ff fa77 	bl	8004d20 <can_transmit>
			can_transmit(CAN_M2_V4_ID, msgV4);
 8005832:	f107 0310 	add.w	r3, r7, #16
 8005836:	4619      	mov	r1, r3
 8005838:	f240 30f6 	movw	r0, #1014	@ 0x3f6
 800583c:	f7ff fa70 	bl	8004d20 <can_transmit>
			can_transmit(CAN_M2_V5_ID, msgV5);
 8005840:	f107 0308 	add.w	r3, r7, #8
 8005844:	4619      	mov	r1, r3
 8005846:	f240 30f7 	movw	r0, #1015	@ 0x3f7
 800584a:	f7ff fa69 	bl	8004d20 <can_transmit>
			break;
 800584e:	e06b      	b.n	8005928 <transmit_voltages+0x394>
		case 3:
			can_transmit(CAN_M3_V1_ID, msgV1);
 8005850:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8005854:	4619      	mov	r1, r3
 8005856:	f44f 707e 	mov.w	r0, #1016	@ 0x3f8
 800585a:	f7ff fa61 	bl	8004d20 <can_transmit>
			can_transmit(CAN_M3_V2_ID, msgV2);
 800585e:	f107 0320 	add.w	r3, r7, #32
 8005862:	4619      	mov	r1, r3
 8005864:	f240 30f9 	movw	r0, #1017	@ 0x3f9
 8005868:	f7ff fa5a 	bl	8004d20 <can_transmit>
			can_transmit(CAN_M3_V3_ID, msgV3);
 800586c:	f107 0318 	add.w	r3, r7, #24
 8005870:	4619      	mov	r1, r3
 8005872:	f240 30fa 	movw	r0, #1018	@ 0x3fa
 8005876:	f7ff fa53 	bl	8004d20 <can_transmit>
			can_transmit(CAN_M3_V4_ID, msgV4);
 800587a:	f107 0310 	add.w	r3, r7, #16
 800587e:	4619      	mov	r1, r3
 8005880:	f240 30fb 	movw	r0, #1019	@ 0x3fb
 8005884:	f7ff fa4c 	bl	8004d20 <can_transmit>
			can_transmit(CAN_M3_V5_ID, msgV5);
 8005888:	f107 0308 	add.w	r3, r7, #8
 800588c:	4619      	mov	r1, r3
 800588e:	f44f 707f 	mov.w	r0, #1020	@ 0x3fc
 8005892:	f7ff fa45 	bl	8004d20 <can_transmit>
			break;
 8005896:	e047      	b.n	8005928 <transmit_voltages+0x394>
		case 4:
			can_transmit(CAN_M4_V1_ID, msgV1);
 8005898:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800589c:	4619      	mov	r1, r3
 800589e:	f240 30fd 	movw	r0, #1021	@ 0x3fd
 80058a2:	f7ff fa3d 	bl	8004d20 <can_transmit>
			can_transmit(CAN_M4_V2_ID, msgV2);
 80058a6:	f107 0320 	add.w	r3, r7, #32
 80058aa:	4619      	mov	r1, r3
 80058ac:	f240 30fe 	movw	r0, #1022	@ 0x3fe
 80058b0:	f7ff fa36 	bl	8004d20 <can_transmit>
			can_transmit(CAN_M4_V3_ID, msgV3);
 80058b4:	f107 0318 	add.w	r3, r7, #24
 80058b8:	4619      	mov	r1, r3
 80058ba:	f240 30ff 	movw	r0, #1023	@ 0x3ff
 80058be:	f7ff fa2f 	bl	8004d20 <can_transmit>
			can_transmit(CAN_M4_V4_ID, msgV4);
 80058c2:	f107 0310 	add.w	r3, r7, #16
 80058c6:	4619      	mov	r1, r3
 80058c8:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 80058cc:	f7ff fa28 	bl	8004d20 <can_transmit>
			can_transmit(CAN_M4_V5_ID, msgV5);
 80058d0:	f107 0308 	add.w	r3, r7, #8
 80058d4:	4619      	mov	r1, r3
 80058d6:	f240 4001 	movw	r0, #1025	@ 0x401
 80058da:	f7ff fa21 	bl	8004d20 <can_transmit>
			break;
 80058de:	e023      	b.n	8005928 <transmit_voltages+0x394>
		case 5:
			can_transmit(CAN_M5_V1_ID, msgV1);
 80058e0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80058e4:	4619      	mov	r1, r3
 80058e6:	f240 4002 	movw	r0, #1026	@ 0x402
 80058ea:	f7ff fa19 	bl	8004d20 <can_transmit>
			can_transmit(CAN_M5_V2_ID, msgV2);
 80058ee:	f107 0320 	add.w	r3, r7, #32
 80058f2:	4619      	mov	r1, r3
 80058f4:	f240 4003 	movw	r0, #1027	@ 0x403
 80058f8:	f7ff fa12 	bl	8004d20 <can_transmit>
			can_transmit(CAN_M5_V3_ID, msgV3);
 80058fc:	f107 0318 	add.w	r3, r7, #24
 8005900:	4619      	mov	r1, r3
 8005902:	f240 4004 	movw	r0, #1028	@ 0x404
 8005906:	f7ff fa0b 	bl	8004d20 <can_transmit>
			can_transmit(CAN_M5_V4_ID, msgV4);
 800590a:	f107 0310 	add.w	r3, r7, #16
 800590e:	4619      	mov	r1, r3
 8005910:	f240 4005 	movw	r0, #1029	@ 0x405
 8005914:	f7ff fa04 	bl	8004d20 <can_transmit>
			can_transmit(CAN_M5_V5_ID, msgV5);
 8005918:	f107 0308 	add.w	r3, r7, #8
 800591c:	4619      	mov	r1, r3
 800591e:	f240 4006 	movw	r0, #1030	@ 0x406
 8005922:	f7ff f9fd 	bl	8004d20 <can_transmit>
			break;
 8005926:	bf00      	nop
	}
}
 8005928:	bf00      	nop
 800592a:	3730      	adds	r7, #48	@ 0x30
 800592c:	46bd      	mov	sp, r7
 800592e:	bd80      	pop	{r7, pc}
 8005930:	08010140 	.word	0x08010140

08005934 <transmit_temperatures>:


void transmit_temperatures(float *temperatures)
{
 8005934:	b580      	push	{r7, lr}
 8005936:	b098      	sub	sp, #96	@ 0x60
 8005938:	af00      	add	r7, sp, #0
 800593a:	6078      	str	r0, [r7, #4]
	uint8_t msgT1[8];
	uint8_t msgT2[8];
	uint8_t msgT3[8];
	uint8_t msgT4[8];
	uint8_t msgT5[8];
	float tempScale = 1000.0f;
 800593c:	4bc4      	ldr	r3, [pc, #784]	@ (8005c50 <transmit_temperatures+0x31c>)
 800593e:	65bb      	str	r3, [r7, #88]	@ 0x58
	uint16_t intTemps[MODULE_THERM_QTY];

	for(uint8_t i = 0; i < MODULE_THERM_QTY; i++) {
 8005940:	2300      	movs	r3, #0
 8005942:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8005946:	e01b      	b.n	8005980 <transmit_temperatures+0x4c>
		intTemps[i] = (uint16_t)(*(temperatures + i) * tempScale);
 8005948:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800594c:	009b      	lsls	r3, r3, #2
 800594e:	687a      	ldr	r2, [r7, #4]
 8005950:	4413      	add	r3, r2
 8005952:	ed93 7a00 	vldr	s14, [r3]
 8005956:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 800595a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800595e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8005962:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005966:	ee17 2a90 	vmov	r2, s15
 800596a:	b292      	uxth	r2, r2
 800596c:	005b      	lsls	r3, r3, #1
 800596e:	3360      	adds	r3, #96	@ 0x60
 8005970:	443b      	add	r3, r7
 8005972:	f823 2c54 	strh.w	r2, [r3, #-84]
	for(uint8_t i = 0; i < MODULE_THERM_QTY; i++) {
 8005976:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800597a:	3301      	adds	r3, #1
 800597c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8005980:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8005984:	2b11      	cmp	r3, #17
 8005986:	d9df      	bls.n	8005948 <transmit_temperatures+0x14>
	}

	msgT1[0] = (uint8_t)(intTemps[0] & 0xFF);
 8005988:	89bb      	ldrh	r3, [r7, #12]
 800598a:	b2db      	uxtb	r3, r3
 800598c:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
	msgT1[1] = (uint8_t)((intTemps[0] >> 8) & 0xFF);
 8005990:	89bb      	ldrh	r3, [r7, #12]
 8005992:	0a1b      	lsrs	r3, r3, #8
 8005994:	b29b      	uxth	r3, r3
 8005996:	b2db      	uxtb	r3, r3
 8005998:	f887 3051 	strb.w	r3, [r7, #81]	@ 0x51
	msgT1[2] = (uint8_t)(intTemps[1] & 0xFF);
 800599c:	89fb      	ldrh	r3, [r7, #14]
 800599e:	b2db      	uxtb	r3, r3
 80059a0:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
	msgT1[3] = (uint8_t)((intTemps[1] >> 8) & 0xFF);
 80059a4:	89fb      	ldrh	r3, [r7, #14]
 80059a6:	0a1b      	lsrs	r3, r3, #8
 80059a8:	b29b      	uxth	r3, r3
 80059aa:	b2db      	uxtb	r3, r3
 80059ac:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
	msgT1[4] = (uint8_t)(intTemps[2] & 0xFF);
 80059b0:	8a3b      	ldrh	r3, [r7, #16]
 80059b2:	b2db      	uxtb	r3, r3
 80059b4:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
	msgT1[5] = (uint8_t)((intTemps[2] >> 8) & 0xFF);
 80059b8:	8a3b      	ldrh	r3, [r7, #16]
 80059ba:	0a1b      	lsrs	r3, r3, #8
 80059bc:	b29b      	uxth	r3, r3
 80059be:	b2db      	uxtb	r3, r3
 80059c0:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
	msgT1[6] = (uint8_t)(intTemps[3] & 0xFF);
 80059c4:	8a7b      	ldrh	r3, [r7, #18]
 80059c6:	b2db      	uxtb	r3, r3
 80059c8:	f887 3056 	strb.w	r3, [r7, #86]	@ 0x56
	msgT1[7] = (uint8_t)((intTemps[3] >> 8) & 0xFF);
 80059cc:	8a7b      	ldrh	r3, [r7, #18]
 80059ce:	0a1b      	lsrs	r3, r3, #8
 80059d0:	b29b      	uxth	r3, r3
 80059d2:	b2db      	uxtb	r3, r3
 80059d4:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

	msgT2[0] = (uint8_t)(intTemps[4] & 0xFF);
 80059d8:	8abb      	ldrh	r3, [r7, #20]
 80059da:	b2db      	uxtb	r3, r3
 80059dc:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
	msgT2[1] = (uint8_t)((intTemps[4] >> 8) & 0xFF);
 80059e0:	8abb      	ldrh	r3, [r7, #20]
 80059e2:	0a1b      	lsrs	r3, r3, #8
 80059e4:	b29b      	uxth	r3, r3
 80059e6:	b2db      	uxtb	r3, r3
 80059e8:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
	msgT2[2] = (uint8_t)(intTemps[5] & 0xFF);
 80059ec:	8afb      	ldrh	r3, [r7, #22]
 80059ee:	b2db      	uxtb	r3, r3
 80059f0:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
	msgT2[3] = (uint8_t)((intTemps[5] >> 8) & 0xFF);
 80059f4:	8afb      	ldrh	r3, [r7, #22]
 80059f6:	0a1b      	lsrs	r3, r3, #8
 80059f8:	b29b      	uxth	r3, r3
 80059fa:	b2db      	uxtb	r3, r3
 80059fc:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
	msgT2[4] = (uint8_t)(intTemps[6] & 0xFF);
 8005a00:	8b3b      	ldrh	r3, [r7, #24]
 8005a02:	b2db      	uxtb	r3, r3
 8005a04:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
	msgT2[5] = (uint8_t)((intTemps[6] >> 8) & 0xFF);
 8005a08:	8b3b      	ldrh	r3, [r7, #24]
 8005a0a:	0a1b      	lsrs	r3, r3, #8
 8005a0c:	b29b      	uxth	r3, r3
 8005a0e:	b2db      	uxtb	r3, r3
 8005a10:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d
	msgT2[6] = (uint8_t)(intTemps[7] & 0xFF);
 8005a14:	8b7b      	ldrh	r3, [r7, #26]
 8005a16:	b2db      	uxtb	r3, r3
 8005a18:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
	msgT2[7] = (uint8_t)((intTemps[7] >> 8) & 0xFF);
 8005a1c:	8b7b      	ldrh	r3, [r7, #26]
 8005a1e:	0a1b      	lsrs	r3, r3, #8
 8005a20:	b29b      	uxth	r3, r3
 8005a22:	b2db      	uxtb	r3, r3
 8005a24:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

	msgT3[0] = (uint8_t)(intTemps[8] & 0xFF);
 8005a28:	8bbb      	ldrh	r3, [r7, #28]
 8005a2a:	b2db      	uxtb	r3, r3
 8005a2c:	f887 3040 	strb.w	r3, [r7, #64]	@ 0x40
	msgT3[1] = (uint8_t)((intTemps[8] >> 8) & 0xFF);
 8005a30:	8bbb      	ldrh	r3, [r7, #28]
 8005a32:	0a1b      	lsrs	r3, r3, #8
 8005a34:	b29b      	uxth	r3, r3
 8005a36:	b2db      	uxtb	r3, r3
 8005a38:	f887 3041 	strb.w	r3, [r7, #65]	@ 0x41
	msgT3[2] = (uint8_t)(intTemps[9] & 0xFF);
 8005a3c:	8bfb      	ldrh	r3, [r7, #30]
 8005a3e:	b2db      	uxtb	r3, r3
 8005a40:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
	msgT3[3] = (uint8_t)((intTemps[9] >> 8) & 0xFF);
 8005a44:	8bfb      	ldrh	r3, [r7, #30]
 8005a46:	0a1b      	lsrs	r3, r3, #8
 8005a48:	b29b      	uxth	r3, r3
 8005a4a:	b2db      	uxtb	r3, r3
 8005a4c:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
	msgT3[4] = (uint8_t)(intTemps[10] & 0xFF);
 8005a50:	8c3b      	ldrh	r3, [r7, #32]
 8005a52:	b2db      	uxtb	r3, r3
 8005a54:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
	msgT3[5] = (uint8_t)((intTemps[10] >> 8) & 0xFF);
 8005a58:	8c3b      	ldrh	r3, [r7, #32]
 8005a5a:	0a1b      	lsrs	r3, r3, #8
 8005a5c:	b29b      	uxth	r3, r3
 8005a5e:	b2db      	uxtb	r3, r3
 8005a60:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
	msgT3[6] = (uint8_t)(intTemps[11] & 0xFF);
 8005a64:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8005a66:	b2db      	uxtb	r3, r3
 8005a68:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
	msgT3[7] = (uint8_t)((intTemps[11] >> 8) & 0xFF);
 8005a6c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8005a6e:	0a1b      	lsrs	r3, r3, #8
 8005a70:	b29b      	uxth	r3, r3
 8005a72:	b2db      	uxtb	r3, r3
 8005a74:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47

	msgT4[0] = (uint8_t)(intTemps[12] & 0xFF);
 8005a78:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005a7a:	b2db      	uxtb	r3, r3
 8005a7c:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
	msgT4[1] = (uint8_t)((intTemps[12] >> 8) & 0xFF);
 8005a80:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005a82:	0a1b      	lsrs	r3, r3, #8
 8005a84:	b29b      	uxth	r3, r3
 8005a86:	b2db      	uxtb	r3, r3
 8005a88:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
	msgT4[2] = (uint8_t)(intTemps[13] & 0xFF);
 8005a8c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8005a8e:	b2db      	uxtb	r3, r3
 8005a90:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
	msgT4[3] = (uint8_t)((intTemps[13] >> 8) & 0xFF);
 8005a94:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8005a96:	0a1b      	lsrs	r3, r3, #8
 8005a98:	b29b      	uxth	r3, r3
 8005a9a:	b2db      	uxtb	r3, r3
 8005a9c:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
	msgT4[4] = (uint8_t)(intTemps[14] & 0xFF);
 8005aa0:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8005aa2:	b2db      	uxtb	r3, r3
 8005aa4:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
	msgT4[5] = (uint8_t)((intTemps[14] >> 8) & 0xFF);
 8005aa8:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8005aaa:	0a1b      	lsrs	r3, r3, #8
 8005aac:	b29b      	uxth	r3, r3
 8005aae:	b2db      	uxtb	r3, r3
 8005ab0:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
	msgT4[6] = (uint8_t)(intTemps[15] & 0xFF);
 8005ab4:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8005ab6:	b2db      	uxtb	r3, r3
 8005ab8:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
	msgT4[7] = (uint8_t)((intTemps[15] >> 8) & 0xFF);
 8005abc:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8005abe:	0a1b      	lsrs	r3, r3, #8
 8005ac0:	b29b      	uxth	r3, r3
 8005ac2:	b2db      	uxtb	r3, r3
 8005ac4:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f

	msgT5[0] = (uint8_t)(intTemps[16] & 0xFF);
 8005ac8:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8005aca:	b2db      	uxtb	r3, r3
 8005acc:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
	msgT5[1] = (uint8_t)((intTemps[16] >> 8) & 0xFF);
 8005ad0:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8005ad2:	0a1b      	lsrs	r3, r3, #8
 8005ad4:	b29b      	uxth	r3, r3
 8005ad6:	b2db      	uxtb	r3, r3
 8005ad8:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
	msgT5[2] = (uint8_t)(intTemps[17] & 0xFF);
 8005adc:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8005ade:	b2db      	uxtb	r3, r3
 8005ae0:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
	msgT5[3] = (uint8_t)((intTemps[17] >> 8) & 0xFF);
 8005ae4:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8005ae6:	0a1b      	lsrs	r3, r3, #8
 8005ae8:	b29b      	uxth	r3, r3
 8005aea:	b2db      	uxtb	r3, r3
 8005aec:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
	msgT5[4] = 0;
 8005af0:	2300      	movs	r3, #0
 8005af2:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
	msgT5[5] = 0;
 8005af6:	2300      	movs	r3, #0
 8005af8:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
	msgT5[6] = 0;
 8005afc:	2300      	movs	r3, #0
 8005afe:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
	msgT5[7] = 0;
 8005b02:	2300      	movs	r3, #0
 8005b04:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

	switch(moduleID) {
 8005b08:	4b52      	ldr	r3, [pc, #328]	@ (8005c54 <transmit_temperatures+0x320>)
 8005b0a:	781b      	ldrb	r3, [r3, #0]
 8005b0c:	3b01      	subs	r3, #1
 8005b0e:	2b04      	cmp	r3, #4
 8005b10:	f200 80c6 	bhi.w	8005ca0 <transmit_temperatures+0x36c>
 8005b14:	a201      	add	r2, pc, #4	@ (adr r2, 8005b1c <transmit_temperatures+0x1e8>)
 8005b16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b1a:	bf00      	nop
 8005b1c:	08005b31 	.word	0x08005b31
 8005b20:	08005b79 	.word	0x08005b79
 8005b24:	08005bc1 	.word	0x08005bc1
 8005b28:	08005c09 	.word	0x08005c09
 8005b2c:	08005c59 	.word	0x08005c59
		case 1:
			can_transmit(CAN_M1_T1_ID, msgT1);
 8005b30:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8005b34:	4619      	mov	r1, r3
 8005b36:	f240 4007 	movw	r0, #1031	@ 0x407
 8005b3a:	f7ff f8f1 	bl	8004d20 <can_transmit>
			can_transmit(CAN_M1_T2_ID, msgT2);
 8005b3e:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8005b42:	4619      	mov	r1, r3
 8005b44:	f44f 6081 	mov.w	r0, #1032	@ 0x408
 8005b48:	f7ff f8ea 	bl	8004d20 <can_transmit>
			can_transmit(CAN_M1_T3_ID, msgT3);
 8005b4c:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8005b50:	4619      	mov	r1, r3
 8005b52:	f240 4009 	movw	r0, #1033	@ 0x409
 8005b56:	f7ff f8e3 	bl	8004d20 <can_transmit>
			can_transmit(CAN_M1_T4_ID, msgT4);
 8005b5a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8005b5e:	4619      	mov	r1, r3
 8005b60:	f240 400a 	movw	r0, #1034	@ 0x40a
 8005b64:	f7ff f8dc 	bl	8004d20 <can_transmit>
			can_transmit(CAN_M1_T5_ID, msgT5);
 8005b68:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8005b6c:	4619      	mov	r1, r3
 8005b6e:	f240 400b 	movw	r0, #1035	@ 0x40b
 8005b72:	f7ff f8d5 	bl	8004d20 <can_transmit>
			break;
 8005b76:	e093      	b.n	8005ca0 <transmit_temperatures+0x36c>
		case 2:
			can_transmit(CAN_M2_T1_ID, msgT1);
 8005b78:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8005b7c:	4619      	mov	r1, r3
 8005b7e:	f240 400c 	movw	r0, #1036	@ 0x40c
 8005b82:	f7ff f8cd 	bl	8004d20 <can_transmit>
			can_transmit(CAN_M2_T2_ID, msgT2);
 8005b86:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8005b8a:	4619      	mov	r1, r3
 8005b8c:	f240 400d 	movw	r0, #1037	@ 0x40d
 8005b90:	f7ff f8c6 	bl	8004d20 <can_transmit>
			can_transmit(CAN_M2_T3_ID, msgT3);
 8005b94:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8005b98:	4619      	mov	r1, r3
 8005b9a:	f240 400e 	movw	r0, #1038	@ 0x40e
 8005b9e:	f7ff f8bf 	bl	8004d20 <can_transmit>
			can_transmit(CAN_M2_T4_ID, msgT4);
 8005ba2:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8005ba6:	4619      	mov	r1, r3
 8005ba8:	f240 400f 	movw	r0, #1039	@ 0x40f
 8005bac:	f7ff f8b8 	bl	8004d20 <can_transmit>
			can_transmit(CAN_M2_T5_ID, msgT5);
 8005bb0:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8005bb4:	4619      	mov	r1, r3
 8005bb6:	f44f 6082 	mov.w	r0, #1040	@ 0x410
 8005bba:	f7ff f8b1 	bl	8004d20 <can_transmit>
			break;
 8005bbe:	e06f      	b.n	8005ca0 <transmit_temperatures+0x36c>
		case 3:
			can_transmit(CAN_M3_T1_ID, msgT1);
 8005bc0:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8005bc4:	4619      	mov	r1, r3
 8005bc6:	f240 4011 	movw	r0, #1041	@ 0x411
 8005bca:	f7ff f8a9 	bl	8004d20 <can_transmit>
			can_transmit(CAN_M3_T2_ID, msgT2);
 8005bce:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8005bd2:	4619      	mov	r1, r3
 8005bd4:	f240 4012 	movw	r0, #1042	@ 0x412
 8005bd8:	f7ff f8a2 	bl	8004d20 <can_transmit>
			can_transmit(CAN_M3_T3_ID, msgT3);
 8005bdc:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8005be0:	4619      	mov	r1, r3
 8005be2:	f240 4013 	movw	r0, #1043	@ 0x413
 8005be6:	f7ff f89b 	bl	8004d20 <can_transmit>
			can_transmit(CAN_M3_T4_ID, msgT4);
 8005bea:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8005bee:	4619      	mov	r1, r3
 8005bf0:	f240 4014 	movw	r0, #1044	@ 0x414
 8005bf4:	f7ff f894 	bl	8004d20 <can_transmit>
			can_transmit(CAN_M3_T5_ID, msgT5);
 8005bf8:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8005bfc:	4619      	mov	r1, r3
 8005bfe:	f240 4015 	movw	r0, #1045	@ 0x415
 8005c02:	f7ff f88d 	bl	8004d20 <can_transmit>
			break;
 8005c06:	e04b      	b.n	8005ca0 <transmit_temperatures+0x36c>
		case 4:
			can_transmit(CAN_M4_T1_ID, msgT1);
 8005c08:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8005c0c:	4619      	mov	r1, r3
 8005c0e:	f240 4016 	movw	r0, #1046	@ 0x416
 8005c12:	f7ff f885 	bl	8004d20 <can_transmit>
			can_transmit(CAN_M4_T2_ID, msgT2);
 8005c16:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8005c1a:	4619      	mov	r1, r3
 8005c1c:	f240 4017 	movw	r0, #1047	@ 0x417
 8005c20:	f7ff f87e 	bl	8004d20 <can_transmit>
			can_transmit(CAN_M4_T3_ID, msgT3);
 8005c24:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8005c28:	4619      	mov	r1, r3
 8005c2a:	f44f 6083 	mov.w	r0, #1048	@ 0x418
 8005c2e:	f7ff f877 	bl	8004d20 <can_transmit>
			can_transmit(CAN_M4_T4_ID, msgT4);
 8005c32:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8005c36:	4619      	mov	r1, r3
 8005c38:	f240 4019 	movw	r0, #1049	@ 0x419
 8005c3c:	f7ff f870 	bl	8004d20 <can_transmit>
			can_transmit(CAN_M4_T5_ID, msgT5);
 8005c40:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8005c44:	4619      	mov	r1, r3
 8005c46:	f240 401a 	movw	r0, #1050	@ 0x41a
 8005c4a:	f7ff f869 	bl	8004d20 <can_transmit>
			break;
 8005c4e:	e027      	b.n	8005ca0 <transmit_temperatures+0x36c>
 8005c50:	447a0000 	.word	0x447a0000
 8005c54:	08010140 	.word	0x08010140
		case 5:
			can_transmit(CAN_M5_T1_ID, msgT1);
 8005c58:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8005c5c:	4619      	mov	r1, r3
 8005c5e:	f240 401b 	movw	r0, #1051	@ 0x41b
 8005c62:	f7ff f85d 	bl	8004d20 <can_transmit>
			can_transmit(CAN_M5_T2_ID, msgT2);
 8005c66:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8005c6a:	4619      	mov	r1, r3
 8005c6c:	f240 401c 	movw	r0, #1052	@ 0x41c
 8005c70:	f7ff f856 	bl	8004d20 <can_transmit>
			can_transmit(CAN_M5_T3_ID, msgT3);
 8005c74:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8005c78:	4619      	mov	r1, r3
 8005c7a:	f240 401d 	movw	r0, #1053	@ 0x41d
 8005c7e:	f7ff f84f 	bl	8004d20 <can_transmit>
			can_transmit(CAN_M5_T4_ID, msgT4);
 8005c82:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8005c86:	4619      	mov	r1, r3
 8005c88:	f240 401e 	movw	r0, #1054	@ 0x41e
 8005c8c:	f7ff f848 	bl	8004d20 <can_transmit>
			can_transmit(CAN_M5_T5_ID, msgT5);
 8005c90:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8005c94:	4619      	mov	r1, r3
 8005c96:	f240 401f 	movw	r0, #1055	@ 0x41f
 8005c9a:	f7ff f841 	bl	8004d20 <can_transmit>
			break;
 8005c9e:	bf00      	nop
	}
}
 8005ca0:	bf00      	nop
 8005ca2:	3760      	adds	r7, #96	@ 0x60
 8005ca4:	46bd      	mov	sp, r7
 8005ca6:	bd80      	pop	{r7, pc}

08005ca8 <full_diagnosis>:
#include "torch_dependencies.h"
#include <math.h>


void full_diagnosis(void)
{
 8005ca8:	b580      	push	{r7, lr}
 8005caa:	af00      	add	r7, sp, #0
	// Signify the diagnostic state (turn on all LEDs)
	active_led_on();
 8005cac:	f004 fe62 	bl	800a974 <active_led_on>
	charge_led_on();
 8005cb0:	f004 fe78 	bl	800a9a4 <charge_led_on>
	balance_led_on();
 8005cb4:	f004 fe8e 	bl	800a9d4 <balance_led_on>
	hot_led_on();
 8005cb8:	f004 fea4 	bl	800aa04 <hot_led_on>

	mux_test();
 8005cbc:	f001 fa8c 	bl	80071d8 <mux_test>
	wait(10);
 8005cc0:	200a      	movs	r0, #10
 8005cc2:	f004 fd9f 	bl	800a804 <wait>
	cell_register_test();
 8005cc6:	f001 fe11 	bl	80078ec <cell_register_test>
	wait(10);
 8005cca:	200a      	movs	r0, #10
 8005ccc:	f004 fd9a 	bl	800a804 <wait>
	aux_register_test();
 8005cd0:	f002 fb25 	bl	800831e <aux_register_test>
	wait(10);
 8005cd4:	200a      	movs	r0, #10
 8005cd6:	f004 fd95 	bl	800a804 <wait>
	stat_register_test();
 8005cda:	f001 fb2f 	bl	800733c <stat_register_test>
	wait(10);
 8005cde:	200a      	movs	r0, #10
 8005ce0:	f004 fd90 	bl	800a804 <wait>
	overlap_cell_measurement_test();
 8005ce4:	f002 ffd4 	bl	8008c90 <overlap_cell_measurement_test>
	wait(10);
 8005ce8:	200a      	movs	r0, #10
 8005cea:	f004 fd8b 	bl	800a804 <wait>
	ltc6813_analog_supply_check();
 8005cee:	f000 f860 	bl	8005db2 <ltc6813_analog_supply_check>
	wait(10);
 8005cf2:	200a      	movs	r0, #10
 8005cf4:	f004 fd86 	bl	800a804 <wait>
	ltc6813_digital_supply_check();
 8005cf8:	f000 f91d 	bl	8005f36 <ltc6813_digital_supply_check>
	wait(10);
 8005cfc:	200a      	movs	r0, #10
 8005cfe:	f004 fd81 	bl	800a804 <wait>
	ltc6813_reference_check();
 8005d02:	f000 f9da 	bl	80060ba <ltc6813_reference_check>
	wait(10);
 8005d06:	200a      	movs	r0, #10
 8005d08:	f004 fd7c 	bl	800a804 <wait>
	ltc6813_temperature_check();
 8005d0c:	f000 fa98 	bl	8006240 <ltc6813_temperature_check>
	wait(10);
 8005d10:	200a      	movs	r0, #10
 8005d12:	f004 fd77 	bl	800a804 <wait>
	open_cell_check();
 8005d16:	f000 fb95 	bl	8006444 <open_cell_check>
	wait(10);
 8005d1a:	200a      	movs	r0, #10
 8005d1c:	f004 fd72 	bl	800a804 <wait>
	open_thermistor_check();
 8005d20:	f001 f9f4 	bl	800710c <open_thermistor_check>

	balance_led_off();
 8005d24:	f004 fe62 	bl	800a9ec <balance_led_off>
	hot_led_off();
 8005d28:	f004 fe76 	bl	800aa18 <hot_led_off>
	charge_led_off();
 8005d2c:	f004 fe46 	bl	800a9bc <charge_led_off>
}
 8005d30:	bf00      	nop
 8005d32:	bd80      	pop	{r7, pc}

08005d34 <quick_diagnosis>:


void quick_diagnosis(uint8_t packStatus)
{
 8005d34:	b580      	push	{r7, lr}
 8005d36:	b082      	sub	sp, #8
 8005d38:	af00      	add	r7, sp, #0
 8005d3a:	4603      	mov	r3, r0
 8005d3c:	71fb      	strb	r3, [r7, #7]
	// Signify the diagnostic state (turn on all LEDs)
	if(packStatus == PACK_STATUS_CHARGING) {
 8005d3e:	79fb      	ldrb	r3, [r7, #7]
 8005d40:	2b04      	cmp	r3, #4
 8005d42:	d106      	bne.n	8005d52 <quick_diagnosis+0x1e>
		balance_led_on();
 8005d44:	f004 fe46 	bl	800a9d4 <balance_led_on>
		hot_led_on();
 8005d48:	f004 fe5c 	bl	800aa04 <hot_led_on>
		active_led_on();
 8005d4c:	f004 fe12 	bl	800a974 <active_led_on>
 8005d50:	e005      	b.n	8005d5e <quick_diagnosis+0x2a>
	}
	else {
		balance_led_on();
 8005d52:	f004 fe3f 	bl	800a9d4 <balance_led_on>
		hot_led_on();
 8005d56:	f004 fe55 	bl	800aa04 <hot_led_on>
		charge_led_on();
 8005d5a:	f004 fe23 	bl	800a9a4 <charge_led_on>
	}

	ltc6813_analog_supply_check();
 8005d5e:	f000 f828 	bl	8005db2 <ltc6813_analog_supply_check>
	wait(10);
 8005d62:	200a      	movs	r0, #10
 8005d64:	f004 fd4e 	bl	800a804 <wait>
	ltc6813_digital_supply_check();
 8005d68:	f000 f8e5 	bl	8005f36 <ltc6813_digital_supply_check>
	wait(10);
 8005d6c:	200a      	movs	r0, #10
 8005d6e:	f004 fd49 	bl	800a804 <wait>
	overlap_cell_measurement_test();
 8005d72:	f002 ff8d 	bl	8008c90 <overlap_cell_measurement_test>
	wait(10);
 8005d76:	200a      	movs	r0, #10
 8005d78:	f004 fd44 	bl	800a804 <wait>
	open_cell_check();
 8005d7c:	f000 fb62 	bl	8006444 <open_cell_check>
	wait(10);
 8005d80:	200a      	movs	r0, #10
 8005d82:	f004 fd3f 	bl	800a804 <wait>
	open_thermistor_check();
 8005d86:	f001 f9c1 	bl	800710c <open_thermistor_check>

	if(packStatus == PACK_STATUS_CHARGING) {
 8005d8a:	79fb      	ldrb	r3, [r7, #7]
 8005d8c:	2b04      	cmp	r3, #4
 8005d8e:	d106      	bne.n	8005d9e <quick_diagnosis+0x6a>
		balance_led_off();
 8005d90:	f004 fe2c 	bl	800a9ec <balance_led_off>
		hot_led_off();
 8005d94:	f004 fe40 	bl	800aa18 <hot_led_off>
		active_led_off();
 8005d98:	f004 fdf8 	bl	800a98c <active_led_off>
	else {
		balance_led_off();
		hot_led_off();
		charge_led_off();
	}
}
 8005d9c:	e005      	b.n	8005daa <quick_diagnosis+0x76>
		balance_led_off();
 8005d9e:	f004 fe25 	bl	800a9ec <balance_led_off>
		hot_led_off();
 8005da2:	f004 fe39 	bl	800aa18 <hot_led_off>
		charge_led_off();
 8005da6:	f004 fe09 	bl	800a9bc <charge_led_off>
}
 8005daa:	bf00      	nop
 8005dac:	3708      	adds	r7, #8
 8005dae:	46bd      	mov	sp, r7
 8005db0:	bd80      	pop	{r7, pc}

08005db2 <ltc6813_analog_supply_check>:


void ltc6813_analog_supply_check(void)
{
 8005db2:	b580      	push	{r7, lr}
 8005db4:	b088      	sub	sp, #32
 8005db6:	af00      	add	r7, sp, #0
	uint8_t sideA_attempts = 0;
 8005db8:	2300      	movs	r3, #0
 8005dba:	77fb      	strb	r3, [r7, #31]
	uint8_t sideB_attempts = 0;
 8005dbc:	2300      	movs	r3, #0
 8005dbe:	77bb      	strb	r3, [r7, #30]
	uint8_t sideA_subAttempts = 0;
 8005dc0:	2300      	movs	r3, #0
 8005dc2:	777b      	strb	r3, [r7, #29]
	uint8_t sideB_subAttempts = 0;
 8005dc4:	2300      	movs	r3, #0
 8005dc6:	773b      	strb	r3, [r7, #28]
	uint8_t sideB_statA[8];

	uint8_t sideA_statA_PECflag;
	uint8_t sideB_statA_PECflag;

	while(sideA_attempts < ATTEMPT_LIMIT || sideB_attempts < ATTEMPT_LIMIT) {
 8005dc8:	e099      	b.n	8005efe <ltc6813_analog_supply_check+0x14c>
		while(sideA_subAttempts < ATTEMPT_LIMIT || sideB_subAttempts < ATTEMPT_LIMIT) {
			CLRSTAT(SIDE_A);
 8005dca:	2001      	movs	r0, #1
 8005dcc:	f003 fea4 	bl	8009b18 <CLRSTAT>
			CLRSTAT(SIDE_B);
 8005dd0:	2000      	movs	r0, #0
 8005dd2:	f003 fea1 	bl	8009b18 <CLRSTAT>
			wait(3);
 8005dd6:	2003      	movs	r0, #3
 8005dd8:	f004 fd14 	bl	800a804 <wait>

			ADSTATD(SIDE_A);
 8005ddc:	2001      	movs	r0, #1
 8005dde:	f003 fdec 	bl	80099ba <ADSTATD>
			ADSTATD(SIDE_B);
 8005de2:	2000      	movs	r0, #0
 8005de4:	f003 fde9 	bl	80099ba <ADSTATD>
			wait(3);
 8005de8:	2003      	movs	r0, #3
 8005dea:	f004 fd0b 	bl	800a804 <wait>

			RDSTATA(sideA_statA, SIDE_A);
 8005dee:	f107 030c 	add.w	r3, r7, #12
 8005df2:	2101      	movs	r1, #1
 8005df4:	4618      	mov	r0, r3
 8005df6:	f003 fc09 	bl	800960c <RDSTATA>
			RDSTATA(sideB_statA, SIDE_B);
 8005dfa:	1d3b      	adds	r3, r7, #4
 8005dfc:	2100      	movs	r1, #0
 8005dfe:	4618      	mov	r0, r3
 8005e00:	f003 fc04 	bl	800960c <RDSTATA>

			sideA_statA_PECflag = verify_PEC15(sideA_statA);
 8005e04:	f107 030c 	add.w	r3, r7, #12
 8005e08:	4618      	mov	r0, r3
 8005e0a:	f003 f97e 	bl	800910a <verify_PEC15>
 8005e0e:	4603      	mov	r3, r0
 8005e10:	75fb      	strb	r3, [r7, #23]
			sideB_statA_PECflag = verify_PEC15(sideB_statA);
 8005e12:	1d3b      	adds	r3, r7, #4
 8005e14:	4618      	mov	r0, r3
 8005e16:	f003 f978 	bl	800910a <verify_PEC15>
 8005e1a:	4603      	mov	r3, r0
 8005e1c:	75bb      	strb	r3, [r7, #22]

			if(sideA_statA_PECflag == 2) { sideA_subAttempts = 13; }
 8005e1e:	7dfb      	ldrb	r3, [r7, #23]
 8005e20:	2b02      	cmp	r3, #2
 8005e22:	d102      	bne.n	8005e2a <ltc6813_analog_supply_check+0x78>
 8005e24:	230d      	movs	r3, #13
 8005e26:	777b      	strb	r3, [r7, #29]
 8005e28:	e005      	b.n	8005e36 <ltc6813_analog_supply_check+0x84>

			else {
				sideA_subAttempts++;
 8005e2a:	7f7b      	ldrb	r3, [r7, #29]
 8005e2c:	3301      	adds	r3, #1
 8005e2e:	777b      	strb	r3, [r7, #29]
				wait(1);
 8005e30:	2001      	movs	r0, #1
 8005e32:	f004 fce7 	bl	800a804 <wait>
			}

			if(sideB_statA_PECflag == 2) { sideB_subAttempts = 13; }
 8005e36:	7dbb      	ldrb	r3, [r7, #22]
 8005e38:	2b02      	cmp	r3, #2
 8005e3a:	d102      	bne.n	8005e42 <ltc6813_analog_supply_check+0x90>
 8005e3c:	230d      	movs	r3, #13
 8005e3e:	773b      	strb	r3, [r7, #28]
 8005e40:	e005      	b.n	8005e4e <ltc6813_analog_supply_check+0x9c>

			else {
				sideB_subAttempts++;
 8005e42:	7f3b      	ldrb	r3, [r7, #28]
 8005e44:	3301      	adds	r3, #1
 8005e46:	773b      	strb	r3, [r7, #28]
				wait(1);
 8005e48:	2001      	movs	r0, #1
 8005e4a:	f004 fcdb 	bl	800a804 <wait>
		while(sideA_subAttempts < ATTEMPT_LIMIT || sideB_subAttempts < ATTEMPT_LIMIT) {
 8005e4e:	7f7b      	ldrb	r3, [r7, #29]
 8005e50:	2b09      	cmp	r3, #9
 8005e52:	d9ba      	bls.n	8005dca <ltc6813_analog_supply_check+0x18>
 8005e54:	7f3b      	ldrb	r3, [r7, #28]
 8005e56:	2b09      	cmp	r3, #9
 8005e58:	d9b7      	bls.n	8005dca <ltc6813_analog_supply_check+0x18>
			}
		}
		if(sideA_subAttempts != 13) { error_loop(ERROR_PEC, 0, 0, SIDE_A); }
 8005e5a:	7f7b      	ldrb	r3, [r7, #29]
 8005e5c:	2b0d      	cmp	r3, #13
 8005e5e:	d005      	beq.n	8005e6c <ltc6813_analog_supply_check+0xba>
 8005e60:	2301      	movs	r3, #1
 8005e62:	2200      	movs	r2, #0
 8005e64:	2100      	movs	r1, #0
 8005e66:	2056      	movs	r0, #86	@ 0x56
 8005e68:	f7fe ffc6 	bl	8004df8 <error_loop>

		if(sideB_subAttempts != 13) { error_loop(ERROR_PEC, 0, 0, SIDE_B); }
 8005e6c:	7f3b      	ldrb	r3, [r7, #28]
 8005e6e:	2b0d      	cmp	r3, #13
 8005e70:	d005      	beq.n	8005e7e <ltc6813_analog_supply_check+0xcc>
 8005e72:	2300      	movs	r3, #0
 8005e74:	2200      	movs	r2, #0
 8005e76:	2100      	movs	r1, #0
 8005e78:	2056      	movs	r0, #86	@ 0x56
 8005e7a:	f7fe ffbd 	bl	8004df8 <error_loop>

		sideA_VA = (sideA_statA[5] << 8) | sideA_statA[4];
 8005e7e:	7c7b      	ldrb	r3, [r7, #17]
 8005e80:	b21b      	sxth	r3, r3
 8005e82:	021b      	lsls	r3, r3, #8
 8005e84:	b21a      	sxth	r2, r3
 8005e86:	7c3b      	ldrb	r3, [r7, #16]
 8005e88:	b21b      	sxth	r3, r3
 8005e8a:	4313      	orrs	r3, r2
 8005e8c:	b21b      	sxth	r3, r3
 8005e8e:	837b      	strh	r3, [r7, #26]
		sideB_VA = (sideB_statA[5] << 8) | sideB_statA[4];
 8005e90:	7a7b      	ldrb	r3, [r7, #9]
 8005e92:	b21b      	sxth	r3, r3
 8005e94:	021b      	lsls	r3, r3, #8
 8005e96:	b21a      	sxth	r2, r3
 8005e98:	7a3b      	ldrb	r3, [r7, #8]
 8005e9a:	b21b      	sxth	r3, r3
 8005e9c:	4313      	orrs	r3, r2
 8005e9e:	b21b      	sxth	r3, r3
 8005ea0:	833b      	strh	r3, [r7, #24]

		if(sideA_VA >= VA_MIN && sideA_VA <= VA_MAX) { sideA_attempts = 13; }
 8005ea2:	8b7b      	ldrh	r3, [r7, #26]
 8005ea4:	f64a 32df 	movw	r2, #43999	@ 0xabdf
 8005ea8:	4293      	cmp	r3, r2
 8005eaa:	d907      	bls.n	8005ebc <ltc6813_analog_supply_check+0x10a>
 8005eac:	8b7b      	ldrh	r3, [r7, #26]
 8005eae:	f64d 22c0 	movw	r2, #56000	@ 0xdac0
 8005eb2:	4293      	cmp	r3, r2
 8005eb4:	d802      	bhi.n	8005ebc <ltc6813_analog_supply_check+0x10a>
 8005eb6:	230d      	movs	r3, #13
 8005eb8:	77fb      	strb	r3, [r7, #31]
 8005eba:	e009      	b.n	8005ed0 <ltc6813_analog_supply_check+0x11e>

		else {
			sideA_attempts++;
 8005ebc:	7ffb      	ldrb	r3, [r7, #31]
 8005ebe:	3301      	adds	r3, #1
 8005ec0:	77fb      	strb	r3, [r7, #31]
			sideA_subAttempts = 0;
 8005ec2:	2300      	movs	r3, #0
 8005ec4:	777b      	strb	r3, [r7, #29]
			sideB_subAttempts = 0;
 8005ec6:	2300      	movs	r3, #0
 8005ec8:	773b      	strb	r3, [r7, #28]
			wait(1);
 8005eca:	2001      	movs	r0, #1
 8005ecc:	f004 fc9a 	bl	800a804 <wait>
		}

		if(sideB_VA >= VA_MIN && sideB_VA <= VA_MAX) { sideB_attempts = 13; }
 8005ed0:	8b3b      	ldrh	r3, [r7, #24]
 8005ed2:	f64a 32df 	movw	r2, #43999	@ 0xabdf
 8005ed6:	4293      	cmp	r3, r2
 8005ed8:	d907      	bls.n	8005eea <ltc6813_analog_supply_check+0x138>
 8005eda:	8b3b      	ldrh	r3, [r7, #24]
 8005edc:	f64d 22c0 	movw	r2, #56000	@ 0xdac0
 8005ee0:	4293      	cmp	r3, r2
 8005ee2:	d802      	bhi.n	8005eea <ltc6813_analog_supply_check+0x138>
 8005ee4:	230d      	movs	r3, #13
 8005ee6:	77bb      	strb	r3, [r7, #30]
 8005ee8:	e009      	b.n	8005efe <ltc6813_analog_supply_check+0x14c>

		else {
			sideB_attempts++;
 8005eea:	7fbb      	ldrb	r3, [r7, #30]
 8005eec:	3301      	adds	r3, #1
 8005eee:	77bb      	strb	r3, [r7, #30]
			sideA_subAttempts = 0;
 8005ef0:	2300      	movs	r3, #0
 8005ef2:	777b      	strb	r3, [r7, #29]
			sideB_subAttempts = 0;
 8005ef4:	2300      	movs	r3, #0
 8005ef6:	773b      	strb	r3, [r7, #28]
			wait(1);
 8005ef8:	2001      	movs	r0, #1
 8005efa:	f004 fc83 	bl	800a804 <wait>
	while(sideA_attempts < ATTEMPT_LIMIT || sideB_attempts < ATTEMPT_LIMIT) {
 8005efe:	7ffb      	ldrb	r3, [r7, #31]
 8005f00:	2b09      	cmp	r3, #9
 8005f02:	d9a4      	bls.n	8005e4e <ltc6813_analog_supply_check+0x9c>
 8005f04:	7fbb      	ldrb	r3, [r7, #30]
 8005f06:	2b09      	cmp	r3, #9
 8005f08:	d9a1      	bls.n	8005e4e <ltc6813_analog_supply_check+0x9c>
		}
	}
	if(sideA_attempts != 13) { error_loop(ERROR_OUT_OF_RANGE_VA, 0, 0, SIDE_A); }
 8005f0a:	7ffb      	ldrb	r3, [r7, #31]
 8005f0c:	2b0d      	cmp	r3, #13
 8005f0e:	d005      	beq.n	8005f1c <ltc6813_analog_supply_check+0x16a>
 8005f10:	2301      	movs	r3, #1
 8005f12:	2200      	movs	r2, #0
 8005f14:	2100      	movs	r1, #0
 8005f16:	2050      	movs	r0, #80	@ 0x50
 8005f18:	f7fe ff6e 	bl	8004df8 <error_loop>

	if(sideB_attempts != 13) { error_loop(ERROR_OUT_OF_RANGE_VA, 0, 0, SIDE_B); }
 8005f1c:	7fbb      	ldrb	r3, [r7, #30]
 8005f1e:	2b0d      	cmp	r3, #13
 8005f20:	d005      	beq.n	8005f2e <ltc6813_analog_supply_check+0x17c>
 8005f22:	2300      	movs	r3, #0
 8005f24:	2200      	movs	r2, #0
 8005f26:	2100      	movs	r1, #0
 8005f28:	2050      	movs	r0, #80	@ 0x50
 8005f2a:	f7fe ff65 	bl	8004df8 <error_loop>
}
 8005f2e:	bf00      	nop
 8005f30:	3720      	adds	r7, #32
 8005f32:	46bd      	mov	sp, r7
 8005f34:	bd80      	pop	{r7, pc}

08005f36 <ltc6813_digital_supply_check>:


void ltc6813_digital_supply_check(void)
{
 8005f36:	b580      	push	{r7, lr}
 8005f38:	b088      	sub	sp, #32
 8005f3a:	af00      	add	r7, sp, #0
	uint8_t sideA_attempts = 0;
 8005f3c:	2300      	movs	r3, #0
 8005f3e:	77fb      	strb	r3, [r7, #31]
	uint8_t sideB_attempts = 0;
 8005f40:	2300      	movs	r3, #0
 8005f42:	77bb      	strb	r3, [r7, #30]
	uint8_t sideA_subAttempts = 0;
 8005f44:	2300      	movs	r3, #0
 8005f46:	777b      	strb	r3, [r7, #29]
	uint8_t sideB_subAttempts = 0;
 8005f48:	2300      	movs	r3, #0
 8005f4a:	773b      	strb	r3, [r7, #28]
	uint8_t sideB_statB[8];

	uint8_t sideA_statB_PECflag;
	uint8_t sideB_statB_PECflag;

	while(sideA_attempts < ATTEMPT_LIMIT || sideB_attempts < ATTEMPT_LIMIT) {
 8005f4c:	e099      	b.n	8006082 <ltc6813_digital_supply_check+0x14c>
		while(sideA_subAttempts < ATTEMPT_LIMIT || sideB_subAttempts < ATTEMPT_LIMIT) {
			CLRSTAT(SIDE_A);
 8005f4e:	2001      	movs	r0, #1
 8005f50:	f003 fde2 	bl	8009b18 <CLRSTAT>
			CLRSTAT(SIDE_B);
 8005f54:	2000      	movs	r0, #0
 8005f56:	f003 fddf 	bl	8009b18 <CLRSTAT>
			wait(3);
 8005f5a:	2003      	movs	r0, #3
 8005f5c:	f004 fc52 	bl	800a804 <wait>

			ADSTATD(SIDE_A);
 8005f60:	2001      	movs	r0, #1
 8005f62:	f003 fd2a 	bl	80099ba <ADSTATD>
			ADSTATD(SIDE_B);
 8005f66:	2000      	movs	r0, #0
 8005f68:	f003 fd27 	bl	80099ba <ADSTATD>
			wait(3);
 8005f6c:	2003      	movs	r0, #3
 8005f6e:	f004 fc49 	bl	800a804 <wait>

			RDSTATB(sideA_statB, SIDE_A);
 8005f72:	f107 030c 	add.w	r3, r7, #12
 8005f76:	2101      	movs	r1, #1
 8005f78:	4618      	mov	r0, r3
 8005f7a:	f003 fb6b 	bl	8009654 <RDSTATB>
			RDSTATB(sideB_statB, SIDE_B);
 8005f7e:	1d3b      	adds	r3, r7, #4
 8005f80:	2100      	movs	r1, #0
 8005f82:	4618      	mov	r0, r3
 8005f84:	f003 fb66 	bl	8009654 <RDSTATB>

			sideA_statB_PECflag = verify_PEC15(sideA_statB);
 8005f88:	f107 030c 	add.w	r3, r7, #12
 8005f8c:	4618      	mov	r0, r3
 8005f8e:	f003 f8bc 	bl	800910a <verify_PEC15>
 8005f92:	4603      	mov	r3, r0
 8005f94:	75fb      	strb	r3, [r7, #23]
			sideB_statB_PECflag = verify_PEC15(sideB_statB);
 8005f96:	1d3b      	adds	r3, r7, #4
 8005f98:	4618      	mov	r0, r3
 8005f9a:	f003 f8b6 	bl	800910a <verify_PEC15>
 8005f9e:	4603      	mov	r3, r0
 8005fa0:	75bb      	strb	r3, [r7, #22]

			if(sideA_statB_PECflag == 2) { sideA_subAttempts = 13; }
 8005fa2:	7dfb      	ldrb	r3, [r7, #23]
 8005fa4:	2b02      	cmp	r3, #2
 8005fa6:	d102      	bne.n	8005fae <ltc6813_digital_supply_check+0x78>
 8005fa8:	230d      	movs	r3, #13
 8005faa:	777b      	strb	r3, [r7, #29]
 8005fac:	e005      	b.n	8005fba <ltc6813_digital_supply_check+0x84>

			else {
				sideA_subAttempts++;
 8005fae:	7f7b      	ldrb	r3, [r7, #29]
 8005fb0:	3301      	adds	r3, #1
 8005fb2:	777b      	strb	r3, [r7, #29]
				wait(1);
 8005fb4:	2001      	movs	r0, #1
 8005fb6:	f004 fc25 	bl	800a804 <wait>
			}

			if(sideB_statB_PECflag == 2) { sideB_subAttempts = 13; }
 8005fba:	7dbb      	ldrb	r3, [r7, #22]
 8005fbc:	2b02      	cmp	r3, #2
 8005fbe:	d102      	bne.n	8005fc6 <ltc6813_digital_supply_check+0x90>
 8005fc0:	230d      	movs	r3, #13
 8005fc2:	773b      	strb	r3, [r7, #28]
 8005fc4:	e005      	b.n	8005fd2 <ltc6813_digital_supply_check+0x9c>

			else {
				sideB_subAttempts++;
 8005fc6:	7f3b      	ldrb	r3, [r7, #28]
 8005fc8:	3301      	adds	r3, #1
 8005fca:	773b      	strb	r3, [r7, #28]
				wait(1);
 8005fcc:	2001      	movs	r0, #1
 8005fce:	f004 fc19 	bl	800a804 <wait>
		while(sideA_subAttempts < ATTEMPT_LIMIT || sideB_subAttempts < ATTEMPT_LIMIT) {
 8005fd2:	7f7b      	ldrb	r3, [r7, #29]
 8005fd4:	2b09      	cmp	r3, #9
 8005fd6:	d9ba      	bls.n	8005f4e <ltc6813_digital_supply_check+0x18>
 8005fd8:	7f3b      	ldrb	r3, [r7, #28]
 8005fda:	2b09      	cmp	r3, #9
 8005fdc:	d9b7      	bls.n	8005f4e <ltc6813_digital_supply_check+0x18>
			}
		}
		if(sideA_subAttempts != 13) { error_loop(ERROR_PEC, 0, 0, SIDE_A); }
 8005fde:	7f7b      	ldrb	r3, [r7, #29]
 8005fe0:	2b0d      	cmp	r3, #13
 8005fe2:	d005      	beq.n	8005ff0 <ltc6813_digital_supply_check+0xba>
 8005fe4:	2301      	movs	r3, #1
 8005fe6:	2200      	movs	r2, #0
 8005fe8:	2100      	movs	r1, #0
 8005fea:	2056      	movs	r0, #86	@ 0x56
 8005fec:	f7fe ff04 	bl	8004df8 <error_loop>

		if(sideB_subAttempts != 13) { error_loop(ERROR_PEC, 0, 0, SIDE_B); }
 8005ff0:	7f3b      	ldrb	r3, [r7, #28]
 8005ff2:	2b0d      	cmp	r3, #13
 8005ff4:	d005      	beq.n	8006002 <ltc6813_digital_supply_check+0xcc>
 8005ff6:	2300      	movs	r3, #0
 8005ff8:	2200      	movs	r2, #0
 8005ffa:	2100      	movs	r1, #0
 8005ffc:	2056      	movs	r0, #86	@ 0x56
 8005ffe:	f7fe fefb 	bl	8004df8 <error_loop>

		sideA_VD = (sideA_statB[1] << 8) | sideA_statB[0];
 8006002:	7b7b      	ldrb	r3, [r7, #13]
 8006004:	b21b      	sxth	r3, r3
 8006006:	021b      	lsls	r3, r3, #8
 8006008:	b21a      	sxth	r2, r3
 800600a:	7b3b      	ldrb	r3, [r7, #12]
 800600c:	b21b      	sxth	r3, r3
 800600e:	4313      	orrs	r3, r2
 8006010:	b21b      	sxth	r3, r3
 8006012:	837b      	strh	r3, [r7, #26]
		sideB_VD = (sideB_statB[1] << 8) | sideB_statB[0];
 8006014:	797b      	ldrb	r3, [r7, #5]
 8006016:	b21b      	sxth	r3, r3
 8006018:	021b      	lsls	r3, r3, #8
 800601a:	b21a      	sxth	r2, r3
 800601c:	793b      	ldrb	r3, [r7, #4]
 800601e:	b21b      	sxth	r3, r3
 8006020:	4313      	orrs	r3, r2
 8006022:	b21b      	sxth	r3, r3
 8006024:	833b      	strh	r3, [r7, #24]

		if(sideA_VD >= VD_MIN && sideA_VD <= VD_MAX) { sideA_attempts = 13; }
 8006026:	8b7b      	ldrh	r3, [r7, #26]
 8006028:	f246 528f 	movw	r2, #25999	@ 0x658f
 800602c:	4293      	cmp	r3, r2
 800602e:	d907      	bls.n	8006040 <ltc6813_digital_supply_check+0x10a>
 8006030:	8b7b      	ldrh	r3, [r7, #26]
 8006032:	f249 0288 	movw	r2, #37000	@ 0x9088
 8006036:	4293      	cmp	r3, r2
 8006038:	d802      	bhi.n	8006040 <ltc6813_digital_supply_check+0x10a>
 800603a:	230d      	movs	r3, #13
 800603c:	77fb      	strb	r3, [r7, #31]
 800603e:	e009      	b.n	8006054 <ltc6813_digital_supply_check+0x11e>

		else {
			sideA_attempts++;
 8006040:	7ffb      	ldrb	r3, [r7, #31]
 8006042:	3301      	adds	r3, #1
 8006044:	77fb      	strb	r3, [r7, #31]
			sideA_subAttempts = 0;
 8006046:	2300      	movs	r3, #0
 8006048:	777b      	strb	r3, [r7, #29]
			sideB_subAttempts = 0;
 800604a:	2300      	movs	r3, #0
 800604c:	773b      	strb	r3, [r7, #28]
			wait(1);
 800604e:	2001      	movs	r0, #1
 8006050:	f004 fbd8 	bl	800a804 <wait>
		}

		if(sideB_VD >= VD_MIN && sideB_VD <= VD_MAX) { sideB_attempts = 13; }
 8006054:	8b3b      	ldrh	r3, [r7, #24]
 8006056:	f246 528f 	movw	r2, #25999	@ 0x658f
 800605a:	4293      	cmp	r3, r2
 800605c:	d907      	bls.n	800606e <ltc6813_digital_supply_check+0x138>
 800605e:	8b3b      	ldrh	r3, [r7, #24]
 8006060:	f249 0288 	movw	r2, #37000	@ 0x9088
 8006064:	4293      	cmp	r3, r2
 8006066:	d802      	bhi.n	800606e <ltc6813_digital_supply_check+0x138>
 8006068:	230d      	movs	r3, #13
 800606a:	77bb      	strb	r3, [r7, #30]
 800606c:	e009      	b.n	8006082 <ltc6813_digital_supply_check+0x14c>

		else {
			sideB_attempts++;
 800606e:	7fbb      	ldrb	r3, [r7, #30]
 8006070:	3301      	adds	r3, #1
 8006072:	77bb      	strb	r3, [r7, #30]
			sideA_subAttempts = 0;
 8006074:	2300      	movs	r3, #0
 8006076:	777b      	strb	r3, [r7, #29]
			sideB_subAttempts = 0;
 8006078:	2300      	movs	r3, #0
 800607a:	773b      	strb	r3, [r7, #28]
			wait(1);
 800607c:	2001      	movs	r0, #1
 800607e:	f004 fbc1 	bl	800a804 <wait>
	while(sideA_attempts < ATTEMPT_LIMIT || sideB_attempts < ATTEMPT_LIMIT) {
 8006082:	7ffb      	ldrb	r3, [r7, #31]
 8006084:	2b09      	cmp	r3, #9
 8006086:	d9a4      	bls.n	8005fd2 <ltc6813_digital_supply_check+0x9c>
 8006088:	7fbb      	ldrb	r3, [r7, #30]
 800608a:	2b09      	cmp	r3, #9
 800608c:	d9a1      	bls.n	8005fd2 <ltc6813_digital_supply_check+0x9c>
		}
	}
	if(sideA_attempts != 13) { error_loop(ERROR_OUT_OF_RANGE_VD, 0, 0, SIDE_A); }
 800608e:	7ffb      	ldrb	r3, [r7, #31]
 8006090:	2b0d      	cmp	r3, #13
 8006092:	d005      	beq.n	80060a0 <ltc6813_digital_supply_check+0x16a>
 8006094:	2301      	movs	r3, #1
 8006096:	2200      	movs	r2, #0
 8006098:	2100      	movs	r1, #0
 800609a:	2051      	movs	r0, #81	@ 0x51
 800609c:	f7fe feac 	bl	8004df8 <error_loop>

	if(sideB_attempts != 13) { error_loop(ERROR_OUT_OF_RANGE_VD, 0, 0, SIDE_B); }
 80060a0:	7fbb      	ldrb	r3, [r7, #30]
 80060a2:	2b0d      	cmp	r3, #13
 80060a4:	d005      	beq.n	80060b2 <ltc6813_digital_supply_check+0x17c>
 80060a6:	2300      	movs	r3, #0
 80060a8:	2200      	movs	r2, #0
 80060aa:	2100      	movs	r1, #0
 80060ac:	2051      	movs	r0, #81	@ 0x51
 80060ae:	f7fe fea3 	bl	8004df8 <error_loop>
}
 80060b2:	bf00      	nop
 80060b4:	3720      	adds	r7, #32
 80060b6:	46bd      	mov	sp, r7
 80060b8:	bd80      	pop	{r7, pc}

080060ba <ltc6813_reference_check>:


void ltc6813_reference_check(void)
{
 80060ba:	b580      	push	{r7, lr}
 80060bc:	b088      	sub	sp, #32
 80060be:	af00      	add	r7, sp, #0
	uint8_t sideA_attempts = 0;
 80060c0:	2300      	movs	r3, #0
 80060c2:	77fb      	strb	r3, [r7, #31]
	uint8_t sideB_attempts = 0;
 80060c4:	2300      	movs	r3, #0
 80060c6:	77bb      	strb	r3, [r7, #30]
	uint8_t sideA_subAttempts = 0;
 80060c8:	2300      	movs	r3, #0
 80060ca:	777b      	strb	r3, [r7, #29]
	uint8_t sideB_subAttempts = 0;
 80060cc:	2300      	movs	r3, #0
 80060ce:	773b      	strb	r3, [r7, #28]
	uint8_t sideB_auxB[8];

	uint8_t sideA_auxB_PECflag;
	uint8_t sideB_auxB_PECflag;

	while(sideA_attempts < ATTEMPT_LIMIT || sideB_attempts < ATTEMPT_LIMIT) {
 80060d0:	e099      	b.n	8006206 <ltc6813_reference_check+0x14c>
		while(sideA_subAttempts < ATTEMPT_LIMIT || sideB_subAttempts < ATTEMPT_LIMIT) {
			CLRAUX(SIDE_A);
 80060d2:	2001      	movs	r0, #1
 80060d4:	f003 fcfd 	bl	8009ad2 <CLRAUX>
			CLRAUX(SIDE_B);
 80060d8:	2000      	movs	r0, #0
 80060da:	f003 fcfa 	bl	8009ad2 <CLRAUX>
			wait(3);
 80060de:	2003      	movs	r0, #3
 80060e0:	f004 fb90 	bl	800a804 <wait>

			ADAXD(SIDE_A);
 80060e4:	2001      	movs	r0, #1
 80060e6:	f003 fc8b 	bl	8009a00 <ADAXD>
			ADAXD(SIDE_B);
 80060ea:	2000      	movs	r0, #0
 80060ec:	f003 fc88 	bl	8009a00 <ADAXD>
			wait(3);
 80060f0:	2003      	movs	r0, #3
 80060f2:	f004 fb87 	bl	800a804 <wait>

			RDAUXB(sideA_auxB, SIDE_A);
 80060f6:	f107 030c 	add.w	r3, r7, #12
 80060fa:	2101      	movs	r1, #1
 80060fc:	4618      	mov	r0, r3
 80060fe:	f003 faf1 	bl	80096e4 <RDAUXB>
			RDAUXB(sideB_auxB, SIDE_B);
 8006102:	1d3b      	adds	r3, r7, #4
 8006104:	2100      	movs	r1, #0
 8006106:	4618      	mov	r0, r3
 8006108:	f003 faec 	bl	80096e4 <RDAUXB>

			sideA_auxB_PECflag = verify_PEC15(sideA_auxB);
 800610c:	f107 030c 	add.w	r3, r7, #12
 8006110:	4618      	mov	r0, r3
 8006112:	f002 fffa 	bl	800910a <verify_PEC15>
 8006116:	4603      	mov	r3, r0
 8006118:	75fb      	strb	r3, [r7, #23]
			sideB_auxB_PECflag = verify_PEC15(sideB_auxB);
 800611a:	1d3b      	adds	r3, r7, #4
 800611c:	4618      	mov	r0, r3
 800611e:	f002 fff4 	bl	800910a <verify_PEC15>
 8006122:	4603      	mov	r3, r0
 8006124:	75bb      	strb	r3, [r7, #22]

			if(sideA_auxB_PECflag == 2) { sideA_subAttempts = 13; }
 8006126:	7dfb      	ldrb	r3, [r7, #23]
 8006128:	2b02      	cmp	r3, #2
 800612a:	d102      	bne.n	8006132 <ltc6813_reference_check+0x78>
 800612c:	230d      	movs	r3, #13
 800612e:	777b      	strb	r3, [r7, #29]
 8006130:	e005      	b.n	800613e <ltc6813_reference_check+0x84>

			else {
				sideA_subAttempts++;
 8006132:	7f7b      	ldrb	r3, [r7, #29]
 8006134:	3301      	adds	r3, #1
 8006136:	777b      	strb	r3, [r7, #29]
				wait(1);
 8006138:	2001      	movs	r0, #1
 800613a:	f004 fb63 	bl	800a804 <wait>
			}

			if(sideB_auxB_PECflag == 2) { sideB_subAttempts = 13; }
 800613e:	7dbb      	ldrb	r3, [r7, #22]
 8006140:	2b02      	cmp	r3, #2
 8006142:	d102      	bne.n	800614a <ltc6813_reference_check+0x90>
 8006144:	230d      	movs	r3, #13
 8006146:	773b      	strb	r3, [r7, #28]
 8006148:	e005      	b.n	8006156 <ltc6813_reference_check+0x9c>

			else {
				sideB_subAttempts++;
 800614a:	7f3b      	ldrb	r3, [r7, #28]
 800614c:	3301      	adds	r3, #1
 800614e:	773b      	strb	r3, [r7, #28]
				wait(1);
 8006150:	2001      	movs	r0, #1
 8006152:	f004 fb57 	bl	800a804 <wait>
		while(sideA_subAttempts < ATTEMPT_LIMIT || sideB_subAttempts < ATTEMPT_LIMIT) {
 8006156:	7f7b      	ldrb	r3, [r7, #29]
 8006158:	2b09      	cmp	r3, #9
 800615a:	d9ba      	bls.n	80060d2 <ltc6813_reference_check+0x18>
 800615c:	7f3b      	ldrb	r3, [r7, #28]
 800615e:	2b09      	cmp	r3, #9
 8006160:	d9b7      	bls.n	80060d2 <ltc6813_reference_check+0x18>
			}
		}
		if(sideA_subAttempts != 13) { error_loop(ERROR_PEC, 0, 0, SIDE_A); }
 8006162:	7f7b      	ldrb	r3, [r7, #29]
 8006164:	2b0d      	cmp	r3, #13
 8006166:	d005      	beq.n	8006174 <ltc6813_reference_check+0xba>
 8006168:	2301      	movs	r3, #1
 800616a:	2200      	movs	r2, #0
 800616c:	2100      	movs	r1, #0
 800616e:	2056      	movs	r0, #86	@ 0x56
 8006170:	f7fe fe42 	bl	8004df8 <error_loop>

		if(sideB_subAttempts != 13) { error_loop(ERROR_PEC, 0, 0, SIDE_B); }
 8006174:	7f3b      	ldrb	r3, [r7, #28]
 8006176:	2b0d      	cmp	r3, #13
 8006178:	d005      	beq.n	8006186 <ltc6813_reference_check+0xcc>
 800617a:	2300      	movs	r3, #0
 800617c:	2200      	movs	r2, #0
 800617e:	2100      	movs	r1, #0
 8006180:	2056      	movs	r0, #86	@ 0x56
 8006182:	f7fe fe39 	bl	8004df8 <error_loop>

		sideA_ref2 = (sideA_auxB[5] << 8) | sideA_auxB[4];
 8006186:	7c7b      	ldrb	r3, [r7, #17]
 8006188:	b21b      	sxth	r3, r3
 800618a:	021b      	lsls	r3, r3, #8
 800618c:	b21a      	sxth	r2, r3
 800618e:	7c3b      	ldrb	r3, [r7, #16]
 8006190:	b21b      	sxth	r3, r3
 8006192:	4313      	orrs	r3, r2
 8006194:	b21b      	sxth	r3, r3
 8006196:	837b      	strh	r3, [r7, #26]
		sideB_ref2 = (sideB_auxB[5] << 8) | sideB_auxB[4];
 8006198:	7a7b      	ldrb	r3, [r7, #9]
 800619a:	b21b      	sxth	r3, r3
 800619c:	021b      	lsls	r3, r3, #8
 800619e:	b21a      	sxth	r2, r3
 80061a0:	7a3b      	ldrb	r3, [r7, #8]
 80061a2:	b21b      	sxth	r3, r3
 80061a4:	4313      	orrs	r3, r2
 80061a6:	b21b      	sxth	r3, r3
 80061a8:	833b      	strh	r3, [r7, #24]

		if(sideA_ref2 >= REF2_MIN && sideA_ref2 <= REF2_MAX) { sideA_attempts = 13; }
 80061aa:	8b7b      	ldrh	r3, [r7, #26]
 80061ac:	f247 02e3 	movw	r2, #28899	@ 0x70e3
 80061b0:	4293      	cmp	r3, r2
 80061b2:	d907      	bls.n	80061c4 <ltc6813_reference_check+0x10a>
 80061b4:	8b7b      	ldrh	r3, [r7, #26]
 80061b6:	f647 12a4 	movw	r2, #31140	@ 0x79a4
 80061ba:	4293      	cmp	r3, r2
 80061bc:	d802      	bhi.n	80061c4 <ltc6813_reference_check+0x10a>
 80061be:	230d      	movs	r3, #13
 80061c0:	77fb      	strb	r3, [r7, #31]
 80061c2:	e009      	b.n	80061d8 <ltc6813_reference_check+0x11e>

		else {
			sideA_attempts++;
 80061c4:	7ffb      	ldrb	r3, [r7, #31]
 80061c6:	3301      	adds	r3, #1
 80061c8:	77fb      	strb	r3, [r7, #31]
			sideA_subAttempts = 0;
 80061ca:	2300      	movs	r3, #0
 80061cc:	777b      	strb	r3, [r7, #29]
			sideB_subAttempts = 0;
 80061ce:	2300      	movs	r3, #0
 80061d0:	773b      	strb	r3, [r7, #28]
			wait(1);
 80061d2:	2001      	movs	r0, #1
 80061d4:	f004 fb16 	bl	800a804 <wait>
		}

		if(sideB_ref2 >= REF2_MIN && sideB_ref2 <= REF2_MAX) { sideB_attempts = 13; }
 80061d8:	8b3b      	ldrh	r3, [r7, #24]
 80061da:	f247 02e3 	movw	r2, #28899	@ 0x70e3
 80061de:	4293      	cmp	r3, r2
 80061e0:	d907      	bls.n	80061f2 <ltc6813_reference_check+0x138>
 80061e2:	8b3b      	ldrh	r3, [r7, #24]
 80061e4:	f647 12a4 	movw	r2, #31140	@ 0x79a4
 80061e8:	4293      	cmp	r3, r2
 80061ea:	d802      	bhi.n	80061f2 <ltc6813_reference_check+0x138>
 80061ec:	230d      	movs	r3, #13
 80061ee:	77bb      	strb	r3, [r7, #30]
 80061f0:	e009      	b.n	8006206 <ltc6813_reference_check+0x14c>

		else {
			sideB_attempts++;
 80061f2:	7fbb      	ldrb	r3, [r7, #30]
 80061f4:	3301      	adds	r3, #1
 80061f6:	77bb      	strb	r3, [r7, #30]
			sideA_subAttempts = 0;
 80061f8:	2300      	movs	r3, #0
 80061fa:	777b      	strb	r3, [r7, #29]
			sideB_subAttempts = 0;
 80061fc:	2300      	movs	r3, #0
 80061fe:	773b      	strb	r3, [r7, #28]
			wait(1);
 8006200:	2001      	movs	r0, #1
 8006202:	f004 faff 	bl	800a804 <wait>
	while(sideA_attempts < ATTEMPT_LIMIT || sideB_attempts < ATTEMPT_LIMIT) {
 8006206:	7ffb      	ldrb	r3, [r7, #31]
 8006208:	2b09      	cmp	r3, #9
 800620a:	d9a4      	bls.n	8006156 <ltc6813_reference_check+0x9c>
 800620c:	7fbb      	ldrb	r3, [r7, #30]
 800620e:	2b09      	cmp	r3, #9
 8006210:	d9a1      	bls.n	8006156 <ltc6813_reference_check+0x9c>
		}
	}
	if(sideA_attempts != 13) { error_loop(ERROR_OUT_OF_RANGE_REF2, 0, 0, SIDE_A); }
 8006212:	7ffb      	ldrb	r3, [r7, #31]
 8006214:	2b0d      	cmp	r3, #13
 8006216:	d005      	beq.n	8006224 <ltc6813_reference_check+0x16a>
 8006218:	2301      	movs	r3, #1
 800621a:	2200      	movs	r2, #0
 800621c:	2100      	movs	r1, #0
 800621e:	2052      	movs	r0, #82	@ 0x52
 8006220:	f7fe fdea 	bl	8004df8 <error_loop>

	if(sideB_attempts != 13) { error_loop(ERROR_OUT_OF_RANGE_REF2, 0, 0, SIDE_B); }
 8006224:	7fbb      	ldrb	r3, [r7, #30]
 8006226:	2b0d      	cmp	r3, #13
 8006228:	d005      	beq.n	8006236 <ltc6813_reference_check+0x17c>
 800622a:	2300      	movs	r3, #0
 800622c:	2200      	movs	r2, #0
 800622e:	2100      	movs	r1, #0
 8006230:	2052      	movs	r0, #82	@ 0x52
 8006232:	f7fe fde1 	bl	8004df8 <error_loop>
}
 8006236:	bf00      	nop
 8006238:	3720      	adds	r7, #32
 800623a:	46bd      	mov	sp, r7
 800623c:	bd80      	pop	{r7, pc}
	...

08006240 <ltc6813_temperature_check>:


void ltc6813_temperature_check(void)
{
 8006240:	b580      	push	{r7, lr}
 8006242:	b08a      	sub	sp, #40	@ 0x28
 8006244:	af00      	add	r7, sp, #0
	uint8_t sideA_attempts = 0;
 8006246:	2300      	movs	r3, #0
 8006248:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	uint8_t sideB_attempts = 0;
 800624c:	2300      	movs	r3, #0
 800624e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	uint8_t sideA_subAttempts = 0;
 8006252:	2300      	movs	r3, #0
 8006254:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
	uint8_t sideB_subAttempts = 0;
 8006258:	2300      	movs	r3, #0
 800625a:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
	uint8_t sideB_statA[8];

	uint8_t sideA_statA_PECflag;
	uint8_t sideB_statA_PECflag;

	while(sideA_attempts < ATTEMPT_LIMIT || sideB_attempts < ATTEMPT_LIMIT) {
 800625e:	e0c9      	b.n	80063f4 <ltc6813_temperature_check+0x1b4>
		while(sideA_subAttempts < ATTEMPT_LIMIT || sideB_subAttempts < ATTEMPT_LIMIT) {
			CLRSTAT(SIDE_A);
 8006260:	2001      	movs	r0, #1
 8006262:	f003 fc59 	bl	8009b18 <CLRSTAT>
			CLRSTAT(SIDE_B);
 8006266:	2000      	movs	r0, #0
 8006268:	f003 fc56 	bl	8009b18 <CLRSTAT>
			wait(3);
 800626c:	2003      	movs	r0, #3
 800626e:	f004 fac9 	bl	800a804 <wait>

			ADSTATD(SIDE_A);
 8006272:	2001      	movs	r0, #1
 8006274:	f003 fba1 	bl	80099ba <ADSTATD>
			ADSTATD(SIDE_B);
 8006278:	2000      	movs	r0, #0
 800627a:	f003 fb9e 	bl	80099ba <ADSTATD>
			wait(3);
 800627e:	2003      	movs	r0, #3
 8006280:	f004 fac0 	bl	800a804 <wait>

			RDSTATA(sideA_statA, SIDE_A);
 8006284:	f107 030c 	add.w	r3, r7, #12
 8006288:	2101      	movs	r1, #1
 800628a:	4618      	mov	r0, r3
 800628c:	f003 f9be 	bl	800960c <RDSTATA>
			RDSTATA(sideB_statA, SIDE_B);
 8006290:	1d3b      	adds	r3, r7, #4
 8006292:	2100      	movs	r1, #0
 8006294:	4618      	mov	r0, r3
 8006296:	f003 f9b9 	bl	800960c <RDSTATA>

			sideA_statA_PECflag = verify_PEC15(sideA_statA);
 800629a:	f107 030c 	add.w	r3, r7, #12
 800629e:	4618      	mov	r0, r3
 80062a0:	f002 ff33 	bl	800910a <verify_PEC15>
 80062a4:	4603      	mov	r3, r0
 80062a6:	75fb      	strb	r3, [r7, #23]
			sideB_statA_PECflag = verify_PEC15(sideB_statA);
 80062a8:	1d3b      	adds	r3, r7, #4
 80062aa:	4618      	mov	r0, r3
 80062ac:	f002 ff2d 	bl	800910a <verify_PEC15>
 80062b0:	4603      	mov	r3, r0
 80062b2:	75bb      	strb	r3, [r7, #22]

			if(sideA_statA_PECflag == 2) { sideA_subAttempts = 13; }
 80062b4:	7dfb      	ldrb	r3, [r7, #23]
 80062b6:	2b02      	cmp	r3, #2
 80062b8:	d103      	bne.n	80062c2 <ltc6813_temperature_check+0x82>
 80062ba:	230d      	movs	r3, #13
 80062bc:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 80062c0:	e007      	b.n	80062d2 <ltc6813_temperature_check+0x92>

			else {
				sideA_subAttempts++;
 80062c2:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80062c6:	3301      	adds	r3, #1
 80062c8:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
				wait(1);
 80062cc:	2001      	movs	r0, #1
 80062ce:	f004 fa99 	bl	800a804 <wait>
			}

			if(sideB_statA_PECflag == 2) { sideB_subAttempts = 13; }
 80062d2:	7dbb      	ldrb	r3, [r7, #22]
 80062d4:	2b02      	cmp	r3, #2
 80062d6:	d103      	bne.n	80062e0 <ltc6813_temperature_check+0xa0>
 80062d8:	230d      	movs	r3, #13
 80062da:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
 80062de:	e007      	b.n	80062f0 <ltc6813_temperature_check+0xb0>

			else {
				sideB_subAttempts++;
 80062e0:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80062e4:	3301      	adds	r3, #1
 80062e6:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
				wait(1);
 80062ea:	2001      	movs	r0, #1
 80062ec:	f004 fa8a 	bl	800a804 <wait>
		while(sideA_subAttempts < ATTEMPT_LIMIT || sideB_subAttempts < ATTEMPT_LIMIT) {
 80062f0:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80062f4:	2b09      	cmp	r3, #9
 80062f6:	d9b3      	bls.n	8006260 <ltc6813_temperature_check+0x20>
 80062f8:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80062fc:	2b09      	cmp	r3, #9
 80062fe:	d9af      	bls.n	8006260 <ltc6813_temperature_check+0x20>
			}
		}
		if(sideA_subAttempts != 13) { error_loop(ERROR_PEC, 0, 0, SIDE_A); }
 8006300:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8006304:	2b0d      	cmp	r3, #13
 8006306:	d005      	beq.n	8006314 <ltc6813_temperature_check+0xd4>
 8006308:	2301      	movs	r3, #1
 800630a:	2200      	movs	r2, #0
 800630c:	2100      	movs	r1, #0
 800630e:	2056      	movs	r0, #86	@ 0x56
 8006310:	f7fe fd72 	bl	8004df8 <error_loop>

		if(sideB_subAttempts != 13) { error_loop(ERROR_PEC, 0, 0, SIDE_B); }
 8006314:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8006318:	2b0d      	cmp	r3, #13
 800631a:	d005      	beq.n	8006328 <ltc6813_temperature_check+0xe8>
 800631c:	2300      	movs	r3, #0
 800631e:	2200      	movs	r2, #0
 8006320:	2100      	movs	r1, #0
 8006322:	2056      	movs	r0, #86	@ 0x56
 8006324:	f7fe fd68 	bl	8004df8 <error_loop>

		sideA_ITMP = (sideA_statA[3] << 8) | sideA_statA[2];
 8006328:	7bfb      	ldrb	r3, [r7, #15]
 800632a:	b21b      	sxth	r3, r3
 800632c:	021b      	lsls	r3, r3, #8
 800632e:	b21a      	sxth	r2, r3
 8006330:	7bbb      	ldrb	r3, [r7, #14]
 8006332:	b21b      	sxth	r3, r3
 8006334:	4313      	orrs	r3, r2
 8006336:	b21b      	sxth	r3, r3
 8006338:	847b      	strh	r3, [r7, #34]	@ 0x22
		sideB_ITMP = (sideB_statA[3] << 8) | sideB_statA[2];
 800633a:	79fb      	ldrb	r3, [r7, #7]
 800633c:	b21b      	sxth	r3, r3
 800633e:	021b      	lsls	r3, r3, #8
 8006340:	b21a      	sxth	r2, r3
 8006342:	79bb      	ldrb	r3, [r7, #6]
 8006344:	b21b      	sxth	r3, r3
 8006346:	4313      	orrs	r3, r2
 8006348:	b21b      	sxth	r3, r3
 800634a:	843b      	strh	r3, [r7, #32]

		// Following 2 lines use LTC6813 internal temperature formula (page 27 on LTC6813 data sheet)
		sideA_LTC6813Temperature = (float)sideA_ITMP*(0.0001f/0.0076f) - 276.0f;
 800634c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800634e:	ee07 3a90 	vmov	s15, r3
 8006352:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006356:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 8006438 <ltc6813_temperature_check+0x1f8>
 800635a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800635e:	ed9f 7a37 	vldr	s14, [pc, #220]	@ 800643c <ltc6813_temperature_check+0x1fc>
 8006362:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006366:	edc7 7a07 	vstr	s15, [r7, #28]
		sideB_LTC6813Temperature = (float)sideB_ITMP*(0.0001f/0.0076f) - 276.0f;
 800636a:	8c3b      	ldrh	r3, [r7, #32]
 800636c:	ee07 3a90 	vmov	s15, r3
 8006370:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006374:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 8006438 <ltc6813_temperature_check+0x1f8>
 8006378:	ee67 7a87 	vmul.f32	s15, s15, s14
 800637c:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 800643c <ltc6813_temperature_check+0x1fc>
 8006380:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006384:	edc7 7a06 	vstr	s15, [r7, #24]

		if(sideA_LTC6813Temperature < LTC6813_TEMPERATURE_LIMIT) { sideA_attempts = 13; }
 8006388:	edd7 7a07 	vldr	s15, [r7, #28]
 800638c:	ed9f 7a2c 	vldr	s14, [pc, #176]	@ 8006440 <ltc6813_temperature_check+0x200>
 8006390:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006394:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006398:	d503      	bpl.n	80063a2 <ltc6813_temperature_check+0x162>
 800639a:	230d      	movs	r3, #13
 800639c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80063a0:	e00d      	b.n	80063be <ltc6813_temperature_check+0x17e>

		else {
			sideA_attempts++;
 80063a2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80063a6:	3301      	adds	r3, #1
 80063a8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			sideA_subAttempts = 0;
 80063ac:	2300      	movs	r3, #0
 80063ae:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
			sideB_subAttempts = 0;
 80063b2:	2300      	movs	r3, #0
 80063b4:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
			wait(1);
 80063b8:	2001      	movs	r0, #1
 80063ba:	f004 fa23 	bl	800a804 <wait>
		}

		if(sideB_LTC6813Temperature < LTC6813_TEMPERATURE_LIMIT) { sideB_attempts = 13; }
 80063be:	edd7 7a06 	vldr	s15, [r7, #24]
 80063c2:	ed9f 7a1f 	vldr	s14, [pc, #124]	@ 8006440 <ltc6813_temperature_check+0x200>
 80063c6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80063ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80063ce:	d503      	bpl.n	80063d8 <ltc6813_temperature_check+0x198>
 80063d0:	230d      	movs	r3, #13
 80063d2:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80063d6:	e00d      	b.n	80063f4 <ltc6813_temperature_check+0x1b4>

		else {
			sideB_attempts++;
 80063d8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80063dc:	3301      	adds	r3, #1
 80063de:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
			sideA_subAttempts = 0;
 80063e2:	2300      	movs	r3, #0
 80063e4:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
			sideB_subAttempts = 0;
 80063e8:	2300      	movs	r3, #0
 80063ea:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
			wait(1);
 80063ee:	2001      	movs	r0, #1
 80063f0:	f004 fa08 	bl	800a804 <wait>
	while(sideA_attempts < ATTEMPT_LIMIT || sideB_attempts < ATTEMPT_LIMIT) {
 80063f4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80063f8:	2b09      	cmp	r3, #9
 80063fa:	f67f af79 	bls.w	80062f0 <ltc6813_temperature_check+0xb0>
 80063fe:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8006402:	2b09      	cmp	r3, #9
 8006404:	f67f af74 	bls.w	80062f0 <ltc6813_temperature_check+0xb0>
		}
	}
	if(sideA_attempts != 13) { error_loop(ERROR_LTC6813_OVERHEAT, 0, 0, SIDE_A); }
 8006408:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800640c:	2b0d      	cmp	r3, #13
 800640e:	d005      	beq.n	800641c <ltc6813_temperature_check+0x1dc>
 8006410:	2301      	movs	r3, #1
 8006412:	2200      	movs	r2, #0
 8006414:	2100      	movs	r1, #0
 8006416:	2053      	movs	r0, #83	@ 0x53
 8006418:	f7fe fcee 	bl	8004df8 <error_loop>

	if(sideB_attempts != 13) { error_loop(ERROR_LTC6813_OVERHEAT, 0, 0, SIDE_B); }
 800641c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8006420:	2b0d      	cmp	r3, #13
 8006422:	d005      	beq.n	8006430 <ltc6813_temperature_check+0x1f0>
 8006424:	2300      	movs	r3, #0
 8006426:	2200      	movs	r2, #0
 8006428:	2100      	movs	r1, #0
 800642a:	2053      	movs	r0, #83	@ 0x53
 800642c:	f7fe fce4 	bl	8004df8 <error_loop>
}
 8006430:	bf00      	nop
 8006432:	3728      	adds	r7, #40	@ 0x28
 8006434:	46bd      	mov	sp, r7
 8006436:	bd80      	pop	{r7, pc}
 8006438:	3c579435 	.word	0x3c579435
 800643c:	438a0000 	.word	0x438a0000
 8006440:	430c0000 	.word	0x430c0000

08006444 <open_cell_check>:


void open_cell_check(void)
{
 8006444:	b580      	push	{r7, lr}
 8006446:	b0c0      	sub	sp, #256	@ 0x100
 8006448:	af00      	add	r7, sp, #0
	uint8_t attempts = 0;
 800644a:	2300      	movs	r3, #0
 800644c:	f887 30ff 	strb.w	r3, [r7, #255]	@ 0xff
	uint8_t sideA_subAttempts = 0;
 8006450:	2300      	movs	r3, #0
 8006452:	f887 30fe 	strb.w	r3, [r7, #254]	@ 0xfe
	uint8_t sideB_subAttempts = 0;
 8006456:	2300      	movs	r3, #0
 8006458:	f887 30fd 	strb.w	r3, [r7, #253]	@ 0xfd

	uint8_t faultCellQty = 0;
 800645c:	2300      	movs	r3, #0
 800645e:	f887 30fc 	strb.w	r3, [r7, #252]	@ 0xfc
	uint8_t faultCells[CELL_QTY + 1] = {0};				// The CELL_QTY + 1 accounts for cell 0
 8006462:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8006466:	2200      	movs	r2, #0
 8006468:	601a      	str	r2, [r3, #0]
 800646a:	605a      	str	r2, [r3, #4]
 800646c:	609a      	str	r2, [r3, #8]
 800646e:	60da      	str	r2, [r3, #12]
 8006470:	611a      	str	r2, [r3, #16]
 8006472:	751a      	strb	r2, [r3, #20]
	uint8_t sideB_cellVoltageB_PECflag;
	uint8_t sideB_cellVoltageC_PECflag;
	uint8_t sideB_cellVoltageD_PECflag;

	// Step 1
	while(attempts < ATTEMPT_LIMIT) {
 8006474:	f000 be34 	b.w	80070e0 <open_cell_check+0xc9c>
		while(sideA_subAttempts < ATTEMPT_LIMIT || sideB_subAttempts < ATTEMPT_LIMIT) {
			for(uint8_t i = 0; i < ADOW_CONVERSION_RUNS; i++) {
 8006478:	2300      	movs	r3, #0
 800647a:	f887 30fb 	strb.w	r3, [r7, #251]	@ 0xfb
 800647e:	e018      	b.n	80064b2 <open_cell_check+0x6e>
				CLRCELL(SIDE_A);
 8006480:	2001      	movs	r0, #1
 8006482:	f003 fb03 	bl	8009a8c <CLRCELL>
				CLRCELL(SIDE_B);
 8006486:	2000      	movs	r0, #0
 8006488:	f003 fb00 	bl	8009a8c <CLRCELL>
				wait(3);
 800648c:	2003      	movs	r0, #3
 800648e:	f004 f9b9 	bl	800a804 <wait>

				ADOW(PU, SIDE_A);
 8006492:	2101      	movs	r1, #1
 8006494:	2000      	movs	r0, #0
 8006496:	f003 f9b5 	bl	8009804 <ADOW>
				ADOW(PU, SIDE_B);
 800649a:	2100      	movs	r1, #0
 800649c:	2000      	movs	r0, #0
 800649e:	f003 f9b1 	bl	8009804 <ADOW>
				wait(3);
 80064a2:	2003      	movs	r0, #3
 80064a4:	f004 f9ae 	bl	800a804 <wait>
			for(uint8_t i = 0; i < ADOW_CONVERSION_RUNS; i++) {
 80064a8:	f897 30fb 	ldrb.w	r3, [r7, #251]	@ 0xfb
 80064ac:	3301      	adds	r3, #1
 80064ae:	f887 30fb 	strb.w	r3, [r7, #251]	@ 0xfb
 80064b2:	f897 30fb 	ldrb.w	r3, [r7, #251]	@ 0xfb
 80064b6:	2b02      	cmp	r3, #2
 80064b8:	d9e2      	bls.n	8006480 <open_cell_check+0x3c>
			}
			RDCVA(sideA_cellVoltageA, SIDE_A);
 80064ba:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80064be:	2101      	movs	r1, #1
 80064c0:	4618      	mov	r0, r3
 80064c2:	f002 ffef 	bl	80094a4 <RDCVA>
			RDCVA(sideB_cellVoltageA, SIDE_B);
 80064c6:	f107 031c 	add.w	r3, r7, #28
 80064ca:	2100      	movs	r1, #0
 80064cc:	4618      	mov	r0, r3
 80064ce:	f002 ffe9 	bl	80094a4 <RDCVA>
			wait(1);
 80064d2:	2001      	movs	r0, #1
 80064d4:	f004 f996 	bl	800a804 <wait>
			RDCVB(sideA_cellVoltageB, SIDE_A);
 80064d8:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80064dc:	2101      	movs	r1, #1
 80064de:	4618      	mov	r0, r3
 80064e0:	f003 f804 	bl	80094ec <RDCVB>
			RDCVB(sideB_cellVoltageB, SIDE_B);
 80064e4:	f107 0314 	add.w	r3, r7, #20
 80064e8:	2100      	movs	r1, #0
 80064ea:	4618      	mov	r0, r3
 80064ec:	f002 fffe 	bl	80094ec <RDCVB>
			wait(1);
 80064f0:	2001      	movs	r0, #1
 80064f2:	f004 f987 	bl	800a804 <wait>
			RDCVC(sideA_cellVoltageC, SIDE_A);
 80064f6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80064fa:	2101      	movs	r1, #1
 80064fc:	4618      	mov	r0, r3
 80064fe:	f003 f819 	bl	8009534 <RDCVC>
			RDCVC(sideB_cellVoltageC, SIDE_B);
 8006502:	f107 030c 	add.w	r3, r7, #12
 8006506:	2100      	movs	r1, #0
 8006508:	4618      	mov	r0, r3
 800650a:	f003 f813 	bl	8009534 <RDCVC>
			wait(1);
 800650e:	2001      	movs	r0, #1
 8006510:	f004 f978 	bl	800a804 <wait>
			RDCVD(sideA_cellVoltageD, SIDE_A);
 8006514:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006518:	2101      	movs	r1, #1
 800651a:	4618      	mov	r0, r3
 800651c:	f003 f82e 	bl	800957c <RDCVD>
			RDCVD(sideB_cellVoltageD, SIDE_B);
 8006520:	1d3b      	adds	r3, r7, #4
 8006522:	2100      	movs	r1, #0
 8006524:	4618      	mov	r0, r3
 8006526:	f003 f829 	bl	800957c <RDCVD>
			wait(1);
 800652a:	2001      	movs	r0, #1
 800652c:	f004 f96a 	bl	800a804 <wait>

			sideA_cellVoltageA_PECflag = verify_PEC15(sideA_cellVoltageA);
 8006530:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8006534:	4618      	mov	r0, r3
 8006536:	f002 fde8 	bl	800910a <verify_PEC15>
 800653a:	4603      	mov	r3, r0
 800653c:	f887 30f0 	strb.w	r3, [r7, #240]	@ 0xf0
			sideA_cellVoltageB_PECflag = verify_PEC15(sideA_cellVoltageB);
 8006540:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8006544:	4618      	mov	r0, r3
 8006546:	f002 fde0 	bl	800910a <verify_PEC15>
 800654a:	4603      	mov	r3, r0
 800654c:	f887 30ef 	strb.w	r3, [r7, #239]	@ 0xef
			sideA_cellVoltageC_PECflag = verify_PEC15(sideA_cellVoltageC);
 8006550:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8006554:	4618      	mov	r0, r3
 8006556:	f002 fdd8 	bl	800910a <verify_PEC15>
 800655a:	4603      	mov	r3, r0
 800655c:	f887 30ee 	strb.w	r3, [r7, #238]	@ 0xee
			sideA_cellVoltageD_PECflag = verify_PEC15(sideA_cellVoltageD);
 8006560:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006564:	4618      	mov	r0, r3
 8006566:	f002 fdd0 	bl	800910a <verify_PEC15>
 800656a:	4603      	mov	r3, r0
 800656c:	f887 30ed 	strb.w	r3, [r7, #237]	@ 0xed

			sideB_cellVoltageA_PECflag = verify_PEC15(sideB_cellVoltageA);
 8006570:	f107 031c 	add.w	r3, r7, #28
 8006574:	4618      	mov	r0, r3
 8006576:	f002 fdc8 	bl	800910a <verify_PEC15>
 800657a:	4603      	mov	r3, r0
 800657c:	f887 30ec 	strb.w	r3, [r7, #236]	@ 0xec
			sideB_cellVoltageB_PECflag = verify_PEC15(sideB_cellVoltageB);
 8006580:	f107 0314 	add.w	r3, r7, #20
 8006584:	4618      	mov	r0, r3
 8006586:	f002 fdc0 	bl	800910a <verify_PEC15>
 800658a:	4603      	mov	r3, r0
 800658c:	f887 30eb 	strb.w	r3, [r7, #235]	@ 0xeb
			sideB_cellVoltageC_PECflag = verify_PEC15(sideB_cellVoltageC);
 8006590:	f107 030c 	add.w	r3, r7, #12
 8006594:	4618      	mov	r0, r3
 8006596:	f002 fdb8 	bl	800910a <verify_PEC15>
 800659a:	4603      	mov	r3, r0
 800659c:	f887 30ea 	strb.w	r3, [r7, #234]	@ 0xea
			sideB_cellVoltageD_PECflag = verify_PEC15(sideB_cellVoltageD);
 80065a0:	1d3b      	adds	r3, r7, #4
 80065a2:	4618      	mov	r0, r3
 80065a4:	f002 fdb1 	bl	800910a <verify_PEC15>
 80065a8:	4603      	mov	r3, r0
 80065aa:	f887 30e9 	strb.w	r3, [r7, #233]	@ 0xe9

			if(sideA_cellVoltageA_PECflag == 2 &&
 80065ae:	f897 30f0 	ldrb.w	r3, [r7, #240]	@ 0xf0
 80065b2:	2b02      	cmp	r3, #2
 80065b4:	d13f      	bne.n	8006636 <open_cell_check+0x1f2>
 80065b6:	f897 30ef 	ldrb.w	r3, [r7, #239]	@ 0xef
 80065ba:	2b02      	cmp	r3, #2
 80065bc:	d13b      	bne.n	8006636 <open_cell_check+0x1f2>
			   sideA_cellVoltageB_PECflag == 2 &&
 80065be:	f897 30ee 	ldrb.w	r3, [r7, #238]	@ 0xee
 80065c2:	2b02      	cmp	r3, #2
 80065c4:	d137      	bne.n	8006636 <open_cell_check+0x1f2>
			   sideA_cellVoltageC_PECflag == 2 &&
 80065c6:	f897 30ed 	ldrb.w	r3, [r7, #237]	@ 0xed
 80065ca:	2b02      	cmp	r3, #2
 80065cc:	d133      	bne.n	8006636 <open_cell_check+0x1f2>
			   sideA_cellVoltageD_PECflag == 2 &&
			   sideA_cellVoltageA[1] != 0xFF &&
 80065ce:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
			   sideA_cellVoltageD_PECflag == 2 &&
 80065d2:	2bff      	cmp	r3, #255	@ 0xff
 80065d4:	d02f      	beq.n	8006636 <open_cell_check+0x1f2>
			   sideA_cellVoltageA[3] != 0xFF &&
 80065d6:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
			   sideA_cellVoltageA[1] != 0xFF &&
 80065da:	2bff      	cmp	r3, #255	@ 0xff
 80065dc:	d02b      	beq.n	8006636 <open_cell_check+0x1f2>
			   sideA_cellVoltageA[5] != 0xFF &&
 80065de:	f897 3041 	ldrb.w	r3, [r7, #65]	@ 0x41
			   sideA_cellVoltageA[3] != 0xFF &&
 80065e2:	2bff      	cmp	r3, #255	@ 0xff
 80065e4:	d027      	beq.n	8006636 <open_cell_check+0x1f2>
			   sideA_cellVoltageB[1] != 0xFF &&
 80065e6:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
			   sideA_cellVoltageA[5] != 0xFF &&
 80065ea:	2bff      	cmp	r3, #255	@ 0xff
 80065ec:	d023      	beq.n	8006636 <open_cell_check+0x1f2>
			   sideA_cellVoltageB[3] != 0xFF &&
 80065ee:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
			   sideA_cellVoltageB[1] != 0xFF &&
 80065f2:	2bff      	cmp	r3, #255	@ 0xff
 80065f4:	d01f      	beq.n	8006636 <open_cell_check+0x1f2>
			   sideA_cellVoltageB[5] != 0xFF &&
 80065f6:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
			   sideA_cellVoltageB[3] != 0xFF &&
 80065fa:	2bff      	cmp	r3, #255	@ 0xff
 80065fc:	d01b      	beq.n	8006636 <open_cell_check+0x1f2>
			   sideA_cellVoltageC[1] != 0xFF &&
 80065fe:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
			   sideA_cellVoltageB[5] != 0xFF &&
 8006602:	2bff      	cmp	r3, #255	@ 0xff
 8006604:	d017      	beq.n	8006636 <open_cell_check+0x1f2>
			   sideA_cellVoltageC[3] != 0xFF &&
 8006606:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
			   sideA_cellVoltageC[1] != 0xFF &&
 800660a:	2bff      	cmp	r3, #255	@ 0xff
 800660c:	d013      	beq.n	8006636 <open_cell_check+0x1f2>
			   sideA_cellVoltageC[5] != 0xFF &&
 800660e:	f897 3031 	ldrb.w	r3, [r7, #49]	@ 0x31
			   sideA_cellVoltageC[3] != 0xFF &&
 8006612:	2bff      	cmp	r3, #255	@ 0xff
 8006614:	d00f      	beq.n	8006636 <open_cell_check+0x1f2>
			   sideA_cellVoltageD[1] != 0xFF &&
 8006616:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
			   sideA_cellVoltageC[5] != 0xFF &&
 800661a:	2bff      	cmp	r3, #255	@ 0xff
 800661c:	d00b      	beq.n	8006636 <open_cell_check+0x1f2>
			   sideA_cellVoltageD[3] != 0xFF &&
 800661e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
			   sideA_cellVoltageD[1] != 0xFF &&
 8006622:	2bff      	cmp	r3, #255	@ 0xff
 8006624:	d007      	beq.n	8006636 <open_cell_check+0x1f2>
			   sideA_cellVoltageD[5] != 0xFF)
 8006626:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
			   sideA_cellVoltageD[3] != 0xFF &&
 800662a:	2bff      	cmp	r3, #255	@ 0xff
 800662c:	d003      	beq.n	8006636 <open_cell_check+0x1f2>
			{
				sideA_subAttempts = 13;
 800662e:	230d      	movs	r3, #13
 8006630:	f887 30fe 	strb.w	r3, [r7, #254]	@ 0xfe
 8006634:	e007      	b.n	8006646 <open_cell_check+0x202>
			}
			else {
				sideA_subAttempts++;
 8006636:	f897 30fe 	ldrb.w	r3, [r7, #254]	@ 0xfe
 800663a:	3301      	adds	r3, #1
 800663c:	f887 30fe 	strb.w	r3, [r7, #254]	@ 0xfe
				wait(1);
 8006640:	2001      	movs	r0, #1
 8006642:	f004 f8df 	bl	800a804 <wait>
			}

			if(sideB_cellVoltageA_PECflag == 2 &&
 8006646:	f897 30ec 	ldrb.w	r3, [r7, #236]	@ 0xec
 800664a:	2b02      	cmp	r3, #2
 800664c:	d134      	bne.n	80066b8 <open_cell_check+0x274>
 800664e:	f897 30eb 	ldrb.w	r3, [r7, #235]	@ 0xeb
 8006652:	2b02      	cmp	r3, #2
 8006654:	d130      	bne.n	80066b8 <open_cell_check+0x274>
			   sideB_cellVoltageB_PECflag == 2 &&
 8006656:	f897 30ea 	ldrb.w	r3, [r7, #234]	@ 0xea
 800665a:	2b02      	cmp	r3, #2
 800665c:	d12c      	bne.n	80066b8 <open_cell_check+0x274>
			   sideB_cellVoltageC_PECflag == 2 &&
 800665e:	f897 30e9 	ldrb.w	r3, [r7, #233]	@ 0xe9
 8006662:	2b02      	cmp	r3, #2
 8006664:	d128      	bne.n	80066b8 <open_cell_check+0x274>
			   sideB_cellVoltageD_PECflag == 2 &&
			   sideB_cellVoltageA[1] != 0xFF &&
 8006666:	7f7b      	ldrb	r3, [r7, #29]
			   sideB_cellVoltageD_PECflag == 2 &&
 8006668:	2bff      	cmp	r3, #255	@ 0xff
 800666a:	d025      	beq.n	80066b8 <open_cell_check+0x274>
			   sideB_cellVoltageA[3] != 0xFF &&
 800666c:	7ffb      	ldrb	r3, [r7, #31]
			   sideB_cellVoltageA[1] != 0xFF &&
 800666e:	2bff      	cmp	r3, #255	@ 0xff
 8006670:	d022      	beq.n	80066b8 <open_cell_check+0x274>
			   sideB_cellVoltageA[5] != 0xFF &&
 8006672:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
			   sideB_cellVoltageA[3] != 0xFF &&
 8006676:	2bff      	cmp	r3, #255	@ 0xff
 8006678:	d01e      	beq.n	80066b8 <open_cell_check+0x274>
			   sideB_cellVoltageB[1] != 0xFF &&
 800667a:	7d7b      	ldrb	r3, [r7, #21]
			   sideB_cellVoltageA[5] != 0xFF &&
 800667c:	2bff      	cmp	r3, #255	@ 0xff
 800667e:	d01b      	beq.n	80066b8 <open_cell_check+0x274>
			   sideB_cellVoltageB[3] != 0xFF &&
 8006680:	7dfb      	ldrb	r3, [r7, #23]
			   sideB_cellVoltageB[1] != 0xFF &&
 8006682:	2bff      	cmp	r3, #255	@ 0xff
 8006684:	d018      	beq.n	80066b8 <open_cell_check+0x274>
			   sideB_cellVoltageB[5] != 0xFF &&
 8006686:	7e7b      	ldrb	r3, [r7, #25]
			   sideB_cellVoltageB[3] != 0xFF &&
 8006688:	2bff      	cmp	r3, #255	@ 0xff
 800668a:	d015      	beq.n	80066b8 <open_cell_check+0x274>
			   sideB_cellVoltageC[1] != 0xFF &&
 800668c:	7b7b      	ldrb	r3, [r7, #13]
			   sideB_cellVoltageB[5] != 0xFF &&
 800668e:	2bff      	cmp	r3, #255	@ 0xff
 8006690:	d012      	beq.n	80066b8 <open_cell_check+0x274>
			   sideB_cellVoltageC[3] != 0xFF &&
 8006692:	7bfb      	ldrb	r3, [r7, #15]
			   sideB_cellVoltageC[1] != 0xFF &&
 8006694:	2bff      	cmp	r3, #255	@ 0xff
 8006696:	d00f      	beq.n	80066b8 <open_cell_check+0x274>
			   sideB_cellVoltageC[5] != 0xFF &&
 8006698:	7c7b      	ldrb	r3, [r7, #17]
			   sideB_cellVoltageC[3] != 0xFF &&
 800669a:	2bff      	cmp	r3, #255	@ 0xff
 800669c:	d00c      	beq.n	80066b8 <open_cell_check+0x274>
			   sideB_cellVoltageD[1] != 0xFF &&
 800669e:	797b      	ldrb	r3, [r7, #5]
			   sideB_cellVoltageC[5] != 0xFF &&
 80066a0:	2bff      	cmp	r3, #255	@ 0xff
 80066a2:	d009      	beq.n	80066b8 <open_cell_check+0x274>
			   sideB_cellVoltageD[3] != 0xFF &&
 80066a4:	79fb      	ldrb	r3, [r7, #7]
			   sideB_cellVoltageD[1] != 0xFF &&
 80066a6:	2bff      	cmp	r3, #255	@ 0xff
 80066a8:	d006      	beq.n	80066b8 <open_cell_check+0x274>
			   sideB_cellVoltageD[5] != 0xFF)
 80066aa:	7a7b      	ldrb	r3, [r7, #9]
			   sideB_cellVoltageD[3] != 0xFF &&
 80066ac:	2bff      	cmp	r3, #255	@ 0xff
 80066ae:	d003      	beq.n	80066b8 <open_cell_check+0x274>
			{
				sideB_subAttempts = 13;
 80066b0:	230d      	movs	r3, #13
 80066b2:	f887 30fd 	strb.w	r3, [r7, #253]	@ 0xfd
 80066b6:	e007      	b.n	80066c8 <open_cell_check+0x284>
			}
			else {
				sideB_subAttempts++;
 80066b8:	f897 30fd 	ldrb.w	r3, [r7, #253]	@ 0xfd
 80066bc:	3301      	adds	r3, #1
 80066be:	f887 30fd 	strb.w	r3, [r7, #253]	@ 0xfd
				wait(1);
 80066c2:	2001      	movs	r0, #1
 80066c4:	f004 f89e 	bl	800a804 <wait>
		while(sideA_subAttempts < ATTEMPT_LIMIT || sideB_subAttempts < ATTEMPT_LIMIT) {
 80066c8:	f897 30fe 	ldrb.w	r3, [r7, #254]	@ 0xfe
 80066cc:	2b09      	cmp	r3, #9
 80066ce:	f67f aed3 	bls.w	8006478 <open_cell_check+0x34>
 80066d2:	f897 30fd 	ldrb.w	r3, [r7, #253]	@ 0xfd
 80066d6:	2b09      	cmp	r3, #9
 80066d8:	f67f aece 	bls.w	8006478 <open_cell_check+0x34>
			}
		}
		if(sideA_subAttempts != 13) { error_loop(ERROR_PEC, 0, 0, SIDE_A); }
 80066dc:	f897 30fe 	ldrb.w	r3, [r7, #254]	@ 0xfe
 80066e0:	2b0d      	cmp	r3, #13
 80066e2:	d005      	beq.n	80066f0 <open_cell_check+0x2ac>
 80066e4:	2301      	movs	r3, #1
 80066e6:	2200      	movs	r2, #0
 80066e8:	2100      	movs	r1, #0
 80066ea:	2056      	movs	r0, #86	@ 0x56
 80066ec:	f7fe fb84 	bl	8004df8 <error_loop>

		if(sideB_subAttempts != 13) { error_loop(ERROR_PEC, 0, 0, SIDE_B); }
 80066f0:	f897 30fd 	ldrb.w	r3, [r7, #253]	@ 0xfd
 80066f4:	2b0d      	cmp	r3, #13
 80066f6:	d005      	beq.n	8006704 <open_cell_check+0x2c0>
 80066f8:	2300      	movs	r3, #0
 80066fa:	2200      	movs	r2, #0
 80066fc:	2100      	movs	r1, #0
 80066fe:	2056      	movs	r0, #86	@ 0x56
 8006700:	f7fe fb7a 	bl	8004df8 <error_loop>

		sideA_cellPU[0] = (sideA_cellVoltageA[1] << 8) | sideA_cellVoltageA[0];
 8006704:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 8006708:	b21b      	sxth	r3, r3
 800670a:	021b      	lsls	r3, r3, #8
 800670c:	b21a      	sxth	r2, r3
 800670e:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 8006712:	b21b      	sxth	r3, r3
 8006714:	4313      	orrs	r3, r2
 8006716:	b21b      	sxth	r3, r3
 8006718:	b29b      	uxth	r3, r3
 800671a:	f8a7 30bc 	strh.w	r3, [r7, #188]	@ 0xbc
		sideA_cellPU[1] = (sideA_cellVoltageA[3] << 8) | sideA_cellVoltageA[2];
 800671e:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8006722:	b21b      	sxth	r3, r3
 8006724:	021b      	lsls	r3, r3, #8
 8006726:	b21a      	sxth	r2, r3
 8006728:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 800672c:	b21b      	sxth	r3, r3
 800672e:	4313      	orrs	r3, r2
 8006730:	b21b      	sxth	r3, r3
 8006732:	b29b      	uxth	r3, r3
 8006734:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
		sideA_cellPU[2] = (sideA_cellVoltageA[5] << 8) | sideA_cellVoltageA[4];
 8006738:	f897 3041 	ldrb.w	r3, [r7, #65]	@ 0x41
 800673c:	b21b      	sxth	r3, r3
 800673e:	021b      	lsls	r3, r3, #8
 8006740:	b21a      	sxth	r2, r3
 8006742:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8006746:	b21b      	sxth	r3, r3
 8006748:	4313      	orrs	r3, r2
 800674a:	b21b      	sxth	r3, r3
 800674c:	b29b      	uxth	r3, r3
 800674e:	f8a7 30c0 	strh.w	r3, [r7, #192]	@ 0xc0
		sideA_cellPU[3] = (sideA_cellVoltageB[1] << 8) | sideA_cellVoltageB[0];
 8006752:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8006756:	b21b      	sxth	r3, r3
 8006758:	021b      	lsls	r3, r3, #8
 800675a:	b21a      	sxth	r2, r3
 800675c:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8006760:	b21b      	sxth	r3, r3
 8006762:	4313      	orrs	r3, r2
 8006764:	b21b      	sxth	r3, r3
 8006766:	b29b      	uxth	r3, r3
 8006768:	f8a7 30c2 	strh.w	r3, [r7, #194]	@ 0xc2
		sideA_cellPU[4] = (sideA_cellVoltageB[3] << 8) | sideA_cellVoltageB[2];
 800676c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8006770:	b21b      	sxth	r3, r3
 8006772:	021b      	lsls	r3, r3, #8
 8006774:	b21a      	sxth	r2, r3
 8006776:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800677a:	b21b      	sxth	r3, r3
 800677c:	4313      	orrs	r3, r2
 800677e:	b21b      	sxth	r3, r3
 8006780:	b29b      	uxth	r3, r3
 8006782:	f8a7 30c4 	strh.w	r3, [r7, #196]	@ 0xc4
		sideA_cellPU[5] = (sideA_cellVoltageB[5] << 8) | sideA_cellVoltageB[4];
 8006786:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 800678a:	b21b      	sxth	r3, r3
 800678c:	021b      	lsls	r3, r3, #8
 800678e:	b21a      	sxth	r2, r3
 8006790:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 8006794:	b21b      	sxth	r3, r3
 8006796:	4313      	orrs	r3, r2
 8006798:	b21b      	sxth	r3, r3
 800679a:	b29b      	uxth	r3, r3
 800679c:	f8a7 30c6 	strh.w	r3, [r7, #198]	@ 0xc6
		sideA_cellPU[6] = (sideA_cellVoltageC[1] << 8) | sideA_cellVoltageC[0];
 80067a0:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 80067a4:	b21b      	sxth	r3, r3
 80067a6:	021b      	lsls	r3, r3, #8
 80067a8:	b21a      	sxth	r2, r3
 80067aa:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80067ae:	b21b      	sxth	r3, r3
 80067b0:	4313      	orrs	r3, r2
 80067b2:	b21b      	sxth	r3, r3
 80067b4:	b29b      	uxth	r3, r3
 80067b6:	f8a7 30c8 	strh.w	r3, [r7, #200]	@ 0xc8
		sideA_cellPU[7] = (sideA_cellVoltageC[3] << 8) | sideA_cellVoltageC[2];
 80067ba:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80067be:	b21b      	sxth	r3, r3
 80067c0:	021b      	lsls	r3, r3, #8
 80067c2:	b21a      	sxth	r2, r3
 80067c4:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80067c8:	b21b      	sxth	r3, r3
 80067ca:	4313      	orrs	r3, r2
 80067cc:	b21b      	sxth	r3, r3
 80067ce:	b29b      	uxth	r3, r3
 80067d0:	f8a7 30ca 	strh.w	r3, [r7, #202]	@ 0xca
		sideA_cellPU[8] = (sideA_cellVoltageC[5] << 8) | sideA_cellVoltageC[4];
 80067d4:	f897 3031 	ldrb.w	r3, [r7, #49]	@ 0x31
 80067d8:	b21b      	sxth	r3, r3
 80067da:	021b      	lsls	r3, r3, #8
 80067dc:	b21a      	sxth	r2, r3
 80067de:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 80067e2:	b21b      	sxth	r3, r3
 80067e4:	4313      	orrs	r3, r2
 80067e6:	b21b      	sxth	r3, r3
 80067e8:	b29b      	uxth	r3, r3
 80067ea:	f8a7 30cc 	strh.w	r3, [r7, #204]	@ 0xcc
		sideA_cellPU[9] = (sideA_cellVoltageD[1] << 8) | sideA_cellVoltageD[0];
 80067ee:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80067f2:	b21b      	sxth	r3, r3
 80067f4:	021b      	lsls	r3, r3, #8
 80067f6:	b21a      	sxth	r2, r3
 80067f8:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80067fc:	b21b      	sxth	r3, r3
 80067fe:	4313      	orrs	r3, r2
 8006800:	b21b      	sxth	r3, r3
 8006802:	b29b      	uxth	r3, r3
 8006804:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
		sideA_cellPU[10] = (sideA_cellVoltageD[3] << 8) | sideA_cellVoltageD[2];
 8006808:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800680c:	b21b      	sxth	r3, r3
 800680e:	021b      	lsls	r3, r3, #8
 8006810:	b21a      	sxth	r2, r3
 8006812:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8006816:	b21b      	sxth	r3, r3
 8006818:	4313      	orrs	r3, r2
 800681a:	b21b      	sxth	r3, r3
 800681c:	b29b      	uxth	r3, r3
 800681e:	f8a7 30d0 	strh.w	r3, [r7, #208]	@ 0xd0
		sideA_cellPU[11] = (sideA_cellVoltageD[5] << 8) | sideA_cellVoltageD[4];
 8006822:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8006826:	b21b      	sxth	r3, r3
 8006828:	021b      	lsls	r3, r3, #8
 800682a:	b21a      	sxth	r2, r3
 800682c:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006830:	b21b      	sxth	r3, r3
 8006832:	4313      	orrs	r3, r2
 8006834:	b21b      	sxth	r3, r3
 8006836:	b29b      	uxth	r3, r3
 8006838:	f8a7 30d2 	strh.w	r3, [r7, #210]	@ 0xd2

		sideB_cellPU[0] = (sideB_cellVoltageA[1] << 8) | sideB_cellVoltageA[0];
 800683c:	7f7b      	ldrb	r3, [r7, #29]
 800683e:	b21b      	sxth	r3, r3
 8006840:	021b      	lsls	r3, r3, #8
 8006842:	b21a      	sxth	r2, r3
 8006844:	7f3b      	ldrb	r3, [r7, #28]
 8006846:	b21b      	sxth	r3, r3
 8006848:	4313      	orrs	r3, r2
 800684a:	b21b      	sxth	r3, r3
 800684c:	b29b      	uxth	r3, r3
 800684e:	f8a7 3074 	strh.w	r3, [r7, #116]	@ 0x74
		sideB_cellPU[1] = (sideB_cellVoltageA[3] << 8) | sideB_cellVoltageA[2];
 8006852:	7ffb      	ldrb	r3, [r7, #31]
 8006854:	b21b      	sxth	r3, r3
 8006856:	021b      	lsls	r3, r3, #8
 8006858:	b21a      	sxth	r2, r3
 800685a:	7fbb      	ldrb	r3, [r7, #30]
 800685c:	b21b      	sxth	r3, r3
 800685e:	4313      	orrs	r3, r2
 8006860:	b21b      	sxth	r3, r3
 8006862:	b29b      	uxth	r3, r3
 8006864:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76
		sideB_cellPU[2] = (sideB_cellVoltageA[5] << 8) | sideB_cellVoltageA[4];
 8006868:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800686c:	b21b      	sxth	r3, r3
 800686e:	021b      	lsls	r3, r3, #8
 8006870:	b21a      	sxth	r2, r3
 8006872:	f897 3020 	ldrb.w	r3, [r7, #32]
 8006876:	b21b      	sxth	r3, r3
 8006878:	4313      	orrs	r3, r2
 800687a:	b21b      	sxth	r3, r3
 800687c:	b29b      	uxth	r3, r3
 800687e:	f8a7 3078 	strh.w	r3, [r7, #120]	@ 0x78
		sideB_cellPU[3] = (sideB_cellVoltageB[1] << 8) | sideB_cellVoltageB[0];
 8006882:	7d7b      	ldrb	r3, [r7, #21]
 8006884:	b21b      	sxth	r3, r3
 8006886:	021b      	lsls	r3, r3, #8
 8006888:	b21a      	sxth	r2, r3
 800688a:	7d3b      	ldrb	r3, [r7, #20]
 800688c:	b21b      	sxth	r3, r3
 800688e:	4313      	orrs	r3, r2
 8006890:	b21b      	sxth	r3, r3
 8006892:	b29b      	uxth	r3, r3
 8006894:	f8a7 307a 	strh.w	r3, [r7, #122]	@ 0x7a
		sideB_cellPU[4] = (sideB_cellVoltageB[3] << 8) | sideB_cellVoltageB[2];
 8006898:	7dfb      	ldrb	r3, [r7, #23]
 800689a:	b21b      	sxth	r3, r3
 800689c:	021b      	lsls	r3, r3, #8
 800689e:	b21a      	sxth	r2, r3
 80068a0:	7dbb      	ldrb	r3, [r7, #22]
 80068a2:	b21b      	sxth	r3, r3
 80068a4:	4313      	orrs	r3, r2
 80068a6:	b21b      	sxth	r3, r3
 80068a8:	b29b      	uxth	r3, r3
 80068aa:	f8a7 307c 	strh.w	r3, [r7, #124]	@ 0x7c
		sideB_cellPU[5] = (sideB_cellVoltageB[5] << 8) | sideB_cellVoltageB[4];
 80068ae:	7e7b      	ldrb	r3, [r7, #25]
 80068b0:	b21b      	sxth	r3, r3
 80068b2:	021b      	lsls	r3, r3, #8
 80068b4:	b21a      	sxth	r2, r3
 80068b6:	7e3b      	ldrb	r3, [r7, #24]
 80068b8:	b21b      	sxth	r3, r3
 80068ba:	4313      	orrs	r3, r2
 80068bc:	b21b      	sxth	r3, r3
 80068be:	b29b      	uxth	r3, r3
 80068c0:	f8a7 307e 	strh.w	r3, [r7, #126]	@ 0x7e
		sideB_cellPU[6] = (sideB_cellVoltageC[1] << 8) | sideB_cellVoltageC[0];
 80068c4:	7b7b      	ldrb	r3, [r7, #13]
 80068c6:	b21b      	sxth	r3, r3
 80068c8:	021b      	lsls	r3, r3, #8
 80068ca:	b21a      	sxth	r2, r3
 80068cc:	7b3b      	ldrb	r3, [r7, #12]
 80068ce:	b21b      	sxth	r3, r3
 80068d0:	4313      	orrs	r3, r2
 80068d2:	b21b      	sxth	r3, r3
 80068d4:	b29b      	uxth	r3, r3
 80068d6:	f8a7 3080 	strh.w	r3, [r7, #128]	@ 0x80
		sideB_cellPU[7] = (sideB_cellVoltageC[3] << 8) | sideB_cellVoltageC[2];
 80068da:	7bfb      	ldrb	r3, [r7, #15]
 80068dc:	b21b      	sxth	r3, r3
 80068de:	021b      	lsls	r3, r3, #8
 80068e0:	b21a      	sxth	r2, r3
 80068e2:	7bbb      	ldrb	r3, [r7, #14]
 80068e4:	b21b      	sxth	r3, r3
 80068e6:	4313      	orrs	r3, r2
 80068e8:	b21b      	sxth	r3, r3
 80068ea:	b29b      	uxth	r3, r3
 80068ec:	f8a7 3082 	strh.w	r3, [r7, #130]	@ 0x82
		sideB_cellPU[8] = (sideB_cellVoltageC[5] << 8) | sideB_cellVoltageC[4];
 80068f0:	7c7b      	ldrb	r3, [r7, #17]
 80068f2:	b21b      	sxth	r3, r3
 80068f4:	021b      	lsls	r3, r3, #8
 80068f6:	b21a      	sxth	r2, r3
 80068f8:	7c3b      	ldrb	r3, [r7, #16]
 80068fa:	b21b      	sxth	r3, r3
 80068fc:	4313      	orrs	r3, r2
 80068fe:	b21b      	sxth	r3, r3
 8006900:	b29b      	uxth	r3, r3
 8006902:	f8a7 3084 	strh.w	r3, [r7, #132]	@ 0x84
		sideB_cellPU[9] = (sideB_cellVoltageD[1] << 8) | sideB_cellVoltageD[0];
 8006906:	797b      	ldrb	r3, [r7, #5]
 8006908:	b21b      	sxth	r3, r3
 800690a:	021b      	lsls	r3, r3, #8
 800690c:	b21a      	sxth	r2, r3
 800690e:	793b      	ldrb	r3, [r7, #4]
 8006910:	b21b      	sxth	r3, r3
 8006912:	4313      	orrs	r3, r2
 8006914:	b21b      	sxth	r3, r3
 8006916:	b29b      	uxth	r3, r3
 8006918:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
		sideB_cellPU[10] = (sideB_cellVoltageD[3] << 8) | sideB_cellVoltageD[2];
 800691c:	79fb      	ldrb	r3, [r7, #7]
 800691e:	b21b      	sxth	r3, r3
 8006920:	021b      	lsls	r3, r3, #8
 8006922:	b21a      	sxth	r2, r3
 8006924:	79bb      	ldrb	r3, [r7, #6]
 8006926:	b21b      	sxth	r3, r3
 8006928:	4313      	orrs	r3, r2
 800692a:	b21b      	sxth	r3, r3
 800692c:	b29b      	uxth	r3, r3
 800692e:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88
		sideB_cellPU[11] = (sideB_cellVoltageD[5] << 8) | sideB_cellVoltageD[4];
 8006932:	7a7b      	ldrb	r3, [r7, #9]
 8006934:	b21b      	sxth	r3, r3
 8006936:	021b      	lsls	r3, r3, #8
 8006938:	b21a      	sxth	r2, r3
 800693a:	7a3b      	ldrb	r3, [r7, #8]
 800693c:	b21b      	sxth	r3, r3
 800693e:	4313      	orrs	r3, r2
 8006940:	b21b      	sxth	r3, r3
 8006942:	b29b      	uxth	r3, r3
 8006944:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a


		// Step 2
		sideA_subAttempts = 0;
 8006948:	2300      	movs	r3, #0
 800694a:	f887 30fe 	strb.w	r3, [r7, #254]	@ 0xfe
		sideB_subAttempts = 0;
 800694e:	2300      	movs	r3, #0
 8006950:	f887 30fd 	strb.w	r3, [r7, #253]	@ 0xfd
		while(sideA_subAttempts < ATTEMPT_LIMIT || sideB_subAttempts < ATTEMPT_LIMIT) {
 8006954:	e127      	b.n	8006ba6 <open_cell_check+0x762>
			for(uint8_t i = 0; i < ADOW_CONVERSION_RUNS; i++) {
 8006956:	2300      	movs	r3, #0
 8006958:	f887 30fa 	strb.w	r3, [r7, #250]	@ 0xfa
 800695c:	e018      	b.n	8006990 <open_cell_check+0x54c>
				CLRCELL(SIDE_A);
 800695e:	2001      	movs	r0, #1
 8006960:	f003 f894 	bl	8009a8c <CLRCELL>
				CLRCELL(SIDE_B);
 8006964:	2000      	movs	r0, #0
 8006966:	f003 f891 	bl	8009a8c <CLRCELL>
				wait(3);
 800696a:	2003      	movs	r0, #3
 800696c:	f003 ff4a 	bl	800a804 <wait>

				ADOW(PD, SIDE_A);
 8006970:	2101      	movs	r1, #1
 8006972:	2001      	movs	r0, #1
 8006974:	f002 ff46 	bl	8009804 <ADOW>
				ADOW(PD, SIDE_B);
 8006978:	2100      	movs	r1, #0
 800697a:	2001      	movs	r0, #1
 800697c:	f002 ff42 	bl	8009804 <ADOW>
				wait(3);
 8006980:	2003      	movs	r0, #3
 8006982:	f003 ff3f 	bl	800a804 <wait>
			for(uint8_t i = 0; i < ADOW_CONVERSION_RUNS; i++) {
 8006986:	f897 30fa 	ldrb.w	r3, [r7, #250]	@ 0xfa
 800698a:	3301      	adds	r3, #1
 800698c:	f887 30fa 	strb.w	r3, [r7, #250]	@ 0xfa
 8006990:	f897 30fa 	ldrb.w	r3, [r7, #250]	@ 0xfa
 8006994:	2b02      	cmp	r3, #2
 8006996:	d9e2      	bls.n	800695e <open_cell_check+0x51a>
			}
			RDCVA(sideA_cellVoltageA, SIDE_A);
 8006998:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800699c:	2101      	movs	r1, #1
 800699e:	4618      	mov	r0, r3
 80069a0:	f002 fd80 	bl	80094a4 <RDCVA>
			RDCVA(sideB_cellVoltageA, SIDE_B);
 80069a4:	f107 031c 	add.w	r3, r7, #28
 80069a8:	2100      	movs	r1, #0
 80069aa:	4618      	mov	r0, r3
 80069ac:	f002 fd7a 	bl	80094a4 <RDCVA>
			wait(1);
 80069b0:	2001      	movs	r0, #1
 80069b2:	f003 ff27 	bl	800a804 <wait>
			RDCVB(sideA_cellVoltageB, SIDE_A);
 80069b6:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80069ba:	2101      	movs	r1, #1
 80069bc:	4618      	mov	r0, r3
 80069be:	f002 fd95 	bl	80094ec <RDCVB>
			RDCVB(sideB_cellVoltageB, SIDE_B);
 80069c2:	f107 0314 	add.w	r3, r7, #20
 80069c6:	2100      	movs	r1, #0
 80069c8:	4618      	mov	r0, r3
 80069ca:	f002 fd8f 	bl	80094ec <RDCVB>
			wait(1);
 80069ce:	2001      	movs	r0, #1
 80069d0:	f003 ff18 	bl	800a804 <wait>
			RDCVC(sideA_cellVoltageC, SIDE_A);
 80069d4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80069d8:	2101      	movs	r1, #1
 80069da:	4618      	mov	r0, r3
 80069dc:	f002 fdaa 	bl	8009534 <RDCVC>
			RDCVC(sideB_cellVoltageC, SIDE_B);
 80069e0:	f107 030c 	add.w	r3, r7, #12
 80069e4:	2100      	movs	r1, #0
 80069e6:	4618      	mov	r0, r3
 80069e8:	f002 fda4 	bl	8009534 <RDCVC>
			wait(1);
 80069ec:	2001      	movs	r0, #1
 80069ee:	f003 ff09 	bl	800a804 <wait>
			RDCVD(sideA_cellVoltageD, SIDE_A);
 80069f2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80069f6:	2101      	movs	r1, #1
 80069f8:	4618      	mov	r0, r3
 80069fa:	f002 fdbf 	bl	800957c <RDCVD>
			RDCVD(sideB_cellVoltageD, SIDE_B);
 80069fe:	1d3b      	adds	r3, r7, #4
 8006a00:	2100      	movs	r1, #0
 8006a02:	4618      	mov	r0, r3
 8006a04:	f002 fdba 	bl	800957c <RDCVD>
			wait(1);
 8006a08:	2001      	movs	r0, #1
 8006a0a:	f003 fefb 	bl	800a804 <wait>

			sideA_cellVoltageA_PECflag = verify_PEC15(sideA_cellVoltageA);
 8006a0e:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8006a12:	4618      	mov	r0, r3
 8006a14:	f002 fb79 	bl	800910a <verify_PEC15>
 8006a18:	4603      	mov	r3, r0
 8006a1a:	f887 30f0 	strb.w	r3, [r7, #240]	@ 0xf0
			sideA_cellVoltageB_PECflag = verify_PEC15(sideA_cellVoltageB);
 8006a1e:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8006a22:	4618      	mov	r0, r3
 8006a24:	f002 fb71 	bl	800910a <verify_PEC15>
 8006a28:	4603      	mov	r3, r0
 8006a2a:	f887 30ef 	strb.w	r3, [r7, #239]	@ 0xef
			sideA_cellVoltageC_PECflag = verify_PEC15(sideA_cellVoltageC);
 8006a2e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8006a32:	4618      	mov	r0, r3
 8006a34:	f002 fb69 	bl	800910a <verify_PEC15>
 8006a38:	4603      	mov	r3, r0
 8006a3a:	f887 30ee 	strb.w	r3, [r7, #238]	@ 0xee
			sideA_cellVoltageD_PECflag = verify_PEC15(sideA_cellVoltageD);
 8006a3e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006a42:	4618      	mov	r0, r3
 8006a44:	f002 fb61 	bl	800910a <verify_PEC15>
 8006a48:	4603      	mov	r3, r0
 8006a4a:	f887 30ed 	strb.w	r3, [r7, #237]	@ 0xed

			sideB_cellVoltageA_PECflag = verify_PEC15(sideB_cellVoltageA);
 8006a4e:	f107 031c 	add.w	r3, r7, #28
 8006a52:	4618      	mov	r0, r3
 8006a54:	f002 fb59 	bl	800910a <verify_PEC15>
 8006a58:	4603      	mov	r3, r0
 8006a5a:	f887 30ec 	strb.w	r3, [r7, #236]	@ 0xec
			sideB_cellVoltageB_PECflag = verify_PEC15(sideB_cellVoltageB);
 8006a5e:	f107 0314 	add.w	r3, r7, #20
 8006a62:	4618      	mov	r0, r3
 8006a64:	f002 fb51 	bl	800910a <verify_PEC15>
 8006a68:	4603      	mov	r3, r0
 8006a6a:	f887 30eb 	strb.w	r3, [r7, #235]	@ 0xeb
			sideB_cellVoltageC_PECflag = verify_PEC15(sideB_cellVoltageC);
 8006a6e:	f107 030c 	add.w	r3, r7, #12
 8006a72:	4618      	mov	r0, r3
 8006a74:	f002 fb49 	bl	800910a <verify_PEC15>
 8006a78:	4603      	mov	r3, r0
 8006a7a:	f887 30ea 	strb.w	r3, [r7, #234]	@ 0xea
			sideB_cellVoltageD_PECflag = verify_PEC15(sideB_cellVoltageD);
 8006a7e:	1d3b      	adds	r3, r7, #4
 8006a80:	4618      	mov	r0, r3
 8006a82:	f002 fb42 	bl	800910a <verify_PEC15>
 8006a86:	4603      	mov	r3, r0
 8006a88:	f887 30e9 	strb.w	r3, [r7, #233]	@ 0xe9

			if(sideA_cellVoltageA_PECflag == 2 &&
 8006a8c:	f897 30f0 	ldrb.w	r3, [r7, #240]	@ 0xf0
 8006a90:	2b02      	cmp	r3, #2
 8006a92:	d13f      	bne.n	8006b14 <open_cell_check+0x6d0>
 8006a94:	f897 30ef 	ldrb.w	r3, [r7, #239]	@ 0xef
 8006a98:	2b02      	cmp	r3, #2
 8006a9a:	d13b      	bne.n	8006b14 <open_cell_check+0x6d0>
			   sideA_cellVoltageB_PECflag == 2 &&
 8006a9c:	f897 30ee 	ldrb.w	r3, [r7, #238]	@ 0xee
 8006aa0:	2b02      	cmp	r3, #2
 8006aa2:	d137      	bne.n	8006b14 <open_cell_check+0x6d0>
			   sideA_cellVoltageC_PECflag == 2 &&
 8006aa4:	f897 30ed 	ldrb.w	r3, [r7, #237]	@ 0xed
 8006aa8:	2b02      	cmp	r3, #2
 8006aaa:	d133      	bne.n	8006b14 <open_cell_check+0x6d0>
			   sideA_cellVoltageD_PECflag == 2 &&
			   sideA_cellVoltageA[1] != 0xFF &&
 8006aac:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
			   sideA_cellVoltageD_PECflag == 2 &&
 8006ab0:	2bff      	cmp	r3, #255	@ 0xff
 8006ab2:	d02f      	beq.n	8006b14 <open_cell_check+0x6d0>
			   sideA_cellVoltageA[3] != 0xFF &&
 8006ab4:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
			   sideA_cellVoltageA[1] != 0xFF &&
 8006ab8:	2bff      	cmp	r3, #255	@ 0xff
 8006aba:	d02b      	beq.n	8006b14 <open_cell_check+0x6d0>
			   sideA_cellVoltageA[5] != 0xFF &&
 8006abc:	f897 3041 	ldrb.w	r3, [r7, #65]	@ 0x41
			   sideA_cellVoltageA[3] != 0xFF &&
 8006ac0:	2bff      	cmp	r3, #255	@ 0xff
 8006ac2:	d027      	beq.n	8006b14 <open_cell_check+0x6d0>
			   sideA_cellVoltageB[1] != 0xFF &&
 8006ac4:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
			   sideA_cellVoltageA[5] != 0xFF &&
 8006ac8:	2bff      	cmp	r3, #255	@ 0xff
 8006aca:	d023      	beq.n	8006b14 <open_cell_check+0x6d0>
			   sideA_cellVoltageB[3] != 0xFF &&
 8006acc:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
			   sideA_cellVoltageB[1] != 0xFF &&
 8006ad0:	2bff      	cmp	r3, #255	@ 0xff
 8006ad2:	d01f      	beq.n	8006b14 <open_cell_check+0x6d0>
			   sideA_cellVoltageB[5] != 0xFF &&
 8006ad4:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
			   sideA_cellVoltageB[3] != 0xFF &&
 8006ad8:	2bff      	cmp	r3, #255	@ 0xff
 8006ada:	d01b      	beq.n	8006b14 <open_cell_check+0x6d0>
			   sideA_cellVoltageC[1] != 0xFF &&
 8006adc:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
			   sideA_cellVoltageB[5] != 0xFF &&
 8006ae0:	2bff      	cmp	r3, #255	@ 0xff
 8006ae2:	d017      	beq.n	8006b14 <open_cell_check+0x6d0>
			   sideA_cellVoltageC[3] != 0xFF &&
 8006ae4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
			   sideA_cellVoltageC[1] != 0xFF &&
 8006ae8:	2bff      	cmp	r3, #255	@ 0xff
 8006aea:	d013      	beq.n	8006b14 <open_cell_check+0x6d0>
			   sideA_cellVoltageC[5] != 0xFF &&
 8006aec:	f897 3031 	ldrb.w	r3, [r7, #49]	@ 0x31
			   sideA_cellVoltageC[3] != 0xFF &&
 8006af0:	2bff      	cmp	r3, #255	@ 0xff
 8006af2:	d00f      	beq.n	8006b14 <open_cell_check+0x6d0>
			   sideA_cellVoltageD[1] != 0xFF &&
 8006af4:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
			   sideA_cellVoltageC[5] != 0xFF &&
 8006af8:	2bff      	cmp	r3, #255	@ 0xff
 8006afa:	d00b      	beq.n	8006b14 <open_cell_check+0x6d0>
			   sideA_cellVoltageD[3] != 0xFF &&
 8006afc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
			   sideA_cellVoltageD[1] != 0xFF &&
 8006b00:	2bff      	cmp	r3, #255	@ 0xff
 8006b02:	d007      	beq.n	8006b14 <open_cell_check+0x6d0>
			   sideA_cellVoltageD[5] != 0xFF)
 8006b04:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
			   sideA_cellVoltageD[3] != 0xFF &&
 8006b08:	2bff      	cmp	r3, #255	@ 0xff
 8006b0a:	d003      	beq.n	8006b14 <open_cell_check+0x6d0>
			{
				sideA_subAttempts = 13;
 8006b0c:	230d      	movs	r3, #13
 8006b0e:	f887 30fe 	strb.w	r3, [r7, #254]	@ 0xfe
 8006b12:	e007      	b.n	8006b24 <open_cell_check+0x6e0>
			}
			else {
				sideA_subAttempts++;
 8006b14:	f897 30fe 	ldrb.w	r3, [r7, #254]	@ 0xfe
 8006b18:	3301      	adds	r3, #1
 8006b1a:	f887 30fe 	strb.w	r3, [r7, #254]	@ 0xfe
				wait(1);
 8006b1e:	2001      	movs	r0, #1
 8006b20:	f003 fe70 	bl	800a804 <wait>
			}

			if(sideB_cellVoltageA_PECflag == 2 &&
 8006b24:	f897 30ec 	ldrb.w	r3, [r7, #236]	@ 0xec
 8006b28:	2b02      	cmp	r3, #2
 8006b2a:	d134      	bne.n	8006b96 <open_cell_check+0x752>
 8006b2c:	f897 30eb 	ldrb.w	r3, [r7, #235]	@ 0xeb
 8006b30:	2b02      	cmp	r3, #2
 8006b32:	d130      	bne.n	8006b96 <open_cell_check+0x752>
			   sideB_cellVoltageB_PECflag == 2 &&
 8006b34:	f897 30ea 	ldrb.w	r3, [r7, #234]	@ 0xea
 8006b38:	2b02      	cmp	r3, #2
 8006b3a:	d12c      	bne.n	8006b96 <open_cell_check+0x752>
			   sideB_cellVoltageC_PECflag == 2 &&
 8006b3c:	f897 30e9 	ldrb.w	r3, [r7, #233]	@ 0xe9
 8006b40:	2b02      	cmp	r3, #2
 8006b42:	d128      	bne.n	8006b96 <open_cell_check+0x752>
			   sideB_cellVoltageD_PECflag == 2 &&
			   sideB_cellVoltageA[1] != 0xFF &&
 8006b44:	7f7b      	ldrb	r3, [r7, #29]
			   sideB_cellVoltageD_PECflag == 2 &&
 8006b46:	2bff      	cmp	r3, #255	@ 0xff
 8006b48:	d025      	beq.n	8006b96 <open_cell_check+0x752>
			   sideB_cellVoltageA[3] != 0xFF &&
 8006b4a:	7ffb      	ldrb	r3, [r7, #31]
			   sideB_cellVoltageA[1] != 0xFF &&
 8006b4c:	2bff      	cmp	r3, #255	@ 0xff
 8006b4e:	d022      	beq.n	8006b96 <open_cell_check+0x752>
			   sideB_cellVoltageA[5] != 0xFF &&
 8006b50:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
			   sideB_cellVoltageA[3] != 0xFF &&
 8006b54:	2bff      	cmp	r3, #255	@ 0xff
 8006b56:	d01e      	beq.n	8006b96 <open_cell_check+0x752>
			   sideB_cellVoltageB[1] != 0xFF &&
 8006b58:	7d7b      	ldrb	r3, [r7, #21]
			   sideB_cellVoltageA[5] != 0xFF &&
 8006b5a:	2bff      	cmp	r3, #255	@ 0xff
 8006b5c:	d01b      	beq.n	8006b96 <open_cell_check+0x752>
			   sideB_cellVoltageB[3] != 0xFF &&
 8006b5e:	7dfb      	ldrb	r3, [r7, #23]
			   sideB_cellVoltageB[1] != 0xFF &&
 8006b60:	2bff      	cmp	r3, #255	@ 0xff
 8006b62:	d018      	beq.n	8006b96 <open_cell_check+0x752>
			   sideB_cellVoltageB[5] != 0xFF &&
 8006b64:	7e7b      	ldrb	r3, [r7, #25]
			   sideB_cellVoltageB[3] != 0xFF &&
 8006b66:	2bff      	cmp	r3, #255	@ 0xff
 8006b68:	d015      	beq.n	8006b96 <open_cell_check+0x752>
			   sideB_cellVoltageC[1] != 0xFF &&
 8006b6a:	7b7b      	ldrb	r3, [r7, #13]
			   sideB_cellVoltageB[5] != 0xFF &&
 8006b6c:	2bff      	cmp	r3, #255	@ 0xff
 8006b6e:	d012      	beq.n	8006b96 <open_cell_check+0x752>
			   sideB_cellVoltageC[3] != 0xFF &&
 8006b70:	7bfb      	ldrb	r3, [r7, #15]
			   sideB_cellVoltageC[1] != 0xFF &&
 8006b72:	2bff      	cmp	r3, #255	@ 0xff
 8006b74:	d00f      	beq.n	8006b96 <open_cell_check+0x752>
			   sideB_cellVoltageC[5] != 0xFF &&
 8006b76:	7c7b      	ldrb	r3, [r7, #17]
			   sideB_cellVoltageC[3] != 0xFF &&
 8006b78:	2bff      	cmp	r3, #255	@ 0xff
 8006b7a:	d00c      	beq.n	8006b96 <open_cell_check+0x752>
			   sideB_cellVoltageD[1] != 0xFF &&
 8006b7c:	797b      	ldrb	r3, [r7, #5]
			   sideB_cellVoltageC[5] != 0xFF &&
 8006b7e:	2bff      	cmp	r3, #255	@ 0xff
 8006b80:	d009      	beq.n	8006b96 <open_cell_check+0x752>
			   sideB_cellVoltageD[3] != 0xFF &&
 8006b82:	79fb      	ldrb	r3, [r7, #7]
			   sideB_cellVoltageD[1] != 0xFF &&
 8006b84:	2bff      	cmp	r3, #255	@ 0xff
 8006b86:	d006      	beq.n	8006b96 <open_cell_check+0x752>
			   sideB_cellVoltageD[5] != 0xFF)
 8006b88:	7a7b      	ldrb	r3, [r7, #9]
			   sideB_cellVoltageD[3] != 0xFF &&
 8006b8a:	2bff      	cmp	r3, #255	@ 0xff
 8006b8c:	d003      	beq.n	8006b96 <open_cell_check+0x752>
			{
				sideB_subAttempts = 13;
 8006b8e:	230d      	movs	r3, #13
 8006b90:	f887 30fd 	strb.w	r3, [r7, #253]	@ 0xfd
 8006b94:	e007      	b.n	8006ba6 <open_cell_check+0x762>
			}
			else {
				sideB_subAttempts++;
 8006b96:	f897 30fd 	ldrb.w	r3, [r7, #253]	@ 0xfd
 8006b9a:	3301      	adds	r3, #1
 8006b9c:	f887 30fd 	strb.w	r3, [r7, #253]	@ 0xfd
				wait(1);
 8006ba0:	2001      	movs	r0, #1
 8006ba2:	f003 fe2f 	bl	800a804 <wait>
		while(sideA_subAttempts < ATTEMPT_LIMIT || sideB_subAttempts < ATTEMPT_LIMIT) {
 8006ba6:	f897 30fe 	ldrb.w	r3, [r7, #254]	@ 0xfe
 8006baa:	2b09      	cmp	r3, #9
 8006bac:	f67f aed3 	bls.w	8006956 <open_cell_check+0x512>
 8006bb0:	f897 30fd 	ldrb.w	r3, [r7, #253]	@ 0xfd
 8006bb4:	2b09      	cmp	r3, #9
 8006bb6:	f67f aece 	bls.w	8006956 <open_cell_check+0x512>
			}
		}
		if(sideA_subAttempts != 13) { error_loop(ERROR_PEC, 0, 0, SIDE_A); }
 8006bba:	f897 30fe 	ldrb.w	r3, [r7, #254]	@ 0xfe
 8006bbe:	2b0d      	cmp	r3, #13
 8006bc0:	d005      	beq.n	8006bce <open_cell_check+0x78a>
 8006bc2:	2301      	movs	r3, #1
 8006bc4:	2200      	movs	r2, #0
 8006bc6:	2100      	movs	r1, #0
 8006bc8:	2056      	movs	r0, #86	@ 0x56
 8006bca:	f7fe f915 	bl	8004df8 <error_loop>

		if(sideB_subAttempts != 13) { error_loop(ERROR_PEC, 0, 0, SIDE_B); }
 8006bce:	f897 30fd 	ldrb.w	r3, [r7, #253]	@ 0xfd
 8006bd2:	2b0d      	cmp	r3, #13
 8006bd4:	d005      	beq.n	8006be2 <open_cell_check+0x79e>
 8006bd6:	2300      	movs	r3, #0
 8006bd8:	2200      	movs	r2, #0
 8006bda:	2100      	movs	r1, #0
 8006bdc:	2056      	movs	r0, #86	@ 0x56
 8006bde:	f7fe f90b 	bl	8004df8 <error_loop>

		sideA_cellPD[0] = (sideA_cellVoltageA[1] << 8) | sideA_cellVoltageA[0];
 8006be2:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 8006be6:	b21b      	sxth	r3, r3
 8006be8:	021b      	lsls	r3, r3, #8
 8006bea:	b21a      	sxth	r2, r3
 8006bec:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 8006bf0:	b21b      	sxth	r3, r3
 8006bf2:	4313      	orrs	r3, r2
 8006bf4:	b21b      	sxth	r3, r3
 8006bf6:	b29b      	uxth	r3, r3
 8006bf8:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
		sideA_cellPD[1] = (sideA_cellVoltageA[3] << 8) | sideA_cellVoltageA[2];
 8006bfc:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8006c00:	b21b      	sxth	r3, r3
 8006c02:	021b      	lsls	r3, r3, #8
 8006c04:	b21a      	sxth	r2, r3
 8006c06:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8006c0a:	b21b      	sxth	r3, r3
 8006c0c:	4313      	orrs	r3, r2
 8006c0e:	b21b      	sxth	r3, r3
 8006c10:	b29b      	uxth	r3, r3
 8006c12:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
		sideA_cellPD[2] = (sideA_cellVoltageA[5] << 8) | sideA_cellVoltageA[4];
 8006c16:	f897 3041 	ldrb.w	r3, [r7, #65]	@ 0x41
 8006c1a:	b21b      	sxth	r3, r3
 8006c1c:	021b      	lsls	r3, r3, #8
 8006c1e:	b21a      	sxth	r2, r3
 8006c20:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8006c24:	b21b      	sxth	r3, r3
 8006c26:	4313      	orrs	r3, r2
 8006c28:	b21b      	sxth	r3, r3
 8006c2a:	b29b      	uxth	r3, r3
 8006c2c:	f8a7 30a8 	strh.w	r3, [r7, #168]	@ 0xa8
		sideA_cellPD[3] = (sideA_cellVoltageB[1] << 8) | sideA_cellVoltageB[0];
 8006c30:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8006c34:	b21b      	sxth	r3, r3
 8006c36:	021b      	lsls	r3, r3, #8
 8006c38:	b21a      	sxth	r2, r3
 8006c3a:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8006c3e:	b21b      	sxth	r3, r3
 8006c40:	4313      	orrs	r3, r2
 8006c42:	b21b      	sxth	r3, r3
 8006c44:	b29b      	uxth	r3, r3
 8006c46:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
		sideA_cellPD[4] = (sideA_cellVoltageB[3] << 8) | sideA_cellVoltageB[2];
 8006c4a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8006c4e:	b21b      	sxth	r3, r3
 8006c50:	021b      	lsls	r3, r3, #8
 8006c52:	b21a      	sxth	r2, r3
 8006c54:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8006c58:	b21b      	sxth	r3, r3
 8006c5a:	4313      	orrs	r3, r2
 8006c5c:	b21b      	sxth	r3, r3
 8006c5e:	b29b      	uxth	r3, r3
 8006c60:	f8a7 30ac 	strh.w	r3, [r7, #172]	@ 0xac
		sideA_cellPD[5] = (sideA_cellVoltageB[5] << 8) | sideA_cellVoltageB[4];
 8006c64:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8006c68:	b21b      	sxth	r3, r3
 8006c6a:	021b      	lsls	r3, r3, #8
 8006c6c:	b21a      	sxth	r2, r3
 8006c6e:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 8006c72:	b21b      	sxth	r3, r3
 8006c74:	4313      	orrs	r3, r2
 8006c76:	b21b      	sxth	r3, r3
 8006c78:	b29b      	uxth	r3, r3
 8006c7a:	f8a7 30ae 	strh.w	r3, [r7, #174]	@ 0xae
		sideA_cellPD[6] = (sideA_cellVoltageC[1] << 8) | sideA_cellVoltageC[0];
 8006c7e:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8006c82:	b21b      	sxth	r3, r3
 8006c84:	021b      	lsls	r3, r3, #8
 8006c86:	b21a      	sxth	r2, r3
 8006c88:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8006c8c:	b21b      	sxth	r3, r3
 8006c8e:	4313      	orrs	r3, r2
 8006c90:	b21b      	sxth	r3, r3
 8006c92:	b29b      	uxth	r3, r3
 8006c94:	f8a7 30b0 	strh.w	r3, [r7, #176]	@ 0xb0
		sideA_cellPD[7] = (sideA_cellVoltageC[3] << 8) | sideA_cellVoltageC[2];
 8006c98:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8006c9c:	b21b      	sxth	r3, r3
 8006c9e:	021b      	lsls	r3, r3, #8
 8006ca0:	b21a      	sxth	r2, r3
 8006ca2:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8006ca6:	b21b      	sxth	r3, r3
 8006ca8:	4313      	orrs	r3, r2
 8006caa:	b21b      	sxth	r3, r3
 8006cac:	b29b      	uxth	r3, r3
 8006cae:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
		sideA_cellPD[8] = (sideA_cellVoltageC[5] << 8) | sideA_cellVoltageC[4];
 8006cb2:	f897 3031 	ldrb.w	r3, [r7, #49]	@ 0x31
 8006cb6:	b21b      	sxth	r3, r3
 8006cb8:	021b      	lsls	r3, r3, #8
 8006cba:	b21a      	sxth	r2, r3
 8006cbc:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8006cc0:	b21b      	sxth	r3, r3
 8006cc2:	4313      	orrs	r3, r2
 8006cc4:	b21b      	sxth	r3, r3
 8006cc6:	b29b      	uxth	r3, r3
 8006cc8:	f8a7 30b4 	strh.w	r3, [r7, #180]	@ 0xb4
		sideA_cellPD[9] = (sideA_cellVoltageD[1] << 8) | sideA_cellVoltageD[0];
 8006ccc:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8006cd0:	b21b      	sxth	r3, r3
 8006cd2:	021b      	lsls	r3, r3, #8
 8006cd4:	b21a      	sxth	r2, r3
 8006cd6:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8006cda:	b21b      	sxth	r3, r3
 8006cdc:	4313      	orrs	r3, r2
 8006cde:	b21b      	sxth	r3, r3
 8006ce0:	b29b      	uxth	r3, r3
 8006ce2:	f8a7 30b6 	strh.w	r3, [r7, #182]	@ 0xb6
		sideA_cellPD[10] = (sideA_cellVoltageD[3] << 8) | sideA_cellVoltageD[2];
 8006ce6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006cea:	b21b      	sxth	r3, r3
 8006cec:	021b      	lsls	r3, r3, #8
 8006cee:	b21a      	sxth	r2, r3
 8006cf0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8006cf4:	b21b      	sxth	r3, r3
 8006cf6:	4313      	orrs	r3, r2
 8006cf8:	b21b      	sxth	r3, r3
 8006cfa:	b29b      	uxth	r3, r3
 8006cfc:	f8a7 30b8 	strh.w	r3, [r7, #184]	@ 0xb8
		sideA_cellPD[11] = (sideA_cellVoltageD[5] << 8) | sideA_cellVoltageD[4];
 8006d00:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8006d04:	b21b      	sxth	r3, r3
 8006d06:	021b      	lsls	r3, r3, #8
 8006d08:	b21a      	sxth	r2, r3
 8006d0a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006d0e:	b21b      	sxth	r3, r3
 8006d10:	4313      	orrs	r3, r2
 8006d12:	b21b      	sxth	r3, r3
 8006d14:	b29b      	uxth	r3, r3
 8006d16:	f8a7 30ba 	strh.w	r3, [r7, #186]	@ 0xba

		sideB_cellPD[0] = (sideB_cellVoltageA[1] << 8) | sideB_cellVoltageA[0];
 8006d1a:	7f7b      	ldrb	r3, [r7, #29]
 8006d1c:	b21b      	sxth	r3, r3
 8006d1e:	021b      	lsls	r3, r3, #8
 8006d20:	b21a      	sxth	r2, r3
 8006d22:	7f3b      	ldrb	r3, [r7, #28]
 8006d24:	b21b      	sxth	r3, r3
 8006d26:	4313      	orrs	r3, r2
 8006d28:	b21b      	sxth	r3, r3
 8006d2a:	b29b      	uxth	r3, r3
 8006d2c:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c
		sideB_cellPD[1] = (sideB_cellVoltageA[3] << 8) | sideB_cellVoltageA[2];
 8006d30:	7ffb      	ldrb	r3, [r7, #31]
 8006d32:	b21b      	sxth	r3, r3
 8006d34:	021b      	lsls	r3, r3, #8
 8006d36:	b21a      	sxth	r2, r3
 8006d38:	7fbb      	ldrb	r3, [r7, #30]
 8006d3a:	b21b      	sxth	r3, r3
 8006d3c:	4313      	orrs	r3, r2
 8006d3e:	b21b      	sxth	r3, r3
 8006d40:	b29b      	uxth	r3, r3
 8006d42:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
		sideB_cellPD[2] = (sideB_cellVoltageA[5] << 8) | sideB_cellVoltageA[4];
 8006d46:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8006d4a:	b21b      	sxth	r3, r3
 8006d4c:	021b      	lsls	r3, r3, #8
 8006d4e:	b21a      	sxth	r2, r3
 8006d50:	f897 3020 	ldrb.w	r3, [r7, #32]
 8006d54:	b21b      	sxth	r3, r3
 8006d56:	4313      	orrs	r3, r2
 8006d58:	b21b      	sxth	r3, r3
 8006d5a:	b29b      	uxth	r3, r3
 8006d5c:	f8a7 3060 	strh.w	r3, [r7, #96]	@ 0x60
		sideB_cellPD[3] = (sideB_cellVoltageB[1] << 8) | sideB_cellVoltageB[0];
 8006d60:	7d7b      	ldrb	r3, [r7, #21]
 8006d62:	b21b      	sxth	r3, r3
 8006d64:	021b      	lsls	r3, r3, #8
 8006d66:	b21a      	sxth	r2, r3
 8006d68:	7d3b      	ldrb	r3, [r7, #20]
 8006d6a:	b21b      	sxth	r3, r3
 8006d6c:	4313      	orrs	r3, r2
 8006d6e:	b21b      	sxth	r3, r3
 8006d70:	b29b      	uxth	r3, r3
 8006d72:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
		sideB_cellPD[4] = (sideB_cellVoltageB[3] << 8) | sideB_cellVoltageB[2];
 8006d76:	7dfb      	ldrb	r3, [r7, #23]
 8006d78:	b21b      	sxth	r3, r3
 8006d7a:	021b      	lsls	r3, r3, #8
 8006d7c:	b21a      	sxth	r2, r3
 8006d7e:	7dbb      	ldrb	r3, [r7, #22]
 8006d80:	b21b      	sxth	r3, r3
 8006d82:	4313      	orrs	r3, r2
 8006d84:	b21b      	sxth	r3, r3
 8006d86:	b29b      	uxth	r3, r3
 8006d88:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
		sideB_cellPD[5] = (sideB_cellVoltageB[5] << 8) | sideB_cellVoltageB[4];
 8006d8c:	7e7b      	ldrb	r3, [r7, #25]
 8006d8e:	b21b      	sxth	r3, r3
 8006d90:	021b      	lsls	r3, r3, #8
 8006d92:	b21a      	sxth	r2, r3
 8006d94:	7e3b      	ldrb	r3, [r7, #24]
 8006d96:	b21b      	sxth	r3, r3
 8006d98:	4313      	orrs	r3, r2
 8006d9a:	b21b      	sxth	r3, r3
 8006d9c:	b29b      	uxth	r3, r3
 8006d9e:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
		sideB_cellPD[6] = (sideB_cellVoltageC[1] << 8) | sideB_cellVoltageC[0];
 8006da2:	7b7b      	ldrb	r3, [r7, #13]
 8006da4:	b21b      	sxth	r3, r3
 8006da6:	021b      	lsls	r3, r3, #8
 8006da8:	b21a      	sxth	r2, r3
 8006daa:	7b3b      	ldrb	r3, [r7, #12]
 8006dac:	b21b      	sxth	r3, r3
 8006dae:	4313      	orrs	r3, r2
 8006db0:	b21b      	sxth	r3, r3
 8006db2:	b29b      	uxth	r3, r3
 8006db4:	f8a7 3068 	strh.w	r3, [r7, #104]	@ 0x68
		sideB_cellPD[7] = (sideB_cellVoltageC[3] << 8) | sideB_cellVoltageC[2];
 8006db8:	7bfb      	ldrb	r3, [r7, #15]
 8006dba:	b21b      	sxth	r3, r3
 8006dbc:	021b      	lsls	r3, r3, #8
 8006dbe:	b21a      	sxth	r2, r3
 8006dc0:	7bbb      	ldrb	r3, [r7, #14]
 8006dc2:	b21b      	sxth	r3, r3
 8006dc4:	4313      	orrs	r3, r2
 8006dc6:	b21b      	sxth	r3, r3
 8006dc8:	b29b      	uxth	r3, r3
 8006dca:	f8a7 306a 	strh.w	r3, [r7, #106]	@ 0x6a
		sideB_cellPD[8] = (sideB_cellVoltageC[5] << 8) | sideB_cellVoltageC[4];
 8006dce:	7c7b      	ldrb	r3, [r7, #17]
 8006dd0:	b21b      	sxth	r3, r3
 8006dd2:	021b      	lsls	r3, r3, #8
 8006dd4:	b21a      	sxth	r2, r3
 8006dd6:	7c3b      	ldrb	r3, [r7, #16]
 8006dd8:	b21b      	sxth	r3, r3
 8006dda:	4313      	orrs	r3, r2
 8006ddc:	b21b      	sxth	r3, r3
 8006dde:	b29b      	uxth	r3, r3
 8006de0:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
		sideB_cellPD[9] = (sideB_cellVoltageD[1] << 8) | sideB_cellVoltageD[0];
 8006de4:	797b      	ldrb	r3, [r7, #5]
 8006de6:	b21b      	sxth	r3, r3
 8006de8:	021b      	lsls	r3, r3, #8
 8006dea:	b21a      	sxth	r2, r3
 8006dec:	793b      	ldrb	r3, [r7, #4]
 8006dee:	b21b      	sxth	r3, r3
 8006df0:	4313      	orrs	r3, r2
 8006df2:	b21b      	sxth	r3, r3
 8006df4:	b29b      	uxth	r3, r3
 8006df6:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
		sideB_cellPD[10] = (sideB_cellVoltageD[3] << 8) | sideB_cellVoltageD[2];
 8006dfa:	79fb      	ldrb	r3, [r7, #7]
 8006dfc:	b21b      	sxth	r3, r3
 8006dfe:	021b      	lsls	r3, r3, #8
 8006e00:	b21a      	sxth	r2, r3
 8006e02:	79bb      	ldrb	r3, [r7, #6]
 8006e04:	b21b      	sxth	r3, r3
 8006e06:	4313      	orrs	r3, r2
 8006e08:	b21b      	sxth	r3, r3
 8006e0a:	b29b      	uxth	r3, r3
 8006e0c:	f8a7 3070 	strh.w	r3, [r7, #112]	@ 0x70
		sideB_cellPD[11] = (sideB_cellVoltageD[5] << 8) | sideB_cellVoltageD[4];
 8006e10:	7a7b      	ldrb	r3, [r7, #9]
 8006e12:	b21b      	sxth	r3, r3
 8006e14:	021b      	lsls	r3, r3, #8
 8006e16:	b21a      	sxth	r2, r3
 8006e18:	7a3b      	ldrb	r3, [r7, #8]
 8006e1a:	b21b      	sxth	r3, r3
 8006e1c:	4313      	orrs	r3, r2
 8006e1e:	b21b      	sxth	r3, r3
 8006e20:	b29b      	uxth	r3, r3
 8006e22:	f8a7 3072 	strh.w	r3, [r7, #114]	@ 0x72

		// Step 3
		for(uint8_t i = 0; i < 12; i++) { sideA_cellDelta[i] = sideA_cellPU[i] - sideA_cellPD[i]; }
 8006e26:	2300      	movs	r3, #0
 8006e28:	f887 30f9 	strb.w	r3, [r7, #249]	@ 0xf9
 8006e2c:	e01f      	b.n	8006e6e <open_cell_check+0xa2a>
 8006e2e:	f897 30f9 	ldrb.w	r3, [r7, #249]	@ 0xf9
 8006e32:	005b      	lsls	r3, r3, #1
 8006e34:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8006e38:	443b      	add	r3, r7
 8006e3a:	f833 2c44 	ldrh.w	r2, [r3, #-68]
 8006e3e:	f897 30f9 	ldrb.w	r3, [r7, #249]	@ 0xf9
 8006e42:	005b      	lsls	r3, r3, #1
 8006e44:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8006e48:	443b      	add	r3, r7
 8006e4a:	f833 3c5c 	ldrh.w	r3, [r3, #-92]
 8006e4e:	1ad3      	subs	r3, r2, r3
 8006e50:	b29a      	uxth	r2, r3
 8006e52:	f897 30f9 	ldrb.w	r3, [r7, #249]	@ 0xf9
 8006e56:	b212      	sxth	r2, r2
 8006e58:	005b      	lsls	r3, r3, #1
 8006e5a:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8006e5e:	443b      	add	r3, r7
 8006e60:	f823 2c74 	strh.w	r2, [r3, #-116]
 8006e64:	f897 30f9 	ldrb.w	r3, [r7, #249]	@ 0xf9
 8006e68:	3301      	adds	r3, #1
 8006e6a:	f887 30f9 	strb.w	r3, [r7, #249]	@ 0xf9
 8006e6e:	f897 30f9 	ldrb.w	r3, [r7, #249]	@ 0xf9
 8006e72:	2b0b      	cmp	r3, #11
 8006e74:	d9db      	bls.n	8006e2e <open_cell_check+0x9ea>

		for(uint8_t i = 0; i < 12; i++) { sideB_cellDelta[i] = sideB_cellPU[i] - sideB_cellPD[i]; }
 8006e76:	2300      	movs	r3, #0
 8006e78:	f887 30f8 	strb.w	r3, [r7, #248]	@ 0xf8
 8006e7c:	e01f      	b.n	8006ebe <open_cell_check+0xa7a>
 8006e7e:	f897 30f8 	ldrb.w	r3, [r7, #248]	@ 0xf8
 8006e82:	005b      	lsls	r3, r3, #1
 8006e84:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8006e88:	443b      	add	r3, r7
 8006e8a:	f833 2c8c 	ldrh.w	r2, [r3, #-140]
 8006e8e:	f897 30f8 	ldrb.w	r3, [r7, #248]	@ 0xf8
 8006e92:	005b      	lsls	r3, r3, #1
 8006e94:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8006e98:	443b      	add	r3, r7
 8006e9a:	f833 3ca4 	ldrh.w	r3, [r3, #-164]
 8006e9e:	1ad3      	subs	r3, r2, r3
 8006ea0:	b29a      	uxth	r2, r3
 8006ea2:	f897 30f8 	ldrb.w	r3, [r7, #248]	@ 0xf8
 8006ea6:	b212      	sxth	r2, r2
 8006ea8:	005b      	lsls	r3, r3, #1
 8006eaa:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8006eae:	443b      	add	r3, r7
 8006eb0:	f823 2cbc 	strh.w	r2, [r3, #-188]
 8006eb4:	f897 30f8 	ldrb.w	r3, [r7, #248]	@ 0xf8
 8006eb8:	3301      	adds	r3, #1
 8006eba:	f887 30f8 	strb.w	r3, [r7, #248]	@ 0xf8
 8006ebe:	f897 30f8 	ldrb.w	r3, [r7, #248]	@ 0xf8
 8006ec2:	2b0b      	cmp	r3, #11
 8006ec4:	d9db      	bls.n	8006e7e <open_cell_check+0xa3a>

		// Step 4
		uint8_t openCellIndex = 13;
 8006ec6:	230d      	movs	r3, #13
 8006ec8:	f887 30f3 	strb.w	r3, [r7, #243]	@ 0xf3
		uint8_t sideA_openCellFlag = 0;
 8006ecc:	2300      	movs	r3, #0
 8006ece:	f887 30f2 	strb.w	r3, [r7, #242]	@ 0xf2
		uint8_t sideB_openCellFlag = 0;
 8006ed2:	2300      	movs	r3, #0
 8006ed4:	f887 30f1 	strb.w	r3, [r7, #241]	@ 0xf1

		// If statement below checks if cell 0 is open
		if(sideA_cellPU[0] == 0) {
 8006ed8:	f8b7 30bc 	ldrh.w	r3, [r7, #188]	@ 0xbc
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d10c      	bne.n	8006efa <open_cell_check+0xab6>
			faultCells[faultCellQty] = 21;		// Value of 21 implies that cell 0 is open
 8006ee0:	f897 30fc 	ldrb.w	r3, [r7, #252]	@ 0xfc
 8006ee4:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8006ee8:	443b      	add	r3, r7
 8006eea:	2215      	movs	r2, #21
 8006eec:	f803 2c2c 	strb.w	r2, [r3, #-44]
			faultCellQty++;
 8006ef0:	f897 30fc 	ldrb.w	r3, [r7, #252]	@ 0xfc
 8006ef4:	3301      	adds	r3, #1
 8006ef6:	f887 30fc 	strb.w	r3, [r7, #252]	@ 0xfc
		}

		// If statement below checks if cell 10 (GND of side B LTC6813) is open
		if(sideB_cellPU[0] == 0) {
 8006efa:	f8b7 3074 	ldrh.w	r3, [r7, #116]	@ 0x74
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d10c      	bne.n	8006f1c <open_cell_check+0xad8>
			faultCells[faultCellQty] = 10;
 8006f02:	f897 30fc 	ldrb.w	r3, [r7, #252]	@ 0xfc
 8006f06:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8006f0a:	443b      	add	r3, r7
 8006f0c:	220a      	movs	r2, #10
 8006f0e:	f803 2c2c 	strb.w	r2, [r3, #-44]
			faultCellQty++;
 8006f12:	f897 30fc 	ldrb.w	r3, [r7, #252]	@ 0xfc
 8006f16:	3301      	adds	r3, #1
 8006f18:	f887 30fc 	strb.w	r3, [r7, #252]	@ 0xfc
		}

		// If statement below checks if cell 10 is open using an alternative method
		if(sideA_cellPD[9] == 0) {
 8006f1c:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	@ 0xb6
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d10c      	bne.n	8006f3e <open_cell_check+0xafa>
			faultCells[faultCellQty] = 10;
 8006f24:	f897 30fc 	ldrb.w	r3, [r7, #252]	@ 0xfc
 8006f28:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8006f2c:	443b      	add	r3, r7
 8006f2e:	220a      	movs	r2, #10
 8006f30:	f803 2c2c 	strb.w	r2, [r3, #-44]
			faultCellQty++;
 8006f34:	f897 30fc 	ldrb.w	r3, [r7, #252]	@ 0xfc
 8006f38:	3301      	adds	r3, #1
 8006f3a:	f887 30fc 	strb.w	r3, [r7, #252]	@ 0xfc
		}

		// If statement below checks if cell 20 is open
		if(sideB_cellPD[9] == 0) {
 8006f3e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d10c      	bne.n	8006f60 <open_cell_check+0xb1c>
			faultCells[faultCellQty] = 20;
 8006f46:	f897 30fc 	ldrb.w	r3, [r7, #252]	@ 0xfc
 8006f4a:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8006f4e:	443b      	add	r3, r7
 8006f50:	2214      	movs	r2, #20
 8006f52:	f803 2c2c 	strb.w	r2, [r3, #-44]
			faultCellQty++;
 8006f56:	f897 30fc 	ldrb.w	r3, [r7, #252]	@ 0xfc
 8006f5a:	3301      	adds	r3, #1
 8006f5c:	f887 30fc 	strb.w	r3, [r7, #252]	@ 0xfc
		}

		// Two for-loops below check for open cells that show zero volts (complete disconnect)
		for(uint8_t i = 0; i < CELL_QTY/2; i++) {
 8006f60:	2300      	movs	r3, #0
 8006f62:	f887 30f7 	strb.w	r3, [r7, #247]	@ 0xf7
 8006f66:	e028      	b.n	8006fba <open_cell_check+0xb76>
			if(sideA_cellPU[i] == 0 || sideA_cellPD[i] == 0) {
 8006f68:	f897 30f7 	ldrb.w	r3, [r7, #247]	@ 0xf7
 8006f6c:	005b      	lsls	r3, r3, #1
 8006f6e:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8006f72:	443b      	add	r3, r7
 8006f74:	f833 3c44 	ldrh.w	r3, [r3, #-68]
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d009      	beq.n	8006f90 <open_cell_check+0xb4c>
 8006f7c:	f897 30f7 	ldrb.w	r3, [r7, #247]	@ 0xf7
 8006f80:	005b      	lsls	r3, r3, #1
 8006f82:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8006f86:	443b      	add	r3, r7
 8006f88:	f833 3c5c 	ldrh.w	r3, [r3, #-92]
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d10f      	bne.n	8006fb0 <open_cell_check+0xb6c>
				faultCells[faultCellQty] = i + 1;
 8006f90:	f897 30fc 	ldrb.w	r3, [r7, #252]	@ 0xfc
 8006f94:	f897 20f7 	ldrb.w	r2, [r7, #247]	@ 0xf7
 8006f98:	3201      	adds	r2, #1
 8006f9a:	b2d2      	uxtb	r2, r2
 8006f9c:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8006fa0:	443b      	add	r3, r7
 8006fa2:	f803 2c2c 	strb.w	r2, [r3, #-44]
				faultCellQty++;
 8006fa6:	f897 30fc 	ldrb.w	r3, [r7, #252]	@ 0xfc
 8006faa:	3301      	adds	r3, #1
 8006fac:	f887 30fc 	strb.w	r3, [r7, #252]	@ 0xfc
		for(uint8_t i = 0; i < CELL_QTY/2; i++) {
 8006fb0:	f897 30f7 	ldrb.w	r3, [r7, #247]	@ 0xf7
 8006fb4:	3301      	adds	r3, #1
 8006fb6:	f887 30f7 	strb.w	r3, [r7, #247]	@ 0xf7
 8006fba:	f897 30f7 	ldrb.w	r3, [r7, #247]	@ 0xf7
 8006fbe:	2b09      	cmp	r3, #9
 8006fc0:	d9d2      	bls.n	8006f68 <open_cell_check+0xb24>
			}
		}
		for(uint8_t i = 0; i < CELL_QTY/2; i++) {
 8006fc2:	2300      	movs	r3, #0
 8006fc4:	f887 30f6 	strb.w	r3, [r7, #246]	@ 0xf6
 8006fc8:	e028      	b.n	800701c <open_cell_check+0xbd8>
			if(sideB_cellPU[i] == 0 || sideB_cellPD[i] == 0) {
 8006fca:	f897 30f6 	ldrb.w	r3, [r7, #246]	@ 0xf6
 8006fce:	005b      	lsls	r3, r3, #1
 8006fd0:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8006fd4:	443b      	add	r3, r7
 8006fd6:	f833 3c8c 	ldrh.w	r3, [r3, #-140]
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d009      	beq.n	8006ff2 <open_cell_check+0xbae>
 8006fde:	f897 30f6 	ldrb.w	r3, [r7, #246]	@ 0xf6
 8006fe2:	005b      	lsls	r3, r3, #1
 8006fe4:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8006fe8:	443b      	add	r3, r7
 8006fea:	f833 3ca4 	ldrh.w	r3, [r3, #-164]
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d10f      	bne.n	8007012 <open_cell_check+0xbce>
				faultCells[faultCellQty] = i + 11;
 8006ff2:	f897 30fc 	ldrb.w	r3, [r7, #252]	@ 0xfc
 8006ff6:	f897 20f6 	ldrb.w	r2, [r7, #246]	@ 0xf6
 8006ffa:	320b      	adds	r2, #11
 8006ffc:	b2d2      	uxtb	r2, r2
 8006ffe:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8007002:	443b      	add	r3, r7
 8007004:	f803 2c2c 	strb.w	r2, [r3, #-44]
				faultCellQty++;
 8007008:	f897 30fc 	ldrb.w	r3, [r7, #252]	@ 0xfc
 800700c:	3301      	adds	r3, #1
 800700e:	f887 30fc 	strb.w	r3, [r7, #252]	@ 0xfc
		for(uint8_t i = 0; i < CELL_QTY/2; i++) {
 8007012:	f897 30f6 	ldrb.w	r3, [r7, #246]	@ 0xf6
 8007016:	3301      	adds	r3, #1
 8007018:	f887 30f6 	strb.w	r3, [r7, #246]	@ 0xf6
 800701c:	f897 30f6 	ldrb.w	r3, [r7, #246]	@ 0xf6
 8007020:	2b09      	cmp	r3, #9
 8007022:	d9d2      	bls.n	8006fca <open_cell_check+0xb86>
			}
		}

		// Two for-loops below check for open cells that do not show zero volts (partial disconnect)
		for(uint8_t i = 1; i < CELL_QTY/2; i++) {
 8007024:	2301      	movs	r3, #1
 8007026:	f887 30f5 	strb.w	r3, [r7, #245]	@ 0xf5
 800702a:	e01d      	b.n	8007068 <open_cell_check+0xc24>
			if(sideA_cellDelta[i] < OPEN_CELL_THRESHOLD) {
 800702c:	f897 30f5 	ldrb.w	r3, [r7, #245]	@ 0xf5
 8007030:	005b      	lsls	r3, r3, #1
 8007032:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8007036:	443b      	add	r3, r7
 8007038:	f933 3c74 	ldrsh.w	r3, [r3, #-116]
 800703c:	f513 6f7a 	cmn.w	r3, #4000	@ 0xfa0
 8007040:	da0d      	bge.n	800705e <open_cell_check+0xc1a>
				faultCells[faultCellQty] = i;
 8007042:	f897 30fc 	ldrb.w	r3, [r7, #252]	@ 0xfc
 8007046:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800704a:	443b      	add	r3, r7
 800704c:	f897 20f5 	ldrb.w	r2, [r7, #245]	@ 0xf5
 8007050:	f803 2c2c 	strb.w	r2, [r3, #-44]
				faultCellQty++;
 8007054:	f897 30fc 	ldrb.w	r3, [r7, #252]	@ 0xfc
 8007058:	3301      	adds	r3, #1
 800705a:	f887 30fc 	strb.w	r3, [r7, #252]	@ 0xfc
		for(uint8_t i = 1; i < CELL_QTY/2; i++) {
 800705e:	f897 30f5 	ldrb.w	r3, [r7, #245]	@ 0xf5
 8007062:	3301      	adds	r3, #1
 8007064:	f887 30f5 	strb.w	r3, [r7, #245]	@ 0xf5
 8007068:	f897 30f5 	ldrb.w	r3, [r7, #245]	@ 0xf5
 800706c:	2b09      	cmp	r3, #9
 800706e:	d9dd      	bls.n	800702c <open_cell_check+0xbe8>
			}
		}
		for(uint8_t i = 1; i < CELL_QTY/2; i++) {
 8007070:	2301      	movs	r3, #1
 8007072:	f887 30f4 	strb.w	r3, [r7, #244]	@ 0xf4
 8007076:	e01f      	b.n	80070b8 <open_cell_check+0xc74>
			if(sideB_cellDelta[i] < OPEN_CELL_THRESHOLD) {
 8007078:	f897 30f4 	ldrb.w	r3, [r7, #244]	@ 0xf4
 800707c:	005b      	lsls	r3, r3, #1
 800707e:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8007082:	443b      	add	r3, r7
 8007084:	f933 3cbc 	ldrsh.w	r3, [r3, #-188]
 8007088:	f513 6f7a 	cmn.w	r3, #4000	@ 0xfa0
 800708c:	da0f      	bge.n	80070ae <open_cell_check+0xc6a>
				faultCells[faultCellQty] = i + 10;
 800708e:	f897 30fc 	ldrb.w	r3, [r7, #252]	@ 0xfc
 8007092:	f897 20f4 	ldrb.w	r2, [r7, #244]	@ 0xf4
 8007096:	320a      	adds	r2, #10
 8007098:	b2d2      	uxtb	r2, r2
 800709a:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800709e:	443b      	add	r3, r7
 80070a0:	f803 2c2c 	strb.w	r2, [r3, #-44]
				faultCellQty++;
 80070a4:	f897 30fc 	ldrb.w	r3, [r7, #252]	@ 0xfc
 80070a8:	3301      	adds	r3, #1
 80070aa:	f887 30fc 	strb.w	r3, [r7, #252]	@ 0xfc
		for(uint8_t i = 1; i < CELL_QTY/2; i++) {
 80070ae:	f897 30f4 	ldrb.w	r3, [r7, #244]	@ 0xf4
 80070b2:	3301      	adds	r3, #1
 80070b4:	f887 30f4 	strb.w	r3, [r7, #244]	@ 0xf4
 80070b8:	f897 30f4 	ldrb.w	r3, [r7, #244]	@ 0xf4
 80070bc:	2b09      	cmp	r3, #9
 80070be:	d9db      	bls.n	8007078 <open_cell_check+0xc34>
			}
		}

		if(faultCellQty == 0) { attempts = 13; }
 80070c0:	f897 30fc 	ldrb.w	r3, [r7, #252]	@ 0xfc
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d103      	bne.n	80070d0 <open_cell_check+0xc8c>
 80070c8:	230d      	movs	r3, #13
 80070ca:	f887 30ff 	strb.w	r3, [r7, #255]	@ 0xff
 80070ce:	e007      	b.n	80070e0 <open_cell_check+0xc9c>

		else {
			attempts++;
 80070d0:	f897 30ff 	ldrb.w	r3, [r7, #255]	@ 0xff
 80070d4:	3301      	adds	r3, #1
 80070d6:	f887 30ff 	strb.w	r3, [r7, #255]	@ 0xff
			wait(1);
 80070da:	2001      	movs	r0, #1
 80070dc:	f003 fb92 	bl	800a804 <wait>
	while(attempts < ATTEMPT_LIMIT) {
 80070e0:	f897 30ff 	ldrb.w	r3, [r7, #255]	@ 0xff
 80070e4:	2b09      	cmp	r3, #9
 80070e6:	f67f aaef 	bls.w	80066c8 <open_cell_check+0x284>
		}
	}
	if(attempts != 13) { error_loop(ERROR_CELL_OPEN, 0, faultCells, NOT_APPLICABLE); }
 80070ea:	f897 30ff 	ldrb.w	r3, [r7, #255]	@ 0xff
 80070ee:	2b0d      	cmp	r3, #13
 80070f0:	d006      	beq.n	8007100 <open_cell_check+0xcbc>
 80070f2:	f107 02d4 	add.w	r2, r7, #212	@ 0xd4
 80070f6:	2303      	movs	r3, #3
 80070f8:	2100      	movs	r1, #0
 80070fa:	2048      	movs	r0, #72	@ 0x48
 80070fc:	f7fd fe7c 	bl	8004df8 <error_loop>
}
 8007100:	bf00      	nop
 8007102:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8007106:	46bd      	mov	sp, r7
 8007108:	bd80      	pop	{r7, pc}
	...

0800710c <open_thermistor_check>:


void open_thermistor_check(void)
{
 800710c:	b580      	push	{r7, lr}
 800710e:	b098      	sub	sp, #96	@ 0x60
 8007110:	af00      	add	r7, sp, #0
	uint8_t attempts = 0;
 8007112:	2300      	movs	r3, #0
 8007114:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

	float thermistorVoltages[18];

	uint8_t faultThermistorQty = 0;
 8007118:	2300      	movs	r3, #0
 800711a:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
	uint8_t faultThermistors[MODULE_THERM_QTY] = {0};
 800711e:	463b      	mov	r3, r7
 8007120:	2200      	movs	r2, #0
 8007122:	601a      	str	r2, [r3, #0]
 8007124:	605a      	str	r2, [r3, #4]
 8007126:	609a      	str	r2, [r3, #8]
 8007128:	60da      	str	r2, [r3, #12]
 800712a:	821a      	strh	r2, [r3, #16]

	while(attempts < ATTEMPT_LIMIT) {
 800712c:	e03f      	b.n	80071ae <open_thermistor_check+0xa2>
		read_thermistors(thermistorVoltages);
 800712e:	f107 0314 	add.w	r3, r7, #20
 8007132:	4618      	mov	r0, r3
 8007134:	f003 fef0 	bl	800af18 <read_thermistors>

		for(uint8_t i = 0; i < MODULE_THERM_QTY; i++) {
 8007138:	2300      	movs	r3, #0
 800713a:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
 800713e:	e022      	b.n	8007186 <open_thermistor_check+0x7a>
			if(thermistorVoltages[i] > THERMISTOR_OPEN_CIRCUIT_THRESHOLD) {
 8007140:	f897 305d 	ldrb.w	r3, [r7, #93]	@ 0x5d
 8007144:	009b      	lsls	r3, r3, #2
 8007146:	3360      	adds	r3, #96	@ 0x60
 8007148:	443b      	add	r3, r7
 800714a:	3b4c      	subs	r3, #76	@ 0x4c
 800714c:	edd3 7a00 	vldr	s15, [r3]
 8007150:	ed9f 7a20 	vldr	s14, [pc, #128]	@ 80071d4 <open_thermistor_check+0xc8>
 8007154:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007158:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800715c:	dd0e      	ble.n	800717c <open_thermistor_check+0x70>
				faultThermistors[faultThermistorQty] = i + 1;
 800715e:	f897 305e 	ldrb.w	r3, [r7, #94]	@ 0x5e
 8007162:	f897 205d 	ldrb.w	r2, [r7, #93]	@ 0x5d
 8007166:	3201      	adds	r2, #1
 8007168:	b2d2      	uxtb	r2, r2
 800716a:	3360      	adds	r3, #96	@ 0x60
 800716c:	443b      	add	r3, r7
 800716e:	f803 2c60 	strb.w	r2, [r3, #-96]
				faultThermistorQty++;
 8007172:	f897 305e 	ldrb.w	r3, [r7, #94]	@ 0x5e
 8007176:	3301      	adds	r3, #1
 8007178:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
		for(uint8_t i = 0; i < MODULE_THERM_QTY; i++) {
 800717c:	f897 305d 	ldrb.w	r3, [r7, #93]	@ 0x5d
 8007180:	3301      	adds	r3, #1
 8007182:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
 8007186:	f897 305d 	ldrb.w	r3, [r7, #93]	@ 0x5d
 800718a:	2b11      	cmp	r3, #17
 800718c:	d9d8      	bls.n	8007140 <open_thermistor_check+0x34>
			}
		}

		if(faultThermistorQty == 0) { attempts = 13; }
 800718e:	f897 305e 	ldrb.w	r3, [r7, #94]	@ 0x5e
 8007192:	2b00      	cmp	r3, #0
 8007194:	d103      	bne.n	800719e <open_thermistor_check+0x92>
 8007196:	230d      	movs	r3, #13
 8007198:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800719c:	e007      	b.n	80071ae <open_thermistor_check+0xa2>

		else {
			attempts++;
 800719e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80071a2:	3301      	adds	r3, #1
 80071a4:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			wait(1);
 80071a8:	2001      	movs	r0, #1
 80071aa:	f003 fb2b 	bl	800a804 <wait>
	while(attempts < ATTEMPT_LIMIT) {
 80071ae:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80071b2:	2b09      	cmp	r3, #9
 80071b4:	d9bb      	bls.n	800712e <open_thermistor_check+0x22>
		}
	}
	if(attempts != 13) { error_loop(ERROR_THERMISTOR_OPEN, faultThermistors, 0, NOT_APPLICABLE); }
 80071b6:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80071ba:	2b0d      	cmp	r3, #13
 80071bc:	d005      	beq.n	80071ca <open_thermistor_check+0xbe>
 80071be:	4639      	mov	r1, r7
 80071c0:	2303      	movs	r3, #3
 80071c2:	2200      	movs	r2, #0
 80071c4:	2049      	movs	r0, #73	@ 0x49
 80071c6:	f7fd fe17 	bl	8004df8 <error_loop>
}
 80071ca:	bf00      	nop
 80071cc:	3760      	adds	r7, #96	@ 0x60
 80071ce:	46bd      	mov	sp, r7
 80071d0:	bd80      	pop	{r7, pc}
 80071d2:	bf00      	nop
 80071d4:	404ccccd 	.word	0x404ccccd

080071d8 <mux_test>:


void mux_test(void)
{
 80071d8:	b580      	push	{r7, lr}
 80071da:	b086      	sub	sp, #24
 80071dc:	af00      	add	r7, sp, #0
	uint8_t sideA_attempts = 0;
 80071de:	2300      	movs	r3, #0
 80071e0:	75fb      	strb	r3, [r7, #23]
	uint8_t sideB_attempts = 0;
 80071e2:	2300      	movs	r3, #0
 80071e4:	75bb      	strb	r3, [r7, #22]
	uint8_t sideA_subAttempts = 0;
 80071e6:	2300      	movs	r3, #0
 80071e8:	757b      	strb	r3, [r7, #21]
	uint8_t sideB_subAttempts = 0;
 80071ea:	2300      	movs	r3, #0
 80071ec:	753b      	strb	r3, [r7, #20]

	uint8_t sideA_statusB[8];
	uint8_t sideB_statusB[8];

	uint8_t sideA_statusB_PECflag = 0;
 80071ee:	2300      	movs	r3, #0
 80071f0:	74fb      	strb	r3, [r7, #19]
	uint8_t sideB_statusB_PECflag = 0;
 80071f2:	2300      	movs	r3, #0
 80071f4:	74bb      	strb	r3, [r7, #18]

	uint8_t sideA_muxFailBit;
	uint8_t sideB_muxFailBit;
	while(sideA_attempts < ATTEMPT_LIMIT || sideB_attempts < ATTEMPT_LIMIT) {
 80071f6:	e085      	b.n	8007304 <mux_test+0x12c>
		while(sideA_subAttempts < ATTEMPT_LIMIT || sideB_subAttempts < ATTEMPT_LIMIT) {
			CLRSTAT(SIDE_A);
 80071f8:	2001      	movs	r0, #1
 80071fa:	f002 fc8d 	bl	8009b18 <CLRSTAT>
			CLRSTAT(SIDE_B);
 80071fe:	2000      	movs	r0, #0
 8007200:	f002 fc8a 	bl	8009b18 <CLRSTAT>
			wait(3);
 8007204:	2003      	movs	r0, #3
 8007206:	f003 fafd 	bl	800a804 <wait>

			DIAGN(SIDE_A);
 800720a:	2001      	movs	r0, #1
 800720c:	f002 fca7 	bl	8009b5e <DIAGN>
			DIAGN(SIDE_B);
 8007210:	2000      	movs	r0, #0
 8007212:	f002 fca4 	bl	8009b5e <DIAGN>
			wait(3);
 8007216:	2003      	movs	r0, #3
 8007218:	f003 faf4 	bl	800a804 <wait>

			RDSTATB(sideA_statusB, SIDE_A);
 800721c:	f107 0308 	add.w	r3, r7, #8
 8007220:	2101      	movs	r1, #1
 8007222:	4618      	mov	r0, r3
 8007224:	f002 fa16 	bl	8009654 <RDSTATB>
			RDSTATB(sideB_statusB, SIDE_B);
 8007228:	463b      	mov	r3, r7
 800722a:	2100      	movs	r1, #0
 800722c:	4618      	mov	r0, r3
 800722e:	f002 fa11 	bl	8009654 <RDSTATB>

			sideA_statusB_PECflag = verify_PEC15(sideA_statusB);
 8007232:	f107 0308 	add.w	r3, r7, #8
 8007236:	4618      	mov	r0, r3
 8007238:	f001 ff67 	bl	800910a <verify_PEC15>
 800723c:	4603      	mov	r3, r0
 800723e:	74fb      	strb	r3, [r7, #19]
			sideB_statusB_PECflag = verify_PEC15(sideB_statusB);
 8007240:	463b      	mov	r3, r7
 8007242:	4618      	mov	r0, r3
 8007244:	f001 ff61 	bl	800910a <verify_PEC15>
 8007248:	4603      	mov	r3, r0
 800724a:	74bb      	strb	r3, [r7, #18]

			if(sideA_statusB_PECflag == 2) { sideA_subAttempts = 13; }
 800724c:	7cfb      	ldrb	r3, [r7, #19]
 800724e:	2b02      	cmp	r3, #2
 8007250:	d102      	bne.n	8007258 <mux_test+0x80>
 8007252:	230d      	movs	r3, #13
 8007254:	757b      	strb	r3, [r7, #21]
 8007256:	e005      	b.n	8007264 <mux_test+0x8c>

			else {
				sideA_subAttempts++;
 8007258:	7d7b      	ldrb	r3, [r7, #21]
 800725a:	3301      	adds	r3, #1
 800725c:	757b      	strb	r3, [r7, #21]
				wait(1);
 800725e:	2001      	movs	r0, #1
 8007260:	f003 fad0 	bl	800a804 <wait>
			}

			if(sideB_statusB_PECflag == 2) { sideB_subAttempts = 13; }
 8007264:	7cbb      	ldrb	r3, [r7, #18]
 8007266:	2b02      	cmp	r3, #2
 8007268:	d102      	bne.n	8007270 <mux_test+0x98>
 800726a:	230d      	movs	r3, #13
 800726c:	753b      	strb	r3, [r7, #20]
 800726e:	e005      	b.n	800727c <mux_test+0xa4>

			else {
				sideB_subAttempts++;
 8007270:	7d3b      	ldrb	r3, [r7, #20]
 8007272:	3301      	adds	r3, #1
 8007274:	753b      	strb	r3, [r7, #20]
				wait(1);
 8007276:	2001      	movs	r0, #1
 8007278:	f003 fac4 	bl	800a804 <wait>
		while(sideA_subAttempts < ATTEMPT_LIMIT || sideB_subAttempts < ATTEMPT_LIMIT) {
 800727c:	7d7b      	ldrb	r3, [r7, #21]
 800727e:	2b09      	cmp	r3, #9
 8007280:	d9ba      	bls.n	80071f8 <mux_test+0x20>
 8007282:	7d3b      	ldrb	r3, [r7, #20]
 8007284:	2b09      	cmp	r3, #9
 8007286:	d9b7      	bls.n	80071f8 <mux_test+0x20>
			}
		}
		if(sideA_subAttempts != 13) { error_loop(ERROR_PEC, 0, 0, SIDE_A); }
 8007288:	7d7b      	ldrb	r3, [r7, #21]
 800728a:	2b0d      	cmp	r3, #13
 800728c:	d005      	beq.n	800729a <mux_test+0xc2>
 800728e:	2301      	movs	r3, #1
 8007290:	2200      	movs	r2, #0
 8007292:	2100      	movs	r1, #0
 8007294:	2056      	movs	r0, #86	@ 0x56
 8007296:	f7fd fdaf 	bl	8004df8 <error_loop>

		if(sideB_subAttempts != 13) { error_loop(ERROR_PEC, 0, 0, SIDE_B); }
 800729a:	7d3b      	ldrb	r3, [r7, #20]
 800729c:	2b0d      	cmp	r3, #13
 800729e:	d005      	beq.n	80072ac <mux_test+0xd4>
 80072a0:	2300      	movs	r3, #0
 80072a2:	2200      	movs	r2, #0
 80072a4:	2100      	movs	r1, #0
 80072a6:	2056      	movs	r0, #86	@ 0x56
 80072a8:	f7fd fda6 	bl	8004df8 <error_loop>

		sideA_muxFailBit = (sideA_statusB[5] >> 1) & 0x01;
 80072ac:	7b7b      	ldrb	r3, [r7, #13]
 80072ae:	085b      	lsrs	r3, r3, #1
 80072b0:	b2db      	uxtb	r3, r3
 80072b2:	f003 0301 	and.w	r3, r3, #1
 80072b6:	747b      	strb	r3, [r7, #17]
		sideB_muxFailBit = (sideB_statusB[5] >> 1) & 0x01;
 80072b8:	797b      	ldrb	r3, [r7, #5]
 80072ba:	085b      	lsrs	r3, r3, #1
 80072bc:	b2db      	uxtb	r3, r3
 80072be:	f003 0301 	and.w	r3, r3, #1
 80072c2:	743b      	strb	r3, [r7, #16]

		if(sideA_muxFailBit == 0) { sideA_attempts = 13; }
 80072c4:	7c7b      	ldrb	r3, [r7, #17]
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d102      	bne.n	80072d0 <mux_test+0xf8>
 80072ca:	230d      	movs	r3, #13
 80072cc:	75fb      	strb	r3, [r7, #23]
 80072ce:	e009      	b.n	80072e4 <mux_test+0x10c>

		else {
			sideA_attempts++;
 80072d0:	7dfb      	ldrb	r3, [r7, #23]
 80072d2:	3301      	adds	r3, #1
 80072d4:	75fb      	strb	r3, [r7, #23]
			sideA_subAttempts = 0;
 80072d6:	2300      	movs	r3, #0
 80072d8:	757b      	strb	r3, [r7, #21]
			sideB_subAttempts = 0;
 80072da:	2300      	movs	r3, #0
 80072dc:	753b      	strb	r3, [r7, #20]
			wait(1);
 80072de:	2001      	movs	r0, #1
 80072e0:	f003 fa90 	bl	800a804 <wait>
		}

		if(sideB_muxFailBit == 0) { sideB_attempts = 13; }
 80072e4:	7c3b      	ldrb	r3, [r7, #16]
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d102      	bne.n	80072f0 <mux_test+0x118>
 80072ea:	230d      	movs	r3, #13
 80072ec:	75bb      	strb	r3, [r7, #22]
 80072ee:	e009      	b.n	8007304 <mux_test+0x12c>

		else {
			sideB_attempts++;
 80072f0:	7dbb      	ldrb	r3, [r7, #22]
 80072f2:	3301      	adds	r3, #1
 80072f4:	75bb      	strb	r3, [r7, #22]
			sideA_subAttempts = 0;
 80072f6:	2300      	movs	r3, #0
 80072f8:	757b      	strb	r3, [r7, #21]
			sideB_subAttempts = 0;
 80072fa:	2300      	movs	r3, #0
 80072fc:	753b      	strb	r3, [r7, #20]
			wait(1);
 80072fe:	2001      	movs	r0, #1
 8007300:	f003 fa80 	bl	800a804 <wait>
	while(sideA_attempts < ATTEMPT_LIMIT || sideB_attempts < ATTEMPT_LIMIT) {
 8007304:	7dfb      	ldrb	r3, [r7, #23]
 8007306:	2b09      	cmp	r3, #9
 8007308:	d9b8      	bls.n	800727c <mux_test+0xa4>
 800730a:	7dbb      	ldrb	r3, [r7, #22]
 800730c:	2b09      	cmp	r3, #9
 800730e:	d9b5      	bls.n	800727c <mux_test+0xa4>
		}
	}
	if(sideA_attempts != 13) { error_loop(ERROR_DIAGN, 0, 0, SIDE_A); }
 8007310:	7dfb      	ldrb	r3, [r7, #23]
 8007312:	2b0d      	cmp	r3, #13
 8007314:	d005      	beq.n	8007322 <mux_test+0x14a>
 8007316:	2301      	movs	r3, #1
 8007318:	2200      	movs	r2, #0
 800731a:	2100      	movs	r1, #0
 800731c:	204a      	movs	r0, #74	@ 0x4a
 800731e:	f7fd fd6b 	bl	8004df8 <error_loop>

	if(sideB_attempts != 13) { error_loop(ERROR_DIAGN, 0, 0, SIDE_B); }
 8007322:	7dbb      	ldrb	r3, [r7, #22]
 8007324:	2b0d      	cmp	r3, #13
 8007326:	d005      	beq.n	8007334 <mux_test+0x15c>
 8007328:	2300      	movs	r3, #0
 800732a:	2200      	movs	r2, #0
 800732c:	2100      	movs	r1, #0
 800732e:	204a      	movs	r0, #74	@ 0x4a
 8007330:	f7fd fd62 	bl	8004df8 <error_loop>
}
 8007334:	bf00      	nop
 8007336:	3718      	adds	r7, #24
 8007338:	46bd      	mov	sp, r7
 800733a:	bd80      	pop	{r7, pc}

0800733c <stat_register_test>:


void stat_register_test(void)
{
 800733c:	b580      	push	{r7, lr}
 800733e:	b090      	sub	sp, #64	@ 0x40
 8007340:	af00      	add	r7, sp, #0
	uint8_t sideA_attempts = 0;
 8007342:	2300      	movs	r3, #0
 8007344:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	uint8_t sideB_attempts = 0;
 8007348:	2300      	movs	r3, #0
 800734a:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
	uint8_t sideA_subAttempts = 0;
 800734e:	2300      	movs	r3, #0
 8007350:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
	uint8_t sideB_subAttempts = 0;
 8007354:	2300      	movs	r3, #0
 8007356:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c

	uint8_t sideB_statA_PECflag;
	uint8_t sideB_statB_PECflag;

	// Test with first variant of STATST command
	while(sideA_attempts < ATTEMPT_LIMIT || sideB_attempts < ATTEMPT_LIMIT) {
 800735a:	e13b      	b.n	80075d4 <stat_register_test+0x298>
		while(sideA_subAttempts < ATTEMPT_LIMIT || sideB_subAttempts < ATTEMPT_LIMIT) {
			CLRSTAT(SIDE_A);
 800735c:	2001      	movs	r0, #1
 800735e:	f002 fbdb 	bl	8009b18 <CLRSTAT>
			CLRSTAT(SIDE_B);
 8007362:	2000      	movs	r0, #0
 8007364:	f002 fbd8 	bl	8009b18 <CLRSTAT>
			wait(3);
 8007368:	2003      	movs	r0, #3
 800736a:	f003 fa4b 	bl	800a804 <wait>

			STATST(1, SIDE_A);
 800736e:	2101      	movs	r1, #1
 8007370:	2001      	movs	r0, #1
 8007372:	f002 faf4 	bl	800995e <STATST>
			STATST(1, SIDE_B);
 8007376:	2100      	movs	r1, #0
 8007378:	2001      	movs	r0, #1
 800737a:	f002 faf0 	bl	800995e <STATST>
			wait(3);
 800737e:	2003      	movs	r0, #3
 8007380:	f003 fa40 	bl	800a804 <wait>

			RDSTATA(sideA_statA, SIDE_A);
 8007384:	f107 0318 	add.w	r3, r7, #24
 8007388:	2101      	movs	r1, #1
 800738a:	4618      	mov	r0, r3
 800738c:	f002 f93e 	bl	800960c <RDSTATA>
			RDSTATA(sideB_statA, SIDE_B);
 8007390:	f107 0308 	add.w	r3, r7, #8
 8007394:	2100      	movs	r1, #0
 8007396:	4618      	mov	r0, r3
 8007398:	f002 f938 	bl	800960c <RDSTATA>
			wait(1);
 800739c:	2001      	movs	r0, #1
 800739e:	f003 fa31 	bl	800a804 <wait>
			RDSTATB(sideA_statB, SIDE_A);
 80073a2:	f107 0310 	add.w	r3, r7, #16
 80073a6:	2101      	movs	r1, #1
 80073a8:	4618      	mov	r0, r3
 80073aa:	f002 f953 	bl	8009654 <RDSTATB>
			RDSTATB(sideB_statB, SIDE_B);
 80073ae:	463b      	mov	r3, r7
 80073b0:	2100      	movs	r1, #0
 80073b2:	4618      	mov	r0, r3
 80073b4:	f002 f94e 	bl	8009654 <RDSTATB>

			sideA_statA_PECflag = verify_PEC15(sideA_statA);
 80073b8:	f107 0318 	add.w	r3, r7, #24
 80073bc:	4618      	mov	r0, r3
 80073be:	f001 fea4 	bl	800910a <verify_PEC15>
 80073c2:	4603      	mov	r3, r0
 80073c4:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
			sideB_statA_PECflag = verify_PEC15(sideB_statA);
 80073c8:	f107 0308 	add.w	r3, r7, #8
 80073cc:	4618      	mov	r0, r3
 80073ce:	f001 fe9c 	bl	800910a <verify_PEC15>
 80073d2:	4603      	mov	r3, r0
 80073d4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

			sideA_statB_PECflag = verify_PEC15(sideA_statB);
 80073d8:	f107 0310 	add.w	r3, r7, #16
 80073dc:	4618      	mov	r0, r3
 80073de:	f001 fe94 	bl	800910a <verify_PEC15>
 80073e2:	4603      	mov	r3, r0
 80073e4:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
			sideB_statB_PECflag = verify_PEC15(sideB_statB);
 80073e8:	463b      	mov	r3, r7
 80073ea:	4618      	mov	r0, r3
 80073ec:	f001 fe8d 	bl	800910a <verify_PEC15>
 80073f0:	4603      	mov	r3, r0
 80073f2:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31

			if(sideA_statA_PECflag == 2 && sideA_statB_PECflag == 2) { sideA_subAttempts = 13; }
 80073f6:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 80073fa:	2b02      	cmp	r3, #2
 80073fc:	d107      	bne.n	800740e <stat_register_test+0xd2>
 80073fe:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8007402:	2b02      	cmp	r3, #2
 8007404:	d103      	bne.n	800740e <stat_register_test+0xd2>
 8007406:	230d      	movs	r3, #13
 8007408:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
 800740c:	e007      	b.n	800741e <stat_register_test+0xe2>

			else {
				sideA_subAttempts++;
 800740e:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 8007412:	3301      	adds	r3, #1
 8007414:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
				wait(1);
 8007418:	2001      	movs	r0, #1
 800741a:	f003 f9f3 	bl	800a804 <wait>
			}

			if(sideB_statA_PECflag == 2 && sideB_statB_PECflag == 2) { sideB_subAttempts = 13; }
 800741e:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8007422:	2b02      	cmp	r3, #2
 8007424:	d107      	bne.n	8007436 <stat_register_test+0xfa>
 8007426:	f897 3031 	ldrb.w	r3, [r7, #49]	@ 0x31
 800742a:	2b02      	cmp	r3, #2
 800742c:	d103      	bne.n	8007436 <stat_register_test+0xfa>
 800742e:	230d      	movs	r3, #13
 8007430:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
 8007434:	e007      	b.n	8007446 <stat_register_test+0x10a>

			else {
				sideB_subAttempts++;
 8007436:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 800743a:	3301      	adds	r3, #1
 800743c:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
				wait(1);
 8007440:	2001      	movs	r0, #1
 8007442:	f003 f9df 	bl	800a804 <wait>
		while(sideA_subAttempts < ATTEMPT_LIMIT || sideB_subAttempts < ATTEMPT_LIMIT) {
 8007446:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 800744a:	2b09      	cmp	r3, #9
 800744c:	d986      	bls.n	800735c <stat_register_test+0x20>
 800744e:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 8007452:	2b09      	cmp	r3, #9
 8007454:	d982      	bls.n	800735c <stat_register_test+0x20>
			}
		}
		if(sideA_subAttempts != 13) { error_loop(ERROR_PEC, 0, 0, SIDE_A); }
 8007456:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 800745a:	2b0d      	cmp	r3, #13
 800745c:	d005      	beq.n	800746a <stat_register_test+0x12e>
 800745e:	2301      	movs	r3, #1
 8007460:	2200      	movs	r2, #0
 8007462:	2100      	movs	r1, #0
 8007464:	2056      	movs	r0, #86	@ 0x56
 8007466:	f7fd fcc7 	bl	8004df8 <error_loop>

		if(sideB_subAttempts != 13) { error_loop(ERROR_PEC, 0, 0, SIDE_B); }
 800746a:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 800746e:	2b0d      	cmp	r3, #13
 8007470:	d005      	beq.n	800747e <stat_register_test+0x142>
 8007472:	2300      	movs	r3, #0
 8007474:	2200      	movs	r2, #0
 8007476:	2100      	movs	r1, #0
 8007478:	2056      	movs	r0, #86	@ 0x56
 800747a:	f7fd fcbd 	bl	8004df8 <error_loop>

		sideA_statContents[0] = (sideA_statA[1] << 8) | sideA_statA[0];			// SC value
 800747e:	7e7b      	ldrb	r3, [r7, #25]
 8007480:	b21b      	sxth	r3, r3
 8007482:	021b      	lsls	r3, r3, #8
 8007484:	b21a      	sxth	r2, r3
 8007486:	7e3b      	ldrb	r3, [r7, #24]
 8007488:	b21b      	sxth	r3, r3
 800748a:	4313      	orrs	r3, r2
 800748c:	b21b      	sxth	r3, r3
 800748e:	b29b      	uxth	r3, r3
 8007490:	853b      	strh	r3, [r7, #40]	@ 0x28
		sideA_statContents[1] = (sideA_statA[3] << 8) | sideA_statA[2];			// ITMP value
 8007492:	7efb      	ldrb	r3, [r7, #27]
 8007494:	b21b      	sxth	r3, r3
 8007496:	021b      	lsls	r3, r3, #8
 8007498:	b21a      	sxth	r2, r3
 800749a:	7ebb      	ldrb	r3, [r7, #26]
 800749c:	b21b      	sxth	r3, r3
 800749e:	4313      	orrs	r3, r2
 80074a0:	b21b      	sxth	r3, r3
 80074a2:	b29b      	uxth	r3, r3
 80074a4:	857b      	strh	r3, [r7, #42]	@ 0x2a
		sideA_statContents[2] = (sideA_statA[5] << 8) | sideA_statA[4];			// VA value
 80074a6:	7f7b      	ldrb	r3, [r7, #29]
 80074a8:	b21b      	sxth	r3, r3
 80074aa:	021b      	lsls	r3, r3, #8
 80074ac:	b21a      	sxth	r2, r3
 80074ae:	7f3b      	ldrb	r3, [r7, #28]
 80074b0:	b21b      	sxth	r3, r3
 80074b2:	4313      	orrs	r3, r2
 80074b4:	b21b      	sxth	r3, r3
 80074b6:	b29b      	uxth	r3, r3
 80074b8:	85bb      	strh	r3, [r7, #44]	@ 0x2c
		sideA_statContents[3] = (sideA_statB[1] << 8) | sideA_statB[0];			// VD value
 80074ba:	7c7b      	ldrb	r3, [r7, #17]
 80074bc:	b21b      	sxth	r3, r3
 80074be:	021b      	lsls	r3, r3, #8
 80074c0:	b21a      	sxth	r2, r3
 80074c2:	7c3b      	ldrb	r3, [r7, #16]
 80074c4:	b21b      	sxth	r3, r3
 80074c6:	4313      	orrs	r3, r2
 80074c8:	b21b      	sxth	r3, r3
 80074ca:	b29b      	uxth	r3, r3
 80074cc:	85fb      	strh	r3, [r7, #46]	@ 0x2e

		sideB_statContents[0] = (sideB_statA[1] << 8) | sideB_statA[0];			// SC value
 80074ce:	7a7b      	ldrb	r3, [r7, #9]
 80074d0:	b21b      	sxth	r3, r3
 80074d2:	021b      	lsls	r3, r3, #8
 80074d4:	b21a      	sxth	r2, r3
 80074d6:	7a3b      	ldrb	r3, [r7, #8]
 80074d8:	b21b      	sxth	r3, r3
 80074da:	4313      	orrs	r3, r2
 80074dc:	b21b      	sxth	r3, r3
 80074de:	b29b      	uxth	r3, r3
 80074e0:	843b      	strh	r3, [r7, #32]
		sideB_statContents[1] = (sideB_statA[3] << 8) | sideB_statA[2];			// ITMP value
 80074e2:	7afb      	ldrb	r3, [r7, #11]
 80074e4:	b21b      	sxth	r3, r3
 80074e6:	021b      	lsls	r3, r3, #8
 80074e8:	b21a      	sxth	r2, r3
 80074ea:	7abb      	ldrb	r3, [r7, #10]
 80074ec:	b21b      	sxth	r3, r3
 80074ee:	4313      	orrs	r3, r2
 80074f0:	b21b      	sxth	r3, r3
 80074f2:	b29b      	uxth	r3, r3
 80074f4:	847b      	strh	r3, [r7, #34]	@ 0x22
		sideB_statContents[2] = (sideB_statA[5] << 8) | sideB_statA[4];			// VA value
 80074f6:	7b7b      	ldrb	r3, [r7, #13]
 80074f8:	b21b      	sxth	r3, r3
 80074fa:	021b      	lsls	r3, r3, #8
 80074fc:	b21a      	sxth	r2, r3
 80074fe:	7b3b      	ldrb	r3, [r7, #12]
 8007500:	b21b      	sxth	r3, r3
 8007502:	4313      	orrs	r3, r2
 8007504:	b21b      	sxth	r3, r3
 8007506:	b29b      	uxth	r3, r3
 8007508:	84bb      	strh	r3, [r7, #36]	@ 0x24
		sideB_statContents[3] = (sideB_statB[1] << 8) | sideB_statB[0];			// VD value
 800750a:	787b      	ldrb	r3, [r7, #1]
 800750c:	b21b      	sxth	r3, r3
 800750e:	021b      	lsls	r3, r3, #8
 8007510:	b21a      	sxth	r2, r3
 8007512:	783b      	ldrb	r3, [r7, #0]
 8007514:	b21b      	sxth	r3, r3
 8007516:	4313      	orrs	r3, r2
 8007518:	b21b      	sxth	r3, r3
 800751a:	b29b      	uxth	r3, r3
 800751c:	84fb      	strh	r3, [r7, #38]	@ 0x26

		uint8_t sideA_badOutputFlag = 0;
 800751e:	2300      	movs	r3, #0
 8007520:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
		uint8_t sideB_badOutputFlag = 0;
 8007524:	2300      	movs	r3, #0
 8007526:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a

		for(uint8_t i = 0; i < 4; i++) {
 800752a:	2300      	movs	r3, #0
 800752c:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
 8007530:	e020      	b.n	8007574 <stat_register_test+0x238>
			if(sideA_statContents[i] != 0x9555) { sideA_badOutputFlag = 1; }
 8007532:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8007536:	005b      	lsls	r3, r3, #1
 8007538:	3340      	adds	r3, #64	@ 0x40
 800753a:	443b      	add	r3, r7
 800753c:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8007540:	f249 5255 	movw	r2, #38229	@ 0x9555
 8007544:	4293      	cmp	r3, r2
 8007546:	d002      	beq.n	800754e <stat_register_test+0x212>
 8007548:	2301      	movs	r3, #1
 800754a:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b

			if(sideB_statContents[i] != 0x9555) { sideB_badOutputFlag = 1; }
 800754e:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8007552:	005b      	lsls	r3, r3, #1
 8007554:	3340      	adds	r3, #64	@ 0x40
 8007556:	443b      	add	r3, r7
 8007558:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 800755c:	f249 5255 	movw	r2, #38229	@ 0x9555
 8007560:	4293      	cmp	r3, r2
 8007562:	d002      	beq.n	800756a <stat_register_test+0x22e>
 8007564:	2301      	movs	r3, #1
 8007566:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
		for(uint8_t i = 0; i < 4; i++) {
 800756a:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 800756e:	3301      	adds	r3, #1
 8007570:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
 8007574:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8007578:	2b03      	cmp	r3, #3
 800757a:	d9da      	bls.n	8007532 <stat_register_test+0x1f6>
		}

		if(!sideA_badOutputFlag) { sideA_attempts = 13; }
 800757c:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8007580:	2b00      	cmp	r3, #0
 8007582:	d103      	bne.n	800758c <stat_register_test+0x250>
 8007584:	230d      	movs	r3, #13
 8007586:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800758a:	e00d      	b.n	80075a8 <stat_register_test+0x26c>

		else {
			sideA_attempts++;
 800758c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8007590:	3301      	adds	r3, #1
 8007592:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
			sideA_subAttempts = 0;
 8007596:	2300      	movs	r3, #0
 8007598:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
			sideB_subAttempts = 0;
 800759c:	2300      	movs	r3, #0
 800759e:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
			wait(1);
 80075a2:	2001      	movs	r0, #1
 80075a4:	f003 f92e 	bl	800a804 <wait>
		}

		if(!sideB_badOutputFlag) { sideB_attempts = 13; }
 80075a8:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d103      	bne.n	80075b8 <stat_register_test+0x27c>
 80075b0:	230d      	movs	r3, #13
 80075b2:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
 80075b6:	e00d      	b.n	80075d4 <stat_register_test+0x298>

		else {
			sideB_attempts++;
 80075b8:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 80075bc:	3301      	adds	r3, #1
 80075be:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
			sideA_subAttempts = 0;
 80075c2:	2300      	movs	r3, #0
 80075c4:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
			sideB_subAttempts = 0;
 80075c8:	2300      	movs	r3, #0
 80075ca:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
			wait(1);
 80075ce:	2001      	movs	r0, #1
 80075d0:	f003 f918 	bl	800a804 <wait>
	while(sideA_attempts < ATTEMPT_LIMIT || sideB_attempts < ATTEMPT_LIMIT) {
 80075d4:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80075d8:	2b09      	cmp	r3, #9
 80075da:	f67f af34 	bls.w	8007446 <stat_register_test+0x10a>
 80075de:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 80075e2:	2b09      	cmp	r3, #9
 80075e4:	f67f af2f 	bls.w	8007446 <stat_register_test+0x10a>
		}
	}
	if(sideA_attempts != 13) { error_loop(ERROR_STATST, 0, 0, SIDE_A); }
 80075e8:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80075ec:	2b0d      	cmp	r3, #13
 80075ee:	d005      	beq.n	80075fc <stat_register_test+0x2c0>
 80075f0:	2301      	movs	r3, #1
 80075f2:	2200      	movs	r2, #0
 80075f4:	2100      	movs	r1, #0
 80075f6:	204d      	movs	r0, #77	@ 0x4d
 80075f8:	f7fd fbfe 	bl	8004df8 <error_loop>

	if(sideB_attempts != 13) { error_loop(ERROR_STATST, 0, 0, SIDE_B); }
 80075fc:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8007600:	2b0d      	cmp	r3, #13
 8007602:	d005      	beq.n	8007610 <stat_register_test+0x2d4>
 8007604:	2300      	movs	r3, #0
 8007606:	2200      	movs	r2, #0
 8007608:	2100      	movs	r1, #0
 800760a:	204d      	movs	r0, #77	@ 0x4d
 800760c:	f7fd fbf4 	bl	8004df8 <error_loop>

	// Test with second variant of STATST command
	sideA_attempts = 0;
 8007610:	2300      	movs	r3, #0
 8007612:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	sideB_attempts = 0;
 8007616:	2300      	movs	r3, #0
 8007618:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
	sideA_subAttempts = 0;
 800761c:	2300      	movs	r3, #0
 800761e:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
	sideB_subAttempts = 0;
 8007622:	2300      	movs	r3, #0
 8007624:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
	while(sideA_attempts < ATTEMPT_LIMIT || sideB_attempts < ATTEMPT_LIMIT) {
 8007628:	e13e      	b.n	80078a8 <stat_register_test+0x56c>
		while(sideA_subAttempts < ATTEMPT_LIMIT || sideB_subAttempts < ATTEMPT_LIMIT) {
			CLRSTAT(SIDE_A);
 800762a:	2001      	movs	r0, #1
 800762c:	f002 fa74 	bl	8009b18 <CLRSTAT>
			CLRSTAT(SIDE_B);
 8007630:	2000      	movs	r0, #0
 8007632:	f002 fa71 	bl	8009b18 <CLRSTAT>
			wait(3);
 8007636:	2003      	movs	r0, #3
 8007638:	f003 f8e4 	bl	800a804 <wait>

			STATST(0, SIDE_A);
 800763c:	2101      	movs	r1, #1
 800763e:	2000      	movs	r0, #0
 8007640:	f002 f98d 	bl	800995e <STATST>
			STATST(0, SIDE_B);
 8007644:	2100      	movs	r1, #0
 8007646:	2000      	movs	r0, #0
 8007648:	f002 f989 	bl	800995e <STATST>
			wait(3);
 800764c:	2003      	movs	r0, #3
 800764e:	f003 f8d9 	bl	800a804 <wait>

			RDSTATA(sideA_statA, SIDE_A);
 8007652:	f107 0318 	add.w	r3, r7, #24
 8007656:	2101      	movs	r1, #1
 8007658:	4618      	mov	r0, r3
 800765a:	f001 ffd7 	bl	800960c <RDSTATA>
			RDSTATA(sideB_statA, SIDE_B);
 800765e:	f107 0308 	add.w	r3, r7, #8
 8007662:	2100      	movs	r1, #0
 8007664:	4618      	mov	r0, r3
 8007666:	f001 ffd1 	bl	800960c <RDSTATA>
			wait(1);
 800766a:	2001      	movs	r0, #1
 800766c:	f003 f8ca 	bl	800a804 <wait>
			RDSTATB(sideA_statB, SIDE_A);
 8007670:	f107 0310 	add.w	r3, r7, #16
 8007674:	2101      	movs	r1, #1
 8007676:	4618      	mov	r0, r3
 8007678:	f001 ffec 	bl	8009654 <RDSTATB>
			RDSTATB(sideB_statB, SIDE_B);
 800767c:	463b      	mov	r3, r7
 800767e:	2100      	movs	r1, #0
 8007680:	4618      	mov	r0, r3
 8007682:	f001 ffe7 	bl	8009654 <RDSTATB>

			sideA_statA_PECflag = verify_PEC15(sideA_statA);
 8007686:	f107 0318 	add.w	r3, r7, #24
 800768a:	4618      	mov	r0, r3
 800768c:	f001 fd3d 	bl	800910a <verify_PEC15>
 8007690:	4603      	mov	r3, r0
 8007692:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
			sideB_statA_PECflag = verify_PEC15(sideB_statA);
 8007696:	f107 0308 	add.w	r3, r7, #8
 800769a:	4618      	mov	r0, r3
 800769c:	f001 fd35 	bl	800910a <verify_PEC15>
 80076a0:	4603      	mov	r3, r0
 80076a2:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

			sideA_statB_PECflag = verify_PEC15(sideA_statB);
 80076a6:	f107 0310 	add.w	r3, r7, #16
 80076aa:	4618      	mov	r0, r3
 80076ac:	f001 fd2d 	bl	800910a <verify_PEC15>
 80076b0:	4603      	mov	r3, r0
 80076b2:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
			sideB_statB_PECflag = verify_PEC15(sideB_statB);
 80076b6:	463b      	mov	r3, r7
 80076b8:	4618      	mov	r0, r3
 80076ba:	f001 fd26 	bl	800910a <verify_PEC15>
 80076be:	4603      	mov	r3, r0
 80076c0:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31

			if(sideA_statA_PECflag == 2 && sideA_statB_PECflag == 2) { sideA_subAttempts = 13; }
 80076c4:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 80076c8:	2b02      	cmp	r3, #2
 80076ca:	d107      	bne.n	80076dc <stat_register_test+0x3a0>
 80076cc:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 80076d0:	2b02      	cmp	r3, #2
 80076d2:	d103      	bne.n	80076dc <stat_register_test+0x3a0>
 80076d4:	230d      	movs	r3, #13
 80076d6:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
 80076da:	e007      	b.n	80076ec <stat_register_test+0x3b0>

			else {
				sideA_subAttempts++;
 80076dc:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 80076e0:	3301      	adds	r3, #1
 80076e2:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
				wait(1);
 80076e6:	2001      	movs	r0, #1
 80076e8:	f003 f88c 	bl	800a804 <wait>
			}

			if(sideB_statA_PECflag == 2 && sideB_statB_PECflag == 2) { sideB_subAttempts = 13; }
 80076ec:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80076f0:	2b02      	cmp	r3, #2
 80076f2:	d107      	bne.n	8007704 <stat_register_test+0x3c8>
 80076f4:	f897 3031 	ldrb.w	r3, [r7, #49]	@ 0x31
 80076f8:	2b02      	cmp	r3, #2
 80076fa:	d103      	bne.n	8007704 <stat_register_test+0x3c8>
 80076fc:	230d      	movs	r3, #13
 80076fe:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
 8007702:	e007      	b.n	8007714 <stat_register_test+0x3d8>

			else {
				sideB_subAttempts++;
 8007704:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 8007708:	3301      	adds	r3, #1
 800770a:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
				wait(1);
 800770e:	2001      	movs	r0, #1
 8007710:	f003 f878 	bl	800a804 <wait>
		while(sideA_subAttempts < ATTEMPT_LIMIT || sideB_subAttempts < ATTEMPT_LIMIT) {
 8007714:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 8007718:	2b09      	cmp	r3, #9
 800771a:	d986      	bls.n	800762a <stat_register_test+0x2ee>
 800771c:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 8007720:	2b09      	cmp	r3, #9
 8007722:	d982      	bls.n	800762a <stat_register_test+0x2ee>
			}
		}
		if(sideA_subAttempts != 13) { error_loop(ERROR_PEC, 0, 0, SIDE_A); }
 8007724:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 8007728:	2b0d      	cmp	r3, #13
 800772a:	d005      	beq.n	8007738 <stat_register_test+0x3fc>
 800772c:	2301      	movs	r3, #1
 800772e:	2200      	movs	r2, #0
 8007730:	2100      	movs	r1, #0
 8007732:	2056      	movs	r0, #86	@ 0x56
 8007734:	f7fd fb60 	bl	8004df8 <error_loop>

		if(sideB_subAttempts != 13) { error_loop(ERROR_PEC, 0, 0, SIDE_B); }
 8007738:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 800773c:	2b0d      	cmp	r3, #13
 800773e:	d005      	beq.n	800774c <stat_register_test+0x410>
 8007740:	2300      	movs	r3, #0
 8007742:	2200      	movs	r2, #0
 8007744:	2100      	movs	r1, #0
 8007746:	2056      	movs	r0, #86	@ 0x56
 8007748:	f7fd fb56 	bl	8004df8 <error_loop>

		sideA_statContents[0] = (sideA_statA[1] << 8) | sideA_statA[0];			// SC value
 800774c:	7e7b      	ldrb	r3, [r7, #25]
 800774e:	b21b      	sxth	r3, r3
 8007750:	021b      	lsls	r3, r3, #8
 8007752:	b21a      	sxth	r2, r3
 8007754:	7e3b      	ldrb	r3, [r7, #24]
 8007756:	b21b      	sxth	r3, r3
 8007758:	4313      	orrs	r3, r2
 800775a:	b21b      	sxth	r3, r3
 800775c:	b29b      	uxth	r3, r3
 800775e:	853b      	strh	r3, [r7, #40]	@ 0x28
		sideA_statContents[1] = (sideA_statA[3] << 8) | sideA_statA[2];			// ITMP value
 8007760:	7efb      	ldrb	r3, [r7, #27]
 8007762:	b21b      	sxth	r3, r3
 8007764:	021b      	lsls	r3, r3, #8
 8007766:	b21a      	sxth	r2, r3
 8007768:	7ebb      	ldrb	r3, [r7, #26]
 800776a:	b21b      	sxth	r3, r3
 800776c:	4313      	orrs	r3, r2
 800776e:	b21b      	sxth	r3, r3
 8007770:	b29b      	uxth	r3, r3
 8007772:	857b      	strh	r3, [r7, #42]	@ 0x2a
		sideA_statContents[2] = (sideA_statA[5] << 8) | sideA_statA[4];			// VA value
 8007774:	7f7b      	ldrb	r3, [r7, #29]
 8007776:	b21b      	sxth	r3, r3
 8007778:	021b      	lsls	r3, r3, #8
 800777a:	b21a      	sxth	r2, r3
 800777c:	7f3b      	ldrb	r3, [r7, #28]
 800777e:	b21b      	sxth	r3, r3
 8007780:	4313      	orrs	r3, r2
 8007782:	b21b      	sxth	r3, r3
 8007784:	b29b      	uxth	r3, r3
 8007786:	85bb      	strh	r3, [r7, #44]	@ 0x2c
		sideA_statContents[3] = (sideA_statB[1] << 8) | sideA_statB[0];			// VD value
 8007788:	7c7b      	ldrb	r3, [r7, #17]
 800778a:	b21b      	sxth	r3, r3
 800778c:	021b      	lsls	r3, r3, #8
 800778e:	b21a      	sxth	r2, r3
 8007790:	7c3b      	ldrb	r3, [r7, #16]
 8007792:	b21b      	sxth	r3, r3
 8007794:	4313      	orrs	r3, r2
 8007796:	b21b      	sxth	r3, r3
 8007798:	b29b      	uxth	r3, r3
 800779a:	85fb      	strh	r3, [r7, #46]	@ 0x2e

		sideB_statContents[0] = (sideB_statA[1] << 8) | sideB_statA[0];			// SC value
 800779c:	7a7b      	ldrb	r3, [r7, #9]
 800779e:	b21b      	sxth	r3, r3
 80077a0:	021b      	lsls	r3, r3, #8
 80077a2:	b21a      	sxth	r2, r3
 80077a4:	7a3b      	ldrb	r3, [r7, #8]
 80077a6:	b21b      	sxth	r3, r3
 80077a8:	4313      	orrs	r3, r2
 80077aa:	b21b      	sxth	r3, r3
 80077ac:	b29b      	uxth	r3, r3
 80077ae:	843b      	strh	r3, [r7, #32]
		sideB_statContents[1] = (sideB_statA[3] << 8) | sideB_statA[2];			// ITMP value
 80077b0:	7afb      	ldrb	r3, [r7, #11]
 80077b2:	b21b      	sxth	r3, r3
 80077b4:	021b      	lsls	r3, r3, #8
 80077b6:	b21a      	sxth	r2, r3
 80077b8:	7abb      	ldrb	r3, [r7, #10]
 80077ba:	b21b      	sxth	r3, r3
 80077bc:	4313      	orrs	r3, r2
 80077be:	b21b      	sxth	r3, r3
 80077c0:	b29b      	uxth	r3, r3
 80077c2:	847b      	strh	r3, [r7, #34]	@ 0x22
		sideB_statContents[2] = (sideB_statA[5] << 8) | sideB_statA[4];			// VA value
 80077c4:	7b7b      	ldrb	r3, [r7, #13]
 80077c6:	b21b      	sxth	r3, r3
 80077c8:	021b      	lsls	r3, r3, #8
 80077ca:	b21a      	sxth	r2, r3
 80077cc:	7b3b      	ldrb	r3, [r7, #12]
 80077ce:	b21b      	sxth	r3, r3
 80077d0:	4313      	orrs	r3, r2
 80077d2:	b21b      	sxth	r3, r3
 80077d4:	b29b      	uxth	r3, r3
 80077d6:	84bb      	strh	r3, [r7, #36]	@ 0x24
		sideB_statContents[3] = (sideB_statB[1] << 8) | sideB_statB[0];			// VD value
 80077d8:	787b      	ldrb	r3, [r7, #1]
 80077da:	b21b      	sxth	r3, r3
 80077dc:	021b      	lsls	r3, r3, #8
 80077de:	b21a      	sxth	r2, r3
 80077e0:	783b      	ldrb	r3, [r7, #0]
 80077e2:	b21b      	sxth	r3, r3
 80077e4:	4313      	orrs	r3, r2
 80077e6:	b21b      	sxth	r3, r3
 80077e8:	b29b      	uxth	r3, r3
 80077ea:	84fb      	strh	r3, [r7, #38]	@ 0x26

		uint8_t badOutputFlag = 0;
 80077ec:	2300      	movs	r3, #0
 80077ee:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
		uint8_t sideA_badOutputFlag = 0;
 80077f2:	2300      	movs	r3, #0
 80077f4:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
		uint8_t sideB_badOutputFlag = 0;
 80077f8:	2300      	movs	r3, #0
 80077fa:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

		for(uint8_t i = 0; i < 4; i++) {
 80077fe:	2300      	movs	r3, #0
 8007800:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
 8007804:	e020      	b.n	8007848 <stat_register_test+0x50c>
			if(sideA_statContents[i] != 0x6AAA) { sideA_badOutputFlag = 1; }
 8007806:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800780a:	005b      	lsls	r3, r3, #1
 800780c:	3340      	adds	r3, #64	@ 0x40
 800780e:	443b      	add	r3, r7
 8007810:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8007814:	f646 22aa 	movw	r2, #27306	@ 0x6aaa
 8007818:	4293      	cmp	r3, r2
 800781a:	d002      	beq.n	8007822 <stat_register_test+0x4e6>
 800781c:	2301      	movs	r3, #1
 800781e:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38

			if(sideB_statContents[i] != 0x6AAA) { sideB_badOutputFlag = 1; }
 8007822:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8007826:	005b      	lsls	r3, r3, #1
 8007828:	3340      	adds	r3, #64	@ 0x40
 800782a:	443b      	add	r3, r7
 800782c:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 8007830:	f646 22aa 	movw	r2, #27306	@ 0x6aaa
 8007834:	4293      	cmp	r3, r2
 8007836:	d002      	beq.n	800783e <stat_register_test+0x502>
 8007838:	2301      	movs	r3, #1
 800783a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		for(uint8_t i = 0; i < 4; i++) {
 800783e:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8007842:	3301      	adds	r3, #1
 8007844:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
 8007848:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800784c:	2b03      	cmp	r3, #3
 800784e:	d9da      	bls.n	8007806 <stat_register_test+0x4ca>
		}

		if(!sideA_badOutputFlag) { sideA_attempts = 13; }
 8007850:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 8007854:	2b00      	cmp	r3, #0
 8007856:	d103      	bne.n	8007860 <stat_register_test+0x524>
 8007858:	230d      	movs	r3, #13
 800785a:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800785e:	e00d      	b.n	800787c <stat_register_test+0x540>

		else {
			sideA_attempts++;
 8007860:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8007864:	3301      	adds	r3, #1
 8007866:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
			sideA_subAttempts = 0;
 800786a:	2300      	movs	r3, #0
 800786c:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
			sideB_subAttempts = 0;
 8007870:	2300      	movs	r3, #0
 8007872:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
			wait(1);
 8007876:	2001      	movs	r0, #1
 8007878:	f002 ffc4 	bl	800a804 <wait>
		}

		if(!sideB_badOutputFlag) { sideB_attempts = 13; }
 800787c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8007880:	2b00      	cmp	r3, #0
 8007882:	d103      	bne.n	800788c <stat_register_test+0x550>
 8007884:	230d      	movs	r3, #13
 8007886:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
 800788a:	e00d      	b.n	80078a8 <stat_register_test+0x56c>

		else {
			sideB_attempts++;
 800788c:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8007890:	3301      	adds	r3, #1
 8007892:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
			sideA_subAttempts = 0;
 8007896:	2300      	movs	r3, #0
 8007898:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
			sideB_subAttempts = 0;
 800789c:	2300      	movs	r3, #0
 800789e:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
			wait(1);
 80078a2:	2001      	movs	r0, #1
 80078a4:	f002 ffae 	bl	800a804 <wait>
	while(sideA_attempts < ATTEMPT_LIMIT || sideB_attempts < ATTEMPT_LIMIT) {
 80078a8:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80078ac:	2b09      	cmp	r3, #9
 80078ae:	f67f af31 	bls.w	8007714 <stat_register_test+0x3d8>
 80078b2:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 80078b6:	2b09      	cmp	r3, #9
 80078b8:	f67f af2c 	bls.w	8007714 <stat_register_test+0x3d8>
		}
	}
	if(sideA_attempts != 13) { error_loop(ERROR_STATST, 0, 0, SIDE_A); }
 80078bc:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80078c0:	2b0d      	cmp	r3, #13
 80078c2:	d005      	beq.n	80078d0 <stat_register_test+0x594>
 80078c4:	2301      	movs	r3, #1
 80078c6:	2200      	movs	r2, #0
 80078c8:	2100      	movs	r1, #0
 80078ca:	204d      	movs	r0, #77	@ 0x4d
 80078cc:	f7fd fa94 	bl	8004df8 <error_loop>

	if(sideB_attempts != 13) { error_loop(ERROR_STATST, 0, 0, SIDE_B); }
 80078d0:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 80078d4:	2b0d      	cmp	r3, #13
 80078d6:	d005      	beq.n	80078e4 <stat_register_test+0x5a8>
 80078d8:	2300      	movs	r3, #0
 80078da:	2200      	movs	r2, #0
 80078dc:	2100      	movs	r1, #0
 80078de:	204d      	movs	r0, #77	@ 0x4d
 80078e0:	f7fd fa8a 	bl	8004df8 <error_loop>
}
 80078e4:	bf00      	nop
 80078e6:	3740      	adds	r7, #64	@ 0x40
 80078e8:	46bd      	mov	sp, r7
 80078ea:	bd80      	pop	{r7, pc}

080078ec <cell_register_test>:


void cell_register_test(void)
{
 80078ec:	b580      	push	{r7, lr}
 80078ee:	b0a2      	sub	sp, #136	@ 0x88
 80078f0:	af00      	add	r7, sp, #0
	uint8_t sideA_attempts = 0;
 80078f2:	2300      	movs	r3, #0
 80078f4:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
	uint8_t sideB_attempts = 0;
 80078f8:	2300      	movs	r3, #0
 80078fa:	f887 3086 	strb.w	r3, [r7, #134]	@ 0x86
	uint8_t sideA_subAttempts = 0;
 80078fe:	2300      	movs	r3, #0
 8007900:	f887 3085 	strb.w	r3, [r7, #133]	@ 0x85
	uint8_t sideB_subAttempts = 0;
 8007904:	2300      	movs	r3, #0
 8007906:	f887 3084 	strb.w	r3, [r7, #132]	@ 0x84
	uint8_t sideB_cellVoltageB_PECflag;
	uint8_t sideB_cellVoltageC_PECflag;
	uint8_t sideB_cellVoltageD_PECflag;

	// Test with first variant of CVST command
	while(sideA_attempts < ATTEMPT_LIMIT || sideB_attempts < ATTEMPT_LIMIT) {
 800790a:	e25d      	b.n	8007dc8 <cell_register_test+0x4dc>
		while(sideA_subAttempts < ATTEMPT_LIMIT || sideB_subAttempts < ATTEMPT_LIMIT) {
			CLRCELL(SIDE_A);
 800790c:	2001      	movs	r0, #1
 800790e:	f002 f8bd 	bl	8009a8c <CLRCELL>
			CLRCELL(SIDE_B);
 8007912:	2000      	movs	r0, #0
 8007914:	f002 f8ba 	bl	8009a8c <CLRCELL>
			wait(3);
 8007918:	2003      	movs	r0, #3
 800791a:	f002 ff73 	bl	800a804 <wait>

			CVST(1, SIDE_A);
 800791e:	2101      	movs	r1, #1
 8007920:	2001      	movs	r0, #1
 8007922:	f001 ffc0 	bl	80098a6 <CVST>
			CVST(1, SIDE_B);
 8007926:	2100      	movs	r1, #0
 8007928:	2001      	movs	r0, #1
 800792a:	f001 ffbc 	bl	80098a6 <CVST>
			wait(3);
 800792e:	2003      	movs	r0, #3
 8007930:	f002 ff68 	bl	800a804 <wait>

			RDCVA(sideA_cellVoltageA, SIDE_A);
 8007934:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8007938:	2101      	movs	r1, #1
 800793a:	4618      	mov	r0, r3
 800793c:	f001 fdb2 	bl	80094a4 <RDCVA>
			RDCVA(sideB_cellVoltageA, SIDE_B);
 8007940:	f107 031c 	add.w	r3, r7, #28
 8007944:	2100      	movs	r1, #0
 8007946:	4618      	mov	r0, r3
 8007948:	f001 fdac 	bl	80094a4 <RDCVA>
			wait(1);
 800794c:	2001      	movs	r0, #1
 800794e:	f002 ff59 	bl	800a804 <wait>
			RDCVB(sideA_cellVoltageB, SIDE_A);
 8007952:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8007956:	2101      	movs	r1, #1
 8007958:	4618      	mov	r0, r3
 800795a:	f001 fdc7 	bl	80094ec <RDCVB>
			RDCVB(sideB_cellVoltageB, SIDE_B);
 800795e:	f107 0314 	add.w	r3, r7, #20
 8007962:	2100      	movs	r1, #0
 8007964:	4618      	mov	r0, r3
 8007966:	f001 fdc1 	bl	80094ec <RDCVB>
			wait(1);
 800796a:	2001      	movs	r0, #1
 800796c:	f002 ff4a 	bl	800a804 <wait>
			RDCVC(sideA_cellVoltageC, SIDE_A);
 8007970:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8007974:	2101      	movs	r1, #1
 8007976:	4618      	mov	r0, r3
 8007978:	f001 fddc 	bl	8009534 <RDCVC>
			RDCVC(sideB_cellVoltageC, SIDE_B);
 800797c:	f107 030c 	add.w	r3, r7, #12
 8007980:	2100      	movs	r1, #0
 8007982:	4618      	mov	r0, r3
 8007984:	f001 fdd6 	bl	8009534 <RDCVC>
			wait(1);
 8007988:	2001      	movs	r0, #1
 800798a:	f002 ff3b 	bl	800a804 <wait>
			RDCVD(sideA_cellVoltageD, SIDE_A);
 800798e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007992:	2101      	movs	r1, #1
 8007994:	4618      	mov	r0, r3
 8007996:	f001 fdf1 	bl	800957c <RDCVD>
			RDCVD(sideB_cellVoltageD, SIDE_B);
 800799a:	1d3b      	adds	r3, r7, #4
 800799c:	2100      	movs	r1, #0
 800799e:	4618      	mov	r0, r3
 80079a0:	f001 fdec 	bl	800957c <RDCVD>

			sideA_cellVoltageA_PECflag = verify_PEC15(sideA_cellVoltageA);
 80079a4:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80079a8:	4618      	mov	r0, r3
 80079aa:	f001 fbae 	bl	800910a <verify_PEC15>
 80079ae:	4603      	mov	r3, r0
 80079b0:	f887 307d 	strb.w	r3, [r7, #125]	@ 0x7d
			sideA_cellVoltageB_PECflag = verify_PEC15(sideA_cellVoltageB);
 80079b4:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80079b8:	4618      	mov	r0, r3
 80079ba:	f001 fba6 	bl	800910a <verify_PEC15>
 80079be:	4603      	mov	r3, r0
 80079c0:	f887 307c 	strb.w	r3, [r7, #124]	@ 0x7c
			sideA_cellVoltageC_PECflag = verify_PEC15(sideA_cellVoltageC);
 80079c4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80079c8:	4618      	mov	r0, r3
 80079ca:	f001 fb9e 	bl	800910a <verify_PEC15>
 80079ce:	4603      	mov	r3, r0
 80079d0:	f887 307b 	strb.w	r3, [r7, #123]	@ 0x7b
			sideA_cellVoltageD_PECflag = verify_PEC15(sideA_cellVoltageD);
 80079d4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80079d8:	4618      	mov	r0, r3
 80079da:	f001 fb96 	bl	800910a <verify_PEC15>
 80079de:	4603      	mov	r3, r0
 80079e0:	f887 307a 	strb.w	r3, [r7, #122]	@ 0x7a

			sideB_cellVoltageA_PECflag = verify_PEC15(sideB_cellVoltageA);
 80079e4:	f107 031c 	add.w	r3, r7, #28
 80079e8:	4618      	mov	r0, r3
 80079ea:	f001 fb8e 	bl	800910a <verify_PEC15>
 80079ee:	4603      	mov	r3, r0
 80079f0:	f887 3079 	strb.w	r3, [r7, #121]	@ 0x79
			sideB_cellVoltageB_PECflag = verify_PEC15(sideB_cellVoltageB);
 80079f4:	f107 0314 	add.w	r3, r7, #20
 80079f8:	4618      	mov	r0, r3
 80079fa:	f001 fb86 	bl	800910a <verify_PEC15>
 80079fe:	4603      	mov	r3, r0
 8007a00:	f887 3078 	strb.w	r3, [r7, #120]	@ 0x78
			sideB_cellVoltageC_PECflag = verify_PEC15(sideB_cellVoltageC);
 8007a04:	f107 030c 	add.w	r3, r7, #12
 8007a08:	4618      	mov	r0, r3
 8007a0a:	f001 fb7e 	bl	800910a <verify_PEC15>
 8007a0e:	4603      	mov	r3, r0
 8007a10:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
			sideB_cellVoltageD_PECflag = verify_PEC15(sideB_cellVoltageD);
 8007a14:	1d3b      	adds	r3, r7, #4
 8007a16:	4618      	mov	r0, r3
 8007a18:	f001 fb77 	bl	800910a <verify_PEC15>
 8007a1c:	4603      	mov	r3, r0
 8007a1e:	f887 3076 	strb.w	r3, [r7, #118]	@ 0x76

			if(sideA_cellVoltageA_PECflag == 2 &&
 8007a22:	f897 307d 	ldrb.w	r3, [r7, #125]	@ 0x7d
 8007a26:	2b02      	cmp	r3, #2
 8007a28:	d10f      	bne.n	8007a4a <cell_register_test+0x15e>
 8007a2a:	f897 307c 	ldrb.w	r3, [r7, #124]	@ 0x7c
 8007a2e:	2b02      	cmp	r3, #2
 8007a30:	d10b      	bne.n	8007a4a <cell_register_test+0x15e>
			   sideA_cellVoltageB_PECflag == 2 &&
 8007a32:	f897 307b 	ldrb.w	r3, [r7, #123]	@ 0x7b
 8007a36:	2b02      	cmp	r3, #2
 8007a38:	d107      	bne.n	8007a4a <cell_register_test+0x15e>
			   sideA_cellVoltageC_PECflag == 2 &&
 8007a3a:	f897 307a 	ldrb.w	r3, [r7, #122]	@ 0x7a
 8007a3e:	2b02      	cmp	r3, #2
 8007a40:	d103      	bne.n	8007a4a <cell_register_test+0x15e>
			   sideA_cellVoltageD_PECflag == 2)
			{
				sideA_subAttempts = 13;
 8007a42:	230d      	movs	r3, #13
 8007a44:	f887 3085 	strb.w	r3, [r7, #133]	@ 0x85
 8007a48:	e007      	b.n	8007a5a <cell_register_test+0x16e>
			}
			else {
				sideA_subAttempts++;
 8007a4a:	f897 3085 	ldrb.w	r3, [r7, #133]	@ 0x85
 8007a4e:	3301      	adds	r3, #1
 8007a50:	f887 3085 	strb.w	r3, [r7, #133]	@ 0x85
				wait(1);
 8007a54:	2001      	movs	r0, #1
 8007a56:	f002 fed5 	bl	800a804 <wait>
			}

			if(sideB_cellVoltageA_PECflag == 2 &&
 8007a5a:	f897 3079 	ldrb.w	r3, [r7, #121]	@ 0x79
 8007a5e:	2b02      	cmp	r3, #2
 8007a60:	d10f      	bne.n	8007a82 <cell_register_test+0x196>
 8007a62:	f897 3078 	ldrb.w	r3, [r7, #120]	@ 0x78
 8007a66:	2b02      	cmp	r3, #2
 8007a68:	d10b      	bne.n	8007a82 <cell_register_test+0x196>
			   sideB_cellVoltageB_PECflag == 2 &&
 8007a6a:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8007a6e:	2b02      	cmp	r3, #2
 8007a70:	d107      	bne.n	8007a82 <cell_register_test+0x196>
			   sideB_cellVoltageC_PECflag == 2 &&
 8007a72:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 8007a76:	2b02      	cmp	r3, #2
 8007a78:	d103      	bne.n	8007a82 <cell_register_test+0x196>
			   sideB_cellVoltageD_PECflag == 2)
			{
				sideB_subAttempts = 13;
 8007a7a:	230d      	movs	r3, #13
 8007a7c:	f887 3084 	strb.w	r3, [r7, #132]	@ 0x84
 8007a80:	e007      	b.n	8007a92 <cell_register_test+0x1a6>
			}
			else {
				sideB_subAttempts++;
 8007a82:	f897 3084 	ldrb.w	r3, [r7, #132]	@ 0x84
 8007a86:	3301      	adds	r3, #1
 8007a88:	f887 3084 	strb.w	r3, [r7, #132]	@ 0x84
				wait(1);
 8007a8c:	2001      	movs	r0, #1
 8007a8e:	f002 feb9 	bl	800a804 <wait>
		while(sideA_subAttempts < ATTEMPT_LIMIT || sideB_subAttempts < ATTEMPT_LIMIT) {
 8007a92:	f897 3085 	ldrb.w	r3, [r7, #133]	@ 0x85
 8007a96:	2b09      	cmp	r3, #9
 8007a98:	f67f af38 	bls.w	800790c <cell_register_test+0x20>
 8007a9c:	f897 3084 	ldrb.w	r3, [r7, #132]	@ 0x84
 8007aa0:	2b09      	cmp	r3, #9
 8007aa2:	f67f af33 	bls.w	800790c <cell_register_test+0x20>
			}
		}
		if(sideA_subAttempts != 13) { error_loop(ERROR_PEC, 0, 0, SIDE_A); }
 8007aa6:	f897 3085 	ldrb.w	r3, [r7, #133]	@ 0x85
 8007aaa:	2b0d      	cmp	r3, #13
 8007aac:	d005      	beq.n	8007aba <cell_register_test+0x1ce>
 8007aae:	2301      	movs	r3, #1
 8007ab0:	2200      	movs	r2, #0
 8007ab2:	2100      	movs	r1, #0
 8007ab4:	2056      	movs	r0, #86	@ 0x56
 8007ab6:	f7fd f99f 	bl	8004df8 <error_loop>

		if(sideB_subAttempts != 13) { error_loop(ERROR_PEC, 0, 0, SIDE_B); }
 8007aba:	f897 3084 	ldrb.w	r3, [r7, #132]	@ 0x84
 8007abe:	2b0d      	cmp	r3, #13
 8007ac0:	d005      	beq.n	8007ace <cell_register_test+0x1e2>
 8007ac2:	2300      	movs	r3, #0
 8007ac4:	2200      	movs	r2, #0
 8007ac6:	2100      	movs	r1, #0
 8007ac8:	2056      	movs	r0, #86	@ 0x56
 8007aca:	f7fd f995 	bl	8004df8 <error_loop>

		sideA_cellVoltages[0] = (sideA_cellVoltageA[1] << 8) | sideA_cellVoltageA[0];
 8007ace:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 8007ad2:	b21b      	sxth	r3, r3
 8007ad4:	021b      	lsls	r3, r3, #8
 8007ad6:	b21a      	sxth	r2, r3
 8007ad8:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 8007adc:	b21b      	sxth	r3, r3
 8007ade:	4313      	orrs	r3, r2
 8007ae0:	b21b      	sxth	r3, r3
 8007ae2:	b29b      	uxth	r3, r3
 8007ae4:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c
		sideA_cellVoltages[1] = (sideA_cellVoltageA[3] << 8) | sideA_cellVoltageA[2];
 8007ae8:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8007aec:	b21b      	sxth	r3, r3
 8007aee:	021b      	lsls	r3, r3, #8
 8007af0:	b21a      	sxth	r2, r3
 8007af2:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8007af6:	b21b      	sxth	r3, r3
 8007af8:	4313      	orrs	r3, r2
 8007afa:	b21b      	sxth	r3, r3
 8007afc:	b29b      	uxth	r3, r3
 8007afe:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
		sideA_cellVoltages[2] = (sideA_cellVoltageA[5] << 8) | sideA_cellVoltageA[4];
 8007b02:	f897 3041 	ldrb.w	r3, [r7, #65]	@ 0x41
 8007b06:	b21b      	sxth	r3, r3
 8007b08:	021b      	lsls	r3, r3, #8
 8007b0a:	b21a      	sxth	r2, r3
 8007b0c:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8007b10:	b21b      	sxth	r3, r3
 8007b12:	4313      	orrs	r3, r2
 8007b14:	b21b      	sxth	r3, r3
 8007b16:	b29b      	uxth	r3, r3
 8007b18:	f8a7 3060 	strh.w	r3, [r7, #96]	@ 0x60
		sideA_cellVoltages[3] = (sideA_cellVoltageB[1] << 8) | sideA_cellVoltageB[0];
 8007b1c:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8007b20:	b21b      	sxth	r3, r3
 8007b22:	021b      	lsls	r3, r3, #8
 8007b24:	b21a      	sxth	r2, r3
 8007b26:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8007b2a:	b21b      	sxth	r3, r3
 8007b2c:	4313      	orrs	r3, r2
 8007b2e:	b21b      	sxth	r3, r3
 8007b30:	b29b      	uxth	r3, r3
 8007b32:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
		sideA_cellVoltages[4] = (sideA_cellVoltageB[3] << 8) | sideA_cellVoltageB[2];
 8007b36:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8007b3a:	b21b      	sxth	r3, r3
 8007b3c:	021b      	lsls	r3, r3, #8
 8007b3e:	b21a      	sxth	r2, r3
 8007b40:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8007b44:	b21b      	sxth	r3, r3
 8007b46:	4313      	orrs	r3, r2
 8007b48:	b21b      	sxth	r3, r3
 8007b4a:	b29b      	uxth	r3, r3
 8007b4c:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
		sideA_cellVoltages[5] = (sideA_cellVoltageB[5] << 8) | sideA_cellVoltageB[4];
 8007b50:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8007b54:	b21b      	sxth	r3, r3
 8007b56:	021b      	lsls	r3, r3, #8
 8007b58:	b21a      	sxth	r2, r3
 8007b5a:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 8007b5e:	b21b      	sxth	r3, r3
 8007b60:	4313      	orrs	r3, r2
 8007b62:	b21b      	sxth	r3, r3
 8007b64:	b29b      	uxth	r3, r3
 8007b66:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
		sideA_cellVoltages[6] = (sideA_cellVoltageC[1] << 8) | sideA_cellVoltageC[0];
 8007b6a:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8007b6e:	b21b      	sxth	r3, r3
 8007b70:	021b      	lsls	r3, r3, #8
 8007b72:	b21a      	sxth	r2, r3
 8007b74:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8007b78:	b21b      	sxth	r3, r3
 8007b7a:	4313      	orrs	r3, r2
 8007b7c:	b21b      	sxth	r3, r3
 8007b7e:	b29b      	uxth	r3, r3
 8007b80:	f8a7 3068 	strh.w	r3, [r7, #104]	@ 0x68
		sideA_cellVoltages[7] = (sideA_cellVoltageC[3] << 8) | sideA_cellVoltageC[2];
 8007b84:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8007b88:	b21b      	sxth	r3, r3
 8007b8a:	021b      	lsls	r3, r3, #8
 8007b8c:	b21a      	sxth	r2, r3
 8007b8e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8007b92:	b21b      	sxth	r3, r3
 8007b94:	4313      	orrs	r3, r2
 8007b96:	b21b      	sxth	r3, r3
 8007b98:	b29b      	uxth	r3, r3
 8007b9a:	f8a7 306a 	strh.w	r3, [r7, #106]	@ 0x6a
		sideA_cellVoltages[8] = (sideA_cellVoltageC[5] << 8) | sideA_cellVoltageC[4];
 8007b9e:	f897 3031 	ldrb.w	r3, [r7, #49]	@ 0x31
 8007ba2:	b21b      	sxth	r3, r3
 8007ba4:	021b      	lsls	r3, r3, #8
 8007ba6:	b21a      	sxth	r2, r3
 8007ba8:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8007bac:	b21b      	sxth	r3, r3
 8007bae:	4313      	orrs	r3, r2
 8007bb0:	b21b      	sxth	r3, r3
 8007bb2:	b29b      	uxth	r3, r3
 8007bb4:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
		sideA_cellVoltages[9] = (sideA_cellVoltageD[1] << 8) | sideA_cellVoltageD[0];
 8007bb8:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8007bbc:	b21b      	sxth	r3, r3
 8007bbe:	021b      	lsls	r3, r3, #8
 8007bc0:	b21a      	sxth	r2, r3
 8007bc2:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8007bc6:	b21b      	sxth	r3, r3
 8007bc8:	4313      	orrs	r3, r2
 8007bca:	b21b      	sxth	r3, r3
 8007bcc:	b29b      	uxth	r3, r3
 8007bce:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
		sideA_cellVoltages[10] = (sideA_cellVoltageD[3] << 8) | sideA_cellVoltageD[2];
 8007bd2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007bd6:	b21b      	sxth	r3, r3
 8007bd8:	021b      	lsls	r3, r3, #8
 8007bda:	b21a      	sxth	r2, r3
 8007bdc:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007be0:	b21b      	sxth	r3, r3
 8007be2:	4313      	orrs	r3, r2
 8007be4:	b21b      	sxth	r3, r3
 8007be6:	b29b      	uxth	r3, r3
 8007be8:	f8a7 3070 	strh.w	r3, [r7, #112]	@ 0x70
		sideA_cellVoltages[11] = (sideA_cellVoltageD[5] << 8) | sideA_cellVoltageD[4];
 8007bec:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8007bf0:	b21b      	sxth	r3, r3
 8007bf2:	021b      	lsls	r3, r3, #8
 8007bf4:	b21a      	sxth	r2, r3
 8007bf6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8007bfa:	b21b      	sxth	r3, r3
 8007bfc:	4313      	orrs	r3, r2
 8007bfe:	b21b      	sxth	r3, r3
 8007c00:	b29b      	uxth	r3, r3
 8007c02:	f8a7 3072 	strh.w	r3, [r7, #114]	@ 0x72

		sideB_cellVoltages[0] = (sideB_cellVoltageA[1] << 8) | sideB_cellVoltageA[0];
 8007c06:	7f7b      	ldrb	r3, [r7, #29]
 8007c08:	b21b      	sxth	r3, r3
 8007c0a:	021b      	lsls	r3, r3, #8
 8007c0c:	b21a      	sxth	r2, r3
 8007c0e:	7f3b      	ldrb	r3, [r7, #28]
 8007c10:	b21b      	sxth	r3, r3
 8007c12:	4313      	orrs	r3, r2
 8007c14:	b21b      	sxth	r3, r3
 8007c16:	b29b      	uxth	r3, r3
 8007c18:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
		sideB_cellVoltages[1] = (sideB_cellVoltageA[3] << 8) | sideB_cellVoltageA[2];
 8007c1c:	7ffb      	ldrb	r3, [r7, #31]
 8007c1e:	b21b      	sxth	r3, r3
 8007c20:	021b      	lsls	r3, r3, #8
 8007c22:	b21a      	sxth	r2, r3
 8007c24:	7fbb      	ldrb	r3, [r7, #30]
 8007c26:	b21b      	sxth	r3, r3
 8007c28:	4313      	orrs	r3, r2
 8007c2a:	b21b      	sxth	r3, r3
 8007c2c:	b29b      	uxth	r3, r3
 8007c2e:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
		sideB_cellVoltages[2] = (sideB_cellVoltageA[5] << 8) | sideB_cellVoltageA[4];
 8007c32:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8007c36:	b21b      	sxth	r3, r3
 8007c38:	021b      	lsls	r3, r3, #8
 8007c3a:	b21a      	sxth	r2, r3
 8007c3c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8007c40:	b21b      	sxth	r3, r3
 8007c42:	4313      	orrs	r3, r2
 8007c44:	b21b      	sxth	r3, r3
 8007c46:	b29b      	uxth	r3, r3
 8007c48:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
		sideB_cellVoltages[3] = (sideB_cellVoltageB[1] << 8) | sideB_cellVoltageB[0];
 8007c4c:	7d7b      	ldrb	r3, [r7, #21]
 8007c4e:	b21b      	sxth	r3, r3
 8007c50:	021b      	lsls	r3, r3, #8
 8007c52:	b21a      	sxth	r2, r3
 8007c54:	7d3b      	ldrb	r3, [r7, #20]
 8007c56:	b21b      	sxth	r3, r3
 8007c58:	4313      	orrs	r3, r2
 8007c5a:	b21b      	sxth	r3, r3
 8007c5c:	b29b      	uxth	r3, r3
 8007c5e:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
		sideB_cellVoltages[4] = (sideB_cellVoltageB[3] << 8) | sideB_cellVoltageB[2];
 8007c62:	7dfb      	ldrb	r3, [r7, #23]
 8007c64:	b21b      	sxth	r3, r3
 8007c66:	021b      	lsls	r3, r3, #8
 8007c68:	b21a      	sxth	r2, r3
 8007c6a:	7dbb      	ldrb	r3, [r7, #22]
 8007c6c:	b21b      	sxth	r3, r3
 8007c6e:	4313      	orrs	r3, r2
 8007c70:	b21b      	sxth	r3, r3
 8007c72:	b29b      	uxth	r3, r3
 8007c74:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
		sideB_cellVoltages[5] = (sideB_cellVoltageB[5] << 8) | sideB_cellVoltageB[4];
 8007c78:	7e7b      	ldrb	r3, [r7, #25]
 8007c7a:	b21b      	sxth	r3, r3
 8007c7c:	021b      	lsls	r3, r3, #8
 8007c7e:	b21a      	sxth	r2, r3
 8007c80:	7e3b      	ldrb	r3, [r7, #24]
 8007c82:	b21b      	sxth	r3, r3
 8007c84:	4313      	orrs	r3, r2
 8007c86:	b21b      	sxth	r3, r3
 8007c88:	b29b      	uxth	r3, r3
 8007c8a:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
		sideB_cellVoltages[6] = (sideB_cellVoltageC[1] << 8) | sideB_cellVoltageC[0];
 8007c8e:	7b7b      	ldrb	r3, [r7, #13]
 8007c90:	b21b      	sxth	r3, r3
 8007c92:	021b      	lsls	r3, r3, #8
 8007c94:	b21a      	sxth	r2, r3
 8007c96:	7b3b      	ldrb	r3, [r7, #12]
 8007c98:	b21b      	sxth	r3, r3
 8007c9a:	4313      	orrs	r3, r2
 8007c9c:	b21b      	sxth	r3, r3
 8007c9e:	b29b      	uxth	r3, r3
 8007ca0:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
		sideB_cellVoltages[7] = (sideB_cellVoltageC[3] << 8) | sideB_cellVoltageC[2];
 8007ca4:	7bfb      	ldrb	r3, [r7, #15]
 8007ca6:	b21b      	sxth	r3, r3
 8007ca8:	021b      	lsls	r3, r3, #8
 8007caa:	b21a      	sxth	r2, r3
 8007cac:	7bbb      	ldrb	r3, [r7, #14]
 8007cae:	b21b      	sxth	r3, r3
 8007cb0:	4313      	orrs	r3, r2
 8007cb2:	b21b      	sxth	r3, r3
 8007cb4:	b29b      	uxth	r3, r3
 8007cb6:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
		sideB_cellVoltages[8] = (sideB_cellVoltageC[5] << 8) | sideB_cellVoltageC[4];
 8007cba:	7c7b      	ldrb	r3, [r7, #17]
 8007cbc:	b21b      	sxth	r3, r3
 8007cbe:	021b      	lsls	r3, r3, #8
 8007cc0:	b21a      	sxth	r2, r3
 8007cc2:	7c3b      	ldrb	r3, [r7, #16]
 8007cc4:	b21b      	sxth	r3, r3
 8007cc6:	4313      	orrs	r3, r2
 8007cc8:	b21b      	sxth	r3, r3
 8007cca:	b29b      	uxth	r3, r3
 8007ccc:	f8a7 3054 	strh.w	r3, [r7, #84]	@ 0x54
		sideB_cellVoltages[9] = (sideB_cellVoltageD[1] << 8) | sideB_cellVoltageD[0];
 8007cd0:	797b      	ldrb	r3, [r7, #5]
 8007cd2:	b21b      	sxth	r3, r3
 8007cd4:	021b      	lsls	r3, r3, #8
 8007cd6:	b21a      	sxth	r2, r3
 8007cd8:	793b      	ldrb	r3, [r7, #4]
 8007cda:	b21b      	sxth	r3, r3
 8007cdc:	4313      	orrs	r3, r2
 8007cde:	b21b      	sxth	r3, r3
 8007ce0:	b29b      	uxth	r3, r3
 8007ce2:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
		sideB_cellVoltages[10] = (sideB_cellVoltageD[3] << 8) | sideB_cellVoltageD[2];
 8007ce6:	79fb      	ldrb	r3, [r7, #7]
 8007ce8:	b21b      	sxth	r3, r3
 8007cea:	021b      	lsls	r3, r3, #8
 8007cec:	b21a      	sxth	r2, r3
 8007cee:	79bb      	ldrb	r3, [r7, #6]
 8007cf0:	b21b      	sxth	r3, r3
 8007cf2:	4313      	orrs	r3, r2
 8007cf4:	b21b      	sxth	r3, r3
 8007cf6:	b29b      	uxth	r3, r3
 8007cf8:	f8a7 3058 	strh.w	r3, [r7, #88]	@ 0x58
		sideB_cellVoltages[11] = (sideB_cellVoltageD[5] << 8) | sideB_cellVoltageD[4];
 8007cfc:	7a7b      	ldrb	r3, [r7, #9]
 8007cfe:	b21b      	sxth	r3, r3
 8007d00:	021b      	lsls	r3, r3, #8
 8007d02:	b21a      	sxth	r2, r3
 8007d04:	7a3b      	ldrb	r3, [r7, #8]
 8007d06:	b21b      	sxth	r3, r3
 8007d08:	4313      	orrs	r3, r2
 8007d0a:	b21b      	sxth	r3, r3
 8007d0c:	b29b      	uxth	r3, r3
 8007d0e:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a

		uint8_t sideA_badOutputFlag = 0;
 8007d12:	2300      	movs	r3, #0
 8007d14:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
		uint8_t sideB_badOutputFlag = 0;
 8007d18:	2300      	movs	r3, #0
 8007d1a:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82

		for(uint8_t i = 0; i < 12; i++) {
 8007d1e:	2300      	movs	r3, #0
 8007d20:	f887 3081 	strb.w	r3, [r7, #129]	@ 0x81
 8007d24:	e020      	b.n	8007d68 <cell_register_test+0x47c>
			if(sideA_cellVoltages[i] != 0x9555) { sideA_badOutputFlag = 1; }
 8007d26:	f897 3081 	ldrb.w	r3, [r7, #129]	@ 0x81
 8007d2a:	005b      	lsls	r3, r3, #1
 8007d2c:	3388      	adds	r3, #136	@ 0x88
 8007d2e:	443b      	add	r3, r7
 8007d30:	f833 3c2c 	ldrh.w	r3, [r3, #-44]
 8007d34:	f249 5255 	movw	r2, #38229	@ 0x9555
 8007d38:	4293      	cmp	r3, r2
 8007d3a:	d002      	beq.n	8007d42 <cell_register_test+0x456>
 8007d3c:	2301      	movs	r3, #1
 8007d3e:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83

			if(sideB_cellVoltages[i] != 0x9555) { sideB_badOutputFlag = 1; }
 8007d42:	f897 3081 	ldrb.w	r3, [r7, #129]	@ 0x81
 8007d46:	005b      	lsls	r3, r3, #1
 8007d48:	3388      	adds	r3, #136	@ 0x88
 8007d4a:	443b      	add	r3, r7
 8007d4c:	f833 3c44 	ldrh.w	r3, [r3, #-68]
 8007d50:	f249 5255 	movw	r2, #38229	@ 0x9555
 8007d54:	4293      	cmp	r3, r2
 8007d56:	d002      	beq.n	8007d5e <cell_register_test+0x472>
 8007d58:	2301      	movs	r3, #1
 8007d5a:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
		for(uint8_t i = 0; i < 12; i++) {
 8007d5e:	f897 3081 	ldrb.w	r3, [r7, #129]	@ 0x81
 8007d62:	3301      	adds	r3, #1
 8007d64:	f887 3081 	strb.w	r3, [r7, #129]	@ 0x81
 8007d68:	f897 3081 	ldrb.w	r3, [r7, #129]	@ 0x81
 8007d6c:	2b0b      	cmp	r3, #11
 8007d6e:	d9da      	bls.n	8007d26 <cell_register_test+0x43a>
		}

		if(!sideA_badOutputFlag) { sideA_attempts = 13; }
 8007d70:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d103      	bne.n	8007d80 <cell_register_test+0x494>
 8007d78:	230d      	movs	r3, #13
 8007d7a:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 8007d7e:	e00d      	b.n	8007d9c <cell_register_test+0x4b0>

		else {
			sideA_attempts++;
 8007d80:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8007d84:	3301      	adds	r3, #1
 8007d86:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
			sideA_subAttempts = 0;
 8007d8a:	2300      	movs	r3, #0
 8007d8c:	f887 3085 	strb.w	r3, [r7, #133]	@ 0x85
			sideB_subAttempts = 0;
 8007d90:	2300      	movs	r3, #0
 8007d92:	f887 3084 	strb.w	r3, [r7, #132]	@ 0x84
			wait(1);
 8007d96:	2001      	movs	r0, #1
 8007d98:	f002 fd34 	bl	800a804 <wait>
		}

		if(!sideB_badOutputFlag) { sideB_attempts = 13; }
 8007d9c:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d103      	bne.n	8007dac <cell_register_test+0x4c0>
 8007da4:	230d      	movs	r3, #13
 8007da6:	f887 3086 	strb.w	r3, [r7, #134]	@ 0x86
 8007daa:	e00d      	b.n	8007dc8 <cell_register_test+0x4dc>

		else {
			sideB_attempts++;
 8007dac:	f897 3086 	ldrb.w	r3, [r7, #134]	@ 0x86
 8007db0:	3301      	adds	r3, #1
 8007db2:	f887 3086 	strb.w	r3, [r7, #134]	@ 0x86
			sideA_subAttempts = 0;
 8007db6:	2300      	movs	r3, #0
 8007db8:	f887 3085 	strb.w	r3, [r7, #133]	@ 0x85
			sideB_subAttempts = 0;
 8007dbc:	2300      	movs	r3, #0
 8007dbe:	f887 3084 	strb.w	r3, [r7, #132]	@ 0x84
			wait(1);
 8007dc2:	2001      	movs	r0, #1
 8007dc4:	f002 fd1e 	bl	800a804 <wait>
	while(sideA_attempts < ATTEMPT_LIMIT || sideB_attempts < ATTEMPT_LIMIT) {
 8007dc8:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8007dcc:	2b09      	cmp	r3, #9
 8007dce:	f67f ae60 	bls.w	8007a92 <cell_register_test+0x1a6>
 8007dd2:	f897 3086 	ldrb.w	r3, [r7, #134]	@ 0x86
 8007dd6:	2b09      	cmp	r3, #9
 8007dd8:	f67f ae5b 	bls.w	8007a92 <cell_register_test+0x1a6>
		}
	}
	if(sideA_attempts != 13) { error_loop(ERROR_CVST, 0, 0, SIDE_A); }
 8007ddc:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8007de0:	2b0d      	cmp	r3, #13
 8007de2:	d005      	beq.n	8007df0 <cell_register_test+0x504>
 8007de4:	2301      	movs	r3, #1
 8007de6:	2200      	movs	r2, #0
 8007de8:	2100      	movs	r1, #0
 8007dea:	204c      	movs	r0, #76	@ 0x4c
 8007dec:	f7fd f804 	bl	8004df8 <error_loop>

	if(sideB_attempts != 13) { error_loop(ERROR_CVST, 0, 0, SIDE_B); }
 8007df0:	f897 3086 	ldrb.w	r3, [r7, #134]	@ 0x86
 8007df4:	2b0d      	cmp	r3, #13
 8007df6:	d005      	beq.n	8007e04 <cell_register_test+0x518>
 8007df8:	2300      	movs	r3, #0
 8007dfa:	2200      	movs	r2, #0
 8007dfc:	2100      	movs	r1, #0
 8007dfe:	204c      	movs	r0, #76	@ 0x4c
 8007e00:	f7fc fffa 	bl	8004df8 <error_loop>

	// Test with second variant of CVST command
	sideA_attempts = 0;
 8007e04:	2300      	movs	r3, #0
 8007e06:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
	sideB_attempts = 0;
 8007e0a:	2300      	movs	r3, #0
 8007e0c:	f887 3086 	strb.w	r3, [r7, #134]	@ 0x86
	sideA_subAttempts = 0;
 8007e10:	2300      	movs	r3, #0
 8007e12:	f887 3085 	strb.w	r3, [r7, #133]	@ 0x85
	sideB_subAttempts = 0;
 8007e16:	2300      	movs	r3, #0
 8007e18:	f887 3084 	strb.w	r3, [r7, #132]	@ 0x84
	while(sideA_attempts < ATTEMPT_LIMIT || sideB_attempts < ATTEMPT_LIMIT) {
 8007e1c:	e25d      	b.n	80082da <cell_register_test+0x9ee>
		while(sideA_subAttempts < ATTEMPT_LIMIT || sideB_subAttempts < ATTEMPT_LIMIT) {
			CLRCELL(SIDE_A);
 8007e1e:	2001      	movs	r0, #1
 8007e20:	f001 fe34 	bl	8009a8c <CLRCELL>
			CLRCELL(SIDE_B);
 8007e24:	2000      	movs	r0, #0
 8007e26:	f001 fe31 	bl	8009a8c <CLRCELL>
			wait(3);
 8007e2a:	2003      	movs	r0, #3
 8007e2c:	f002 fcea 	bl	800a804 <wait>

			CVST(0, SIDE_A);
 8007e30:	2101      	movs	r1, #1
 8007e32:	2000      	movs	r0, #0
 8007e34:	f001 fd37 	bl	80098a6 <CVST>
			CVST(0, SIDE_B);
 8007e38:	2100      	movs	r1, #0
 8007e3a:	2000      	movs	r0, #0
 8007e3c:	f001 fd33 	bl	80098a6 <CVST>
			wait(3);
 8007e40:	2003      	movs	r0, #3
 8007e42:	f002 fcdf 	bl	800a804 <wait>

			RDCVA(sideA_cellVoltageA, SIDE_A);
 8007e46:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8007e4a:	2101      	movs	r1, #1
 8007e4c:	4618      	mov	r0, r3
 8007e4e:	f001 fb29 	bl	80094a4 <RDCVA>
			RDCVA(sideB_cellVoltageA, SIDE_B);
 8007e52:	f107 031c 	add.w	r3, r7, #28
 8007e56:	2100      	movs	r1, #0
 8007e58:	4618      	mov	r0, r3
 8007e5a:	f001 fb23 	bl	80094a4 <RDCVA>
			wait(1);
 8007e5e:	2001      	movs	r0, #1
 8007e60:	f002 fcd0 	bl	800a804 <wait>
			RDCVB(sideA_cellVoltageB, SIDE_A);
 8007e64:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8007e68:	2101      	movs	r1, #1
 8007e6a:	4618      	mov	r0, r3
 8007e6c:	f001 fb3e 	bl	80094ec <RDCVB>
			RDCVB(sideB_cellVoltageB, SIDE_B);
 8007e70:	f107 0314 	add.w	r3, r7, #20
 8007e74:	2100      	movs	r1, #0
 8007e76:	4618      	mov	r0, r3
 8007e78:	f001 fb38 	bl	80094ec <RDCVB>
			wait(1);
 8007e7c:	2001      	movs	r0, #1
 8007e7e:	f002 fcc1 	bl	800a804 <wait>
			RDCVC(sideA_cellVoltageC, SIDE_A);
 8007e82:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8007e86:	2101      	movs	r1, #1
 8007e88:	4618      	mov	r0, r3
 8007e8a:	f001 fb53 	bl	8009534 <RDCVC>
			RDCVC(sideB_cellVoltageC, SIDE_B);
 8007e8e:	f107 030c 	add.w	r3, r7, #12
 8007e92:	2100      	movs	r1, #0
 8007e94:	4618      	mov	r0, r3
 8007e96:	f001 fb4d 	bl	8009534 <RDCVC>
			wait(1);
 8007e9a:	2001      	movs	r0, #1
 8007e9c:	f002 fcb2 	bl	800a804 <wait>
			RDCVD(sideA_cellVoltageD, SIDE_A);
 8007ea0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007ea4:	2101      	movs	r1, #1
 8007ea6:	4618      	mov	r0, r3
 8007ea8:	f001 fb68 	bl	800957c <RDCVD>
			RDCVD(sideB_cellVoltageD, SIDE_B);
 8007eac:	1d3b      	adds	r3, r7, #4
 8007eae:	2100      	movs	r1, #0
 8007eb0:	4618      	mov	r0, r3
 8007eb2:	f001 fb63 	bl	800957c <RDCVD>

			sideA_cellVoltageA_PECflag = verify_PEC15(sideA_cellVoltageA);
 8007eb6:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8007eba:	4618      	mov	r0, r3
 8007ebc:	f001 f925 	bl	800910a <verify_PEC15>
 8007ec0:	4603      	mov	r3, r0
 8007ec2:	f887 307d 	strb.w	r3, [r7, #125]	@ 0x7d
			sideA_cellVoltageB_PECflag = verify_PEC15(sideA_cellVoltageB);
 8007ec6:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8007eca:	4618      	mov	r0, r3
 8007ecc:	f001 f91d 	bl	800910a <verify_PEC15>
 8007ed0:	4603      	mov	r3, r0
 8007ed2:	f887 307c 	strb.w	r3, [r7, #124]	@ 0x7c
			sideA_cellVoltageC_PECflag = verify_PEC15(sideA_cellVoltageC);
 8007ed6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8007eda:	4618      	mov	r0, r3
 8007edc:	f001 f915 	bl	800910a <verify_PEC15>
 8007ee0:	4603      	mov	r3, r0
 8007ee2:	f887 307b 	strb.w	r3, [r7, #123]	@ 0x7b
			sideA_cellVoltageD_PECflag = verify_PEC15(sideA_cellVoltageD);
 8007ee6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007eea:	4618      	mov	r0, r3
 8007eec:	f001 f90d 	bl	800910a <verify_PEC15>
 8007ef0:	4603      	mov	r3, r0
 8007ef2:	f887 307a 	strb.w	r3, [r7, #122]	@ 0x7a

			sideB_cellVoltageA_PECflag = verify_PEC15(sideB_cellVoltageA);
 8007ef6:	f107 031c 	add.w	r3, r7, #28
 8007efa:	4618      	mov	r0, r3
 8007efc:	f001 f905 	bl	800910a <verify_PEC15>
 8007f00:	4603      	mov	r3, r0
 8007f02:	f887 3079 	strb.w	r3, [r7, #121]	@ 0x79
			sideB_cellVoltageB_PECflag = verify_PEC15(sideB_cellVoltageB);
 8007f06:	f107 0314 	add.w	r3, r7, #20
 8007f0a:	4618      	mov	r0, r3
 8007f0c:	f001 f8fd 	bl	800910a <verify_PEC15>
 8007f10:	4603      	mov	r3, r0
 8007f12:	f887 3078 	strb.w	r3, [r7, #120]	@ 0x78
			sideB_cellVoltageC_PECflag = verify_PEC15(sideB_cellVoltageC);
 8007f16:	f107 030c 	add.w	r3, r7, #12
 8007f1a:	4618      	mov	r0, r3
 8007f1c:	f001 f8f5 	bl	800910a <verify_PEC15>
 8007f20:	4603      	mov	r3, r0
 8007f22:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
			sideB_cellVoltageD_PECflag = verify_PEC15(sideB_cellVoltageD);
 8007f26:	1d3b      	adds	r3, r7, #4
 8007f28:	4618      	mov	r0, r3
 8007f2a:	f001 f8ee 	bl	800910a <verify_PEC15>
 8007f2e:	4603      	mov	r3, r0
 8007f30:	f887 3076 	strb.w	r3, [r7, #118]	@ 0x76

			if(sideA_cellVoltageA_PECflag == 2 &&
 8007f34:	f897 307d 	ldrb.w	r3, [r7, #125]	@ 0x7d
 8007f38:	2b02      	cmp	r3, #2
 8007f3a:	d10f      	bne.n	8007f5c <cell_register_test+0x670>
 8007f3c:	f897 307c 	ldrb.w	r3, [r7, #124]	@ 0x7c
 8007f40:	2b02      	cmp	r3, #2
 8007f42:	d10b      	bne.n	8007f5c <cell_register_test+0x670>
			   sideA_cellVoltageB_PECflag == 2 &&
 8007f44:	f897 307b 	ldrb.w	r3, [r7, #123]	@ 0x7b
 8007f48:	2b02      	cmp	r3, #2
 8007f4a:	d107      	bne.n	8007f5c <cell_register_test+0x670>
			   sideA_cellVoltageC_PECflag == 2 &&
 8007f4c:	f897 307a 	ldrb.w	r3, [r7, #122]	@ 0x7a
 8007f50:	2b02      	cmp	r3, #2
 8007f52:	d103      	bne.n	8007f5c <cell_register_test+0x670>
			   sideA_cellVoltageD_PECflag == 2)
			{
				sideA_subAttempts = 13;
 8007f54:	230d      	movs	r3, #13
 8007f56:	f887 3085 	strb.w	r3, [r7, #133]	@ 0x85
 8007f5a:	e007      	b.n	8007f6c <cell_register_test+0x680>
			}
			else {
				sideA_subAttempts++;
 8007f5c:	f897 3085 	ldrb.w	r3, [r7, #133]	@ 0x85
 8007f60:	3301      	adds	r3, #1
 8007f62:	f887 3085 	strb.w	r3, [r7, #133]	@ 0x85
				wait(1);
 8007f66:	2001      	movs	r0, #1
 8007f68:	f002 fc4c 	bl	800a804 <wait>
			}

			if(sideB_cellVoltageA_PECflag == 2 &&
 8007f6c:	f897 3079 	ldrb.w	r3, [r7, #121]	@ 0x79
 8007f70:	2b02      	cmp	r3, #2
 8007f72:	d10f      	bne.n	8007f94 <cell_register_test+0x6a8>
 8007f74:	f897 3078 	ldrb.w	r3, [r7, #120]	@ 0x78
 8007f78:	2b02      	cmp	r3, #2
 8007f7a:	d10b      	bne.n	8007f94 <cell_register_test+0x6a8>
			   sideB_cellVoltageB_PECflag == 2 &&
 8007f7c:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8007f80:	2b02      	cmp	r3, #2
 8007f82:	d107      	bne.n	8007f94 <cell_register_test+0x6a8>
			   sideB_cellVoltageC_PECflag == 2 &&
 8007f84:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 8007f88:	2b02      	cmp	r3, #2
 8007f8a:	d103      	bne.n	8007f94 <cell_register_test+0x6a8>
			   sideB_cellVoltageD_PECflag == 2)
			{
				sideB_subAttempts = 13;
 8007f8c:	230d      	movs	r3, #13
 8007f8e:	f887 3084 	strb.w	r3, [r7, #132]	@ 0x84
 8007f92:	e007      	b.n	8007fa4 <cell_register_test+0x6b8>
			}
			else {
				sideB_subAttempts++;
 8007f94:	f897 3084 	ldrb.w	r3, [r7, #132]	@ 0x84
 8007f98:	3301      	adds	r3, #1
 8007f9a:	f887 3084 	strb.w	r3, [r7, #132]	@ 0x84
				wait(1);
 8007f9e:	2001      	movs	r0, #1
 8007fa0:	f002 fc30 	bl	800a804 <wait>
		while(sideA_subAttempts < ATTEMPT_LIMIT || sideB_subAttempts < ATTEMPT_LIMIT) {
 8007fa4:	f897 3085 	ldrb.w	r3, [r7, #133]	@ 0x85
 8007fa8:	2b09      	cmp	r3, #9
 8007faa:	f67f af38 	bls.w	8007e1e <cell_register_test+0x532>
 8007fae:	f897 3084 	ldrb.w	r3, [r7, #132]	@ 0x84
 8007fb2:	2b09      	cmp	r3, #9
 8007fb4:	f67f af33 	bls.w	8007e1e <cell_register_test+0x532>
			}
		}
		if(sideA_subAttempts != 13) { error_loop(ERROR_PEC, 0, 0, SIDE_A); }
 8007fb8:	f897 3085 	ldrb.w	r3, [r7, #133]	@ 0x85
 8007fbc:	2b0d      	cmp	r3, #13
 8007fbe:	d005      	beq.n	8007fcc <cell_register_test+0x6e0>
 8007fc0:	2301      	movs	r3, #1
 8007fc2:	2200      	movs	r2, #0
 8007fc4:	2100      	movs	r1, #0
 8007fc6:	2056      	movs	r0, #86	@ 0x56
 8007fc8:	f7fc ff16 	bl	8004df8 <error_loop>

		if(sideB_subAttempts != 13) { error_loop(ERROR_PEC, 0, 0, SIDE_B); }
 8007fcc:	f897 3084 	ldrb.w	r3, [r7, #132]	@ 0x84
 8007fd0:	2b0d      	cmp	r3, #13
 8007fd2:	d005      	beq.n	8007fe0 <cell_register_test+0x6f4>
 8007fd4:	2300      	movs	r3, #0
 8007fd6:	2200      	movs	r2, #0
 8007fd8:	2100      	movs	r1, #0
 8007fda:	2056      	movs	r0, #86	@ 0x56
 8007fdc:	f7fc ff0c 	bl	8004df8 <error_loop>

		sideA_cellVoltages[0] = (sideA_cellVoltageA[1] << 8) | sideA_cellVoltageA[0];
 8007fe0:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 8007fe4:	b21b      	sxth	r3, r3
 8007fe6:	021b      	lsls	r3, r3, #8
 8007fe8:	b21a      	sxth	r2, r3
 8007fea:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 8007fee:	b21b      	sxth	r3, r3
 8007ff0:	4313      	orrs	r3, r2
 8007ff2:	b21b      	sxth	r3, r3
 8007ff4:	b29b      	uxth	r3, r3
 8007ff6:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c
		sideA_cellVoltages[1] = (sideA_cellVoltageA[3] << 8) | sideA_cellVoltageA[2];
 8007ffa:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8007ffe:	b21b      	sxth	r3, r3
 8008000:	021b      	lsls	r3, r3, #8
 8008002:	b21a      	sxth	r2, r3
 8008004:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8008008:	b21b      	sxth	r3, r3
 800800a:	4313      	orrs	r3, r2
 800800c:	b21b      	sxth	r3, r3
 800800e:	b29b      	uxth	r3, r3
 8008010:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
		sideA_cellVoltages[2] = (sideA_cellVoltageA[5] << 8) | sideA_cellVoltageA[4];
 8008014:	f897 3041 	ldrb.w	r3, [r7, #65]	@ 0x41
 8008018:	b21b      	sxth	r3, r3
 800801a:	021b      	lsls	r3, r3, #8
 800801c:	b21a      	sxth	r2, r3
 800801e:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8008022:	b21b      	sxth	r3, r3
 8008024:	4313      	orrs	r3, r2
 8008026:	b21b      	sxth	r3, r3
 8008028:	b29b      	uxth	r3, r3
 800802a:	f8a7 3060 	strh.w	r3, [r7, #96]	@ 0x60
		sideA_cellVoltages[3] = (sideA_cellVoltageB[1] << 8) | sideA_cellVoltageB[0];
 800802e:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8008032:	b21b      	sxth	r3, r3
 8008034:	021b      	lsls	r3, r3, #8
 8008036:	b21a      	sxth	r2, r3
 8008038:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 800803c:	b21b      	sxth	r3, r3
 800803e:	4313      	orrs	r3, r2
 8008040:	b21b      	sxth	r3, r3
 8008042:	b29b      	uxth	r3, r3
 8008044:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
		sideA_cellVoltages[4] = (sideA_cellVoltageB[3] << 8) | sideA_cellVoltageB[2];
 8008048:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800804c:	b21b      	sxth	r3, r3
 800804e:	021b      	lsls	r3, r3, #8
 8008050:	b21a      	sxth	r2, r3
 8008052:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8008056:	b21b      	sxth	r3, r3
 8008058:	4313      	orrs	r3, r2
 800805a:	b21b      	sxth	r3, r3
 800805c:	b29b      	uxth	r3, r3
 800805e:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
		sideA_cellVoltages[5] = (sideA_cellVoltageB[5] << 8) | sideA_cellVoltageB[4];
 8008062:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8008066:	b21b      	sxth	r3, r3
 8008068:	021b      	lsls	r3, r3, #8
 800806a:	b21a      	sxth	r2, r3
 800806c:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 8008070:	b21b      	sxth	r3, r3
 8008072:	4313      	orrs	r3, r2
 8008074:	b21b      	sxth	r3, r3
 8008076:	b29b      	uxth	r3, r3
 8008078:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
		sideA_cellVoltages[6] = (sideA_cellVoltageC[1] << 8) | sideA_cellVoltageC[0];
 800807c:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8008080:	b21b      	sxth	r3, r3
 8008082:	021b      	lsls	r3, r3, #8
 8008084:	b21a      	sxth	r2, r3
 8008086:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800808a:	b21b      	sxth	r3, r3
 800808c:	4313      	orrs	r3, r2
 800808e:	b21b      	sxth	r3, r3
 8008090:	b29b      	uxth	r3, r3
 8008092:	f8a7 3068 	strh.w	r3, [r7, #104]	@ 0x68
		sideA_cellVoltages[7] = (sideA_cellVoltageC[3] << 8) | sideA_cellVoltageC[2];
 8008096:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800809a:	b21b      	sxth	r3, r3
 800809c:	021b      	lsls	r3, r3, #8
 800809e:	b21a      	sxth	r2, r3
 80080a0:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80080a4:	b21b      	sxth	r3, r3
 80080a6:	4313      	orrs	r3, r2
 80080a8:	b21b      	sxth	r3, r3
 80080aa:	b29b      	uxth	r3, r3
 80080ac:	f8a7 306a 	strh.w	r3, [r7, #106]	@ 0x6a
		sideA_cellVoltages[8] = (sideA_cellVoltageC[5] << 8) | sideA_cellVoltageC[4];
 80080b0:	f897 3031 	ldrb.w	r3, [r7, #49]	@ 0x31
 80080b4:	b21b      	sxth	r3, r3
 80080b6:	021b      	lsls	r3, r3, #8
 80080b8:	b21a      	sxth	r2, r3
 80080ba:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 80080be:	b21b      	sxth	r3, r3
 80080c0:	4313      	orrs	r3, r2
 80080c2:	b21b      	sxth	r3, r3
 80080c4:	b29b      	uxth	r3, r3
 80080c6:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
		sideA_cellVoltages[9] = (sideA_cellVoltageD[1] << 8) | sideA_cellVoltageD[0];
 80080ca:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80080ce:	b21b      	sxth	r3, r3
 80080d0:	021b      	lsls	r3, r3, #8
 80080d2:	b21a      	sxth	r2, r3
 80080d4:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80080d8:	b21b      	sxth	r3, r3
 80080da:	4313      	orrs	r3, r2
 80080dc:	b21b      	sxth	r3, r3
 80080de:	b29b      	uxth	r3, r3
 80080e0:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
		sideA_cellVoltages[10] = (sideA_cellVoltageD[3] << 8) | sideA_cellVoltageD[2];
 80080e4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80080e8:	b21b      	sxth	r3, r3
 80080ea:	021b      	lsls	r3, r3, #8
 80080ec:	b21a      	sxth	r2, r3
 80080ee:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80080f2:	b21b      	sxth	r3, r3
 80080f4:	4313      	orrs	r3, r2
 80080f6:	b21b      	sxth	r3, r3
 80080f8:	b29b      	uxth	r3, r3
 80080fa:	f8a7 3070 	strh.w	r3, [r7, #112]	@ 0x70
		sideA_cellVoltages[11] = (sideA_cellVoltageD[5] << 8) | sideA_cellVoltageD[4];
 80080fe:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8008102:	b21b      	sxth	r3, r3
 8008104:	021b      	lsls	r3, r3, #8
 8008106:	b21a      	sxth	r2, r3
 8008108:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800810c:	b21b      	sxth	r3, r3
 800810e:	4313      	orrs	r3, r2
 8008110:	b21b      	sxth	r3, r3
 8008112:	b29b      	uxth	r3, r3
 8008114:	f8a7 3072 	strh.w	r3, [r7, #114]	@ 0x72

		sideB_cellVoltages[0] = (sideB_cellVoltageA[1] << 8) | sideB_cellVoltageA[0];
 8008118:	7f7b      	ldrb	r3, [r7, #29]
 800811a:	b21b      	sxth	r3, r3
 800811c:	021b      	lsls	r3, r3, #8
 800811e:	b21a      	sxth	r2, r3
 8008120:	7f3b      	ldrb	r3, [r7, #28]
 8008122:	b21b      	sxth	r3, r3
 8008124:	4313      	orrs	r3, r2
 8008126:	b21b      	sxth	r3, r3
 8008128:	b29b      	uxth	r3, r3
 800812a:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
		sideB_cellVoltages[1] = (sideB_cellVoltageA[3] << 8) | sideB_cellVoltageA[2];
 800812e:	7ffb      	ldrb	r3, [r7, #31]
 8008130:	b21b      	sxth	r3, r3
 8008132:	021b      	lsls	r3, r3, #8
 8008134:	b21a      	sxth	r2, r3
 8008136:	7fbb      	ldrb	r3, [r7, #30]
 8008138:	b21b      	sxth	r3, r3
 800813a:	4313      	orrs	r3, r2
 800813c:	b21b      	sxth	r3, r3
 800813e:	b29b      	uxth	r3, r3
 8008140:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
		sideB_cellVoltages[2] = (sideB_cellVoltageA[5] << 8) | sideB_cellVoltageA[4];
 8008144:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8008148:	b21b      	sxth	r3, r3
 800814a:	021b      	lsls	r3, r3, #8
 800814c:	b21a      	sxth	r2, r3
 800814e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008152:	b21b      	sxth	r3, r3
 8008154:	4313      	orrs	r3, r2
 8008156:	b21b      	sxth	r3, r3
 8008158:	b29b      	uxth	r3, r3
 800815a:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
		sideB_cellVoltages[3] = (sideB_cellVoltageB[1] << 8) | sideB_cellVoltageB[0];
 800815e:	7d7b      	ldrb	r3, [r7, #21]
 8008160:	b21b      	sxth	r3, r3
 8008162:	021b      	lsls	r3, r3, #8
 8008164:	b21a      	sxth	r2, r3
 8008166:	7d3b      	ldrb	r3, [r7, #20]
 8008168:	b21b      	sxth	r3, r3
 800816a:	4313      	orrs	r3, r2
 800816c:	b21b      	sxth	r3, r3
 800816e:	b29b      	uxth	r3, r3
 8008170:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
		sideB_cellVoltages[4] = (sideB_cellVoltageB[3] << 8) | sideB_cellVoltageB[2];
 8008174:	7dfb      	ldrb	r3, [r7, #23]
 8008176:	b21b      	sxth	r3, r3
 8008178:	021b      	lsls	r3, r3, #8
 800817a:	b21a      	sxth	r2, r3
 800817c:	7dbb      	ldrb	r3, [r7, #22]
 800817e:	b21b      	sxth	r3, r3
 8008180:	4313      	orrs	r3, r2
 8008182:	b21b      	sxth	r3, r3
 8008184:	b29b      	uxth	r3, r3
 8008186:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
		sideB_cellVoltages[5] = (sideB_cellVoltageB[5] << 8) | sideB_cellVoltageB[4];
 800818a:	7e7b      	ldrb	r3, [r7, #25]
 800818c:	b21b      	sxth	r3, r3
 800818e:	021b      	lsls	r3, r3, #8
 8008190:	b21a      	sxth	r2, r3
 8008192:	7e3b      	ldrb	r3, [r7, #24]
 8008194:	b21b      	sxth	r3, r3
 8008196:	4313      	orrs	r3, r2
 8008198:	b21b      	sxth	r3, r3
 800819a:	b29b      	uxth	r3, r3
 800819c:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
		sideB_cellVoltages[6] = (sideB_cellVoltageC[1] << 8) | sideB_cellVoltageC[0];
 80081a0:	7b7b      	ldrb	r3, [r7, #13]
 80081a2:	b21b      	sxth	r3, r3
 80081a4:	021b      	lsls	r3, r3, #8
 80081a6:	b21a      	sxth	r2, r3
 80081a8:	7b3b      	ldrb	r3, [r7, #12]
 80081aa:	b21b      	sxth	r3, r3
 80081ac:	4313      	orrs	r3, r2
 80081ae:	b21b      	sxth	r3, r3
 80081b0:	b29b      	uxth	r3, r3
 80081b2:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
		sideB_cellVoltages[7] = (sideB_cellVoltageC[3] << 8) | sideB_cellVoltageC[2];
 80081b6:	7bfb      	ldrb	r3, [r7, #15]
 80081b8:	b21b      	sxth	r3, r3
 80081ba:	021b      	lsls	r3, r3, #8
 80081bc:	b21a      	sxth	r2, r3
 80081be:	7bbb      	ldrb	r3, [r7, #14]
 80081c0:	b21b      	sxth	r3, r3
 80081c2:	4313      	orrs	r3, r2
 80081c4:	b21b      	sxth	r3, r3
 80081c6:	b29b      	uxth	r3, r3
 80081c8:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
		sideB_cellVoltages[8] = (sideB_cellVoltageC[5] << 8) | sideB_cellVoltageC[4];
 80081cc:	7c7b      	ldrb	r3, [r7, #17]
 80081ce:	b21b      	sxth	r3, r3
 80081d0:	021b      	lsls	r3, r3, #8
 80081d2:	b21a      	sxth	r2, r3
 80081d4:	7c3b      	ldrb	r3, [r7, #16]
 80081d6:	b21b      	sxth	r3, r3
 80081d8:	4313      	orrs	r3, r2
 80081da:	b21b      	sxth	r3, r3
 80081dc:	b29b      	uxth	r3, r3
 80081de:	f8a7 3054 	strh.w	r3, [r7, #84]	@ 0x54
		sideB_cellVoltages[9] = (sideB_cellVoltageD[1] << 8) | sideB_cellVoltageD[0];
 80081e2:	797b      	ldrb	r3, [r7, #5]
 80081e4:	b21b      	sxth	r3, r3
 80081e6:	021b      	lsls	r3, r3, #8
 80081e8:	b21a      	sxth	r2, r3
 80081ea:	793b      	ldrb	r3, [r7, #4]
 80081ec:	b21b      	sxth	r3, r3
 80081ee:	4313      	orrs	r3, r2
 80081f0:	b21b      	sxth	r3, r3
 80081f2:	b29b      	uxth	r3, r3
 80081f4:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
		sideB_cellVoltages[10] = (sideB_cellVoltageD[3] << 8) | sideB_cellVoltageD[2];
 80081f8:	79fb      	ldrb	r3, [r7, #7]
 80081fa:	b21b      	sxth	r3, r3
 80081fc:	021b      	lsls	r3, r3, #8
 80081fe:	b21a      	sxth	r2, r3
 8008200:	79bb      	ldrb	r3, [r7, #6]
 8008202:	b21b      	sxth	r3, r3
 8008204:	4313      	orrs	r3, r2
 8008206:	b21b      	sxth	r3, r3
 8008208:	b29b      	uxth	r3, r3
 800820a:	f8a7 3058 	strh.w	r3, [r7, #88]	@ 0x58
		sideB_cellVoltages[11] = (sideB_cellVoltageD[5] << 8) | sideB_cellVoltageD[4];
 800820e:	7a7b      	ldrb	r3, [r7, #9]
 8008210:	b21b      	sxth	r3, r3
 8008212:	021b      	lsls	r3, r3, #8
 8008214:	b21a      	sxth	r2, r3
 8008216:	7a3b      	ldrb	r3, [r7, #8]
 8008218:	b21b      	sxth	r3, r3
 800821a:	4313      	orrs	r3, r2
 800821c:	b21b      	sxth	r3, r3
 800821e:	b29b      	uxth	r3, r3
 8008220:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a

		uint8_t sideA_badOutputFlag = 0;
 8008224:	2300      	movs	r3, #0
 8008226:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
		uint8_t sideB_badOutputFlag = 0;
 800822a:	2300      	movs	r3, #0
 800822c:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f

		for(uint8_t i = 0; i < 12; i++) {
 8008230:	2300      	movs	r3, #0
 8008232:	f887 307e 	strb.w	r3, [r7, #126]	@ 0x7e
 8008236:	e020      	b.n	800827a <cell_register_test+0x98e>
			if(sideA_cellVoltages[i] != 0x6AAA) { sideA_badOutputFlag = 1; }
 8008238:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 800823c:	005b      	lsls	r3, r3, #1
 800823e:	3388      	adds	r3, #136	@ 0x88
 8008240:	443b      	add	r3, r7
 8008242:	f833 3c2c 	ldrh.w	r3, [r3, #-44]
 8008246:	f646 22aa 	movw	r2, #27306	@ 0x6aaa
 800824a:	4293      	cmp	r3, r2
 800824c:	d002      	beq.n	8008254 <cell_register_test+0x968>
 800824e:	2301      	movs	r3, #1
 8008250:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80

			if(sideB_cellVoltages[i] != 0x6AAA) { sideB_badOutputFlag = 1; }
 8008254:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 8008258:	005b      	lsls	r3, r3, #1
 800825a:	3388      	adds	r3, #136	@ 0x88
 800825c:	443b      	add	r3, r7
 800825e:	f833 3c44 	ldrh.w	r3, [r3, #-68]
 8008262:	f646 22aa 	movw	r2, #27306	@ 0x6aaa
 8008266:	4293      	cmp	r3, r2
 8008268:	d002      	beq.n	8008270 <cell_register_test+0x984>
 800826a:	2301      	movs	r3, #1
 800826c:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
		for(uint8_t i = 0; i < 12; i++) {
 8008270:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 8008274:	3301      	adds	r3, #1
 8008276:	f887 307e 	strb.w	r3, [r7, #126]	@ 0x7e
 800827a:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 800827e:	2b0b      	cmp	r3, #11
 8008280:	d9da      	bls.n	8008238 <cell_register_test+0x94c>
		}

		if(!sideA_badOutputFlag) { sideA_attempts = 13; }
 8008282:	f897 3080 	ldrb.w	r3, [r7, #128]	@ 0x80
 8008286:	2b00      	cmp	r3, #0
 8008288:	d103      	bne.n	8008292 <cell_register_test+0x9a6>
 800828a:	230d      	movs	r3, #13
 800828c:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 8008290:	e00d      	b.n	80082ae <cell_register_test+0x9c2>

		else {
			sideA_attempts++;
 8008292:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8008296:	3301      	adds	r3, #1
 8008298:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
			sideA_subAttempts = 0;
 800829c:	2300      	movs	r3, #0
 800829e:	f887 3085 	strb.w	r3, [r7, #133]	@ 0x85
			sideB_subAttempts = 0;
 80082a2:	2300      	movs	r3, #0
 80082a4:	f887 3084 	strb.w	r3, [r7, #132]	@ 0x84
			wait(1);
 80082a8:	2001      	movs	r0, #1
 80082aa:	f002 faab 	bl	800a804 <wait>
		}

		if(!sideB_badOutputFlag) { sideB_attempts = 13; }
 80082ae:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d103      	bne.n	80082be <cell_register_test+0x9d2>
 80082b6:	230d      	movs	r3, #13
 80082b8:	f887 3086 	strb.w	r3, [r7, #134]	@ 0x86
 80082bc:	e00d      	b.n	80082da <cell_register_test+0x9ee>

		else {
			sideB_attempts++;
 80082be:	f897 3086 	ldrb.w	r3, [r7, #134]	@ 0x86
 80082c2:	3301      	adds	r3, #1
 80082c4:	f887 3086 	strb.w	r3, [r7, #134]	@ 0x86
			sideA_subAttempts = 0;
 80082c8:	2300      	movs	r3, #0
 80082ca:	f887 3085 	strb.w	r3, [r7, #133]	@ 0x85
			sideB_subAttempts = 0;
 80082ce:	2300      	movs	r3, #0
 80082d0:	f887 3084 	strb.w	r3, [r7, #132]	@ 0x84
			wait(1);
 80082d4:	2001      	movs	r0, #1
 80082d6:	f002 fa95 	bl	800a804 <wait>
	while(sideA_attempts < ATTEMPT_LIMIT || sideB_attempts < ATTEMPT_LIMIT) {
 80082da:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 80082de:	2b09      	cmp	r3, #9
 80082e0:	f67f ae60 	bls.w	8007fa4 <cell_register_test+0x6b8>
 80082e4:	f897 3086 	ldrb.w	r3, [r7, #134]	@ 0x86
 80082e8:	2b09      	cmp	r3, #9
 80082ea:	f67f ae5b 	bls.w	8007fa4 <cell_register_test+0x6b8>
		}
	}
	if(sideA_attempts != 13) { error_loop(ERROR_CVST, 0, 0, SIDE_A); }
 80082ee:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 80082f2:	2b0d      	cmp	r3, #13
 80082f4:	d005      	beq.n	8008302 <cell_register_test+0xa16>
 80082f6:	2301      	movs	r3, #1
 80082f8:	2200      	movs	r2, #0
 80082fa:	2100      	movs	r1, #0
 80082fc:	204c      	movs	r0, #76	@ 0x4c
 80082fe:	f7fc fd7b 	bl	8004df8 <error_loop>

	if(sideB_attempts != 13) { error_loop(ERROR_CVST, 0, 0, SIDE_B); }
 8008302:	f897 3086 	ldrb.w	r3, [r7, #134]	@ 0x86
 8008306:	2b0d      	cmp	r3, #13
 8008308:	d005      	beq.n	8008316 <cell_register_test+0xa2a>
 800830a:	2300      	movs	r3, #0
 800830c:	2200      	movs	r2, #0
 800830e:	2100      	movs	r1, #0
 8008310:	204c      	movs	r0, #76	@ 0x4c
 8008312:	f7fc fd71 	bl	8004df8 <error_loop>
}
 8008316:	bf00      	nop
 8008318:	3788      	adds	r7, #136	@ 0x88
 800831a:	46bd      	mov	sp, r7
 800831c:	bd80      	pop	{r7, pc}

0800831e <aux_register_test>:


void aux_register_test(void)
{
 800831e:	b580      	push	{r7, lr}
 8008320:	b0a0      	sub	sp, #128	@ 0x80
 8008322:	af00      	add	r7, sp, #0
	uint8_t sideA_attempts = 0;
 8008324:	2300      	movs	r3, #0
 8008326:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
	uint8_t sideB_attempts = 0;
 800832a:	2300      	movs	r3, #0
 800832c:	f887 307e 	strb.w	r3, [r7, #126]	@ 0x7e
	uint8_t sideA_subAttempts = 0;
 8008330:	2300      	movs	r3, #0
 8008332:	f887 307d 	strb.w	r3, [r7, #125]	@ 0x7d
	uint8_t sideB_subAttempts = 0;
 8008336:	2300      	movs	r3, #0
 8008338:	f887 307c 	strb.w	r3, [r7, #124]	@ 0x7c
	uint8_t sideB_auxB_PECflag;
	uint8_t sideB_auxC_PECflag;
	uint8_t sideB_auxD_PECflag;

	// Test with first variant of AXST command
	while(sideA_attempts < ATTEMPT_LIMIT || sideB_attempts < ATTEMPT_LIMIT) {
 800833c:	e22d      	b.n	800879a <aux_register_test+0x47c>
		while(sideA_subAttempts < ATTEMPT_LIMIT || sideB_subAttempts < ATTEMPT_LIMIT) {
			CLRAUX(SIDE_A);
 800833e:	2001      	movs	r0, #1
 8008340:	f001 fbc7 	bl	8009ad2 <CLRAUX>
			CLRAUX(SIDE_B);
 8008344:	2000      	movs	r0, #0
 8008346:	f001 fbc4 	bl	8009ad2 <CLRAUX>
			wait(3);
 800834a:	2003      	movs	r0, #3
 800834c:	f002 fa5a 	bl	800a804 <wait>

			AXST(1, SIDE_A);
 8008350:	2101      	movs	r1, #1
 8008352:	2001      	movs	r0, #1
 8008354:	f001 fad5 	bl	8009902 <AXST>
			AXST(1, SIDE_B);
 8008358:	2100      	movs	r1, #0
 800835a:	2001      	movs	r0, #1
 800835c:	f001 fad1 	bl	8009902 <AXST>
			wait(3);
 8008360:	2003      	movs	r0, #3
 8008362:	f002 fa4f 	bl	800a804 <wait>

			RDAUXA(sideA_auxA, SIDE_A);
 8008366:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800836a:	2101      	movs	r1, #1
 800836c:	4618      	mov	r0, r3
 800836e:	f001 f995 	bl	800969c <RDAUXA>
			RDAUXA(sideB_auxA, SIDE_B);
 8008372:	f107 031c 	add.w	r3, r7, #28
 8008376:	2100      	movs	r1, #0
 8008378:	4618      	mov	r0, r3
 800837a:	f001 f98f 	bl	800969c <RDAUXA>
			wait(1);
 800837e:	2001      	movs	r0, #1
 8008380:	f002 fa40 	bl	800a804 <wait>
			RDAUXB(sideA_auxB, SIDE_A);
 8008384:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8008388:	2101      	movs	r1, #1
 800838a:	4618      	mov	r0, r3
 800838c:	f001 f9aa 	bl	80096e4 <RDAUXB>
			RDAUXB(sideB_auxB, SIDE_B);
 8008390:	f107 0314 	add.w	r3, r7, #20
 8008394:	2100      	movs	r1, #0
 8008396:	4618      	mov	r0, r3
 8008398:	f001 f9a4 	bl	80096e4 <RDAUXB>
			wait(1);
 800839c:	2001      	movs	r0, #1
 800839e:	f002 fa31 	bl	800a804 <wait>
			RDAUXC(sideA_auxC, SIDE_A);
 80083a2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80083a6:	2101      	movs	r1, #1
 80083a8:	4618      	mov	r0, r3
 80083aa:	f001 f9bf 	bl	800972c <RDAUXC>
			RDAUXC(sideB_auxC, SIDE_B);
 80083ae:	f107 030c 	add.w	r3, r7, #12
 80083b2:	2100      	movs	r1, #0
 80083b4:	4618      	mov	r0, r3
 80083b6:	f001 f9b9 	bl	800972c <RDAUXC>
			wait(1);
 80083ba:	2001      	movs	r0, #1
 80083bc:	f002 fa22 	bl	800a804 <wait>
			RDAUXD(sideA_auxD, SIDE_A);
 80083c0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80083c4:	2101      	movs	r1, #1
 80083c6:	4618      	mov	r0, r3
 80083c8:	f001 f9d4 	bl	8009774 <RDAUXD>
			RDAUXD(sideB_auxD, SIDE_B);
 80083cc:	1d3b      	adds	r3, r7, #4
 80083ce:	2100      	movs	r1, #0
 80083d0:	4618      	mov	r0, r3
 80083d2:	f001 f9cf 	bl	8009774 <RDAUXD>

			sideA_auxA_PECflag = verify_PEC15(sideA_auxA);
 80083d6:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80083da:	4618      	mov	r0, r3
 80083dc:	f000 fe95 	bl	800910a <verify_PEC15>
 80083e0:	4603      	mov	r3, r0
 80083e2:	f887 3075 	strb.w	r3, [r7, #117]	@ 0x75
			sideA_auxB_PECflag = verify_PEC15(sideA_auxB);
 80083e6:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80083ea:	4618      	mov	r0, r3
 80083ec:	f000 fe8d 	bl	800910a <verify_PEC15>
 80083f0:	4603      	mov	r3, r0
 80083f2:	f887 3074 	strb.w	r3, [r7, #116]	@ 0x74
			sideA_auxC_PECflag = verify_PEC15(sideA_auxC);
 80083f6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80083fa:	4618      	mov	r0, r3
 80083fc:	f000 fe85 	bl	800910a <verify_PEC15>
 8008400:	4603      	mov	r3, r0
 8008402:	f887 3073 	strb.w	r3, [r7, #115]	@ 0x73
			sideA_auxD_PECflag = verify_PEC15(sideA_auxD);
 8008406:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800840a:	4618      	mov	r0, r3
 800840c:	f000 fe7d 	bl	800910a <verify_PEC15>
 8008410:	4603      	mov	r3, r0
 8008412:	f887 3072 	strb.w	r3, [r7, #114]	@ 0x72

			sideB_auxA_PECflag = verify_PEC15(sideB_auxA);
 8008416:	f107 031c 	add.w	r3, r7, #28
 800841a:	4618      	mov	r0, r3
 800841c:	f000 fe75 	bl	800910a <verify_PEC15>
 8008420:	4603      	mov	r3, r0
 8008422:	f887 3071 	strb.w	r3, [r7, #113]	@ 0x71
			sideB_auxB_PECflag = verify_PEC15(sideB_auxB);
 8008426:	f107 0314 	add.w	r3, r7, #20
 800842a:	4618      	mov	r0, r3
 800842c:	f000 fe6d 	bl	800910a <verify_PEC15>
 8008430:	4603      	mov	r3, r0
 8008432:	f887 3070 	strb.w	r3, [r7, #112]	@ 0x70
			sideB_auxC_PECflag = verify_PEC15(sideB_auxC);
 8008436:	f107 030c 	add.w	r3, r7, #12
 800843a:	4618      	mov	r0, r3
 800843c:	f000 fe65 	bl	800910a <verify_PEC15>
 8008440:	4603      	mov	r3, r0
 8008442:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
			sideB_auxD_PECflag = verify_PEC15(sideB_auxD);
 8008446:	1d3b      	adds	r3, r7, #4
 8008448:	4618      	mov	r0, r3
 800844a:	f000 fe5e 	bl	800910a <verify_PEC15>
 800844e:	4603      	mov	r3, r0
 8008450:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e

			if(sideA_auxA_PECflag == 2 &&
 8008454:	f897 3075 	ldrb.w	r3, [r7, #117]	@ 0x75
 8008458:	2b02      	cmp	r3, #2
 800845a:	d10f      	bne.n	800847c <aux_register_test+0x15e>
 800845c:	f897 3074 	ldrb.w	r3, [r7, #116]	@ 0x74
 8008460:	2b02      	cmp	r3, #2
 8008462:	d10b      	bne.n	800847c <aux_register_test+0x15e>
			   sideA_auxB_PECflag == 2 &&
 8008464:	f897 3073 	ldrb.w	r3, [r7, #115]	@ 0x73
 8008468:	2b02      	cmp	r3, #2
 800846a:	d107      	bne.n	800847c <aux_register_test+0x15e>
			   sideA_auxC_PECflag == 2 &&
 800846c:	f897 3072 	ldrb.w	r3, [r7, #114]	@ 0x72
 8008470:	2b02      	cmp	r3, #2
 8008472:	d103      	bne.n	800847c <aux_register_test+0x15e>
			   sideA_auxD_PECflag == 2)
			{
				sideA_subAttempts = 13;
 8008474:	230d      	movs	r3, #13
 8008476:	f887 307d 	strb.w	r3, [r7, #125]	@ 0x7d
 800847a:	e007      	b.n	800848c <aux_register_test+0x16e>
			}
			else {
				sideA_subAttempts++;
 800847c:	f897 307d 	ldrb.w	r3, [r7, #125]	@ 0x7d
 8008480:	3301      	adds	r3, #1
 8008482:	f887 307d 	strb.w	r3, [r7, #125]	@ 0x7d
				wait(1);
 8008486:	2001      	movs	r0, #1
 8008488:	f002 f9bc 	bl	800a804 <wait>
			}

			if(sideB_auxA_PECflag == 2 &&
 800848c:	f897 3071 	ldrb.w	r3, [r7, #113]	@ 0x71
 8008490:	2b02      	cmp	r3, #2
 8008492:	d10f      	bne.n	80084b4 <aux_register_test+0x196>
 8008494:	f897 3070 	ldrb.w	r3, [r7, #112]	@ 0x70
 8008498:	2b02      	cmp	r3, #2
 800849a:	d10b      	bne.n	80084b4 <aux_register_test+0x196>
			   sideB_auxB_PECflag == 2 &&
 800849c:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 80084a0:	2b02      	cmp	r3, #2
 80084a2:	d107      	bne.n	80084b4 <aux_register_test+0x196>
			   sideB_auxC_PECflag == 2 &&
 80084a4:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 80084a8:	2b02      	cmp	r3, #2
 80084aa:	d103      	bne.n	80084b4 <aux_register_test+0x196>
			   sideB_auxD_PECflag == 2)
			{
				sideB_subAttempts = 13;
 80084ac:	230d      	movs	r3, #13
 80084ae:	f887 307c 	strb.w	r3, [r7, #124]	@ 0x7c
 80084b2:	e007      	b.n	80084c4 <aux_register_test+0x1a6>
			}
			else {
				sideB_subAttempts++;
 80084b4:	f897 307c 	ldrb.w	r3, [r7, #124]	@ 0x7c
 80084b8:	3301      	adds	r3, #1
 80084ba:	f887 307c 	strb.w	r3, [r7, #124]	@ 0x7c
				wait(1);
 80084be:	2001      	movs	r0, #1
 80084c0:	f002 f9a0 	bl	800a804 <wait>
		while(sideA_subAttempts < ATTEMPT_LIMIT || sideB_subAttempts < ATTEMPT_LIMIT) {
 80084c4:	f897 307d 	ldrb.w	r3, [r7, #125]	@ 0x7d
 80084c8:	2b09      	cmp	r3, #9
 80084ca:	f67f af38 	bls.w	800833e <aux_register_test+0x20>
 80084ce:	f897 307c 	ldrb.w	r3, [r7, #124]	@ 0x7c
 80084d2:	2b09      	cmp	r3, #9
 80084d4:	f67f af33 	bls.w	800833e <aux_register_test+0x20>
			}
		}
		if(sideA_subAttempts != 13) { error_loop(ERROR_PEC, 0, 0, SIDE_A); }
 80084d8:	f897 307d 	ldrb.w	r3, [r7, #125]	@ 0x7d
 80084dc:	2b0d      	cmp	r3, #13
 80084de:	d005      	beq.n	80084ec <aux_register_test+0x1ce>
 80084e0:	2301      	movs	r3, #1
 80084e2:	2200      	movs	r2, #0
 80084e4:	2100      	movs	r1, #0
 80084e6:	2056      	movs	r0, #86	@ 0x56
 80084e8:	f7fc fc86 	bl	8004df8 <error_loop>

		if(sideB_subAttempts != 13) { error_loop(ERROR_PEC, 0, 0, SIDE_B); }
 80084ec:	f897 307c 	ldrb.w	r3, [r7, #124]	@ 0x7c
 80084f0:	2b0d      	cmp	r3, #13
 80084f2:	d005      	beq.n	8008500 <aux_register_test+0x1e2>
 80084f4:	2300      	movs	r3, #0
 80084f6:	2200      	movs	r2, #0
 80084f8:	2100      	movs	r1, #0
 80084fa:	2056      	movs	r0, #86	@ 0x56
 80084fc:	f7fc fc7c 	bl	8004df8 <error_loop>

		sideA_gpio[0] = (sideA_auxA[1] << 8) | sideA_auxA[0];
 8008500:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 8008504:	b21b      	sxth	r3, r3
 8008506:	021b      	lsls	r3, r3, #8
 8008508:	b21a      	sxth	r2, r3
 800850a:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 800850e:	b21b      	sxth	r3, r3
 8008510:	4313      	orrs	r3, r2
 8008512:	b21b      	sxth	r3, r3
 8008514:	b29b      	uxth	r3, r3
 8008516:	f8a7 3058 	strh.w	r3, [r7, #88]	@ 0x58
		sideA_gpio[1] = (sideA_auxA[3] << 8) | sideA_auxA[2];
 800851a:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800851e:	b21b      	sxth	r3, r3
 8008520:	021b      	lsls	r3, r3, #8
 8008522:	b21a      	sxth	r2, r3
 8008524:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8008528:	b21b      	sxth	r3, r3
 800852a:	4313      	orrs	r3, r2
 800852c:	b21b      	sxth	r3, r3
 800852e:	b29b      	uxth	r3, r3
 8008530:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
		sideA_gpio[2] = (sideA_auxA[5] << 8) | sideA_auxA[4];
 8008534:	f897 3041 	ldrb.w	r3, [r7, #65]	@ 0x41
 8008538:	b21b      	sxth	r3, r3
 800853a:	021b      	lsls	r3, r3, #8
 800853c:	b21a      	sxth	r2, r3
 800853e:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8008542:	b21b      	sxth	r3, r3
 8008544:	4313      	orrs	r3, r2
 8008546:	b21b      	sxth	r3, r3
 8008548:	b29b      	uxth	r3, r3
 800854a:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c
		sideA_gpio[3] = (sideA_auxB[1] << 8) | sideA_auxB[0];
 800854e:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8008552:	b21b      	sxth	r3, r3
 8008554:	021b      	lsls	r3, r3, #8
 8008556:	b21a      	sxth	r2, r3
 8008558:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 800855c:	b21b      	sxth	r3, r3
 800855e:	4313      	orrs	r3, r2
 8008560:	b21b      	sxth	r3, r3
 8008562:	b29b      	uxth	r3, r3
 8008564:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
		sideA_gpio[4] = (sideA_auxB[3] << 8) | sideA_auxB[2];
 8008568:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800856c:	b21b      	sxth	r3, r3
 800856e:	021b      	lsls	r3, r3, #8
 8008570:	b21a      	sxth	r2, r3
 8008572:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8008576:	b21b      	sxth	r3, r3
 8008578:	4313      	orrs	r3, r2
 800857a:	b21b      	sxth	r3, r3
 800857c:	b29b      	uxth	r3, r3
 800857e:	f8a7 3060 	strh.w	r3, [r7, #96]	@ 0x60
		sideA_gpio[5] = (sideA_auxB[5] << 8) | sideA_auxB[4];
 8008582:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8008586:	b21b      	sxth	r3, r3
 8008588:	021b      	lsls	r3, r3, #8
 800858a:	b21a      	sxth	r2, r3
 800858c:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 8008590:	b21b      	sxth	r3, r3
 8008592:	4313      	orrs	r3, r2
 8008594:	b21b      	sxth	r3, r3
 8008596:	b29b      	uxth	r3, r3
 8008598:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
		sideA_gpio[6] = (sideA_auxC[1] << 8) | sideA_auxC[0];
 800859c:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 80085a0:	b21b      	sxth	r3, r3
 80085a2:	021b      	lsls	r3, r3, #8
 80085a4:	b21a      	sxth	r2, r3
 80085a6:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80085aa:	b21b      	sxth	r3, r3
 80085ac:	4313      	orrs	r3, r2
 80085ae:	b21b      	sxth	r3, r3
 80085b0:	b29b      	uxth	r3, r3
 80085b2:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
		sideA_gpio[7] = (sideA_auxC[3] << 8) | sideA_auxC[2];
 80085b6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80085ba:	b21b      	sxth	r3, r3
 80085bc:	021b      	lsls	r3, r3, #8
 80085be:	b21a      	sxth	r2, r3
 80085c0:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80085c4:	b21b      	sxth	r3, r3
 80085c6:	4313      	orrs	r3, r2
 80085c8:	b21b      	sxth	r3, r3
 80085ca:	b29b      	uxth	r3, r3
 80085cc:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
		sideA_gpio[8] = (sideA_auxC[5] << 8) | sideA_auxC[4];
 80085d0:	f897 3031 	ldrb.w	r3, [r7, #49]	@ 0x31
 80085d4:	b21b      	sxth	r3, r3
 80085d6:	021b      	lsls	r3, r3, #8
 80085d8:	b21a      	sxth	r2, r3
 80085da:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 80085de:	b21b      	sxth	r3, r3
 80085e0:	4313      	orrs	r3, r2
 80085e2:	b21b      	sxth	r3, r3
 80085e4:	b29b      	uxth	r3, r3
 80085e6:	f8a7 3068 	strh.w	r3, [r7, #104]	@ 0x68
		sideA_gpio[9] = (sideA_auxD[1] << 8) | sideA_auxD[0];
 80085ea:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80085ee:	b21b      	sxth	r3, r3
 80085f0:	021b      	lsls	r3, r3, #8
 80085f2:	b21a      	sxth	r2, r3
 80085f4:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80085f8:	b21b      	sxth	r3, r3
 80085fa:	4313      	orrs	r3, r2
 80085fc:	b21b      	sxth	r3, r3
 80085fe:	b29b      	uxth	r3, r3
 8008600:	f8a7 306a 	strh.w	r3, [r7, #106]	@ 0x6a

		sideB_gpio[0] = (sideB_auxA[1] << 8) | sideB_auxA[0];
 8008604:	7f7b      	ldrb	r3, [r7, #29]
 8008606:	b21b      	sxth	r3, r3
 8008608:	021b      	lsls	r3, r3, #8
 800860a:	b21a      	sxth	r2, r3
 800860c:	7f3b      	ldrb	r3, [r7, #28]
 800860e:	b21b      	sxth	r3, r3
 8008610:	4313      	orrs	r3, r2
 8008612:	b21b      	sxth	r3, r3
 8008614:	b29b      	uxth	r3, r3
 8008616:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
		sideB_gpio[1] = (sideB_auxA[3] << 8) | sideB_auxA[2];
 800861a:	7ffb      	ldrb	r3, [r7, #31]
 800861c:	b21b      	sxth	r3, r3
 800861e:	021b      	lsls	r3, r3, #8
 8008620:	b21a      	sxth	r2, r3
 8008622:	7fbb      	ldrb	r3, [r7, #30]
 8008624:	b21b      	sxth	r3, r3
 8008626:	4313      	orrs	r3, r2
 8008628:	b21b      	sxth	r3, r3
 800862a:	b29b      	uxth	r3, r3
 800862c:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
		sideB_gpio[2] = (sideB_auxA[5] << 8) | sideB_auxA[4];
 8008630:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8008634:	b21b      	sxth	r3, r3
 8008636:	021b      	lsls	r3, r3, #8
 8008638:	b21a      	sxth	r2, r3
 800863a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800863e:	b21b      	sxth	r3, r3
 8008640:	4313      	orrs	r3, r2
 8008642:	b21b      	sxth	r3, r3
 8008644:	b29b      	uxth	r3, r3
 8008646:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
		sideB_gpio[3] = (sideB_auxB[1] << 8) | sideB_auxB[0];
 800864a:	7d7b      	ldrb	r3, [r7, #21]
 800864c:	b21b      	sxth	r3, r3
 800864e:	021b      	lsls	r3, r3, #8
 8008650:	b21a      	sxth	r2, r3
 8008652:	7d3b      	ldrb	r3, [r7, #20]
 8008654:	b21b      	sxth	r3, r3
 8008656:	4313      	orrs	r3, r2
 8008658:	b21b      	sxth	r3, r3
 800865a:	b29b      	uxth	r3, r3
 800865c:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
		sideB_gpio[4] = (sideB_auxB[3] << 8) | sideB_auxB[2];
 8008660:	7dfb      	ldrb	r3, [r7, #23]
 8008662:	b21b      	sxth	r3, r3
 8008664:	021b      	lsls	r3, r3, #8
 8008666:	b21a      	sxth	r2, r3
 8008668:	7dbb      	ldrb	r3, [r7, #22]
 800866a:	b21b      	sxth	r3, r3
 800866c:	4313      	orrs	r3, r2
 800866e:	b21b      	sxth	r3, r3
 8008670:	b29b      	uxth	r3, r3
 8008672:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
		sideB_gpio[5] = (sideB_auxB[5] << 8) | sideB_auxB[4];
 8008676:	7e7b      	ldrb	r3, [r7, #25]
 8008678:	b21b      	sxth	r3, r3
 800867a:	021b      	lsls	r3, r3, #8
 800867c:	b21a      	sxth	r2, r3
 800867e:	7e3b      	ldrb	r3, [r7, #24]
 8008680:	b21b      	sxth	r3, r3
 8008682:	4313      	orrs	r3, r2
 8008684:	b21b      	sxth	r3, r3
 8008686:	b29b      	uxth	r3, r3
 8008688:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
		sideB_gpio[6] = (sideB_auxC[1] << 8) | sideB_auxC[0];
 800868c:	7b7b      	ldrb	r3, [r7, #13]
 800868e:	b21b      	sxth	r3, r3
 8008690:	021b      	lsls	r3, r3, #8
 8008692:	b21a      	sxth	r2, r3
 8008694:	7b3b      	ldrb	r3, [r7, #12]
 8008696:	b21b      	sxth	r3, r3
 8008698:	4313      	orrs	r3, r2
 800869a:	b21b      	sxth	r3, r3
 800869c:	b29b      	uxth	r3, r3
 800869e:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
		sideB_gpio[7] = (sideB_auxC[3] << 8) | sideB_auxC[2];
 80086a2:	7bfb      	ldrb	r3, [r7, #15]
 80086a4:	b21b      	sxth	r3, r3
 80086a6:	021b      	lsls	r3, r3, #8
 80086a8:	b21a      	sxth	r2, r3
 80086aa:	7bbb      	ldrb	r3, [r7, #14]
 80086ac:	b21b      	sxth	r3, r3
 80086ae:	4313      	orrs	r3, r2
 80086b0:	b21b      	sxth	r3, r3
 80086b2:	b29b      	uxth	r3, r3
 80086b4:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
		sideB_gpio[8] = (sideB_auxC[5] << 8) | sideB_auxC[4];
 80086b8:	7c7b      	ldrb	r3, [r7, #17]
 80086ba:	b21b      	sxth	r3, r3
 80086bc:	021b      	lsls	r3, r3, #8
 80086be:	b21a      	sxth	r2, r3
 80086c0:	7c3b      	ldrb	r3, [r7, #16]
 80086c2:	b21b      	sxth	r3, r3
 80086c4:	4313      	orrs	r3, r2
 80086c6:	b21b      	sxth	r3, r3
 80086c8:	b29b      	uxth	r3, r3
 80086ca:	f8a7 3054 	strh.w	r3, [r7, #84]	@ 0x54
		sideB_gpio[9] = (sideB_auxD[1] << 8) | sideB_auxD[0];
 80086ce:	797b      	ldrb	r3, [r7, #5]
 80086d0:	b21b      	sxth	r3, r3
 80086d2:	021b      	lsls	r3, r3, #8
 80086d4:	b21a      	sxth	r2, r3
 80086d6:	793b      	ldrb	r3, [r7, #4]
 80086d8:	b21b      	sxth	r3, r3
 80086da:	4313      	orrs	r3, r2
 80086dc:	b21b      	sxth	r3, r3
 80086de:	b29b      	uxth	r3, r3
 80086e0:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56

		uint8_t sideA_badOutputFlag = 0;
 80086e4:	2300      	movs	r3, #0
 80086e6:	f887 307b 	strb.w	r3, [r7, #123]	@ 0x7b
		uint8_t sideB_badOutputFlag = 0;
 80086ea:	2300      	movs	r3, #0
 80086ec:	f887 307a 	strb.w	r3, [r7, #122]	@ 0x7a

		for(uint8_t i = 0; i < 10; i++) {
 80086f0:	2300      	movs	r3, #0
 80086f2:	f887 3079 	strb.w	r3, [r7, #121]	@ 0x79
 80086f6:	e020      	b.n	800873a <aux_register_test+0x41c>
			if(sideA_gpio[i] != 0x9555) { sideA_badOutputFlag = 1; }
 80086f8:	f897 3079 	ldrb.w	r3, [r7, #121]	@ 0x79
 80086fc:	005b      	lsls	r3, r3, #1
 80086fe:	3380      	adds	r3, #128	@ 0x80
 8008700:	443b      	add	r3, r7
 8008702:	f833 3c28 	ldrh.w	r3, [r3, #-40]
 8008706:	f249 5255 	movw	r2, #38229	@ 0x9555
 800870a:	4293      	cmp	r3, r2
 800870c:	d002      	beq.n	8008714 <aux_register_test+0x3f6>
 800870e:	2301      	movs	r3, #1
 8008710:	f887 307b 	strb.w	r3, [r7, #123]	@ 0x7b

			if(sideB_gpio[i] != 0x9555) { sideB_badOutputFlag = 1; }
 8008714:	f897 3079 	ldrb.w	r3, [r7, #121]	@ 0x79
 8008718:	005b      	lsls	r3, r3, #1
 800871a:	3380      	adds	r3, #128	@ 0x80
 800871c:	443b      	add	r3, r7
 800871e:	f833 3c3c 	ldrh.w	r3, [r3, #-60]
 8008722:	f249 5255 	movw	r2, #38229	@ 0x9555
 8008726:	4293      	cmp	r3, r2
 8008728:	d002      	beq.n	8008730 <aux_register_test+0x412>
 800872a:	2301      	movs	r3, #1
 800872c:	f887 307a 	strb.w	r3, [r7, #122]	@ 0x7a
		for(uint8_t i = 0; i < 10; i++) {
 8008730:	f897 3079 	ldrb.w	r3, [r7, #121]	@ 0x79
 8008734:	3301      	adds	r3, #1
 8008736:	f887 3079 	strb.w	r3, [r7, #121]	@ 0x79
 800873a:	f897 3079 	ldrb.w	r3, [r7, #121]	@ 0x79
 800873e:	2b09      	cmp	r3, #9
 8008740:	d9da      	bls.n	80086f8 <aux_register_test+0x3da>
		}

		if(!sideA_badOutputFlag) { sideA_attempts = 13; }
 8008742:	f897 307b 	ldrb.w	r3, [r7, #123]	@ 0x7b
 8008746:	2b00      	cmp	r3, #0
 8008748:	d103      	bne.n	8008752 <aux_register_test+0x434>
 800874a:	230d      	movs	r3, #13
 800874c:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8008750:	e00d      	b.n	800876e <aux_register_test+0x450>

		else {
			sideA_attempts++;
 8008752:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8008756:	3301      	adds	r3, #1
 8008758:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
			sideA_subAttempts = 0;
 800875c:	2300      	movs	r3, #0
 800875e:	f887 307d 	strb.w	r3, [r7, #125]	@ 0x7d
			sideB_subAttempts = 0;
 8008762:	2300      	movs	r3, #0
 8008764:	f887 307c 	strb.w	r3, [r7, #124]	@ 0x7c
			wait(1);
 8008768:	2001      	movs	r0, #1
 800876a:	f002 f84b 	bl	800a804 <wait>
		}

		if(!sideB_badOutputFlag) { sideB_attempts = 13; }
 800876e:	f897 307a 	ldrb.w	r3, [r7, #122]	@ 0x7a
 8008772:	2b00      	cmp	r3, #0
 8008774:	d103      	bne.n	800877e <aux_register_test+0x460>
 8008776:	230d      	movs	r3, #13
 8008778:	f887 307e 	strb.w	r3, [r7, #126]	@ 0x7e
 800877c:	e00d      	b.n	800879a <aux_register_test+0x47c>

		else {
			sideB_attempts++;
 800877e:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 8008782:	3301      	adds	r3, #1
 8008784:	f887 307e 	strb.w	r3, [r7, #126]	@ 0x7e
			sideA_subAttempts = 0;
 8008788:	2300      	movs	r3, #0
 800878a:	f887 307d 	strb.w	r3, [r7, #125]	@ 0x7d
			sideB_subAttempts = 0;
 800878e:	2300      	movs	r3, #0
 8008790:	f887 307c 	strb.w	r3, [r7, #124]	@ 0x7c
			wait(1);
 8008794:	2001      	movs	r0, #1
 8008796:	f002 f835 	bl	800a804 <wait>
	while(sideA_attempts < ATTEMPT_LIMIT || sideB_attempts < ATTEMPT_LIMIT) {
 800879a:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800879e:	2b09      	cmp	r3, #9
 80087a0:	f67f ae90 	bls.w	80084c4 <aux_register_test+0x1a6>
 80087a4:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 80087a8:	2b09      	cmp	r3, #9
 80087aa:	f67f ae8b 	bls.w	80084c4 <aux_register_test+0x1a6>
		}
	}
	if(sideA_attempts != 13) { error_loop(ERROR_AXST, 0, 0, SIDE_A); }
 80087ae:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 80087b2:	2b0d      	cmp	r3, #13
 80087b4:	d005      	beq.n	80087c2 <aux_register_test+0x4a4>
 80087b6:	2301      	movs	r3, #1
 80087b8:	2200      	movs	r2, #0
 80087ba:	2100      	movs	r1, #0
 80087bc:	204e      	movs	r0, #78	@ 0x4e
 80087be:	f7fc fb1b 	bl	8004df8 <error_loop>

	if(sideB_attempts != 13) { error_loop(ERROR_AXST, 0, 0, SIDE_B); }
 80087c2:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 80087c6:	2b0d      	cmp	r3, #13
 80087c8:	d005      	beq.n	80087d6 <aux_register_test+0x4b8>
 80087ca:	2300      	movs	r3, #0
 80087cc:	2200      	movs	r2, #0
 80087ce:	2100      	movs	r1, #0
 80087d0:	204e      	movs	r0, #78	@ 0x4e
 80087d2:	f7fc fb11 	bl	8004df8 <error_loop>

	// Test with second variant of AXST command
	sideA_attempts = 0;
 80087d6:	2300      	movs	r3, #0
 80087d8:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
	sideB_attempts = 0;
 80087dc:	2300      	movs	r3, #0
 80087de:	f887 307e 	strb.w	r3, [r7, #126]	@ 0x7e
	sideA_subAttempts = 0;
 80087e2:	2300      	movs	r3, #0
 80087e4:	f887 307d 	strb.w	r3, [r7, #125]	@ 0x7d
	sideB_subAttempts = 0;
 80087e8:	2300      	movs	r3, #0
 80087ea:	f887 307c 	strb.w	r3, [r7, #124]	@ 0x7c
	while(sideA_attempts < ATTEMPT_LIMIT || sideB_attempts < ATTEMPT_LIMIT) {
 80087ee:	e22d      	b.n	8008c4c <aux_register_test+0x92e>
		while(sideA_subAttempts < ATTEMPT_LIMIT || sideB_subAttempts < ATTEMPT_LIMIT) {
			CLRAUX(SIDE_A);
 80087f0:	2001      	movs	r0, #1
 80087f2:	f001 f96e 	bl	8009ad2 <CLRAUX>
			CLRAUX(SIDE_B);
 80087f6:	2000      	movs	r0, #0
 80087f8:	f001 f96b 	bl	8009ad2 <CLRAUX>
			wait(3);
 80087fc:	2003      	movs	r0, #3
 80087fe:	f002 f801 	bl	800a804 <wait>

			AXST(0, SIDE_A);
 8008802:	2101      	movs	r1, #1
 8008804:	2000      	movs	r0, #0
 8008806:	f001 f87c 	bl	8009902 <AXST>
			AXST(0, SIDE_B);
 800880a:	2100      	movs	r1, #0
 800880c:	2000      	movs	r0, #0
 800880e:	f001 f878 	bl	8009902 <AXST>
			wait(3);
 8008812:	2003      	movs	r0, #3
 8008814:	f001 fff6 	bl	800a804 <wait>

			RDAUXA(sideA_auxA, SIDE_A);
 8008818:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800881c:	2101      	movs	r1, #1
 800881e:	4618      	mov	r0, r3
 8008820:	f000 ff3c 	bl	800969c <RDAUXA>
			RDAUXA(sideB_auxA, SIDE_B);
 8008824:	f107 031c 	add.w	r3, r7, #28
 8008828:	2100      	movs	r1, #0
 800882a:	4618      	mov	r0, r3
 800882c:	f000 ff36 	bl	800969c <RDAUXA>
			wait(1);
 8008830:	2001      	movs	r0, #1
 8008832:	f001 ffe7 	bl	800a804 <wait>
			RDAUXB(sideA_auxB, SIDE_A);
 8008836:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800883a:	2101      	movs	r1, #1
 800883c:	4618      	mov	r0, r3
 800883e:	f000 ff51 	bl	80096e4 <RDAUXB>
			RDAUXB(sideB_auxB, SIDE_B);
 8008842:	f107 0314 	add.w	r3, r7, #20
 8008846:	2100      	movs	r1, #0
 8008848:	4618      	mov	r0, r3
 800884a:	f000 ff4b 	bl	80096e4 <RDAUXB>
			wait(1);
 800884e:	2001      	movs	r0, #1
 8008850:	f001 ffd8 	bl	800a804 <wait>
			RDAUXC(sideA_auxC, SIDE_A);
 8008854:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8008858:	2101      	movs	r1, #1
 800885a:	4618      	mov	r0, r3
 800885c:	f000 ff66 	bl	800972c <RDAUXC>
			RDAUXC(sideB_auxC, SIDE_B);
 8008860:	f107 030c 	add.w	r3, r7, #12
 8008864:	2100      	movs	r1, #0
 8008866:	4618      	mov	r0, r3
 8008868:	f000 ff60 	bl	800972c <RDAUXC>
			wait(1);
 800886c:	2001      	movs	r0, #1
 800886e:	f001 ffc9 	bl	800a804 <wait>
			RDAUXD(sideA_auxD, SIDE_A);
 8008872:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008876:	2101      	movs	r1, #1
 8008878:	4618      	mov	r0, r3
 800887a:	f000 ff7b 	bl	8009774 <RDAUXD>
			RDAUXD(sideB_auxD, SIDE_B);
 800887e:	1d3b      	adds	r3, r7, #4
 8008880:	2100      	movs	r1, #0
 8008882:	4618      	mov	r0, r3
 8008884:	f000 ff76 	bl	8009774 <RDAUXD>

			sideA_auxA_PECflag = verify_PEC15(sideA_auxA);
 8008888:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800888c:	4618      	mov	r0, r3
 800888e:	f000 fc3c 	bl	800910a <verify_PEC15>
 8008892:	4603      	mov	r3, r0
 8008894:	f887 3075 	strb.w	r3, [r7, #117]	@ 0x75
			sideA_auxB_PECflag = verify_PEC15(sideA_auxB);
 8008898:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800889c:	4618      	mov	r0, r3
 800889e:	f000 fc34 	bl	800910a <verify_PEC15>
 80088a2:	4603      	mov	r3, r0
 80088a4:	f887 3074 	strb.w	r3, [r7, #116]	@ 0x74
			sideA_auxC_PECflag = verify_PEC15(sideA_auxC);
 80088a8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80088ac:	4618      	mov	r0, r3
 80088ae:	f000 fc2c 	bl	800910a <verify_PEC15>
 80088b2:	4603      	mov	r3, r0
 80088b4:	f887 3073 	strb.w	r3, [r7, #115]	@ 0x73
			sideA_auxD_PECflag = verify_PEC15(sideA_auxD);
 80088b8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80088bc:	4618      	mov	r0, r3
 80088be:	f000 fc24 	bl	800910a <verify_PEC15>
 80088c2:	4603      	mov	r3, r0
 80088c4:	f887 3072 	strb.w	r3, [r7, #114]	@ 0x72

			sideB_auxA_PECflag = verify_PEC15(sideB_auxA);
 80088c8:	f107 031c 	add.w	r3, r7, #28
 80088cc:	4618      	mov	r0, r3
 80088ce:	f000 fc1c 	bl	800910a <verify_PEC15>
 80088d2:	4603      	mov	r3, r0
 80088d4:	f887 3071 	strb.w	r3, [r7, #113]	@ 0x71
			sideB_auxB_PECflag = verify_PEC15(sideB_auxB);
 80088d8:	f107 0314 	add.w	r3, r7, #20
 80088dc:	4618      	mov	r0, r3
 80088de:	f000 fc14 	bl	800910a <verify_PEC15>
 80088e2:	4603      	mov	r3, r0
 80088e4:	f887 3070 	strb.w	r3, [r7, #112]	@ 0x70
			sideB_auxC_PECflag = verify_PEC15(sideB_auxC);
 80088e8:	f107 030c 	add.w	r3, r7, #12
 80088ec:	4618      	mov	r0, r3
 80088ee:	f000 fc0c 	bl	800910a <verify_PEC15>
 80088f2:	4603      	mov	r3, r0
 80088f4:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
			sideB_auxD_PECflag = verify_PEC15(sideB_auxD);
 80088f8:	1d3b      	adds	r3, r7, #4
 80088fa:	4618      	mov	r0, r3
 80088fc:	f000 fc05 	bl	800910a <verify_PEC15>
 8008900:	4603      	mov	r3, r0
 8008902:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e

			if(sideA_auxA_PECflag == 2 &&
 8008906:	f897 3075 	ldrb.w	r3, [r7, #117]	@ 0x75
 800890a:	2b02      	cmp	r3, #2
 800890c:	d10f      	bne.n	800892e <aux_register_test+0x610>
 800890e:	f897 3074 	ldrb.w	r3, [r7, #116]	@ 0x74
 8008912:	2b02      	cmp	r3, #2
 8008914:	d10b      	bne.n	800892e <aux_register_test+0x610>
			   sideA_auxB_PECflag == 2 &&
 8008916:	f897 3073 	ldrb.w	r3, [r7, #115]	@ 0x73
 800891a:	2b02      	cmp	r3, #2
 800891c:	d107      	bne.n	800892e <aux_register_test+0x610>
			   sideA_auxC_PECflag == 2 &&
 800891e:	f897 3072 	ldrb.w	r3, [r7, #114]	@ 0x72
 8008922:	2b02      	cmp	r3, #2
 8008924:	d103      	bne.n	800892e <aux_register_test+0x610>
			   sideA_auxD_PECflag == 2)
			{
				sideA_subAttempts = 13;
 8008926:	230d      	movs	r3, #13
 8008928:	f887 307d 	strb.w	r3, [r7, #125]	@ 0x7d
 800892c:	e007      	b.n	800893e <aux_register_test+0x620>
			}
			else {
				sideA_subAttempts++;
 800892e:	f897 307d 	ldrb.w	r3, [r7, #125]	@ 0x7d
 8008932:	3301      	adds	r3, #1
 8008934:	f887 307d 	strb.w	r3, [r7, #125]	@ 0x7d
				wait(1);
 8008938:	2001      	movs	r0, #1
 800893a:	f001 ff63 	bl	800a804 <wait>
			}

			if(sideB_auxA_PECflag == 2 &&
 800893e:	f897 3071 	ldrb.w	r3, [r7, #113]	@ 0x71
 8008942:	2b02      	cmp	r3, #2
 8008944:	d10f      	bne.n	8008966 <aux_register_test+0x648>
 8008946:	f897 3070 	ldrb.w	r3, [r7, #112]	@ 0x70
 800894a:	2b02      	cmp	r3, #2
 800894c:	d10b      	bne.n	8008966 <aux_register_test+0x648>
			   sideB_auxB_PECflag == 2 &&
 800894e:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8008952:	2b02      	cmp	r3, #2
 8008954:	d107      	bne.n	8008966 <aux_register_test+0x648>
			   sideB_auxC_PECflag == 2 &&
 8008956:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 800895a:	2b02      	cmp	r3, #2
 800895c:	d103      	bne.n	8008966 <aux_register_test+0x648>
			   sideB_auxD_PECflag == 2)
			{
				sideB_subAttempts = 13;
 800895e:	230d      	movs	r3, #13
 8008960:	f887 307c 	strb.w	r3, [r7, #124]	@ 0x7c
 8008964:	e007      	b.n	8008976 <aux_register_test+0x658>
			}
			else {
				sideB_subAttempts++;
 8008966:	f897 307c 	ldrb.w	r3, [r7, #124]	@ 0x7c
 800896a:	3301      	adds	r3, #1
 800896c:	f887 307c 	strb.w	r3, [r7, #124]	@ 0x7c
				wait(1);
 8008970:	2001      	movs	r0, #1
 8008972:	f001 ff47 	bl	800a804 <wait>
		while(sideA_subAttempts < ATTEMPT_LIMIT || sideB_subAttempts < ATTEMPT_LIMIT) {
 8008976:	f897 307d 	ldrb.w	r3, [r7, #125]	@ 0x7d
 800897a:	2b09      	cmp	r3, #9
 800897c:	f67f af38 	bls.w	80087f0 <aux_register_test+0x4d2>
 8008980:	f897 307c 	ldrb.w	r3, [r7, #124]	@ 0x7c
 8008984:	2b09      	cmp	r3, #9
 8008986:	f67f af33 	bls.w	80087f0 <aux_register_test+0x4d2>
			}
		}
		if(sideA_subAttempts != 13) { error_loop(ERROR_PEC, 0, 0, SIDE_A); }
 800898a:	f897 307d 	ldrb.w	r3, [r7, #125]	@ 0x7d
 800898e:	2b0d      	cmp	r3, #13
 8008990:	d005      	beq.n	800899e <aux_register_test+0x680>
 8008992:	2301      	movs	r3, #1
 8008994:	2200      	movs	r2, #0
 8008996:	2100      	movs	r1, #0
 8008998:	2056      	movs	r0, #86	@ 0x56
 800899a:	f7fc fa2d 	bl	8004df8 <error_loop>

		if(sideB_subAttempts != 13) { error_loop(ERROR_PEC, 0, 0, SIDE_B); }
 800899e:	f897 307c 	ldrb.w	r3, [r7, #124]	@ 0x7c
 80089a2:	2b0d      	cmp	r3, #13
 80089a4:	d005      	beq.n	80089b2 <aux_register_test+0x694>
 80089a6:	2300      	movs	r3, #0
 80089a8:	2200      	movs	r2, #0
 80089aa:	2100      	movs	r1, #0
 80089ac:	2056      	movs	r0, #86	@ 0x56
 80089ae:	f7fc fa23 	bl	8004df8 <error_loop>

		sideA_gpio[0] = (sideA_auxA[1] << 8) | sideA_auxA[0];
 80089b2:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 80089b6:	b21b      	sxth	r3, r3
 80089b8:	021b      	lsls	r3, r3, #8
 80089ba:	b21a      	sxth	r2, r3
 80089bc:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 80089c0:	b21b      	sxth	r3, r3
 80089c2:	4313      	orrs	r3, r2
 80089c4:	b21b      	sxth	r3, r3
 80089c6:	b29b      	uxth	r3, r3
 80089c8:	f8a7 3058 	strh.w	r3, [r7, #88]	@ 0x58
		sideA_gpio[1] = (sideA_auxA[3] << 8) | sideA_auxA[2];
 80089cc:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80089d0:	b21b      	sxth	r3, r3
 80089d2:	021b      	lsls	r3, r3, #8
 80089d4:	b21a      	sxth	r2, r3
 80089d6:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 80089da:	b21b      	sxth	r3, r3
 80089dc:	4313      	orrs	r3, r2
 80089de:	b21b      	sxth	r3, r3
 80089e0:	b29b      	uxth	r3, r3
 80089e2:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
		sideA_gpio[2] = (sideA_auxA[5] << 8) | sideA_auxA[4];
 80089e6:	f897 3041 	ldrb.w	r3, [r7, #65]	@ 0x41
 80089ea:	b21b      	sxth	r3, r3
 80089ec:	021b      	lsls	r3, r3, #8
 80089ee:	b21a      	sxth	r2, r3
 80089f0:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 80089f4:	b21b      	sxth	r3, r3
 80089f6:	4313      	orrs	r3, r2
 80089f8:	b21b      	sxth	r3, r3
 80089fa:	b29b      	uxth	r3, r3
 80089fc:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c
		sideA_gpio[3] = (sideA_auxB[1] << 8) | sideA_auxB[0];
 8008a00:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8008a04:	b21b      	sxth	r3, r3
 8008a06:	021b      	lsls	r3, r3, #8
 8008a08:	b21a      	sxth	r2, r3
 8008a0a:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8008a0e:	b21b      	sxth	r3, r3
 8008a10:	4313      	orrs	r3, r2
 8008a12:	b21b      	sxth	r3, r3
 8008a14:	b29b      	uxth	r3, r3
 8008a16:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
		sideA_gpio[4] = (sideA_auxB[3] << 8) | sideA_auxB[2];
 8008a1a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8008a1e:	b21b      	sxth	r3, r3
 8008a20:	021b      	lsls	r3, r3, #8
 8008a22:	b21a      	sxth	r2, r3
 8008a24:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8008a28:	b21b      	sxth	r3, r3
 8008a2a:	4313      	orrs	r3, r2
 8008a2c:	b21b      	sxth	r3, r3
 8008a2e:	b29b      	uxth	r3, r3
 8008a30:	f8a7 3060 	strh.w	r3, [r7, #96]	@ 0x60
		sideA_gpio[5] = (sideA_auxB[5] << 8) | sideA_auxB[4];
 8008a34:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8008a38:	b21b      	sxth	r3, r3
 8008a3a:	021b      	lsls	r3, r3, #8
 8008a3c:	b21a      	sxth	r2, r3
 8008a3e:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 8008a42:	b21b      	sxth	r3, r3
 8008a44:	4313      	orrs	r3, r2
 8008a46:	b21b      	sxth	r3, r3
 8008a48:	b29b      	uxth	r3, r3
 8008a4a:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
		sideA_gpio[6] = (sideA_auxC[1] << 8) | sideA_auxC[0];
 8008a4e:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8008a52:	b21b      	sxth	r3, r3
 8008a54:	021b      	lsls	r3, r3, #8
 8008a56:	b21a      	sxth	r2, r3
 8008a58:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8008a5c:	b21b      	sxth	r3, r3
 8008a5e:	4313      	orrs	r3, r2
 8008a60:	b21b      	sxth	r3, r3
 8008a62:	b29b      	uxth	r3, r3
 8008a64:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
		sideA_gpio[7] = (sideA_auxC[3] << 8) | sideA_auxC[2];
 8008a68:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008a6c:	b21b      	sxth	r3, r3
 8008a6e:	021b      	lsls	r3, r3, #8
 8008a70:	b21a      	sxth	r2, r3
 8008a72:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8008a76:	b21b      	sxth	r3, r3
 8008a78:	4313      	orrs	r3, r2
 8008a7a:	b21b      	sxth	r3, r3
 8008a7c:	b29b      	uxth	r3, r3
 8008a7e:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
		sideA_gpio[8] = (sideA_auxC[5] << 8) | sideA_auxC[4];
 8008a82:	f897 3031 	ldrb.w	r3, [r7, #49]	@ 0x31
 8008a86:	b21b      	sxth	r3, r3
 8008a88:	021b      	lsls	r3, r3, #8
 8008a8a:	b21a      	sxth	r2, r3
 8008a8c:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8008a90:	b21b      	sxth	r3, r3
 8008a92:	4313      	orrs	r3, r2
 8008a94:	b21b      	sxth	r3, r3
 8008a96:	b29b      	uxth	r3, r3
 8008a98:	f8a7 3068 	strh.w	r3, [r7, #104]	@ 0x68
		sideA_gpio[9] = (sideA_auxD[1] << 8) | sideA_auxD[0];
 8008a9c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8008aa0:	b21b      	sxth	r3, r3
 8008aa2:	021b      	lsls	r3, r3, #8
 8008aa4:	b21a      	sxth	r2, r3
 8008aa6:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8008aaa:	b21b      	sxth	r3, r3
 8008aac:	4313      	orrs	r3, r2
 8008aae:	b21b      	sxth	r3, r3
 8008ab0:	b29b      	uxth	r3, r3
 8008ab2:	f8a7 306a 	strh.w	r3, [r7, #106]	@ 0x6a

		sideB_gpio[0] = (sideB_auxA[1] << 8) | sideB_auxA[0];
 8008ab6:	7f7b      	ldrb	r3, [r7, #29]
 8008ab8:	b21b      	sxth	r3, r3
 8008aba:	021b      	lsls	r3, r3, #8
 8008abc:	b21a      	sxth	r2, r3
 8008abe:	7f3b      	ldrb	r3, [r7, #28]
 8008ac0:	b21b      	sxth	r3, r3
 8008ac2:	4313      	orrs	r3, r2
 8008ac4:	b21b      	sxth	r3, r3
 8008ac6:	b29b      	uxth	r3, r3
 8008ac8:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
		sideB_gpio[1] = (sideB_auxA[3] << 8) | sideB_auxA[2];
 8008acc:	7ffb      	ldrb	r3, [r7, #31]
 8008ace:	b21b      	sxth	r3, r3
 8008ad0:	021b      	lsls	r3, r3, #8
 8008ad2:	b21a      	sxth	r2, r3
 8008ad4:	7fbb      	ldrb	r3, [r7, #30]
 8008ad6:	b21b      	sxth	r3, r3
 8008ad8:	4313      	orrs	r3, r2
 8008ada:	b21b      	sxth	r3, r3
 8008adc:	b29b      	uxth	r3, r3
 8008ade:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
		sideB_gpio[2] = (sideB_auxA[5] << 8) | sideB_auxA[4];
 8008ae2:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8008ae6:	b21b      	sxth	r3, r3
 8008ae8:	021b      	lsls	r3, r3, #8
 8008aea:	b21a      	sxth	r2, r3
 8008aec:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008af0:	b21b      	sxth	r3, r3
 8008af2:	4313      	orrs	r3, r2
 8008af4:	b21b      	sxth	r3, r3
 8008af6:	b29b      	uxth	r3, r3
 8008af8:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
		sideB_gpio[3] = (sideB_auxB[1] << 8) | sideB_auxB[0];
 8008afc:	7d7b      	ldrb	r3, [r7, #21]
 8008afe:	b21b      	sxth	r3, r3
 8008b00:	021b      	lsls	r3, r3, #8
 8008b02:	b21a      	sxth	r2, r3
 8008b04:	7d3b      	ldrb	r3, [r7, #20]
 8008b06:	b21b      	sxth	r3, r3
 8008b08:	4313      	orrs	r3, r2
 8008b0a:	b21b      	sxth	r3, r3
 8008b0c:	b29b      	uxth	r3, r3
 8008b0e:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
		sideB_gpio[4] = (sideB_auxB[3] << 8) | sideB_auxB[2];
 8008b12:	7dfb      	ldrb	r3, [r7, #23]
 8008b14:	b21b      	sxth	r3, r3
 8008b16:	021b      	lsls	r3, r3, #8
 8008b18:	b21a      	sxth	r2, r3
 8008b1a:	7dbb      	ldrb	r3, [r7, #22]
 8008b1c:	b21b      	sxth	r3, r3
 8008b1e:	4313      	orrs	r3, r2
 8008b20:	b21b      	sxth	r3, r3
 8008b22:	b29b      	uxth	r3, r3
 8008b24:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
		sideB_gpio[5] = (sideB_auxB[5] << 8) | sideB_auxB[4];
 8008b28:	7e7b      	ldrb	r3, [r7, #25]
 8008b2a:	b21b      	sxth	r3, r3
 8008b2c:	021b      	lsls	r3, r3, #8
 8008b2e:	b21a      	sxth	r2, r3
 8008b30:	7e3b      	ldrb	r3, [r7, #24]
 8008b32:	b21b      	sxth	r3, r3
 8008b34:	4313      	orrs	r3, r2
 8008b36:	b21b      	sxth	r3, r3
 8008b38:	b29b      	uxth	r3, r3
 8008b3a:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
		sideB_gpio[6] = (sideB_auxC[1] << 8) | sideB_auxC[0];
 8008b3e:	7b7b      	ldrb	r3, [r7, #13]
 8008b40:	b21b      	sxth	r3, r3
 8008b42:	021b      	lsls	r3, r3, #8
 8008b44:	b21a      	sxth	r2, r3
 8008b46:	7b3b      	ldrb	r3, [r7, #12]
 8008b48:	b21b      	sxth	r3, r3
 8008b4a:	4313      	orrs	r3, r2
 8008b4c:	b21b      	sxth	r3, r3
 8008b4e:	b29b      	uxth	r3, r3
 8008b50:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
		sideB_gpio[7] = (sideB_auxC[3] << 8) | sideB_auxC[2];
 8008b54:	7bfb      	ldrb	r3, [r7, #15]
 8008b56:	b21b      	sxth	r3, r3
 8008b58:	021b      	lsls	r3, r3, #8
 8008b5a:	b21a      	sxth	r2, r3
 8008b5c:	7bbb      	ldrb	r3, [r7, #14]
 8008b5e:	b21b      	sxth	r3, r3
 8008b60:	4313      	orrs	r3, r2
 8008b62:	b21b      	sxth	r3, r3
 8008b64:	b29b      	uxth	r3, r3
 8008b66:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
		sideB_gpio[8] = (sideB_auxC[5] << 8) | sideB_auxC[4];
 8008b6a:	7c7b      	ldrb	r3, [r7, #17]
 8008b6c:	b21b      	sxth	r3, r3
 8008b6e:	021b      	lsls	r3, r3, #8
 8008b70:	b21a      	sxth	r2, r3
 8008b72:	7c3b      	ldrb	r3, [r7, #16]
 8008b74:	b21b      	sxth	r3, r3
 8008b76:	4313      	orrs	r3, r2
 8008b78:	b21b      	sxth	r3, r3
 8008b7a:	b29b      	uxth	r3, r3
 8008b7c:	f8a7 3054 	strh.w	r3, [r7, #84]	@ 0x54
		sideB_gpio[9] = (sideB_auxD[1] << 8) | sideB_auxD[0];
 8008b80:	797b      	ldrb	r3, [r7, #5]
 8008b82:	b21b      	sxth	r3, r3
 8008b84:	021b      	lsls	r3, r3, #8
 8008b86:	b21a      	sxth	r2, r3
 8008b88:	793b      	ldrb	r3, [r7, #4]
 8008b8a:	b21b      	sxth	r3, r3
 8008b8c:	4313      	orrs	r3, r2
 8008b8e:	b21b      	sxth	r3, r3
 8008b90:	b29b      	uxth	r3, r3
 8008b92:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56

		uint8_t sideA_badOutputFlag = 0;
 8008b96:	2300      	movs	r3, #0
 8008b98:	f887 3078 	strb.w	r3, [r7, #120]	@ 0x78
		uint8_t sideB_badOutputFlag = 0;
 8008b9c:	2300      	movs	r3, #0
 8008b9e:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77

		for(uint8_t i = 0; i < 10; i++) {
 8008ba2:	2300      	movs	r3, #0
 8008ba4:	f887 3076 	strb.w	r3, [r7, #118]	@ 0x76
 8008ba8:	e020      	b.n	8008bec <aux_register_test+0x8ce>
			if(sideA_gpio[i] != 0x6AAA) { sideA_badOutputFlag = 1; }
 8008baa:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 8008bae:	005b      	lsls	r3, r3, #1
 8008bb0:	3380      	adds	r3, #128	@ 0x80
 8008bb2:	443b      	add	r3, r7
 8008bb4:	f833 3c28 	ldrh.w	r3, [r3, #-40]
 8008bb8:	f646 22aa 	movw	r2, #27306	@ 0x6aaa
 8008bbc:	4293      	cmp	r3, r2
 8008bbe:	d002      	beq.n	8008bc6 <aux_register_test+0x8a8>
 8008bc0:	2301      	movs	r3, #1
 8008bc2:	f887 3078 	strb.w	r3, [r7, #120]	@ 0x78

			if(sideB_gpio[i] != 0x6AAA) { sideB_badOutputFlag = 1; }
 8008bc6:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 8008bca:	005b      	lsls	r3, r3, #1
 8008bcc:	3380      	adds	r3, #128	@ 0x80
 8008bce:	443b      	add	r3, r7
 8008bd0:	f833 3c3c 	ldrh.w	r3, [r3, #-60]
 8008bd4:	f646 22aa 	movw	r2, #27306	@ 0x6aaa
 8008bd8:	4293      	cmp	r3, r2
 8008bda:	d002      	beq.n	8008be2 <aux_register_test+0x8c4>
 8008bdc:	2301      	movs	r3, #1
 8008bde:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
		for(uint8_t i = 0; i < 10; i++) {
 8008be2:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 8008be6:	3301      	adds	r3, #1
 8008be8:	f887 3076 	strb.w	r3, [r7, #118]	@ 0x76
 8008bec:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 8008bf0:	2b09      	cmp	r3, #9
 8008bf2:	d9da      	bls.n	8008baa <aux_register_test+0x88c>
		}

		if(!sideA_badOutputFlag) { sideA_attempts = 13; }
 8008bf4:	f897 3078 	ldrb.w	r3, [r7, #120]	@ 0x78
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d103      	bne.n	8008c04 <aux_register_test+0x8e6>
 8008bfc:	230d      	movs	r3, #13
 8008bfe:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8008c02:	e00d      	b.n	8008c20 <aux_register_test+0x902>

		else {
			sideA_attempts++;
 8008c04:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8008c08:	3301      	adds	r3, #1
 8008c0a:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
			sideA_subAttempts = 0;
 8008c0e:	2300      	movs	r3, #0
 8008c10:	f887 307d 	strb.w	r3, [r7, #125]	@ 0x7d
			sideB_subAttempts = 0;
 8008c14:	2300      	movs	r3, #0
 8008c16:	f887 307c 	strb.w	r3, [r7, #124]	@ 0x7c
			wait(1);
 8008c1a:	2001      	movs	r0, #1
 8008c1c:	f001 fdf2 	bl	800a804 <wait>
		}

		if(!sideB_badOutputFlag) { sideB_attempts = 13; }
 8008c20:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	d103      	bne.n	8008c30 <aux_register_test+0x912>
 8008c28:	230d      	movs	r3, #13
 8008c2a:	f887 307e 	strb.w	r3, [r7, #126]	@ 0x7e
 8008c2e:	e00d      	b.n	8008c4c <aux_register_test+0x92e>

		else {
			sideB_attempts++;
 8008c30:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 8008c34:	3301      	adds	r3, #1
 8008c36:	f887 307e 	strb.w	r3, [r7, #126]	@ 0x7e
			sideA_subAttempts = 0;
 8008c3a:	2300      	movs	r3, #0
 8008c3c:	f887 307d 	strb.w	r3, [r7, #125]	@ 0x7d
			sideB_subAttempts = 0;
 8008c40:	2300      	movs	r3, #0
 8008c42:	f887 307c 	strb.w	r3, [r7, #124]	@ 0x7c
			wait(1);
 8008c46:	2001      	movs	r0, #1
 8008c48:	f001 fddc 	bl	800a804 <wait>
	while(sideA_attempts < ATTEMPT_LIMIT || sideB_attempts < ATTEMPT_LIMIT) {
 8008c4c:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8008c50:	2b09      	cmp	r3, #9
 8008c52:	f67f ae90 	bls.w	8008976 <aux_register_test+0x658>
 8008c56:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 8008c5a:	2b09      	cmp	r3, #9
 8008c5c:	f67f ae8b 	bls.w	8008976 <aux_register_test+0x658>
		}
	}
	if(sideA_attempts != 13) { error_loop(ERROR_AXST, 0, 0, SIDE_A); }
 8008c60:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8008c64:	2b0d      	cmp	r3, #13
 8008c66:	d005      	beq.n	8008c74 <aux_register_test+0x956>
 8008c68:	2301      	movs	r3, #1
 8008c6a:	2200      	movs	r2, #0
 8008c6c:	2100      	movs	r1, #0
 8008c6e:	204e      	movs	r0, #78	@ 0x4e
 8008c70:	f7fc f8c2 	bl	8004df8 <error_loop>

	if(sideB_attempts != 13) { error_loop(ERROR_AXST, 0, 0, SIDE_B); }
 8008c74:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 8008c78:	2b0d      	cmp	r3, #13
 8008c7a:	d005      	beq.n	8008c88 <aux_register_test+0x96a>
 8008c7c:	2300      	movs	r3, #0
 8008c7e:	2200      	movs	r2, #0
 8008c80:	2100      	movs	r1, #0
 8008c82:	204e      	movs	r0, #78	@ 0x4e
 8008c84:	f7fc f8b8 	bl	8004df8 <error_loop>
}
 8008c88:	bf00      	nop
 8008c8a:	3780      	adds	r7, #128	@ 0x80
 8008c8c:	46bd      	mov	sp, r7
 8008c8e:	bd80      	pop	{r7, pc}

08008c90 <overlap_cell_measurement_test>:


void overlap_cell_measurement_test(void)
{
 8008c90:	b580      	push	{r7, lr}
 8008c92:	b090      	sub	sp, #64	@ 0x40
 8008c94:	af00      	add	r7, sp, #0
	uint8_t sideA_attempts = 0;
 8008c96:	2300      	movs	r3, #0
 8008c98:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	uint8_t sideB_attempts = 0;
 8008c9c:	2300      	movs	r3, #0
 8008c9e:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
	uint8_t sideA_subAttempts = 0;
 8008ca2:	2300      	movs	r3, #0
 8008ca4:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
	uint8_t sideB_subAttempts = 0;
 8008ca8:	2300      	movs	r3, #0
 8008caa:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
	uint8_t sideA_cellVoltageE_PECflag;

	uint8_t sideB_cellVoltageC_PECflag;
	uint8_t sideB_cellVoltageE_PECflag;

	while(sideA_attempts < ATTEMPT_LIMIT || sideB_attempts < ATTEMPT_LIMIT) {
 8008cae:	e17b      	b.n	8008fa8 <overlap_cell_measurement_test+0x318>
		while(sideA_subAttempts < ATTEMPT_LIMIT || sideB_subAttempts < ATTEMPT_LIMIT) {
			CLRCELL(SIDE_A);
 8008cb0:	2001      	movs	r0, #1
 8008cb2:	f000 feeb 	bl	8009a8c <CLRCELL>
			CLRCELL(SIDE_B);
 8008cb6:	2000      	movs	r0, #0
 8008cb8:	f000 fee8 	bl	8009a8c <CLRCELL>
			wait(3);
 8008cbc:	2003      	movs	r0, #3
 8008cbe:	f001 fda1 	bl	800a804 <wait>

			ADOL(SIDE_A);
 8008cc2:	2001      	movs	r0, #1
 8008cc4:	f000 fdcc 	bl	8009860 <ADOL>
			ADOL(SIDE_B);
 8008cc8:	2000      	movs	r0, #0
 8008cca:	f000 fdc9 	bl	8009860 <ADOL>
			wait(3);
 8008cce:	2003      	movs	r0, #3
 8008cd0:	f001 fd98 	bl	800a804 <wait>

			RDCVC(sideA_cellVoltageC, SIDE_A);
 8008cd4:	f107 0318 	add.w	r3, r7, #24
 8008cd8:	2101      	movs	r1, #1
 8008cda:	4618      	mov	r0, r3
 8008cdc:	f000 fc2a 	bl	8009534 <RDCVC>
			RDCVC(sideB_cellVoltageC, SIDE_B);
 8008ce0:	f107 0308 	add.w	r3, r7, #8
 8008ce4:	2100      	movs	r1, #0
 8008ce6:	4618      	mov	r0, r3
 8008ce8:	f000 fc24 	bl	8009534 <RDCVC>
			wait(1);
 8008cec:	2001      	movs	r0, #1
 8008cee:	f001 fd89 	bl	800a804 <wait>
			RDCVE(sideA_cellVoltageE, SIDE_A);
 8008cf2:	f107 0310 	add.w	r3, r7, #16
 8008cf6:	2101      	movs	r1, #1
 8008cf8:	4618      	mov	r0, r3
 8008cfa:	f000 fc63 	bl	80095c4 <RDCVE>
			RDCVE(sideB_cellVoltageE, SIDE_B);
 8008cfe:	463b      	mov	r3, r7
 8008d00:	2100      	movs	r1, #0
 8008d02:	4618      	mov	r0, r3
 8008d04:	f000 fc5e 	bl	80095c4 <RDCVE>
			wait(1);
 8008d08:	2001      	movs	r0, #1
 8008d0a:	f001 fd7b 	bl	800a804 <wait>

			sideA_cellVoltageC_PECflag = verify_PEC15(sideA_cellVoltageC);
 8008d0e:	f107 0318 	add.w	r3, r7, #24
 8008d12:	4618      	mov	r0, r3
 8008d14:	f000 f9f9 	bl	800910a <verify_PEC15>
 8008d18:	4603      	mov	r3, r0
 8008d1a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
			sideA_cellVoltageE_PECflag = verify_PEC15(sideA_cellVoltageE);
 8008d1e:	f107 0310 	add.w	r3, r7, #16
 8008d22:	4618      	mov	r0, r3
 8008d24:	f000 f9f1 	bl	800910a <verify_PEC15>
 8008d28:	4603      	mov	r3, r0
 8008d2a:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
			sideB_cellVoltageC_PECflag = verify_PEC15(sideB_cellVoltageC);
 8008d2e:	f107 0308 	add.w	r3, r7, #8
 8008d32:	4618      	mov	r0, r3
 8008d34:	f000 f9e9 	bl	800910a <verify_PEC15>
 8008d38:	4603      	mov	r3, r0
 8008d3a:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
			sideB_cellVoltageE_PECflag = verify_PEC15(sideB_cellVoltageE);
 8008d3e:	463b      	mov	r3, r7
 8008d40:	4618      	mov	r0, r3
 8008d42:	f000 f9e2 	bl	800910a <verify_PEC15>
 8008d46:	4603      	mov	r3, r0
 8008d48:	f887 3020 	strb.w	r3, [r7, #32]

			if(sideA_cellVoltageC_PECflag == 2 &&
 8008d4c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8008d50:	2b02      	cmp	r3, #2
 8008d52:	d119      	bne.n	8008d88 <overlap_cell_measurement_test+0xf8>
 8008d54:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8008d58:	2b02      	cmp	r3, #2
 8008d5a:	d115      	bne.n	8008d88 <overlap_cell_measurement_test+0xf8>
			   sideA_cellVoltageE_PECflag == 2 &&
			   sideA_cellVoltageC[1] != 0xFF &&
 8008d5c:	7e7b      	ldrb	r3, [r7, #25]
			   sideA_cellVoltageE_PECflag == 2 &&
 8008d5e:	2bff      	cmp	r3, #255	@ 0xff
 8008d60:	d012      	beq.n	8008d88 <overlap_cell_measurement_test+0xf8>
			   sideA_cellVoltageC[3] != 0xFF &&
 8008d62:	7efb      	ldrb	r3, [r7, #27]
			   sideA_cellVoltageC[1] != 0xFF &&
 8008d64:	2bff      	cmp	r3, #255	@ 0xff
 8008d66:	d00f      	beq.n	8008d88 <overlap_cell_measurement_test+0xf8>
			   sideA_cellVoltageC[5] != 0xFF &&
 8008d68:	7f7b      	ldrb	r3, [r7, #29]
			   sideA_cellVoltageC[3] != 0xFF &&
 8008d6a:	2bff      	cmp	r3, #255	@ 0xff
 8008d6c:	d00c      	beq.n	8008d88 <overlap_cell_measurement_test+0xf8>
			   sideA_cellVoltageE[1] != 0xFF &&
 8008d6e:	7c7b      	ldrb	r3, [r7, #17]
			   sideA_cellVoltageC[5] != 0xFF &&
 8008d70:	2bff      	cmp	r3, #255	@ 0xff
 8008d72:	d009      	beq.n	8008d88 <overlap_cell_measurement_test+0xf8>
			   sideA_cellVoltageE[3] != 0xFF &&
 8008d74:	7cfb      	ldrb	r3, [r7, #19]
			   sideA_cellVoltageE[1] != 0xFF &&
 8008d76:	2bff      	cmp	r3, #255	@ 0xff
 8008d78:	d006      	beq.n	8008d88 <overlap_cell_measurement_test+0xf8>
			   sideA_cellVoltageE[5] != 0xFF)
 8008d7a:	7d7b      	ldrb	r3, [r7, #21]
			   sideA_cellVoltageE[3] != 0xFF &&
 8008d7c:	2bff      	cmp	r3, #255	@ 0xff
 8008d7e:	d003      	beq.n	8008d88 <overlap_cell_measurement_test+0xf8>
			{
				sideA_subAttempts = 13;
 8008d80:	230d      	movs	r3, #13
 8008d82:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
 8008d86:	e007      	b.n	8008d98 <overlap_cell_measurement_test+0x108>
			}
			else {
				sideA_subAttempts++;
 8008d88:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 8008d8c:	3301      	adds	r3, #1
 8008d8e:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
				wait(1);
 8008d92:	2001      	movs	r0, #1
 8008d94:	f001 fd36 	bl	800a804 <wait>
			}

			if(sideB_cellVoltageC_PECflag == 2 &&
 8008d98:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8008d9c:	2b02      	cmp	r3, #2
 8008d9e:	d119      	bne.n	8008dd4 <overlap_cell_measurement_test+0x144>
 8008da0:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008da4:	2b02      	cmp	r3, #2
 8008da6:	d115      	bne.n	8008dd4 <overlap_cell_measurement_test+0x144>
			   sideB_cellVoltageE_PECflag == 2 &&
			   sideB_cellVoltageC[1] != 0xFF &&
 8008da8:	7a7b      	ldrb	r3, [r7, #9]
			   sideB_cellVoltageE_PECflag == 2 &&
 8008daa:	2bff      	cmp	r3, #255	@ 0xff
 8008dac:	d012      	beq.n	8008dd4 <overlap_cell_measurement_test+0x144>
			   sideB_cellVoltageC[3] != 0xFF &&
 8008dae:	7afb      	ldrb	r3, [r7, #11]
			   sideB_cellVoltageC[1] != 0xFF &&
 8008db0:	2bff      	cmp	r3, #255	@ 0xff
 8008db2:	d00f      	beq.n	8008dd4 <overlap_cell_measurement_test+0x144>
			   sideB_cellVoltageC[5] != 0xFF &&
 8008db4:	7b7b      	ldrb	r3, [r7, #13]
			   sideB_cellVoltageC[3] != 0xFF &&
 8008db6:	2bff      	cmp	r3, #255	@ 0xff
 8008db8:	d00c      	beq.n	8008dd4 <overlap_cell_measurement_test+0x144>
			   sideB_cellVoltageE[1] != 0xFF &&
 8008dba:	787b      	ldrb	r3, [r7, #1]
			   sideB_cellVoltageC[5] != 0xFF &&
 8008dbc:	2bff      	cmp	r3, #255	@ 0xff
 8008dbe:	d009      	beq.n	8008dd4 <overlap_cell_measurement_test+0x144>
			   sideB_cellVoltageE[3] != 0xFF &&
 8008dc0:	78fb      	ldrb	r3, [r7, #3]
			   sideB_cellVoltageE[1] != 0xFF &&
 8008dc2:	2bff      	cmp	r3, #255	@ 0xff
 8008dc4:	d006      	beq.n	8008dd4 <overlap_cell_measurement_test+0x144>
			   sideB_cellVoltageE[5] != 0xFF)
 8008dc6:	797b      	ldrb	r3, [r7, #5]
			   sideB_cellVoltageE[3] != 0xFF &&
 8008dc8:	2bff      	cmp	r3, #255	@ 0xff
 8008dca:	d003      	beq.n	8008dd4 <overlap_cell_measurement_test+0x144>
			{
				sideB_subAttempts = 13;
 8008dcc:	230d      	movs	r3, #13
 8008dce:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
 8008dd2:	e007      	b.n	8008de4 <overlap_cell_measurement_test+0x154>
			}
			else {
				sideB_subAttempts++;
 8008dd4:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 8008dd8:	3301      	adds	r3, #1
 8008dda:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
				wait(1);
 8008dde:	2001      	movs	r0, #1
 8008de0:	f001 fd10 	bl	800a804 <wait>
		while(sideA_subAttempts < ATTEMPT_LIMIT || sideB_subAttempts < ATTEMPT_LIMIT) {
 8008de4:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 8008de8:	2b09      	cmp	r3, #9
 8008dea:	f67f af61 	bls.w	8008cb0 <overlap_cell_measurement_test+0x20>
 8008dee:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 8008df2:	2b09      	cmp	r3, #9
 8008df4:	f67f af5c 	bls.w	8008cb0 <overlap_cell_measurement_test+0x20>
			}
		}
		if(sideA_subAttempts != 13) { error_loop(ERROR_PEC, 0, 0, SIDE_A); }
 8008df8:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 8008dfc:	2b0d      	cmp	r3, #13
 8008dfe:	d005      	beq.n	8008e0c <overlap_cell_measurement_test+0x17c>
 8008e00:	2301      	movs	r3, #1
 8008e02:	2200      	movs	r2, #0
 8008e04:	2100      	movs	r1, #0
 8008e06:	2056      	movs	r0, #86	@ 0x56
 8008e08:	f7fb fff6 	bl	8004df8 <error_loop>

		if(sideB_subAttempts != 13) { error_loop(ERROR_PEC, 0, 0, SIDE_B); }
 8008e0c:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 8008e10:	2b0d      	cmp	r3, #13
 8008e12:	d005      	beq.n	8008e20 <overlap_cell_measurement_test+0x190>
 8008e14:	2300      	movs	r3, #0
 8008e16:	2200      	movs	r2, #0
 8008e18:	2100      	movs	r1, #0
 8008e1a:	2056      	movs	r0, #86	@ 0x56
 8008e1c:	f7fb ffec 	bl	8004df8 <error_loop>

		sideA_cell7_adc1 = (sideA_cellVoltageC[3] << 8) | sideA_cellVoltageC[2];
 8008e20:	7efb      	ldrb	r3, [r7, #27]
 8008e22:	b21b      	sxth	r3, r3
 8008e24:	021b      	lsls	r3, r3, #8
 8008e26:	b21a      	sxth	r2, r3
 8008e28:	7ebb      	ldrb	r3, [r7, #26]
 8008e2a:	b21b      	sxth	r3, r3
 8008e2c:	4313      	orrs	r3, r2
 8008e2e:	b21b      	sxth	r3, r3
 8008e30:	877b      	strh	r3, [r7, #58]	@ 0x3a
		sideA_cell7_adc2 = (sideA_cellVoltageC[1] << 8) | sideA_cellVoltageC[0];
 8008e32:	7e7b      	ldrb	r3, [r7, #25]
 8008e34:	b21b      	sxth	r3, r3
 8008e36:	021b      	lsls	r3, r3, #8
 8008e38:	b21a      	sxth	r2, r3
 8008e3a:	7e3b      	ldrb	r3, [r7, #24]
 8008e3c:	b21b      	sxth	r3, r3
 8008e3e:	4313      	orrs	r3, r2
 8008e40:	b21b      	sxth	r3, r3
 8008e42:	873b      	strh	r3, [r7, #56]	@ 0x38
		sideA_cell13_adc2 = (sideA_cellVoltageE[3] << 8) | sideA_cellVoltageE[2];
 8008e44:	7cfb      	ldrb	r3, [r7, #19]
 8008e46:	b21b      	sxth	r3, r3
 8008e48:	021b      	lsls	r3, r3, #8
 8008e4a:	b21a      	sxth	r2, r3
 8008e4c:	7cbb      	ldrb	r3, [r7, #18]
 8008e4e:	b21b      	sxth	r3, r3
 8008e50:	4313      	orrs	r3, r2
 8008e52:	b21b      	sxth	r3, r3
 8008e54:	86fb      	strh	r3, [r7, #54]	@ 0x36
		sideA_cell13_adc3 = (sideA_cellVoltageE[1] << 8) | sideA_cellVoltageE[0];
 8008e56:	7c7b      	ldrb	r3, [r7, #17]
 8008e58:	b21b      	sxth	r3, r3
 8008e5a:	021b      	lsls	r3, r3, #8
 8008e5c:	b21a      	sxth	r2, r3
 8008e5e:	7c3b      	ldrb	r3, [r7, #16]
 8008e60:	b21b      	sxth	r3, r3
 8008e62:	4313      	orrs	r3, r2
 8008e64:	b21b      	sxth	r3, r3
 8008e66:	86bb      	strh	r3, [r7, #52]	@ 0x34

		sideB_cell7_adc1 = (sideB_cellVoltageC[3] << 8) | sideB_cellVoltageC[2];
 8008e68:	7afb      	ldrb	r3, [r7, #11]
 8008e6a:	b21b      	sxth	r3, r3
 8008e6c:	021b      	lsls	r3, r3, #8
 8008e6e:	b21a      	sxth	r2, r3
 8008e70:	7abb      	ldrb	r3, [r7, #10]
 8008e72:	b21b      	sxth	r3, r3
 8008e74:	4313      	orrs	r3, r2
 8008e76:	b21b      	sxth	r3, r3
 8008e78:	867b      	strh	r3, [r7, #50]	@ 0x32
		sideB_cell7_adc2 = (sideB_cellVoltageC[1] << 8) | sideB_cellVoltageC[0];
 8008e7a:	7a7b      	ldrb	r3, [r7, #9]
 8008e7c:	b21b      	sxth	r3, r3
 8008e7e:	021b      	lsls	r3, r3, #8
 8008e80:	b21a      	sxth	r2, r3
 8008e82:	7a3b      	ldrb	r3, [r7, #8]
 8008e84:	b21b      	sxth	r3, r3
 8008e86:	4313      	orrs	r3, r2
 8008e88:	b21b      	sxth	r3, r3
 8008e8a:	863b      	strh	r3, [r7, #48]	@ 0x30
		sideB_cell13_adc2 = (sideB_cellVoltageE[3] << 8) | sideB_cellVoltageE[2];
 8008e8c:	78fb      	ldrb	r3, [r7, #3]
 8008e8e:	b21b      	sxth	r3, r3
 8008e90:	021b      	lsls	r3, r3, #8
 8008e92:	b21a      	sxth	r2, r3
 8008e94:	78bb      	ldrb	r3, [r7, #2]
 8008e96:	b21b      	sxth	r3, r3
 8008e98:	4313      	orrs	r3, r2
 8008e9a:	b21b      	sxth	r3, r3
 8008e9c:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		sideB_cell13_adc3 = (sideB_cellVoltageE[1] << 8) | sideB_cellVoltageE[0];
 8008e9e:	787b      	ldrb	r3, [r7, #1]
 8008ea0:	b21b      	sxth	r3, r3
 8008ea2:	021b      	lsls	r3, r3, #8
 8008ea4:	b21a      	sxth	r2, r3
 8008ea6:	783b      	ldrb	r3, [r7, #0]
 8008ea8:	b21b      	sxth	r3, r3
 8008eaa:	4313      	orrs	r3, r2
 8008eac:	b21b      	sxth	r3, r3
 8008eae:	85bb      	strh	r3, [r7, #44]	@ 0x2c

		sideA_cell7_difference = (uint16_t)fabsf((float)sideA_cell7_adc1 - (float)sideA_cell7_adc2);
 8008eb0:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8008eb2:	ee07 3a90 	vmov	s15, r3
 8008eb6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008eba:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8008ebc:	ee07 3a90 	vmov	s15, r3
 8008ec0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ec4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008ec8:	eef0 7ae7 	vabs.f32	s15, s15
 8008ecc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008ed0:	ee17 3a90 	vmov	r3, s15
 8008ed4:	857b      	strh	r3, [r7, #42]	@ 0x2a
		sideA_cell13_difference = (uint16_t)fabsf((float)sideA_cell13_adc2 - (float)sideA_cell13_adc3);
 8008ed6:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8008ed8:	ee07 3a90 	vmov	s15, r3
 8008edc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008ee0:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8008ee2:	ee07 3a90 	vmov	s15, r3
 8008ee6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008eea:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008eee:	eef0 7ae7 	vabs.f32	s15, s15
 8008ef2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008ef6:	ee17 3a90 	vmov	r3, s15
 8008efa:	853b      	strh	r3, [r7, #40]	@ 0x28
		sideB_cell7_difference = (uint16_t)fabsf((float)sideB_cell7_adc1 - (float)sideB_cell7_adc2);
 8008efc:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8008efe:	ee07 3a90 	vmov	s15, r3
 8008f02:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008f06:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8008f08:	ee07 3a90 	vmov	s15, r3
 8008f0c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f10:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008f14:	eef0 7ae7 	vabs.f32	s15, s15
 8008f18:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008f1c:	ee17 3a90 	vmov	r3, s15
 8008f20:	84fb      	strh	r3, [r7, #38]	@ 0x26
		sideB_cell13_difference = (uint16_t)fabsf((float)sideB_cell13_adc2 - (float)sideB_cell13_adc3);
 8008f22:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8008f24:	ee07 3a90 	vmov	s15, r3
 8008f28:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008f2c:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8008f2e:	ee07 3a90 	vmov	s15, r3
 8008f32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f36:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008f3a:	eef0 7ae7 	vabs.f32	s15, s15
 8008f3e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008f42:	ee17 3a90 	vmov	r3, s15
 8008f46:	84bb      	strh	r3, [r7, #36]	@ 0x24

		if(sideA_cell7_difference <= MAX_ADC_DELTA && sideA_cell13_difference <= MAX_ADC_DELTA) { sideA_attempts = 13; }
 8008f48:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8008f4a:	2b1e      	cmp	r3, #30
 8008f4c:	d806      	bhi.n	8008f5c <overlap_cell_measurement_test+0x2cc>
 8008f4e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8008f50:	2b1e      	cmp	r3, #30
 8008f52:	d803      	bhi.n	8008f5c <overlap_cell_measurement_test+0x2cc>
 8008f54:	230d      	movs	r3, #13
 8008f56:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8008f5a:	e00d      	b.n	8008f78 <overlap_cell_measurement_test+0x2e8>

		else {
			sideA_attempts++;
 8008f5c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8008f60:	3301      	adds	r3, #1
 8008f62:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
			sideA_subAttempts = 0;
 8008f66:	2300      	movs	r3, #0
 8008f68:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
			sideB_subAttempts = 0;
 8008f6c:	2300      	movs	r3, #0
 8008f6e:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
			wait(1);
 8008f72:	2001      	movs	r0, #1
 8008f74:	f001 fc46 	bl	800a804 <wait>
		}

		if(sideB_cell7_difference <= MAX_ADC_DELTA && sideB_cell13_difference <= MAX_ADC_DELTA) { sideB_attempts = 13; }
 8008f78:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8008f7a:	2b1e      	cmp	r3, #30
 8008f7c:	d806      	bhi.n	8008f8c <overlap_cell_measurement_test+0x2fc>
 8008f7e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008f80:	2b1e      	cmp	r3, #30
 8008f82:	d803      	bhi.n	8008f8c <overlap_cell_measurement_test+0x2fc>
 8008f84:	230d      	movs	r3, #13
 8008f86:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
 8008f8a:	e00d      	b.n	8008fa8 <overlap_cell_measurement_test+0x318>

		else {
			sideB_attempts++;
 8008f8c:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8008f90:	3301      	adds	r3, #1
 8008f92:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
			sideA_subAttempts = 0;
 8008f96:	2300      	movs	r3, #0
 8008f98:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
			sideB_subAttempts = 0;
 8008f9c:	2300      	movs	r3, #0
 8008f9e:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
			wait(1);
 8008fa2:	2001      	movs	r0, #1
 8008fa4:	f001 fc2e 	bl	800a804 <wait>
	while(sideA_attempts < ATTEMPT_LIMIT || sideB_attempts < ATTEMPT_LIMIT) {
 8008fa8:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8008fac:	2b09      	cmp	r3, #9
 8008fae:	f67f af19 	bls.w	8008de4 <overlap_cell_measurement_test+0x154>
 8008fb2:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8008fb6:	2b09      	cmp	r3, #9
 8008fb8:	f67f af14 	bls.w	8008de4 <overlap_cell_measurement_test+0x154>
		}
	}
	if(sideA_attempts != 13) { error_loop(ERROR_ADOL, 0, 0, SIDE_A); }
 8008fbc:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8008fc0:	2b0d      	cmp	r3, #13
 8008fc2:	d005      	beq.n	8008fd0 <overlap_cell_measurement_test+0x340>
 8008fc4:	2301      	movs	r3, #1
 8008fc6:	2200      	movs	r2, #0
 8008fc8:	2100      	movs	r1, #0
 8008fca:	204f      	movs	r0, #79	@ 0x4f
 8008fcc:	f7fb ff14 	bl	8004df8 <error_loop>

	if(sideB_attempts != 13) { error_loop(ERROR_ADOL, 0, 0, SIDE_B); }
 8008fd0:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8008fd4:	2b0d      	cmp	r3, #13
 8008fd6:	d005      	beq.n	8008fe4 <overlap_cell_measurement_test+0x354>
 8008fd8:	2300      	movs	r3, #0
 8008fda:	2200      	movs	r2, #0
 8008fdc:	2100      	movs	r1, #0
 8008fde:	204f      	movs	r0, #79	@ 0x4f
 8008fe0:	f7fb ff0a 	bl	8004df8 <error_loop>
}
 8008fe4:	bf00      	nop
 8008fe6:	3740      	adds	r7, #64	@ 0x40
 8008fe8:	46bd      	mov	sp, r7
 8008fea:	bd80      	pop	{r7, pc}

08008fec <setup_PEC15>:
uint16_t PEC15_table[256];
uint16_t CRC15_Poly = 0x4599;


void setup_PEC15(void)
{
 8008fec:	b480      	push	{r7}
 8008fee:	b083      	sub	sp, #12
 8008ff0:	af00      	add	r7, sp, #0
  uint16_t PEC15_seed = 16;
 8008ff2:	2310      	movs	r3, #16
 8008ff4:	80fb      	strh	r3, [r7, #6]

  for (uint16_t i = 0; i < 256; i++) {
 8008ff6:	2300      	movs	r3, #0
 8008ff8:	80bb      	strh	r3, [r7, #4]
 8008ffa:	e024      	b.n	8009046 <setup_PEC15+0x5a>
    PEC15_seed = i << 7;
 8008ffc:	88bb      	ldrh	r3, [r7, #4]
 8008ffe:	01db      	lsls	r3, r3, #7
 8009000:	80fb      	strh	r3, [r7, #6]

    for (uint8_t bit = 8; bit > 0; bit--){
 8009002:	2308      	movs	r3, #8
 8009004:	70fb      	strb	r3, [r7, #3]
 8009006:	e013      	b.n	8009030 <setup_PEC15+0x44>
      if (PEC15_seed & 0x4000) {
 8009008:	88fb      	ldrh	r3, [r7, #6]
 800900a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800900e:	2b00      	cmp	r3, #0
 8009010:	d008      	beq.n	8009024 <setup_PEC15+0x38>
        PEC15_seed = ((PEC15_seed << 1));
 8009012:	88fb      	ldrh	r3, [r7, #6]
 8009014:	005b      	lsls	r3, r3, #1
 8009016:	80fb      	strh	r3, [r7, #6]
        PEC15_seed = (PEC15_seed ^ CRC15_Poly);
 8009018:	4b10      	ldr	r3, [pc, #64]	@ (800905c <setup_PEC15+0x70>)
 800901a:	881a      	ldrh	r2, [r3, #0]
 800901c:	88fb      	ldrh	r3, [r7, #6]
 800901e:	4053      	eors	r3, r2
 8009020:	80fb      	strh	r3, [r7, #6]
 8009022:	e002      	b.n	800902a <setup_PEC15+0x3e>
      }
      else {
        PEC15_seed = ((PEC15_seed << 1));
 8009024:	88fb      	ldrh	r3, [r7, #6]
 8009026:	005b      	lsls	r3, r3, #1
 8009028:	80fb      	strh	r3, [r7, #6]
    for (uint8_t bit = 8; bit > 0; bit--){
 800902a:	78fb      	ldrb	r3, [r7, #3]
 800902c:	3b01      	subs	r3, #1
 800902e:	70fb      	strb	r3, [r7, #3]
 8009030:	78fb      	ldrb	r3, [r7, #3]
 8009032:	2b00      	cmp	r3, #0
 8009034:	d1e8      	bne.n	8009008 <setup_PEC15+0x1c>
      }
    }
    PEC15_table[i] = PEC15_seed & 0xFFFF;
 8009036:	88bb      	ldrh	r3, [r7, #4]
 8009038:	4909      	ldr	r1, [pc, #36]	@ (8009060 <setup_PEC15+0x74>)
 800903a:	88fa      	ldrh	r2, [r7, #6]
 800903c:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
  for (uint16_t i = 0; i < 256; i++) {
 8009040:	88bb      	ldrh	r3, [r7, #4]
 8009042:	3301      	adds	r3, #1
 8009044:	80bb      	strh	r3, [r7, #4]
 8009046:	88bb      	ldrh	r3, [r7, #4]
 8009048:	2bff      	cmp	r3, #255	@ 0xff
 800904a:	d9d7      	bls.n	8008ffc <setup_PEC15+0x10>
  }
}
 800904c:	bf00      	nop
 800904e:	bf00      	nop
 8009050:	370c      	adds	r7, #12
 8009052:	46bd      	mov	sp, r7
 8009054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009058:	4770      	bx	lr
 800905a:	bf00      	nop
 800905c:	20000004 	.word	0x20000004
 8009060:	200001e4 	.word	0x200001e4

08009064 <compute_PEC15>:


uint16_t compute_PEC15(uint8_t *data_ptr, uint8_t len)
{
 8009064:	b480      	push	{r7}
 8009066:	b085      	sub	sp, #20
 8009068:	af00      	add	r7, sp, #0
 800906a:	6078      	str	r0, [r7, #4]
 800906c:	460b      	mov	r3, r1
 800906e:	70fb      	strb	r3, [r7, #3]
  uint16_t PEC15_seed = 16;
 8009070:	2310      	movs	r3, #16
 8009072:	81fb      	strh	r3, [r7, #14]
  uint16_t address;

  for (uint16_t i = 0; i < len; i++) {
 8009074:	2300      	movs	r3, #0
 8009076:	81bb      	strh	r3, [r7, #12]
 8009078:	e019      	b.n	80090ae <compute_PEC15+0x4a>
    address = ((PEC15_seed >> 7) ^ data_ptr[i]) & 0xFF;
 800907a:	89fb      	ldrh	r3, [r7, #14]
 800907c:	09db      	lsrs	r3, r3, #7
 800907e:	b29b      	uxth	r3, r3
 8009080:	89ba      	ldrh	r2, [r7, #12]
 8009082:	6879      	ldr	r1, [r7, #4]
 8009084:	440a      	add	r2, r1
 8009086:	7812      	ldrb	r2, [r2, #0]
 8009088:	4053      	eors	r3, r2
 800908a:	b29b      	uxth	r3, r3
 800908c:	b2db      	uxtb	r3, r3
 800908e:	817b      	strh	r3, [r7, #10]
    PEC15_seed = (PEC15_seed << 8 ) ^ PEC15_table[address];
 8009090:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8009094:	021b      	lsls	r3, r3, #8
 8009096:	b21a      	sxth	r2, r3
 8009098:	897b      	ldrh	r3, [r7, #10]
 800909a:	490c      	ldr	r1, [pc, #48]	@ (80090cc <compute_PEC15+0x68>)
 800909c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80090a0:	b21b      	sxth	r3, r3
 80090a2:	4053      	eors	r3, r2
 80090a4:	b21b      	sxth	r3, r3
 80090a6:	81fb      	strh	r3, [r7, #14]
  for (uint16_t i = 0; i < len; i++) {
 80090a8:	89bb      	ldrh	r3, [r7, #12]
 80090aa:	3301      	adds	r3, #1
 80090ac:	81bb      	strh	r3, [r7, #12]
 80090ae:	78fb      	ldrb	r3, [r7, #3]
 80090b0:	b29b      	uxth	r3, r3
 80090b2:	89ba      	ldrh	r2, [r7, #12]
 80090b4:	429a      	cmp	r2, r3
 80090b6:	d3e0      	bcc.n	800907a <compute_PEC15+0x16>
  }
  return (PEC15_seed * 2);
 80090b8:	89fb      	ldrh	r3, [r7, #14]
 80090ba:	005b      	lsls	r3, r3, #1
 80090bc:	b29b      	uxth	r3, r3
}
 80090be:	4618      	mov	r0, r3
 80090c0:	3714      	adds	r7, #20
 80090c2:	46bd      	mov	sp, r7
 80090c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090c8:	4770      	bx	lr
 80090ca:	bf00      	nop
 80090cc:	200001e4 	.word	0x200001e4

080090d0 <append_PEC>:


void append_PEC(uint8_t *data_ptr, uint8_t len, uint16_t PEC)
{
 80090d0:	b480      	push	{r7}
 80090d2:	b083      	sub	sp, #12
 80090d4:	af00      	add	r7, sp, #0
 80090d6:	6078      	str	r0, [r7, #4]
 80090d8:	460b      	mov	r3, r1
 80090da:	70fb      	strb	r3, [r7, #3]
 80090dc:	4613      	mov	r3, r2
 80090de:	803b      	strh	r3, [r7, #0]
  data_ptr[len] = (PEC >> 8) & 0xFF;
 80090e0:	883b      	ldrh	r3, [r7, #0]
 80090e2:	0a1b      	lsrs	r3, r3, #8
 80090e4:	b299      	uxth	r1, r3
 80090e6:	78fb      	ldrb	r3, [r7, #3]
 80090e8:	687a      	ldr	r2, [r7, #4]
 80090ea:	4413      	add	r3, r2
 80090ec:	b2ca      	uxtb	r2, r1
 80090ee:	701a      	strb	r2, [r3, #0]
  data_ptr[len + 1] = PEC & 0xFF;
 80090f0:	78fb      	ldrb	r3, [r7, #3]
 80090f2:	3301      	adds	r3, #1
 80090f4:	687a      	ldr	r2, [r7, #4]
 80090f6:	4413      	add	r3, r2
 80090f8:	883a      	ldrh	r2, [r7, #0]
 80090fa:	b2d2      	uxtb	r2, r2
 80090fc:	701a      	strb	r2, [r3, #0]
}
 80090fe:	bf00      	nop
 8009100:	370c      	adds	r7, #12
 8009102:	46bd      	mov	sp, r7
 8009104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009108:	4770      	bx	lr

0800910a <verify_PEC15>:


uint8_t verify_PEC15(uint8_t *receivedData_ptr)
{
 800910a:	b580      	push	{r7, lr}
 800910c:	b084      	sub	sp, #16
 800910e:	af00      	add	r7, sp, #0
 8009110:	6078      	str	r0, [r7, #4]
	uint16_t receivedPEC = (receivedData_ptr[PAYLOAD_LEN - 2] << 8) | receivedData_ptr[PAYLOAD_LEN - 1];
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	3306      	adds	r3, #6
 8009116:	781b      	ldrb	r3, [r3, #0]
 8009118:	b21b      	sxth	r3, r3
 800911a:	021b      	lsls	r3, r3, #8
 800911c:	b21a      	sxth	r2, r3
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	3307      	adds	r3, #7
 8009122:	781b      	ldrb	r3, [r3, #0]
 8009124:	b21b      	sxth	r3, r3
 8009126:	4313      	orrs	r3, r2
 8009128:	b21b      	sxth	r3, r3
 800912a:	81fb      	strh	r3, [r7, #14]

	uint16_t calculatedPEC = compute_PEC15(receivedData_ptr, PAYLOAD_LEN - 2);
 800912c:	2106      	movs	r1, #6
 800912e:	6878      	ldr	r0, [r7, #4]
 8009130:	f7ff ff98 	bl	8009064 <compute_PEC15>
 8009134:	4603      	mov	r3, r0
 8009136:	81bb      	strh	r3, [r7, #12]

	if (receivedPEC == calculatedPEC) { return 2; }
 8009138:	89fa      	ldrh	r2, [r7, #14]
 800913a:	89bb      	ldrh	r3, [r7, #12]
 800913c:	429a      	cmp	r2, r3
 800913e:	d101      	bne.n	8009144 <verify_PEC15+0x3a>
 8009140:	2302      	movs	r3, #2
 8009142:	e000      	b.n	8009146 <verify_PEC15+0x3c>

	else { return 1; }
 8009144:	2301      	movs	r3, #1
}
 8009146:	4618      	mov	r0, r3
 8009148:	3710      	adds	r7, #16
 800914a:	46bd      	mov	sp, r7
 800914c:	bd80      	pop	{r7, pc}
	...

08009150 <action_cmd>:


void action_cmd(uint8_t *cmd_ptr, uint8_t sideA)
{
 8009150:	b580      	push	{r7, lr}
 8009152:	b082      	sub	sp, #8
 8009154:	af00      	add	r7, sp, #0
 8009156:	6078      	str	r0, [r7, #4]
 8009158:	460b      	mov	r3, r1
 800915a:	70fb      	strb	r3, [r7, #3]
	// TO LTC SIDE A (CELL 1 to 10)
	if (sideA) {
 800915c:	78fb      	ldrb	r3, [r7, #3]
 800915e:	2b00      	cmp	r3, #0
 8009160:	d011      	beq.n	8009186 <action_cmd+0x36>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8009162:	2200      	movs	r2, #0
 8009164:	2110      	movs	r1, #16
 8009166:	4813      	ldr	r0, [pc, #76]	@ (80091b4 <action_cmd+0x64>)
 8009168:	f004 fbf0 	bl	800d94c <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi1, cmd_ptr, CMD_LEN, HAL_MAX_DELAY);
 800916c:	f04f 33ff 	mov.w	r3, #4294967295
 8009170:	2204      	movs	r2, #4
 8009172:	6879      	ldr	r1, [r7, #4]
 8009174:	4810      	ldr	r0, [pc, #64]	@ (80091b8 <action_cmd+0x68>)
 8009176:	f005 fa3e 	bl	800e5f6 <HAL_SPI_Transmit>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 800917a:	2201      	movs	r2, #1
 800917c:	2110      	movs	r1, #16
 800917e:	480d      	ldr	r0, [pc, #52]	@ (80091b4 <action_cmd+0x64>)
 8009180:	f004 fbe4 	bl	800d94c <HAL_GPIO_WritePin>
	else {
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
		HAL_SPI_Transmit(&hspi3, cmd_ptr, CMD_LEN, HAL_MAX_DELAY);
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET);
	}
}
 8009184:	e012      	b.n	80091ac <action_cmd+0x5c>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 8009186:	2200      	movs	r2, #0
 8009188:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800918c:	4809      	ldr	r0, [pc, #36]	@ (80091b4 <action_cmd+0x64>)
 800918e:	f004 fbdd 	bl	800d94c <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi3, cmd_ptr, CMD_LEN, HAL_MAX_DELAY);
 8009192:	f04f 33ff 	mov.w	r3, #4294967295
 8009196:	2204      	movs	r2, #4
 8009198:	6879      	ldr	r1, [r7, #4]
 800919a:	4808      	ldr	r0, [pc, #32]	@ (80091bc <action_cmd+0x6c>)
 800919c:	f005 fa2b 	bl	800e5f6 <HAL_SPI_Transmit>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET);
 80091a0:	2201      	movs	r2, #1
 80091a2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80091a6:	4803      	ldr	r0, [pc, #12]	@ (80091b4 <action_cmd+0x64>)
 80091a8:	f004 fbd0 	bl	800d94c <HAL_GPIO_WritePin>
}
 80091ac:	bf00      	nop
 80091ae:	3708      	adds	r7, #8
 80091b0:	46bd      	mov	sp, r7
 80091b2:	bd80      	pop	{r7, pc}
 80091b4:	40020000 	.word	0x40020000
 80091b8:	200000ec 	.word	0x200000ec
 80091bc:	20000144 	.word	0x20000144

080091c0 <write_cmd>:


void write_cmd(uint8_t *cmd_ptr, uint8_t *payload_ptr, uint8_t sideA)
{
 80091c0:	b580      	push	{r7, lr}
 80091c2:	b084      	sub	sp, #16
 80091c4:	af00      	add	r7, sp, #0
 80091c6:	60f8      	str	r0, [r7, #12]
 80091c8:	60b9      	str	r1, [r7, #8]
 80091ca:	4613      	mov	r3, r2
 80091cc:	71fb      	strb	r3, [r7, #7]
	// TO LTC SIDE A (CELL 1 to 10)
	if (sideA) {
 80091ce:	79fb      	ldrb	r3, [r7, #7]
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d018      	beq.n	8009206 <write_cmd+0x46>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 80091d4:	2200      	movs	r2, #0
 80091d6:	2110      	movs	r1, #16
 80091d8:	481a      	ldr	r0, [pc, #104]	@ (8009244 <write_cmd+0x84>)
 80091da:	f004 fbb7 	bl	800d94c <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi1, cmd_ptr, CMD_LEN, HAL_MAX_DELAY);
 80091de:	f04f 33ff 	mov.w	r3, #4294967295
 80091e2:	2204      	movs	r2, #4
 80091e4:	68f9      	ldr	r1, [r7, #12]
 80091e6:	4818      	ldr	r0, [pc, #96]	@ (8009248 <write_cmd+0x88>)
 80091e8:	f005 fa05 	bl	800e5f6 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi1, payload_ptr, PAYLOAD_LEN, HAL_MAX_DELAY);
 80091ec:	f04f 33ff 	mov.w	r3, #4294967295
 80091f0:	2208      	movs	r2, #8
 80091f2:	68b9      	ldr	r1, [r7, #8]
 80091f4:	4814      	ldr	r0, [pc, #80]	@ (8009248 <write_cmd+0x88>)
 80091f6:	f005 f9fe 	bl	800e5f6 <HAL_SPI_Transmit>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 80091fa:	2201      	movs	r2, #1
 80091fc:	2110      	movs	r1, #16
 80091fe:	4811      	ldr	r0, [pc, #68]	@ (8009244 <write_cmd+0x84>)
 8009200:	f004 fba4 	bl	800d94c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
		HAL_SPI_Transmit(&hspi3, cmd_ptr, CMD_LEN, HAL_MAX_DELAY);
		HAL_SPI_Transmit(&hspi3, payload_ptr, PAYLOAD_LEN, HAL_MAX_DELAY);
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET);
	}
}
 8009204:	e019      	b.n	800923a <write_cmd+0x7a>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 8009206:	2200      	movs	r2, #0
 8009208:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800920c:	480d      	ldr	r0, [pc, #52]	@ (8009244 <write_cmd+0x84>)
 800920e:	f004 fb9d 	bl	800d94c <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi3, cmd_ptr, CMD_LEN, HAL_MAX_DELAY);
 8009212:	f04f 33ff 	mov.w	r3, #4294967295
 8009216:	2204      	movs	r2, #4
 8009218:	68f9      	ldr	r1, [r7, #12]
 800921a:	480c      	ldr	r0, [pc, #48]	@ (800924c <write_cmd+0x8c>)
 800921c:	f005 f9eb 	bl	800e5f6 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi3, payload_ptr, PAYLOAD_LEN, HAL_MAX_DELAY);
 8009220:	f04f 33ff 	mov.w	r3, #4294967295
 8009224:	2208      	movs	r2, #8
 8009226:	68b9      	ldr	r1, [r7, #8]
 8009228:	4808      	ldr	r0, [pc, #32]	@ (800924c <write_cmd+0x8c>)
 800922a:	f005 f9e4 	bl	800e5f6 <HAL_SPI_Transmit>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET);
 800922e:	2201      	movs	r2, #1
 8009230:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8009234:	4803      	ldr	r0, [pc, #12]	@ (8009244 <write_cmd+0x84>)
 8009236:	f004 fb89 	bl	800d94c <HAL_GPIO_WritePin>
}
 800923a:	bf00      	nop
 800923c:	3710      	adds	r7, #16
 800923e:	46bd      	mov	sp, r7
 8009240:	bd80      	pop	{r7, pc}
 8009242:	bf00      	nop
 8009244:	40020000 	.word	0x40020000
 8009248:	200000ec 	.word	0x200000ec
 800924c:	20000144 	.word	0x20000144

08009250 <read_cmd>:

void read_cmd(uint8_t *cmd_ptr, uint8_t *receivedPayload_ptr, uint8_t sideA)
{
 8009250:	b580      	push	{r7, lr}
 8009252:	b088      	sub	sp, #32
 8009254:	af02      	add	r7, sp, #8
 8009256:	60f8      	str	r0, [r7, #12]
 8009258:	60b9      	str	r1, [r7, #8]
 800925a:	4613      	mov	r3, r2
 800925c:	71fb      	strb	r3, [r7, #7]
	uint8_t dummies[8] = {0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF};
 800925e:	4a23      	ldr	r2, [pc, #140]	@ (80092ec <read_cmd+0x9c>)
 8009260:	f107 0310 	add.w	r3, r7, #16
 8009264:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009268:	e883 0003 	stmia.w	r3, {r0, r1}

	// TO LTC SIDE A (CELL 1 to 10)
	if (sideA) {
 800926c:	79fb      	ldrb	r3, [r7, #7]
 800926e:	2b00      	cmp	r3, #0
 8009270:	d01b      	beq.n	80092aa <read_cmd+0x5a>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8009272:	2200      	movs	r2, #0
 8009274:	2110      	movs	r1, #16
 8009276:	481e      	ldr	r0, [pc, #120]	@ (80092f0 <read_cmd+0xa0>)
 8009278:	f004 fb68 	bl	800d94c <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi1, cmd_ptr, CMD_LEN, HAL_MAX_DELAY);
 800927c:	f04f 33ff 	mov.w	r3, #4294967295
 8009280:	2204      	movs	r2, #4
 8009282:	68f9      	ldr	r1, [r7, #12]
 8009284:	481b      	ldr	r0, [pc, #108]	@ (80092f4 <read_cmd+0xa4>)
 8009286:	f005 f9b6 	bl	800e5f6 <HAL_SPI_Transmit>
		HAL_SPI_TransmitReceive(&hspi1, dummies, receivedPayload_ptr, PAYLOAD_LEN, HAL_MAX_DELAY);
 800928a:	f107 0110 	add.w	r1, r7, #16
 800928e:	f04f 33ff 	mov.w	r3, #4294967295
 8009292:	9300      	str	r3, [sp, #0]
 8009294:	2308      	movs	r3, #8
 8009296:	68ba      	ldr	r2, [r7, #8]
 8009298:	4816      	ldr	r0, [pc, #88]	@ (80092f4 <read_cmd+0xa4>)
 800929a:	f005 faf0 	bl	800e87e <HAL_SPI_TransmitReceive>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 800929e:	2201      	movs	r2, #1
 80092a0:	2110      	movs	r1, #16
 80092a2:	4813      	ldr	r0, [pc, #76]	@ (80092f0 <read_cmd+0xa0>)
 80092a4:	f004 fb52 	bl	800d94c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
		HAL_SPI_Transmit(&hspi3, cmd_ptr, CMD_LEN, HAL_MAX_DELAY);
		HAL_SPI_TransmitReceive(&hspi3, dummies, receivedPayload_ptr, PAYLOAD_LEN, HAL_MAX_DELAY);
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET);
	}
}
 80092a8:	e01c      	b.n	80092e4 <read_cmd+0x94>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 80092aa:	2200      	movs	r2, #0
 80092ac:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80092b0:	480f      	ldr	r0, [pc, #60]	@ (80092f0 <read_cmd+0xa0>)
 80092b2:	f004 fb4b 	bl	800d94c <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi3, cmd_ptr, CMD_LEN, HAL_MAX_DELAY);
 80092b6:	f04f 33ff 	mov.w	r3, #4294967295
 80092ba:	2204      	movs	r2, #4
 80092bc:	68f9      	ldr	r1, [r7, #12]
 80092be:	480e      	ldr	r0, [pc, #56]	@ (80092f8 <read_cmd+0xa8>)
 80092c0:	f005 f999 	bl	800e5f6 <HAL_SPI_Transmit>
		HAL_SPI_TransmitReceive(&hspi3, dummies, receivedPayload_ptr, PAYLOAD_LEN, HAL_MAX_DELAY);
 80092c4:	f107 0110 	add.w	r1, r7, #16
 80092c8:	f04f 33ff 	mov.w	r3, #4294967295
 80092cc:	9300      	str	r3, [sp, #0]
 80092ce:	2308      	movs	r3, #8
 80092d0:	68ba      	ldr	r2, [r7, #8]
 80092d2:	4809      	ldr	r0, [pc, #36]	@ (80092f8 <read_cmd+0xa8>)
 80092d4:	f005 fad3 	bl	800e87e <HAL_SPI_TransmitReceive>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET);
 80092d8:	2201      	movs	r2, #1
 80092da:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80092de:	4804      	ldr	r0, [pc, #16]	@ (80092f0 <read_cmd+0xa0>)
 80092e0:	f004 fb34 	bl	800d94c <HAL_GPIO_WritePin>
}
 80092e4:	bf00      	nop
 80092e6:	3718      	adds	r7, #24
 80092e8:	46bd      	mov	sp, r7
 80092ea:	bd80      	pop	{r7, pc}
 80092ec:	08010128 	.word	0x08010128
 80092f0:	40020000 	.word	0x40020000
 80092f4:	200000ec 	.word	0x200000ec
 80092f8:	20000144 	.word	0x20000144

080092fc <WRCFGA>:

// *** WRITE COMMANDS ***
void WRCFGA(uint8_t *payload_ptr, uint8_t side)
{
 80092fc:	b580      	push	{r7, lr}
 80092fe:	b088      	sub	sp, #32
 8009300:	af00      	add	r7, sp, #0
 8009302:	6078      	str	r0, [r7, #4]
 8009304:	460b      	mov	r3, r1
 8009306:	70fb      	strb	r3, [r7, #3]
	uint8_t cmd[4];
	uint16_t cmd_PEC;
	uint8_t configRegisterGroupA[8];
	uint16_t configRegisterGroupA_PEC;

	cmd[0] = 0x00;
 8009308:	2300      	movs	r3, #0
 800930a:	753b      	strb	r3, [r7, #20]
	cmd[1] = 0x01;
 800930c:	2301      	movs	r3, #1
 800930e:	757b      	strb	r3, [r7, #21]
	cmd_PEC = compute_PEC15(cmd, 2);
 8009310:	f107 0314 	add.w	r3, r7, #20
 8009314:	2102      	movs	r1, #2
 8009316:	4618      	mov	r0, r3
 8009318:	f7ff fea4 	bl	8009064 <compute_PEC15>
 800931c:	4603      	mov	r3, r0
 800931e:	83bb      	strh	r3, [r7, #28]
	append_PEC(cmd, 2, cmd_PEC);
 8009320:	8bba      	ldrh	r2, [r7, #28]
 8009322:	f107 0314 	add.w	r3, r7, #20
 8009326:	2102      	movs	r1, #2
 8009328:	4618      	mov	r0, r3
 800932a:	f7ff fed1 	bl	80090d0 <append_PEC>

	for(uint8_t i = 0; i < 6; i ++) {
 800932e:	2300      	movs	r3, #0
 8009330:	77fb      	strb	r3, [r7, #31]
 8009332:	e00b      	b.n	800934c <WRCFGA+0x50>
		configRegisterGroupA[i] = *(payload_ptr + i);
 8009334:	7ffb      	ldrb	r3, [r7, #31]
 8009336:	687a      	ldr	r2, [r7, #4]
 8009338:	441a      	add	r2, r3
 800933a:	7ffb      	ldrb	r3, [r7, #31]
 800933c:	7812      	ldrb	r2, [r2, #0]
 800933e:	3320      	adds	r3, #32
 8009340:	443b      	add	r3, r7
 8009342:	f803 2c14 	strb.w	r2, [r3, #-20]
	for(uint8_t i = 0; i < 6; i ++) {
 8009346:	7ffb      	ldrb	r3, [r7, #31]
 8009348:	3301      	adds	r3, #1
 800934a:	77fb      	strb	r3, [r7, #31]
 800934c:	7ffb      	ldrb	r3, [r7, #31]
 800934e:	2b05      	cmp	r3, #5
 8009350:	d9f0      	bls.n	8009334 <WRCFGA+0x38>
	}
	configRegisterGroupA_PEC = compute_PEC15(configRegisterGroupA, 6);
 8009352:	f107 030c 	add.w	r3, r7, #12
 8009356:	2106      	movs	r1, #6
 8009358:	4618      	mov	r0, r3
 800935a:	f7ff fe83 	bl	8009064 <compute_PEC15>
 800935e:	4603      	mov	r3, r0
 8009360:	837b      	strh	r3, [r7, #26]
	append_PEC(configRegisterGroupA, 6, configRegisterGroupA_PEC);
 8009362:	8b7a      	ldrh	r2, [r7, #26]
 8009364:	f107 030c 	add.w	r3, r7, #12
 8009368:	2106      	movs	r1, #6
 800936a:	4618      	mov	r0, r3
 800936c:	f7ff feb0 	bl	80090d0 <append_PEC>

	write_cmd(cmd, configRegisterGroupA, side);
 8009370:	78fa      	ldrb	r2, [r7, #3]
 8009372:	f107 010c 	add.w	r1, r7, #12
 8009376:	f107 0314 	add.w	r3, r7, #20
 800937a:	4618      	mov	r0, r3
 800937c:	f7ff ff20 	bl	80091c0 <write_cmd>
}
 8009380:	bf00      	nop
 8009382:	3720      	adds	r7, #32
 8009384:	46bd      	mov	sp, r7
 8009386:	bd80      	pop	{r7, pc}

08009388 <WRPWM>:
	write_cmd(cmd, registerGroupSControl, side);
}


void WRPWM(uint8_t *payload_ptr, uint8_t side)
{
 8009388:	b580      	push	{r7, lr}
 800938a:	b088      	sub	sp, #32
 800938c:	af00      	add	r7, sp, #0
 800938e:	6078      	str	r0, [r7, #4]
 8009390:	460b      	mov	r3, r1
 8009392:	70fb      	strb	r3, [r7, #3]
	uint8_t cmd[4];
	uint16_t cmd_PEC;
	uint8_t registerGroupPWM[8];
	uint16_t registerGroupPWM_PEC;

	cmd[0] = 0x00;
 8009394:	2300      	movs	r3, #0
 8009396:	753b      	strb	r3, [r7, #20]
	cmd[1] = 0x20;
 8009398:	2320      	movs	r3, #32
 800939a:	757b      	strb	r3, [r7, #21]
	cmd_PEC = compute_PEC15(cmd, 2);
 800939c:	f107 0314 	add.w	r3, r7, #20
 80093a0:	2102      	movs	r1, #2
 80093a2:	4618      	mov	r0, r3
 80093a4:	f7ff fe5e 	bl	8009064 <compute_PEC15>
 80093a8:	4603      	mov	r3, r0
 80093aa:	83bb      	strh	r3, [r7, #28]
	append_PEC(cmd, 2, cmd_PEC);
 80093ac:	8bba      	ldrh	r2, [r7, #28]
 80093ae:	f107 0314 	add.w	r3, r7, #20
 80093b2:	2102      	movs	r1, #2
 80093b4:	4618      	mov	r0, r3
 80093b6:	f7ff fe8b 	bl	80090d0 <append_PEC>

	for(uint8_t i = 0; i < 6; i ++) {
 80093ba:	2300      	movs	r3, #0
 80093bc:	77fb      	strb	r3, [r7, #31]
 80093be:	e00b      	b.n	80093d8 <WRPWM+0x50>
		registerGroupPWM[i] = *(payload_ptr + i);
 80093c0:	7ffb      	ldrb	r3, [r7, #31]
 80093c2:	687a      	ldr	r2, [r7, #4]
 80093c4:	441a      	add	r2, r3
 80093c6:	7ffb      	ldrb	r3, [r7, #31]
 80093c8:	7812      	ldrb	r2, [r2, #0]
 80093ca:	3320      	adds	r3, #32
 80093cc:	443b      	add	r3, r7
 80093ce:	f803 2c14 	strb.w	r2, [r3, #-20]
	for(uint8_t i = 0; i < 6; i ++) {
 80093d2:	7ffb      	ldrb	r3, [r7, #31]
 80093d4:	3301      	adds	r3, #1
 80093d6:	77fb      	strb	r3, [r7, #31]
 80093d8:	7ffb      	ldrb	r3, [r7, #31]
 80093da:	2b05      	cmp	r3, #5
 80093dc:	d9f0      	bls.n	80093c0 <WRPWM+0x38>
	}
	registerGroupPWM_PEC = compute_PEC15(registerGroupPWM, 6);
 80093de:	f107 030c 	add.w	r3, r7, #12
 80093e2:	2106      	movs	r1, #6
 80093e4:	4618      	mov	r0, r3
 80093e6:	f7ff fe3d 	bl	8009064 <compute_PEC15>
 80093ea:	4603      	mov	r3, r0
 80093ec:	837b      	strh	r3, [r7, #26]
	append_PEC(registerGroupPWM, 6, registerGroupPWM_PEC);
 80093ee:	8b7a      	ldrh	r2, [r7, #26]
 80093f0:	f107 030c 	add.w	r3, r7, #12
 80093f4:	2106      	movs	r1, #6
 80093f6:	4618      	mov	r0, r3
 80093f8:	f7ff fe6a 	bl	80090d0 <append_PEC>

	write_cmd(cmd, registerGroupPWM, side);
 80093fc:	78fa      	ldrb	r2, [r7, #3]
 80093fe:	f107 010c 	add.w	r1, r7, #12
 8009402:	f107 0314 	add.w	r3, r7, #20
 8009406:	4618      	mov	r0, r3
 8009408:	f7ff feda 	bl	80091c0 <write_cmd>
}
 800940c:	bf00      	nop
 800940e:	3720      	adds	r7, #32
 8009410:	46bd      	mov	sp, r7
 8009412:	bd80      	pop	{r7, pc}

08009414 <RDCFGA>:
// *** END WRITE COMMANDS ***


// *** READ COMMANDS ***
void RDCFGA(uint8_t *configRegisterGroupA_ptr, uint8_t side)
{
 8009414:	b580      	push	{r7, lr}
 8009416:	b084      	sub	sp, #16
 8009418:	af00      	add	r7, sp, #0
 800941a:	6078      	str	r0, [r7, #4]
 800941c:	460b      	mov	r3, r1
 800941e:	70fb      	strb	r3, [r7, #3]
	uint8_t cmd[4];
	uint16_t cmd_PEC;

	cmd[0] = 0x00;
 8009420:	2300      	movs	r3, #0
 8009422:	723b      	strb	r3, [r7, #8]
	cmd[1] = 0x02;
 8009424:	2302      	movs	r3, #2
 8009426:	727b      	strb	r3, [r7, #9]
	cmd_PEC = compute_PEC15(cmd, 2);
 8009428:	f107 0308 	add.w	r3, r7, #8
 800942c:	2102      	movs	r1, #2
 800942e:	4618      	mov	r0, r3
 8009430:	f7ff fe18 	bl	8009064 <compute_PEC15>
 8009434:	4603      	mov	r3, r0
 8009436:	81fb      	strh	r3, [r7, #14]
	append_PEC(cmd, 2, cmd_PEC);
 8009438:	89fa      	ldrh	r2, [r7, #14]
 800943a:	f107 0308 	add.w	r3, r7, #8
 800943e:	2102      	movs	r1, #2
 8009440:	4618      	mov	r0, r3
 8009442:	f7ff fe45 	bl	80090d0 <append_PEC>

	read_cmd(cmd, configRegisterGroupA_ptr, side);
 8009446:	78fa      	ldrb	r2, [r7, #3]
 8009448:	f107 0308 	add.w	r3, r7, #8
 800944c:	6879      	ldr	r1, [r7, #4]
 800944e:	4618      	mov	r0, r3
 8009450:	f7ff fefe 	bl	8009250 <read_cmd>
}
 8009454:	bf00      	nop
 8009456:	3710      	adds	r7, #16
 8009458:	46bd      	mov	sp, r7
 800945a:	bd80      	pop	{r7, pc}

0800945c <RDCFGB>:


void RDCFGB(uint8_t *configRegisterGroupB_ptr, uint8_t side)
{
 800945c:	b580      	push	{r7, lr}
 800945e:	b084      	sub	sp, #16
 8009460:	af00      	add	r7, sp, #0
 8009462:	6078      	str	r0, [r7, #4]
 8009464:	460b      	mov	r3, r1
 8009466:	70fb      	strb	r3, [r7, #3]
	uint8_t cmd[4];
	uint16_t cmd_PEC;

	cmd[0] = 0x00;
 8009468:	2300      	movs	r3, #0
 800946a:	723b      	strb	r3, [r7, #8]
	cmd[1] = 0x26;
 800946c:	2326      	movs	r3, #38	@ 0x26
 800946e:	727b      	strb	r3, [r7, #9]
	cmd_PEC = compute_PEC15(cmd, 2);
 8009470:	f107 0308 	add.w	r3, r7, #8
 8009474:	2102      	movs	r1, #2
 8009476:	4618      	mov	r0, r3
 8009478:	f7ff fdf4 	bl	8009064 <compute_PEC15>
 800947c:	4603      	mov	r3, r0
 800947e:	81fb      	strh	r3, [r7, #14]
	append_PEC(cmd, 2, cmd_PEC);
 8009480:	89fa      	ldrh	r2, [r7, #14]
 8009482:	f107 0308 	add.w	r3, r7, #8
 8009486:	2102      	movs	r1, #2
 8009488:	4618      	mov	r0, r3
 800948a:	f7ff fe21 	bl	80090d0 <append_PEC>

	read_cmd(cmd, configRegisterGroupB_ptr, side);
 800948e:	78fa      	ldrb	r2, [r7, #3]
 8009490:	f107 0308 	add.w	r3, r7, #8
 8009494:	6879      	ldr	r1, [r7, #4]
 8009496:	4618      	mov	r0, r3
 8009498:	f7ff feda 	bl	8009250 <read_cmd>
}
 800949c:	bf00      	nop
 800949e:	3710      	adds	r7, #16
 80094a0:	46bd      	mov	sp, r7
 80094a2:	bd80      	pop	{r7, pc}

080094a4 <RDCVA>:


void RDCVA(uint8_t *cellVoltageRegisterGroupA_ptr, uint8_t side)
{
 80094a4:	b580      	push	{r7, lr}
 80094a6:	b084      	sub	sp, #16
 80094a8:	af00      	add	r7, sp, #0
 80094aa:	6078      	str	r0, [r7, #4]
 80094ac:	460b      	mov	r3, r1
 80094ae:	70fb      	strb	r3, [r7, #3]
	uint8_t cmd[4];
	uint16_t cmd_PEC;

	cmd[0] = 0x00;
 80094b0:	2300      	movs	r3, #0
 80094b2:	723b      	strb	r3, [r7, #8]
	cmd[1] = 0x04;
 80094b4:	2304      	movs	r3, #4
 80094b6:	727b      	strb	r3, [r7, #9]
	cmd_PEC = compute_PEC15(cmd, 2);
 80094b8:	f107 0308 	add.w	r3, r7, #8
 80094bc:	2102      	movs	r1, #2
 80094be:	4618      	mov	r0, r3
 80094c0:	f7ff fdd0 	bl	8009064 <compute_PEC15>
 80094c4:	4603      	mov	r3, r0
 80094c6:	81fb      	strh	r3, [r7, #14]
	append_PEC(cmd, 2, cmd_PEC);
 80094c8:	89fa      	ldrh	r2, [r7, #14]
 80094ca:	f107 0308 	add.w	r3, r7, #8
 80094ce:	2102      	movs	r1, #2
 80094d0:	4618      	mov	r0, r3
 80094d2:	f7ff fdfd 	bl	80090d0 <append_PEC>

	read_cmd(cmd, cellVoltageRegisterGroupA_ptr, side);
 80094d6:	78fa      	ldrb	r2, [r7, #3]
 80094d8:	f107 0308 	add.w	r3, r7, #8
 80094dc:	6879      	ldr	r1, [r7, #4]
 80094de:	4618      	mov	r0, r3
 80094e0:	f7ff feb6 	bl	8009250 <read_cmd>
}
 80094e4:	bf00      	nop
 80094e6:	3710      	adds	r7, #16
 80094e8:	46bd      	mov	sp, r7
 80094ea:	bd80      	pop	{r7, pc}

080094ec <RDCVB>:


void RDCVB(uint8_t *cellVoltageRegisterGroupB_ptr, uint8_t side)
{
 80094ec:	b580      	push	{r7, lr}
 80094ee:	b084      	sub	sp, #16
 80094f0:	af00      	add	r7, sp, #0
 80094f2:	6078      	str	r0, [r7, #4]
 80094f4:	460b      	mov	r3, r1
 80094f6:	70fb      	strb	r3, [r7, #3]
	uint8_t cmd[4];
	uint16_t cmd_PEC;

	cmd[0] = 0x00;
 80094f8:	2300      	movs	r3, #0
 80094fa:	723b      	strb	r3, [r7, #8]
	cmd[1] = 0x06;
 80094fc:	2306      	movs	r3, #6
 80094fe:	727b      	strb	r3, [r7, #9]
	cmd_PEC = compute_PEC15(cmd, 2);
 8009500:	f107 0308 	add.w	r3, r7, #8
 8009504:	2102      	movs	r1, #2
 8009506:	4618      	mov	r0, r3
 8009508:	f7ff fdac 	bl	8009064 <compute_PEC15>
 800950c:	4603      	mov	r3, r0
 800950e:	81fb      	strh	r3, [r7, #14]
	append_PEC(cmd, 2, cmd_PEC);
 8009510:	89fa      	ldrh	r2, [r7, #14]
 8009512:	f107 0308 	add.w	r3, r7, #8
 8009516:	2102      	movs	r1, #2
 8009518:	4618      	mov	r0, r3
 800951a:	f7ff fdd9 	bl	80090d0 <append_PEC>

	read_cmd(cmd, cellVoltageRegisterGroupB_ptr, side);
 800951e:	78fa      	ldrb	r2, [r7, #3]
 8009520:	f107 0308 	add.w	r3, r7, #8
 8009524:	6879      	ldr	r1, [r7, #4]
 8009526:	4618      	mov	r0, r3
 8009528:	f7ff fe92 	bl	8009250 <read_cmd>
}
 800952c:	bf00      	nop
 800952e:	3710      	adds	r7, #16
 8009530:	46bd      	mov	sp, r7
 8009532:	bd80      	pop	{r7, pc}

08009534 <RDCVC>:


void RDCVC(uint8_t *cellVoltageRegisterGroupC_ptr, uint8_t side)
{
 8009534:	b580      	push	{r7, lr}
 8009536:	b084      	sub	sp, #16
 8009538:	af00      	add	r7, sp, #0
 800953a:	6078      	str	r0, [r7, #4]
 800953c:	460b      	mov	r3, r1
 800953e:	70fb      	strb	r3, [r7, #3]
	uint8_t cmd[4];
	uint16_t cmd_PEC;

	cmd[0] = 0x00;
 8009540:	2300      	movs	r3, #0
 8009542:	723b      	strb	r3, [r7, #8]
	cmd[1] = 0x08;
 8009544:	2308      	movs	r3, #8
 8009546:	727b      	strb	r3, [r7, #9]
	cmd_PEC = compute_PEC15(cmd, 2);
 8009548:	f107 0308 	add.w	r3, r7, #8
 800954c:	2102      	movs	r1, #2
 800954e:	4618      	mov	r0, r3
 8009550:	f7ff fd88 	bl	8009064 <compute_PEC15>
 8009554:	4603      	mov	r3, r0
 8009556:	81fb      	strh	r3, [r7, #14]
	append_PEC(cmd, 2, cmd_PEC);
 8009558:	89fa      	ldrh	r2, [r7, #14]
 800955a:	f107 0308 	add.w	r3, r7, #8
 800955e:	2102      	movs	r1, #2
 8009560:	4618      	mov	r0, r3
 8009562:	f7ff fdb5 	bl	80090d0 <append_PEC>

	read_cmd(cmd, cellVoltageRegisterGroupC_ptr, side);
 8009566:	78fa      	ldrb	r2, [r7, #3]
 8009568:	f107 0308 	add.w	r3, r7, #8
 800956c:	6879      	ldr	r1, [r7, #4]
 800956e:	4618      	mov	r0, r3
 8009570:	f7ff fe6e 	bl	8009250 <read_cmd>
}
 8009574:	bf00      	nop
 8009576:	3710      	adds	r7, #16
 8009578:	46bd      	mov	sp, r7
 800957a:	bd80      	pop	{r7, pc}

0800957c <RDCVD>:


void RDCVD(uint8_t *cellVoltageRegisterGroupD_ptr, uint8_t side)
{
 800957c:	b580      	push	{r7, lr}
 800957e:	b084      	sub	sp, #16
 8009580:	af00      	add	r7, sp, #0
 8009582:	6078      	str	r0, [r7, #4]
 8009584:	460b      	mov	r3, r1
 8009586:	70fb      	strb	r3, [r7, #3]
	uint8_t cmd[4];
	uint16_t cmd_PEC;

	cmd[0] = 0x00;
 8009588:	2300      	movs	r3, #0
 800958a:	723b      	strb	r3, [r7, #8]
	cmd[1] = 0x0A;
 800958c:	230a      	movs	r3, #10
 800958e:	727b      	strb	r3, [r7, #9]
	cmd_PEC = compute_PEC15(cmd, 2);
 8009590:	f107 0308 	add.w	r3, r7, #8
 8009594:	2102      	movs	r1, #2
 8009596:	4618      	mov	r0, r3
 8009598:	f7ff fd64 	bl	8009064 <compute_PEC15>
 800959c:	4603      	mov	r3, r0
 800959e:	81fb      	strh	r3, [r7, #14]
	append_PEC(cmd, 2, cmd_PEC);
 80095a0:	89fa      	ldrh	r2, [r7, #14]
 80095a2:	f107 0308 	add.w	r3, r7, #8
 80095a6:	2102      	movs	r1, #2
 80095a8:	4618      	mov	r0, r3
 80095aa:	f7ff fd91 	bl	80090d0 <append_PEC>

	read_cmd(cmd, cellVoltageRegisterGroupD_ptr, side);
 80095ae:	78fa      	ldrb	r2, [r7, #3]
 80095b0:	f107 0308 	add.w	r3, r7, #8
 80095b4:	6879      	ldr	r1, [r7, #4]
 80095b6:	4618      	mov	r0, r3
 80095b8:	f7ff fe4a 	bl	8009250 <read_cmd>
}
 80095bc:	bf00      	nop
 80095be:	3710      	adds	r7, #16
 80095c0:	46bd      	mov	sp, r7
 80095c2:	bd80      	pop	{r7, pc}

080095c4 <RDCVE>:


void RDCVE(uint8_t *cellVoltageRegisterGroupE_ptr, uint8_t side)
{
 80095c4:	b580      	push	{r7, lr}
 80095c6:	b084      	sub	sp, #16
 80095c8:	af00      	add	r7, sp, #0
 80095ca:	6078      	str	r0, [r7, #4]
 80095cc:	460b      	mov	r3, r1
 80095ce:	70fb      	strb	r3, [r7, #3]
	uint8_t cmd[4];
	uint16_t cmd_PEC;

	cmd[0] = 0x00;
 80095d0:	2300      	movs	r3, #0
 80095d2:	723b      	strb	r3, [r7, #8]
	cmd[1] = 0x09;
 80095d4:	2309      	movs	r3, #9
 80095d6:	727b      	strb	r3, [r7, #9]
	cmd_PEC = compute_PEC15(cmd, 2);
 80095d8:	f107 0308 	add.w	r3, r7, #8
 80095dc:	2102      	movs	r1, #2
 80095de:	4618      	mov	r0, r3
 80095e0:	f7ff fd40 	bl	8009064 <compute_PEC15>
 80095e4:	4603      	mov	r3, r0
 80095e6:	81fb      	strh	r3, [r7, #14]
	append_PEC(cmd, 2, cmd_PEC);
 80095e8:	89fa      	ldrh	r2, [r7, #14]
 80095ea:	f107 0308 	add.w	r3, r7, #8
 80095ee:	2102      	movs	r1, #2
 80095f0:	4618      	mov	r0, r3
 80095f2:	f7ff fd6d 	bl	80090d0 <append_PEC>

	read_cmd(cmd, cellVoltageRegisterGroupE_ptr, side);
 80095f6:	78fa      	ldrb	r2, [r7, #3]
 80095f8:	f107 0308 	add.w	r3, r7, #8
 80095fc:	6879      	ldr	r1, [r7, #4]
 80095fe:	4618      	mov	r0, r3
 8009600:	f7ff fe26 	bl	8009250 <read_cmd>
}
 8009604:	bf00      	nop
 8009606:	3710      	adds	r7, #16
 8009608:	46bd      	mov	sp, r7
 800960a:	bd80      	pop	{r7, pc}

0800960c <RDSTATA>:
	read_cmd(cmd, cellVoltageRegisterGroupF_ptr, side);
}


void RDSTATA(uint8_t *statusRegisterGroupA_ptr, uint8_t side)
{
 800960c:	b580      	push	{r7, lr}
 800960e:	b084      	sub	sp, #16
 8009610:	af00      	add	r7, sp, #0
 8009612:	6078      	str	r0, [r7, #4]
 8009614:	460b      	mov	r3, r1
 8009616:	70fb      	strb	r3, [r7, #3]
	uint8_t cmd[4];
	uint16_t cmd_PEC;

	cmd[0] = 0x00;
 8009618:	2300      	movs	r3, #0
 800961a:	723b      	strb	r3, [r7, #8]
	cmd[1] = 0x10;
 800961c:	2310      	movs	r3, #16
 800961e:	727b      	strb	r3, [r7, #9]
	cmd_PEC = compute_PEC15(cmd, 2);
 8009620:	f107 0308 	add.w	r3, r7, #8
 8009624:	2102      	movs	r1, #2
 8009626:	4618      	mov	r0, r3
 8009628:	f7ff fd1c 	bl	8009064 <compute_PEC15>
 800962c:	4603      	mov	r3, r0
 800962e:	81fb      	strh	r3, [r7, #14]
	append_PEC(cmd, 2, cmd_PEC);
 8009630:	89fa      	ldrh	r2, [r7, #14]
 8009632:	f107 0308 	add.w	r3, r7, #8
 8009636:	2102      	movs	r1, #2
 8009638:	4618      	mov	r0, r3
 800963a:	f7ff fd49 	bl	80090d0 <append_PEC>

	read_cmd(cmd, statusRegisterGroupA_ptr, side);
 800963e:	78fa      	ldrb	r2, [r7, #3]
 8009640:	f107 0308 	add.w	r3, r7, #8
 8009644:	6879      	ldr	r1, [r7, #4]
 8009646:	4618      	mov	r0, r3
 8009648:	f7ff fe02 	bl	8009250 <read_cmd>
}
 800964c:	bf00      	nop
 800964e:	3710      	adds	r7, #16
 8009650:	46bd      	mov	sp, r7
 8009652:	bd80      	pop	{r7, pc}

08009654 <RDSTATB>:


void RDSTATB(uint8_t *statusRegisterGroupB_ptr, uint8_t side)
{
 8009654:	b580      	push	{r7, lr}
 8009656:	b084      	sub	sp, #16
 8009658:	af00      	add	r7, sp, #0
 800965a:	6078      	str	r0, [r7, #4]
 800965c:	460b      	mov	r3, r1
 800965e:	70fb      	strb	r3, [r7, #3]
	uint8_t cmd[4];
	uint16_t cmd_PEC;

	cmd[0] = 0x00;
 8009660:	2300      	movs	r3, #0
 8009662:	723b      	strb	r3, [r7, #8]
	cmd[1] = 0x12;
 8009664:	2312      	movs	r3, #18
 8009666:	727b      	strb	r3, [r7, #9]
	cmd_PEC = compute_PEC15(cmd, 2);
 8009668:	f107 0308 	add.w	r3, r7, #8
 800966c:	2102      	movs	r1, #2
 800966e:	4618      	mov	r0, r3
 8009670:	f7ff fcf8 	bl	8009064 <compute_PEC15>
 8009674:	4603      	mov	r3, r0
 8009676:	81fb      	strh	r3, [r7, #14]
	append_PEC(cmd, 2, cmd_PEC);
 8009678:	89fa      	ldrh	r2, [r7, #14]
 800967a:	f107 0308 	add.w	r3, r7, #8
 800967e:	2102      	movs	r1, #2
 8009680:	4618      	mov	r0, r3
 8009682:	f7ff fd25 	bl	80090d0 <append_PEC>

	read_cmd(cmd, statusRegisterGroupB_ptr, side);
 8009686:	78fa      	ldrb	r2, [r7, #3]
 8009688:	f107 0308 	add.w	r3, r7, #8
 800968c:	6879      	ldr	r1, [r7, #4]
 800968e:	4618      	mov	r0, r3
 8009690:	f7ff fdde 	bl	8009250 <read_cmd>
}
 8009694:	bf00      	nop
 8009696:	3710      	adds	r7, #16
 8009698:	46bd      	mov	sp, r7
 800969a:	bd80      	pop	{r7, pc}

0800969c <RDAUXA>:


void RDAUXA(uint8_t *auxiliaryRegisterGroupA_ptr, uint8_t side)
{
 800969c:	b580      	push	{r7, lr}
 800969e:	b084      	sub	sp, #16
 80096a0:	af00      	add	r7, sp, #0
 80096a2:	6078      	str	r0, [r7, #4]
 80096a4:	460b      	mov	r3, r1
 80096a6:	70fb      	strb	r3, [r7, #3]
	uint8_t cmd[4];
	uint16_t cmd_PEC;

	cmd[0] = 0x00;
 80096a8:	2300      	movs	r3, #0
 80096aa:	723b      	strb	r3, [r7, #8]
	cmd[1] = 0x0C;
 80096ac:	230c      	movs	r3, #12
 80096ae:	727b      	strb	r3, [r7, #9]
	cmd_PEC = compute_PEC15(cmd, 2);
 80096b0:	f107 0308 	add.w	r3, r7, #8
 80096b4:	2102      	movs	r1, #2
 80096b6:	4618      	mov	r0, r3
 80096b8:	f7ff fcd4 	bl	8009064 <compute_PEC15>
 80096bc:	4603      	mov	r3, r0
 80096be:	81fb      	strh	r3, [r7, #14]
	append_PEC(cmd, 2, cmd_PEC);
 80096c0:	89fa      	ldrh	r2, [r7, #14]
 80096c2:	f107 0308 	add.w	r3, r7, #8
 80096c6:	2102      	movs	r1, #2
 80096c8:	4618      	mov	r0, r3
 80096ca:	f7ff fd01 	bl	80090d0 <append_PEC>

	read_cmd(cmd, auxiliaryRegisterGroupA_ptr, side);
 80096ce:	78fa      	ldrb	r2, [r7, #3]
 80096d0:	f107 0308 	add.w	r3, r7, #8
 80096d4:	6879      	ldr	r1, [r7, #4]
 80096d6:	4618      	mov	r0, r3
 80096d8:	f7ff fdba 	bl	8009250 <read_cmd>
}
 80096dc:	bf00      	nop
 80096de:	3710      	adds	r7, #16
 80096e0:	46bd      	mov	sp, r7
 80096e2:	bd80      	pop	{r7, pc}

080096e4 <RDAUXB>:


void RDAUXB(uint8_t *auxiliaryRegisterGroupB_ptr, uint8_t side)
{
 80096e4:	b580      	push	{r7, lr}
 80096e6:	b084      	sub	sp, #16
 80096e8:	af00      	add	r7, sp, #0
 80096ea:	6078      	str	r0, [r7, #4]
 80096ec:	460b      	mov	r3, r1
 80096ee:	70fb      	strb	r3, [r7, #3]
	uint8_t cmd[4];
	uint16_t cmd_PEC;

	cmd[0] = 0x00;
 80096f0:	2300      	movs	r3, #0
 80096f2:	723b      	strb	r3, [r7, #8]
	cmd[1] = 0x0E;
 80096f4:	230e      	movs	r3, #14
 80096f6:	727b      	strb	r3, [r7, #9]
	cmd_PEC = compute_PEC15(cmd, 2);
 80096f8:	f107 0308 	add.w	r3, r7, #8
 80096fc:	2102      	movs	r1, #2
 80096fe:	4618      	mov	r0, r3
 8009700:	f7ff fcb0 	bl	8009064 <compute_PEC15>
 8009704:	4603      	mov	r3, r0
 8009706:	81fb      	strh	r3, [r7, #14]
	append_PEC(cmd, 2, cmd_PEC);
 8009708:	89fa      	ldrh	r2, [r7, #14]
 800970a:	f107 0308 	add.w	r3, r7, #8
 800970e:	2102      	movs	r1, #2
 8009710:	4618      	mov	r0, r3
 8009712:	f7ff fcdd 	bl	80090d0 <append_PEC>

	read_cmd(cmd, auxiliaryRegisterGroupB_ptr, side);
 8009716:	78fa      	ldrb	r2, [r7, #3]
 8009718:	f107 0308 	add.w	r3, r7, #8
 800971c:	6879      	ldr	r1, [r7, #4]
 800971e:	4618      	mov	r0, r3
 8009720:	f7ff fd96 	bl	8009250 <read_cmd>
}
 8009724:	bf00      	nop
 8009726:	3710      	adds	r7, #16
 8009728:	46bd      	mov	sp, r7
 800972a:	bd80      	pop	{r7, pc}

0800972c <RDAUXC>:


void RDAUXC(uint8_t *auxiliaryRegisterGroupC_ptr, uint8_t side)
{
 800972c:	b580      	push	{r7, lr}
 800972e:	b084      	sub	sp, #16
 8009730:	af00      	add	r7, sp, #0
 8009732:	6078      	str	r0, [r7, #4]
 8009734:	460b      	mov	r3, r1
 8009736:	70fb      	strb	r3, [r7, #3]
	uint8_t cmd[4];
	uint16_t cmd_PEC;

	cmd[0] = 0x00;
 8009738:	2300      	movs	r3, #0
 800973a:	723b      	strb	r3, [r7, #8]
	cmd[1] = 0x0D;
 800973c:	230d      	movs	r3, #13
 800973e:	727b      	strb	r3, [r7, #9]
	cmd_PEC = compute_PEC15(cmd, 2);
 8009740:	f107 0308 	add.w	r3, r7, #8
 8009744:	2102      	movs	r1, #2
 8009746:	4618      	mov	r0, r3
 8009748:	f7ff fc8c 	bl	8009064 <compute_PEC15>
 800974c:	4603      	mov	r3, r0
 800974e:	81fb      	strh	r3, [r7, #14]
	append_PEC(cmd, 2, cmd_PEC);
 8009750:	89fa      	ldrh	r2, [r7, #14]
 8009752:	f107 0308 	add.w	r3, r7, #8
 8009756:	2102      	movs	r1, #2
 8009758:	4618      	mov	r0, r3
 800975a:	f7ff fcb9 	bl	80090d0 <append_PEC>

	read_cmd(cmd, auxiliaryRegisterGroupC_ptr, side);
 800975e:	78fa      	ldrb	r2, [r7, #3]
 8009760:	f107 0308 	add.w	r3, r7, #8
 8009764:	6879      	ldr	r1, [r7, #4]
 8009766:	4618      	mov	r0, r3
 8009768:	f7ff fd72 	bl	8009250 <read_cmd>
}
 800976c:	bf00      	nop
 800976e:	3710      	adds	r7, #16
 8009770:	46bd      	mov	sp, r7
 8009772:	bd80      	pop	{r7, pc}

08009774 <RDAUXD>:


void RDAUXD(uint8_t *auxiliaryRegisterGroupD_ptr, uint8_t side)
{
 8009774:	b580      	push	{r7, lr}
 8009776:	b084      	sub	sp, #16
 8009778:	af00      	add	r7, sp, #0
 800977a:	6078      	str	r0, [r7, #4]
 800977c:	460b      	mov	r3, r1
 800977e:	70fb      	strb	r3, [r7, #3]
	uint8_t cmd[4];
	uint16_t cmd_PEC;

	cmd[0] = 0x00;
 8009780:	2300      	movs	r3, #0
 8009782:	723b      	strb	r3, [r7, #8]
	cmd[1] = 0x0F;
 8009784:	230f      	movs	r3, #15
 8009786:	727b      	strb	r3, [r7, #9]
	cmd_PEC = compute_PEC15(cmd, 2);
 8009788:	f107 0308 	add.w	r3, r7, #8
 800978c:	2102      	movs	r1, #2
 800978e:	4618      	mov	r0, r3
 8009790:	f7ff fc68 	bl	8009064 <compute_PEC15>
 8009794:	4603      	mov	r3, r0
 8009796:	81fb      	strh	r3, [r7, #14]
	append_PEC(cmd, 2, cmd_PEC);
 8009798:	89fa      	ldrh	r2, [r7, #14]
 800979a:	f107 0308 	add.w	r3, r7, #8
 800979e:	2102      	movs	r1, #2
 80097a0:	4618      	mov	r0, r3
 80097a2:	f7ff fc95 	bl	80090d0 <append_PEC>

	read_cmd(cmd, auxiliaryRegisterGroupD_ptr, side);
 80097a6:	78fa      	ldrb	r2, [r7, #3]
 80097a8:	f107 0308 	add.w	r3, r7, #8
 80097ac:	6879      	ldr	r1, [r7, #4]
 80097ae:	4618      	mov	r0, r3
 80097b0:	f7ff fd4e 	bl	8009250 <read_cmd>
}
 80097b4:	bf00      	nop
 80097b6:	3710      	adds	r7, #16
 80097b8:	46bd      	mov	sp, r7
 80097ba:	bd80      	pop	{r7, pc}

080097bc <RDPWM>:
	read_cmd(cmd, SControlRegisterGroup_ptr, side);
}


void RDPWM(uint8_t *PWMRegisterGroup_ptr, uint8_t side)
{
 80097bc:	b580      	push	{r7, lr}
 80097be:	b084      	sub	sp, #16
 80097c0:	af00      	add	r7, sp, #0
 80097c2:	6078      	str	r0, [r7, #4]
 80097c4:	460b      	mov	r3, r1
 80097c6:	70fb      	strb	r3, [r7, #3]
	uint8_t cmd[4];
	uint16_t cmd_PEC;

	cmd[0] = 0x00;
 80097c8:	2300      	movs	r3, #0
 80097ca:	723b      	strb	r3, [r7, #8]
	cmd[1] = 0x22;
 80097cc:	2322      	movs	r3, #34	@ 0x22
 80097ce:	727b      	strb	r3, [r7, #9]
	cmd_PEC = compute_PEC15(cmd, 2);
 80097d0:	f107 0308 	add.w	r3, r7, #8
 80097d4:	2102      	movs	r1, #2
 80097d6:	4618      	mov	r0, r3
 80097d8:	f7ff fc44 	bl	8009064 <compute_PEC15>
 80097dc:	4603      	mov	r3, r0
 80097de:	81fb      	strh	r3, [r7, #14]
	append_PEC(cmd, 2, cmd_PEC);
 80097e0:	89fa      	ldrh	r2, [r7, #14]
 80097e2:	f107 0308 	add.w	r3, r7, #8
 80097e6:	2102      	movs	r1, #2
 80097e8:	4618      	mov	r0, r3
 80097ea:	f7ff fc71 	bl	80090d0 <append_PEC>

	read_cmd(cmd, PWMRegisterGroup_ptr, side);
 80097ee:	78fa      	ldrb	r2, [r7, #3]
 80097f0:	f107 0308 	add.w	r3, r7, #8
 80097f4:	6879      	ldr	r1, [r7, #4]
 80097f6:	4618      	mov	r0, r3
 80097f8:	f7ff fd2a 	bl	8009250 <read_cmd>
}
 80097fc:	bf00      	nop
 80097fe:	3710      	adds	r7, #16
 8009800:	46bd      	mov	sp, r7
 8009802:	bd80      	pop	{r7, pc}

08009804 <ADOW>:
	action_cmd(cmd, side);
}


void ADOW(uint8_t variant, uint8_t side)
{
 8009804:	b580      	push	{r7, lr}
 8009806:	b084      	sub	sp, #16
 8009808:	af00      	add	r7, sp, #0
 800980a:	4603      	mov	r3, r0
 800980c:	460a      	mov	r2, r1
 800980e:	71fb      	strb	r3, [r7, #7]
 8009810:	4613      	mov	r3, r2
 8009812:	71bb      	strb	r3, [r7, #6]
	uint8_t cmd[4];
	uint16_t cmd_PEC;

	if(variant) {			// PUP = 0
 8009814:	79fb      	ldrb	r3, [r7, #7]
 8009816:	2b00      	cmp	r3, #0
 8009818:	d004      	beq.n	8009824 <ADOW+0x20>
		cmd[0] = 0x03;
 800981a:	2303      	movs	r3, #3
 800981c:	723b      	strb	r3, [r7, #8]
		cmd[1] = 0x38;
 800981e:	2338      	movs	r3, #56	@ 0x38
 8009820:	727b      	strb	r3, [r7, #9]
 8009822:	e003      	b.n	800982c <ADOW+0x28>
	}
	else {					// PUP = 1
		cmd[0] = 0x03;
 8009824:	2303      	movs	r3, #3
 8009826:	723b      	strb	r3, [r7, #8]
		cmd[1] = 0x78;
 8009828:	2378      	movs	r3, #120	@ 0x78
 800982a:	727b      	strb	r3, [r7, #9]
	}

	cmd_PEC = compute_PEC15(cmd, 2);
 800982c:	f107 0308 	add.w	r3, r7, #8
 8009830:	2102      	movs	r1, #2
 8009832:	4618      	mov	r0, r3
 8009834:	f7ff fc16 	bl	8009064 <compute_PEC15>
 8009838:	4603      	mov	r3, r0
 800983a:	81fb      	strh	r3, [r7, #14]
	append_PEC(cmd, 2, cmd_PEC);
 800983c:	89fa      	ldrh	r2, [r7, #14]
 800983e:	f107 0308 	add.w	r3, r7, #8
 8009842:	2102      	movs	r1, #2
 8009844:	4618      	mov	r0, r3
 8009846:	f7ff fc43 	bl	80090d0 <append_PEC>

	action_cmd(cmd, side);
 800984a:	79ba      	ldrb	r2, [r7, #6]
 800984c:	f107 0308 	add.w	r3, r7, #8
 8009850:	4611      	mov	r1, r2
 8009852:	4618      	mov	r0, r3
 8009854:	f7ff fc7c 	bl	8009150 <action_cmd>
}
 8009858:	bf00      	nop
 800985a:	3710      	adds	r7, #16
 800985c:	46bd      	mov	sp, r7
 800985e:	bd80      	pop	{r7, pc}

08009860 <ADOL>:


void ADOL(uint8_t side)
{
 8009860:	b580      	push	{r7, lr}
 8009862:	b084      	sub	sp, #16
 8009864:	af00      	add	r7, sp, #0
 8009866:	4603      	mov	r3, r0
 8009868:	71fb      	strb	r3, [r7, #7]
	uint8_t cmd[4];
	uint16_t cmd_PEC;

	cmd[0] = 0x03;
 800986a:	2303      	movs	r3, #3
 800986c:	723b      	strb	r3, [r7, #8]
	cmd[1] = 0x01;
 800986e:	2301      	movs	r3, #1
 8009870:	727b      	strb	r3, [r7, #9]
	cmd_PEC = compute_PEC15(cmd, 2);
 8009872:	f107 0308 	add.w	r3, r7, #8
 8009876:	2102      	movs	r1, #2
 8009878:	4618      	mov	r0, r3
 800987a:	f7ff fbf3 	bl	8009064 <compute_PEC15>
 800987e:	4603      	mov	r3, r0
 8009880:	81fb      	strh	r3, [r7, #14]
	append_PEC(cmd, 2, cmd_PEC);
 8009882:	89fa      	ldrh	r2, [r7, #14]
 8009884:	f107 0308 	add.w	r3, r7, #8
 8009888:	2102      	movs	r1, #2
 800988a:	4618      	mov	r0, r3
 800988c:	f7ff fc20 	bl	80090d0 <append_PEC>

	action_cmd(cmd, side);
 8009890:	79fa      	ldrb	r2, [r7, #7]
 8009892:	f107 0308 	add.w	r3, r7, #8
 8009896:	4611      	mov	r1, r2
 8009898:	4618      	mov	r0, r3
 800989a:	f7ff fc59 	bl	8009150 <action_cmd>
}
 800989e:	bf00      	nop
 80098a0:	3710      	adds	r7, #16
 80098a2:	46bd      	mov	sp, r7
 80098a4:	bd80      	pop	{r7, pc}

080098a6 <CVST>:


void CVST(uint8_t variant, uint8_t side)
{
 80098a6:	b580      	push	{r7, lr}
 80098a8:	b084      	sub	sp, #16
 80098aa:	af00      	add	r7, sp, #0
 80098ac:	4603      	mov	r3, r0
 80098ae:	460a      	mov	r2, r1
 80098b0:	71fb      	strb	r3, [r7, #7]
 80098b2:	4613      	mov	r3, r2
 80098b4:	71bb      	strb	r3, [r7, #6]
	uint8_t cmd[4];
	uint16_t cmd_PEC;

	if(variant) {
 80098b6:	79fb      	ldrb	r3, [r7, #7]
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	d004      	beq.n	80098c6 <CVST+0x20>
		cmd[0] = 0x03;
 80098bc:	2303      	movs	r3, #3
 80098be:	723b      	strb	r3, [r7, #8]
		cmd[1] = 0x27;
 80098c0:	2327      	movs	r3, #39	@ 0x27
 80098c2:	727b      	strb	r3, [r7, #9]
 80098c4:	e003      	b.n	80098ce <CVST+0x28>
	}
	else {
		cmd[0] = 0x03;
 80098c6:	2303      	movs	r3, #3
 80098c8:	723b      	strb	r3, [r7, #8]
		cmd[1] = 0x47;
 80098ca:	2347      	movs	r3, #71	@ 0x47
 80098cc:	727b      	strb	r3, [r7, #9]
	}

	cmd_PEC = compute_PEC15(cmd, 2);
 80098ce:	f107 0308 	add.w	r3, r7, #8
 80098d2:	2102      	movs	r1, #2
 80098d4:	4618      	mov	r0, r3
 80098d6:	f7ff fbc5 	bl	8009064 <compute_PEC15>
 80098da:	4603      	mov	r3, r0
 80098dc:	81fb      	strh	r3, [r7, #14]
	append_PEC(cmd, 2, cmd_PEC);
 80098de:	89fa      	ldrh	r2, [r7, #14]
 80098e0:	f107 0308 	add.w	r3, r7, #8
 80098e4:	2102      	movs	r1, #2
 80098e6:	4618      	mov	r0, r3
 80098e8:	f7ff fbf2 	bl	80090d0 <append_PEC>

	action_cmd(cmd, side);
 80098ec:	79ba      	ldrb	r2, [r7, #6]
 80098ee:	f107 0308 	add.w	r3, r7, #8
 80098f2:	4611      	mov	r1, r2
 80098f4:	4618      	mov	r0, r3
 80098f6:	f7ff fc2b 	bl	8009150 <action_cmd>
}
 80098fa:	bf00      	nop
 80098fc:	3710      	adds	r7, #16
 80098fe:	46bd      	mov	sp, r7
 8009900:	bd80      	pop	{r7, pc}

08009902 <AXST>:


void AXST(uint8_t variant, uint8_t side)
{
 8009902:	b580      	push	{r7, lr}
 8009904:	b084      	sub	sp, #16
 8009906:	af00      	add	r7, sp, #0
 8009908:	4603      	mov	r3, r0
 800990a:	460a      	mov	r2, r1
 800990c:	71fb      	strb	r3, [r7, #7]
 800990e:	4613      	mov	r3, r2
 8009910:	71bb      	strb	r3, [r7, #6]
	uint8_t cmd[4];
	uint16_t cmd_PEC;

	if(variant) {
 8009912:	79fb      	ldrb	r3, [r7, #7]
 8009914:	2b00      	cmp	r3, #0
 8009916:	d004      	beq.n	8009922 <AXST+0x20>
		cmd[0] = 0x05;
 8009918:	2305      	movs	r3, #5
 800991a:	723b      	strb	r3, [r7, #8]
		cmd[1] = 0x27;
 800991c:	2327      	movs	r3, #39	@ 0x27
 800991e:	727b      	strb	r3, [r7, #9]
 8009920:	e003      	b.n	800992a <AXST+0x28>
	}
	else {
		cmd[0] = 0x05;
 8009922:	2305      	movs	r3, #5
 8009924:	723b      	strb	r3, [r7, #8]
		cmd[1] = 0x47;
 8009926:	2347      	movs	r3, #71	@ 0x47
 8009928:	727b      	strb	r3, [r7, #9]
	}

	cmd_PEC = compute_PEC15(cmd, 2);
 800992a:	f107 0308 	add.w	r3, r7, #8
 800992e:	2102      	movs	r1, #2
 8009930:	4618      	mov	r0, r3
 8009932:	f7ff fb97 	bl	8009064 <compute_PEC15>
 8009936:	4603      	mov	r3, r0
 8009938:	81fb      	strh	r3, [r7, #14]
	append_PEC(cmd, 2, cmd_PEC);
 800993a:	89fa      	ldrh	r2, [r7, #14]
 800993c:	f107 0308 	add.w	r3, r7, #8
 8009940:	2102      	movs	r1, #2
 8009942:	4618      	mov	r0, r3
 8009944:	f7ff fbc4 	bl	80090d0 <append_PEC>

	action_cmd(cmd, side);
 8009948:	79ba      	ldrb	r2, [r7, #6]
 800994a:	f107 0308 	add.w	r3, r7, #8
 800994e:	4611      	mov	r1, r2
 8009950:	4618      	mov	r0, r3
 8009952:	f7ff fbfd 	bl	8009150 <action_cmd>
}
 8009956:	bf00      	nop
 8009958:	3710      	adds	r7, #16
 800995a:	46bd      	mov	sp, r7
 800995c:	bd80      	pop	{r7, pc}

0800995e <STATST>:


void STATST(uint8_t variant, uint8_t side)
{
 800995e:	b580      	push	{r7, lr}
 8009960:	b084      	sub	sp, #16
 8009962:	af00      	add	r7, sp, #0
 8009964:	4603      	mov	r3, r0
 8009966:	460a      	mov	r2, r1
 8009968:	71fb      	strb	r3, [r7, #7]
 800996a:	4613      	mov	r3, r2
 800996c:	71bb      	strb	r3, [r7, #6]
	uint8_t cmd[4];
	uint16_t cmd_PEC;

	if (variant) {
 800996e:	79fb      	ldrb	r3, [r7, #7]
 8009970:	2b00      	cmp	r3, #0
 8009972:	d004      	beq.n	800997e <STATST+0x20>
		cmd[0] = 0x05;
 8009974:	2305      	movs	r3, #5
 8009976:	723b      	strb	r3, [r7, #8]
		cmd[1] = 0x2F;
 8009978:	232f      	movs	r3, #47	@ 0x2f
 800997a:	727b      	strb	r3, [r7, #9]
 800997c:	e003      	b.n	8009986 <STATST+0x28>
	}
	else {
		cmd[0] = 0x05;
 800997e:	2305      	movs	r3, #5
 8009980:	723b      	strb	r3, [r7, #8]
		cmd[1] = 0x4F;
 8009982:	234f      	movs	r3, #79	@ 0x4f
 8009984:	727b      	strb	r3, [r7, #9]
	}

	cmd_PEC = compute_PEC15(cmd, 2);
 8009986:	f107 0308 	add.w	r3, r7, #8
 800998a:	2102      	movs	r1, #2
 800998c:	4618      	mov	r0, r3
 800998e:	f7ff fb69 	bl	8009064 <compute_PEC15>
 8009992:	4603      	mov	r3, r0
 8009994:	81fb      	strh	r3, [r7, #14]
	append_PEC(cmd, 2, cmd_PEC);
 8009996:	89fa      	ldrh	r2, [r7, #14]
 8009998:	f107 0308 	add.w	r3, r7, #8
 800999c:	2102      	movs	r1, #2
 800999e:	4618      	mov	r0, r3
 80099a0:	f7ff fb96 	bl	80090d0 <append_PEC>

	action_cmd(cmd, side);
 80099a4:	79ba      	ldrb	r2, [r7, #6]
 80099a6:	f107 0308 	add.w	r3, r7, #8
 80099aa:	4611      	mov	r1, r2
 80099ac:	4618      	mov	r0, r3
 80099ae:	f7ff fbcf 	bl	8009150 <action_cmd>
}
 80099b2:	bf00      	nop
 80099b4:	3710      	adds	r7, #16
 80099b6:	46bd      	mov	sp, r7
 80099b8:	bd80      	pop	{r7, pc}

080099ba <ADSTATD>:


void ADSTATD(uint8_t side)
{
 80099ba:	b580      	push	{r7, lr}
 80099bc:	b084      	sub	sp, #16
 80099be:	af00      	add	r7, sp, #0
 80099c0:	4603      	mov	r3, r0
 80099c2:	71fb      	strb	r3, [r7, #7]
	uint8_t cmd[4];
	uint16_t cmd_PEC;

	cmd[0] = 0x05;
 80099c4:	2305      	movs	r3, #5
 80099c6:	723b      	strb	r3, [r7, #8]
	cmd[1] = 0x08;
 80099c8:	2308      	movs	r3, #8
 80099ca:	727b      	strb	r3, [r7, #9]
	cmd_PEC = compute_PEC15(cmd, 2);
 80099cc:	f107 0308 	add.w	r3, r7, #8
 80099d0:	2102      	movs	r1, #2
 80099d2:	4618      	mov	r0, r3
 80099d4:	f7ff fb46 	bl	8009064 <compute_PEC15>
 80099d8:	4603      	mov	r3, r0
 80099da:	81fb      	strh	r3, [r7, #14]
	append_PEC(cmd, 2, cmd_PEC);
 80099dc:	89fa      	ldrh	r2, [r7, #14]
 80099de:	f107 0308 	add.w	r3, r7, #8
 80099e2:	2102      	movs	r1, #2
 80099e4:	4618      	mov	r0, r3
 80099e6:	f7ff fb73 	bl	80090d0 <append_PEC>

	action_cmd(cmd, side);
 80099ea:	79fa      	ldrb	r2, [r7, #7]
 80099ec:	f107 0308 	add.w	r3, r7, #8
 80099f0:	4611      	mov	r1, r2
 80099f2:	4618      	mov	r0, r3
 80099f4:	f7ff fbac 	bl	8009150 <action_cmd>
}
 80099f8:	bf00      	nop
 80099fa:	3710      	adds	r7, #16
 80099fc:	46bd      	mov	sp, r7
 80099fe:	bd80      	pop	{r7, pc}

08009a00 <ADAXD>:


void ADAXD(uint8_t side)
{
 8009a00:	b580      	push	{r7, lr}
 8009a02:	b084      	sub	sp, #16
 8009a04:	af00      	add	r7, sp, #0
 8009a06:	4603      	mov	r3, r0
 8009a08:	71fb      	strb	r3, [r7, #7]
	uint8_t cmd[4];
	uint16_t cmd_PEC;

	cmd[0] = 0x05;
 8009a0a:	2305      	movs	r3, #5
 8009a0c:	723b      	strb	r3, [r7, #8]
	cmd[1] = 0x00;
 8009a0e:	2300      	movs	r3, #0
 8009a10:	727b      	strb	r3, [r7, #9]
	cmd_PEC = compute_PEC15(cmd, 2);
 8009a12:	f107 0308 	add.w	r3, r7, #8
 8009a16:	2102      	movs	r1, #2
 8009a18:	4618      	mov	r0, r3
 8009a1a:	f7ff fb23 	bl	8009064 <compute_PEC15>
 8009a1e:	4603      	mov	r3, r0
 8009a20:	81fb      	strh	r3, [r7, #14]
	append_PEC(cmd, 2, cmd_PEC);
 8009a22:	89fa      	ldrh	r2, [r7, #14]
 8009a24:	f107 0308 	add.w	r3, r7, #8
 8009a28:	2102      	movs	r1, #2
 8009a2a:	4618      	mov	r0, r3
 8009a2c:	f7ff fb50 	bl	80090d0 <append_PEC>

	action_cmd(cmd, side);
 8009a30:	79fa      	ldrb	r2, [r7, #7]
 8009a32:	f107 0308 	add.w	r3, r7, #8
 8009a36:	4611      	mov	r1, r2
 8009a38:	4618      	mov	r0, r3
 8009a3a:	f7ff fb89 	bl	8009150 <action_cmd>
}
 8009a3e:	bf00      	nop
 8009a40:	3710      	adds	r7, #16
 8009a42:	46bd      	mov	sp, r7
 8009a44:	bd80      	pop	{r7, pc}

08009a46 <ADCV>:


void ADCV(uint8_t side)
{
 8009a46:	b580      	push	{r7, lr}
 8009a48:	b084      	sub	sp, #16
 8009a4a:	af00      	add	r7, sp, #0
 8009a4c:	4603      	mov	r3, r0
 8009a4e:	71fb      	strb	r3, [r7, #7]
	uint8_t cmd[4];
	uint16_t cmd_PEC;

	cmd[0] = 0x03;
 8009a50:	2303      	movs	r3, #3
 8009a52:	723b      	strb	r3, [r7, #8]
	cmd[1] = 0x70;
 8009a54:	2370      	movs	r3, #112	@ 0x70
 8009a56:	727b      	strb	r3, [r7, #9]
	cmd_PEC = compute_PEC15(cmd, 2);
 8009a58:	f107 0308 	add.w	r3, r7, #8
 8009a5c:	2102      	movs	r1, #2
 8009a5e:	4618      	mov	r0, r3
 8009a60:	f7ff fb00 	bl	8009064 <compute_PEC15>
 8009a64:	4603      	mov	r3, r0
 8009a66:	81fb      	strh	r3, [r7, #14]
	append_PEC(cmd, 2, cmd_PEC);
 8009a68:	89fa      	ldrh	r2, [r7, #14]
 8009a6a:	f107 0308 	add.w	r3, r7, #8
 8009a6e:	2102      	movs	r1, #2
 8009a70:	4618      	mov	r0, r3
 8009a72:	f7ff fb2d 	bl	80090d0 <append_PEC>

	action_cmd(cmd, side);
 8009a76:	79fa      	ldrb	r2, [r7, #7]
 8009a78:	f107 0308 	add.w	r3, r7, #8
 8009a7c:	4611      	mov	r1, r2
 8009a7e:	4618      	mov	r0, r3
 8009a80:	f7ff fb66 	bl	8009150 <action_cmd>
}
 8009a84:	bf00      	nop
 8009a86:	3710      	adds	r7, #16
 8009a88:	46bd      	mov	sp, r7
 8009a8a:	bd80      	pop	{r7, pc}

08009a8c <CLRCELL>:


void CLRCELL(uint8_t side)
{
 8009a8c:	b580      	push	{r7, lr}
 8009a8e:	b084      	sub	sp, #16
 8009a90:	af00      	add	r7, sp, #0
 8009a92:	4603      	mov	r3, r0
 8009a94:	71fb      	strb	r3, [r7, #7]
	uint8_t cmd[4];
	uint16_t cmd_PEC;

	cmd[0] = 0x07;
 8009a96:	2307      	movs	r3, #7
 8009a98:	723b      	strb	r3, [r7, #8]
	cmd[1] = 0x11;
 8009a9a:	2311      	movs	r3, #17
 8009a9c:	727b      	strb	r3, [r7, #9]
	cmd_PEC = compute_PEC15(cmd, 2);
 8009a9e:	f107 0308 	add.w	r3, r7, #8
 8009aa2:	2102      	movs	r1, #2
 8009aa4:	4618      	mov	r0, r3
 8009aa6:	f7ff fadd 	bl	8009064 <compute_PEC15>
 8009aaa:	4603      	mov	r3, r0
 8009aac:	81fb      	strh	r3, [r7, #14]
	append_PEC(cmd, 2, cmd_PEC);
 8009aae:	89fa      	ldrh	r2, [r7, #14]
 8009ab0:	f107 0308 	add.w	r3, r7, #8
 8009ab4:	2102      	movs	r1, #2
 8009ab6:	4618      	mov	r0, r3
 8009ab8:	f7ff fb0a 	bl	80090d0 <append_PEC>

	action_cmd(cmd, side);
 8009abc:	79fa      	ldrb	r2, [r7, #7]
 8009abe:	f107 0308 	add.w	r3, r7, #8
 8009ac2:	4611      	mov	r1, r2
 8009ac4:	4618      	mov	r0, r3
 8009ac6:	f7ff fb43 	bl	8009150 <action_cmd>
}
 8009aca:	bf00      	nop
 8009acc:	3710      	adds	r7, #16
 8009ace:	46bd      	mov	sp, r7
 8009ad0:	bd80      	pop	{r7, pc}

08009ad2 <CLRAUX>:


void CLRAUX(uint8_t side)
{
 8009ad2:	b580      	push	{r7, lr}
 8009ad4:	b084      	sub	sp, #16
 8009ad6:	af00      	add	r7, sp, #0
 8009ad8:	4603      	mov	r3, r0
 8009ada:	71fb      	strb	r3, [r7, #7]
	uint8_t cmd[4];
	uint16_t cmd_PEC;

	cmd[0] = 0x07;
 8009adc:	2307      	movs	r3, #7
 8009ade:	723b      	strb	r3, [r7, #8]
	cmd[1] = 0x12;
 8009ae0:	2312      	movs	r3, #18
 8009ae2:	727b      	strb	r3, [r7, #9]
	cmd_PEC = compute_PEC15(cmd, 2);
 8009ae4:	f107 0308 	add.w	r3, r7, #8
 8009ae8:	2102      	movs	r1, #2
 8009aea:	4618      	mov	r0, r3
 8009aec:	f7ff faba 	bl	8009064 <compute_PEC15>
 8009af0:	4603      	mov	r3, r0
 8009af2:	81fb      	strh	r3, [r7, #14]
	append_PEC(cmd, 2, cmd_PEC);
 8009af4:	89fa      	ldrh	r2, [r7, #14]
 8009af6:	f107 0308 	add.w	r3, r7, #8
 8009afa:	2102      	movs	r1, #2
 8009afc:	4618      	mov	r0, r3
 8009afe:	f7ff fae7 	bl	80090d0 <append_PEC>

	action_cmd(cmd, side);
 8009b02:	79fa      	ldrb	r2, [r7, #7]
 8009b04:	f107 0308 	add.w	r3, r7, #8
 8009b08:	4611      	mov	r1, r2
 8009b0a:	4618      	mov	r0, r3
 8009b0c:	f7ff fb20 	bl	8009150 <action_cmd>
}
 8009b10:	bf00      	nop
 8009b12:	3710      	adds	r7, #16
 8009b14:	46bd      	mov	sp, r7
 8009b16:	bd80      	pop	{r7, pc}

08009b18 <CLRSTAT>:


void CLRSTAT(uint8_t side)
{
 8009b18:	b580      	push	{r7, lr}
 8009b1a:	b084      	sub	sp, #16
 8009b1c:	af00      	add	r7, sp, #0
 8009b1e:	4603      	mov	r3, r0
 8009b20:	71fb      	strb	r3, [r7, #7]
	uint8_t cmd[4];
	uint16_t cmd_PEC;

	cmd[0] = 0x07;
 8009b22:	2307      	movs	r3, #7
 8009b24:	723b      	strb	r3, [r7, #8]
	cmd[1] = 0x13;
 8009b26:	2313      	movs	r3, #19
 8009b28:	727b      	strb	r3, [r7, #9]
	cmd_PEC = compute_PEC15(cmd, 2);
 8009b2a:	f107 0308 	add.w	r3, r7, #8
 8009b2e:	2102      	movs	r1, #2
 8009b30:	4618      	mov	r0, r3
 8009b32:	f7ff fa97 	bl	8009064 <compute_PEC15>
 8009b36:	4603      	mov	r3, r0
 8009b38:	81fb      	strh	r3, [r7, #14]
	append_PEC(cmd, 2, cmd_PEC);
 8009b3a:	89fa      	ldrh	r2, [r7, #14]
 8009b3c:	f107 0308 	add.w	r3, r7, #8
 8009b40:	2102      	movs	r1, #2
 8009b42:	4618      	mov	r0, r3
 8009b44:	f7ff fac4 	bl	80090d0 <append_PEC>

	action_cmd(cmd, side);
 8009b48:	79fa      	ldrb	r2, [r7, #7]
 8009b4a:	f107 0308 	add.w	r3, r7, #8
 8009b4e:	4611      	mov	r1, r2
 8009b50:	4618      	mov	r0, r3
 8009b52:	f7ff fafd 	bl	8009150 <action_cmd>
}
 8009b56:	bf00      	nop
 8009b58:	3710      	adds	r7, #16
 8009b5a:	46bd      	mov	sp, r7
 8009b5c:	bd80      	pop	{r7, pc}

08009b5e <DIAGN>:


void DIAGN(uint8_t side)
{
 8009b5e:	b580      	push	{r7, lr}
 8009b60:	b084      	sub	sp, #16
 8009b62:	af00      	add	r7, sp, #0
 8009b64:	4603      	mov	r3, r0
 8009b66:	71fb      	strb	r3, [r7, #7]
	uint8_t cmd[4];
	uint16_t cmd_PEC;

	cmd[0] = 0x07;
 8009b68:	2307      	movs	r3, #7
 8009b6a:	723b      	strb	r3, [r7, #8]
	cmd[1] = 0x15;
 8009b6c:	2315      	movs	r3, #21
 8009b6e:	727b      	strb	r3, [r7, #9]
	cmd_PEC = compute_PEC15(cmd, 2);
 8009b70:	f107 0308 	add.w	r3, r7, #8
 8009b74:	2102      	movs	r1, #2
 8009b76:	4618      	mov	r0, r3
 8009b78:	f7ff fa74 	bl	8009064 <compute_PEC15>
 8009b7c:	4603      	mov	r3, r0
 8009b7e:	81fb      	strh	r3, [r7, #14]
	append_PEC(cmd, 2, cmd_PEC);
 8009b80:	89fa      	ldrh	r2, [r7, #14]
 8009b82:	f107 0308 	add.w	r3, r7, #8
 8009b86:	2102      	movs	r1, #2
 8009b88:	4618      	mov	r0, r3
 8009b8a:	f7ff faa1 	bl	80090d0 <append_PEC>

	action_cmd(cmd, side);
 8009b8e:	79fa      	ldrb	r2, [r7, #7]
 8009b90:	f107 0308 	add.w	r3, r7, #8
 8009b94:	4611      	mov	r1, r2
 8009b96:	4618      	mov	r0, r3
 8009b98:	f7ff fada 	bl	8009150 <action_cmd>
}
 8009b9c:	bf00      	nop
 8009b9e:	3710      	adds	r7, #16
 8009ba0:	46bd      	mov	sp, r7
 8009ba2:	bd80      	pop	{r7, pc}

08009ba4 <MUTE>:


void MUTE(uint8_t side)
{
 8009ba4:	b580      	push	{r7, lr}
 8009ba6:	b084      	sub	sp, #16
 8009ba8:	af00      	add	r7, sp, #0
 8009baa:	4603      	mov	r3, r0
 8009bac:	71fb      	strb	r3, [r7, #7]
	uint8_t cmd[4];
	uint16_t cmd_PEC;

	cmd[0] = 0x00;
 8009bae:	2300      	movs	r3, #0
 8009bb0:	723b      	strb	r3, [r7, #8]
	cmd[1] = 0x28;
 8009bb2:	2328      	movs	r3, #40	@ 0x28
 8009bb4:	727b      	strb	r3, [r7, #9]
	cmd_PEC = compute_PEC15(cmd, 2);
 8009bb6:	f107 0308 	add.w	r3, r7, #8
 8009bba:	2102      	movs	r1, #2
 8009bbc:	4618      	mov	r0, r3
 8009bbe:	f7ff fa51 	bl	8009064 <compute_PEC15>
 8009bc2:	4603      	mov	r3, r0
 8009bc4:	81fb      	strh	r3, [r7, #14]
	append_PEC(cmd, 2, cmd_PEC);
 8009bc6:	89fa      	ldrh	r2, [r7, #14]
 8009bc8:	f107 0308 	add.w	r3, r7, #8
 8009bcc:	2102      	movs	r1, #2
 8009bce:	4618      	mov	r0, r3
 8009bd0:	f7ff fa7e 	bl	80090d0 <append_PEC>

	action_cmd(cmd, side);
 8009bd4:	79fa      	ldrb	r2, [r7, #7]
 8009bd6:	f107 0308 	add.w	r3, r7, #8
 8009bda:	4611      	mov	r1, r2
 8009bdc:	4618      	mov	r0, r3
 8009bde:	f7ff fab7 	bl	8009150 <action_cmd>
}
 8009be2:	bf00      	nop
 8009be4:	3710      	adds	r7, #16
 8009be6:	46bd      	mov	sp, r7
 8009be8:	bd80      	pop	{r7, pc}

08009bea <UNMUTE>:


void UNMUTE(uint8_t side)
{
 8009bea:	b580      	push	{r7, lr}
 8009bec:	b084      	sub	sp, #16
 8009bee:	af00      	add	r7, sp, #0
 8009bf0:	4603      	mov	r3, r0
 8009bf2:	71fb      	strb	r3, [r7, #7]
	uint8_t cmd[4];
	uint16_t cmd_PEC;

	cmd[0] = 0x00;
 8009bf4:	2300      	movs	r3, #0
 8009bf6:	723b      	strb	r3, [r7, #8]
	cmd[1] = 0x29;
 8009bf8:	2329      	movs	r3, #41	@ 0x29
 8009bfa:	727b      	strb	r3, [r7, #9]
	cmd_PEC = compute_PEC15(cmd, 2);
 8009bfc:	f107 0308 	add.w	r3, r7, #8
 8009c00:	2102      	movs	r1, #2
 8009c02:	4618      	mov	r0, r3
 8009c04:	f7ff fa2e 	bl	8009064 <compute_PEC15>
 8009c08:	4603      	mov	r3, r0
 8009c0a:	81fb      	strh	r3, [r7, #14]
	append_PEC(cmd, 2, cmd_PEC);
 8009c0c:	89fa      	ldrh	r2, [r7, #14]
 8009c0e:	f107 0308 	add.w	r3, r7, #8
 8009c12:	2102      	movs	r1, #2
 8009c14:	4618      	mov	r0, r3
 8009c16:	f7ff fa5b 	bl	80090d0 <append_PEC>

	action_cmd(cmd, side);
 8009c1a:	79fa      	ldrb	r2, [r7, #7]
 8009c1c:	f107 0308 	add.w	r3, r7, #8
 8009c20:	4611      	mov	r1, r2
 8009c22:	4618      	mov	r0, r3
 8009c24:	f7ff fa94 	bl	8009150 <action_cmd>
}
 8009c28:	bf00      	nop
 8009c2a:	3710      	adds	r7, #16
 8009c2c:	46bd      	mov	sp, r7
 8009c2e:	bd80      	pop	{r7, pc}

08009c30 <force_refup>:
// *** END ACTION COMMANDS ***

void force_refup(void)
{
 8009c30:	b580      	push	{r7, lr}
 8009c32:	b084      	sub	sp, #16
 8009c34:	af00      	add	r7, sp, #0
	uint8_t attempts = 0;
 8009c36:	2300      	movs	r3, #0
 8009c38:	73fb      	strb	r3, [r7, #15]

	uint8_t payloadRegisterA[8];

	payloadRegisterA[0] = 0xFE;
 8009c3a:	23fe      	movs	r3, #254	@ 0xfe
 8009c3c:	713b      	strb	r3, [r7, #4]
	payloadRegisterA[1] = 0x00;
 8009c3e:	2300      	movs	r3, #0
 8009c40:	717b      	strb	r3, [r7, #5]
	payloadRegisterA[2] = 0x00;
 8009c42:	2300      	movs	r3, #0
 8009c44:	71bb      	strb	r3, [r7, #6]
	payloadRegisterA[3] = 0x00;
 8009c46:	2300      	movs	r3, #0
 8009c48:	71fb      	strb	r3, [r7, #7]
	payloadRegisterA[4] = 0x00;
 8009c4a:	2300      	movs	r3, #0
 8009c4c:	723b      	strb	r3, [r7, #8]
	payloadRegisterA[5] = 0x00;
 8009c4e:	2300      	movs	r3, #0
 8009c50:	727b      	strb	r3, [r7, #9]

	while(attempts < ATTEMPT_LIMIT) {
 8009c52:	e01a      	b.n	8009c8a <force_refup+0x5a>
		WRCFGA(payloadRegisterA, SIDE_A);
 8009c54:	1d3b      	adds	r3, r7, #4
 8009c56:	2101      	movs	r1, #1
 8009c58:	4618      	mov	r0, r3
 8009c5a:	f7ff fb4f 	bl	80092fc <WRCFGA>
		WRCFGA(payloadRegisterA, SIDE_B);
 8009c5e:	1d3b      	adds	r3, r7, #4
 8009c60:	2100      	movs	r1, #0
 8009c62:	4618      	mov	r0, r3
 8009c64:	f7ff fb4a 	bl	80092fc <WRCFGA>
		wait(1);
 8009c68:	2001      	movs	r0, #1
 8009c6a:	f000 fdcb 	bl	800a804 <wait>

		if(refup_check()) { attempts = 13; }
 8009c6e:	f000 f814 	bl	8009c9a <refup_check>
 8009c72:	4603      	mov	r3, r0
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	d002      	beq.n	8009c7e <force_refup+0x4e>
 8009c78:	230d      	movs	r3, #13
 8009c7a:	73fb      	strb	r3, [r7, #15]
 8009c7c:	e005      	b.n	8009c8a <force_refup+0x5a>

		else {
			attempts++;
 8009c7e:	7bfb      	ldrb	r3, [r7, #15]
 8009c80:	3301      	adds	r3, #1
 8009c82:	73fb      	strb	r3, [r7, #15]
			wait(1);
 8009c84:	2001      	movs	r0, #1
 8009c86:	f000 fdbd 	bl	800a804 <wait>
	while(attempts < ATTEMPT_LIMIT) {
 8009c8a:	7bfb      	ldrb	r3, [r7, #15]
 8009c8c:	2b09      	cmp	r3, #9
 8009c8e:	d9e1      	bls.n	8009c54 <force_refup+0x24>
		}
	}
	if(attempts != 13) {
		//error_loop(ERROR_PEC, 0, 0);
	}
}
 8009c90:	bf00      	nop
 8009c92:	bf00      	nop
 8009c94:	3710      	adds	r7, #16
 8009c96:	46bd      	mov	sp, r7
 8009c98:	bd80      	pop	{r7, pc}

08009c9a <refup_check>:


uint8_t refup_check(void)
{
 8009c9a:	b580      	push	{r7, lr}
 8009c9c:	b086      	sub	sp, #24
 8009c9e:	af00      	add	r7, sp, #0
	uint8_t attempts = 0;
 8009ca0:	2300      	movs	r3, #0
 8009ca2:	75fb      	strb	r3, [r7, #23]

	uint8_t sideA_configRegisterA[8];
	uint8_t sideB_configRegisterA[8];

	uint8_t sideA_configRegisterA_PECflag = 0;
 8009ca4:	2300      	movs	r3, #0
 8009ca6:	753b      	strb	r3, [r7, #20]
	uint8_t sideB_configRegisterA_PECflag = 0;
 8009ca8:	2300      	movs	r3, #0
 8009caa:	74fb      	strb	r3, [r7, #19]

	uint8_t sideA_refonBit;
	uint8_t sideB_refonBit;

	while(attempts < ATTEMPT_LIMIT) {
 8009cac:	e032      	b.n	8009d14 <refup_check+0x7a>
		RDCFGA(sideA_configRegisterA, SIDE_A);
 8009cae:	f107 0308 	add.w	r3, r7, #8
 8009cb2:	2101      	movs	r1, #1
 8009cb4:	4618      	mov	r0, r3
 8009cb6:	f7ff fbad 	bl	8009414 <RDCFGA>
		RDCFGA(sideB_configRegisterA, SIDE_B);
 8009cba:	463b      	mov	r3, r7
 8009cbc:	2100      	movs	r1, #0
 8009cbe:	4618      	mov	r0, r3
 8009cc0:	f7ff fba8 	bl	8009414 <RDCFGA>

		sideA_configRegisterA_PECflag = verify_PEC15(sideA_configRegisterA);
 8009cc4:	f107 0308 	add.w	r3, r7, #8
 8009cc8:	4618      	mov	r0, r3
 8009cca:	f7ff fa1e 	bl	800910a <verify_PEC15>
 8009cce:	4603      	mov	r3, r0
 8009cd0:	753b      	strb	r3, [r7, #20]
		sideB_configRegisterA_PECflag = verify_PEC15(sideB_configRegisterA);
 8009cd2:	463b      	mov	r3, r7
 8009cd4:	4618      	mov	r0, r3
 8009cd6:	f7ff fa18 	bl	800910a <verify_PEC15>
 8009cda:	4603      	mov	r3, r0
 8009cdc:	74fb      	strb	r3, [r7, #19]

		sideA_refonBit = (sideA_configRegisterA[0] >> 2) & 0x01;
 8009cde:	7a3b      	ldrb	r3, [r7, #8]
 8009ce0:	089b      	lsrs	r3, r3, #2
 8009ce2:	b2db      	uxtb	r3, r3
 8009ce4:	f003 0301 	and.w	r3, r3, #1
 8009ce8:	75bb      	strb	r3, [r7, #22]
		sideB_refonBit = (sideB_configRegisterA[0] >> 2) & 0x01;
 8009cea:	783b      	ldrb	r3, [r7, #0]
 8009cec:	089b      	lsrs	r3, r3, #2
 8009cee:	b2db      	uxtb	r3, r3
 8009cf0:	f003 0301 	and.w	r3, r3, #1
 8009cf4:	757b      	strb	r3, [r7, #21]

		if(sideA_configRegisterA_PECflag == 2 && sideB_configRegisterA_PECflag == 2) { attempts = 13; }
 8009cf6:	7d3b      	ldrb	r3, [r7, #20]
 8009cf8:	2b02      	cmp	r3, #2
 8009cfa:	d105      	bne.n	8009d08 <refup_check+0x6e>
 8009cfc:	7cfb      	ldrb	r3, [r7, #19]
 8009cfe:	2b02      	cmp	r3, #2
 8009d00:	d102      	bne.n	8009d08 <refup_check+0x6e>
 8009d02:	230d      	movs	r3, #13
 8009d04:	75fb      	strb	r3, [r7, #23]
 8009d06:	e005      	b.n	8009d14 <refup_check+0x7a>

		else {
			attempts++;
 8009d08:	7dfb      	ldrb	r3, [r7, #23]
 8009d0a:	3301      	adds	r3, #1
 8009d0c:	75fb      	strb	r3, [r7, #23]
			wait(1);
 8009d0e:	2001      	movs	r0, #1
 8009d10:	f000 fd78 	bl	800a804 <wait>
	while(attempts < ATTEMPT_LIMIT) {
 8009d14:	7dfb      	ldrb	r3, [r7, #23]
 8009d16:	2b09      	cmp	r3, #9
 8009d18:	d9c9      	bls.n	8009cae <refup_check+0x14>
		}
	}
	//if(attempts != 13) { error_loop(ERROR_PEC, 0, 0); }

	if(sideA_refonBit == 1 && sideB_refonBit == 1) { return 1; }
 8009d1a:	7dbb      	ldrb	r3, [r7, #22]
 8009d1c:	2b01      	cmp	r3, #1
 8009d1e:	d104      	bne.n	8009d2a <refup_check+0x90>
 8009d20:	7d7b      	ldrb	r3, [r7, #21]
 8009d22:	2b01      	cmp	r3, #1
 8009d24:	d101      	bne.n	8009d2a <refup_check+0x90>
 8009d26:	2301      	movs	r3, #1
 8009d28:	e000      	b.n	8009d2c <refup_check+0x92>

	else { return 0; }
 8009d2a:	2300      	movs	r3, #0
}
 8009d2c:	4618      	mov	r0, r3
 8009d2e:	3718      	adds	r7, #24
 8009d30:	46bd      	mov	sp, r7
 8009d32:	bd80      	pop	{r7, pc}

08009d34 <force_mute>:


void force_mute(void)
{
 8009d34:	b580      	push	{r7, lr}
 8009d36:	b086      	sub	sp, #24
 8009d38:	af00      	add	r7, sp, #0
	uint8_t attempts = 0;
 8009d3a:	2300      	movs	r3, #0
 8009d3c:	75fb      	strb	r3, [r7, #23]
	uint8_t subAttempts = 0;
 8009d3e:	2300      	movs	r3, #0
 8009d40:	75bb      	strb	r3, [r7, #22]

	uint8_t sideA_receivedRegisterB[8];
	uint8_t sideB_receivedRegisterB[8];

	uint8_t sideA_registerB_PECflag = 0;
 8009d42:	2300      	movs	r3, #0
 8009d44:	757b      	strb	r3, [r7, #21]
	uint8_t sideB_registerB_PECflag = 0;
 8009d46:	2300      	movs	r3, #0
 8009d48:	753b      	strb	r3, [r7, #20]

	uint8_t sideA_muteBit;
	uint8_t sideB_muteBit;

	while(attempts < ATTEMPT_LIMIT) {
 8009d4a:	e052      	b.n	8009df2 <force_mute+0xbe>
		while(subAttempts < ATTEMPT_LIMIT) {
			MUTE(SIDE_A);
 8009d4c:	2001      	movs	r0, #1
 8009d4e:	f7ff ff29 	bl	8009ba4 <MUTE>
			MUTE(SIDE_B);
 8009d52:	2000      	movs	r0, #0
 8009d54:	f7ff ff26 	bl	8009ba4 <MUTE>
			wait(1);
 8009d58:	2001      	movs	r0, #1
 8009d5a:	f000 fd53 	bl	800a804 <wait>
			MUTE(SIDE_A);
 8009d5e:	2001      	movs	r0, #1
 8009d60:	f7ff ff20 	bl	8009ba4 <MUTE>
			MUTE(SIDE_B);
 8009d64:	2000      	movs	r0, #0
 8009d66:	f7ff ff1d 	bl	8009ba4 <MUTE>
			wait(1);
 8009d6a:	2001      	movs	r0, #1
 8009d6c:	f000 fd4a 	bl	800a804 <wait>

			RDCFGB(sideA_receivedRegisterB, SIDE_A);
 8009d70:	f107 0308 	add.w	r3, r7, #8
 8009d74:	2101      	movs	r1, #1
 8009d76:	4618      	mov	r0, r3
 8009d78:	f7ff fb70 	bl	800945c <RDCFGB>
			RDCFGB(sideB_receivedRegisterB, SIDE_B);
 8009d7c:	463b      	mov	r3, r7
 8009d7e:	2100      	movs	r1, #0
 8009d80:	4618      	mov	r0, r3
 8009d82:	f7ff fb6b 	bl	800945c <RDCFGB>

			sideA_registerB_PECflag = verify_PEC15(sideA_receivedRegisterB);
 8009d86:	f107 0308 	add.w	r3, r7, #8
 8009d8a:	4618      	mov	r0, r3
 8009d8c:	f7ff f9bd 	bl	800910a <verify_PEC15>
 8009d90:	4603      	mov	r3, r0
 8009d92:	757b      	strb	r3, [r7, #21]
			sideB_registerB_PECflag = verify_PEC15(sideB_receivedRegisterB);
 8009d94:	463b      	mov	r3, r7
 8009d96:	4618      	mov	r0, r3
 8009d98:	f7ff f9b7 	bl	800910a <verify_PEC15>
 8009d9c:	4603      	mov	r3, r0
 8009d9e:	753b      	strb	r3, [r7, #20]

			if(sideA_registerB_PECflag == 2 && sideB_registerB_PECflag == 2) { subAttempts = 13; }
 8009da0:	7d7b      	ldrb	r3, [r7, #21]
 8009da2:	2b02      	cmp	r3, #2
 8009da4:	d105      	bne.n	8009db2 <force_mute+0x7e>
 8009da6:	7d3b      	ldrb	r3, [r7, #20]
 8009da8:	2b02      	cmp	r3, #2
 8009daa:	d102      	bne.n	8009db2 <force_mute+0x7e>
 8009dac:	230d      	movs	r3, #13
 8009dae:	75bb      	strb	r3, [r7, #22]
 8009db0:	e005      	b.n	8009dbe <force_mute+0x8a>

			else {
				subAttempts++;
 8009db2:	7dbb      	ldrb	r3, [r7, #22]
 8009db4:	3301      	adds	r3, #1
 8009db6:	75bb      	strb	r3, [r7, #22]
				wait(1);
 8009db8:	2001      	movs	r0, #1
 8009dba:	f000 fd23 	bl	800a804 <wait>
		while(subAttempts < ATTEMPT_LIMIT) {
 8009dbe:	7dbb      	ldrb	r3, [r7, #22]
 8009dc0:	2b09      	cmp	r3, #9
 8009dc2:	d9c3      	bls.n	8009d4c <force_mute+0x18>
			}
		}
		//if(subAttempts != 13) { error_loop(ERROR_PEC, 0, 0); }

		sideA_muteBit = (sideA_receivedRegisterB[1] >> 7) & 0x01;
 8009dc4:	7a7b      	ldrb	r3, [r7, #9]
 8009dc6:	09db      	lsrs	r3, r3, #7
 8009dc8:	74fb      	strb	r3, [r7, #19]
		sideB_muteBit = (sideB_receivedRegisterB[1] >> 7) & 0x01;
 8009dca:	787b      	ldrb	r3, [r7, #1]
 8009dcc:	09db      	lsrs	r3, r3, #7
 8009dce:	74bb      	strb	r3, [r7, #18]

		if(sideA_muteBit == 1 && sideB_muteBit == 1) { attempts = 13; }
 8009dd0:	7cfb      	ldrb	r3, [r7, #19]
 8009dd2:	2b01      	cmp	r3, #1
 8009dd4:	d105      	bne.n	8009de2 <force_mute+0xae>
 8009dd6:	7cbb      	ldrb	r3, [r7, #18]
 8009dd8:	2b01      	cmp	r3, #1
 8009dda:	d102      	bne.n	8009de2 <force_mute+0xae>
 8009ddc:	230d      	movs	r3, #13
 8009dde:	75fb      	strb	r3, [r7, #23]
 8009de0:	e007      	b.n	8009df2 <force_mute+0xbe>

		else {
			attempts++;
 8009de2:	7dfb      	ldrb	r3, [r7, #23]
 8009de4:	3301      	adds	r3, #1
 8009de6:	75fb      	strb	r3, [r7, #23]
			subAttempts = 0;
 8009de8:	2300      	movs	r3, #0
 8009dea:	75bb      	strb	r3, [r7, #22]
			wait(1);
 8009dec:	2001      	movs	r0, #1
 8009dee:	f000 fd09 	bl	800a804 <wait>
	while(attempts < ATTEMPT_LIMIT) {
 8009df2:	7dfb      	ldrb	r3, [r7, #23]
 8009df4:	2b09      	cmp	r3, #9
 8009df6:	d9e2      	bls.n	8009dbe <force_mute+0x8a>
		}
	}
	//if(attempts != 13) { error_loop(ERROR_MUTE, 0, 0); }
}
 8009df8:	bf00      	nop
 8009dfa:	bf00      	nop
 8009dfc:	3718      	adds	r7, #24
 8009dfe:	46bd      	mov	sp, r7
 8009e00:	bd80      	pop	{r7, pc}

08009e02 <force_unmute>:


void force_unmute(void)
{
 8009e02:	b580      	push	{r7, lr}
 8009e04:	b086      	sub	sp, #24
 8009e06:	af00      	add	r7, sp, #0
	uint8_t attempts = 0;
 8009e08:	2300      	movs	r3, #0
 8009e0a:	75fb      	strb	r3, [r7, #23]
	uint8_t subAttempts = 0;
 8009e0c:	2300      	movs	r3, #0
 8009e0e:	75bb      	strb	r3, [r7, #22]

	uint8_t sideA_receivedRegisterB[8];
	uint8_t sideB_receivedRegisterB[8];

	uint8_t sideA_registerB_PECflag = 0;
 8009e10:	2300      	movs	r3, #0
 8009e12:	757b      	strb	r3, [r7, #21]
	uint8_t sideB_registerB_PECflag = 0;
 8009e14:	2300      	movs	r3, #0
 8009e16:	753b      	strb	r3, [r7, #20]

	uint8_t sideA_muteBit;
	uint8_t sideB_muteBit;

	while(attempts < ATTEMPT_LIMIT) {
 8009e18:	e052      	b.n	8009ec0 <force_unmute+0xbe>
		while(subAttempts < ATTEMPT_LIMIT) {
			UNMUTE(SIDE_A);
 8009e1a:	2001      	movs	r0, #1
 8009e1c:	f7ff fee5 	bl	8009bea <UNMUTE>
			UNMUTE(SIDE_B);
 8009e20:	2000      	movs	r0, #0
 8009e22:	f7ff fee2 	bl	8009bea <UNMUTE>
			wait(1);
 8009e26:	2001      	movs	r0, #1
 8009e28:	f000 fcec 	bl	800a804 <wait>
			UNMUTE(SIDE_A);
 8009e2c:	2001      	movs	r0, #1
 8009e2e:	f7ff fedc 	bl	8009bea <UNMUTE>
			UNMUTE(SIDE_B);
 8009e32:	2000      	movs	r0, #0
 8009e34:	f7ff fed9 	bl	8009bea <UNMUTE>
			wait(1);
 8009e38:	2001      	movs	r0, #1
 8009e3a:	f000 fce3 	bl	800a804 <wait>

			RDCFGB(sideA_receivedRegisterB, SIDE_A);
 8009e3e:	f107 0308 	add.w	r3, r7, #8
 8009e42:	2101      	movs	r1, #1
 8009e44:	4618      	mov	r0, r3
 8009e46:	f7ff fb09 	bl	800945c <RDCFGB>
			RDCFGB(sideB_receivedRegisterB, SIDE_B);
 8009e4a:	463b      	mov	r3, r7
 8009e4c:	2100      	movs	r1, #0
 8009e4e:	4618      	mov	r0, r3
 8009e50:	f7ff fb04 	bl	800945c <RDCFGB>

			sideA_registerB_PECflag = verify_PEC15(sideA_receivedRegisterB);
 8009e54:	f107 0308 	add.w	r3, r7, #8
 8009e58:	4618      	mov	r0, r3
 8009e5a:	f7ff f956 	bl	800910a <verify_PEC15>
 8009e5e:	4603      	mov	r3, r0
 8009e60:	757b      	strb	r3, [r7, #21]
			sideB_registerB_PECflag = verify_PEC15(sideB_receivedRegisterB);
 8009e62:	463b      	mov	r3, r7
 8009e64:	4618      	mov	r0, r3
 8009e66:	f7ff f950 	bl	800910a <verify_PEC15>
 8009e6a:	4603      	mov	r3, r0
 8009e6c:	753b      	strb	r3, [r7, #20]

			if(sideA_registerB_PECflag == 2 && sideB_registerB_PECflag == 2) { subAttempts = 13; }
 8009e6e:	7d7b      	ldrb	r3, [r7, #21]
 8009e70:	2b02      	cmp	r3, #2
 8009e72:	d105      	bne.n	8009e80 <force_unmute+0x7e>
 8009e74:	7d3b      	ldrb	r3, [r7, #20]
 8009e76:	2b02      	cmp	r3, #2
 8009e78:	d102      	bne.n	8009e80 <force_unmute+0x7e>
 8009e7a:	230d      	movs	r3, #13
 8009e7c:	75bb      	strb	r3, [r7, #22]
 8009e7e:	e005      	b.n	8009e8c <force_unmute+0x8a>

			else {
				subAttempts++;
 8009e80:	7dbb      	ldrb	r3, [r7, #22]
 8009e82:	3301      	adds	r3, #1
 8009e84:	75bb      	strb	r3, [r7, #22]
				wait(1);
 8009e86:	2001      	movs	r0, #1
 8009e88:	f000 fcbc 	bl	800a804 <wait>
		while(subAttempts < ATTEMPT_LIMIT) {
 8009e8c:	7dbb      	ldrb	r3, [r7, #22]
 8009e8e:	2b09      	cmp	r3, #9
 8009e90:	d9c3      	bls.n	8009e1a <force_unmute+0x18>
			}
		}
		//if(subAttempts != 13) { error_loop(ERROR_PEC, 0, 0); }

		sideA_muteBit = (sideA_receivedRegisterB[1] >> 7) & 0x01;
 8009e92:	7a7b      	ldrb	r3, [r7, #9]
 8009e94:	09db      	lsrs	r3, r3, #7
 8009e96:	74fb      	strb	r3, [r7, #19]
		sideB_muteBit = (sideB_receivedRegisterB[1] >> 7) & 0x01;
 8009e98:	787b      	ldrb	r3, [r7, #1]
 8009e9a:	09db      	lsrs	r3, r3, #7
 8009e9c:	74bb      	strb	r3, [r7, #18]

		if(sideA_muteBit == 0 && sideB_muteBit == 0) { attempts = 13; }
 8009e9e:	7cfb      	ldrb	r3, [r7, #19]
 8009ea0:	2b00      	cmp	r3, #0
 8009ea2:	d105      	bne.n	8009eb0 <force_unmute+0xae>
 8009ea4:	7cbb      	ldrb	r3, [r7, #18]
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	d102      	bne.n	8009eb0 <force_unmute+0xae>
 8009eaa:	230d      	movs	r3, #13
 8009eac:	75fb      	strb	r3, [r7, #23]
 8009eae:	e007      	b.n	8009ec0 <force_unmute+0xbe>

		else {
			attempts++;
 8009eb0:	7dfb      	ldrb	r3, [r7, #23]
 8009eb2:	3301      	adds	r3, #1
 8009eb4:	75fb      	strb	r3, [r7, #23]
			subAttempts = 0;
 8009eb6:	2300      	movs	r3, #0
 8009eb8:	75bb      	strb	r3, [r7, #22]
			wait(1);
 8009eba:	2001      	movs	r0, #1
 8009ebc:	f000 fca2 	bl	800a804 <wait>
	while(attempts < ATTEMPT_LIMIT) {
 8009ec0:	7dfb      	ldrb	r3, [r7, #23]
 8009ec2:	2b09      	cmp	r3, #9
 8009ec4:	d9e2      	bls.n	8009e8c <force_unmute+0x8a>
		}
	}
	//if(attempts != 13) { error_loop(ERROR_MUTE, 0, 0); }
}
 8009ec6:	bf00      	nop
 8009ec8:	bf00      	nop
 8009eca:	3718      	adds	r7, #24
 8009ecc:	46bd      	mov	sp, r7
 8009ece:	bd80      	pop	{r7, pc}

08009ed0 <torch_main>:
volatile uint32_t balanceCounter;
volatile uint32_t diagnosisCounter;


void torch_main(void)
{
 8009ed0:	b580      	push	{r7, lr}
 8009ed2:	b0bc      	sub	sp, #240	@ 0xf0
 8009ed4:	af00      	add	r7, sp, #0
	CAN_RxHeaderTypeDef RxHeader;
	uint8_t RxData[8];

	uint8_t packStatus = 0;		// Defines the status of the accumulator
 8009ed6:	2300      	movs	r3, #0
 8009ed8:	f887 30ef 	strb.w	r3, [r7, #239]	@ 0xef

	uint16_t cellVoltages[CELL_QTY];				// Holds all cell voltages within a module
	float moduleTemperatures[MODULE_THERM_QTY];		// Holds all module thermistor temperatures

	uint8_t cellsToBalance[CELL_QTY] = {0};
 8009edc:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8009ee0:	2200      	movs	r2, #0
 8009ee2:	601a      	str	r2, [r3, #0]
 8009ee4:	605a      	str	r2, [r3, #4]
 8009ee6:	609a      	str	r2, [r3, #8]
 8009ee8:	60da      	str	r2, [r3, #12]
 8009eea:	611a      	str	r2, [r3, #16]
	uint8_t cellsToBalanceQty = 0;
 8009eec:	2300      	movs	r3, #0
 8009eee:	f887 30ee 	strb.w	r3, [r7, #238]	@ 0xee

	uint16_t absMinCellVoltage = 0;
 8009ef2:	2300      	movs	r3, #0
 8009ef4:	85fb      	strh	r3, [r7, #46]	@ 0x2e
	uint8_t balanceMsgReceivedFlag = 0;
 8009ef6:	2300      	movs	r3, #0
 8009ef8:	f887 30ed 	strb.w	r3, [r7, #237]	@ 0xed

	uint8_t overheatFlag = 0;
 8009efc:	2300      	movs	r3, #0
 8009efe:	f887 30ec 	strb.w	r3, [r7, #236]	@ 0xec
	uint8_t overheatCount = 0;
 8009f02:	2300      	movs	r3, #0
 8009f04:	f887 30eb 	strb.w	r3, [r7, #235]	@ 0xeb

	uint8_t overvoltFlag = 0;
 8009f08:	2300      	movs	r3, #0
 8009f0a:	f887 30ea 	strb.w	r3, [r7, #234]	@ 0xea
	uint8_t overvoltCount = 0;
 8009f0e:	2300      	movs	r3, #0
 8009f10:	f887 30e9 	strb.w	r3, [r7, #233]	@ 0xe9

	uint8_t undervoltFlag = 0;
 8009f14:	2300      	movs	r3, #0
 8009f16:	f887 30e8 	strb.w	r3, [r7, #232]	@ 0xe8
	uint8_t undervoltCount = 0;
 8009f1a:	2300      	movs	r3, #0
 8009f1c:	f887 30e7 	strb.w	r3, [r7, #231]	@ 0xe7

	uint8_t faultCellQty = 0;
 8009f20:	2300      	movs	r3, #0
 8009f22:	f887 30e6 	strb.w	r3, [r7, #230]	@ 0xe6
	uint8_t faultCells[CELL_QTY + 1] = {0};				// The CELL_QTY + 1 accounts for cell 0
 8009f26:	f107 0318 	add.w	r3, r7, #24
 8009f2a:	2200      	movs	r2, #0
 8009f2c:	601a      	str	r2, [r3, #0]
 8009f2e:	605a      	str	r2, [r3, #4]
 8009f30:	609a      	str	r2, [r3, #8]
 8009f32:	60da      	str	r2, [r3, #12]
 8009f34:	611a      	str	r2, [r3, #16]
 8009f36:	751a      	strb	r2, [r3, #20]
	uint8_t faultThermistorQty = 0;
 8009f38:	2300      	movs	r3, #0
 8009f3a:	f887 30e5 	strb.w	r3, [r7, #229]	@ 0xe5
	uint8_t faultThermistors[MODULE_THERM_QTY] = {0};
 8009f3e:	1d3b      	adds	r3, r7, #4
 8009f40:	2200      	movs	r2, #0
 8009f42:	601a      	str	r2, [r3, #0]
 8009f44:	605a      	str	r2, [r3, #4]
 8009f46:	609a      	str	r2, [r3, #8]
 8009f48:	60da      	str	r2, [r3, #12]
 8009f4a:	821a      	strh	r2, [r3, #16]

	uint8_t measureFlag = 0;
 8009f4c:	2300      	movs	r3, #0
 8009f4e:	f887 30e4 	strb.w	r3, [r7, #228]	@ 0xe4

	// Switch statement below defines how often each module will transmit its data over CAN.
	switch(moduleID) {
 8009f52:	2301      	movs	r3, #1
 8009f54:	3b01      	subs	r3, #1
 8009f56:	2b04      	cmp	r3, #4
 8009f58:	d825      	bhi.n	8009fa6 <torch_main+0xd6>
 8009f5a:	a201      	add	r2, pc, #4	@ (adr r2, 8009f60 <torch_main+0x90>)
 8009f5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f60:	08009f75 	.word	0x08009f75
 8009f64:	08009f7f 	.word	0x08009f7f
 8009f68:	08009f89 	.word	0x08009f89
 8009f6c:	08009f93 	.word	0x08009f93
 8009f70:	08009f9d 	.word	0x08009f9d
		case 1:
			transmissionDelay = 1000;			// Module 1's transmission frequency (default: 1000 milliseconds)
 8009f74:	4bca      	ldr	r3, [pc, #808]	@ (800a2a0 <torch_main+0x3d0>)
 8009f76:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8009f7a:	801a      	strh	r2, [r3, #0]
			break;
 8009f7c:	e013      	b.n	8009fa6 <torch_main+0xd6>
		case 2:
			transmissionDelay = 1025;			// Module 2's transmission frequency (default: 1025 milliseconds)
 8009f7e:	4bc8      	ldr	r3, [pc, #800]	@ (800a2a0 <torch_main+0x3d0>)
 8009f80:	f240 4201 	movw	r2, #1025	@ 0x401
 8009f84:	801a      	strh	r2, [r3, #0]
			break;
 8009f86:	e00e      	b.n	8009fa6 <torch_main+0xd6>
		case 3:
			transmissionDelay = 1050;			// Module 3's transmission frequency (default: 1050 milliseconds)
 8009f88:	4bc5      	ldr	r3, [pc, #788]	@ (800a2a0 <torch_main+0x3d0>)
 8009f8a:	f240 421a 	movw	r2, #1050	@ 0x41a
 8009f8e:	801a      	strh	r2, [r3, #0]
			break;
 8009f90:	e009      	b.n	8009fa6 <torch_main+0xd6>
		case 4:
			transmissionDelay = 1075;			// Module 4's transmission frequency (default: 1075 milliseconds)
 8009f92:	4bc3      	ldr	r3, [pc, #780]	@ (800a2a0 <torch_main+0x3d0>)
 8009f94:	f240 4233 	movw	r2, #1075	@ 0x433
 8009f98:	801a      	strh	r2, [r3, #0]
			break;
 8009f9a:	e004      	b.n	8009fa6 <torch_main+0xd6>
		case 5:
			transmissionDelay = 1100;			// Module 5's transmission frequency (default: 1100 milliseconds)
 8009f9c:	4bc0      	ldr	r3, [pc, #768]	@ (800a2a0 <torch_main+0x3d0>)
 8009f9e:	f240 424c 	movw	r2, #1100	@ 0x44c
 8009fa2:	801a      	strh	r2, [r3, #0]
			break;
 8009fa4:	bf00      	nop
	}

	if(bmsMode == 1) {
 8009fa6:	2301      	movs	r3, #1
 8009fa8:	2b01      	cmp	r3, #1
 8009faa:	f040 8394 	bne.w	800a6d6 <torch_main+0x806>
		ltc6820_awaken();
 8009fae:	f000 fba3 	bl	800a6f8 <ltc6820_awaken>

		HAL_CAN_Start(&hcan1);
 8009fb2:	48bc      	ldr	r0, [pc, #752]	@ (800a2a4 <torch_main+0x3d4>)
 8009fb4:	f002 fd44 	bl	800ca40 <HAL_CAN_Start>
		start_timer(&htim2);
 8009fb8:	48bb      	ldr	r0, [pc, #748]	@ (800a2a8 <torch_main+0x3d8>)
 8009fba:	f000 fc2f 	bl	800a81c <start_timer>
		setup_PEC15();
 8009fbe:	f7ff f815 	bl	8008fec <setup_PEC15>

		active_led_on();
 8009fc2:	f000 fcd7 	bl	800a974 <active_led_on>

		force_mute();
 8009fc6:	f7ff feb5 	bl	8009d34 <force_mute>
		wait(1);
 8009fca:	2001      	movs	r0, #1
 8009fcc:	f000 fc1a 	bl	800a804 <wait>
		force_refup();
 8009fd0:	f7ff fe2e 	bl	8009c30 <force_refup>
		wait(1);
 8009fd4:	2001      	movs	r0, #1
 8009fd6:	f000 fc15 	bl	800a804 <wait>
		full_diagnosis();
 8009fda:	f7fb fe65 	bl	8005ca8 <full_diagnosis>
		wait(1);
 8009fde:	2001      	movs	r0, #1
 8009fe0:	f000 fc10 	bl	800a804 <wait>

		transmitCounter = 0;
 8009fe4:	4bb1      	ldr	r3, [pc, #708]	@ (800a2ac <torch_main+0x3dc>)
 8009fe6:	2200      	movs	r2, #0
 8009fe8:	601a      	str	r2, [r3, #0]
		measureCounter = 0;
 8009fea:	4bb1      	ldr	r3, [pc, #708]	@ (800a2b0 <torch_main+0x3e0>)
 8009fec:	2200      	movs	r2, #0
 8009fee:	601a      	str	r2, [r3, #0]
		diagnosisCounter = 0;
 8009ff0:	4bb0      	ldr	r3, [pc, #704]	@ (800a2b4 <torch_main+0x3e4>)
 8009ff2:	2200      	movs	r2, #0
 8009ff4:	601a      	str	r2, [r3, #0]
		while(1) {

			// Measuring interrupt: reads cell voltages and module temperatures every 100 ms.
			if(measureCounter > MEASURE_INTERVAL) {
 8009ff6:	4bae      	ldr	r3, [pc, #696]	@ (800a2b0 <torch_main+0x3e0>)
 8009ff8:	681b      	ldr	r3, [r3, #0]
 8009ffa:	2b64      	cmp	r3, #100	@ 0x64
 8009ffc:	f240 8121 	bls.w	800a242 <torch_main+0x372>
				// We first want to ensure that 6813 is in REFUP state. If it's not, we force it to enter it.
				if(!refup_check()) {
 800a000:	f7ff fe4b 	bl	8009c9a <refup_check>
 800a004:	4603      	mov	r3, r0
 800a006:	2b00      	cmp	r3, #0
 800a008:	d104      	bne.n	800a014 <torch_main+0x144>
					force_refup();
 800a00a:	f7ff fe11 	bl	8009c30 <force_refup>
					wait(1);
 800a00e:	2001      	movs	r0, #1
 800a010:	f000 fbf8 	bl	800a804 <wait>
				}

				temperature_sense(moduleTemperatures);			// Get all 18 temperature sensors
 800a014:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 800a018:	4618      	mov	r0, r3
 800a01a:	f000 fe61 	bl	800ace0 <temperature_sense>
				voltage_sense(cellVoltages);					// Get all 20 cell voltages
 800a01e:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 800a022:	4618      	mov	r0, r3
 800a024:	f001 fc34 	bl	800b890 <voltage_sense>

				// For-loop below checks if any thermistor's >60 C.
				for(uint8_t i = 0; i < MODULE_THERM_QTY; i++) {
 800a028:	2300      	movs	r3, #0
 800a02a:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
 800a02e:	e025      	b.n	800a07c <torch_main+0x1ac>
					if(moduleTemperatures[i] > MAX_TEMPERATURE) {
 800a030:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800a034:	009b      	lsls	r3, r3, #2
 800a036:	33f0      	adds	r3, #240	@ 0xf0
 800a038:	443b      	add	r3, r7
 800a03a:	3bac      	subs	r3, #172	@ 0xac
 800a03c:	edd3 7a00 	vldr	s15, [r3]
 800a040:	ed9f 7a9d 	vldr	s14, [pc, #628]	@ 800a2b8 <torch_main+0x3e8>
 800a044:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a048:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a04c:	dd11      	ble.n	800a072 <torch_main+0x1a2>
						overheatFlag = 1;
 800a04e:	2301      	movs	r3, #1
 800a050:	f887 30ec 	strb.w	r3, [r7, #236]	@ 0xec
						faultThermistors[faultThermistorQty] = i + 1;
 800a054:	f897 30e5 	ldrb.w	r3, [r7, #229]	@ 0xe5
 800a058:	f897 20e3 	ldrb.w	r2, [r7, #227]	@ 0xe3
 800a05c:	3201      	adds	r2, #1
 800a05e:	b2d2      	uxtb	r2, r2
 800a060:	33f0      	adds	r3, #240	@ 0xf0
 800a062:	443b      	add	r3, r7
 800a064:	f803 2cec 	strb.w	r2, [r3, #-236]
						faultThermistorQty++;
 800a068:	f897 30e5 	ldrb.w	r3, [r7, #229]	@ 0xe5
 800a06c:	3301      	adds	r3, #1
 800a06e:	f887 30e5 	strb.w	r3, [r7, #229]	@ 0xe5
				for(uint8_t i = 0; i < MODULE_THERM_QTY; i++) {
 800a072:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800a076:	3301      	adds	r3, #1
 800a078:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
 800a07c:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800a080:	2b11      	cmp	r3, #17
 800a082:	d9d5      	bls.n	800a030 <torch_main+0x160>
					}
				}
				// If at least one sensor read >60 C, the overheat counter increases by one.
				if(overheatFlag) { overheatCount++; }
 800a084:	f897 30ec 	ldrb.w	r3, [r7, #236]	@ 0xec
 800a088:	2b00      	cmp	r3, #0
 800a08a:	d005      	beq.n	800a098 <torch_main+0x1c8>
 800a08c:	f897 30eb 	ldrb.w	r3, [r7, #235]	@ 0xeb
 800a090:	3301      	adds	r3, #1
 800a092:	f887 30eb 	strb.w	r3, [r7, #235]	@ 0xeb
 800a096:	e01f      	b.n	800a0d8 <torch_main+0x208>

				// If all sensors read <60 C, we decrease the overheat counter IF it has already been incremented before.
				else {
					if(overheatCount > 0) { overheatCount--; }
 800a098:	f897 30eb 	ldrb.w	r3, [r7, #235]	@ 0xeb
 800a09c:	2b00      	cmp	r3, #0
 800a09e:	d004      	beq.n	800a0aa <torch_main+0x1da>
 800a0a0:	f897 30eb 	ldrb.w	r3, [r7, #235]	@ 0xeb
 800a0a4:	3b01      	subs	r3, #1
 800a0a6:	f887 30eb 	strb.w	r3, [r7, #235]	@ 0xeb

					for(uint8_t i = 0; i < MODULE_THERM_QTY; i++) { faultThermistors[i] = 0; }
 800a0aa:	2300      	movs	r3, #0
 800a0ac:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
 800a0b0:	e00b      	b.n	800a0ca <torch_main+0x1fa>
 800a0b2:	f897 30e2 	ldrb.w	r3, [r7, #226]	@ 0xe2
 800a0b6:	33f0      	adds	r3, #240	@ 0xf0
 800a0b8:	443b      	add	r3, r7
 800a0ba:	2200      	movs	r2, #0
 800a0bc:	f803 2cec 	strb.w	r2, [r3, #-236]
 800a0c0:	f897 30e2 	ldrb.w	r3, [r7, #226]	@ 0xe2
 800a0c4:	3301      	adds	r3, #1
 800a0c6:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
 800a0ca:	f897 30e2 	ldrb.w	r3, [r7, #226]	@ 0xe2
 800a0ce:	2b11      	cmp	r3, #17
 800a0d0:	d9ef      	bls.n	800a0b2 <torch_main+0x1e2>

					faultThermistorQty = 0;
 800a0d2:	2300      	movs	r3, #0
 800a0d4:	f887 30e5 	strb.w	r3, [r7, #229]	@ 0xe5
				}

				// If at least one sensor has been >60 C for more than 10 interpretations, then it's time to fault!
				if(overheatCount > ATTEMPT_LIMIT) { error_loop(ERROR_OVERHEAT, faultThermistors, faultCells, NOT_APPLICABLE); }
 800a0d8:	f897 30eb 	ldrb.w	r3, [r7, #235]	@ 0xeb
 800a0dc:	2b0a      	cmp	r3, #10
 800a0de:	d906      	bls.n	800a0ee <torch_main+0x21e>
 800a0e0:	f107 0218 	add.w	r2, r7, #24
 800a0e4:	1d39      	adds	r1, r7, #4
 800a0e6:	2303      	movs	r3, #3
 800a0e8:	2045      	movs	r0, #69	@ 0x45
 800a0ea:	f7fa fe85 	bl	8004df8 <error_loop>

				// For-loop below checks if any cell voltage is out of bounds. Like before, the voltage and index are noted if it finds one.
				for(uint8_t i = 0; i < CELL_QTY; i++) {
 800a0ee:	2300      	movs	r3, #0
 800a0f0:	f887 30e1 	strb.w	r3, [r7, #225]	@ 0xe1
 800a0f4:	e03f      	b.n	800a176 <torch_main+0x2a6>
					if(cellVoltages[i] > MAX_CELL_VOLTAGE) {
 800a0f6:	f897 30e1 	ldrb.w	r3, [r7, #225]	@ 0xe1
 800a0fa:	005b      	lsls	r3, r3, #1
 800a0fc:	33f0      	adds	r3, #240	@ 0xf0
 800a0fe:	443b      	add	r3, r7
 800a100:	f833 3c64 	ldrh.w	r3, [r3, #-100]
 800a104:	f24a 4210 	movw	r2, #42000	@ 0xa410
 800a108:	4293      	cmp	r3, r2
 800a10a:	d912      	bls.n	800a132 <torch_main+0x262>
						overvoltFlag = 1;
 800a10c:	2301      	movs	r3, #1
 800a10e:	f887 30ea 	strb.w	r3, [r7, #234]	@ 0xea
						faultCells[faultCellQty] = i + 1;
 800a112:	f897 30e6 	ldrb.w	r3, [r7, #230]	@ 0xe6
 800a116:	f897 20e1 	ldrb.w	r2, [r7, #225]	@ 0xe1
 800a11a:	3201      	adds	r2, #1
 800a11c:	b2d2      	uxtb	r2, r2
 800a11e:	33f0      	adds	r3, #240	@ 0xf0
 800a120:	443b      	add	r3, r7
 800a122:	f803 2cd8 	strb.w	r2, [r3, #-216]
						faultCellQty++;
 800a126:	f897 30e6 	ldrb.w	r3, [r7, #230]	@ 0xe6
 800a12a:	3301      	adds	r3, #1
 800a12c:	f887 30e6 	strb.w	r3, [r7, #230]	@ 0xe6
 800a130:	e01c      	b.n	800a16c <torch_main+0x29c>
					}
					else if(cellVoltages[i] < MIN_CELL_VOLTAGE) {
 800a132:	f897 30e1 	ldrb.w	r3, [r7, #225]	@ 0xe1
 800a136:	005b      	lsls	r3, r3, #1
 800a138:	33f0      	adds	r3, #240	@ 0xf0
 800a13a:	443b      	add	r3, r7
 800a13c:	f833 3c64 	ldrh.w	r3, [r3, #-100]
 800a140:	f246 12a7 	movw	r2, #24999	@ 0x61a7
 800a144:	4293      	cmp	r3, r2
 800a146:	d811      	bhi.n	800a16c <torch_main+0x29c>
						undervoltFlag = 1;
 800a148:	2301      	movs	r3, #1
 800a14a:	f887 30e8 	strb.w	r3, [r7, #232]	@ 0xe8
						faultCells[faultCellQty] = i + 1;
 800a14e:	f897 30e6 	ldrb.w	r3, [r7, #230]	@ 0xe6
 800a152:	f897 20e1 	ldrb.w	r2, [r7, #225]	@ 0xe1
 800a156:	3201      	adds	r2, #1
 800a158:	b2d2      	uxtb	r2, r2
 800a15a:	33f0      	adds	r3, #240	@ 0xf0
 800a15c:	443b      	add	r3, r7
 800a15e:	f803 2cd8 	strb.w	r2, [r3, #-216]
						faultCellQty++;
 800a162:	f897 30e6 	ldrb.w	r3, [r7, #230]	@ 0xe6
 800a166:	3301      	adds	r3, #1
 800a168:	f887 30e6 	strb.w	r3, [r7, #230]	@ 0xe6
				for(uint8_t i = 0; i < CELL_QTY; i++) {
 800a16c:	f897 30e1 	ldrb.w	r3, [r7, #225]	@ 0xe1
 800a170:	3301      	adds	r3, #1
 800a172:	f887 30e1 	strb.w	r3, [r7, #225]	@ 0xe1
 800a176:	f897 30e1 	ldrb.w	r3, [r7, #225]	@ 0xe1
 800a17a:	2b13      	cmp	r3, #19
 800a17c:	d9bb      	bls.n	800a0f6 <torch_main+0x226>
					}
				}
				// If at least one cell's above 4.2 V, the overvolt counter increases by one.
				if(overvoltFlag) { overvoltCount++; }
 800a17e:	f897 30ea 	ldrb.w	r3, [r7, #234]	@ 0xea
 800a182:	2b00      	cmp	r3, #0
 800a184:	d005      	beq.n	800a192 <torch_main+0x2c2>
 800a186:	f897 30e9 	ldrb.w	r3, [r7, #233]	@ 0xe9
 800a18a:	3301      	adds	r3, #1
 800a18c:	f887 30e9 	strb.w	r3, [r7, #233]	@ 0xe9
 800a190:	e032      	b.n	800a1f8 <torch_main+0x328>

				// If at least one cell's below 2.5 V, the undervolt counter increases by one.
				else if(undervoltFlag) { undervoltCount++; }
 800a192:	f897 30e8 	ldrb.w	r3, [r7, #232]	@ 0xe8
 800a196:	2b00      	cmp	r3, #0
 800a198:	d005      	beq.n	800a1a6 <torch_main+0x2d6>
 800a19a:	f897 30e7 	ldrb.w	r3, [r7, #231]	@ 0xe7
 800a19e:	3301      	adds	r3, #1
 800a1a0:	f887 30e7 	strb.w	r3, [r7, #231]	@ 0xe7
 800a1a4:	e028      	b.n	800a1f8 <torch_main+0x328>

				else {
					if(overvoltCount > 0) { overvoltCount--; }
 800a1a6:	f897 30e9 	ldrb.w	r3, [r7, #233]	@ 0xe9
 800a1aa:	2b00      	cmp	r3, #0
 800a1ac:	d004      	beq.n	800a1b8 <torch_main+0x2e8>
 800a1ae:	f897 30e9 	ldrb.w	r3, [r7, #233]	@ 0xe9
 800a1b2:	3b01      	subs	r3, #1
 800a1b4:	f887 30e9 	strb.w	r3, [r7, #233]	@ 0xe9

					if(undervoltCount > 0) { undervoltCount--; }
 800a1b8:	f897 30e7 	ldrb.w	r3, [r7, #231]	@ 0xe7
 800a1bc:	2b00      	cmp	r3, #0
 800a1be:	d004      	beq.n	800a1ca <torch_main+0x2fa>
 800a1c0:	f897 30e7 	ldrb.w	r3, [r7, #231]	@ 0xe7
 800a1c4:	3b01      	subs	r3, #1
 800a1c6:	f887 30e7 	strb.w	r3, [r7, #231]	@ 0xe7

					for(uint8_t i = 0; i < CELL_QTY + 1; i++) { faultCells[i] = 0; }
 800a1ca:	2300      	movs	r3, #0
 800a1cc:	f887 30e0 	strb.w	r3, [r7, #224]	@ 0xe0
 800a1d0:	e00b      	b.n	800a1ea <torch_main+0x31a>
 800a1d2:	f897 30e0 	ldrb.w	r3, [r7, #224]	@ 0xe0
 800a1d6:	33f0      	adds	r3, #240	@ 0xf0
 800a1d8:	443b      	add	r3, r7
 800a1da:	2200      	movs	r2, #0
 800a1dc:	f803 2cd8 	strb.w	r2, [r3, #-216]
 800a1e0:	f897 30e0 	ldrb.w	r3, [r7, #224]	@ 0xe0
 800a1e4:	3301      	adds	r3, #1
 800a1e6:	f887 30e0 	strb.w	r3, [r7, #224]	@ 0xe0
 800a1ea:	f897 30e0 	ldrb.w	r3, [r7, #224]	@ 0xe0
 800a1ee:	2b14      	cmp	r3, #20
 800a1f0:	d9ef      	bls.n	800a1d2 <torch_main+0x302>

					faultCellQty = 0;
 800a1f2:	2300      	movs	r3, #0
 800a1f4:	f887 30e6 	strb.w	r3, [r7, #230]	@ 0xe6
				}

				// If at least one cell is >4.2 V or <2.5 V for more than 10 interpretations, then it's time to fault!
				if(overvoltCount > ATTEMPT_LIMIT) { error_loop(ERROR_OVERVOLT, faultThermistors, faultCells, NOT_APPLICABLE); }
 800a1f8:	f897 30e9 	ldrb.w	r3, [r7, #233]	@ 0xe9
 800a1fc:	2b0a      	cmp	r3, #10
 800a1fe:	d906      	bls.n	800a20e <torch_main+0x33e>
 800a200:	f107 0218 	add.w	r2, r7, #24
 800a204:	1d39      	adds	r1, r7, #4
 800a206:	2303      	movs	r3, #3
 800a208:	2047      	movs	r0, #71	@ 0x47
 800a20a:	f7fa fdf5 	bl	8004df8 <error_loop>

				if(undervoltCount > ATTEMPT_LIMIT) { error_loop(ERROR_UNDERVOLT, faultThermistors, faultCells, NOT_APPLICABLE); }
 800a20e:	f897 30e7 	ldrb.w	r3, [r7, #231]	@ 0xe7
 800a212:	2b0a      	cmp	r3, #10
 800a214:	d906      	bls.n	800a224 <torch_main+0x354>
 800a216:	f107 0218 	add.w	r2, r7, #24
 800a21a:	1d39      	adds	r1, r7, #4
 800a21c:	2303      	movs	r3, #3
 800a21e:	2046      	movs	r0, #70	@ 0x46
 800a220:	f7fa fdea 	bl	8004df8 <error_loop>

				// Reset the three status flags to 0 before starting a new measurement cycle.
				overheatFlag = 0;
 800a224:	2300      	movs	r3, #0
 800a226:	f887 30ec 	strb.w	r3, [r7, #236]	@ 0xec
				overvoltFlag = 0;
 800a22a:	2300      	movs	r3, #0
 800a22c:	f887 30ea 	strb.w	r3, [r7, #234]	@ 0xea
				undervoltFlag = 0;
 800a230:	2300      	movs	r3, #0
 800a232:	f887 30e8 	strb.w	r3, [r7, #232]	@ 0xe8

				measureCounter = 0;		// Reset the measurement counter back to 0.
 800a236:	4b1e      	ldr	r3, [pc, #120]	@ (800a2b0 <torch_main+0x3e0>)
 800a238:	2200      	movs	r2, #0
 800a23a:	601a      	str	r2, [r3, #0]
				measureFlag = 1;		// Signifies that this module has completed at least one measurement.
 800a23c:	2301      	movs	r3, #1
 800a23e:	f887 30e4 	strb.w	r3, [r7, #228]	@ 0xe4
			}

			// Transmission interrupt: Broadcast cell voltages and module temperatures over CAN every X ms (X depends on the module ID).
			if(transmitCounter > transmissionDelay) {
 800a242:	4b17      	ldr	r3, [pc, #92]	@ (800a2a0 <torch_main+0x3d0>)
 800a244:	881b      	ldrh	r3, [r3, #0]
 800a246:	461a      	mov	r2, r3
 800a248:	4b18      	ldr	r3, [pc, #96]	@ (800a2ac <torch_main+0x3dc>)
 800a24a:	681b      	ldr	r3, [r3, #0]
 800a24c:	429a      	cmp	r2, r3
 800a24e:	d20c      	bcs.n	800a26a <torch_main+0x39a>
				// Two functions below package the data and send the CAN messages.
				transmit_voltages(cellVoltages);
 800a250:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 800a254:	4618      	mov	r0, r3
 800a256:	f7fb f99d 	bl	8005594 <transmit_voltages>
				transmit_temperatures(moduleTemperatures);
 800a25a:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 800a25e:	4618      	mov	r0, r3
 800a260:	f7fb fb68 	bl	8005934 <transmit_temperatures>

				transmitCounter = 0;	// Reset the transmission counter back to 0.
 800a264:	4b11      	ldr	r3, [pc, #68]	@ (800a2ac <torch_main+0x3dc>)
 800a266:	2200      	movs	r2, #0
 800a268:	601a      	str	r2, [r3, #0]
			}

			if(diagnosisCounter > QUICK_DIAGNOSIS_INTERVAL) {
 800a26a:	4b12      	ldr	r3, [pc, #72]	@ (800a2b4 <torch_main+0x3e4>)
 800a26c:	681b      	ldr	r3, [r3, #0]
 800a26e:	f242 7210 	movw	r2, #10000	@ 0x2710
 800a272:	4293      	cmp	r3, r2
 800a274:	d907      	bls.n	800a286 <torch_main+0x3b6>
				quick_diagnosis(packStatus);
 800a276:	f897 30ef 	ldrb.w	r3, [r7, #239]	@ 0xef
 800a27a:	4618      	mov	r0, r3
 800a27c:	f7fb fd5a 	bl	8005d34 <quick_diagnosis>
				diagnosisCounter = 0;	// Reset diagnosis counter back to 0.
 800a280:	4b0c      	ldr	r3, [pc, #48]	@ (800a2b4 <torch_main+0x3e4>)
 800a282:	2200      	movs	r2, #0
 800a284:	601a      	str	r2, [r3, #0]
			}

			// CAN FIFO0 filter poll: Check if a fault message or absolute minimum cell voltage message have been received.
			if(HAL_CAN_GetRxFifoFillLevel(&hcan1, CAN_RX_FIFO0) > 0) {
 800a286:	2100      	movs	r1, #0
 800a288:	4806      	ldr	r0, [pc, #24]	@ (800a2a4 <torch_main+0x3d4>)
 800a28a:	f002 fe58 	bl	800cf3e <HAL_CAN_GetRxFifoFillLevel>
 800a28e:	4603      	mov	r3, r0
 800a290:	2b00      	cmp	r3, #0
 800a292:	f000 8094 	beq.w	800a3be <torch_main+0x4ee>
				uint8_t attempts = 0;
 800a296:	2300      	movs	r3, #0
 800a298:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf

				// While-loop tries extracting and interpreting the CAN message up to 10 times.
				while(attempts < ATTEMPT_LIMIT) {
 800a29c:	e081      	b.n	800a3a2 <torch_main+0x4d2>
 800a29e:	bf00      	nop
 800a2a0:	200003e6 	.word	0x200003e6
 800a2a4:	200000c4 	.word	0x200000c4
 800a2a8:	2000019c 	.word	0x2000019c
 800a2ac:	200003e8 	.word	0x200003e8
 800a2b0:	200003ec 	.word	0x200003ec
 800a2b4:	200003f4 	.word	0x200003f4
 800a2b8:	42700000 	.word	0x42700000
					// If-block below executes if the CAN message has been successfully interpreted.
					if(HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &RxHeader, RxData) == HAL_OK) {
 800a2bc:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 800a2c0:	f107 02bc 	add.w	r2, r7, #188	@ 0xbc
 800a2c4:	2100      	movs	r1, #0
 800a2c6:	48a4      	ldr	r0, [pc, #656]	@ (800a558 <torch_main+0x688>)
 800a2c8:	f002 fd17 	bl	800ccfa <HAL_CAN_GetRxMessage>
 800a2cc:	4603      	mov	r3, r0
 800a2ce:	2b00      	cmp	r3, #0
 800a2d0:	d15f      	bne.n	800a392 <torch_main+0x4c2>

						// Enter fault loop if motherboard OR another module are sending a fault message.
						if(RxHeader.StdId == CAN_FAULT_ID) { silent_error_loop(); }
 800a2d2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800a2d6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800a2da:	d101      	bne.n	800a2e0 <torch_main+0x410>
 800a2dc:	f7fa fd44 	bl	8004d68 <silent_error_loop>

						// Retrieves the minimum cell voltage in the entire pack (modules 2 to 5).
						if(RxHeader.StdId == CAN_MIN_VCELL_ID) { absMinCellVoltage = (uint16_t)RxData[0] | ((uint16_t)RxData[1] << 8); }
 800a2e0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800a2e4:	f240 32e5 	movw	r2, #997	@ 0x3e5
 800a2e8:	4293      	cmp	r3, r2
 800a2ea:	d10b      	bne.n	800a304 <torch_main+0x434>
 800a2ec:	f897 30b4 	ldrb.w	r3, [r7, #180]	@ 0xb4
 800a2f0:	b21a      	sxth	r2, r3
 800a2f2:	f897 30b5 	ldrb.w	r3, [r7, #181]	@ 0xb5
 800a2f6:	b21b      	sxth	r3, r3
 800a2f8:	021b      	lsls	r3, r3, #8
 800a2fa:	b21b      	sxth	r3, r3
 800a2fc:	4313      	orrs	r3, r2
 800a2fe:	b21b      	sxth	r3, r3
 800a300:	b29b      	uxth	r3, r3
 800a302:	85fb      	strh	r3, [r7, #46]	@ 0x2e

						// Message that orders the BMS to start balancing.
						if(RxHeader.StdId == CAN_START_BALANCE_ID) {
 800a304:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800a308:	f240 32e6 	movw	r2, #998	@ 0x3e6
 800a30c:	4293      	cmp	r3, r2
 800a30e:	d106      	bne.n	800a31e <torch_main+0x44e>
							if(packStatus == PACK_STATUS_IDLE) {
 800a310:	f897 30ef 	ldrb.w	r3, [r7, #239]	@ 0xef
 800a314:	2b00      	cmp	r3, #0
 800a316:	d102      	bne.n	800a31e <torch_main+0x44e>
								balanceMsgReceivedFlag = 73;
 800a318:	2349      	movs	r3, #73	@ 0x49
 800a31a:	f887 30ed 	strb.w	r3, [r7, #237]	@ 0xed
							}
						}

						// Modules 2 - 4 will find their local minimum cell voltages and transmit it onto the CAN bus.
						if(RxHeader.StdId == CAN_EXTRACT_VMIN_ID && moduleID != 1 && measureFlag) {
 800a31e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800a322:	f5b3 7f78 	cmp.w	r3, #992	@ 0x3e0
 800a326:	d130      	bne.n	800a38a <torch_main+0x4ba>
 800a328:	2301      	movs	r3, #1
 800a32a:	2b01      	cmp	r3, #1
 800a32c:	d02d      	beq.n	800a38a <torch_main+0x4ba>
 800a32e:	f897 30e4 	ldrb.w	r3, [r7, #228]	@ 0xe4
 800a332:	2b00      	cmp	r3, #0
 800a334:	d029      	beq.n	800a38a <torch_main+0x4ba>
							uint16_t localMinCellVoltage = cellVoltages[0];
 800a336:	f8b7 308c 	ldrh.w	r3, [r7, #140]	@ 0x8c
 800a33a:	f8a7 30dc 	strh.w	r3, [r7, #220]	@ 0xdc

							for(uint8_t i = 0; i < CELL_QTY; i++) {
 800a33e:	2300      	movs	r3, #0
 800a340:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
 800a344:	e018      	b.n	800a378 <torch_main+0x4a8>
								if(cellVoltages[i] < localMinCellVoltage) {
 800a346:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 800a34a:	005b      	lsls	r3, r3, #1
 800a34c:	33f0      	adds	r3, #240	@ 0xf0
 800a34e:	443b      	add	r3, r7
 800a350:	f833 3c64 	ldrh.w	r3, [r3, #-100]
 800a354:	f8b7 20dc 	ldrh.w	r2, [r7, #220]	@ 0xdc
 800a358:	429a      	cmp	r2, r3
 800a35a:	d908      	bls.n	800a36e <torch_main+0x49e>
									localMinCellVoltage = cellVoltages[i];
 800a35c:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 800a360:	005b      	lsls	r3, r3, #1
 800a362:	33f0      	adds	r3, #240	@ 0xf0
 800a364:	443b      	add	r3, r7
 800a366:	f833 3c64 	ldrh.w	r3, [r3, #-100]
 800a36a:	f8a7 30dc 	strh.w	r3, [r7, #220]	@ 0xdc
							for(uint8_t i = 0; i < CELL_QTY; i++) {
 800a36e:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 800a372:	3301      	adds	r3, #1
 800a374:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
 800a378:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 800a37c:	2b13      	cmp	r3, #19
 800a37e:	d9e2      	bls.n	800a346 <torch_main+0x476>
								}
							}
							transmit_vmin(localMinCellVoltage);
 800a380:	f8b7 30dc 	ldrh.w	r3, [r7, #220]	@ 0xdc
 800a384:	4618      	mov	r0, r3
 800a386:	f7fb f8ab 	bl	80054e0 <transmit_vmin>
						}

						attempts = 13;
 800a38a:	230d      	movs	r3, #13
 800a38c:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
 800a390:	e007      	b.n	800a3a2 <torch_main+0x4d2>
					}
					// If there's a problem with reading the CAN message, the 'attempts' counter will increment.
					else {
						attempts++;
 800a392:	f897 30df 	ldrb.w	r3, [r7, #223]	@ 0xdf
 800a396:	3301      	adds	r3, #1
 800a398:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
						wait(5);
 800a39c:	2005      	movs	r0, #5
 800a39e:	f000 fa31 	bl	800a804 <wait>
				while(attempts < ATTEMPT_LIMIT) {
 800a3a2:	f897 30df 	ldrb.w	r3, [r7, #223]	@ 0xdf
 800a3a6:	2b09      	cmp	r3, #9
 800a3a8:	d988      	bls.n	800a2bc <torch_main+0x3ec>
					}
				}
				// If the STM32 fails to read the CAN message 10 times in a row, fault!
				if(attempts != 13) { error_loop(ERROR_CAN_READ, 0, 0, MCU_FAULT); }
 800a3aa:	f897 30df 	ldrb.w	r3, [r7, #223]	@ 0xdf
 800a3ae:	2b0d      	cmp	r3, #13
 800a3b0:	d005      	beq.n	800a3be <torch_main+0x4ee>
 800a3b2:	2302      	movs	r3, #2
 800a3b4:	2200      	movs	r2, #0
 800a3b6:	2100      	movs	r1, #0
 800a3b8:	2057      	movs	r0, #87	@ 0x57
 800a3ba:	f7fa fd1d 	bl	8004df8 <error_loop>
			}

			// CAN FIFO1 filter poll: Check if the pack status message has been received.
			if(HAL_CAN_GetRxFifoFillLevel(&hcan1, CAN_RX_FIFO1) > 0) {
 800a3be:	2101      	movs	r1, #1
 800a3c0:	4865      	ldr	r0, [pc, #404]	@ (800a558 <torch_main+0x688>)
 800a3c2:	f002 fdbc 	bl	800cf3e <HAL_CAN_GetRxFifoFillLevel>
 800a3c6:	4603      	mov	r3, r0
 800a3c8:	2b00      	cmp	r3, #0
 800a3ca:	d045      	beq.n	800a458 <torch_main+0x588>
				uint8_t attempts = 0;
 800a3cc:	2300      	movs	r3, #0
 800a3ce:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda

				// While-loop tries extracting and interpreting the CAN message up to 10 times.
				while(attempts < ATTEMPT_LIMIT) {
 800a3d2:	e033      	b.n	800a43c <torch_main+0x56c>
					// If-block below executes if the CAN message has been successfully interpreted.
					if(HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO1, &RxHeader, RxData) == HAL_OK) {
 800a3d4:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 800a3d8:	f107 02bc 	add.w	r2, r7, #188	@ 0xbc
 800a3dc:	2101      	movs	r1, #1
 800a3de:	485e      	ldr	r0, [pc, #376]	@ (800a558 <torch_main+0x688>)
 800a3e0:	f002 fc8b 	bl	800ccfa <HAL_CAN_GetRxMessage>
 800a3e4:	4603      	mov	r3, r0
 800a3e6:	2b00      	cmp	r3, #0
 800a3e8:	d120      	bne.n	800a42c <torch_main+0x55c>
						// If-block below checks if the message is the PackStatus message.
						if(RxHeader.StdId == CAN_PACK_STATUS_ID) {
 800a3ea:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800a3ee:	f5b3 6f84 	cmp.w	r3, #1056	@ 0x420
 800a3f2:	d117      	bne.n	800a424 <torch_main+0x554>
							switch(RxData[PACK_STATUS_BYTE_POSITION]) {
 800a3f4:	f897 30b9 	ldrb.w	r3, [r7, #185]	@ 0xb9
 800a3f8:	2b04      	cmp	r3, #4
 800a3fa:	d002      	beq.n	800a402 <torch_main+0x532>
 800a3fc:	2b06      	cmp	r3, #6
 800a3fe:	d005      	beq.n	800a40c <torch_main+0x53c>
 800a400:	e007      	b.n	800a412 <torch_main+0x542>
								case PACK_STATUS_CHARGING:
									charge_led_on();
 800a402:	f000 facf 	bl	800a9a4 <charge_led_on>
									active_led_off();
 800a406:	f000 fac1 	bl	800a98c <active_led_off>
									break;
 800a40a:	e007      	b.n	800a41c <torch_main+0x54c>
								case PACK_STATUS_FAULT:
									silent_error_loop();
 800a40c:	f7fa fcac 	bl	8004d68 <silent_error_loop>
									break;
 800a410:	e004      	b.n	800a41c <torch_main+0x54c>
								default:
									active_led_on();
 800a412:	f000 faaf 	bl	800a974 <active_led_on>
									charge_led_off();
 800a416:	f000 fad1 	bl	800a9bc <charge_led_off>
									break;
 800a41a:	bf00      	nop
							}
							packStatus = RxData[PACK_STATUS_BYTE_POSITION];
 800a41c:	f897 30b9 	ldrb.w	r3, [r7, #185]	@ 0xb9
 800a420:	f887 30ef 	strb.w	r3, [r7, #239]	@ 0xef
						}
						attempts = 13;
 800a424:	230d      	movs	r3, #13
 800a426:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
 800a42a:	e007      	b.n	800a43c <torch_main+0x56c>
					}
					// If there's a problem with reading the CAN message, the 'attempts' counter will increment.
					else {
						attempts++;
 800a42c:	f897 30da 	ldrb.w	r3, [r7, #218]	@ 0xda
 800a430:	3301      	adds	r3, #1
 800a432:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
						wait(5);
 800a436:	2005      	movs	r0, #5
 800a438:	f000 f9e4 	bl	800a804 <wait>
				while(attempts < ATTEMPT_LIMIT) {
 800a43c:	f897 30da 	ldrb.w	r3, [r7, #218]	@ 0xda
 800a440:	2b09      	cmp	r3, #9
 800a442:	d9c7      	bls.n	800a3d4 <torch_main+0x504>
					}
				}
				// If the STM32 fails to read the CAN message 10 times in a row, fault!
				if(attempts != 13) { error_loop(ERROR_CAN_READ, 0, 0, MCU_FAULT); }
 800a444:	f897 30da 	ldrb.w	r3, [r7, #218]	@ 0xda
 800a448:	2b0d      	cmp	r3, #13
 800a44a:	d005      	beq.n	800a458 <torch_main+0x588>
 800a44c:	2302      	movs	r3, #2
 800a44e:	2200      	movs	r2, #0
 800a450:	2100      	movs	r1, #0
 800a452:	2057      	movs	r0, #87	@ 0x57
 800a454:	f7fa fcd0 	bl	8004df8 <error_loop>
			}

			// Module 1 starts to get the minimum cell voltage in the pack to initiate balancing.
			if(balanceMsgReceivedFlag == 73 && moduleID == 1) {
 800a458:	f897 30ed 	ldrb.w	r3, [r7, #237]	@ 0xed
 800a45c:	2b49      	cmp	r3, #73	@ 0x49
 800a45e:	d14d      	bne.n	800a4fc <torch_main+0x62c>
 800a460:	2301      	movs	r3, #1
 800a462:	2b01      	cmp	r3, #1
 800a464:	d14a      	bne.n	800a4fc <torch_main+0x62c>
				extract_min_cell_voltage(&absMinCellVoltage);
 800a466:	f107 032e 	add.w	r3, r7, #46	@ 0x2e
 800a46a:	4618      	mov	r0, r3
 800a46c:	f7f7 fca6 	bl	8001dbc <extract_min_cell_voltage>

				transmitCounter = 0;
 800a470:	4b3a      	ldr	r3, [pc, #232]	@ (800a55c <torch_main+0x68c>)
 800a472:	2200      	movs	r2, #0
 800a474:	601a      	str	r2, [r3, #0]
				measureCounter = 0;
 800a476:	4b3a      	ldr	r3, [pc, #232]	@ (800a560 <torch_main+0x690>)
 800a478:	2200      	movs	r2, #0
 800a47a:	601a      	str	r2, [r3, #0]
				balanceCounter = 0;
 800a47c:	4b39      	ldr	r3, [pc, #228]	@ (800a564 <torch_main+0x694>)
 800a47e:	2200      	movs	r2, #0
 800a480:	601a      	str	r2, [r3, #0]
				while(balanceCounter < BALANCE_COMMAND_DURATION) {
 800a482:	e035      	b.n	800a4f0 <torch_main+0x620>
					if(measureCounter > MEASURE_INTERVAL) {
 800a484:	4b36      	ldr	r3, [pc, #216]	@ (800a560 <torch_main+0x690>)
 800a486:	681b      	ldr	r3, [r3, #0]
 800a488:	2b64      	cmp	r3, #100	@ 0x64
 800a48a:	d916      	bls.n	800a4ba <torch_main+0x5ea>
						if(!refup_check()) {
 800a48c:	f7ff fc05 	bl	8009c9a <refup_check>
 800a490:	4603      	mov	r3, r0
 800a492:	2b00      	cmp	r3, #0
 800a494:	d104      	bne.n	800a4a0 <torch_main+0x5d0>
							force_refup();
 800a496:	f7ff fbcb 	bl	8009c30 <force_refup>
							wait(1);
 800a49a:	2001      	movs	r0, #1
 800a49c:	f000 f9b2 	bl	800a804 <wait>
						}

						temperature_sense(moduleTemperatures);
 800a4a0:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 800a4a4:	4618      	mov	r0, r3
 800a4a6:	f000 fc1b 	bl	800ace0 <temperature_sense>
						voltage_sense(cellVoltages);
 800a4aa:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 800a4ae:	4618      	mov	r0, r3
 800a4b0:	f001 f9ee 	bl	800b890 <voltage_sense>

						measureCounter = 0;
 800a4b4:	4b2a      	ldr	r3, [pc, #168]	@ (800a560 <torch_main+0x690>)
 800a4b6:	2200      	movs	r2, #0
 800a4b8:	601a      	str	r2, [r3, #0]
					}

					if(transmitCounter > transmissionDelay) {
 800a4ba:	4b2b      	ldr	r3, [pc, #172]	@ (800a568 <torch_main+0x698>)
 800a4bc:	881b      	ldrh	r3, [r3, #0]
 800a4be:	461a      	mov	r2, r3
 800a4c0:	4b26      	ldr	r3, [pc, #152]	@ (800a55c <torch_main+0x68c>)
 800a4c2:	681b      	ldr	r3, [r3, #0]
 800a4c4:	429a      	cmp	r2, r3
 800a4c6:	d210      	bcs.n	800a4ea <torch_main+0x61a>
						transmit_voltages(cellVoltages);
 800a4c8:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 800a4cc:	4618      	mov	r0, r3
 800a4ce:	f7fb f861 	bl	8005594 <transmit_voltages>
						transmit_temperatures(moduleTemperatures);
 800a4d2:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 800a4d6:	4618      	mov	r0, r3
 800a4d8:	f7fb fa2c 	bl	8005934 <transmit_temperatures>
						transmit_balance_initiation(absMinCellVoltage);
 800a4dc:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800a4de:	4618      	mov	r0, r3
 800a4e0:	f7fa ffe0 	bl	80054a4 <transmit_balance_initiation>

						transmitCounter = 0;
 800a4e4:	4b1d      	ldr	r3, [pc, #116]	@ (800a55c <torch_main+0x68c>)
 800a4e6:	2200      	movs	r2, #0
 800a4e8:	601a      	str	r2, [r3, #0]
					}
					wait(1);
 800a4ea:	2001      	movs	r0, #1
 800a4ec:	f000 f98a 	bl	800a804 <wait>
				while(balanceCounter < BALANCE_COMMAND_DURATION) {
 800a4f0:	4b1c      	ldr	r3, [pc, #112]	@ (800a564 <torch_main+0x694>)
 800a4f2:	681b      	ldr	r3, [r3, #0]
 800a4f4:	f241 3287 	movw	r2, #4999	@ 0x1387
 800a4f8:	4293      	cmp	r3, r2
 800a4fa:	d9c3      	bls.n	800a484 <torch_main+0x5b4>
				}
			}

			// Balance check poll.
			if((absMinCellVoltage > MIN_CELL_VOLTAGE || forceBalance) && packStatus == PACK_STATUS_IDLE && (balanceMsgReceivedFlag == 73 || forceBalance)) {
 800a4fc:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800a4fe:	f246 12a8 	movw	r2, #25000	@ 0x61a8
 800a502:	4293      	cmp	r3, r2
 800a504:	d804      	bhi.n	800a510 <torch_main+0x640>
 800a506:	4b19      	ldr	r3, [pc, #100]	@ (800a56c <torch_main+0x69c>)
 800a508:	781b      	ldrb	r3, [r3, #0]
 800a50a:	2b00      	cmp	r3, #0
 800a50c:	f000 80df 	beq.w	800a6ce <torch_main+0x7fe>
 800a510:	f897 30ef 	ldrb.w	r3, [r7, #239]	@ 0xef
 800a514:	2b00      	cmp	r3, #0
 800a516:	f040 80da 	bne.w	800a6ce <torch_main+0x7fe>
 800a51a:	f897 30ed 	ldrb.w	r3, [r7, #237]	@ 0xed
 800a51e:	2b49      	cmp	r3, #73	@ 0x49
 800a520:	d004      	beq.n	800a52c <torch_main+0x65c>
 800a522:	4b12      	ldr	r3, [pc, #72]	@ (800a56c <torch_main+0x69c>)
 800a524:	781b      	ldrb	r3, [r3, #0]
 800a526:	2b00      	cmp	r3, #0
 800a528:	f000 80d1 	beq.w	800a6ce <torch_main+0x7fe>

				if(forceBalance && moduleID == 1) {
 800a52c:	4b0f      	ldr	r3, [pc, #60]	@ (800a56c <torch_main+0x69c>)
 800a52e:	781b      	ldrb	r3, [r3, #0]
 800a530:	2b00      	cmp	r3, #0
 800a532:	d059      	beq.n	800a5e8 <torch_main+0x718>
 800a534:	2301      	movs	r3, #1
 800a536:	2b01      	cmp	r3, #1
 800a538:	d156      	bne.n	800a5e8 <torch_main+0x718>
					extract_min_cell_voltage(&absMinCellVoltage);
 800a53a:	f107 032e 	add.w	r3, r7, #46	@ 0x2e
 800a53e:	4618      	mov	r0, r3
 800a540:	f7f7 fc3c 	bl	8001dbc <extract_min_cell_voltage>

					transmitCounter = 0;
 800a544:	4b05      	ldr	r3, [pc, #20]	@ (800a55c <torch_main+0x68c>)
 800a546:	2200      	movs	r2, #0
 800a548:	601a      	str	r2, [r3, #0]
					measureCounter = 0;
 800a54a:	4b05      	ldr	r3, [pc, #20]	@ (800a560 <torch_main+0x690>)
 800a54c:	2200      	movs	r2, #0
 800a54e:	601a      	str	r2, [r3, #0]
					balanceCounter = 0;
 800a550:	4b04      	ldr	r3, [pc, #16]	@ (800a564 <torch_main+0x694>)
 800a552:	2200      	movs	r2, #0
 800a554:	601a      	str	r2, [r3, #0]
					while(balanceCounter < BALANCE_COMMAND_DURATION) {
 800a556:	e041      	b.n	800a5dc <torch_main+0x70c>
 800a558:	200000c4 	.word	0x200000c4
 800a55c:	200003e8 	.word	0x200003e8
 800a560:	200003ec 	.word	0x200003ec
 800a564:	200003f0 	.word	0x200003f0
 800a568:	200003e6 	.word	0x200003e6
 800a56c:	200003e4 	.word	0x200003e4
						if(measureCounter > MEASURE_INTERVAL) {
 800a570:	4b5c      	ldr	r3, [pc, #368]	@ (800a6e4 <torch_main+0x814>)
 800a572:	681b      	ldr	r3, [r3, #0]
 800a574:	2b64      	cmp	r3, #100	@ 0x64
 800a576:	d916      	bls.n	800a5a6 <torch_main+0x6d6>
							if(!refup_check()) {
 800a578:	f7ff fb8f 	bl	8009c9a <refup_check>
 800a57c:	4603      	mov	r3, r0
 800a57e:	2b00      	cmp	r3, #0
 800a580:	d104      	bne.n	800a58c <torch_main+0x6bc>
								force_refup();
 800a582:	f7ff fb55 	bl	8009c30 <force_refup>
								wait(1);
 800a586:	2001      	movs	r0, #1
 800a588:	f000 f93c 	bl	800a804 <wait>
							}

							temperature_sense(moduleTemperatures);
 800a58c:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 800a590:	4618      	mov	r0, r3
 800a592:	f000 fba5 	bl	800ace0 <temperature_sense>
							voltage_sense(cellVoltages);
 800a596:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 800a59a:	4618      	mov	r0, r3
 800a59c:	f001 f978 	bl	800b890 <voltage_sense>

							measureCounter = 0;
 800a5a0:	4b50      	ldr	r3, [pc, #320]	@ (800a6e4 <torch_main+0x814>)
 800a5a2:	2200      	movs	r2, #0
 800a5a4:	601a      	str	r2, [r3, #0]
						}

						if(transmitCounter > transmissionDelay) {
 800a5a6:	4b50      	ldr	r3, [pc, #320]	@ (800a6e8 <torch_main+0x818>)
 800a5a8:	881b      	ldrh	r3, [r3, #0]
 800a5aa:	461a      	mov	r2, r3
 800a5ac:	4b4f      	ldr	r3, [pc, #316]	@ (800a6ec <torch_main+0x81c>)
 800a5ae:	681b      	ldr	r3, [r3, #0]
 800a5b0:	429a      	cmp	r2, r3
 800a5b2:	d210      	bcs.n	800a5d6 <torch_main+0x706>
							transmit_voltages(cellVoltages);
 800a5b4:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 800a5b8:	4618      	mov	r0, r3
 800a5ba:	f7fa ffeb 	bl	8005594 <transmit_voltages>
							transmit_temperatures(moduleTemperatures);
 800a5be:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 800a5c2:	4618      	mov	r0, r3
 800a5c4:	f7fb f9b6 	bl	8005934 <transmit_temperatures>
							transmit_balance_initiation(absMinCellVoltage);
 800a5c8:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800a5ca:	4618      	mov	r0, r3
 800a5cc:	f7fa ff6a 	bl	80054a4 <transmit_balance_initiation>

							transmitCounter = 0;
 800a5d0:	4b46      	ldr	r3, [pc, #280]	@ (800a6ec <torch_main+0x81c>)
 800a5d2:	2200      	movs	r2, #0
 800a5d4:	601a      	str	r2, [r3, #0]
						}
						wait(1);
 800a5d6:	2001      	movs	r0, #1
 800a5d8:	f000 f914 	bl	800a804 <wait>
					while(balanceCounter < BALANCE_COMMAND_DURATION) {
 800a5dc:	4b44      	ldr	r3, [pc, #272]	@ (800a6f0 <torch_main+0x820>)
 800a5de:	681b      	ldr	r3, [r3, #0]
 800a5e0:	f241 3287 	movw	r2, #4999	@ 0x1387
 800a5e4:	4293      	cmp	r3, r2
 800a5e6:	d9c3      	bls.n	800a570 <torch_main+0x6a0>
					}
				}

				// Check that 6813 is in REFUP state. If it's not, we force it to enter it.
				if(!refup_check()) {
 800a5e8:	f7ff fb57 	bl	8009c9a <refup_check>
 800a5ec:	4603      	mov	r3, r0
 800a5ee:	2b00      	cmp	r3, #0
 800a5f0:	d104      	bne.n	800a5fc <torch_main+0x72c>
					force_refup();
 800a5f2:	f7ff fb1d 	bl	8009c30 <force_refup>
					wait(1);
 800a5f6:	2001      	movs	r0, #1
 800a5f8:	f000 f904 	bl	800a804 <wait>
				}
				// Get a fresh set of cell voltages. This'll be used to determine which cells need to be balanced.
				voltage_sense(cellVoltages);
 800a5fc:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 800a600:	4618      	mov	r0, r3
 800a602:	f001 f945 	bl	800b890 <voltage_sense>

				// Check which cells need to be balanced. Quantity and cell indexes are recorded.
				cellsToBalanceQty = balance_check(cellsToBalance, cellVoltages, absMinCellVoltage);
 800a606:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800a608:	f107 018c 	add.w	r1, r7, #140	@ 0x8c
 800a60c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800a610:	4618      	mov	r0, r3
 800a612:	f7f7 fb6f 	bl	8001cf4 <balance_check>
 800a616:	4603      	mov	r3, r0
 800a618:	f887 30ee 	strb.w	r3, [r7, #238]	@ 0xee

				// If-block below executes if at least one cell needs to be balanced.
				if(cellsToBalanceQty > 0) {
 800a61c:	f897 30ee 	ldrb.w	r3, [r7, #238]	@ 0xee
 800a620:	2b00      	cmp	r3, #0
 800a622:	d04c      	beq.n	800a6be <torch_main+0x7ee>
					uint8_t balanceFlag = 1;
 800a624:	2301      	movs	r3, #1
 800a626:	f887 30d9 	strb.w	r3, [r7, #217]	@ 0xd9
					uint8_t haltBalanceFlag = 73;
 800a62a:	2349      	movs	r3, #73	@ 0x49
 800a62c:	70fb      	strb	r3, [r7, #3]

					// This while-loop is the balancing loop. The BMS will stay here as long as the cells remain out of balance.
					while(balanceFlag && haltBalanceFlag == 73) {
 800a62e:	e03a      	b.n	800a6a6 <torch_main+0x7d6>

						balance_cycle(cellsToBalance, cellsToBalanceQty, absMinCellVoltage, &haltBalanceFlag);
 800a630:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800a632:	1cfb      	adds	r3, r7, #3
 800a634:	f897 10ee 	ldrb.w	r1, [r7, #238]	@ 0xee
 800a638:	f107 0030 	add.w	r0, r7, #48	@ 0x30
 800a63c:	f7f7 fd02 	bl	8002044 <balance_cycle>

						force_refup();
 800a640:	f7ff faf6 	bl	8009c30 <force_refup>
						wait(1);
 800a644:	2001      	movs	r0, #1
 800a646:	f000 f8dd 	bl	800a804 <wait>
						voltage_sense(cellVoltages);
 800a64a:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 800a64e:	4618      	mov	r0, r3
 800a650:	f001 f91e 	bl	800b890 <voltage_sense>

						cellsToBalanceQty = 0;
 800a654:	2300      	movs	r3, #0
 800a656:	f887 30ee 	strb.w	r3, [r7, #238]	@ 0xee
						for(uint8_t i = 0; i < CELL_QTY; i++) { cellsToBalance[i] = 0; }
 800a65a:	2300      	movs	r3, #0
 800a65c:	f887 30d8 	strb.w	r3, [r7, #216]	@ 0xd8
 800a660:	e00b      	b.n	800a67a <torch_main+0x7aa>
 800a662:	f897 30d8 	ldrb.w	r3, [r7, #216]	@ 0xd8
 800a666:	33f0      	adds	r3, #240	@ 0xf0
 800a668:	443b      	add	r3, r7
 800a66a:	2200      	movs	r2, #0
 800a66c:	f803 2cc0 	strb.w	r2, [r3, #-192]
 800a670:	f897 30d8 	ldrb.w	r3, [r7, #216]	@ 0xd8
 800a674:	3301      	adds	r3, #1
 800a676:	f887 30d8 	strb.w	r3, [r7, #216]	@ 0xd8
 800a67a:	f897 30d8 	ldrb.w	r3, [r7, #216]	@ 0xd8
 800a67e:	2b13      	cmp	r3, #19
 800a680:	d9ef      	bls.n	800a662 <torch_main+0x792>

						cellsToBalanceQty = balance_check(cellsToBalance, cellVoltages, absMinCellVoltage);
 800a682:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800a684:	f107 018c 	add.w	r1, r7, #140	@ 0x8c
 800a688:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800a68c:	4618      	mov	r0, r3
 800a68e:	f7f7 fb31 	bl	8001cf4 <balance_check>
 800a692:	4603      	mov	r3, r0
 800a694:	f887 30ee 	strb.w	r3, [r7, #238]	@ 0xee

						if(cellsToBalanceQty == 0) { balanceFlag = 0; }
 800a698:	f897 30ee 	ldrb.w	r3, [r7, #238]	@ 0xee
 800a69c:	2b00      	cmp	r3, #0
 800a69e:	d102      	bne.n	800a6a6 <torch_main+0x7d6>
 800a6a0:	2300      	movs	r3, #0
 800a6a2:	f887 30d9 	strb.w	r3, [r7, #217]	@ 0xd9
					while(balanceFlag && haltBalanceFlag == 73) {
 800a6a6:	f897 30d9 	ldrb.w	r3, [r7, #217]	@ 0xd9
 800a6aa:	2b00      	cmp	r3, #0
 800a6ac:	d002      	beq.n	800a6b4 <torch_main+0x7e4>
 800a6ae:	78fb      	ldrb	r3, [r7, #3]
 800a6b0:	2b49      	cmp	r3, #73	@ 0x49
 800a6b2:	d0bd      	beq.n	800a630 <torch_main+0x760>
					}
					if(haltBalanceFlag == 73) { low_power_state(); }
 800a6b4:	78fb      	ldrb	r3, [r7, #3]
 800a6b6:	2b49      	cmp	r3, #73	@ 0x49
 800a6b8:	d101      	bne.n	800a6be <torch_main+0x7ee>
 800a6ba:	f000 f839 	bl	800a730 <low_power_state>
				}
				absMinCellVoltage = 0;
 800a6be:	2300      	movs	r3, #0
 800a6c0:	85fb      	strh	r3, [r7, #46]	@ 0x2e
				balanceMsgReceivedFlag = 0;
 800a6c2:	2300      	movs	r3, #0
 800a6c4:	f887 30ed 	strb.w	r3, [r7, #237]	@ 0xed
				forceBalance = 0;
 800a6c8:	4b0a      	ldr	r3, [pc, #40]	@ (800a6f4 <torch_main+0x824>)
 800a6ca:	2200      	movs	r2, #0
 800a6cc:	701a      	strb	r2, [r3, #0]
			}
			wait(1);
 800a6ce:	2001      	movs	r0, #1
 800a6d0:	f000 f898 	bl	800a804 <wait>
			if(measureCounter > MEASURE_INTERVAL) {
 800a6d4:	e48f      	b.n	8009ff6 <torch_main+0x126>
		}
	}

	else { low_power_state(); }
 800a6d6:	f000 f82b 	bl	800a730 <low_power_state>
}
 800a6da:	bf00      	nop
 800a6dc:	37f0      	adds	r7, #240	@ 0xf0
 800a6de:	46bd      	mov	sp, r7
 800a6e0:	bd80      	pop	{r7, pc}
 800a6e2:	bf00      	nop
 800a6e4:	200003ec 	.word	0x200003ec
 800a6e8:	200003e6 	.word	0x200003e6
 800a6ec:	200003e8 	.word	0x200003e8
 800a6f0:	200003f0 	.word	0x200003f0
 800a6f4:	200003e4 	.word	0x200003e4

0800a6f8 <ltc6820_awaken>:
#include "torch_main.h"
#include "torch_stm32.h"


void ltc6820_awaken(void)
{
 800a6f8:	b580      	push	{r7, lr}
 800a6fa:	af00      	add	r7, sp, #0
	pull_low(GPIOA, GPIO_PIN_4);		// LTC6820 side A !SS
 800a6fc:	2110      	movs	r1, #16
 800a6fe:	4809      	ldr	r0, [pc, #36]	@ (800a724 <ltc6820_awaken+0x2c>)
 800a700:	f000 f860 	bl	800a7c4 <pull_low>
	pull_low(GPIOA, GPIO_PIN_15);		// LTC6820 side B !SS
 800a704:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800a708:	4806      	ldr	r0, [pc, #24]	@ (800a724 <ltc6820_awaken+0x2c>)
 800a70a:	f000 f85b 	bl	800a7c4 <pull_low>
	pull_high(GPIOC, GPIO_PIN_4);		// LTC6820 side A force EN
 800a70e:	2110      	movs	r1, #16
 800a710:	4805      	ldr	r0, [pc, #20]	@ (800a728 <ltc6820_awaken+0x30>)
 800a712:	f000 f867 	bl	800a7e4 <pull_high>
	pull_high(GPIOD, GPIO_PIN_2);		// LTC6820 side B force EN
 800a716:	2104      	movs	r1, #4
 800a718:	4804      	ldr	r0, [pc, #16]	@ (800a72c <ltc6820_awaken+0x34>)
 800a71a:	f000 f863 	bl	800a7e4 <pull_high>
}
 800a71e:	bf00      	nop
 800a720:	bd80      	pop	{r7, pc}
 800a722:	bf00      	nop
 800a724:	40020000 	.word	0x40020000
 800a728:	40020800 	.word	0x40020800
 800a72c:	40020c00 	.word	0x40020c00

0800a730 <low_power_state>:


void low_power_state(void)
{
 800a730:	b580      	push	{r7, lr}
 800a732:	af00      	add	r7, sp, #0
	// Four lines below put the LTC6820s to sleep
	pull_low(GPIOC, GPIO_PIN_4);		// LTC6820 side A go sleep
 800a734:	2110      	movs	r1, #16
 800a736:	480f      	ldr	r0, [pc, #60]	@ (800a774 <low_power_state+0x44>)
 800a738:	f000 f844 	bl	800a7c4 <pull_low>
	pull_low(GPIOD, GPIO_PIN_2);		// LTC6820 side B go sleep
 800a73c:	2104      	movs	r1, #4
 800a73e:	480e      	ldr	r0, [pc, #56]	@ (800a778 <low_power_state+0x48>)
 800a740:	f000 f840 	bl	800a7c4 <pull_low>
	pull_high(GPIOA, GPIO_PIN_4);		// LTC6820 side A !SS
 800a744:	2110      	movs	r1, #16
 800a746:	480d      	ldr	r0, [pc, #52]	@ (800a77c <low_power_state+0x4c>)
 800a748:	f000 f84c 	bl	800a7e4 <pull_high>
	pull_high(GPIOA, GPIO_PIN_15);		// LTC6820 side B !SS
 800a74c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800a750:	480a      	ldr	r0, [pc, #40]	@ (800a77c <low_power_state+0x4c>)
 800a752:	f000 f847 	bl	800a7e4 <pull_high>

	if(bmsMode == 1) {
 800a756:	4b0a      	ldr	r3, [pc, #40]	@ (800a780 <low_power_state+0x50>)
 800a758:	781b      	ldrb	r3, [r3, #0]
 800a75a:	2b01      	cmp	r3, #1
 800a75c:	d105      	bne.n	800a76a <low_power_state+0x3a>
		HAL_CAN_Stop(&hcan1);
 800a75e:	4809      	ldr	r0, [pc, #36]	@ (800a784 <low_power_state+0x54>)
 800a760:	f002 f9b2 	bl	800cac8 <HAL_CAN_Stop>
		stop_timer(&htim2);
 800a764:	4808      	ldr	r0, [pc, #32]	@ (800a788 <low_power_state+0x58>)
 800a766:	f000 f8ad 	bl	800a8c4 <stop_timer>
	}

	blink();
 800a76a:	f000 f80f 	bl	800a78c <blink>
}
 800a76e:	bf00      	nop
 800a770:	bd80      	pop	{r7, pc}
 800a772:	bf00      	nop
 800a774:	40020800 	.word	0x40020800
 800a778:	40020c00 	.word	0x40020c00
 800a77c:	40020000 	.word	0x40020000
 800a780:	08010141 	.word	0x08010141
 800a784:	200000c4 	.word	0x200000c4
 800a788:	2000019c 	.word	0x2000019c

0800a78c <blink>:


void blink(void)
{
 800a78c:	b580      	push	{r7, lr}
 800a78e:	af00      	add	r7, sp, #0
	while(1) {
		active_led_off();
 800a790:	f000 f8fc 	bl	800a98c <active_led_off>
		charge_led_off();
 800a794:	f000 f912 	bl	800a9bc <charge_led_off>
		hot_led_off();
 800a798:	f000 f93e 	bl	800aa18 <hot_led_off>
		balance_led_off();
 800a79c:	f000 f926 	bl	800a9ec <balance_led_off>
		wait(1000);
 800a7a0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800a7a4:	f000 f82e 	bl	800a804 <wait>
		active_led_on();
 800a7a8:	f000 f8e4 	bl	800a974 <active_led_on>
		charge_led_on();
 800a7ac:	f000 f8fa 	bl	800a9a4 <charge_led_on>
		hot_led_on();
 800a7b0:	f000 f928 	bl	800aa04 <hot_led_on>
		balance_led_on();
 800a7b4:	f000 f90e 	bl	800a9d4 <balance_led_on>
		wait(1000);
 800a7b8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800a7bc:	f000 f822 	bl	800a804 <wait>
		active_led_off();
 800a7c0:	bf00      	nop
 800a7c2:	e7e5      	b.n	800a790 <blink+0x4>

0800a7c4 <pull_low>:
	}
}


void pull_low(GPIO_TypeDef *port, uint16_t pin)
{
 800a7c4:	b580      	push	{r7, lr}
 800a7c6:	b082      	sub	sp, #8
 800a7c8:	af00      	add	r7, sp, #0
 800a7ca:	6078      	str	r0, [r7, #4]
 800a7cc:	460b      	mov	r3, r1
 800a7ce:	807b      	strh	r3, [r7, #2]
	HAL_GPIO_WritePin(port, pin, GPIO_PIN_RESET);
 800a7d0:	887b      	ldrh	r3, [r7, #2]
 800a7d2:	2200      	movs	r2, #0
 800a7d4:	4619      	mov	r1, r3
 800a7d6:	6878      	ldr	r0, [r7, #4]
 800a7d8:	f003 f8b8 	bl	800d94c <HAL_GPIO_WritePin>
}
 800a7dc:	bf00      	nop
 800a7de:	3708      	adds	r7, #8
 800a7e0:	46bd      	mov	sp, r7
 800a7e2:	bd80      	pop	{r7, pc}

0800a7e4 <pull_high>:


void pull_high(GPIO_TypeDef *port, uint16_t pin)
{
 800a7e4:	b580      	push	{r7, lr}
 800a7e6:	b082      	sub	sp, #8
 800a7e8:	af00      	add	r7, sp, #0
 800a7ea:	6078      	str	r0, [r7, #4]
 800a7ec:	460b      	mov	r3, r1
 800a7ee:	807b      	strh	r3, [r7, #2]
	HAL_GPIO_WritePin(port, pin, GPIO_PIN_SET);
 800a7f0:	887b      	ldrh	r3, [r7, #2]
 800a7f2:	2201      	movs	r2, #1
 800a7f4:	4619      	mov	r1, r3
 800a7f6:	6878      	ldr	r0, [r7, #4]
 800a7f8:	f003 f8a8 	bl	800d94c <HAL_GPIO_WritePin>
}
 800a7fc:	bf00      	nop
 800a7fe:	3708      	adds	r7, #8
 800a800:	46bd      	mov	sp, r7
 800a802:	bd80      	pop	{r7, pc}

0800a804 <wait>:


void wait(uint32_t msDelay)
{
 800a804:	b580      	push	{r7, lr}
 800a806:	b082      	sub	sp, #8
 800a808:	af00      	add	r7, sp, #0
 800a80a:	6078      	str	r0, [r7, #4]
	HAL_Delay(msDelay);
 800a80c:	6878      	ldr	r0, [r7, #4]
 800a80e:	f001 fb07 	bl	800be20 <HAL_Delay>
}
 800a812:	bf00      	nop
 800a814:	3708      	adds	r7, #8
 800a816:	46bd      	mov	sp, r7
 800a818:	bd80      	pop	{r7, pc}
	...

0800a81c <start_timer>:
	else { return 1; }
}


void start_timer(TIM_HandleTypeDef *htim)
{
 800a81c:	b580      	push	{r7, lr}
 800a81e:	b084      	sub	sp, #16
 800a820:	af00      	add	r7, sp, #0
 800a822:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef status;										// status indicates whether the reception was successful or not
	uint8_t attempts = 0;											// 5 attempts
 800a824:	2300      	movs	r3, #0
 800a826:	73fb      	strb	r3, [r7, #15]

	while(attempts < 5) {
 800a828:	e010      	b.n	800a84c <start_timer+0x30>
		status = HAL_TIM_Base_Start_IT(htim);
 800a82a:	6878      	ldr	r0, [r7, #4]
 800a82c:	f004 fafc 	bl	800ee28 <HAL_TIM_Base_Start_IT>
 800a830:	4603      	mov	r3, r0
 800a832:	73bb      	strb	r3, [r7, #14]

		if(status == HAL_OK) { attempts = 10; }
 800a834:	7bbb      	ldrb	r3, [r7, #14]
 800a836:	2b00      	cmp	r3, #0
 800a838:	d102      	bne.n	800a840 <start_timer+0x24>
 800a83a:	230a      	movs	r3, #10
 800a83c:	73fb      	strb	r3, [r7, #15]
 800a83e:	e005      	b.n	800a84c <start_timer+0x30>

		else {
			attempts++;
 800a840:	7bfb      	ldrb	r3, [r7, #15]
 800a842:	3301      	adds	r3, #1
 800a844:	73fb      	strb	r3, [r7, #15]
			wait(1);
 800a846:	2001      	movs	r0, #1
 800a848:	f7ff ffdc 	bl	800a804 <wait>
	while(attempts < 5) {
 800a84c:	7bfb      	ldrb	r3, [r7, #15]
 800a84e:	2b04      	cmp	r3, #4
 800a850:	d9eb      	bls.n	800a82a <start_timer+0xe>
		}
	}
	if(attempts != 10) {
 800a852:	7bfb      	ldrb	r3, [r7, #15]
 800a854:	2b0a      	cmp	r3, #10
 800a856:	d02d      	beq.n	800a8b4 <start_timer+0x98>
		// STM ERROR (INTERNAL)
		while(1) {
			  pull_high(GPIOA, GPIO_PIN_8);
 800a858:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800a85c:	4817      	ldr	r0, [pc, #92]	@ (800a8bc <start_timer+0xa0>)
 800a85e:	f7ff ffc1 	bl	800a7e4 <pull_high>
			  pull_high(GPIOC, GPIO_PIN_9);
 800a862:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800a866:	4816      	ldr	r0, [pc, #88]	@ (800a8c0 <start_timer+0xa4>)
 800a868:	f7ff ffbc 	bl	800a7e4 <pull_high>
			  pull_high(GPIOC, GPIO_PIN_8);
 800a86c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800a870:	4813      	ldr	r0, [pc, #76]	@ (800a8c0 <start_timer+0xa4>)
 800a872:	f7ff ffb7 	bl	800a7e4 <pull_high>
			  pull_high(GPIOC, GPIO_PIN_7);
 800a876:	2180      	movs	r1, #128	@ 0x80
 800a878:	4811      	ldr	r0, [pc, #68]	@ (800a8c0 <start_timer+0xa4>)
 800a87a:	f7ff ffb3 	bl	800a7e4 <pull_high>
			  wait(250);
 800a87e:	20fa      	movs	r0, #250	@ 0xfa
 800a880:	f7ff ffc0 	bl	800a804 <wait>
			  pull_low(GPIOA, GPIO_PIN_8);
 800a884:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800a888:	480c      	ldr	r0, [pc, #48]	@ (800a8bc <start_timer+0xa0>)
 800a88a:	f7ff ff9b 	bl	800a7c4 <pull_low>
			  pull_low(GPIOC, GPIO_PIN_9);
 800a88e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800a892:	480b      	ldr	r0, [pc, #44]	@ (800a8c0 <start_timer+0xa4>)
 800a894:	f7ff ff96 	bl	800a7c4 <pull_low>
			  pull_low(GPIOC, GPIO_PIN_8);
 800a898:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800a89c:	4808      	ldr	r0, [pc, #32]	@ (800a8c0 <start_timer+0xa4>)
 800a89e:	f7ff ff91 	bl	800a7c4 <pull_low>
			  pull_low(GPIOC, GPIO_PIN_7);
 800a8a2:	2180      	movs	r1, #128	@ 0x80
 800a8a4:	4806      	ldr	r0, [pc, #24]	@ (800a8c0 <start_timer+0xa4>)
 800a8a6:	f7ff ff8d 	bl	800a7c4 <pull_low>
			  wait(250);
 800a8aa:	20fa      	movs	r0, #250	@ 0xfa
 800a8ac:	f7ff ffaa 	bl	800a804 <wait>
			  pull_high(GPIOA, GPIO_PIN_8);
 800a8b0:	bf00      	nop
 800a8b2:	e7d1      	b.n	800a858 <start_timer+0x3c>
		}
	}
}
 800a8b4:	bf00      	nop
 800a8b6:	3710      	adds	r7, #16
 800a8b8:	46bd      	mov	sp, r7
 800a8ba:	bd80      	pop	{r7, pc}
 800a8bc:	40020000 	.word	0x40020000
 800a8c0:	40020800 	.word	0x40020800

0800a8c4 <stop_timer>:


void stop_timer(TIM_HandleTypeDef *htim)
{
 800a8c4:	b580      	push	{r7, lr}
 800a8c6:	b084      	sub	sp, #16
 800a8c8:	af00      	add	r7, sp, #0
 800a8ca:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef status;										// status indicates whether the reception was successful or not
	uint8_t attempts = 0;											// 5 attempts
 800a8cc:	2300      	movs	r3, #0
 800a8ce:	73fb      	strb	r3, [r7, #15]

	while(attempts < 5) {
 800a8d0:	e010      	b.n	800a8f4 <stop_timer+0x30>
		status = HAL_TIM_Base_Stop_IT(htim);
 800a8d2:	6878      	ldr	r0, [r7, #4]
 800a8d4:	f004 fb18 	bl	800ef08 <HAL_TIM_Base_Stop_IT>
 800a8d8:	4603      	mov	r3, r0
 800a8da:	73bb      	strb	r3, [r7, #14]

		if(status == HAL_OK) { attempts = 10; }
 800a8dc:	7bbb      	ldrb	r3, [r7, #14]
 800a8de:	2b00      	cmp	r3, #0
 800a8e0:	d102      	bne.n	800a8e8 <stop_timer+0x24>
 800a8e2:	230a      	movs	r3, #10
 800a8e4:	73fb      	strb	r3, [r7, #15]
 800a8e6:	e005      	b.n	800a8f4 <stop_timer+0x30>

		else {
			attempts++;
 800a8e8:	7bfb      	ldrb	r3, [r7, #15]
 800a8ea:	3301      	adds	r3, #1
 800a8ec:	73fb      	strb	r3, [r7, #15]
			wait(1);
 800a8ee:	2001      	movs	r0, #1
 800a8f0:	f7ff ff88 	bl	800a804 <wait>
	while(attempts < 5) {
 800a8f4:	7bfb      	ldrb	r3, [r7, #15]
 800a8f6:	2b04      	cmp	r3, #4
 800a8f8:	d9eb      	bls.n	800a8d2 <stop_timer+0xe>
		}
	}
	if(attempts == 10) {
 800a8fa:	7bfb      	ldrb	r3, [r7, #15]
 800a8fc:	2b0a      	cmp	r3, #10
 800a8fe:	d104      	bne.n	800a90a <stop_timer+0x46>
		__HAL_TIM_SET_COUNTER(htim, 0);
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	681b      	ldr	r3, [r3, #0]
 800a904:	2200      	movs	r2, #0
 800a906:	625a      	str	r2, [r3, #36]	@ 0x24
			  pull_low(GPIOC, GPIO_PIN_8);
			  pull_low(GPIOC, GPIO_PIN_7);
			  wait(250);
		}
	}
}
 800a908:	e02c      	b.n	800a964 <stop_timer+0xa0>
			  pull_high(GPIOA, GPIO_PIN_8);
 800a90a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800a90e:	4817      	ldr	r0, [pc, #92]	@ (800a96c <stop_timer+0xa8>)
 800a910:	f7ff ff68 	bl	800a7e4 <pull_high>
			  pull_high(GPIOC, GPIO_PIN_9);
 800a914:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800a918:	4815      	ldr	r0, [pc, #84]	@ (800a970 <stop_timer+0xac>)
 800a91a:	f7ff ff63 	bl	800a7e4 <pull_high>
			  pull_high(GPIOC, GPIO_PIN_8);
 800a91e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800a922:	4813      	ldr	r0, [pc, #76]	@ (800a970 <stop_timer+0xac>)
 800a924:	f7ff ff5e 	bl	800a7e4 <pull_high>
			  pull_high(GPIOC, GPIO_PIN_7);
 800a928:	2180      	movs	r1, #128	@ 0x80
 800a92a:	4811      	ldr	r0, [pc, #68]	@ (800a970 <stop_timer+0xac>)
 800a92c:	f7ff ff5a 	bl	800a7e4 <pull_high>
			  wait(250);
 800a930:	20fa      	movs	r0, #250	@ 0xfa
 800a932:	f7ff ff67 	bl	800a804 <wait>
			  pull_low(GPIOA, GPIO_PIN_8);
 800a936:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800a93a:	480c      	ldr	r0, [pc, #48]	@ (800a96c <stop_timer+0xa8>)
 800a93c:	f7ff ff42 	bl	800a7c4 <pull_low>
			  pull_low(GPIOC, GPIO_PIN_9);
 800a940:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800a944:	480a      	ldr	r0, [pc, #40]	@ (800a970 <stop_timer+0xac>)
 800a946:	f7ff ff3d 	bl	800a7c4 <pull_low>
			  pull_low(GPIOC, GPIO_PIN_8);
 800a94a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800a94e:	4808      	ldr	r0, [pc, #32]	@ (800a970 <stop_timer+0xac>)
 800a950:	f7ff ff38 	bl	800a7c4 <pull_low>
			  pull_low(GPIOC, GPIO_PIN_7);
 800a954:	2180      	movs	r1, #128	@ 0x80
 800a956:	4806      	ldr	r0, [pc, #24]	@ (800a970 <stop_timer+0xac>)
 800a958:	f7ff ff34 	bl	800a7c4 <pull_low>
			  wait(250);
 800a95c:	20fa      	movs	r0, #250	@ 0xfa
 800a95e:	f7ff ff51 	bl	800a804 <wait>
			  pull_high(GPIOA, GPIO_PIN_8);
 800a962:	e7d2      	b.n	800a90a <stop_timer+0x46>
}
 800a964:	3710      	adds	r7, #16
 800a966:	46bd      	mov	sp, r7
 800a968:	bd80      	pop	{r7, pc}
 800a96a:	bf00      	nop
 800a96c:	40020000 	.word	0x40020000
 800a970:	40020800 	.word	0x40020800

0800a974 <active_led_on>:


void active_led_on(void)
{
 800a974:	b580      	push	{r7, lr}
 800a976:	af00      	add	r7, sp, #0
	pull_high(GPIOA, GPIO_PIN_8);
 800a978:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800a97c:	4802      	ldr	r0, [pc, #8]	@ (800a988 <active_led_on+0x14>)
 800a97e:	f7ff ff31 	bl	800a7e4 <pull_high>
}
 800a982:	bf00      	nop
 800a984:	bd80      	pop	{r7, pc}
 800a986:	bf00      	nop
 800a988:	40020000 	.word	0x40020000

0800a98c <active_led_off>:


void active_led_off(void)
{
 800a98c:	b580      	push	{r7, lr}
 800a98e:	af00      	add	r7, sp, #0
	pull_low(GPIOA, GPIO_PIN_8);
 800a990:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800a994:	4802      	ldr	r0, [pc, #8]	@ (800a9a0 <active_led_off+0x14>)
 800a996:	f7ff ff15 	bl	800a7c4 <pull_low>
}
 800a99a:	bf00      	nop
 800a99c:	bd80      	pop	{r7, pc}
 800a99e:	bf00      	nop
 800a9a0:	40020000 	.word	0x40020000

0800a9a4 <charge_led_on>:


void charge_led_on(void)
{
 800a9a4:	b580      	push	{r7, lr}
 800a9a6:	af00      	add	r7, sp, #0
	pull_high(GPIOC, GPIO_PIN_9);
 800a9a8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800a9ac:	4802      	ldr	r0, [pc, #8]	@ (800a9b8 <charge_led_on+0x14>)
 800a9ae:	f7ff ff19 	bl	800a7e4 <pull_high>
}
 800a9b2:	bf00      	nop
 800a9b4:	bd80      	pop	{r7, pc}
 800a9b6:	bf00      	nop
 800a9b8:	40020800 	.word	0x40020800

0800a9bc <charge_led_off>:


void charge_led_off(void)
{
 800a9bc:	b580      	push	{r7, lr}
 800a9be:	af00      	add	r7, sp, #0
	pull_low(GPIOC, GPIO_PIN_9);
 800a9c0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800a9c4:	4802      	ldr	r0, [pc, #8]	@ (800a9d0 <charge_led_off+0x14>)
 800a9c6:	f7ff fefd 	bl	800a7c4 <pull_low>
}
 800a9ca:	bf00      	nop
 800a9cc:	bd80      	pop	{r7, pc}
 800a9ce:	bf00      	nop
 800a9d0:	40020800 	.word	0x40020800

0800a9d4 <balance_led_on>:


void balance_led_on(void)
{
 800a9d4:	b580      	push	{r7, lr}
 800a9d6:	af00      	add	r7, sp, #0
	pull_high(GPIOC, GPIO_PIN_8);
 800a9d8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800a9dc:	4802      	ldr	r0, [pc, #8]	@ (800a9e8 <balance_led_on+0x14>)
 800a9de:	f7ff ff01 	bl	800a7e4 <pull_high>
}
 800a9e2:	bf00      	nop
 800a9e4:	bd80      	pop	{r7, pc}
 800a9e6:	bf00      	nop
 800a9e8:	40020800 	.word	0x40020800

0800a9ec <balance_led_off>:


void balance_led_off(void)
{
 800a9ec:	b580      	push	{r7, lr}
 800a9ee:	af00      	add	r7, sp, #0
	pull_low(GPIOC, GPIO_PIN_8);
 800a9f0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800a9f4:	4802      	ldr	r0, [pc, #8]	@ (800aa00 <balance_led_off+0x14>)
 800a9f6:	f7ff fee5 	bl	800a7c4 <pull_low>
}
 800a9fa:	bf00      	nop
 800a9fc:	bd80      	pop	{r7, pc}
 800a9fe:	bf00      	nop
 800aa00:	40020800 	.word	0x40020800

0800aa04 <hot_led_on>:


void hot_led_on(void)
{
 800aa04:	b580      	push	{r7, lr}
 800aa06:	af00      	add	r7, sp, #0
	pull_high(GPIOC, GPIO_PIN_7);
 800aa08:	2180      	movs	r1, #128	@ 0x80
 800aa0a:	4802      	ldr	r0, [pc, #8]	@ (800aa14 <hot_led_on+0x10>)
 800aa0c:	f7ff feea 	bl	800a7e4 <pull_high>
}
 800aa10:	bf00      	nop
 800aa12:	bd80      	pop	{r7, pc}
 800aa14:	40020800 	.word	0x40020800

0800aa18 <hot_led_off>:


void hot_led_off(void)
{
 800aa18:	b580      	push	{r7, lr}
 800aa1a:	af00      	add	r7, sp, #0
	pull_low(GPIOC, GPIO_PIN_7);
 800aa1c:	2180      	movs	r1, #128	@ 0x80
 800aa1e:	4802      	ldr	r0, [pc, #8]	@ (800aa28 <hot_led_off+0x10>)
 800aa20:	f7ff fed0 	bl	800a7c4 <pull_low>
}
 800aa24:	bf00      	nop
 800aa26:	bd80      	pop	{r7, pc}
 800aa28:	40020800 	.word	0x40020800
 800aa2c:	00000000 	.word	0x00000000

0800aa30 <compute_resistance>:
#include "torch_stm32.h"
#include <math.h>


void compute_resistance(float *thermistorVoltage_ptr)
{
 800aa30:	b5b0      	push	{r4, r5, r7, lr}
 800aa32:	b09a      	sub	sp, #104	@ 0x68
 800aa34:	af00      	add	r7, sp, #0
 800aa36:	6078      	str	r0, [r7, #4]
	float thermistorResistance[MODULE_THERM_QTY];
	uint16_t Rpu = 10000;			// Thermistor pull up resistor
 800aa38:	f242 7310 	movw	r3, #10000	@ 0x2710
 800aa3c:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
	float Rmw = 0;					// Trace resistance on module board
 800aa40:	f04f 0300 	mov.w	r3, #0
 800aa44:	663b      	str	r3, [r7, #96]	@ 0x60
	float Rmc = 0.03;				// Module board connector resistance
 800aa46:	4b3e      	ldr	r3, [pc, #248]	@ (800ab40 <compute_resistance+0x110>)
 800aa48:	65fb      	str	r3, [r7, #92]	@ 0x5c
	float Rec = 0.03;				// Embedded board connector resistance
 800aa4a:	4b3d      	ldr	r3, [pc, #244]	@ (800ab40 <compute_resistance+0x110>)
 800aa4c:	65bb      	str	r3, [r7, #88]	@ 0x58
	float Rew = 0;					// Trace resistance on embedded board
 800aa4e:	f04f 0300 	mov.w	r3, #0
 800aa52:	657b      	str	r3, [r7, #84]	@ 0x54
	float Req = Rpu + Rmc + Rec;	// Equivalent resistance
 800aa54:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 800aa58:	ee07 3a90 	vmov	s15, r3
 800aa5c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800aa60:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 800aa64:	ee77 7a27 	vadd.f32	s15, s14, s15
 800aa68:	ed97 7a16 	vldr	s14, [r7, #88]	@ 0x58
 800aa6c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800aa70:	edc7 7a14 	vstr	s15, [r7, #80]	@ 0x50

	for(uint8_t i = 0; i < 18; i++) { thermistorResistance[i] = (*(thermistorVoltage_ptr + i)*Req)/(3.3 - *(thermistorVoltage_ptr + i)); }
 800aa74:	2300      	movs	r3, #0
 800aa76:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800aa7a:	e039      	b.n	800aaf0 <compute_resistance+0xc0>
 800aa7c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800aa80:	009b      	lsls	r3, r3, #2
 800aa82:	687a      	ldr	r2, [r7, #4]
 800aa84:	4413      	add	r3, r2
 800aa86:	ed93 7a00 	vldr	s14, [r3]
 800aa8a:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 800aa8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aa92:	ee17 0a90 	vmov	r0, s15
 800aa96:	f7f5 fd1b 	bl	80004d0 <__aeabi_f2d>
 800aa9a:	4604      	mov	r4, r0
 800aa9c:	460d      	mov	r5, r1
 800aa9e:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800aaa2:	009b      	lsls	r3, r3, #2
 800aaa4:	687a      	ldr	r2, [r7, #4]
 800aaa6:	4413      	add	r3, r2
 800aaa8:	681b      	ldr	r3, [r3, #0]
 800aaaa:	4618      	mov	r0, r3
 800aaac:	f7f5 fd10 	bl	80004d0 <__aeabi_f2d>
 800aab0:	4602      	mov	r2, r0
 800aab2:	460b      	mov	r3, r1
 800aab4:	a120      	add	r1, pc, #128	@ (adr r1, 800ab38 <compute_resistance+0x108>)
 800aab6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800aaba:	f7f5 fba9 	bl	8000210 <__aeabi_dsub>
 800aabe:	4602      	mov	r2, r0
 800aac0:	460b      	mov	r3, r1
 800aac2:	4620      	mov	r0, r4
 800aac4:	4629      	mov	r1, r5
 800aac6:	f7f5 fe85 	bl	80007d4 <__aeabi_ddiv>
 800aaca:	4602      	mov	r2, r0
 800aacc:	460b      	mov	r3, r1
 800aace:	f897 4067 	ldrb.w	r4, [r7, #103]	@ 0x67
 800aad2:	4610      	mov	r0, r2
 800aad4:	4619      	mov	r1, r3
 800aad6:	f7f5 ff65 	bl	80009a4 <__aeabi_d2f>
 800aada:	4602      	mov	r2, r0
 800aadc:	00a3      	lsls	r3, r4, #2
 800aade:	3368      	adds	r3, #104	@ 0x68
 800aae0:	443b      	add	r3, r7
 800aae2:	3b60      	subs	r3, #96	@ 0x60
 800aae4:	601a      	str	r2, [r3, #0]
 800aae6:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800aaea:	3301      	adds	r3, #1
 800aaec:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800aaf0:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800aaf4:	2b11      	cmp	r3, #17
 800aaf6:	d9c1      	bls.n	800aa7c <compute_resistance+0x4c>

	for(uint8_t i = 0; i < 18; i++) { *(thermistorVoltage_ptr + i) = thermistorResistance[i]; }
 800aaf8:	2300      	movs	r3, #0
 800aafa:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
 800aafe:	e011      	b.n	800ab24 <compute_resistance+0xf4>
 800ab00:	f897 2066 	ldrb.w	r2, [r7, #102]	@ 0x66
 800ab04:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 800ab08:	009b      	lsls	r3, r3, #2
 800ab0a:	6879      	ldr	r1, [r7, #4]
 800ab0c:	440b      	add	r3, r1
 800ab0e:	0092      	lsls	r2, r2, #2
 800ab10:	3268      	adds	r2, #104	@ 0x68
 800ab12:	443a      	add	r2, r7
 800ab14:	3a60      	subs	r2, #96	@ 0x60
 800ab16:	6812      	ldr	r2, [r2, #0]
 800ab18:	601a      	str	r2, [r3, #0]
 800ab1a:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 800ab1e:	3301      	adds	r3, #1
 800ab20:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
 800ab24:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 800ab28:	2b11      	cmp	r3, #17
 800ab2a:	d9e9      	bls.n	800ab00 <compute_resistance+0xd0>
}
 800ab2c:	bf00      	nop
 800ab2e:	bf00      	nop
 800ab30:	3768      	adds	r7, #104	@ 0x68
 800ab32:	46bd      	mov	sp, r7
 800ab34:	bdb0      	pop	{r4, r5, r7, pc}
 800ab36:	bf00      	nop
 800ab38:	66666666 	.word	0x66666666
 800ab3c:	400a6666 	.word	0x400a6666
 800ab40:	3cf5c28f 	.word	0x3cf5c28f
 800ab44:	00000000 	.word	0x00000000

0800ab48 <compute_temperature>:


void compute_temperature(float *thermistorResistance_ptr)
{
 800ab48:	b590      	push	{r4, r7, lr}
 800ab4a:	ed2d 8b02 	vpush	{d8}
 800ab4e:	b09b      	sub	sp, #108	@ 0x6c
 800ab50:	af00      	add	r7, sp, #0
 800ab52:	6078      	str	r0, [r7, #4]
	float temperature[MODULE_THERM_QTY];
	float A = 0.003354016;
 800ab54:	4b5e      	ldr	r3, [pc, #376]	@ (800acd0 <compute_temperature+0x188>)
 800ab56:	663b      	str	r3, [r7, #96]	@ 0x60
	float B = 0.000256985;
 800ab58:	4b5e      	ldr	r3, [pc, #376]	@ (800acd4 <compute_temperature+0x18c>)
 800ab5a:	65fb      	str	r3, [r7, #92]	@ 0x5c
	float C = 0.000002620131;
 800ab5c:	4b5e      	ldr	r3, [pc, #376]	@ (800acd8 <compute_temperature+0x190>)
 800ab5e:	65bb      	str	r3, [r7, #88]	@ 0x58
	float D = 0.00000006383091;
 800ab60:	4b5e      	ldr	r3, [pc, #376]	@ (800acdc <compute_temperature+0x194>)
 800ab62:	657b      	str	r3, [r7, #84]	@ 0x54
	uint16_t R25 = 10000;
 800ab64:	f242 7310 	movw	r3, #10000	@ 0x2710
 800ab68:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52


	for(uint8_t i = 0; i < 18; i++) {
 800ab6c:	2300      	movs	r3, #0
 800ab6e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800ab72:	e082      	b.n	800ac7a <compute_temperature+0x132>
		temperature[i] = (1/(A +
							 B*logf(*(thermistorResistance_ptr + i)/R25) +
 800ab74:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800ab78:	009b      	lsls	r3, r3, #2
 800ab7a:	687a      	ldr	r2, [r7, #4]
 800ab7c:	4413      	add	r3, r2
 800ab7e:	ed93 7a00 	vldr	s14, [r3]
 800ab82:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 800ab86:	ee07 3a90 	vmov	s15, r3
 800ab8a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ab8e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800ab92:	eeb0 0a66 	vmov.f32	s0, s13
 800ab96:	f004 fdcd 	bl	800f734 <logf>
 800ab9a:	eeb0 7a40 	vmov.f32	s14, s0
 800ab9e:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 800aba2:	ee27 7a27 	vmul.f32	s14, s14, s15
		temperature[i] = (1/(A +
 800aba6:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 800abaa:	ee37 8a27 	vadd.f32	s16, s14, s15
							 C*powf(logf(*(thermistorResistance_ptr + i)/R25), 2) +
 800abae:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800abb2:	009b      	lsls	r3, r3, #2
 800abb4:	687a      	ldr	r2, [r7, #4]
 800abb6:	4413      	add	r3, r2
 800abb8:	ed93 7a00 	vldr	s14, [r3]
 800abbc:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 800abc0:	ee07 3a90 	vmov	s15, r3
 800abc4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800abc8:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800abcc:	eeb0 0a66 	vmov.f32	s0, s13
 800abd0:	f004 fdb0 	bl	800f734 <logf>
 800abd4:	eef0 7a40 	vmov.f32	s15, s0
 800abd8:	eef0 0a00 	vmov.f32	s1, #0	@ 0x40000000  2.0
 800abdc:	eeb0 0a67 	vmov.f32	s0, s15
 800abe0:	f004 fdd6 	bl	800f790 <powf>
 800abe4:	eeb0 7a40 	vmov.f32	s14, s0
 800abe8:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 800abec:	ee67 7a27 	vmul.f32	s15, s14, s15
							 B*logf(*(thermistorResistance_ptr + i)/R25) +
 800abf0:	ee38 8a27 	vadd.f32	s16, s16, s15
							 D*powf(logf(*(thermistorResistance_ptr + i)/R25), 3))) - 273.15;
 800abf4:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800abf8:	009b      	lsls	r3, r3, #2
 800abfa:	687a      	ldr	r2, [r7, #4]
 800abfc:	4413      	add	r3, r2
 800abfe:	ed93 7a00 	vldr	s14, [r3]
 800ac02:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 800ac06:	ee07 3a90 	vmov	s15, r3
 800ac0a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ac0e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800ac12:	eeb0 0a66 	vmov.f32	s0, s13
 800ac16:	f004 fd8d 	bl	800f734 <logf>
 800ac1a:	eef0 7a40 	vmov.f32	s15, s0
 800ac1e:	eef0 0a08 	vmov.f32	s1, #8	@ 0x40400000  3.0
 800ac22:	eeb0 0a67 	vmov.f32	s0, s15
 800ac26:	f004 fdb3 	bl	800f790 <powf>
 800ac2a:	eeb0 7a40 	vmov.f32	s14, s0
 800ac2e:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 800ac32:	ee67 7a27 	vmul.f32	s15, s14, s15
							 C*powf(logf(*(thermistorResistance_ptr + i)/R25), 2) +
 800ac36:	ee78 7a27 	vadd.f32	s15, s16, s15
		temperature[i] = (1/(A +
 800ac3a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800ac3e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800ac42:	ee16 0a90 	vmov	r0, s13
 800ac46:	f7f5 fc43 	bl	80004d0 <__aeabi_f2d>
							 D*powf(logf(*(thermistorResistance_ptr + i)/R25), 3))) - 273.15;
 800ac4a:	a31f      	add	r3, pc, #124	@ (adr r3, 800acc8 <compute_temperature+0x180>)
 800ac4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac50:	f7f5 fade 	bl	8000210 <__aeabi_dsub>
 800ac54:	4602      	mov	r2, r0
 800ac56:	460b      	mov	r3, r1
		temperature[i] = (1/(A +
 800ac58:	f897 4067 	ldrb.w	r4, [r7, #103]	@ 0x67
							 D*powf(logf(*(thermistorResistance_ptr + i)/R25), 3))) - 273.15;
 800ac5c:	4610      	mov	r0, r2
 800ac5e:	4619      	mov	r1, r3
 800ac60:	f7f5 fea0 	bl	80009a4 <__aeabi_d2f>
 800ac64:	4602      	mov	r2, r0
		temperature[i] = (1/(A +
 800ac66:	00a3      	lsls	r3, r4, #2
 800ac68:	3368      	adds	r3, #104	@ 0x68
 800ac6a:	443b      	add	r3, r7
 800ac6c:	3b60      	subs	r3, #96	@ 0x60
 800ac6e:	601a      	str	r2, [r3, #0]
	for(uint8_t i = 0; i < 18; i++) {
 800ac70:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800ac74:	3301      	adds	r3, #1
 800ac76:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800ac7a:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800ac7e:	2b11      	cmp	r3, #17
 800ac80:	f67f af78 	bls.w	800ab74 <compute_temperature+0x2c>
	}

	for(uint8_t i = 0; i < 18; i++) { *(thermistorResistance_ptr + i) = temperature[i]; }
 800ac84:	2300      	movs	r3, #0
 800ac86:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
 800ac8a:	e011      	b.n	800acb0 <compute_temperature+0x168>
 800ac8c:	f897 2066 	ldrb.w	r2, [r7, #102]	@ 0x66
 800ac90:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 800ac94:	009b      	lsls	r3, r3, #2
 800ac96:	6879      	ldr	r1, [r7, #4]
 800ac98:	440b      	add	r3, r1
 800ac9a:	0092      	lsls	r2, r2, #2
 800ac9c:	3268      	adds	r2, #104	@ 0x68
 800ac9e:	443a      	add	r2, r7
 800aca0:	3a60      	subs	r2, #96	@ 0x60
 800aca2:	6812      	ldr	r2, [r2, #0]
 800aca4:	601a      	str	r2, [r3, #0]
 800aca6:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 800acaa:	3301      	adds	r3, #1
 800acac:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
 800acb0:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 800acb4:	2b11      	cmp	r3, #17
 800acb6:	d9e9      	bls.n	800ac8c <compute_temperature+0x144>
}
 800acb8:	bf00      	nop
 800acba:	bf00      	nop
 800acbc:	376c      	adds	r7, #108	@ 0x6c
 800acbe:	46bd      	mov	sp, r7
 800acc0:	ecbd 8b02 	vpop	{d8}
 800acc4:	bd90      	pop	{r4, r7, pc}
 800acc6:	bf00      	nop
 800acc8:	66666666 	.word	0x66666666
 800accc:	40711266 	.word	0x40711266
 800acd0:	3b5bcf0d 	.word	0x3b5bcf0d
 800acd4:	3986bbf1 	.word	0x3986bbf1
 800acd8:	362fd582 	.word	0x362fd582
 800acdc:	3389136a 	.word	0x3389136a

0800ace0 <temperature_sense>:


void temperature_sense(float *temperature_ptr)
{
 800ace0:	b580      	push	{r7, lr}
 800ace2:	b096      	sub	sp, #88	@ 0x58
 800ace4:	af00      	add	r7, sp, #0
 800ace6:	6078      	str	r0, [r7, #4]
	float thermistorArray[MODULE_THERM_QTY];

	read_thermistors(thermistorArray);
 800ace8:	f107 030c 	add.w	r3, r7, #12
 800acec:	4618      	mov	r0, r3
 800acee:	f000 f913 	bl	800af18 <read_thermistors>

	compute_resistance(thermistorArray);
 800acf2:	f107 030c 	add.w	r3, r7, #12
 800acf6:	4618      	mov	r0, r3
 800acf8:	f7ff fe9a 	bl	800aa30 <compute_resistance>

	compute_temperature(thermistorArray);
 800acfc:	f107 030c 	add.w	r3, r7, #12
 800ad00:	4618      	mov	r0, r3
 800ad02:	f7ff ff21 	bl	800ab48 <compute_temperature>

	for(uint8_t i = 0; i < 18; i++) { *(temperature_ptr + i) = thermistorArray[i]; }
 800ad06:	2300      	movs	r3, #0
 800ad08:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
 800ad0c:	e011      	b.n	800ad32 <temperature_sense+0x52>
 800ad0e:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 800ad12:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800ad16:	009b      	lsls	r3, r3, #2
 800ad18:	6879      	ldr	r1, [r7, #4]
 800ad1a:	440b      	add	r3, r1
 800ad1c:	0092      	lsls	r2, r2, #2
 800ad1e:	3258      	adds	r2, #88	@ 0x58
 800ad20:	443a      	add	r2, r7
 800ad22:	3a4c      	subs	r2, #76	@ 0x4c
 800ad24:	6812      	ldr	r2, [r2, #0]
 800ad26:	601a      	str	r2, [r3, #0]
 800ad28:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800ad2c:	3301      	adds	r3, #1
 800ad2e:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
 800ad32:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800ad36:	2b11      	cmp	r3, #17
 800ad38:	d9e9      	bls.n	800ad0e <temperature_sense+0x2e>
}
 800ad3a:	bf00      	nop
 800ad3c:	bf00      	nop
 800ad3e:	3758      	adds	r7, #88	@ 0x58
 800ad40:	46bd      	mov	sp, r7
 800ad42:	bd80      	pop	{r7, pc}
 800ad44:	0000      	movs	r0, r0
	...

0800ad48 <board_temperature_sense>:


void board_temperature_sense(float *boardThermistorVoltages, float VREF2, float *boardTemperatures)
{
 800ad48:	b590      	push	{r4, r7, lr}
 800ad4a:	ed2d 8b02 	vpush	{d8}
 800ad4e:	b095      	sub	sp, #84	@ 0x54
 800ad50:	af00      	add	r7, sp, #0
 800ad52:	60f8      	str	r0, [r7, #12]
 800ad54:	ed87 0a02 	vstr	s0, [r7, #8]
 800ad58:	6079      	str	r1, [r7, #4]
	float thermistorResistance[9];
	uint16_t Rpu = 10000;
 800ad5a:	f242 7310 	movw	r3, #10000	@ 0x2710
 800ad5e:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c

	float A = 0.003354016;
 800ad62:	4b69      	ldr	r3, [pc, #420]	@ (800af08 <board_temperature_sense+0x1c0>)
 800ad64:	64bb      	str	r3, [r7, #72]	@ 0x48
	float B = 0.000256985;
 800ad66:	4b69      	ldr	r3, [pc, #420]	@ (800af0c <board_temperature_sense+0x1c4>)
 800ad68:	647b      	str	r3, [r7, #68]	@ 0x44
	float C = 0.000002620131;
 800ad6a:	4b69      	ldr	r3, [pc, #420]	@ (800af10 <board_temperature_sense+0x1c8>)
 800ad6c:	643b      	str	r3, [r7, #64]	@ 0x40
	float D = 0.00000006383091;
 800ad6e:	4b69      	ldr	r3, [pc, #420]	@ (800af14 <board_temperature_sense+0x1cc>)
 800ad70:	63fb      	str	r3, [r7, #60]	@ 0x3c
	uint16_t R25 = 10000;
 800ad72:	f242 7310 	movw	r3, #10000	@ 0x2710
 800ad76:	877b      	strh	r3, [r7, #58]	@ 0x3a

	for(uint8_t i = 0; i < 9; i++) {
 800ad78:	2300      	movs	r3, #0
 800ad7a:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 800ad7e:	e028      	b.n	800add2 <board_temperature_sense+0x8a>
		thermistorResistance[i] = (*(boardThermistorVoltages + i)*Rpu)/(VREF2 - *(boardThermistorVoltages + i));
 800ad80:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800ad84:	009b      	lsls	r3, r3, #2
 800ad86:	68fa      	ldr	r2, [r7, #12]
 800ad88:	4413      	add	r3, r2
 800ad8a:	ed93 7a00 	vldr	s14, [r3]
 800ad8e:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 800ad92:	ee07 3a90 	vmov	s15, r3
 800ad96:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ad9a:	ee67 6a27 	vmul.f32	s13, s14, s15
 800ad9e:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800ada2:	009b      	lsls	r3, r3, #2
 800ada4:	68fa      	ldr	r2, [r7, #12]
 800ada6:	4413      	add	r3, r2
 800ada8:	edd3 7a00 	vldr	s15, [r3]
 800adac:	ed97 7a02 	vldr	s14, [r7, #8]
 800adb0:	ee37 7a67 	vsub.f32	s14, s14, s15
 800adb4:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800adb8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800adbc:	009b      	lsls	r3, r3, #2
 800adbe:	3350      	adds	r3, #80	@ 0x50
 800adc0:	443b      	add	r3, r7
 800adc2:	3b3c      	subs	r3, #60	@ 0x3c
 800adc4:	edc3 7a00 	vstr	s15, [r3]
	for(uint8_t i = 0; i < 9; i++) {
 800adc8:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800adcc:	3301      	adds	r3, #1
 800adce:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 800add2:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800add6:	2b08      	cmp	r3, #8
 800add8:	d9d2      	bls.n	800ad80 <board_temperature_sense+0x38>
	}

	for(uint8_t i = 0; i < 9; i++) {
 800adda:	2300      	movs	r3, #0
 800addc:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
 800ade0:	e081      	b.n	800aee6 <board_temperature_sense+0x19e>
		*(boardTemperatures + i) = (1/(A +
									   B*logf(thermistorResistance[i]/R25) +
 800ade2:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 800ade6:	009b      	lsls	r3, r3, #2
 800ade8:	3350      	adds	r3, #80	@ 0x50
 800adea:	443b      	add	r3, r7
 800adec:	3b3c      	subs	r3, #60	@ 0x3c
 800adee:	ed93 7a00 	vldr	s14, [r3]
 800adf2:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800adf4:	ee07 3a90 	vmov	s15, r3
 800adf8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800adfc:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800ae00:	eeb0 0a66 	vmov.f32	s0, s13
 800ae04:	f004 fc96 	bl	800f734 <logf>
 800ae08:	eeb0 7a40 	vmov.f32	s14, s0
 800ae0c:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 800ae10:	ee27 7a27 	vmul.f32	s14, s14, s15
		*(boardTemperatures + i) = (1/(A +
 800ae14:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 800ae18:	ee37 8a27 	vadd.f32	s16, s14, s15
									   C*powf(logf(thermistorResistance[i]/R25), 2) +
 800ae1c:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 800ae20:	009b      	lsls	r3, r3, #2
 800ae22:	3350      	adds	r3, #80	@ 0x50
 800ae24:	443b      	add	r3, r7
 800ae26:	3b3c      	subs	r3, #60	@ 0x3c
 800ae28:	ed93 7a00 	vldr	s14, [r3]
 800ae2c:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800ae2e:	ee07 3a90 	vmov	s15, r3
 800ae32:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ae36:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800ae3a:	eeb0 0a66 	vmov.f32	s0, s13
 800ae3e:	f004 fc79 	bl	800f734 <logf>
 800ae42:	eef0 7a40 	vmov.f32	s15, s0
 800ae46:	eef0 0a00 	vmov.f32	s1, #0	@ 0x40000000  2.0
 800ae4a:	eeb0 0a67 	vmov.f32	s0, s15
 800ae4e:	f004 fc9f 	bl	800f790 <powf>
 800ae52:	eeb0 7a40 	vmov.f32	s14, s0
 800ae56:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 800ae5a:	ee67 7a27 	vmul.f32	s15, s14, s15
									   B*logf(thermistorResistance[i]/R25) +
 800ae5e:	ee38 8a27 	vadd.f32	s16, s16, s15
									   D*powf(logf(thermistorResistance[i]/R25), 3))) - 273.15;
 800ae62:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 800ae66:	009b      	lsls	r3, r3, #2
 800ae68:	3350      	adds	r3, #80	@ 0x50
 800ae6a:	443b      	add	r3, r7
 800ae6c:	3b3c      	subs	r3, #60	@ 0x3c
 800ae6e:	ed93 7a00 	vldr	s14, [r3]
 800ae72:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800ae74:	ee07 3a90 	vmov	s15, r3
 800ae78:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ae7c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800ae80:	eeb0 0a66 	vmov.f32	s0, s13
 800ae84:	f004 fc56 	bl	800f734 <logf>
 800ae88:	eef0 7a40 	vmov.f32	s15, s0
 800ae8c:	eef0 0a08 	vmov.f32	s1, #8	@ 0x40400000  3.0
 800ae90:	eeb0 0a67 	vmov.f32	s0, s15
 800ae94:	f004 fc7c 	bl	800f790 <powf>
 800ae98:	eeb0 7a40 	vmov.f32	s14, s0
 800ae9c:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 800aea0:	ee67 7a27 	vmul.f32	s15, s14, s15
									   C*powf(logf(thermistorResistance[i]/R25), 2) +
 800aea4:	ee78 7a27 	vadd.f32	s15, s16, s15
		*(boardTemperatures + i) = (1/(A +
 800aea8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800aeac:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800aeb0:	ee16 0a90 	vmov	r0, s13
 800aeb4:	f7f5 fb0c 	bl	80004d0 <__aeabi_f2d>
									   D*powf(logf(thermistorResistance[i]/R25), 3))) - 273.15;
 800aeb8:	a311      	add	r3, pc, #68	@ (adr r3, 800af00 <board_temperature_sense+0x1b8>)
 800aeba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aebe:	f7f5 f9a7 	bl	8000210 <__aeabi_dsub>
 800aec2:	4602      	mov	r2, r0
 800aec4:	460b      	mov	r3, r1
 800aec6:	4610      	mov	r0, r2
 800aec8:	4619      	mov	r1, r3
		*(boardTemperatures + i) = (1/(A +
 800aeca:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 800aece:	009b      	lsls	r3, r3, #2
 800aed0:	687a      	ldr	r2, [r7, #4]
 800aed2:	18d4      	adds	r4, r2, r3
									   D*powf(logf(thermistorResistance[i]/R25), 3))) - 273.15;
 800aed4:	f7f5 fd66 	bl	80009a4 <__aeabi_d2f>
 800aed8:	4603      	mov	r3, r0
		*(boardTemperatures + i) = (1/(A +
 800aeda:	6023      	str	r3, [r4, #0]
	for(uint8_t i = 0; i < 9; i++) {
 800aedc:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 800aee0:	3301      	adds	r3, #1
 800aee2:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
 800aee6:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 800aeea:	2b08      	cmp	r3, #8
 800aeec:	f67f af79 	bls.w	800ade2 <board_temperature_sense+0x9a>
	}
}
 800aef0:	bf00      	nop
 800aef2:	bf00      	nop
 800aef4:	3754      	adds	r7, #84	@ 0x54
 800aef6:	46bd      	mov	sp, r7
 800aef8:	ecbd 8b02 	vpop	{d8}
 800aefc:	bd90      	pop	{r4, r7, pc}
 800aefe:	bf00      	nop
 800af00:	66666666 	.word	0x66666666
 800af04:	40711266 	.word	0x40711266
 800af08:	3b5bcf0d 	.word	0x3b5bcf0d
 800af0c:	3986bbf1 	.word	0x3986bbf1
 800af10:	362fd582 	.word	0x362fd582
 800af14:	3389136a 	.word	0x3389136a

0800af18 <read_thermistors>:


void read_thermistors(float *thermistorArray_ptr)
{
 800af18:	b590      	push	{r4, r7, lr}
 800af1a:	b0a3      	sub	sp, #140	@ 0x8c
 800af1c:	af00      	add	r7, sp, #0
 800af1e:	6078      	str	r0, [r7, #4]
	uint16_t thermistorRawADC[18];
	float thermistorVoltage[18];
	uint16_t ADCSum;

	pull_low(GPIOA, GPIO_PIN_3);		// U10 A
 800af20:	2108      	movs	r1, #8
 800af22:	48b6      	ldr	r0, [pc, #728]	@ (800b1fc <read_thermistors+0x2e4>)
 800af24:	f7ff fc4e 	bl	800a7c4 <pull_low>
	pull_high(GPIOA, GPIO_PIN_2);		// U10 B
 800af28:	2104      	movs	r1, #4
 800af2a:	48b4      	ldr	r0, [pc, #720]	@ (800b1fc <read_thermistors+0x2e4>)
 800af2c:	f7ff fc5a 	bl	800a7e4 <pull_high>
	pull_high(GPIOC, GPIO_PIN_13);		// U10 C
 800af30:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800af34:	48b2      	ldr	r0, [pc, #712]	@ (800b200 <read_thermistors+0x2e8>)
 800af36:	f7ff fc55 	bl	800a7e4 <pull_high>
	pull_low(GPIOC, GPIO_PIN_14);		// U10 D
 800af3a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800af3e:	48b0      	ldr	r0, [pc, #704]	@ (800b200 <read_thermistors+0x2e8>)
 800af40:	f7ff fc40 	bl	800a7c4 <pull_low>
	wait(1);
 800af44:	2001      	movs	r0, #1
 800af46:	f7ff fc5d 	bl	800a804 <wait>
	ADCSum = 0;
 800af4a:	2300      	movs	r3, #0
 800af4c:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
	for (uint8_t i = 0; i < FILTER_LEN; i++) {
 800af50:	2300      	movs	r3, #0
 800af52:	f887 3085 	strb.w	r3, [r7, #133]	@ 0x85
 800af56:	e019      	b.n	800af8c <read_thermistors+0x74>
		HAL_ADC_Start(&hadc1);
 800af58:	48aa      	ldr	r0, [pc, #680]	@ (800b204 <read_thermistors+0x2ec>)
 800af5a:	f000 ffc9 	bl	800bef0 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 800af5e:	f04f 31ff 	mov.w	r1, #4294967295
 800af62:	48a8      	ldr	r0, [pc, #672]	@ (800b204 <read_thermistors+0x2ec>)
 800af64:	f001 f8c9 	bl	800c0fa <HAL_ADC_PollForConversion>
		ADCSum += HAL_ADC_GetValue(&hadc1);
 800af68:	48a6      	ldr	r0, [pc, #664]	@ (800b204 <read_thermistors+0x2ec>)
 800af6a:	f001 f951 	bl	800c210 <HAL_ADC_GetValue>
 800af6e:	4603      	mov	r3, r0
 800af70:	b29a      	uxth	r2, r3
 800af72:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800af76:	4413      	add	r3, r2
 800af78:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
		HAL_ADC_Stop(&hadc1);
 800af7c:	48a1      	ldr	r0, [pc, #644]	@ (800b204 <read_thermistors+0x2ec>)
 800af7e:	f001 f889 	bl	800c094 <HAL_ADC_Stop>
	for (uint8_t i = 0; i < FILTER_LEN; i++) {
 800af82:	f897 3085 	ldrb.w	r3, [r7, #133]	@ 0x85
 800af86:	3301      	adds	r3, #1
 800af88:	f887 3085 	strb.w	r3, [r7, #133]	@ 0x85
 800af8c:	f897 3085 	ldrb.w	r3, [r7, #133]	@ 0x85
 800af90:	2b09      	cmp	r3, #9
 800af92:	d9e1      	bls.n	800af58 <read_thermistors+0x40>
	}
	thermistorRawADC[0] = ADCSum / FILTER_LEN;
 800af94:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800af98:	4a9b      	ldr	r2, [pc, #620]	@ (800b208 <read_thermistors+0x2f0>)
 800af9a:	fba2 2303 	umull	r2, r3, r2, r3
 800af9e:	08db      	lsrs	r3, r3, #3
 800afa0:	b29b      	uxth	r3, r3
 800afa2:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

	pull_high(GPIOA, GPIO_PIN_3);		// U10 A
 800afa6:	2108      	movs	r1, #8
 800afa8:	4894      	ldr	r0, [pc, #592]	@ (800b1fc <read_thermistors+0x2e4>)
 800afaa:	f7ff fc1b 	bl	800a7e4 <pull_high>
	pull_low(GPIOA, GPIO_PIN_2);		// U10 B
 800afae:	2104      	movs	r1, #4
 800afb0:	4892      	ldr	r0, [pc, #584]	@ (800b1fc <read_thermistors+0x2e4>)
 800afb2:	f7ff fc07 	bl	800a7c4 <pull_low>
	pull_high(GPIOC, GPIO_PIN_13);		// U10 C
 800afb6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800afba:	4891      	ldr	r0, [pc, #580]	@ (800b200 <read_thermistors+0x2e8>)
 800afbc:	f7ff fc12 	bl	800a7e4 <pull_high>
	pull_low(GPIOC, GPIO_PIN_14);		// U10 D
 800afc0:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800afc4:	488e      	ldr	r0, [pc, #568]	@ (800b200 <read_thermistors+0x2e8>)
 800afc6:	f7ff fbfd 	bl	800a7c4 <pull_low>
	wait(1);
 800afca:	2001      	movs	r0, #1
 800afcc:	f7ff fc1a 	bl	800a804 <wait>
	ADCSum = 0;
 800afd0:	2300      	movs	r3, #0
 800afd2:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
	for (uint8_t i = 0; i < FILTER_LEN; i++) {
 800afd6:	2300      	movs	r3, #0
 800afd8:	f887 3084 	strb.w	r3, [r7, #132]	@ 0x84
 800afdc:	e019      	b.n	800b012 <read_thermistors+0xfa>
		HAL_ADC_Start(&hadc1);
 800afde:	4889      	ldr	r0, [pc, #548]	@ (800b204 <read_thermistors+0x2ec>)
 800afe0:	f000 ff86 	bl	800bef0 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 800afe4:	f04f 31ff 	mov.w	r1, #4294967295
 800afe8:	4886      	ldr	r0, [pc, #536]	@ (800b204 <read_thermistors+0x2ec>)
 800afea:	f001 f886 	bl	800c0fa <HAL_ADC_PollForConversion>
		ADCSum += HAL_ADC_GetValue(&hadc1);
 800afee:	4885      	ldr	r0, [pc, #532]	@ (800b204 <read_thermistors+0x2ec>)
 800aff0:	f001 f90e 	bl	800c210 <HAL_ADC_GetValue>
 800aff4:	4603      	mov	r3, r0
 800aff6:	b29a      	uxth	r2, r3
 800aff8:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800affc:	4413      	add	r3, r2
 800affe:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
		HAL_ADC_Stop(&hadc1);
 800b002:	4880      	ldr	r0, [pc, #512]	@ (800b204 <read_thermistors+0x2ec>)
 800b004:	f001 f846 	bl	800c094 <HAL_ADC_Stop>
	for (uint8_t i = 0; i < FILTER_LEN; i++) {
 800b008:	f897 3084 	ldrb.w	r3, [r7, #132]	@ 0x84
 800b00c:	3301      	adds	r3, #1
 800b00e:	f887 3084 	strb.w	r3, [r7, #132]	@ 0x84
 800b012:	f897 3084 	ldrb.w	r3, [r7, #132]	@ 0x84
 800b016:	2b09      	cmp	r3, #9
 800b018:	d9e1      	bls.n	800afde <read_thermistors+0xc6>
	}
	thermistorRawADC[1] = ADCSum / FILTER_LEN;
 800b01a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800b01e:	4a7a      	ldr	r2, [pc, #488]	@ (800b208 <read_thermistors+0x2f0>)
 800b020:	fba2 2303 	umull	r2, r3, r2, r3
 800b024:	08db      	lsrs	r3, r3, #3
 800b026:	b29b      	uxth	r3, r3
 800b028:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52

	pull_low(GPIOA, GPIO_PIN_3);		// U10 A
 800b02c:	2108      	movs	r1, #8
 800b02e:	4873      	ldr	r0, [pc, #460]	@ (800b1fc <read_thermistors+0x2e4>)
 800b030:	f7ff fbc8 	bl	800a7c4 <pull_low>
	pull_low(GPIOA, GPIO_PIN_2);		// U10 B
 800b034:	2104      	movs	r1, #4
 800b036:	4871      	ldr	r0, [pc, #452]	@ (800b1fc <read_thermistors+0x2e4>)
 800b038:	f7ff fbc4 	bl	800a7c4 <pull_low>
	pull_high(GPIOC, GPIO_PIN_13);		// U10 C
 800b03c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800b040:	486f      	ldr	r0, [pc, #444]	@ (800b200 <read_thermistors+0x2e8>)
 800b042:	f7ff fbcf 	bl	800a7e4 <pull_high>
	pull_low(GPIOC, GPIO_PIN_14);		// U10 D
 800b046:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800b04a:	486d      	ldr	r0, [pc, #436]	@ (800b200 <read_thermistors+0x2e8>)
 800b04c:	f7ff fbba 	bl	800a7c4 <pull_low>
	wait(1);
 800b050:	2001      	movs	r0, #1
 800b052:	f7ff fbd7 	bl	800a804 <wait>
	ADCSum = 0;
 800b056:	2300      	movs	r3, #0
 800b058:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
	for (uint8_t i = 0; i < FILTER_LEN; i++) {
 800b05c:	2300      	movs	r3, #0
 800b05e:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
 800b062:	e019      	b.n	800b098 <read_thermistors+0x180>
		HAL_ADC_Start(&hadc1);
 800b064:	4867      	ldr	r0, [pc, #412]	@ (800b204 <read_thermistors+0x2ec>)
 800b066:	f000 ff43 	bl	800bef0 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 800b06a:	f04f 31ff 	mov.w	r1, #4294967295
 800b06e:	4865      	ldr	r0, [pc, #404]	@ (800b204 <read_thermistors+0x2ec>)
 800b070:	f001 f843 	bl	800c0fa <HAL_ADC_PollForConversion>
		ADCSum += HAL_ADC_GetValue(&hadc1);
 800b074:	4863      	ldr	r0, [pc, #396]	@ (800b204 <read_thermistors+0x2ec>)
 800b076:	f001 f8cb 	bl	800c210 <HAL_ADC_GetValue>
 800b07a:	4603      	mov	r3, r0
 800b07c:	b29a      	uxth	r2, r3
 800b07e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800b082:	4413      	add	r3, r2
 800b084:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
		HAL_ADC_Stop(&hadc1);
 800b088:	485e      	ldr	r0, [pc, #376]	@ (800b204 <read_thermistors+0x2ec>)
 800b08a:	f001 f803 	bl	800c094 <HAL_ADC_Stop>
	for (uint8_t i = 0; i < FILTER_LEN; i++) {
 800b08e:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 800b092:	3301      	adds	r3, #1
 800b094:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
 800b098:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 800b09c:	2b09      	cmp	r3, #9
 800b09e:	d9e1      	bls.n	800b064 <read_thermistors+0x14c>
	}
	thermistorRawADC[2] = ADCSum / FILTER_LEN;
 800b0a0:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800b0a4:	4a58      	ldr	r2, [pc, #352]	@ (800b208 <read_thermistors+0x2f0>)
 800b0a6:	fba2 2303 	umull	r2, r3, r2, r3
 800b0aa:	08db      	lsrs	r3, r3, #3
 800b0ac:	b29b      	uxth	r3, r3
 800b0ae:	f8a7 3054 	strh.w	r3, [r7, #84]	@ 0x54

	pull_high(GPIOA, GPIO_PIN_3);		// U10 A
 800b0b2:	2108      	movs	r1, #8
 800b0b4:	4851      	ldr	r0, [pc, #324]	@ (800b1fc <read_thermistors+0x2e4>)
 800b0b6:	f7ff fb95 	bl	800a7e4 <pull_high>
	pull_high(GPIOA, GPIO_PIN_2);		// U10 B
 800b0ba:	2104      	movs	r1, #4
 800b0bc:	484f      	ldr	r0, [pc, #316]	@ (800b1fc <read_thermistors+0x2e4>)
 800b0be:	f7ff fb91 	bl	800a7e4 <pull_high>
	pull_low(GPIOC, GPIO_PIN_13);		// U10 C
 800b0c2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800b0c6:	484e      	ldr	r0, [pc, #312]	@ (800b200 <read_thermistors+0x2e8>)
 800b0c8:	f7ff fb7c 	bl	800a7c4 <pull_low>
	pull_low(GPIOC, GPIO_PIN_14);		// U10 D
 800b0cc:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800b0d0:	484b      	ldr	r0, [pc, #300]	@ (800b200 <read_thermistors+0x2e8>)
 800b0d2:	f7ff fb77 	bl	800a7c4 <pull_low>
	wait(1);
 800b0d6:	2001      	movs	r0, #1
 800b0d8:	f7ff fb94 	bl	800a804 <wait>
	ADCSum = 0;
 800b0dc:	2300      	movs	r3, #0
 800b0de:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
	for (uint8_t i = 0; i < FILTER_LEN; i++) {
 800b0e2:	2300      	movs	r3, #0
 800b0e4:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
 800b0e8:	e019      	b.n	800b11e <read_thermistors+0x206>
		HAL_ADC_Start(&hadc1);
 800b0ea:	4846      	ldr	r0, [pc, #280]	@ (800b204 <read_thermistors+0x2ec>)
 800b0ec:	f000 ff00 	bl	800bef0 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 800b0f0:	f04f 31ff 	mov.w	r1, #4294967295
 800b0f4:	4843      	ldr	r0, [pc, #268]	@ (800b204 <read_thermistors+0x2ec>)
 800b0f6:	f001 f800 	bl	800c0fa <HAL_ADC_PollForConversion>
		ADCSum += HAL_ADC_GetValue(&hadc1);
 800b0fa:	4842      	ldr	r0, [pc, #264]	@ (800b204 <read_thermistors+0x2ec>)
 800b0fc:	f001 f888 	bl	800c210 <HAL_ADC_GetValue>
 800b100:	4603      	mov	r3, r0
 800b102:	b29a      	uxth	r2, r3
 800b104:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800b108:	4413      	add	r3, r2
 800b10a:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
		HAL_ADC_Stop(&hadc1);
 800b10e:	483d      	ldr	r0, [pc, #244]	@ (800b204 <read_thermistors+0x2ec>)
 800b110:	f000 ffc0 	bl	800c094 <HAL_ADC_Stop>
	for (uint8_t i = 0; i < FILTER_LEN; i++) {
 800b114:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
 800b118:	3301      	adds	r3, #1
 800b11a:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
 800b11e:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
 800b122:	2b09      	cmp	r3, #9
 800b124:	d9e1      	bls.n	800b0ea <read_thermistors+0x1d2>
	}
	thermistorRawADC[3] = ADCSum / FILTER_LEN;
 800b126:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800b12a:	4a37      	ldr	r2, [pc, #220]	@ (800b208 <read_thermistors+0x2f0>)
 800b12c:	fba2 2303 	umull	r2, r3, r2, r3
 800b130:	08db      	lsrs	r3, r3, #3
 800b132:	b29b      	uxth	r3, r3
 800b134:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56

	pull_low(GPIOA, GPIO_PIN_3);		// U10 A
 800b138:	2108      	movs	r1, #8
 800b13a:	4830      	ldr	r0, [pc, #192]	@ (800b1fc <read_thermistors+0x2e4>)
 800b13c:	f7ff fb42 	bl	800a7c4 <pull_low>
	pull_high(GPIOA, GPIO_PIN_2);		// U10 B
 800b140:	2104      	movs	r1, #4
 800b142:	482e      	ldr	r0, [pc, #184]	@ (800b1fc <read_thermistors+0x2e4>)
 800b144:	f7ff fb4e 	bl	800a7e4 <pull_high>
	pull_low(GPIOC, GPIO_PIN_13);		// U10 C
 800b148:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800b14c:	482c      	ldr	r0, [pc, #176]	@ (800b200 <read_thermistors+0x2e8>)
 800b14e:	f7ff fb39 	bl	800a7c4 <pull_low>
	pull_low(GPIOC, GPIO_PIN_14);		// U10 D
 800b152:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800b156:	482a      	ldr	r0, [pc, #168]	@ (800b200 <read_thermistors+0x2e8>)
 800b158:	f7ff fb34 	bl	800a7c4 <pull_low>
	wait(1);
 800b15c:	2001      	movs	r0, #1
 800b15e:	f7ff fb51 	bl	800a804 <wait>
	ADCSum = 0;
 800b162:	2300      	movs	r3, #0
 800b164:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
	for (uint8_t i = 0; i <= 10; i++) {
 800b168:	2300      	movs	r3, #0
 800b16a:	f887 3081 	strb.w	r3, [r7, #129]	@ 0x81
 800b16e:	e019      	b.n	800b1a4 <read_thermistors+0x28c>
		HAL_ADC_Start(&hadc1);
 800b170:	4824      	ldr	r0, [pc, #144]	@ (800b204 <read_thermistors+0x2ec>)
 800b172:	f000 febd 	bl	800bef0 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 800b176:	f04f 31ff 	mov.w	r1, #4294967295
 800b17a:	4822      	ldr	r0, [pc, #136]	@ (800b204 <read_thermistors+0x2ec>)
 800b17c:	f000 ffbd 	bl	800c0fa <HAL_ADC_PollForConversion>
		ADCSum += HAL_ADC_GetValue(&hadc1);
 800b180:	4820      	ldr	r0, [pc, #128]	@ (800b204 <read_thermistors+0x2ec>)
 800b182:	f001 f845 	bl	800c210 <HAL_ADC_GetValue>
 800b186:	4603      	mov	r3, r0
 800b188:	b29a      	uxth	r2, r3
 800b18a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800b18e:	4413      	add	r3, r2
 800b190:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
		HAL_ADC_Stop(&hadc1);
 800b194:	481b      	ldr	r0, [pc, #108]	@ (800b204 <read_thermistors+0x2ec>)
 800b196:	f000 ff7d 	bl	800c094 <HAL_ADC_Stop>
	for (uint8_t i = 0; i <= 10; i++) {
 800b19a:	f897 3081 	ldrb.w	r3, [r7, #129]	@ 0x81
 800b19e:	3301      	adds	r3, #1
 800b1a0:	f887 3081 	strb.w	r3, [r7, #129]	@ 0x81
 800b1a4:	f897 3081 	ldrb.w	r3, [r7, #129]	@ 0x81
 800b1a8:	2b0a      	cmp	r3, #10
 800b1aa:	d9e1      	bls.n	800b170 <read_thermistors+0x258>
	}
	thermistorRawADC[4] = (ADCSum / FILTER_LEN) - 200;
 800b1ac:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800b1b0:	4a15      	ldr	r2, [pc, #84]	@ (800b208 <read_thermistors+0x2f0>)
 800b1b2:	fba2 2303 	umull	r2, r3, r2, r3
 800b1b6:	08db      	lsrs	r3, r3, #3
 800b1b8:	b29b      	uxth	r3, r3
 800b1ba:	3bc8      	subs	r3, #200	@ 0xc8
 800b1bc:	b29b      	uxth	r3, r3
 800b1be:	f8a7 3058 	strh.w	r3, [r7, #88]	@ 0x58

	pull_high(GPIOA, GPIO_PIN_3);		// U10 A
 800b1c2:	2108      	movs	r1, #8
 800b1c4:	480d      	ldr	r0, [pc, #52]	@ (800b1fc <read_thermistors+0x2e4>)
 800b1c6:	f7ff fb0d 	bl	800a7e4 <pull_high>
	pull_low(GPIOA, GPIO_PIN_2);		// U10 B
 800b1ca:	2104      	movs	r1, #4
 800b1cc:	480b      	ldr	r0, [pc, #44]	@ (800b1fc <read_thermistors+0x2e4>)
 800b1ce:	f7ff faf9 	bl	800a7c4 <pull_low>
	pull_low(GPIOC, GPIO_PIN_13);		// U10 C
 800b1d2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800b1d6:	480a      	ldr	r0, [pc, #40]	@ (800b200 <read_thermistors+0x2e8>)
 800b1d8:	f7ff faf4 	bl	800a7c4 <pull_low>
	pull_low(GPIOC, GPIO_PIN_14);		// U10 D
 800b1dc:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800b1e0:	4807      	ldr	r0, [pc, #28]	@ (800b200 <read_thermistors+0x2e8>)
 800b1e2:	f7ff faef 	bl	800a7c4 <pull_low>
	wait(1);
 800b1e6:	2001      	movs	r0, #1
 800b1e8:	f7ff fb0c 	bl	800a804 <wait>
	ADCSum = 0;
 800b1ec:	2300      	movs	r3, #0
 800b1ee:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
	for (uint8_t i = 0; i < FILTER_LEN; i++) {
 800b1f2:	2300      	movs	r3, #0
 800b1f4:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
 800b1f8:	e022      	b.n	800b240 <read_thermistors+0x328>
 800b1fa:	bf00      	nop
 800b1fc:	40020000 	.word	0x40020000
 800b200:	40020800 	.word	0x40020800
 800b204:	2000007c 	.word	0x2000007c
 800b208:	cccccccd 	.word	0xcccccccd
		HAL_ADC_Start(&hadc1);
 800b20c:	48c9      	ldr	r0, [pc, #804]	@ (800b534 <read_thermistors+0x61c>)
 800b20e:	f000 fe6f 	bl	800bef0 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 800b212:	f04f 31ff 	mov.w	r1, #4294967295
 800b216:	48c7      	ldr	r0, [pc, #796]	@ (800b534 <read_thermistors+0x61c>)
 800b218:	f000 ff6f 	bl	800c0fa <HAL_ADC_PollForConversion>
		ADCSum += HAL_ADC_GetValue(&hadc1);
 800b21c:	48c5      	ldr	r0, [pc, #788]	@ (800b534 <read_thermistors+0x61c>)
 800b21e:	f000 fff7 	bl	800c210 <HAL_ADC_GetValue>
 800b222:	4603      	mov	r3, r0
 800b224:	b29a      	uxth	r2, r3
 800b226:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800b22a:	4413      	add	r3, r2
 800b22c:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
		HAL_ADC_Stop(&hadc1);
 800b230:	48c0      	ldr	r0, [pc, #768]	@ (800b534 <read_thermistors+0x61c>)
 800b232:	f000 ff2f 	bl	800c094 <HAL_ADC_Stop>
	for (uint8_t i = 0; i < FILTER_LEN; i++) {
 800b236:	f897 3080 	ldrb.w	r3, [r7, #128]	@ 0x80
 800b23a:	3301      	adds	r3, #1
 800b23c:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
 800b240:	f897 3080 	ldrb.w	r3, [r7, #128]	@ 0x80
 800b244:	2b09      	cmp	r3, #9
 800b246:	d9e1      	bls.n	800b20c <read_thermistors+0x2f4>
	}
	thermistorRawADC[5] = ADCSum / FILTER_LEN;
 800b248:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800b24c:	4aba      	ldr	r2, [pc, #744]	@ (800b538 <read_thermistors+0x620>)
 800b24e:	fba2 2303 	umull	r2, r3, r2, r3
 800b252:	08db      	lsrs	r3, r3, #3
 800b254:	b29b      	uxth	r3, r3
 800b256:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a

	pull_high(GPIOA, GPIO_PIN_3);		// U10 A
 800b25a:	2108      	movs	r1, #8
 800b25c:	48b7      	ldr	r0, [pc, #732]	@ (800b53c <read_thermistors+0x624>)
 800b25e:	f7ff fac1 	bl	800a7e4 <pull_high>
	pull_low(GPIOA, GPIO_PIN_2);		// U10 B
 800b262:	2104      	movs	r1, #4
 800b264:	48b5      	ldr	r0, [pc, #724]	@ (800b53c <read_thermistors+0x624>)
 800b266:	f7ff faad 	bl	800a7c4 <pull_low>
	pull_low(GPIOC, GPIO_PIN_13);		// U10 C
 800b26a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800b26e:	48b4      	ldr	r0, [pc, #720]	@ (800b540 <read_thermistors+0x628>)
 800b270:	f7ff faa8 	bl	800a7c4 <pull_low>
	pull_high(GPIOC, GPIO_PIN_14);		// U10 D
 800b274:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800b278:	48b1      	ldr	r0, [pc, #708]	@ (800b540 <read_thermistors+0x628>)
 800b27a:	f7ff fab3 	bl	800a7e4 <pull_high>
	wait(1);
 800b27e:	2001      	movs	r0, #1
 800b280:	f7ff fac0 	bl	800a804 <wait>
	ADCSum = 0;
 800b284:	2300      	movs	r3, #0
 800b286:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
	for (uint8_t i = 0; i <= 10; i++) {
 800b28a:	2300      	movs	r3, #0
 800b28c:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 800b290:	e019      	b.n	800b2c6 <read_thermistors+0x3ae>
		HAL_ADC_Start(&hadc1);
 800b292:	48a8      	ldr	r0, [pc, #672]	@ (800b534 <read_thermistors+0x61c>)
 800b294:	f000 fe2c 	bl	800bef0 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 800b298:	f04f 31ff 	mov.w	r1, #4294967295
 800b29c:	48a5      	ldr	r0, [pc, #660]	@ (800b534 <read_thermistors+0x61c>)
 800b29e:	f000 ff2c 	bl	800c0fa <HAL_ADC_PollForConversion>
		ADCSum += HAL_ADC_GetValue(&hadc1);
 800b2a2:	48a4      	ldr	r0, [pc, #656]	@ (800b534 <read_thermistors+0x61c>)
 800b2a4:	f000 ffb4 	bl	800c210 <HAL_ADC_GetValue>
 800b2a8:	4603      	mov	r3, r0
 800b2aa:	b29a      	uxth	r2, r3
 800b2ac:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800b2b0:	4413      	add	r3, r2
 800b2b2:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
		HAL_ADC_Stop(&hadc1);
 800b2b6:	489f      	ldr	r0, [pc, #636]	@ (800b534 <read_thermistors+0x61c>)
 800b2b8:	f000 feec 	bl	800c094 <HAL_ADC_Stop>
	for (uint8_t i = 0; i <= 10; i++) {
 800b2bc:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800b2c0:	3301      	adds	r3, #1
 800b2c2:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 800b2c6:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800b2ca:	2b0a      	cmp	r3, #10
 800b2cc:	d9e1      	bls.n	800b292 <read_thermistors+0x37a>
	}
	thermistorRawADC[6] = (ADCSum / FILTER_LEN) - 200;
 800b2ce:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800b2d2:	4a99      	ldr	r2, [pc, #612]	@ (800b538 <read_thermistors+0x620>)
 800b2d4:	fba2 2303 	umull	r2, r3, r2, r3
 800b2d8:	08db      	lsrs	r3, r3, #3
 800b2da:	b29b      	uxth	r3, r3
 800b2dc:	3bc8      	subs	r3, #200	@ 0xc8
 800b2de:	b29b      	uxth	r3, r3
 800b2e0:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c

	pull_low(GPIOA, GPIO_PIN_3);		// U10 A
 800b2e4:	2108      	movs	r1, #8
 800b2e6:	4895      	ldr	r0, [pc, #596]	@ (800b53c <read_thermistors+0x624>)
 800b2e8:	f7ff fa6c 	bl	800a7c4 <pull_low>
	pull_high(GPIOA, GPIO_PIN_2);		// U10 B
 800b2ec:	2104      	movs	r1, #4
 800b2ee:	4893      	ldr	r0, [pc, #588]	@ (800b53c <read_thermistors+0x624>)
 800b2f0:	f7ff fa78 	bl	800a7e4 <pull_high>
	pull_low(GPIOC, GPIO_PIN_13);		// U10 C
 800b2f4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800b2f8:	4891      	ldr	r0, [pc, #580]	@ (800b540 <read_thermistors+0x628>)
 800b2fa:	f7ff fa63 	bl	800a7c4 <pull_low>
	pull_high(GPIOC, GPIO_PIN_14);		// U10 D
 800b2fe:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800b302:	488f      	ldr	r0, [pc, #572]	@ (800b540 <read_thermistors+0x628>)
 800b304:	f7ff fa6e 	bl	800a7e4 <pull_high>
	wait(1);
 800b308:	2001      	movs	r0, #1
 800b30a:	f7ff fa7b 	bl	800a804 <wait>
	ADCSum = 0;
 800b30e:	2300      	movs	r3, #0
 800b310:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
	for (uint8_t i = 0; i < FILTER_LEN; i++) {
 800b314:	2300      	movs	r3, #0
 800b316:	f887 307e 	strb.w	r3, [r7, #126]	@ 0x7e
 800b31a:	e019      	b.n	800b350 <read_thermistors+0x438>
		HAL_ADC_Start(&hadc1);
 800b31c:	4885      	ldr	r0, [pc, #532]	@ (800b534 <read_thermistors+0x61c>)
 800b31e:	f000 fde7 	bl	800bef0 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 800b322:	f04f 31ff 	mov.w	r1, #4294967295
 800b326:	4883      	ldr	r0, [pc, #524]	@ (800b534 <read_thermistors+0x61c>)
 800b328:	f000 fee7 	bl	800c0fa <HAL_ADC_PollForConversion>
		ADCSum += HAL_ADC_GetValue(&hadc1);
 800b32c:	4881      	ldr	r0, [pc, #516]	@ (800b534 <read_thermistors+0x61c>)
 800b32e:	f000 ff6f 	bl	800c210 <HAL_ADC_GetValue>
 800b332:	4603      	mov	r3, r0
 800b334:	b29a      	uxth	r2, r3
 800b336:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800b33a:	4413      	add	r3, r2
 800b33c:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
		HAL_ADC_Stop(&hadc1);
 800b340:	487c      	ldr	r0, [pc, #496]	@ (800b534 <read_thermistors+0x61c>)
 800b342:	f000 fea7 	bl	800c094 <HAL_ADC_Stop>
	for (uint8_t i = 0; i < FILTER_LEN; i++) {
 800b346:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 800b34a:	3301      	adds	r3, #1
 800b34c:	f887 307e 	strb.w	r3, [r7, #126]	@ 0x7e
 800b350:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 800b354:	2b09      	cmp	r3, #9
 800b356:	d9e1      	bls.n	800b31c <read_thermistors+0x404>
	}
	thermistorRawADC[7] = ADCSum / FILTER_LEN;
 800b358:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800b35c:	4a76      	ldr	r2, [pc, #472]	@ (800b538 <read_thermistors+0x620>)
 800b35e:	fba2 2303 	umull	r2, r3, r2, r3
 800b362:	08db      	lsrs	r3, r3, #3
 800b364:	b29b      	uxth	r3, r3
 800b366:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e

	pull_low(GPIOA, GPIO_PIN_3);		// U10 A
 800b36a:	2108      	movs	r1, #8
 800b36c:	4873      	ldr	r0, [pc, #460]	@ (800b53c <read_thermistors+0x624>)
 800b36e:	f7ff fa29 	bl	800a7c4 <pull_low>
	pull_low(GPIOA, GPIO_PIN_2);		// U10 B
 800b372:	2104      	movs	r1, #4
 800b374:	4871      	ldr	r0, [pc, #452]	@ (800b53c <read_thermistors+0x624>)
 800b376:	f7ff fa25 	bl	800a7c4 <pull_low>
	pull_low(GPIOC, GPIO_PIN_13);		// U10 C
 800b37a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800b37e:	4870      	ldr	r0, [pc, #448]	@ (800b540 <read_thermistors+0x628>)
 800b380:	f7ff fa20 	bl	800a7c4 <pull_low>
	pull_high(GPIOC, GPIO_PIN_14);		// U10 D
 800b384:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800b388:	486d      	ldr	r0, [pc, #436]	@ (800b540 <read_thermistors+0x628>)
 800b38a:	f7ff fa2b 	bl	800a7e4 <pull_high>
	wait(1);
 800b38e:	2001      	movs	r0, #1
 800b390:	f7ff fa38 	bl	800a804 <wait>
	ADCSum = 0;
 800b394:	2300      	movs	r3, #0
 800b396:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
	for (uint8_t i = 0; i < FILTER_LEN; i++) {
 800b39a:	2300      	movs	r3, #0
 800b39c:	f887 307d 	strb.w	r3, [r7, #125]	@ 0x7d
 800b3a0:	e019      	b.n	800b3d6 <read_thermistors+0x4be>
		HAL_ADC_Start(&hadc1);
 800b3a2:	4864      	ldr	r0, [pc, #400]	@ (800b534 <read_thermistors+0x61c>)
 800b3a4:	f000 fda4 	bl	800bef0 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 800b3a8:	f04f 31ff 	mov.w	r1, #4294967295
 800b3ac:	4861      	ldr	r0, [pc, #388]	@ (800b534 <read_thermistors+0x61c>)
 800b3ae:	f000 fea4 	bl	800c0fa <HAL_ADC_PollForConversion>
		ADCSum += HAL_ADC_GetValue(&hadc1);
 800b3b2:	4860      	ldr	r0, [pc, #384]	@ (800b534 <read_thermistors+0x61c>)
 800b3b4:	f000 ff2c 	bl	800c210 <HAL_ADC_GetValue>
 800b3b8:	4603      	mov	r3, r0
 800b3ba:	b29a      	uxth	r2, r3
 800b3bc:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800b3c0:	4413      	add	r3, r2
 800b3c2:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
		HAL_ADC_Stop(&hadc1);
 800b3c6:	485b      	ldr	r0, [pc, #364]	@ (800b534 <read_thermistors+0x61c>)
 800b3c8:	f000 fe64 	bl	800c094 <HAL_ADC_Stop>
	for (uint8_t i = 0; i < FILTER_LEN; i++) {
 800b3cc:	f897 307d 	ldrb.w	r3, [r7, #125]	@ 0x7d
 800b3d0:	3301      	adds	r3, #1
 800b3d2:	f887 307d 	strb.w	r3, [r7, #125]	@ 0x7d
 800b3d6:	f897 307d 	ldrb.w	r3, [r7, #125]	@ 0x7d
 800b3da:	2b09      	cmp	r3, #9
 800b3dc:	d9e1      	bls.n	800b3a2 <read_thermistors+0x48a>
	}
	thermistorRawADC[8] = ADCSum / FILTER_LEN;
 800b3de:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800b3e2:	4a55      	ldr	r2, [pc, #340]	@ (800b538 <read_thermistors+0x620>)
 800b3e4:	fba2 2303 	umull	r2, r3, r2, r3
 800b3e8:	08db      	lsrs	r3, r3, #3
 800b3ea:	b29b      	uxth	r3, r3
 800b3ec:	f8a7 3060 	strh.w	r3, [r7, #96]	@ 0x60

	pull_low(GPIOA, GPIO_PIN_3);		// U10 A
 800b3f0:	2108      	movs	r1, #8
 800b3f2:	4852      	ldr	r0, [pc, #328]	@ (800b53c <read_thermistors+0x624>)
 800b3f4:	f7ff f9e6 	bl	800a7c4 <pull_low>
	pull_low(GPIOA, GPIO_PIN_2);		// U10 B
 800b3f8:	2104      	movs	r1, #4
 800b3fa:	4850      	ldr	r0, [pc, #320]	@ (800b53c <read_thermistors+0x624>)
 800b3fc:	f7ff f9e2 	bl	800a7c4 <pull_low>
	pull_high(GPIOC, GPIO_PIN_13);		// U10 C
 800b400:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800b404:	484e      	ldr	r0, [pc, #312]	@ (800b540 <read_thermistors+0x628>)
 800b406:	f7ff f9ed 	bl	800a7e4 <pull_high>
	pull_high(GPIOC, GPIO_PIN_14);		// U10 D
 800b40a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800b40e:	484c      	ldr	r0, [pc, #304]	@ (800b540 <read_thermistors+0x628>)
 800b410:	f7ff f9e8 	bl	800a7e4 <pull_high>
	wait(1);
 800b414:	2001      	movs	r0, #1
 800b416:	f7ff f9f5 	bl	800a804 <wait>
	ADCSum = 0;
 800b41a:	2300      	movs	r3, #0
 800b41c:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
	for (uint8_t i = 0; i < FILTER_LEN; i++) {
 800b420:	2300      	movs	r3, #0
 800b422:	f887 307c 	strb.w	r3, [r7, #124]	@ 0x7c
 800b426:	e019      	b.n	800b45c <read_thermistors+0x544>
		HAL_ADC_Start(&hadc1);
 800b428:	4842      	ldr	r0, [pc, #264]	@ (800b534 <read_thermistors+0x61c>)
 800b42a:	f000 fd61 	bl	800bef0 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 800b42e:	f04f 31ff 	mov.w	r1, #4294967295
 800b432:	4840      	ldr	r0, [pc, #256]	@ (800b534 <read_thermistors+0x61c>)
 800b434:	f000 fe61 	bl	800c0fa <HAL_ADC_PollForConversion>
		ADCSum += HAL_ADC_GetValue(&hadc1);
 800b438:	483e      	ldr	r0, [pc, #248]	@ (800b534 <read_thermistors+0x61c>)
 800b43a:	f000 fee9 	bl	800c210 <HAL_ADC_GetValue>
 800b43e:	4603      	mov	r3, r0
 800b440:	b29a      	uxth	r2, r3
 800b442:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800b446:	4413      	add	r3, r2
 800b448:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
		HAL_ADC_Stop(&hadc1);
 800b44c:	4839      	ldr	r0, [pc, #228]	@ (800b534 <read_thermistors+0x61c>)
 800b44e:	f000 fe21 	bl	800c094 <HAL_ADC_Stop>
	for (uint8_t i = 0; i < FILTER_LEN; i++) {
 800b452:	f897 307c 	ldrb.w	r3, [r7, #124]	@ 0x7c
 800b456:	3301      	adds	r3, #1
 800b458:	f887 307c 	strb.w	r3, [r7, #124]	@ 0x7c
 800b45c:	f897 307c 	ldrb.w	r3, [r7, #124]	@ 0x7c
 800b460:	2b09      	cmp	r3, #9
 800b462:	d9e1      	bls.n	800b428 <read_thermistors+0x510>
	}
	thermistorRawADC[9] = ADCSum / FILTER_LEN;
 800b464:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800b468:	4a33      	ldr	r2, [pc, #204]	@ (800b538 <read_thermistors+0x620>)
 800b46a:	fba2 2303 	umull	r2, r3, r2, r3
 800b46e:	08db      	lsrs	r3, r3, #3
 800b470:	b29b      	uxth	r3, r3
 800b472:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62

	pull_high(GPIOA, GPIO_PIN_3);		// U10 A
 800b476:	2108      	movs	r1, #8
 800b478:	4830      	ldr	r0, [pc, #192]	@ (800b53c <read_thermistors+0x624>)
 800b47a:	f7ff f9b3 	bl	800a7e4 <pull_high>
	pull_high(GPIOA, GPIO_PIN_2);		// U10 B
 800b47e:	2104      	movs	r1, #4
 800b480:	482e      	ldr	r0, [pc, #184]	@ (800b53c <read_thermistors+0x624>)
 800b482:	f7ff f9af 	bl	800a7e4 <pull_high>
	pull_high(GPIOC, GPIO_PIN_13);		// U10 C
 800b486:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800b48a:	482d      	ldr	r0, [pc, #180]	@ (800b540 <read_thermistors+0x628>)
 800b48c:	f7ff f9aa 	bl	800a7e4 <pull_high>
	pull_low(GPIOC, GPIO_PIN_14);		// U10 D
 800b490:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800b494:	482a      	ldr	r0, [pc, #168]	@ (800b540 <read_thermistors+0x628>)
 800b496:	f7ff f995 	bl	800a7c4 <pull_low>
	wait(1);
 800b49a:	2001      	movs	r0, #1
 800b49c:	f7ff f9b2 	bl	800a804 <wait>
	ADCSum = 0;
 800b4a0:	2300      	movs	r3, #0
 800b4a2:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
	for (uint8_t i = 0; i < FILTER_LEN; i++) {
 800b4a6:	2300      	movs	r3, #0
 800b4a8:	f887 307b 	strb.w	r3, [r7, #123]	@ 0x7b
 800b4ac:	e019      	b.n	800b4e2 <read_thermistors+0x5ca>
		HAL_ADC_Start(&hadc1);
 800b4ae:	4821      	ldr	r0, [pc, #132]	@ (800b534 <read_thermistors+0x61c>)
 800b4b0:	f000 fd1e 	bl	800bef0 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 800b4b4:	f04f 31ff 	mov.w	r1, #4294967295
 800b4b8:	481e      	ldr	r0, [pc, #120]	@ (800b534 <read_thermistors+0x61c>)
 800b4ba:	f000 fe1e 	bl	800c0fa <HAL_ADC_PollForConversion>
		ADCSum += HAL_ADC_GetValue(&hadc1);
 800b4be:	481d      	ldr	r0, [pc, #116]	@ (800b534 <read_thermistors+0x61c>)
 800b4c0:	f000 fea6 	bl	800c210 <HAL_ADC_GetValue>
 800b4c4:	4603      	mov	r3, r0
 800b4c6:	b29a      	uxth	r2, r3
 800b4c8:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800b4cc:	4413      	add	r3, r2
 800b4ce:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
		HAL_ADC_Stop(&hadc1);
 800b4d2:	4818      	ldr	r0, [pc, #96]	@ (800b534 <read_thermistors+0x61c>)
 800b4d4:	f000 fdde 	bl	800c094 <HAL_ADC_Stop>
	for (uint8_t i = 0; i < FILTER_LEN; i++) {
 800b4d8:	f897 307b 	ldrb.w	r3, [r7, #123]	@ 0x7b
 800b4dc:	3301      	adds	r3, #1
 800b4de:	f887 307b 	strb.w	r3, [r7, #123]	@ 0x7b
 800b4e2:	f897 307b 	ldrb.w	r3, [r7, #123]	@ 0x7b
 800b4e6:	2b09      	cmp	r3, #9
 800b4e8:	d9e1      	bls.n	800b4ae <read_thermistors+0x596>
	}
	thermistorRawADC[10] = ADCSum / FILTER_LEN;
 800b4ea:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800b4ee:	4a12      	ldr	r2, [pc, #72]	@ (800b538 <read_thermistors+0x620>)
 800b4f0:	fba2 2303 	umull	r2, r3, r2, r3
 800b4f4:	08db      	lsrs	r3, r3, #3
 800b4f6:	b29b      	uxth	r3, r3
 800b4f8:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64

	pull_high(GPIOA, GPIO_PIN_3);		// U10 A
 800b4fc:	2108      	movs	r1, #8
 800b4fe:	480f      	ldr	r0, [pc, #60]	@ (800b53c <read_thermistors+0x624>)
 800b500:	f7ff f970 	bl	800a7e4 <pull_high>
	pull_high(GPIOA, GPIO_PIN_2);		// U10 B
 800b504:	2104      	movs	r1, #4
 800b506:	480d      	ldr	r0, [pc, #52]	@ (800b53c <read_thermistors+0x624>)
 800b508:	f7ff f96c 	bl	800a7e4 <pull_high>
	pull_low(GPIOC, GPIO_PIN_13);		// U10 C
 800b50c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800b510:	480b      	ldr	r0, [pc, #44]	@ (800b540 <read_thermistors+0x628>)
 800b512:	f7ff f957 	bl	800a7c4 <pull_low>
	pull_high(GPIOC, GPIO_PIN_14);		// U10 D
 800b516:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800b51a:	4809      	ldr	r0, [pc, #36]	@ (800b540 <read_thermistors+0x628>)
 800b51c:	f7ff f962 	bl	800a7e4 <pull_high>
	wait(1);
 800b520:	2001      	movs	r0, #1
 800b522:	f7ff f96f 	bl	800a804 <wait>
	ADCSum = 0;
 800b526:	2300      	movs	r3, #0
 800b528:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
	for (uint8_t i = 0; i < FILTER_LEN; i++) {
 800b52c:	2300      	movs	r3, #0
 800b52e:	f887 307a 	strb.w	r3, [r7, #122]	@ 0x7a
 800b532:	e021      	b.n	800b578 <read_thermistors+0x660>
 800b534:	2000007c 	.word	0x2000007c
 800b538:	cccccccd 	.word	0xcccccccd
 800b53c:	40020000 	.word	0x40020000
 800b540:	40020800 	.word	0x40020800
		HAL_ADC_Start(&hadc1);
 800b544:	48ce      	ldr	r0, [pc, #824]	@ (800b880 <read_thermistors+0x968>)
 800b546:	f000 fcd3 	bl	800bef0 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 800b54a:	f04f 31ff 	mov.w	r1, #4294967295
 800b54e:	48cc      	ldr	r0, [pc, #816]	@ (800b880 <read_thermistors+0x968>)
 800b550:	f000 fdd3 	bl	800c0fa <HAL_ADC_PollForConversion>
		ADCSum += HAL_ADC_GetValue(&hadc1);
 800b554:	48ca      	ldr	r0, [pc, #808]	@ (800b880 <read_thermistors+0x968>)
 800b556:	f000 fe5b 	bl	800c210 <HAL_ADC_GetValue>
 800b55a:	4603      	mov	r3, r0
 800b55c:	b29a      	uxth	r2, r3
 800b55e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800b562:	4413      	add	r3, r2
 800b564:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
		HAL_ADC_Stop(&hadc1);
 800b568:	48c5      	ldr	r0, [pc, #788]	@ (800b880 <read_thermistors+0x968>)
 800b56a:	f000 fd93 	bl	800c094 <HAL_ADC_Stop>
	for (uint8_t i = 0; i < FILTER_LEN; i++) {
 800b56e:	f897 307a 	ldrb.w	r3, [r7, #122]	@ 0x7a
 800b572:	3301      	adds	r3, #1
 800b574:	f887 307a 	strb.w	r3, [r7, #122]	@ 0x7a
 800b578:	f897 307a 	ldrb.w	r3, [r7, #122]	@ 0x7a
 800b57c:	2b09      	cmp	r3, #9
 800b57e:	d9e1      	bls.n	800b544 <read_thermistors+0x62c>
	}
	thermistorRawADC[11] = ADCSum / FILTER_LEN;
 800b580:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800b584:	4abf      	ldr	r2, [pc, #764]	@ (800b884 <read_thermistors+0x96c>)
 800b586:	fba2 2303 	umull	r2, r3, r2, r3
 800b58a:	08db      	lsrs	r3, r3, #3
 800b58c:	b29b      	uxth	r3, r3
 800b58e:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66

	pull_high(GPIOA, GPIO_PIN_3);		// U10 A
 800b592:	2108      	movs	r1, #8
 800b594:	48bc      	ldr	r0, [pc, #752]	@ (800b888 <read_thermistors+0x970>)
 800b596:	f7ff f925 	bl	800a7e4 <pull_high>
	pull_low(GPIOA, GPIO_PIN_2);		// U10 B
 800b59a:	2104      	movs	r1, #4
 800b59c:	48ba      	ldr	r0, [pc, #744]	@ (800b888 <read_thermistors+0x970>)
 800b59e:	f7ff f911 	bl	800a7c4 <pull_low>
	pull_high(GPIOC, GPIO_PIN_13);		// U10 C
 800b5a2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800b5a6:	48b9      	ldr	r0, [pc, #740]	@ (800b88c <read_thermistors+0x974>)
 800b5a8:	f7ff f91c 	bl	800a7e4 <pull_high>
	pull_high(GPIOC, GPIO_PIN_14);		// U10 D
 800b5ac:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800b5b0:	48b6      	ldr	r0, [pc, #728]	@ (800b88c <read_thermistors+0x974>)
 800b5b2:	f7ff f917 	bl	800a7e4 <pull_high>
	wait(1);
 800b5b6:	2001      	movs	r0, #1
 800b5b8:	f7ff f924 	bl	800a804 <wait>
	ADCSum = 0;
 800b5bc:	2300      	movs	r3, #0
 800b5be:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
	for (uint8_t i = 0; i < FILTER_LEN; i++) {
 800b5c2:	2300      	movs	r3, #0
 800b5c4:	f887 3079 	strb.w	r3, [r7, #121]	@ 0x79
 800b5c8:	e019      	b.n	800b5fe <read_thermistors+0x6e6>
		HAL_ADC_Start(&hadc1);
 800b5ca:	48ad      	ldr	r0, [pc, #692]	@ (800b880 <read_thermistors+0x968>)
 800b5cc:	f000 fc90 	bl	800bef0 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 800b5d0:	f04f 31ff 	mov.w	r1, #4294967295
 800b5d4:	48aa      	ldr	r0, [pc, #680]	@ (800b880 <read_thermistors+0x968>)
 800b5d6:	f000 fd90 	bl	800c0fa <HAL_ADC_PollForConversion>
		ADCSum += HAL_ADC_GetValue(&hadc1);
 800b5da:	48a9      	ldr	r0, [pc, #676]	@ (800b880 <read_thermistors+0x968>)
 800b5dc:	f000 fe18 	bl	800c210 <HAL_ADC_GetValue>
 800b5e0:	4603      	mov	r3, r0
 800b5e2:	b29a      	uxth	r2, r3
 800b5e4:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800b5e8:	4413      	add	r3, r2
 800b5ea:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
		HAL_ADC_Stop(&hadc1);
 800b5ee:	48a4      	ldr	r0, [pc, #656]	@ (800b880 <read_thermistors+0x968>)
 800b5f0:	f000 fd50 	bl	800c094 <HAL_ADC_Stop>
	for (uint8_t i = 0; i < FILTER_LEN; i++) {
 800b5f4:	f897 3079 	ldrb.w	r3, [r7, #121]	@ 0x79
 800b5f8:	3301      	adds	r3, #1
 800b5fa:	f887 3079 	strb.w	r3, [r7, #121]	@ 0x79
 800b5fe:	f897 3079 	ldrb.w	r3, [r7, #121]	@ 0x79
 800b602:	2b09      	cmp	r3, #9
 800b604:	d9e1      	bls.n	800b5ca <read_thermistors+0x6b2>
	}
	thermistorRawADC[12] = ADCSum / FILTER_LEN;
 800b606:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800b60a:	4a9e      	ldr	r2, [pc, #632]	@ (800b884 <read_thermistors+0x96c>)
 800b60c:	fba2 2303 	umull	r2, r3, r2, r3
 800b610:	08db      	lsrs	r3, r3, #3
 800b612:	b29b      	uxth	r3, r3
 800b614:	f8a7 3068 	strh.w	r3, [r7, #104]	@ 0x68

	pull_low(GPIOA, GPIO_PIN_3);		// U10 A
 800b618:	2108      	movs	r1, #8
 800b61a:	489b      	ldr	r0, [pc, #620]	@ (800b888 <read_thermistors+0x970>)
 800b61c:	f7ff f8d2 	bl	800a7c4 <pull_low>
	pull_low(GPIOA, GPIO_PIN_2);		// U10 B
 800b620:	2104      	movs	r1, #4
 800b622:	4899      	ldr	r0, [pc, #612]	@ (800b888 <read_thermistors+0x970>)
 800b624:	f7ff f8ce 	bl	800a7c4 <pull_low>
	pull_low(GPIOC, GPIO_PIN_13);		// U10 C
 800b628:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800b62c:	4897      	ldr	r0, [pc, #604]	@ (800b88c <read_thermistors+0x974>)
 800b62e:	f7ff f8c9 	bl	800a7c4 <pull_low>
	pull_low(GPIOC, GPIO_PIN_14);		// U10 D
 800b632:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800b636:	4895      	ldr	r0, [pc, #596]	@ (800b88c <read_thermistors+0x974>)
 800b638:	f7ff f8c4 	bl	800a7c4 <pull_low>
	wait(1);
 800b63c:	2001      	movs	r0, #1
 800b63e:	f7ff f8e1 	bl	800a804 <wait>
	ADCSum = 0;
 800b642:	2300      	movs	r3, #0
 800b644:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
	for (uint8_t i = 0; i < FILTER_LEN; i++) {
 800b648:	2300      	movs	r3, #0
 800b64a:	f887 3078 	strb.w	r3, [r7, #120]	@ 0x78
 800b64e:	e019      	b.n	800b684 <read_thermistors+0x76c>
		HAL_ADC_Start(&hadc1);
 800b650:	488b      	ldr	r0, [pc, #556]	@ (800b880 <read_thermistors+0x968>)
 800b652:	f000 fc4d 	bl	800bef0 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 800b656:	f04f 31ff 	mov.w	r1, #4294967295
 800b65a:	4889      	ldr	r0, [pc, #548]	@ (800b880 <read_thermistors+0x968>)
 800b65c:	f000 fd4d 	bl	800c0fa <HAL_ADC_PollForConversion>
		ADCSum += HAL_ADC_GetValue(&hadc1);
 800b660:	4887      	ldr	r0, [pc, #540]	@ (800b880 <read_thermistors+0x968>)
 800b662:	f000 fdd5 	bl	800c210 <HAL_ADC_GetValue>
 800b666:	4603      	mov	r3, r0
 800b668:	b29a      	uxth	r2, r3
 800b66a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800b66e:	4413      	add	r3, r2
 800b670:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
		HAL_ADC_Stop(&hadc1);
 800b674:	4882      	ldr	r0, [pc, #520]	@ (800b880 <read_thermistors+0x968>)
 800b676:	f000 fd0d 	bl	800c094 <HAL_ADC_Stop>
	for (uint8_t i = 0; i < FILTER_LEN; i++) {
 800b67a:	f897 3078 	ldrb.w	r3, [r7, #120]	@ 0x78
 800b67e:	3301      	adds	r3, #1
 800b680:	f887 3078 	strb.w	r3, [r7, #120]	@ 0x78
 800b684:	f897 3078 	ldrb.w	r3, [r7, #120]	@ 0x78
 800b688:	2b09      	cmp	r3, #9
 800b68a:	d9e1      	bls.n	800b650 <read_thermistors+0x738>
	}
	thermistorRawADC[13] = ADCSum / FILTER_LEN;
 800b68c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800b690:	4a7c      	ldr	r2, [pc, #496]	@ (800b884 <read_thermistors+0x96c>)
 800b692:	fba2 2303 	umull	r2, r3, r2, r3
 800b696:	08db      	lsrs	r3, r3, #3
 800b698:	b29b      	uxth	r3, r3
 800b69a:	f8a7 306a 	strh.w	r3, [r7, #106]	@ 0x6a

	pull_low(GPIOA, GPIO_PIN_3);		// U10 A
 800b69e:	2108      	movs	r1, #8
 800b6a0:	4879      	ldr	r0, [pc, #484]	@ (800b888 <read_thermistors+0x970>)
 800b6a2:	f7ff f88f 	bl	800a7c4 <pull_low>
	pull_high(GPIOA, GPIO_PIN_2);		// U10 B
 800b6a6:	2104      	movs	r1, #4
 800b6a8:	4877      	ldr	r0, [pc, #476]	@ (800b888 <read_thermistors+0x970>)
 800b6aa:	f7ff f89b 	bl	800a7e4 <pull_high>
	pull_high(GPIOC, GPIO_PIN_13);		// U10 C
 800b6ae:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800b6b2:	4876      	ldr	r0, [pc, #472]	@ (800b88c <read_thermistors+0x974>)
 800b6b4:	f7ff f896 	bl	800a7e4 <pull_high>
	pull_high(GPIOC, GPIO_PIN_14);		// U10 D
 800b6b8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800b6bc:	4873      	ldr	r0, [pc, #460]	@ (800b88c <read_thermistors+0x974>)
 800b6be:	f7ff f891 	bl	800a7e4 <pull_high>
	wait(1);
 800b6c2:	2001      	movs	r0, #1
 800b6c4:	f7ff f89e 	bl	800a804 <wait>
	ADCSum = 0;
 800b6c8:	2300      	movs	r3, #0
 800b6ca:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
	for (uint8_t i = 0; i <= 10; i++) {
 800b6ce:	2300      	movs	r3, #0
 800b6d0:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 800b6d4:	e019      	b.n	800b70a <read_thermistors+0x7f2>
		HAL_ADC_Start(&hadc1);
 800b6d6:	486a      	ldr	r0, [pc, #424]	@ (800b880 <read_thermistors+0x968>)
 800b6d8:	f000 fc0a 	bl	800bef0 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 800b6dc:	f04f 31ff 	mov.w	r1, #4294967295
 800b6e0:	4867      	ldr	r0, [pc, #412]	@ (800b880 <read_thermistors+0x968>)
 800b6e2:	f000 fd0a 	bl	800c0fa <HAL_ADC_PollForConversion>
		ADCSum += HAL_ADC_GetValue(&hadc1);
 800b6e6:	4866      	ldr	r0, [pc, #408]	@ (800b880 <read_thermistors+0x968>)
 800b6e8:	f000 fd92 	bl	800c210 <HAL_ADC_GetValue>
 800b6ec:	4603      	mov	r3, r0
 800b6ee:	b29a      	uxth	r2, r3
 800b6f0:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800b6f4:	4413      	add	r3, r2
 800b6f6:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
		HAL_ADC_Stop(&hadc1);
 800b6fa:	4861      	ldr	r0, [pc, #388]	@ (800b880 <read_thermistors+0x968>)
 800b6fc:	f000 fcca 	bl	800c094 <HAL_ADC_Stop>
	for (uint8_t i = 0; i <= 10; i++) {
 800b700:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800b704:	3301      	adds	r3, #1
 800b706:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 800b70a:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800b70e:	2b0a      	cmp	r3, #10
 800b710:	d9e1      	bls.n	800b6d6 <read_thermistors+0x7be>
	}
	thermistorRawADC[14] = (ADCSum / FILTER_LEN) - 200;
 800b712:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800b716:	4a5b      	ldr	r2, [pc, #364]	@ (800b884 <read_thermistors+0x96c>)
 800b718:	fba2 2303 	umull	r2, r3, r2, r3
 800b71c:	08db      	lsrs	r3, r3, #3
 800b71e:	b29b      	uxth	r3, r3
 800b720:	3bc8      	subs	r3, #200	@ 0xc8
 800b722:	b29b      	uxth	r3, r3
 800b724:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
	thermistorRawADC[15] = thermistorRawADC[13] + 22;
 800b728:	f8b7 306a 	ldrh.w	r3, [r7, #106]	@ 0x6a
 800b72c:	3316      	adds	r3, #22
 800b72e:	b29b      	uxth	r3, r3
 800b730:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e

	pull_high(GPIOA, GPIO_PIN_3);		// U10 A
 800b734:	2108      	movs	r1, #8
 800b736:	4854      	ldr	r0, [pc, #336]	@ (800b888 <read_thermistors+0x970>)
 800b738:	f7ff f854 	bl	800a7e4 <pull_high>
	pull_high(GPIOA, GPIO_PIN_2);		// U10 B
 800b73c:	2104      	movs	r1, #4
 800b73e:	4852      	ldr	r0, [pc, #328]	@ (800b888 <read_thermistors+0x970>)
 800b740:	f7ff f850 	bl	800a7e4 <pull_high>
	pull_high(GPIOC, GPIO_PIN_13);		// U10 C
 800b744:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800b748:	4850      	ldr	r0, [pc, #320]	@ (800b88c <read_thermistors+0x974>)
 800b74a:	f7ff f84b 	bl	800a7e4 <pull_high>
	pull_high(GPIOC, GPIO_PIN_14);		// U10 D
 800b74e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800b752:	484e      	ldr	r0, [pc, #312]	@ (800b88c <read_thermistors+0x974>)
 800b754:	f7ff f846 	bl	800a7e4 <pull_high>
	wait(1);
 800b758:	2001      	movs	r0, #1
 800b75a:	f7ff f853 	bl	800a804 <wait>
	ADCSum = 0;
 800b75e:	2300      	movs	r3, #0
 800b760:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
	for (uint8_t i = 0; i < FILTER_LEN; i++) {
 800b764:	2300      	movs	r3, #0
 800b766:	f887 3076 	strb.w	r3, [r7, #118]	@ 0x76
 800b76a:	e019      	b.n	800b7a0 <read_thermistors+0x888>
		HAL_ADC_Start(&hadc1);
 800b76c:	4844      	ldr	r0, [pc, #272]	@ (800b880 <read_thermistors+0x968>)
 800b76e:	f000 fbbf 	bl	800bef0 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 800b772:	f04f 31ff 	mov.w	r1, #4294967295
 800b776:	4842      	ldr	r0, [pc, #264]	@ (800b880 <read_thermistors+0x968>)
 800b778:	f000 fcbf 	bl	800c0fa <HAL_ADC_PollForConversion>
		ADCSum += HAL_ADC_GetValue(&hadc1);
 800b77c:	4840      	ldr	r0, [pc, #256]	@ (800b880 <read_thermistors+0x968>)
 800b77e:	f000 fd47 	bl	800c210 <HAL_ADC_GetValue>
 800b782:	4603      	mov	r3, r0
 800b784:	b29a      	uxth	r2, r3
 800b786:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800b78a:	4413      	add	r3, r2
 800b78c:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
		HAL_ADC_Stop(&hadc1);
 800b790:	483b      	ldr	r0, [pc, #236]	@ (800b880 <read_thermistors+0x968>)
 800b792:	f000 fc7f 	bl	800c094 <HAL_ADC_Stop>
	for (uint8_t i = 0; i < FILTER_LEN; i++) {
 800b796:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 800b79a:	3301      	adds	r3, #1
 800b79c:	f887 3076 	strb.w	r3, [r7, #118]	@ 0x76
 800b7a0:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 800b7a4:	2b09      	cmp	r3, #9
 800b7a6:	d9e1      	bls.n	800b76c <read_thermistors+0x854>
	}
	thermistorRawADC[16] = ADCSum / FILTER_LEN;
 800b7a8:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800b7ac:	4a35      	ldr	r2, [pc, #212]	@ (800b884 <read_thermistors+0x96c>)
 800b7ae:	fba2 2303 	umull	r2, r3, r2, r3
 800b7b2:	08db      	lsrs	r3, r3, #3
 800b7b4:	b29b      	uxth	r3, r3
 800b7b6:	f8a7 3070 	strh.w	r3, [r7, #112]	@ 0x70
	thermistorRawADC[17] = thermistorRawADC[12] + 33;
 800b7ba:	f8b7 3068 	ldrh.w	r3, [r7, #104]	@ 0x68
 800b7be:	3321      	adds	r3, #33	@ 0x21
 800b7c0:	b29b      	uxth	r3, r3
 800b7c2:	f8a7 3072 	strh.w	r3, [r7, #114]	@ 0x72

	for(uint8_t i = 0; i < MODULE_THERM_QTY; i++) {
 800b7c6:	2300      	movs	r3, #0
 800b7c8:	f887 3075 	strb.w	r3, [r7, #117]	@ 0x75
 800b7cc:	e02a      	b.n	800b824 <read_thermistors+0x90c>
		thermistorVoltage[i] = (thermistorRawADC[i] / 4095.0) * 3.3;
 800b7ce:	f897 3075 	ldrb.w	r3, [r7, #117]	@ 0x75
 800b7d2:	005b      	lsls	r3, r3, #1
 800b7d4:	3388      	adds	r3, #136	@ 0x88
 800b7d6:	443b      	add	r3, r7
 800b7d8:	f833 3c38 	ldrh.w	r3, [r3, #-56]
 800b7dc:	4618      	mov	r0, r3
 800b7de:	f7f4 fe65 	bl	80004ac <__aeabi_i2d>
 800b7e2:	a323      	add	r3, pc, #140	@ (adr r3, 800b870 <read_thermistors+0x958>)
 800b7e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7e8:	f7f4 fff4 	bl	80007d4 <__aeabi_ddiv>
 800b7ec:	4602      	mov	r2, r0
 800b7ee:	460b      	mov	r3, r1
 800b7f0:	4610      	mov	r0, r2
 800b7f2:	4619      	mov	r1, r3
 800b7f4:	a320      	add	r3, pc, #128	@ (adr r3, 800b878 <read_thermistors+0x960>)
 800b7f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7fa:	f7f4 fec1 	bl	8000580 <__aeabi_dmul>
 800b7fe:	4602      	mov	r2, r0
 800b800:	460b      	mov	r3, r1
 800b802:	f897 4075 	ldrb.w	r4, [r7, #117]	@ 0x75
 800b806:	4610      	mov	r0, r2
 800b808:	4619      	mov	r1, r3
 800b80a:	f7f5 f8cb 	bl	80009a4 <__aeabi_d2f>
 800b80e:	4602      	mov	r2, r0
 800b810:	00a3      	lsls	r3, r4, #2
 800b812:	3388      	adds	r3, #136	@ 0x88
 800b814:	443b      	add	r3, r7
 800b816:	3b80      	subs	r3, #128	@ 0x80
 800b818:	601a      	str	r2, [r3, #0]
	for(uint8_t i = 0; i < MODULE_THERM_QTY; i++) {
 800b81a:	f897 3075 	ldrb.w	r3, [r7, #117]	@ 0x75
 800b81e:	3301      	adds	r3, #1
 800b820:	f887 3075 	strb.w	r3, [r7, #117]	@ 0x75
 800b824:	f897 3075 	ldrb.w	r3, [r7, #117]	@ 0x75
 800b828:	2b11      	cmp	r3, #17
 800b82a:	d9d0      	bls.n	800b7ce <read_thermistors+0x8b6>
	}
	for(uint8_t i = 0; i < MODULE_THERM_QTY; i++) {
 800b82c:	2300      	movs	r3, #0
 800b82e:	f887 3074 	strb.w	r3, [r7, #116]	@ 0x74
 800b832:	e011      	b.n	800b858 <read_thermistors+0x940>
		*(thermistorArray_ptr + i) = thermistorVoltage[i];
 800b834:	f897 2074 	ldrb.w	r2, [r7, #116]	@ 0x74
 800b838:	f897 3074 	ldrb.w	r3, [r7, #116]	@ 0x74
 800b83c:	009b      	lsls	r3, r3, #2
 800b83e:	6879      	ldr	r1, [r7, #4]
 800b840:	440b      	add	r3, r1
 800b842:	0092      	lsls	r2, r2, #2
 800b844:	3288      	adds	r2, #136	@ 0x88
 800b846:	443a      	add	r2, r7
 800b848:	3a80      	subs	r2, #128	@ 0x80
 800b84a:	6812      	ldr	r2, [r2, #0]
 800b84c:	601a      	str	r2, [r3, #0]
	for(uint8_t i = 0; i < MODULE_THERM_QTY; i++) {
 800b84e:	f897 3074 	ldrb.w	r3, [r7, #116]	@ 0x74
 800b852:	3301      	adds	r3, #1
 800b854:	f887 3074 	strb.w	r3, [r7, #116]	@ 0x74
 800b858:	f897 3074 	ldrb.w	r3, [r7, #116]	@ 0x74
 800b85c:	2b11      	cmp	r3, #17
 800b85e:	d9e9      	bls.n	800b834 <read_thermistors+0x91c>
	}
}
 800b860:	bf00      	nop
 800b862:	bf00      	nop
 800b864:	378c      	adds	r7, #140	@ 0x8c
 800b866:	46bd      	mov	sp, r7
 800b868:	bd90      	pop	{r4, r7, pc}
 800b86a:	bf00      	nop
 800b86c:	f3af 8000 	nop.w
 800b870:	00000000 	.word	0x00000000
 800b874:	40affe00 	.word	0x40affe00
 800b878:	66666666 	.word	0x66666666
 800b87c:	400a6666 	.word	0x400a6666
 800b880:	2000007c 	.word	0x2000007c
 800b884:	cccccccd 	.word	0xcccccccd
 800b888:	40020000 	.word	0x40020000
 800b88c:	40020800 	.word	0x40020800

0800b890 <voltage_sense>:
#include "torch_voltage.h"
#include "torch_can.h"


void voltage_sense(uint16_t *cellVoltages)
{
 800b890:	b580      	push	{r7, lr}
 800b892:	b096      	sub	sp, #88	@ 0x58
 800b894:	af00      	add	r7, sp, #0
 800b896:	6078      	str	r0, [r7, #4]
	uint8_t attempts = 0;
 800b898:	2300      	movs	r3, #0
 800b89a:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	uint8_t sideB_cellVoltageA_PECflag;
	uint8_t sideB_cellVoltageB_PECflag;
	uint8_t sideB_cellVoltageC_PECflag;
	uint8_t sideB_cellVoltageD_PECflag;

	while(attempts < ATTEMPT_LIMIT) {
 800b89e:	e10e      	b.n	800babe <voltage_sense+0x22e>
		CLRCELL(SIDE_A);
 800b8a0:	2001      	movs	r0, #1
 800b8a2:	f7fe f8f3 	bl	8009a8c <CLRCELL>
		CLRCELL(SIDE_B);
 800b8a6:	2000      	movs	r0, #0
 800b8a8:	f7fe f8f0 	bl	8009a8c <CLRCELL>
		wait(3);
 800b8ac:	2003      	movs	r0, #3
 800b8ae:	f7fe ffa9 	bl	800a804 <wait>

		ADCV(SIDE_A);
 800b8b2:	2001      	movs	r0, #1
 800b8b4:	f7fe f8c7 	bl	8009a46 <ADCV>
		ADCV(SIDE_B);
 800b8b8:	2000      	movs	r0, #0
 800b8ba:	f7fe f8c4 	bl	8009a46 <ADCV>
		wait(3);
 800b8be:	2003      	movs	r0, #3
 800b8c0:	f7fe ffa0 	bl	800a804 <wait>

		RDCVA(sideA_cellVoltageA, SIDE_A);
 800b8c4:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 800b8c8:	2101      	movs	r1, #1
 800b8ca:	4618      	mov	r0, r3
 800b8cc:	f7fd fdea 	bl	80094a4 <RDCVA>
		RDCVA(sideB_cellVoltageA, SIDE_B);
 800b8d0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b8d4:	2100      	movs	r1, #0
 800b8d6:	4618      	mov	r0, r3
 800b8d8:	f7fd fde4 	bl	80094a4 <RDCVA>
		wait(1);
 800b8dc:	2001      	movs	r0, #1
 800b8de:	f7fe ff91 	bl	800a804 <wait>
		RDCVB(sideA_cellVoltageB, SIDE_A);
 800b8e2:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800b8e6:	2101      	movs	r1, #1
 800b8e8:	4618      	mov	r0, r3
 800b8ea:	f7fd fdff 	bl	80094ec <RDCVB>
		RDCVB(sideB_cellVoltageB, SIDE_B);
 800b8ee:	f107 031c 	add.w	r3, r7, #28
 800b8f2:	2100      	movs	r1, #0
 800b8f4:	4618      	mov	r0, r3
 800b8f6:	f7fd fdf9 	bl	80094ec <RDCVB>
		wait(1);
 800b8fa:	2001      	movs	r0, #1
 800b8fc:	f7fe ff82 	bl	800a804 <wait>
		RDCVC(sideA_cellVoltageC, SIDE_A);
 800b900:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800b904:	2101      	movs	r1, #1
 800b906:	4618      	mov	r0, r3
 800b908:	f7fd fe14 	bl	8009534 <RDCVC>
		RDCVC(sideB_cellVoltageC, SIDE_B);
 800b90c:	f107 0314 	add.w	r3, r7, #20
 800b910:	2100      	movs	r1, #0
 800b912:	4618      	mov	r0, r3
 800b914:	f7fd fe0e 	bl	8009534 <RDCVC>
		wait(1);
 800b918:	2001      	movs	r0, #1
 800b91a:	f7fe ff73 	bl	800a804 <wait>
		RDCVD(sideA_cellVoltageD, SIDE_A);
 800b91e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800b922:	2101      	movs	r1, #1
 800b924:	4618      	mov	r0, r3
 800b926:	f7fd fe29 	bl	800957c <RDCVD>
		RDCVD(sideB_cellVoltageD, SIDE_B);
 800b92a:	f107 030c 	add.w	r3, r7, #12
 800b92e:	2100      	movs	r1, #0
 800b930:	4618      	mov	r0, r3
 800b932:	f7fd fe23 	bl	800957c <RDCVD>

		sideA_cellVoltageA_PECflag = verify_PEC15(sideA_cellVoltageA);
 800b936:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 800b93a:	4618      	mov	r0, r3
 800b93c:	f7fd fbe5 	bl	800910a <verify_PEC15>
 800b940:	4603      	mov	r3, r0
 800b942:	f887 3056 	strb.w	r3, [r7, #86]	@ 0x56
		sideA_cellVoltageB_PECflag = verify_PEC15(sideA_cellVoltageB);
 800b946:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800b94a:	4618      	mov	r0, r3
 800b94c:	f7fd fbdd 	bl	800910a <verify_PEC15>
 800b950:	4603      	mov	r3, r0
 800b952:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
		sideA_cellVoltageC_PECflag = verify_PEC15(sideA_cellVoltageC);
 800b956:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800b95a:	4618      	mov	r0, r3
 800b95c:	f7fd fbd5 	bl	800910a <verify_PEC15>
 800b960:	4603      	mov	r3, r0
 800b962:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
		sideA_cellVoltageD_PECflag = verify_PEC15(sideA_cellVoltageD);
 800b966:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800b96a:	4618      	mov	r0, r3
 800b96c:	f7fd fbcd 	bl	800910a <verify_PEC15>
 800b970:	4603      	mov	r3, r0
 800b972:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53

		sideB_cellVoltageA_PECflag = verify_PEC15(sideB_cellVoltageA);
 800b976:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b97a:	4618      	mov	r0, r3
 800b97c:	f7fd fbc5 	bl	800910a <verify_PEC15>
 800b980:	4603      	mov	r3, r0
 800b982:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
		sideB_cellVoltageB_PECflag = verify_PEC15(sideB_cellVoltageB);
 800b986:	f107 031c 	add.w	r3, r7, #28
 800b98a:	4618      	mov	r0, r3
 800b98c:	f7fd fbbd 	bl	800910a <verify_PEC15>
 800b990:	4603      	mov	r3, r0
 800b992:	f887 3051 	strb.w	r3, [r7, #81]	@ 0x51
		sideB_cellVoltageC_PECflag = verify_PEC15(sideB_cellVoltageC);
 800b996:	f107 0314 	add.w	r3, r7, #20
 800b99a:	4618      	mov	r0, r3
 800b99c:	f7fd fbb5 	bl	800910a <verify_PEC15>
 800b9a0:	4603      	mov	r3, r0
 800b9a2:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
		sideB_cellVoltageD_PECflag = verify_PEC15(sideB_cellVoltageD);
 800b9a6:	f107 030c 	add.w	r3, r7, #12
 800b9aa:	4618      	mov	r0, r3
 800b9ac:	f7fd fbad 	bl	800910a <verify_PEC15>
 800b9b0:	4603      	mov	r3, r0
 800b9b2:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

		if(sideA_cellVoltageA_PECflag == 2 &&
 800b9b6:	f897 3056 	ldrb.w	r3, [r7, #86]	@ 0x56
 800b9ba:	2b02      	cmp	r3, #2
 800b9bc:	d177      	bne.n	800baae <voltage_sense+0x21e>
 800b9be:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 800b9c2:	2b02      	cmp	r3, #2
 800b9c4:	d173      	bne.n	800baae <voltage_sense+0x21e>
		   sideA_cellVoltageB_PECflag == 2 &&
 800b9c6:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 800b9ca:	2b02      	cmp	r3, #2
 800b9cc:	d16f      	bne.n	800baae <voltage_sense+0x21e>
		   sideA_cellVoltageC_PECflag == 2 &&
 800b9ce:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 800b9d2:	2b02      	cmp	r3, #2
 800b9d4:	d16b      	bne.n	800baae <voltage_sense+0x21e>
		   sideA_cellVoltageD_PECflag == 2 &&
 800b9d6:	f897 3052 	ldrb.w	r3, [r7, #82]	@ 0x52
 800b9da:	2b02      	cmp	r3, #2
 800b9dc:	d167      	bne.n	800baae <voltage_sense+0x21e>
		   sideB_cellVoltageA_PECflag == 2 &&
 800b9de:	f897 3051 	ldrb.w	r3, [r7, #81]	@ 0x51
 800b9e2:	2b02      	cmp	r3, #2
 800b9e4:	d163      	bne.n	800baae <voltage_sense+0x21e>
		   sideB_cellVoltageB_PECflag == 2 &&
 800b9e6:	f897 3050 	ldrb.w	r3, [r7, #80]	@ 0x50
 800b9ea:	2b02      	cmp	r3, #2
 800b9ec:	d15f      	bne.n	800baae <voltage_sense+0x21e>
		   sideB_cellVoltageC_PECflag == 2 &&
 800b9ee:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800b9f2:	2b02      	cmp	r3, #2
 800b9f4:	d15b      	bne.n	800baae <voltage_sense+0x21e>
		   sideB_cellVoltageD_PECflag == 2 &&
		   sideA_cellVoltageA[1] != 0xFF &&
 800b9f6:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
		   sideB_cellVoltageD_PECflag == 2 &&
 800b9fa:	2bff      	cmp	r3, #255	@ 0xff
 800b9fc:	d057      	beq.n	800baae <voltage_sense+0x21e>
		   sideA_cellVoltageA[3] != 0xFF &&
 800b9fe:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
		   sideA_cellVoltageA[1] != 0xFF &&
 800ba02:	2bff      	cmp	r3, #255	@ 0xff
 800ba04:	d053      	beq.n	800baae <voltage_sense+0x21e>
		   sideA_cellVoltageA[5] != 0xFF &&
 800ba06:	f897 3049 	ldrb.w	r3, [r7, #73]	@ 0x49
		   sideA_cellVoltageA[3] != 0xFF &&
 800ba0a:	2bff      	cmp	r3, #255	@ 0xff
 800ba0c:	d04f      	beq.n	800baae <voltage_sense+0x21e>
		   sideB_cellVoltageA[1] != 0xFF &&
 800ba0e:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
		   sideA_cellVoltageA[5] != 0xFF &&
 800ba12:	2bff      	cmp	r3, #255	@ 0xff
 800ba14:	d04b      	beq.n	800baae <voltage_sense+0x21e>
		   sideB_cellVoltageA[3] != 0xFF &&
 800ba16:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
		   sideB_cellVoltageA[1] != 0xFF &&
 800ba1a:	2bff      	cmp	r3, #255	@ 0xff
 800ba1c:	d047      	beq.n	800baae <voltage_sense+0x21e>
		   sideB_cellVoltageA[5] != 0xFF &&
 800ba1e:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
		   sideB_cellVoltageA[3] != 0xFF &&
 800ba22:	2bff      	cmp	r3, #255	@ 0xff
 800ba24:	d043      	beq.n	800baae <voltage_sense+0x21e>
		   sideA_cellVoltageB[1] != 0xFF &&
 800ba26:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
		   sideB_cellVoltageA[5] != 0xFF &&
 800ba2a:	2bff      	cmp	r3, #255	@ 0xff
 800ba2c:	d03f      	beq.n	800baae <voltage_sense+0x21e>
		   sideA_cellVoltageB[3] != 0xFF &&
 800ba2e:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
		   sideA_cellVoltageB[1] != 0xFF &&
 800ba32:	2bff      	cmp	r3, #255	@ 0xff
 800ba34:	d03b      	beq.n	800baae <voltage_sense+0x21e>
		   sideA_cellVoltageB[5] != 0xFF &&
 800ba36:	f897 3041 	ldrb.w	r3, [r7, #65]	@ 0x41
		   sideA_cellVoltageB[3] != 0xFF &&
 800ba3a:	2bff      	cmp	r3, #255	@ 0xff
 800ba3c:	d037      	beq.n	800baae <voltage_sense+0x21e>
		   sideB_cellVoltageB[1] != 0xFF &&
 800ba3e:	7f7b      	ldrb	r3, [r7, #29]
		   sideA_cellVoltageB[5] != 0xFF &&
 800ba40:	2bff      	cmp	r3, #255	@ 0xff
 800ba42:	d034      	beq.n	800baae <voltage_sense+0x21e>
		   sideB_cellVoltageB[3] != 0xFF &&
 800ba44:	7ffb      	ldrb	r3, [r7, #31]
		   sideB_cellVoltageB[1] != 0xFF &&
 800ba46:	2bff      	cmp	r3, #255	@ 0xff
 800ba48:	d031      	beq.n	800baae <voltage_sense+0x21e>
		   sideB_cellVoltageB[5] != 0xFF &&
 800ba4a:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
		   sideB_cellVoltageB[3] != 0xFF &&
 800ba4e:	2bff      	cmp	r3, #255	@ 0xff
 800ba50:	d02d      	beq.n	800baae <voltage_sense+0x21e>
		   sideA_cellVoltageC[1] != 0xFF &&
 800ba52:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
		   sideB_cellVoltageB[5] != 0xFF &&
 800ba56:	2bff      	cmp	r3, #255	@ 0xff
 800ba58:	d029      	beq.n	800baae <voltage_sense+0x21e>
		   sideA_cellVoltageC[3] != 0xFF &&
 800ba5a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
		   sideA_cellVoltageC[1] != 0xFF &&
 800ba5e:	2bff      	cmp	r3, #255	@ 0xff
 800ba60:	d025      	beq.n	800baae <voltage_sense+0x21e>
		   sideA_cellVoltageC[5] != 0xFF &&
 800ba62:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
		   sideA_cellVoltageC[3] != 0xFF &&
 800ba66:	2bff      	cmp	r3, #255	@ 0xff
 800ba68:	d021      	beq.n	800baae <voltage_sense+0x21e>
		   sideB_cellVoltageC[1] != 0xFF &&
 800ba6a:	7d7b      	ldrb	r3, [r7, #21]
		   sideA_cellVoltageC[5] != 0xFF &&
 800ba6c:	2bff      	cmp	r3, #255	@ 0xff
 800ba6e:	d01e      	beq.n	800baae <voltage_sense+0x21e>
		   sideB_cellVoltageC[3] != 0xFF &&
 800ba70:	7dfb      	ldrb	r3, [r7, #23]
		   sideB_cellVoltageC[1] != 0xFF &&
 800ba72:	2bff      	cmp	r3, #255	@ 0xff
 800ba74:	d01b      	beq.n	800baae <voltage_sense+0x21e>
		   sideB_cellVoltageC[5] != 0xFF &&
 800ba76:	7e7b      	ldrb	r3, [r7, #25]
		   sideB_cellVoltageC[3] != 0xFF &&
 800ba78:	2bff      	cmp	r3, #255	@ 0xff
 800ba7a:	d018      	beq.n	800baae <voltage_sense+0x21e>
		   sideA_cellVoltageD[1] != 0xFF &&
 800ba7c:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
		   sideB_cellVoltageC[5] != 0xFF &&
 800ba80:	2bff      	cmp	r3, #255	@ 0xff
 800ba82:	d014      	beq.n	800baae <voltage_sense+0x21e>
		   sideA_cellVoltageD[3] != 0xFF &&
 800ba84:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
		   sideA_cellVoltageD[1] != 0xFF &&
 800ba88:	2bff      	cmp	r3, #255	@ 0xff
 800ba8a:	d010      	beq.n	800baae <voltage_sense+0x21e>
		   sideA_cellVoltageD[5] != 0xFF &&
 800ba8c:	f897 3031 	ldrb.w	r3, [r7, #49]	@ 0x31
		   sideA_cellVoltageD[3] != 0xFF &&
 800ba90:	2bff      	cmp	r3, #255	@ 0xff
 800ba92:	d00c      	beq.n	800baae <voltage_sense+0x21e>
		   sideB_cellVoltageD[1] != 0xFF &&
 800ba94:	7b7b      	ldrb	r3, [r7, #13]
		   sideA_cellVoltageD[5] != 0xFF &&
 800ba96:	2bff      	cmp	r3, #255	@ 0xff
 800ba98:	d009      	beq.n	800baae <voltage_sense+0x21e>
		   sideB_cellVoltageD[3] != 0xFF &&
 800ba9a:	7bfb      	ldrb	r3, [r7, #15]
		   sideB_cellVoltageD[1] != 0xFF &&
 800ba9c:	2bff      	cmp	r3, #255	@ 0xff
 800ba9e:	d006      	beq.n	800baae <voltage_sense+0x21e>
		   sideB_cellVoltageD[5] != 0xFF)
 800baa0:	7c7b      	ldrb	r3, [r7, #17]
		   sideB_cellVoltageD[3] != 0xFF &&
 800baa2:	2bff      	cmp	r3, #255	@ 0xff
 800baa4:	d003      	beq.n	800baae <voltage_sense+0x21e>
		{
			attempts = 13;
 800baa6:	230d      	movs	r3, #13
 800baa8:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
 800baac:	e007      	b.n	800babe <voltage_sense+0x22e>
		}
		else {
			attempts++;
 800baae:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800bab2:	3301      	adds	r3, #1
 800bab4:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			wait(1);
 800bab8:	2001      	movs	r0, #1
 800baba:	f7fe fea3 	bl	800a804 <wait>
	while(attempts < ATTEMPT_LIMIT) {
 800babe:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800bac2:	2b09      	cmp	r3, #9
 800bac4:	f67f aeec 	bls.w	800b8a0 <voltage_sense+0x10>
		}
	}
	//if(attempts != 13) { error_loop(ERROR_PEC, 0, 0); }

	*cellVoltages = (sideA_cellVoltageA[1] << 8) | sideA_cellVoltageA[0];
 800bac8:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 800bacc:	b21b      	sxth	r3, r3
 800bace:	021b      	lsls	r3, r3, #8
 800bad0:	b21a      	sxth	r2, r3
 800bad2:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 800bad6:	b21b      	sxth	r3, r3
 800bad8:	4313      	orrs	r3, r2
 800bada:	b21b      	sxth	r3, r3
 800badc:	b29a      	uxth	r2, r3
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	801a      	strh	r2, [r3, #0]
	*(cellVoltages + 1) = (sideA_cellVoltageA[3] << 8) | sideA_cellVoltageA[2];
 800bae2:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800bae6:	b21b      	sxth	r3, r3
 800bae8:	021b      	lsls	r3, r3, #8
 800baea:	b21a      	sxth	r2, r3
 800baec:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800baf0:	b21b      	sxth	r3, r3
 800baf2:	4313      	orrs	r3, r2
 800baf4:	b21a      	sxth	r2, r3
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	3302      	adds	r3, #2
 800bafa:	b292      	uxth	r2, r2
 800bafc:	801a      	strh	r2, [r3, #0]
	*(cellVoltages + 2) = (sideA_cellVoltageA[5] << 8) | sideA_cellVoltageA[4];
 800bafe:	f897 3049 	ldrb.w	r3, [r7, #73]	@ 0x49
 800bb02:	b21b      	sxth	r3, r3
 800bb04:	021b      	lsls	r3, r3, #8
 800bb06:	b21a      	sxth	r2, r3
 800bb08:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 800bb0c:	b21b      	sxth	r3, r3
 800bb0e:	4313      	orrs	r3, r2
 800bb10:	b21a      	sxth	r2, r3
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	3304      	adds	r3, #4
 800bb16:	b292      	uxth	r2, r2
 800bb18:	801a      	strh	r2, [r3, #0]
	*(cellVoltages + 3) = (sideA_cellVoltageB[1] << 8) | sideA_cellVoltageB[0];
 800bb1a:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 800bb1e:	b21b      	sxth	r3, r3
 800bb20:	021b      	lsls	r3, r3, #8
 800bb22:	b21a      	sxth	r2, r3
 800bb24:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 800bb28:	b21b      	sxth	r3, r3
 800bb2a:	4313      	orrs	r3, r2
 800bb2c:	b21a      	sxth	r2, r3
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	3306      	adds	r3, #6
 800bb32:	b292      	uxth	r2, r2
 800bb34:	801a      	strh	r2, [r3, #0]
	*(cellVoltages + 4) = (sideA_cellVoltageB[3] << 8) | sideA_cellVoltageB[2];
 800bb36:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800bb3a:	b21b      	sxth	r3, r3
 800bb3c:	021b      	lsls	r3, r3, #8
 800bb3e:	b21a      	sxth	r2, r3
 800bb40:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 800bb44:	b21b      	sxth	r3, r3
 800bb46:	4313      	orrs	r3, r2
 800bb48:	b21a      	sxth	r2, r3
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	3308      	adds	r3, #8
 800bb4e:	b292      	uxth	r2, r2
 800bb50:	801a      	strh	r2, [r3, #0]
	*(cellVoltages + 5) = (sideA_cellVoltageB[5] << 8) | sideA_cellVoltageB[4];
 800bb52:	f897 3041 	ldrb.w	r3, [r7, #65]	@ 0x41
 800bb56:	b21b      	sxth	r3, r3
 800bb58:	021b      	lsls	r3, r3, #8
 800bb5a:	b21a      	sxth	r2, r3
 800bb5c:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 800bb60:	b21b      	sxth	r3, r3
 800bb62:	4313      	orrs	r3, r2
 800bb64:	b21a      	sxth	r2, r3
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	330a      	adds	r3, #10
 800bb6a:	b292      	uxth	r2, r2
 800bb6c:	801a      	strh	r2, [r3, #0]
	*(cellVoltages + 6) = (sideA_cellVoltageC[1] << 8) | sideA_cellVoltageC[0];
 800bb6e:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 800bb72:	b21b      	sxth	r3, r3
 800bb74:	021b      	lsls	r3, r3, #8
 800bb76:	b21a      	sxth	r2, r3
 800bb78:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 800bb7c:	b21b      	sxth	r3, r3
 800bb7e:	4313      	orrs	r3, r2
 800bb80:	b21a      	sxth	r2, r3
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	330c      	adds	r3, #12
 800bb86:	b292      	uxth	r2, r2
 800bb88:	801a      	strh	r2, [r3, #0]
	*(cellVoltages + 7) = (sideA_cellVoltageC[3] << 8) | sideA_cellVoltageC[2];
 800bb8a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800bb8e:	b21b      	sxth	r3, r3
 800bb90:	021b      	lsls	r3, r3, #8
 800bb92:	b21a      	sxth	r2, r3
 800bb94:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800bb98:	b21b      	sxth	r3, r3
 800bb9a:	4313      	orrs	r3, r2
 800bb9c:	b21a      	sxth	r2, r3
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	330e      	adds	r3, #14
 800bba2:	b292      	uxth	r2, r2
 800bba4:	801a      	strh	r2, [r3, #0]
	*(cellVoltages + 8) = (sideA_cellVoltageC[5] << 8) | sideA_cellVoltageC[4];
 800bba6:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 800bbaa:	b21b      	sxth	r3, r3
 800bbac:	021b      	lsls	r3, r3, #8
 800bbae:	b21a      	sxth	r2, r3
 800bbb0:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 800bbb4:	b21b      	sxth	r3, r3
 800bbb6:	4313      	orrs	r3, r2
 800bbb8:	b21a      	sxth	r2, r3
 800bbba:	687b      	ldr	r3, [r7, #4]
 800bbbc:	3310      	adds	r3, #16
 800bbbe:	b292      	uxth	r2, r2
 800bbc0:	801a      	strh	r2, [r3, #0]
	*(cellVoltages + 9) = (sideA_cellVoltageD[1] << 8) | sideA_cellVoltageD[0];
 800bbc2:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 800bbc6:	b21b      	sxth	r3, r3
 800bbc8:	021b      	lsls	r3, r3, #8
 800bbca:	b21a      	sxth	r2, r3
 800bbcc:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800bbd0:	b21b      	sxth	r3, r3
 800bbd2:	4313      	orrs	r3, r2
 800bbd4:	b21a      	sxth	r2, r3
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	3312      	adds	r3, #18
 800bbda:	b292      	uxth	r2, r2
 800bbdc:	801a      	strh	r2, [r3, #0]

	*(cellVoltages + 10) = (sideB_cellVoltageA[1] << 8) | sideB_cellVoltageA[0];
 800bbde:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800bbe2:	b21b      	sxth	r3, r3
 800bbe4:	021b      	lsls	r3, r3, #8
 800bbe6:	b21a      	sxth	r2, r3
 800bbe8:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800bbec:	b21b      	sxth	r3, r3
 800bbee:	4313      	orrs	r3, r2
 800bbf0:	b21a      	sxth	r2, r3
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	3314      	adds	r3, #20
 800bbf6:	b292      	uxth	r2, r2
 800bbf8:	801a      	strh	r2, [r3, #0]
	*(cellVoltages + 11) = (sideB_cellVoltageA[3] << 8) | sideB_cellVoltageA[2];
 800bbfa:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800bbfe:	b21b      	sxth	r3, r3
 800bc00:	021b      	lsls	r3, r3, #8
 800bc02:	b21a      	sxth	r2, r3
 800bc04:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800bc08:	b21b      	sxth	r3, r3
 800bc0a:	4313      	orrs	r3, r2
 800bc0c:	b21a      	sxth	r2, r3
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	3316      	adds	r3, #22
 800bc12:	b292      	uxth	r2, r2
 800bc14:	801a      	strh	r2, [r3, #0]
	*(cellVoltages + 12) = (sideB_cellVoltageA[5] << 8) | sideB_cellVoltageA[4];
 800bc16:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800bc1a:	b21b      	sxth	r3, r3
 800bc1c:	021b      	lsls	r3, r3, #8
 800bc1e:	b21a      	sxth	r2, r3
 800bc20:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800bc24:	b21b      	sxth	r3, r3
 800bc26:	4313      	orrs	r3, r2
 800bc28:	b21a      	sxth	r2, r3
 800bc2a:	687b      	ldr	r3, [r7, #4]
 800bc2c:	3318      	adds	r3, #24
 800bc2e:	b292      	uxth	r2, r2
 800bc30:	801a      	strh	r2, [r3, #0]
	*(cellVoltages + 13) = (sideB_cellVoltageB[1] << 8) | sideB_cellVoltageB[0];
 800bc32:	7f7b      	ldrb	r3, [r7, #29]
 800bc34:	b21b      	sxth	r3, r3
 800bc36:	021b      	lsls	r3, r3, #8
 800bc38:	b21a      	sxth	r2, r3
 800bc3a:	7f3b      	ldrb	r3, [r7, #28]
 800bc3c:	b21b      	sxth	r3, r3
 800bc3e:	4313      	orrs	r3, r2
 800bc40:	b21a      	sxth	r2, r3
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	331a      	adds	r3, #26
 800bc46:	b292      	uxth	r2, r2
 800bc48:	801a      	strh	r2, [r3, #0]
	*(cellVoltages + 14) = (sideB_cellVoltageB[3] << 8) | sideB_cellVoltageB[2];
 800bc4a:	7ffb      	ldrb	r3, [r7, #31]
 800bc4c:	b21b      	sxth	r3, r3
 800bc4e:	021b      	lsls	r3, r3, #8
 800bc50:	b21a      	sxth	r2, r3
 800bc52:	7fbb      	ldrb	r3, [r7, #30]
 800bc54:	b21b      	sxth	r3, r3
 800bc56:	4313      	orrs	r3, r2
 800bc58:	b21a      	sxth	r2, r3
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	331c      	adds	r3, #28
 800bc5e:	b292      	uxth	r2, r2
 800bc60:	801a      	strh	r2, [r3, #0]
	*(cellVoltages + 15) = (sideB_cellVoltageB[5] << 8) | sideB_cellVoltageB[4];
 800bc62:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800bc66:	b21b      	sxth	r3, r3
 800bc68:	021b      	lsls	r3, r3, #8
 800bc6a:	b21a      	sxth	r2, r3
 800bc6c:	f897 3020 	ldrb.w	r3, [r7, #32]
 800bc70:	b21b      	sxth	r3, r3
 800bc72:	4313      	orrs	r3, r2
 800bc74:	b21a      	sxth	r2, r3
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	331e      	adds	r3, #30
 800bc7a:	b292      	uxth	r2, r2
 800bc7c:	801a      	strh	r2, [r3, #0]
	*(cellVoltages + 16) = (sideB_cellVoltageC[1] << 8) | sideB_cellVoltageC[0];
 800bc7e:	7d7b      	ldrb	r3, [r7, #21]
 800bc80:	b21b      	sxth	r3, r3
 800bc82:	021b      	lsls	r3, r3, #8
 800bc84:	b21a      	sxth	r2, r3
 800bc86:	7d3b      	ldrb	r3, [r7, #20]
 800bc88:	b21b      	sxth	r3, r3
 800bc8a:	4313      	orrs	r3, r2
 800bc8c:	b21a      	sxth	r2, r3
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	3320      	adds	r3, #32
 800bc92:	b292      	uxth	r2, r2
 800bc94:	801a      	strh	r2, [r3, #0]
	*(cellVoltages + 17) = (sideB_cellVoltageC[3] << 8) | sideB_cellVoltageC[2];
 800bc96:	7dfb      	ldrb	r3, [r7, #23]
 800bc98:	b21b      	sxth	r3, r3
 800bc9a:	021b      	lsls	r3, r3, #8
 800bc9c:	b21a      	sxth	r2, r3
 800bc9e:	7dbb      	ldrb	r3, [r7, #22]
 800bca0:	b21b      	sxth	r3, r3
 800bca2:	4313      	orrs	r3, r2
 800bca4:	b21a      	sxth	r2, r3
 800bca6:	687b      	ldr	r3, [r7, #4]
 800bca8:	3322      	adds	r3, #34	@ 0x22
 800bcaa:	b292      	uxth	r2, r2
 800bcac:	801a      	strh	r2, [r3, #0]
	*(cellVoltages + 18) = (sideB_cellVoltageC[5] << 8) | sideB_cellVoltageC[4];
 800bcae:	7e7b      	ldrb	r3, [r7, #25]
 800bcb0:	b21b      	sxth	r3, r3
 800bcb2:	021b      	lsls	r3, r3, #8
 800bcb4:	b21a      	sxth	r2, r3
 800bcb6:	7e3b      	ldrb	r3, [r7, #24]
 800bcb8:	b21b      	sxth	r3, r3
 800bcba:	4313      	orrs	r3, r2
 800bcbc:	b21a      	sxth	r2, r3
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	3324      	adds	r3, #36	@ 0x24
 800bcc2:	b292      	uxth	r2, r2
 800bcc4:	801a      	strh	r2, [r3, #0]
	*(cellVoltages + 19) = (sideB_cellVoltageD[1] << 8) | sideB_cellVoltageD[0];
 800bcc6:	7b7b      	ldrb	r3, [r7, #13]
 800bcc8:	b21b      	sxth	r3, r3
 800bcca:	021b      	lsls	r3, r3, #8
 800bccc:	b21a      	sxth	r2, r3
 800bcce:	7b3b      	ldrb	r3, [r7, #12]
 800bcd0:	b21b      	sxth	r3, r3
 800bcd2:	4313      	orrs	r3, r2
 800bcd4:	b21a      	sxth	r2, r3
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	3326      	adds	r3, #38	@ 0x26
 800bcda:	b292      	uxth	r2, r2
 800bcdc:	801a      	strh	r2, [r3, #0]

}
 800bcde:	bf00      	nop
 800bce0:	3758      	adds	r7, #88	@ 0x58
 800bce2:	46bd      	mov	sp, r7
 800bce4:	bd80      	pop	{r7, pc}
	...

0800bce8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800bce8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800bd20 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800bcec:	f7f5 fd24 	bl	8001738 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800bcf0:	480c      	ldr	r0, [pc, #48]	@ (800bd24 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800bcf2:	490d      	ldr	r1, [pc, #52]	@ (800bd28 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800bcf4:	4a0d      	ldr	r2, [pc, #52]	@ (800bd2c <LoopFillZerobss+0x1a>)
  movs r3, #0
 800bcf6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800bcf8:	e002      	b.n	800bd00 <LoopCopyDataInit>

0800bcfa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800bcfa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800bcfc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800bcfe:	3304      	adds	r3, #4

0800bd00 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800bd00:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800bd02:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800bd04:	d3f9      	bcc.n	800bcfa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800bd06:	4a0a      	ldr	r2, [pc, #40]	@ (800bd30 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800bd08:	4c0a      	ldr	r4, [pc, #40]	@ (800bd34 <LoopFillZerobss+0x22>)
  movs r3, #0
 800bd0a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800bd0c:	e001      	b.n	800bd12 <LoopFillZerobss>

0800bd0e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800bd0e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800bd10:	3204      	adds	r2, #4

0800bd12 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800bd12:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800bd14:	d3fb      	bcc.n	800bd0e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800bd16:	f003 fce9 	bl	800f6ec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800bd1a:	f7f5 f829 	bl	8000d70 <main>
  bx  lr    
 800bd1e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800bd20:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800bd24:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800bd28:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 800bd2c:	0801016c 	.word	0x0801016c
  ldr r2, =_sbss
 800bd30:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 800bd34:	20000534 	.word	0x20000534

0800bd38 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800bd38:	e7fe      	b.n	800bd38 <ADC_IRQHandler>
	...

0800bd3c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800bd3c:	b580      	push	{r7, lr}
 800bd3e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800bd40:	4b0e      	ldr	r3, [pc, #56]	@ (800bd7c <HAL_Init+0x40>)
 800bd42:	681b      	ldr	r3, [r3, #0]
 800bd44:	4a0d      	ldr	r2, [pc, #52]	@ (800bd7c <HAL_Init+0x40>)
 800bd46:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800bd4a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800bd4c:	4b0b      	ldr	r3, [pc, #44]	@ (800bd7c <HAL_Init+0x40>)
 800bd4e:	681b      	ldr	r3, [r3, #0]
 800bd50:	4a0a      	ldr	r2, [pc, #40]	@ (800bd7c <HAL_Init+0x40>)
 800bd52:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800bd56:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800bd58:	4b08      	ldr	r3, [pc, #32]	@ (800bd7c <HAL_Init+0x40>)
 800bd5a:	681b      	ldr	r3, [r3, #0]
 800bd5c:	4a07      	ldr	r2, [pc, #28]	@ (800bd7c <HAL_Init+0x40>)
 800bd5e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800bd62:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800bd64:	2003      	movs	r0, #3
 800bd66:	f001 fc1b 	bl	800d5a0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800bd6a:	200f      	movs	r0, #15
 800bd6c:	f000 f808 	bl	800bd80 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800bd70:	f7f5 fb3c 	bl	80013ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800bd74:	2300      	movs	r3, #0
}
 800bd76:	4618      	mov	r0, r3
 800bd78:	bd80      	pop	{r7, pc}
 800bd7a:	bf00      	nop
 800bd7c:	40023c00 	.word	0x40023c00

0800bd80 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800bd80:	b580      	push	{r7, lr}
 800bd82:	b082      	sub	sp, #8
 800bd84:	af00      	add	r7, sp, #0
 800bd86:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800bd88:	4b12      	ldr	r3, [pc, #72]	@ (800bdd4 <HAL_InitTick+0x54>)
 800bd8a:	681a      	ldr	r2, [r3, #0]
 800bd8c:	4b12      	ldr	r3, [pc, #72]	@ (800bdd8 <HAL_InitTick+0x58>)
 800bd8e:	781b      	ldrb	r3, [r3, #0]
 800bd90:	4619      	mov	r1, r3
 800bd92:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800bd96:	fbb3 f3f1 	udiv	r3, r3, r1
 800bd9a:	fbb2 f3f3 	udiv	r3, r2, r3
 800bd9e:	4618      	mov	r0, r3
 800bda0:	f001 fc33 	bl	800d60a <HAL_SYSTICK_Config>
 800bda4:	4603      	mov	r3, r0
 800bda6:	2b00      	cmp	r3, #0
 800bda8:	d001      	beq.n	800bdae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800bdaa:	2301      	movs	r3, #1
 800bdac:	e00e      	b.n	800bdcc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	2b0f      	cmp	r3, #15
 800bdb2:	d80a      	bhi.n	800bdca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800bdb4:	2200      	movs	r2, #0
 800bdb6:	6879      	ldr	r1, [r7, #4]
 800bdb8:	f04f 30ff 	mov.w	r0, #4294967295
 800bdbc:	f001 fbfb 	bl	800d5b6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800bdc0:	4a06      	ldr	r2, [pc, #24]	@ (800bddc <HAL_InitTick+0x5c>)
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800bdc6:	2300      	movs	r3, #0
 800bdc8:	e000      	b.n	800bdcc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800bdca:	2301      	movs	r3, #1
}
 800bdcc:	4618      	mov	r0, r3
 800bdce:	3708      	adds	r7, #8
 800bdd0:	46bd      	mov	sp, r7
 800bdd2:	bd80      	pop	{r7, pc}
 800bdd4:	20000000 	.word	0x20000000
 800bdd8:	2000000c 	.word	0x2000000c
 800bddc:	20000008 	.word	0x20000008

0800bde0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800bde0:	b480      	push	{r7}
 800bde2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800bde4:	4b06      	ldr	r3, [pc, #24]	@ (800be00 <HAL_IncTick+0x20>)
 800bde6:	781b      	ldrb	r3, [r3, #0]
 800bde8:	461a      	mov	r2, r3
 800bdea:	4b06      	ldr	r3, [pc, #24]	@ (800be04 <HAL_IncTick+0x24>)
 800bdec:	681b      	ldr	r3, [r3, #0]
 800bdee:	4413      	add	r3, r2
 800bdf0:	4a04      	ldr	r2, [pc, #16]	@ (800be04 <HAL_IncTick+0x24>)
 800bdf2:	6013      	str	r3, [r2, #0]
}
 800bdf4:	bf00      	nop
 800bdf6:	46bd      	mov	sp, r7
 800bdf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdfc:	4770      	bx	lr
 800bdfe:	bf00      	nop
 800be00:	2000000c 	.word	0x2000000c
 800be04:	200003f8 	.word	0x200003f8

0800be08 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800be08:	b480      	push	{r7}
 800be0a:	af00      	add	r7, sp, #0
  return uwTick;
 800be0c:	4b03      	ldr	r3, [pc, #12]	@ (800be1c <HAL_GetTick+0x14>)
 800be0e:	681b      	ldr	r3, [r3, #0]
}
 800be10:	4618      	mov	r0, r3
 800be12:	46bd      	mov	sp, r7
 800be14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be18:	4770      	bx	lr
 800be1a:	bf00      	nop
 800be1c:	200003f8 	.word	0x200003f8

0800be20 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800be20:	b580      	push	{r7, lr}
 800be22:	b084      	sub	sp, #16
 800be24:	af00      	add	r7, sp, #0
 800be26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800be28:	f7ff ffee 	bl	800be08 <HAL_GetTick>
 800be2c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800be2e:	687b      	ldr	r3, [r7, #4]
 800be30:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800be32:	68fb      	ldr	r3, [r7, #12]
 800be34:	f1b3 3fff 	cmp.w	r3, #4294967295
 800be38:	d005      	beq.n	800be46 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800be3a:	4b0a      	ldr	r3, [pc, #40]	@ (800be64 <HAL_Delay+0x44>)
 800be3c:	781b      	ldrb	r3, [r3, #0]
 800be3e:	461a      	mov	r2, r3
 800be40:	68fb      	ldr	r3, [r7, #12]
 800be42:	4413      	add	r3, r2
 800be44:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800be46:	bf00      	nop
 800be48:	f7ff ffde 	bl	800be08 <HAL_GetTick>
 800be4c:	4602      	mov	r2, r0
 800be4e:	68bb      	ldr	r3, [r7, #8]
 800be50:	1ad3      	subs	r3, r2, r3
 800be52:	68fa      	ldr	r2, [r7, #12]
 800be54:	429a      	cmp	r2, r3
 800be56:	d8f7      	bhi.n	800be48 <HAL_Delay+0x28>
  {
  }
}
 800be58:	bf00      	nop
 800be5a:	bf00      	nop
 800be5c:	3710      	adds	r7, #16
 800be5e:	46bd      	mov	sp, r7
 800be60:	bd80      	pop	{r7, pc}
 800be62:	bf00      	nop
 800be64:	2000000c 	.word	0x2000000c

0800be68 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800be68:	b580      	push	{r7, lr}
 800be6a:	b084      	sub	sp, #16
 800be6c:	af00      	add	r7, sp, #0
 800be6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800be70:	2300      	movs	r3, #0
 800be72:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	2b00      	cmp	r3, #0
 800be78:	d101      	bne.n	800be7e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800be7a:	2301      	movs	r3, #1
 800be7c:	e033      	b.n	800bee6 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800be82:	2b00      	cmp	r3, #0
 800be84:	d109      	bne.n	800be9a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800be86:	6878      	ldr	r0, [r7, #4]
 800be88:	f7f5 fad8 	bl	800143c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	2200      	movs	r2, #0
 800be90:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	2200      	movs	r2, #0
 800be96:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800be9e:	f003 0310 	and.w	r3, r3, #16
 800bea2:	2b00      	cmp	r3, #0
 800bea4:	d118      	bne.n	800bed8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800beaa:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800beae:	f023 0302 	bic.w	r3, r3, #2
 800beb2:	f043 0202 	orr.w	r2, r3, #2
 800beb6:	687b      	ldr	r3, [r7, #4]
 800beb8:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 800beba:	6878      	ldr	r0, [r7, #4]
 800bebc:	f000 fae8 	bl	800c490 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	2200      	movs	r2, #0
 800bec4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800beca:	f023 0303 	bic.w	r3, r3, #3
 800bece:	f043 0201 	orr.w	r2, r3, #1
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	641a      	str	r2, [r3, #64]	@ 0x40
 800bed6:	e001      	b.n	800bedc <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800bed8:	2301      	movs	r3, #1
 800beda:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	2200      	movs	r2, #0
 800bee0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 800bee4:	7bfb      	ldrb	r3, [r7, #15]
}
 800bee6:	4618      	mov	r0, r3
 800bee8:	3710      	adds	r7, #16
 800beea:	46bd      	mov	sp, r7
 800beec:	bd80      	pop	{r7, pc}
	...

0800bef0 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 800bef0:	b480      	push	{r7}
 800bef2:	b085      	sub	sp, #20
 800bef4:	af00      	add	r7, sp, #0
 800bef6:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 800bef8:	2300      	movs	r3, #0
 800befa:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800bf02:	2b01      	cmp	r3, #1
 800bf04:	d101      	bne.n	800bf0a <HAL_ADC_Start+0x1a>
 800bf06:	2302      	movs	r3, #2
 800bf08:	e0b2      	b.n	800c070 <HAL_ADC_Start+0x180>
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	2201      	movs	r2, #1
 800bf0e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	681b      	ldr	r3, [r3, #0]
 800bf16:	689b      	ldr	r3, [r3, #8]
 800bf18:	f003 0301 	and.w	r3, r3, #1
 800bf1c:	2b01      	cmp	r3, #1
 800bf1e:	d018      	beq.n	800bf52 <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	681b      	ldr	r3, [r3, #0]
 800bf24:	689a      	ldr	r2, [r3, #8]
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	681b      	ldr	r3, [r3, #0]
 800bf2a:	f042 0201 	orr.w	r2, r2, #1
 800bf2e:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800bf30:	4b52      	ldr	r3, [pc, #328]	@ (800c07c <HAL_ADC_Start+0x18c>)
 800bf32:	681b      	ldr	r3, [r3, #0]
 800bf34:	4a52      	ldr	r2, [pc, #328]	@ (800c080 <HAL_ADC_Start+0x190>)
 800bf36:	fba2 2303 	umull	r2, r3, r2, r3
 800bf3a:	0c9a      	lsrs	r2, r3, #18
 800bf3c:	4613      	mov	r3, r2
 800bf3e:	005b      	lsls	r3, r3, #1
 800bf40:	4413      	add	r3, r2
 800bf42:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 800bf44:	e002      	b.n	800bf4c <HAL_ADC_Start+0x5c>
    {
      counter--;
 800bf46:	68bb      	ldr	r3, [r7, #8]
 800bf48:	3b01      	subs	r3, #1
 800bf4a:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 800bf4c:	68bb      	ldr	r3, [r7, #8]
 800bf4e:	2b00      	cmp	r3, #0
 800bf50:	d1f9      	bne.n	800bf46 <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	681b      	ldr	r3, [r3, #0]
 800bf56:	689b      	ldr	r3, [r3, #8]
 800bf58:	f003 0301 	and.w	r3, r3, #1
 800bf5c:	2b01      	cmp	r3, #1
 800bf5e:	d17a      	bne.n	800c056 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bf64:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 800bf68:	f023 0301 	bic.w	r3, r3, #1
 800bf6c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	681b      	ldr	r3, [r3, #0]
 800bf78:	685b      	ldr	r3, [r3, #4]
 800bf7a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800bf7e:	2b00      	cmp	r3, #0
 800bf80:	d007      	beq.n	800bf92 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bf86:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800bf8a:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bf96:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800bf9a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800bf9e:	d106      	bne.n	800bfae <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bfa4:	f023 0206 	bic.w	r2, r3, #6
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	645a      	str	r2, [r3, #68]	@ 0x44
 800bfac:	e002      	b.n	800bfb4 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800bfae:	687b      	ldr	r3, [r7, #4]
 800bfb0:	2200      	movs	r2, #0
 800bfb2:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	2200      	movs	r2, #0
 800bfb8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800bfbc:	4b31      	ldr	r3, [pc, #196]	@ (800c084 <HAL_ADC_Start+0x194>)
 800bfbe:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800bfc0:	687b      	ldr	r3, [r7, #4]
 800bfc2:	681b      	ldr	r3, [r3, #0]
 800bfc4:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 800bfc8:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800bfca:	68fb      	ldr	r3, [r7, #12]
 800bfcc:	685b      	ldr	r3, [r3, #4]
 800bfce:	f003 031f 	and.w	r3, r3, #31
 800bfd2:	2b00      	cmp	r3, #0
 800bfd4:	d12a      	bne.n	800c02c <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	681b      	ldr	r3, [r3, #0]
 800bfda:	4a2b      	ldr	r2, [pc, #172]	@ (800c088 <HAL_ADC_Start+0x198>)
 800bfdc:	4293      	cmp	r3, r2
 800bfde:	d015      	beq.n	800c00c <HAL_ADC_Start+0x11c>
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	681b      	ldr	r3, [r3, #0]
 800bfe4:	4a29      	ldr	r2, [pc, #164]	@ (800c08c <HAL_ADC_Start+0x19c>)
 800bfe6:	4293      	cmp	r3, r2
 800bfe8:	d105      	bne.n	800bff6 <HAL_ADC_Start+0x106>
 800bfea:	4b26      	ldr	r3, [pc, #152]	@ (800c084 <HAL_ADC_Start+0x194>)
 800bfec:	685b      	ldr	r3, [r3, #4]
 800bfee:	f003 031f 	and.w	r3, r3, #31
 800bff2:	2b00      	cmp	r3, #0
 800bff4:	d00a      	beq.n	800c00c <HAL_ADC_Start+0x11c>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	681b      	ldr	r3, [r3, #0]
 800bffa:	4a25      	ldr	r2, [pc, #148]	@ (800c090 <HAL_ADC_Start+0x1a0>)
 800bffc:	4293      	cmp	r3, r2
 800bffe:	d136      	bne.n	800c06e <HAL_ADC_Start+0x17e>
 800c000:	4b20      	ldr	r3, [pc, #128]	@ (800c084 <HAL_ADC_Start+0x194>)
 800c002:	685b      	ldr	r3, [r3, #4]
 800c004:	f003 0310 	and.w	r3, r3, #16
 800c008:	2b00      	cmp	r3, #0
 800c00a:	d130      	bne.n	800c06e <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	681b      	ldr	r3, [r3, #0]
 800c010:	689b      	ldr	r3, [r3, #8]
 800c012:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800c016:	2b00      	cmp	r3, #0
 800c018:	d129      	bne.n	800c06e <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	681b      	ldr	r3, [r3, #0]
 800c01e:	689a      	ldr	r2, [r3, #8]
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	681b      	ldr	r3, [r3, #0]
 800c024:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800c028:	609a      	str	r2, [r3, #8]
 800c02a:	e020      	b.n	800c06e <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	681b      	ldr	r3, [r3, #0]
 800c030:	4a15      	ldr	r2, [pc, #84]	@ (800c088 <HAL_ADC_Start+0x198>)
 800c032:	4293      	cmp	r3, r2
 800c034:	d11b      	bne.n	800c06e <HAL_ADC_Start+0x17e>
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	681b      	ldr	r3, [r3, #0]
 800c03a:	689b      	ldr	r3, [r3, #8]
 800c03c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800c040:	2b00      	cmp	r3, #0
 800c042:	d114      	bne.n	800c06e <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	681b      	ldr	r3, [r3, #0]
 800c048:	689a      	ldr	r2, [r3, #8]
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	681b      	ldr	r3, [r3, #0]
 800c04e:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800c052:	609a      	str	r2, [r3, #8]
 800c054:	e00b      	b.n	800c06e <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c05a:	f043 0210 	orr.w	r2, r3, #16
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c066:	f043 0201 	orr.w	r2, r3, #1
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 800c06e:	2300      	movs	r3, #0
}
 800c070:	4618      	mov	r0, r3
 800c072:	3714      	adds	r7, #20
 800c074:	46bd      	mov	sp, r7
 800c076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c07a:	4770      	bx	lr
 800c07c:	20000000 	.word	0x20000000
 800c080:	431bde83 	.word	0x431bde83
 800c084:	40012300 	.word	0x40012300
 800c088:	40012000 	.word	0x40012000
 800c08c:	40012100 	.word	0x40012100
 800c090:	40012200 	.word	0x40012200

0800c094 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 800c094:	b480      	push	{r7}
 800c096:	b083      	sub	sp, #12
 800c098:	af00      	add	r7, sp, #0
 800c09a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800c0a2:	2b01      	cmp	r3, #1
 800c0a4:	d101      	bne.n	800c0aa <HAL_ADC_Stop+0x16>
 800c0a6:	2302      	movs	r3, #2
 800c0a8:	e021      	b.n	800c0ee <HAL_ADC_Stop+0x5a>
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	2201      	movs	r2, #1
 800c0ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	681b      	ldr	r3, [r3, #0]
 800c0b6:	689a      	ldr	r2, [r3, #8]
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	681b      	ldr	r3, [r3, #0]
 800c0bc:	f022 0201 	bic.w	r2, r2, #1
 800c0c0:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	681b      	ldr	r3, [r3, #0]
 800c0c6:	689b      	ldr	r3, [r3, #8]
 800c0c8:	f003 0301 	and.w	r3, r3, #1
 800c0cc:	2b00      	cmp	r3, #0
 800c0ce:	d109      	bne.n	800c0e4 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c0d4:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800c0d8:	f023 0301 	bic.w	r3, r3, #1
 800c0dc:	f043 0201 	orr.w	r2, r3, #1
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	2200      	movs	r2, #0
 800c0e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 800c0ec:	2300      	movs	r3, #0
}
 800c0ee:	4618      	mov	r0, r3
 800c0f0:	370c      	adds	r7, #12
 800c0f2:	46bd      	mov	sp, r7
 800c0f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0f8:	4770      	bx	lr

0800c0fa <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 800c0fa:	b580      	push	{r7, lr}
 800c0fc:	b084      	sub	sp, #16
 800c0fe:	af00      	add	r7, sp, #0
 800c100:	6078      	str	r0, [r7, #4]
 800c102:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800c104:	2300      	movs	r3, #0
 800c106:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	681b      	ldr	r3, [r3, #0]
 800c10c:	689b      	ldr	r3, [r3, #8]
 800c10e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c112:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c116:	d113      	bne.n	800c140 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	681b      	ldr	r3, [r3, #0]
 800c11c:	689b      	ldr	r3, [r3, #8]
 800c11e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800c122:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c126:	d10b      	bne.n	800c140 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c12c:	f043 0220 	orr.w	r2, r3, #32
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	2200      	movs	r2, #0
 800c138:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800c13c:	2301      	movs	r3, #1
 800c13e:	e063      	b.n	800c208 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 800c140:	f7ff fe62 	bl	800be08 <HAL_GetTick>
 800c144:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800c146:	e021      	b.n	800c18c <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800c148:	683b      	ldr	r3, [r7, #0]
 800c14a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c14e:	d01d      	beq.n	800c18c <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800c150:	683b      	ldr	r3, [r7, #0]
 800c152:	2b00      	cmp	r3, #0
 800c154:	d007      	beq.n	800c166 <HAL_ADC_PollForConversion+0x6c>
 800c156:	f7ff fe57 	bl	800be08 <HAL_GetTick>
 800c15a:	4602      	mov	r2, r0
 800c15c:	68fb      	ldr	r3, [r7, #12]
 800c15e:	1ad3      	subs	r3, r2, r3
 800c160:	683a      	ldr	r2, [r7, #0]
 800c162:	429a      	cmp	r2, r3
 800c164:	d212      	bcs.n	800c18c <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	681b      	ldr	r3, [r3, #0]
 800c16a:	681b      	ldr	r3, [r3, #0]
 800c16c:	f003 0302 	and.w	r3, r3, #2
 800c170:	2b02      	cmp	r3, #2
 800c172:	d00b      	beq.n	800c18c <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c178:	f043 0204 	orr.w	r2, r3, #4
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	2200      	movs	r2, #0
 800c184:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 800c188:	2303      	movs	r3, #3
 800c18a:	e03d      	b.n	800c208 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	681b      	ldr	r3, [r3, #0]
 800c190:	681b      	ldr	r3, [r3, #0]
 800c192:	f003 0302 	and.w	r3, r3, #2
 800c196:	2b02      	cmp	r3, #2
 800c198:	d1d6      	bne.n	800c148 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	681b      	ldr	r3, [r3, #0]
 800c19e:	f06f 0212 	mvn.w	r2, #18
 800c1a2:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c1a8:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	681b      	ldr	r3, [r3, #0]
 800c1b4:	689b      	ldr	r3, [r3, #8]
 800c1b6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800c1ba:	2b00      	cmp	r3, #0
 800c1bc:	d123      	bne.n	800c206 <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800c1be:	687b      	ldr	r3, [r7, #4]
 800c1c0:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800c1c2:	2b00      	cmp	r3, #0
 800c1c4:	d11f      	bne.n	800c206 <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	681b      	ldr	r3, [r3, #0]
 800c1ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c1cc:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800c1d0:	2b00      	cmp	r3, #0
 800c1d2:	d006      	beq.n	800c1e2 <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	681b      	ldr	r3, [r3, #0]
 800c1d8:	689b      	ldr	r3, [r3, #8]
 800c1da:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800c1de:	2b00      	cmp	r3, #0
 800c1e0:	d111      	bne.n	800c206 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800c1e2:	687b      	ldr	r3, [r7, #4]
 800c1e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c1e6:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800c1ee:	687b      	ldr	r3, [r7, #4]
 800c1f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c1f2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800c1f6:	2b00      	cmp	r3, #0
 800c1f8:	d105      	bne.n	800c206 <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c1fe:	f043 0201 	orr.w	r2, r3, #1
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 800c206:	2300      	movs	r3, #0
}
 800c208:	4618      	mov	r0, r3
 800c20a:	3710      	adds	r7, #16
 800c20c:	46bd      	mov	sp, r7
 800c20e:	bd80      	pop	{r7, pc}

0800c210 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 800c210:	b480      	push	{r7}
 800c212:	b083      	sub	sp, #12
 800c214:	af00      	add	r7, sp, #0
 800c216:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	681b      	ldr	r3, [r3, #0]
 800c21c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 800c21e:	4618      	mov	r0, r3
 800c220:	370c      	adds	r7, #12
 800c222:	46bd      	mov	sp, r7
 800c224:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c228:	4770      	bx	lr
	...

0800c22c <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800c22c:	b480      	push	{r7}
 800c22e:	b085      	sub	sp, #20
 800c230:	af00      	add	r7, sp, #0
 800c232:	6078      	str	r0, [r7, #4]
 800c234:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800c236:	2300      	movs	r3, #0
 800c238:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 800c23a:	687b      	ldr	r3, [r7, #4]
 800c23c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800c240:	2b01      	cmp	r3, #1
 800c242:	d101      	bne.n	800c248 <HAL_ADC_ConfigChannel+0x1c>
 800c244:	2302      	movs	r3, #2
 800c246:	e113      	b.n	800c470 <HAL_ADC_ConfigChannel+0x244>
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	2201      	movs	r2, #1
 800c24c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800c250:	683b      	ldr	r3, [r7, #0]
 800c252:	681b      	ldr	r3, [r3, #0]
 800c254:	2b09      	cmp	r3, #9
 800c256:	d925      	bls.n	800c2a4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	681b      	ldr	r3, [r3, #0]
 800c25c:	68d9      	ldr	r1, [r3, #12]
 800c25e:	683b      	ldr	r3, [r7, #0]
 800c260:	681b      	ldr	r3, [r3, #0]
 800c262:	b29b      	uxth	r3, r3
 800c264:	461a      	mov	r2, r3
 800c266:	4613      	mov	r3, r2
 800c268:	005b      	lsls	r3, r3, #1
 800c26a:	4413      	add	r3, r2
 800c26c:	3b1e      	subs	r3, #30
 800c26e:	2207      	movs	r2, #7
 800c270:	fa02 f303 	lsl.w	r3, r2, r3
 800c274:	43da      	mvns	r2, r3
 800c276:	687b      	ldr	r3, [r7, #4]
 800c278:	681b      	ldr	r3, [r3, #0]
 800c27a:	400a      	ands	r2, r1
 800c27c:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800c27e:	687b      	ldr	r3, [r7, #4]
 800c280:	681b      	ldr	r3, [r3, #0]
 800c282:	68d9      	ldr	r1, [r3, #12]
 800c284:	683b      	ldr	r3, [r7, #0]
 800c286:	689a      	ldr	r2, [r3, #8]
 800c288:	683b      	ldr	r3, [r7, #0]
 800c28a:	681b      	ldr	r3, [r3, #0]
 800c28c:	b29b      	uxth	r3, r3
 800c28e:	4618      	mov	r0, r3
 800c290:	4603      	mov	r3, r0
 800c292:	005b      	lsls	r3, r3, #1
 800c294:	4403      	add	r3, r0
 800c296:	3b1e      	subs	r3, #30
 800c298:	409a      	lsls	r2, r3
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	681b      	ldr	r3, [r3, #0]
 800c29e:	430a      	orrs	r2, r1
 800c2a0:	60da      	str	r2, [r3, #12]
 800c2a2:	e022      	b.n	800c2ea <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	681b      	ldr	r3, [r3, #0]
 800c2a8:	6919      	ldr	r1, [r3, #16]
 800c2aa:	683b      	ldr	r3, [r7, #0]
 800c2ac:	681b      	ldr	r3, [r3, #0]
 800c2ae:	b29b      	uxth	r3, r3
 800c2b0:	461a      	mov	r2, r3
 800c2b2:	4613      	mov	r3, r2
 800c2b4:	005b      	lsls	r3, r3, #1
 800c2b6:	4413      	add	r3, r2
 800c2b8:	2207      	movs	r2, #7
 800c2ba:	fa02 f303 	lsl.w	r3, r2, r3
 800c2be:	43da      	mvns	r2, r3
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	681b      	ldr	r3, [r3, #0]
 800c2c4:	400a      	ands	r2, r1
 800c2c6:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	681b      	ldr	r3, [r3, #0]
 800c2cc:	6919      	ldr	r1, [r3, #16]
 800c2ce:	683b      	ldr	r3, [r7, #0]
 800c2d0:	689a      	ldr	r2, [r3, #8]
 800c2d2:	683b      	ldr	r3, [r7, #0]
 800c2d4:	681b      	ldr	r3, [r3, #0]
 800c2d6:	b29b      	uxth	r3, r3
 800c2d8:	4618      	mov	r0, r3
 800c2da:	4603      	mov	r3, r0
 800c2dc:	005b      	lsls	r3, r3, #1
 800c2de:	4403      	add	r3, r0
 800c2e0:	409a      	lsls	r2, r3
 800c2e2:	687b      	ldr	r3, [r7, #4]
 800c2e4:	681b      	ldr	r3, [r3, #0]
 800c2e6:	430a      	orrs	r2, r1
 800c2e8:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800c2ea:	683b      	ldr	r3, [r7, #0]
 800c2ec:	685b      	ldr	r3, [r3, #4]
 800c2ee:	2b06      	cmp	r3, #6
 800c2f0:	d824      	bhi.n	800c33c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800c2f2:	687b      	ldr	r3, [r7, #4]
 800c2f4:	681b      	ldr	r3, [r3, #0]
 800c2f6:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800c2f8:	683b      	ldr	r3, [r7, #0]
 800c2fa:	685a      	ldr	r2, [r3, #4]
 800c2fc:	4613      	mov	r3, r2
 800c2fe:	009b      	lsls	r3, r3, #2
 800c300:	4413      	add	r3, r2
 800c302:	3b05      	subs	r3, #5
 800c304:	221f      	movs	r2, #31
 800c306:	fa02 f303 	lsl.w	r3, r2, r3
 800c30a:	43da      	mvns	r2, r3
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	681b      	ldr	r3, [r3, #0]
 800c310:	400a      	ands	r2, r1
 800c312:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800c314:	687b      	ldr	r3, [r7, #4]
 800c316:	681b      	ldr	r3, [r3, #0]
 800c318:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800c31a:	683b      	ldr	r3, [r7, #0]
 800c31c:	681b      	ldr	r3, [r3, #0]
 800c31e:	b29b      	uxth	r3, r3
 800c320:	4618      	mov	r0, r3
 800c322:	683b      	ldr	r3, [r7, #0]
 800c324:	685a      	ldr	r2, [r3, #4]
 800c326:	4613      	mov	r3, r2
 800c328:	009b      	lsls	r3, r3, #2
 800c32a:	4413      	add	r3, r2
 800c32c:	3b05      	subs	r3, #5
 800c32e:	fa00 f203 	lsl.w	r2, r0, r3
 800c332:	687b      	ldr	r3, [r7, #4]
 800c334:	681b      	ldr	r3, [r3, #0]
 800c336:	430a      	orrs	r2, r1
 800c338:	635a      	str	r2, [r3, #52]	@ 0x34
 800c33a:	e04c      	b.n	800c3d6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800c33c:	683b      	ldr	r3, [r7, #0]
 800c33e:	685b      	ldr	r3, [r3, #4]
 800c340:	2b0c      	cmp	r3, #12
 800c342:	d824      	bhi.n	800c38e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800c344:	687b      	ldr	r3, [r7, #4]
 800c346:	681b      	ldr	r3, [r3, #0]
 800c348:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800c34a:	683b      	ldr	r3, [r7, #0]
 800c34c:	685a      	ldr	r2, [r3, #4]
 800c34e:	4613      	mov	r3, r2
 800c350:	009b      	lsls	r3, r3, #2
 800c352:	4413      	add	r3, r2
 800c354:	3b23      	subs	r3, #35	@ 0x23
 800c356:	221f      	movs	r2, #31
 800c358:	fa02 f303 	lsl.w	r3, r2, r3
 800c35c:	43da      	mvns	r2, r3
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	681b      	ldr	r3, [r3, #0]
 800c362:	400a      	ands	r2, r1
 800c364:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800c366:	687b      	ldr	r3, [r7, #4]
 800c368:	681b      	ldr	r3, [r3, #0]
 800c36a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800c36c:	683b      	ldr	r3, [r7, #0]
 800c36e:	681b      	ldr	r3, [r3, #0]
 800c370:	b29b      	uxth	r3, r3
 800c372:	4618      	mov	r0, r3
 800c374:	683b      	ldr	r3, [r7, #0]
 800c376:	685a      	ldr	r2, [r3, #4]
 800c378:	4613      	mov	r3, r2
 800c37a:	009b      	lsls	r3, r3, #2
 800c37c:	4413      	add	r3, r2
 800c37e:	3b23      	subs	r3, #35	@ 0x23
 800c380:	fa00 f203 	lsl.w	r2, r0, r3
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	681b      	ldr	r3, [r3, #0]
 800c388:	430a      	orrs	r2, r1
 800c38a:	631a      	str	r2, [r3, #48]	@ 0x30
 800c38c:	e023      	b.n	800c3d6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	681b      	ldr	r3, [r3, #0]
 800c392:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800c394:	683b      	ldr	r3, [r7, #0]
 800c396:	685a      	ldr	r2, [r3, #4]
 800c398:	4613      	mov	r3, r2
 800c39a:	009b      	lsls	r3, r3, #2
 800c39c:	4413      	add	r3, r2
 800c39e:	3b41      	subs	r3, #65	@ 0x41
 800c3a0:	221f      	movs	r2, #31
 800c3a2:	fa02 f303 	lsl.w	r3, r2, r3
 800c3a6:	43da      	mvns	r2, r3
 800c3a8:	687b      	ldr	r3, [r7, #4]
 800c3aa:	681b      	ldr	r3, [r3, #0]
 800c3ac:	400a      	ands	r2, r1
 800c3ae:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800c3b0:	687b      	ldr	r3, [r7, #4]
 800c3b2:	681b      	ldr	r3, [r3, #0]
 800c3b4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800c3b6:	683b      	ldr	r3, [r7, #0]
 800c3b8:	681b      	ldr	r3, [r3, #0]
 800c3ba:	b29b      	uxth	r3, r3
 800c3bc:	4618      	mov	r0, r3
 800c3be:	683b      	ldr	r3, [r7, #0]
 800c3c0:	685a      	ldr	r2, [r3, #4]
 800c3c2:	4613      	mov	r3, r2
 800c3c4:	009b      	lsls	r3, r3, #2
 800c3c6:	4413      	add	r3, r2
 800c3c8:	3b41      	subs	r3, #65	@ 0x41
 800c3ca:	fa00 f203 	lsl.w	r2, r0, r3
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	681b      	ldr	r3, [r3, #0]
 800c3d2:	430a      	orrs	r2, r1
 800c3d4:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800c3d6:	4b29      	ldr	r3, [pc, #164]	@ (800c47c <HAL_ADC_ConfigChannel+0x250>)
 800c3d8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	681b      	ldr	r3, [r3, #0]
 800c3de:	4a28      	ldr	r2, [pc, #160]	@ (800c480 <HAL_ADC_ConfigChannel+0x254>)
 800c3e0:	4293      	cmp	r3, r2
 800c3e2:	d10f      	bne.n	800c404 <HAL_ADC_ConfigChannel+0x1d8>
 800c3e4:	683b      	ldr	r3, [r7, #0]
 800c3e6:	681b      	ldr	r3, [r3, #0]
 800c3e8:	2b12      	cmp	r3, #18
 800c3ea:	d10b      	bne.n	800c404 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 800c3ec:	68fb      	ldr	r3, [r7, #12]
 800c3ee:	685b      	ldr	r3, [r3, #4]
 800c3f0:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 800c3f4:	68fb      	ldr	r3, [r7, #12]
 800c3f6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800c3f8:	68fb      	ldr	r3, [r7, #12]
 800c3fa:	685b      	ldr	r3, [r3, #4]
 800c3fc:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 800c400:	68fb      	ldr	r3, [r7, #12]
 800c402:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	681b      	ldr	r3, [r3, #0]
 800c408:	4a1d      	ldr	r2, [pc, #116]	@ (800c480 <HAL_ADC_ConfigChannel+0x254>)
 800c40a:	4293      	cmp	r3, r2
 800c40c:	d12b      	bne.n	800c466 <HAL_ADC_ConfigChannel+0x23a>
 800c40e:	683b      	ldr	r3, [r7, #0]
 800c410:	681b      	ldr	r3, [r3, #0]
 800c412:	4a1c      	ldr	r2, [pc, #112]	@ (800c484 <HAL_ADC_ConfigChannel+0x258>)
 800c414:	4293      	cmp	r3, r2
 800c416:	d003      	beq.n	800c420 <HAL_ADC_ConfigChannel+0x1f4>
 800c418:	683b      	ldr	r3, [r7, #0]
 800c41a:	681b      	ldr	r3, [r3, #0]
 800c41c:	2b11      	cmp	r3, #17
 800c41e:	d122      	bne.n	800c466 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 800c420:	68fb      	ldr	r3, [r7, #12]
 800c422:	685b      	ldr	r3, [r3, #4]
 800c424:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 800c428:	68fb      	ldr	r3, [r7, #12]
 800c42a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800c42c:	68fb      	ldr	r3, [r7, #12]
 800c42e:	685b      	ldr	r3, [r3, #4]
 800c430:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 800c434:	68fb      	ldr	r3, [r7, #12]
 800c436:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800c438:	683b      	ldr	r3, [r7, #0]
 800c43a:	681b      	ldr	r3, [r3, #0]
 800c43c:	4a11      	ldr	r2, [pc, #68]	@ (800c484 <HAL_ADC_ConfigChannel+0x258>)
 800c43e:	4293      	cmp	r3, r2
 800c440:	d111      	bne.n	800c466 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800c442:	4b11      	ldr	r3, [pc, #68]	@ (800c488 <HAL_ADC_ConfigChannel+0x25c>)
 800c444:	681b      	ldr	r3, [r3, #0]
 800c446:	4a11      	ldr	r2, [pc, #68]	@ (800c48c <HAL_ADC_ConfigChannel+0x260>)
 800c448:	fba2 2303 	umull	r2, r3, r2, r3
 800c44c:	0c9a      	lsrs	r2, r3, #18
 800c44e:	4613      	mov	r3, r2
 800c450:	009b      	lsls	r3, r3, #2
 800c452:	4413      	add	r3, r2
 800c454:	005b      	lsls	r3, r3, #1
 800c456:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 800c458:	e002      	b.n	800c460 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800c45a:	68bb      	ldr	r3, [r7, #8]
 800c45c:	3b01      	subs	r3, #1
 800c45e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 800c460:	68bb      	ldr	r3, [r7, #8]
 800c462:	2b00      	cmp	r3, #0
 800c464:	d1f9      	bne.n	800c45a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800c466:	687b      	ldr	r3, [r7, #4]
 800c468:	2200      	movs	r2, #0
 800c46a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 800c46e:	2300      	movs	r3, #0
}
 800c470:	4618      	mov	r0, r3
 800c472:	3714      	adds	r7, #20
 800c474:	46bd      	mov	sp, r7
 800c476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c47a:	4770      	bx	lr
 800c47c:	40012300 	.word	0x40012300
 800c480:	40012000 	.word	0x40012000
 800c484:	10000012 	.word	0x10000012
 800c488:	20000000 	.word	0x20000000
 800c48c:	431bde83 	.word	0x431bde83

0800c490 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 800c490:	b480      	push	{r7}
 800c492:	b085      	sub	sp, #20
 800c494:	af00      	add	r7, sp, #0
 800c496:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800c498:	4b79      	ldr	r3, [pc, #484]	@ (800c680 <ADC_Init+0x1f0>)
 800c49a:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800c49c:	68fb      	ldr	r3, [r7, #12]
 800c49e:	685b      	ldr	r3, [r3, #4]
 800c4a0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800c4a4:	68fb      	ldr	r3, [r7, #12]
 800c4a6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800c4a8:	68fb      	ldr	r3, [r7, #12]
 800c4aa:	685a      	ldr	r2, [r3, #4]
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	685b      	ldr	r3, [r3, #4]
 800c4b0:	431a      	orrs	r2, r3
 800c4b2:	68fb      	ldr	r3, [r7, #12]
 800c4b4:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	681b      	ldr	r3, [r3, #0]
 800c4ba:	685a      	ldr	r2, [r3, #4]
 800c4bc:	687b      	ldr	r3, [r7, #4]
 800c4be:	681b      	ldr	r3, [r3, #0]
 800c4c0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800c4c4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800c4c6:	687b      	ldr	r3, [r7, #4]
 800c4c8:	681b      	ldr	r3, [r3, #0]
 800c4ca:	6859      	ldr	r1, [r3, #4]
 800c4cc:	687b      	ldr	r3, [r7, #4]
 800c4ce:	691b      	ldr	r3, [r3, #16]
 800c4d0:	021a      	lsls	r2, r3, #8
 800c4d2:	687b      	ldr	r3, [r7, #4]
 800c4d4:	681b      	ldr	r3, [r3, #0]
 800c4d6:	430a      	orrs	r2, r1
 800c4d8:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800c4da:	687b      	ldr	r3, [r7, #4]
 800c4dc:	681b      	ldr	r3, [r3, #0]
 800c4de:	685a      	ldr	r2, [r3, #4]
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	681b      	ldr	r3, [r3, #0]
 800c4e4:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 800c4e8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	681b      	ldr	r3, [r3, #0]
 800c4ee:	6859      	ldr	r1, [r3, #4]
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	689a      	ldr	r2, [r3, #8]
 800c4f4:	687b      	ldr	r3, [r7, #4]
 800c4f6:	681b      	ldr	r3, [r3, #0]
 800c4f8:	430a      	orrs	r2, r1
 800c4fa:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800c4fc:	687b      	ldr	r3, [r7, #4]
 800c4fe:	681b      	ldr	r3, [r3, #0]
 800c500:	689a      	ldr	r2, [r3, #8]
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	681b      	ldr	r3, [r3, #0]
 800c506:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800c50a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	681b      	ldr	r3, [r3, #0]
 800c510:	6899      	ldr	r1, [r3, #8]
 800c512:	687b      	ldr	r3, [r7, #4]
 800c514:	68da      	ldr	r2, [r3, #12]
 800c516:	687b      	ldr	r3, [r7, #4]
 800c518:	681b      	ldr	r3, [r3, #0]
 800c51a:	430a      	orrs	r2, r1
 800c51c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c522:	4a58      	ldr	r2, [pc, #352]	@ (800c684 <ADC_Init+0x1f4>)
 800c524:	4293      	cmp	r3, r2
 800c526:	d022      	beq.n	800c56e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	681b      	ldr	r3, [r3, #0]
 800c52c:	689a      	ldr	r2, [r3, #8]
 800c52e:	687b      	ldr	r3, [r7, #4]
 800c530:	681b      	ldr	r3, [r3, #0]
 800c532:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800c536:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	681b      	ldr	r3, [r3, #0]
 800c53c:	6899      	ldr	r1, [r3, #8]
 800c53e:	687b      	ldr	r3, [r7, #4]
 800c540:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800c542:	687b      	ldr	r3, [r7, #4]
 800c544:	681b      	ldr	r3, [r3, #0]
 800c546:	430a      	orrs	r2, r1
 800c548:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	681b      	ldr	r3, [r3, #0]
 800c54e:	689a      	ldr	r2, [r3, #8]
 800c550:	687b      	ldr	r3, [r7, #4]
 800c552:	681b      	ldr	r3, [r3, #0]
 800c554:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800c558:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	681b      	ldr	r3, [r3, #0]
 800c55e:	6899      	ldr	r1, [r3, #8]
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	681b      	ldr	r3, [r3, #0]
 800c568:	430a      	orrs	r2, r1
 800c56a:	609a      	str	r2, [r3, #8]
 800c56c:	e00f      	b.n	800c58e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800c56e:	687b      	ldr	r3, [r7, #4]
 800c570:	681b      	ldr	r3, [r3, #0]
 800c572:	689a      	ldr	r2, [r3, #8]
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	681b      	ldr	r3, [r3, #0]
 800c578:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800c57c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800c57e:	687b      	ldr	r3, [r7, #4]
 800c580:	681b      	ldr	r3, [r3, #0]
 800c582:	689a      	ldr	r2, [r3, #8]
 800c584:	687b      	ldr	r3, [r7, #4]
 800c586:	681b      	ldr	r3, [r3, #0]
 800c588:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800c58c:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800c58e:	687b      	ldr	r3, [r7, #4]
 800c590:	681b      	ldr	r3, [r3, #0]
 800c592:	689a      	ldr	r2, [r3, #8]
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	681b      	ldr	r3, [r3, #0]
 800c598:	f022 0202 	bic.w	r2, r2, #2
 800c59c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800c59e:	687b      	ldr	r3, [r7, #4]
 800c5a0:	681b      	ldr	r3, [r3, #0]
 800c5a2:	6899      	ldr	r1, [r3, #8]
 800c5a4:	687b      	ldr	r3, [r7, #4]
 800c5a6:	7e1b      	ldrb	r3, [r3, #24]
 800c5a8:	005a      	lsls	r2, r3, #1
 800c5aa:	687b      	ldr	r3, [r7, #4]
 800c5ac:	681b      	ldr	r3, [r3, #0]
 800c5ae:	430a      	orrs	r2, r1
 800c5b0:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800c5b2:	687b      	ldr	r3, [r7, #4]
 800c5b4:	f893 3020 	ldrb.w	r3, [r3, #32]
 800c5b8:	2b00      	cmp	r3, #0
 800c5ba:	d01b      	beq.n	800c5f4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	681b      	ldr	r3, [r3, #0]
 800c5c0:	685a      	ldr	r2, [r3, #4]
 800c5c2:	687b      	ldr	r3, [r7, #4]
 800c5c4:	681b      	ldr	r3, [r3, #0]
 800c5c6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800c5ca:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	681b      	ldr	r3, [r3, #0]
 800c5d0:	685a      	ldr	r2, [r3, #4]
 800c5d2:	687b      	ldr	r3, [r7, #4]
 800c5d4:	681b      	ldr	r3, [r3, #0]
 800c5d6:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800c5da:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	681b      	ldr	r3, [r3, #0]
 800c5e0:	6859      	ldr	r1, [r3, #4]
 800c5e2:	687b      	ldr	r3, [r7, #4]
 800c5e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c5e6:	3b01      	subs	r3, #1
 800c5e8:	035a      	lsls	r2, r3, #13
 800c5ea:	687b      	ldr	r3, [r7, #4]
 800c5ec:	681b      	ldr	r3, [r3, #0]
 800c5ee:	430a      	orrs	r2, r1
 800c5f0:	605a      	str	r2, [r3, #4]
 800c5f2:	e007      	b.n	800c604 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800c5f4:	687b      	ldr	r3, [r7, #4]
 800c5f6:	681b      	ldr	r3, [r3, #0]
 800c5f8:	685a      	ldr	r2, [r3, #4]
 800c5fa:	687b      	ldr	r3, [r7, #4]
 800c5fc:	681b      	ldr	r3, [r3, #0]
 800c5fe:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800c602:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800c604:	687b      	ldr	r3, [r7, #4]
 800c606:	681b      	ldr	r3, [r3, #0]
 800c608:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	681b      	ldr	r3, [r3, #0]
 800c60e:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800c612:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	681b      	ldr	r3, [r3, #0]
 800c618:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800c61a:	687b      	ldr	r3, [r7, #4]
 800c61c:	69db      	ldr	r3, [r3, #28]
 800c61e:	3b01      	subs	r3, #1
 800c620:	051a      	lsls	r2, r3, #20
 800c622:	687b      	ldr	r3, [r7, #4]
 800c624:	681b      	ldr	r3, [r3, #0]
 800c626:	430a      	orrs	r2, r1
 800c628:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800c62a:	687b      	ldr	r3, [r7, #4]
 800c62c:	681b      	ldr	r3, [r3, #0]
 800c62e:	689a      	ldr	r2, [r3, #8]
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	681b      	ldr	r3, [r3, #0]
 800c634:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800c638:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	681b      	ldr	r3, [r3, #0]
 800c63e:	6899      	ldr	r1, [r3, #8]
 800c640:	687b      	ldr	r3, [r7, #4]
 800c642:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800c646:	025a      	lsls	r2, r3, #9
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	681b      	ldr	r3, [r3, #0]
 800c64c:	430a      	orrs	r2, r1
 800c64e:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	681b      	ldr	r3, [r3, #0]
 800c654:	689a      	ldr	r2, [r3, #8]
 800c656:	687b      	ldr	r3, [r7, #4]
 800c658:	681b      	ldr	r3, [r3, #0]
 800c65a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800c65e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800c660:	687b      	ldr	r3, [r7, #4]
 800c662:	681b      	ldr	r3, [r3, #0]
 800c664:	6899      	ldr	r1, [r3, #8]
 800c666:	687b      	ldr	r3, [r7, #4]
 800c668:	695b      	ldr	r3, [r3, #20]
 800c66a:	029a      	lsls	r2, r3, #10
 800c66c:	687b      	ldr	r3, [r7, #4]
 800c66e:	681b      	ldr	r3, [r3, #0]
 800c670:	430a      	orrs	r2, r1
 800c672:	609a      	str	r2, [r3, #8]
}
 800c674:	bf00      	nop
 800c676:	3714      	adds	r7, #20
 800c678:	46bd      	mov	sp, r7
 800c67a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c67e:	4770      	bx	lr
 800c680:	40012300 	.word	0x40012300
 800c684:	0f000001 	.word	0x0f000001

0800c688 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800c688:	b580      	push	{r7, lr}
 800c68a:	b084      	sub	sp, #16
 800c68c:	af00      	add	r7, sp, #0
 800c68e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	2b00      	cmp	r3, #0
 800c694:	d101      	bne.n	800c69a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800c696:	2301      	movs	r3, #1
 800c698:	e0ed      	b.n	800c876 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	f893 3020 	ldrb.w	r3, [r3, #32]
 800c6a0:	b2db      	uxtb	r3, r3
 800c6a2:	2b00      	cmp	r3, #0
 800c6a4:	d102      	bne.n	800c6ac <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800c6a6:	6878      	ldr	r0, [r7, #4]
 800c6a8:	f7f4 ff0c 	bl	80014c4 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800c6ac:	687b      	ldr	r3, [r7, #4]
 800c6ae:	681b      	ldr	r3, [r3, #0]
 800c6b0:	681a      	ldr	r2, [r3, #0]
 800c6b2:	687b      	ldr	r3, [r7, #4]
 800c6b4:	681b      	ldr	r3, [r3, #0]
 800c6b6:	f042 0201 	orr.w	r2, r2, #1
 800c6ba:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800c6bc:	f7ff fba4 	bl	800be08 <HAL_GetTick>
 800c6c0:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800c6c2:	e012      	b.n	800c6ea <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800c6c4:	f7ff fba0 	bl	800be08 <HAL_GetTick>
 800c6c8:	4602      	mov	r2, r0
 800c6ca:	68fb      	ldr	r3, [r7, #12]
 800c6cc:	1ad3      	subs	r3, r2, r3
 800c6ce:	2b0a      	cmp	r3, #10
 800c6d0:	d90b      	bls.n	800c6ea <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800c6d2:	687b      	ldr	r3, [r7, #4]
 800c6d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c6d6:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800c6da:	687b      	ldr	r3, [r7, #4]
 800c6dc:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	2205      	movs	r2, #5
 800c6e2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800c6e6:	2301      	movs	r3, #1
 800c6e8:	e0c5      	b.n	800c876 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	681b      	ldr	r3, [r3, #0]
 800c6ee:	685b      	ldr	r3, [r3, #4]
 800c6f0:	f003 0301 	and.w	r3, r3, #1
 800c6f4:	2b00      	cmp	r3, #0
 800c6f6:	d0e5      	beq.n	800c6c4 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	681b      	ldr	r3, [r3, #0]
 800c6fc:	681a      	ldr	r2, [r3, #0]
 800c6fe:	687b      	ldr	r3, [r7, #4]
 800c700:	681b      	ldr	r3, [r3, #0]
 800c702:	f022 0202 	bic.w	r2, r2, #2
 800c706:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800c708:	f7ff fb7e 	bl	800be08 <HAL_GetTick>
 800c70c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800c70e:	e012      	b.n	800c736 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800c710:	f7ff fb7a 	bl	800be08 <HAL_GetTick>
 800c714:	4602      	mov	r2, r0
 800c716:	68fb      	ldr	r3, [r7, #12]
 800c718:	1ad3      	subs	r3, r2, r3
 800c71a:	2b0a      	cmp	r3, #10
 800c71c:	d90b      	bls.n	800c736 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800c71e:	687b      	ldr	r3, [r7, #4]
 800c720:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c722:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800c726:	687b      	ldr	r3, [r7, #4]
 800c728:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	2205      	movs	r2, #5
 800c72e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800c732:	2301      	movs	r3, #1
 800c734:	e09f      	b.n	800c876 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800c736:	687b      	ldr	r3, [r7, #4]
 800c738:	681b      	ldr	r3, [r3, #0]
 800c73a:	685b      	ldr	r3, [r3, #4]
 800c73c:	f003 0302 	and.w	r3, r3, #2
 800c740:	2b00      	cmp	r3, #0
 800c742:	d1e5      	bne.n	800c710 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800c744:	687b      	ldr	r3, [r7, #4]
 800c746:	7e1b      	ldrb	r3, [r3, #24]
 800c748:	2b01      	cmp	r3, #1
 800c74a:	d108      	bne.n	800c75e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800c74c:	687b      	ldr	r3, [r7, #4]
 800c74e:	681b      	ldr	r3, [r3, #0]
 800c750:	681a      	ldr	r2, [r3, #0]
 800c752:	687b      	ldr	r3, [r7, #4]
 800c754:	681b      	ldr	r3, [r3, #0]
 800c756:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800c75a:	601a      	str	r2, [r3, #0]
 800c75c:	e007      	b.n	800c76e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800c75e:	687b      	ldr	r3, [r7, #4]
 800c760:	681b      	ldr	r3, [r3, #0]
 800c762:	681a      	ldr	r2, [r3, #0]
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	681b      	ldr	r3, [r3, #0]
 800c768:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800c76c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800c76e:	687b      	ldr	r3, [r7, #4]
 800c770:	7e5b      	ldrb	r3, [r3, #25]
 800c772:	2b01      	cmp	r3, #1
 800c774:	d108      	bne.n	800c788 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800c776:	687b      	ldr	r3, [r7, #4]
 800c778:	681b      	ldr	r3, [r3, #0]
 800c77a:	681a      	ldr	r2, [r3, #0]
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	681b      	ldr	r3, [r3, #0]
 800c780:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800c784:	601a      	str	r2, [r3, #0]
 800c786:	e007      	b.n	800c798 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800c788:	687b      	ldr	r3, [r7, #4]
 800c78a:	681b      	ldr	r3, [r3, #0]
 800c78c:	681a      	ldr	r2, [r3, #0]
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	681b      	ldr	r3, [r3, #0]
 800c792:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800c796:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	7e9b      	ldrb	r3, [r3, #26]
 800c79c:	2b01      	cmp	r3, #1
 800c79e:	d108      	bne.n	800c7b2 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800c7a0:	687b      	ldr	r3, [r7, #4]
 800c7a2:	681b      	ldr	r3, [r3, #0]
 800c7a4:	681a      	ldr	r2, [r3, #0]
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	681b      	ldr	r3, [r3, #0]
 800c7aa:	f042 0220 	orr.w	r2, r2, #32
 800c7ae:	601a      	str	r2, [r3, #0]
 800c7b0:	e007      	b.n	800c7c2 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800c7b2:	687b      	ldr	r3, [r7, #4]
 800c7b4:	681b      	ldr	r3, [r3, #0]
 800c7b6:	681a      	ldr	r2, [r3, #0]
 800c7b8:	687b      	ldr	r3, [r7, #4]
 800c7ba:	681b      	ldr	r3, [r3, #0]
 800c7bc:	f022 0220 	bic.w	r2, r2, #32
 800c7c0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800c7c2:	687b      	ldr	r3, [r7, #4]
 800c7c4:	7edb      	ldrb	r3, [r3, #27]
 800c7c6:	2b01      	cmp	r3, #1
 800c7c8:	d108      	bne.n	800c7dc <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800c7ca:	687b      	ldr	r3, [r7, #4]
 800c7cc:	681b      	ldr	r3, [r3, #0]
 800c7ce:	681a      	ldr	r2, [r3, #0]
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	681b      	ldr	r3, [r3, #0]
 800c7d4:	f022 0210 	bic.w	r2, r2, #16
 800c7d8:	601a      	str	r2, [r3, #0]
 800c7da:	e007      	b.n	800c7ec <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	681b      	ldr	r3, [r3, #0]
 800c7e0:	681a      	ldr	r2, [r3, #0]
 800c7e2:	687b      	ldr	r3, [r7, #4]
 800c7e4:	681b      	ldr	r3, [r3, #0]
 800c7e6:	f042 0210 	orr.w	r2, r2, #16
 800c7ea:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	7f1b      	ldrb	r3, [r3, #28]
 800c7f0:	2b01      	cmp	r3, #1
 800c7f2:	d108      	bne.n	800c806 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	681b      	ldr	r3, [r3, #0]
 800c7f8:	681a      	ldr	r2, [r3, #0]
 800c7fa:	687b      	ldr	r3, [r7, #4]
 800c7fc:	681b      	ldr	r3, [r3, #0]
 800c7fe:	f042 0208 	orr.w	r2, r2, #8
 800c802:	601a      	str	r2, [r3, #0]
 800c804:	e007      	b.n	800c816 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	681b      	ldr	r3, [r3, #0]
 800c80a:	681a      	ldr	r2, [r3, #0]
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	681b      	ldr	r3, [r3, #0]
 800c810:	f022 0208 	bic.w	r2, r2, #8
 800c814:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800c816:	687b      	ldr	r3, [r7, #4]
 800c818:	7f5b      	ldrb	r3, [r3, #29]
 800c81a:	2b01      	cmp	r3, #1
 800c81c:	d108      	bne.n	800c830 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800c81e:	687b      	ldr	r3, [r7, #4]
 800c820:	681b      	ldr	r3, [r3, #0]
 800c822:	681a      	ldr	r2, [r3, #0]
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	681b      	ldr	r3, [r3, #0]
 800c828:	f042 0204 	orr.w	r2, r2, #4
 800c82c:	601a      	str	r2, [r3, #0]
 800c82e:	e007      	b.n	800c840 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800c830:	687b      	ldr	r3, [r7, #4]
 800c832:	681b      	ldr	r3, [r3, #0]
 800c834:	681a      	ldr	r2, [r3, #0]
 800c836:	687b      	ldr	r3, [r7, #4]
 800c838:	681b      	ldr	r3, [r3, #0]
 800c83a:	f022 0204 	bic.w	r2, r2, #4
 800c83e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800c840:	687b      	ldr	r3, [r7, #4]
 800c842:	689a      	ldr	r2, [r3, #8]
 800c844:	687b      	ldr	r3, [r7, #4]
 800c846:	68db      	ldr	r3, [r3, #12]
 800c848:	431a      	orrs	r2, r3
 800c84a:	687b      	ldr	r3, [r7, #4]
 800c84c:	691b      	ldr	r3, [r3, #16]
 800c84e:	431a      	orrs	r2, r3
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	695b      	ldr	r3, [r3, #20]
 800c854:	ea42 0103 	orr.w	r1, r2, r3
 800c858:	687b      	ldr	r3, [r7, #4]
 800c85a:	685b      	ldr	r3, [r3, #4]
 800c85c:	1e5a      	subs	r2, r3, #1
 800c85e:	687b      	ldr	r3, [r7, #4]
 800c860:	681b      	ldr	r3, [r3, #0]
 800c862:	430a      	orrs	r2, r1
 800c864:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800c866:	687b      	ldr	r3, [r7, #4]
 800c868:	2200      	movs	r2, #0
 800c86a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	2201      	movs	r2, #1
 800c870:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800c874:	2300      	movs	r3, #0
}
 800c876:	4618      	mov	r0, r3
 800c878:	3710      	adds	r7, #16
 800c87a:	46bd      	mov	sp, r7
 800c87c:	bd80      	pop	{r7, pc}
	...

0800c880 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 800c880:	b480      	push	{r7}
 800c882:	b087      	sub	sp, #28
 800c884:	af00      	add	r7, sp, #0
 800c886:	6078      	str	r0, [r7, #4]
 800c888:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800c88a:	687b      	ldr	r3, [r7, #4]
 800c88c:	681b      	ldr	r3, [r3, #0]
 800c88e:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 800c890:	687b      	ldr	r3, [r7, #4]
 800c892:	f893 3020 	ldrb.w	r3, [r3, #32]
 800c896:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 800c898:	7cfb      	ldrb	r3, [r7, #19]
 800c89a:	2b01      	cmp	r3, #1
 800c89c:	d003      	beq.n	800c8a6 <HAL_CAN_ConfigFilter+0x26>
 800c89e:	7cfb      	ldrb	r3, [r7, #19]
 800c8a0:	2b02      	cmp	r3, #2
 800c8a2:	f040 80be 	bne.w	800ca22 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 800c8a6:	4b65      	ldr	r3, [pc, #404]	@ (800ca3c <HAL_CAN_ConfigFilter+0x1bc>)
 800c8a8:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800c8aa:	697b      	ldr	r3, [r7, #20]
 800c8ac:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800c8b0:	f043 0201 	orr.w	r2, r3, #1
 800c8b4:	697b      	ldr	r3, [r7, #20]
 800c8b6:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 800c8ba:	697b      	ldr	r3, [r7, #20]
 800c8bc:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800c8c0:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 800c8c4:	697b      	ldr	r3, [r7, #20]
 800c8c6:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 800c8ca:	697b      	ldr	r3, [r7, #20]
 800c8cc:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 800c8d0:	683b      	ldr	r3, [r7, #0]
 800c8d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c8d4:	021b      	lsls	r3, r3, #8
 800c8d6:	431a      	orrs	r2, r3
 800c8d8:	697b      	ldr	r3, [r7, #20]
 800c8da:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800c8de:	683b      	ldr	r3, [r7, #0]
 800c8e0:	695b      	ldr	r3, [r3, #20]
 800c8e2:	f003 031f 	and.w	r3, r3, #31
 800c8e6:	2201      	movs	r2, #1
 800c8e8:	fa02 f303 	lsl.w	r3, r2, r3
 800c8ec:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800c8ee:	697b      	ldr	r3, [r7, #20]
 800c8f0:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 800c8f4:	68fb      	ldr	r3, [r7, #12]
 800c8f6:	43db      	mvns	r3, r3
 800c8f8:	401a      	ands	r2, r3
 800c8fa:	697b      	ldr	r3, [r7, #20]
 800c8fc:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800c900:	683b      	ldr	r3, [r7, #0]
 800c902:	69db      	ldr	r3, [r3, #28]
 800c904:	2b00      	cmp	r3, #0
 800c906:	d123      	bne.n	800c950 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800c908:	697b      	ldr	r3, [r7, #20]
 800c90a:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 800c90e:	68fb      	ldr	r3, [r7, #12]
 800c910:	43db      	mvns	r3, r3
 800c912:	401a      	ands	r2, r3
 800c914:	697b      	ldr	r3, [r7, #20]
 800c916:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800c91a:	683b      	ldr	r3, [r7, #0]
 800c91c:	68db      	ldr	r3, [r3, #12]
 800c91e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800c920:	683b      	ldr	r3, [r7, #0]
 800c922:	685b      	ldr	r3, [r3, #4]
 800c924:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800c926:	683a      	ldr	r2, [r7, #0]
 800c928:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800c92a:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800c92c:	697b      	ldr	r3, [r7, #20]
 800c92e:	3248      	adds	r2, #72	@ 0x48
 800c930:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800c934:	683b      	ldr	r3, [r7, #0]
 800c936:	689b      	ldr	r3, [r3, #8]
 800c938:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800c93a:	683b      	ldr	r3, [r7, #0]
 800c93c:	681b      	ldr	r3, [r3, #0]
 800c93e:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800c940:	683b      	ldr	r3, [r7, #0]
 800c942:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800c944:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800c946:	6979      	ldr	r1, [r7, #20]
 800c948:	3348      	adds	r3, #72	@ 0x48
 800c94a:	00db      	lsls	r3, r3, #3
 800c94c:	440b      	add	r3, r1
 800c94e:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800c950:	683b      	ldr	r3, [r7, #0]
 800c952:	69db      	ldr	r3, [r3, #28]
 800c954:	2b01      	cmp	r3, #1
 800c956:	d122      	bne.n	800c99e <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800c958:	697b      	ldr	r3, [r7, #20]
 800c95a:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 800c95e:	68fb      	ldr	r3, [r7, #12]
 800c960:	431a      	orrs	r2, r3
 800c962:	697b      	ldr	r3, [r7, #20]
 800c964:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800c968:	683b      	ldr	r3, [r7, #0]
 800c96a:	681b      	ldr	r3, [r3, #0]
 800c96c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800c96e:	683b      	ldr	r3, [r7, #0]
 800c970:	685b      	ldr	r3, [r3, #4]
 800c972:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800c974:	683a      	ldr	r2, [r7, #0]
 800c976:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800c978:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800c97a:	697b      	ldr	r3, [r7, #20]
 800c97c:	3248      	adds	r2, #72	@ 0x48
 800c97e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800c982:	683b      	ldr	r3, [r7, #0]
 800c984:	689b      	ldr	r3, [r3, #8]
 800c986:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800c988:	683b      	ldr	r3, [r7, #0]
 800c98a:	68db      	ldr	r3, [r3, #12]
 800c98c:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800c98e:	683b      	ldr	r3, [r7, #0]
 800c990:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800c992:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800c994:	6979      	ldr	r1, [r7, #20]
 800c996:	3348      	adds	r3, #72	@ 0x48
 800c998:	00db      	lsls	r3, r3, #3
 800c99a:	440b      	add	r3, r1
 800c99c:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800c99e:	683b      	ldr	r3, [r7, #0]
 800c9a0:	699b      	ldr	r3, [r3, #24]
 800c9a2:	2b00      	cmp	r3, #0
 800c9a4:	d109      	bne.n	800c9ba <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800c9a6:	697b      	ldr	r3, [r7, #20]
 800c9a8:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800c9ac:	68fb      	ldr	r3, [r7, #12]
 800c9ae:	43db      	mvns	r3, r3
 800c9b0:	401a      	ands	r2, r3
 800c9b2:	697b      	ldr	r3, [r7, #20]
 800c9b4:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 800c9b8:	e007      	b.n	800c9ca <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800c9ba:	697b      	ldr	r3, [r7, #20]
 800c9bc:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800c9c0:	68fb      	ldr	r3, [r7, #12]
 800c9c2:	431a      	orrs	r2, r3
 800c9c4:	697b      	ldr	r3, [r7, #20]
 800c9c6:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800c9ca:	683b      	ldr	r3, [r7, #0]
 800c9cc:	691b      	ldr	r3, [r3, #16]
 800c9ce:	2b00      	cmp	r3, #0
 800c9d0:	d109      	bne.n	800c9e6 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800c9d2:	697b      	ldr	r3, [r7, #20]
 800c9d4:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 800c9d8:	68fb      	ldr	r3, [r7, #12]
 800c9da:	43db      	mvns	r3, r3
 800c9dc:	401a      	ands	r2, r3
 800c9de:	697b      	ldr	r3, [r7, #20]
 800c9e0:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 800c9e4:	e007      	b.n	800c9f6 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800c9e6:	697b      	ldr	r3, [r7, #20]
 800c9e8:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 800c9ec:	68fb      	ldr	r3, [r7, #12]
 800c9ee:	431a      	orrs	r2, r3
 800c9f0:	697b      	ldr	r3, [r7, #20]
 800c9f2:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800c9f6:	683b      	ldr	r3, [r7, #0]
 800c9f8:	6a1b      	ldr	r3, [r3, #32]
 800c9fa:	2b01      	cmp	r3, #1
 800c9fc:	d107      	bne.n	800ca0e <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800c9fe:	697b      	ldr	r3, [r7, #20]
 800ca00:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 800ca04:	68fb      	ldr	r3, [r7, #12]
 800ca06:	431a      	orrs	r2, r3
 800ca08:	697b      	ldr	r3, [r7, #20]
 800ca0a:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800ca0e:	697b      	ldr	r3, [r7, #20]
 800ca10:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800ca14:	f023 0201 	bic.w	r2, r3, #1
 800ca18:	697b      	ldr	r3, [r7, #20]
 800ca1a:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 800ca1e:	2300      	movs	r3, #0
 800ca20:	e006      	b.n	800ca30 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800ca22:	687b      	ldr	r3, [r7, #4]
 800ca24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ca26:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800ca2e:	2301      	movs	r3, #1
  }
}
 800ca30:	4618      	mov	r0, r3
 800ca32:	371c      	adds	r7, #28
 800ca34:	46bd      	mov	sp, r7
 800ca36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca3a:	4770      	bx	lr
 800ca3c:	40006400 	.word	0x40006400

0800ca40 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800ca40:	b580      	push	{r7, lr}
 800ca42:	b084      	sub	sp, #16
 800ca44:	af00      	add	r7, sp, #0
 800ca46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800ca48:	687b      	ldr	r3, [r7, #4]
 800ca4a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800ca4e:	b2db      	uxtb	r3, r3
 800ca50:	2b01      	cmp	r3, #1
 800ca52:	d12e      	bne.n	800cab2 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	2202      	movs	r2, #2
 800ca58:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800ca5c:	687b      	ldr	r3, [r7, #4]
 800ca5e:	681b      	ldr	r3, [r3, #0]
 800ca60:	681a      	ldr	r2, [r3, #0]
 800ca62:	687b      	ldr	r3, [r7, #4]
 800ca64:	681b      	ldr	r3, [r3, #0]
 800ca66:	f022 0201 	bic.w	r2, r2, #1
 800ca6a:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800ca6c:	f7ff f9cc 	bl	800be08 <HAL_GetTick>
 800ca70:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800ca72:	e012      	b.n	800ca9a <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800ca74:	f7ff f9c8 	bl	800be08 <HAL_GetTick>
 800ca78:	4602      	mov	r2, r0
 800ca7a:	68fb      	ldr	r3, [r7, #12]
 800ca7c:	1ad3      	subs	r3, r2, r3
 800ca7e:	2b0a      	cmp	r3, #10
 800ca80:	d90b      	bls.n	800ca9a <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800ca82:	687b      	ldr	r3, [r7, #4]
 800ca84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ca86:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800ca8a:	687b      	ldr	r3, [r7, #4]
 800ca8c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800ca8e:	687b      	ldr	r3, [r7, #4]
 800ca90:	2205      	movs	r2, #5
 800ca92:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800ca96:	2301      	movs	r3, #1
 800ca98:	e012      	b.n	800cac0 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800ca9a:	687b      	ldr	r3, [r7, #4]
 800ca9c:	681b      	ldr	r3, [r3, #0]
 800ca9e:	685b      	ldr	r3, [r3, #4]
 800caa0:	f003 0301 	and.w	r3, r3, #1
 800caa4:	2b00      	cmp	r3, #0
 800caa6:	d1e5      	bne.n	800ca74 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800caa8:	687b      	ldr	r3, [r7, #4]
 800caaa:	2200      	movs	r2, #0
 800caac:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 800caae:	2300      	movs	r3, #0
 800cab0:	e006      	b.n	800cac0 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800cab2:	687b      	ldr	r3, [r7, #4]
 800cab4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cab6:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 800caba:	687b      	ldr	r3, [r7, #4]
 800cabc:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800cabe:	2301      	movs	r3, #1
  }
}
 800cac0:	4618      	mov	r0, r3
 800cac2:	3710      	adds	r7, #16
 800cac4:	46bd      	mov	sp, r7
 800cac6:	bd80      	pop	{r7, pc}

0800cac8 <HAL_CAN_Stop>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Stop(CAN_HandleTypeDef *hcan)
{
 800cac8:	b580      	push	{r7, lr}
 800caca:	b084      	sub	sp, #16
 800cacc:	af00      	add	r7, sp, #0
 800cace:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_LISTENING)
 800cad0:	687b      	ldr	r3, [r7, #4]
 800cad2:	f893 3020 	ldrb.w	r3, [r3, #32]
 800cad6:	b2db      	uxtb	r3, r3
 800cad8:	2b02      	cmp	r3, #2
 800cada:	d133      	bne.n	800cb44 <HAL_CAN_Stop+0x7c>
  {
    /* Request initialisation */
    SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800cadc:	687b      	ldr	r3, [r7, #4]
 800cade:	681b      	ldr	r3, [r3, #0]
 800cae0:	681a      	ldr	r2, [r3, #0]
 800cae2:	687b      	ldr	r3, [r7, #4]
 800cae4:	681b      	ldr	r3, [r3, #0]
 800cae6:	f042 0201 	orr.w	r2, r2, #1
 800caea:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800caec:	f7ff f98c 	bl	800be08 <HAL_GetTick>
 800caf0:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800caf2:	e012      	b.n	800cb1a <HAL_CAN_Stop+0x52>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800caf4:	f7ff f988 	bl	800be08 <HAL_GetTick>
 800caf8:	4602      	mov	r2, r0
 800cafa:	68fb      	ldr	r3, [r7, #12]
 800cafc:	1ad3      	subs	r3, r2, r3
 800cafe:	2b0a      	cmp	r3, #10
 800cb00:	d90b      	bls.n	800cb1a <HAL_CAN_Stop+0x52>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800cb02:	687b      	ldr	r3, [r7, #4]
 800cb04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cb06:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800cb0a:	687b      	ldr	r3, [r7, #4]
 800cb0c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800cb0e:	687b      	ldr	r3, [r7, #4]
 800cb10:	2205      	movs	r2, #5
 800cb12:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800cb16:	2301      	movs	r3, #1
 800cb18:	e01b      	b.n	800cb52 <HAL_CAN_Stop+0x8a>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800cb1a:	687b      	ldr	r3, [r7, #4]
 800cb1c:	681b      	ldr	r3, [r3, #0]
 800cb1e:	685b      	ldr	r3, [r3, #4]
 800cb20:	f003 0301 	and.w	r3, r3, #1
 800cb24:	2b00      	cmp	r3, #0
 800cb26:	d0e5      	beq.n	800caf4 <HAL_CAN_Stop+0x2c>
      }
    }

    /* Exit from sleep mode */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800cb28:	687b      	ldr	r3, [r7, #4]
 800cb2a:	681b      	ldr	r3, [r3, #0]
 800cb2c:	681a      	ldr	r2, [r3, #0]
 800cb2e:	687b      	ldr	r3, [r7, #4]
 800cb30:	681b      	ldr	r3, [r3, #0]
 800cb32:	f022 0202 	bic.w	r2, r2, #2
 800cb36:	601a      	str	r2, [r3, #0]

    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_READY;
 800cb38:	687b      	ldr	r3, [r7, #4]
 800cb3a:	2201      	movs	r2, #1
 800cb3c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Return function status */
    return HAL_OK;
 800cb40:	2300      	movs	r3, #0
 800cb42:	e006      	b.n	800cb52 <HAL_CAN_Stop+0x8a>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_STARTED;
 800cb44:	687b      	ldr	r3, [r7, #4]
 800cb46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cb48:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800cb4c:	687b      	ldr	r3, [r7, #4]
 800cb4e:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800cb50:	2301      	movs	r3, #1
  }
}
 800cb52:	4618      	mov	r0, r3
 800cb54:	3710      	adds	r7, #16
 800cb56:	46bd      	mov	sp, r7
 800cb58:	bd80      	pop	{r7, pc}

0800cb5a <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 800cb5a:	b480      	push	{r7}
 800cb5c:	b089      	sub	sp, #36	@ 0x24
 800cb5e:	af00      	add	r7, sp, #0
 800cb60:	60f8      	str	r0, [r7, #12]
 800cb62:	60b9      	str	r1, [r7, #8]
 800cb64:	607a      	str	r2, [r7, #4]
 800cb66:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800cb68:	68fb      	ldr	r3, [r7, #12]
 800cb6a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800cb6e:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800cb70:	68fb      	ldr	r3, [r7, #12]
 800cb72:	681b      	ldr	r3, [r3, #0]
 800cb74:	689b      	ldr	r3, [r3, #8]
 800cb76:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800cb78:	7ffb      	ldrb	r3, [r7, #31]
 800cb7a:	2b01      	cmp	r3, #1
 800cb7c:	d003      	beq.n	800cb86 <HAL_CAN_AddTxMessage+0x2c>
 800cb7e:	7ffb      	ldrb	r3, [r7, #31]
 800cb80:	2b02      	cmp	r3, #2
 800cb82:	f040 80ad 	bne.w	800cce0 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800cb86:	69bb      	ldr	r3, [r7, #24]
 800cb88:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800cb8c:	2b00      	cmp	r3, #0
 800cb8e:	d10a      	bne.n	800cba6 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800cb90:	69bb      	ldr	r3, [r7, #24]
 800cb92:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800cb96:	2b00      	cmp	r3, #0
 800cb98:	d105      	bne.n	800cba6 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 800cb9a:	69bb      	ldr	r3, [r7, #24]
 800cb9c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800cba0:	2b00      	cmp	r3, #0
 800cba2:	f000 8095 	beq.w	800ccd0 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 800cba6:	69bb      	ldr	r3, [r7, #24]
 800cba8:	0e1b      	lsrs	r3, r3, #24
 800cbaa:	f003 0303 	and.w	r3, r3, #3
 800cbae:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 800cbb0:	2201      	movs	r2, #1
 800cbb2:	697b      	ldr	r3, [r7, #20]
 800cbb4:	409a      	lsls	r2, r3
 800cbb6:	683b      	ldr	r3, [r7, #0]
 800cbb8:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 800cbba:	68bb      	ldr	r3, [r7, #8]
 800cbbc:	689b      	ldr	r3, [r3, #8]
 800cbbe:	2b00      	cmp	r3, #0
 800cbc0:	d10d      	bne.n	800cbde <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800cbc2:	68bb      	ldr	r3, [r7, #8]
 800cbc4:	681b      	ldr	r3, [r3, #0]
 800cbc6:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 800cbc8:	68bb      	ldr	r3, [r7, #8]
 800cbca:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800cbcc:	68f9      	ldr	r1, [r7, #12]
 800cbce:	6809      	ldr	r1, [r1, #0]
 800cbd0:	431a      	orrs	r2, r3
 800cbd2:	697b      	ldr	r3, [r7, #20]
 800cbd4:	3318      	adds	r3, #24
 800cbd6:	011b      	lsls	r3, r3, #4
 800cbd8:	440b      	add	r3, r1
 800cbda:	601a      	str	r2, [r3, #0]
 800cbdc:	e00f      	b.n	800cbfe <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800cbde:	68bb      	ldr	r3, [r7, #8]
 800cbe0:	685b      	ldr	r3, [r3, #4]
 800cbe2:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 800cbe4:	68bb      	ldr	r3, [r7, #8]
 800cbe6:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800cbe8:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 800cbea:	68bb      	ldr	r3, [r7, #8]
 800cbec:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800cbee:	68f9      	ldr	r1, [r7, #12]
 800cbf0:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 800cbf2:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800cbf4:	697b      	ldr	r3, [r7, #20]
 800cbf6:	3318      	adds	r3, #24
 800cbf8:	011b      	lsls	r3, r3, #4
 800cbfa:	440b      	add	r3, r1
 800cbfc:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 800cbfe:	68fb      	ldr	r3, [r7, #12]
 800cc00:	6819      	ldr	r1, [r3, #0]
 800cc02:	68bb      	ldr	r3, [r7, #8]
 800cc04:	691a      	ldr	r2, [r3, #16]
 800cc06:	697b      	ldr	r3, [r7, #20]
 800cc08:	3318      	adds	r3, #24
 800cc0a:	011b      	lsls	r3, r3, #4
 800cc0c:	440b      	add	r3, r1
 800cc0e:	3304      	adds	r3, #4
 800cc10:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 800cc12:	68bb      	ldr	r3, [r7, #8]
 800cc14:	7d1b      	ldrb	r3, [r3, #20]
 800cc16:	2b01      	cmp	r3, #1
 800cc18:	d111      	bne.n	800cc3e <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800cc1a:	68fb      	ldr	r3, [r7, #12]
 800cc1c:	681a      	ldr	r2, [r3, #0]
 800cc1e:	697b      	ldr	r3, [r7, #20]
 800cc20:	3318      	adds	r3, #24
 800cc22:	011b      	lsls	r3, r3, #4
 800cc24:	4413      	add	r3, r2
 800cc26:	3304      	adds	r3, #4
 800cc28:	681b      	ldr	r3, [r3, #0]
 800cc2a:	68fa      	ldr	r2, [r7, #12]
 800cc2c:	6811      	ldr	r1, [r2, #0]
 800cc2e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800cc32:	697b      	ldr	r3, [r7, #20]
 800cc34:	3318      	adds	r3, #24
 800cc36:	011b      	lsls	r3, r3, #4
 800cc38:	440b      	add	r3, r1
 800cc3a:	3304      	adds	r3, #4
 800cc3c:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 800cc3e:	687b      	ldr	r3, [r7, #4]
 800cc40:	3307      	adds	r3, #7
 800cc42:	781b      	ldrb	r3, [r3, #0]
 800cc44:	061a      	lsls	r2, r3, #24
 800cc46:	687b      	ldr	r3, [r7, #4]
 800cc48:	3306      	adds	r3, #6
 800cc4a:	781b      	ldrb	r3, [r3, #0]
 800cc4c:	041b      	lsls	r3, r3, #16
 800cc4e:	431a      	orrs	r2, r3
 800cc50:	687b      	ldr	r3, [r7, #4]
 800cc52:	3305      	adds	r3, #5
 800cc54:	781b      	ldrb	r3, [r3, #0]
 800cc56:	021b      	lsls	r3, r3, #8
 800cc58:	4313      	orrs	r3, r2
 800cc5a:	687a      	ldr	r2, [r7, #4]
 800cc5c:	3204      	adds	r2, #4
 800cc5e:	7812      	ldrb	r2, [r2, #0]
 800cc60:	4610      	mov	r0, r2
 800cc62:	68fa      	ldr	r2, [r7, #12]
 800cc64:	6811      	ldr	r1, [r2, #0]
 800cc66:	ea43 0200 	orr.w	r2, r3, r0
 800cc6a:	697b      	ldr	r3, [r7, #20]
 800cc6c:	011b      	lsls	r3, r3, #4
 800cc6e:	440b      	add	r3, r1
 800cc70:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 800cc74:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800cc76:	687b      	ldr	r3, [r7, #4]
 800cc78:	3303      	adds	r3, #3
 800cc7a:	781b      	ldrb	r3, [r3, #0]
 800cc7c:	061a      	lsls	r2, r3, #24
 800cc7e:	687b      	ldr	r3, [r7, #4]
 800cc80:	3302      	adds	r3, #2
 800cc82:	781b      	ldrb	r3, [r3, #0]
 800cc84:	041b      	lsls	r3, r3, #16
 800cc86:	431a      	orrs	r2, r3
 800cc88:	687b      	ldr	r3, [r7, #4]
 800cc8a:	3301      	adds	r3, #1
 800cc8c:	781b      	ldrb	r3, [r3, #0]
 800cc8e:	021b      	lsls	r3, r3, #8
 800cc90:	4313      	orrs	r3, r2
 800cc92:	687a      	ldr	r2, [r7, #4]
 800cc94:	7812      	ldrb	r2, [r2, #0]
 800cc96:	4610      	mov	r0, r2
 800cc98:	68fa      	ldr	r2, [r7, #12]
 800cc9a:	6811      	ldr	r1, [r2, #0]
 800cc9c:	ea43 0200 	orr.w	r2, r3, r0
 800cca0:	697b      	ldr	r3, [r7, #20]
 800cca2:	011b      	lsls	r3, r3, #4
 800cca4:	440b      	add	r3, r1
 800cca6:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 800ccaa:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 800ccac:	68fb      	ldr	r3, [r7, #12]
 800ccae:	681a      	ldr	r2, [r3, #0]
 800ccb0:	697b      	ldr	r3, [r7, #20]
 800ccb2:	3318      	adds	r3, #24
 800ccb4:	011b      	lsls	r3, r3, #4
 800ccb6:	4413      	add	r3, r2
 800ccb8:	681b      	ldr	r3, [r3, #0]
 800ccba:	68fa      	ldr	r2, [r7, #12]
 800ccbc:	6811      	ldr	r1, [r2, #0]
 800ccbe:	f043 0201 	orr.w	r2, r3, #1
 800ccc2:	697b      	ldr	r3, [r7, #20]
 800ccc4:	3318      	adds	r3, #24
 800ccc6:	011b      	lsls	r3, r3, #4
 800ccc8:	440b      	add	r3, r1
 800ccca:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 800cccc:	2300      	movs	r3, #0
 800ccce:	e00e      	b.n	800ccee <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800ccd0:	68fb      	ldr	r3, [r7, #12]
 800ccd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ccd4:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800ccd8:	68fb      	ldr	r3, [r7, #12]
 800ccda:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 800ccdc:	2301      	movs	r3, #1
 800ccde:	e006      	b.n	800ccee <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800cce0:	68fb      	ldr	r3, [r7, #12]
 800cce2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cce4:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800cce8:	68fb      	ldr	r3, [r7, #12]
 800ccea:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800ccec:	2301      	movs	r3, #1
  }
}
 800ccee:	4618      	mov	r0, r3
 800ccf0:	3724      	adds	r7, #36	@ 0x24
 800ccf2:	46bd      	mov	sp, r7
 800ccf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccf8:	4770      	bx	lr

0800ccfa <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800ccfa:	b480      	push	{r7}
 800ccfc:	b087      	sub	sp, #28
 800ccfe:	af00      	add	r7, sp, #0
 800cd00:	60f8      	str	r0, [r7, #12]
 800cd02:	60b9      	str	r1, [r7, #8]
 800cd04:	607a      	str	r2, [r7, #4]
 800cd06:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800cd08:	68fb      	ldr	r3, [r7, #12]
 800cd0a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800cd0e:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800cd10:	7dfb      	ldrb	r3, [r7, #23]
 800cd12:	2b01      	cmp	r3, #1
 800cd14:	d003      	beq.n	800cd1e <HAL_CAN_GetRxMessage+0x24>
 800cd16:	7dfb      	ldrb	r3, [r7, #23]
 800cd18:	2b02      	cmp	r3, #2
 800cd1a:	f040 8103 	bne.w	800cf24 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800cd1e:	68bb      	ldr	r3, [r7, #8]
 800cd20:	2b00      	cmp	r3, #0
 800cd22:	d10e      	bne.n	800cd42 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800cd24:	68fb      	ldr	r3, [r7, #12]
 800cd26:	681b      	ldr	r3, [r3, #0]
 800cd28:	68db      	ldr	r3, [r3, #12]
 800cd2a:	f003 0303 	and.w	r3, r3, #3
 800cd2e:	2b00      	cmp	r3, #0
 800cd30:	d116      	bne.n	800cd60 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800cd32:	68fb      	ldr	r3, [r7, #12]
 800cd34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cd36:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800cd3a:	68fb      	ldr	r3, [r7, #12]
 800cd3c:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 800cd3e:	2301      	movs	r3, #1
 800cd40:	e0f7      	b.n	800cf32 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800cd42:	68fb      	ldr	r3, [r7, #12]
 800cd44:	681b      	ldr	r3, [r3, #0]
 800cd46:	691b      	ldr	r3, [r3, #16]
 800cd48:	f003 0303 	and.w	r3, r3, #3
 800cd4c:	2b00      	cmp	r3, #0
 800cd4e:	d107      	bne.n	800cd60 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800cd50:	68fb      	ldr	r3, [r7, #12]
 800cd52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cd54:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800cd58:	68fb      	ldr	r3, [r7, #12]
 800cd5a:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 800cd5c:	2301      	movs	r3, #1
 800cd5e:	e0e8      	b.n	800cf32 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800cd60:	68fb      	ldr	r3, [r7, #12]
 800cd62:	681a      	ldr	r2, [r3, #0]
 800cd64:	68bb      	ldr	r3, [r7, #8]
 800cd66:	331b      	adds	r3, #27
 800cd68:	011b      	lsls	r3, r3, #4
 800cd6a:	4413      	add	r3, r2
 800cd6c:	681b      	ldr	r3, [r3, #0]
 800cd6e:	f003 0204 	and.w	r2, r3, #4
 800cd72:	687b      	ldr	r3, [r7, #4]
 800cd74:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800cd76:	687b      	ldr	r3, [r7, #4]
 800cd78:	689b      	ldr	r3, [r3, #8]
 800cd7a:	2b00      	cmp	r3, #0
 800cd7c:	d10c      	bne.n	800cd98 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800cd7e:	68fb      	ldr	r3, [r7, #12]
 800cd80:	681a      	ldr	r2, [r3, #0]
 800cd82:	68bb      	ldr	r3, [r7, #8]
 800cd84:	331b      	adds	r3, #27
 800cd86:	011b      	lsls	r3, r3, #4
 800cd88:	4413      	add	r3, r2
 800cd8a:	681b      	ldr	r3, [r3, #0]
 800cd8c:	0d5b      	lsrs	r3, r3, #21
 800cd8e:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800cd92:	687b      	ldr	r3, [r7, #4]
 800cd94:	601a      	str	r2, [r3, #0]
 800cd96:	e00b      	b.n	800cdb0 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800cd98:	68fb      	ldr	r3, [r7, #12]
 800cd9a:	681a      	ldr	r2, [r3, #0]
 800cd9c:	68bb      	ldr	r3, [r7, #8]
 800cd9e:	331b      	adds	r3, #27
 800cda0:	011b      	lsls	r3, r3, #4
 800cda2:	4413      	add	r3, r2
 800cda4:	681b      	ldr	r3, [r3, #0]
 800cda6:	08db      	lsrs	r3, r3, #3
 800cda8:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 800cdac:	687b      	ldr	r3, [r7, #4]
 800cdae:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 800cdb0:	68fb      	ldr	r3, [r7, #12]
 800cdb2:	681a      	ldr	r2, [r3, #0]
 800cdb4:	68bb      	ldr	r3, [r7, #8]
 800cdb6:	331b      	adds	r3, #27
 800cdb8:	011b      	lsls	r3, r3, #4
 800cdba:	4413      	add	r3, r2
 800cdbc:	681b      	ldr	r3, [r3, #0]
 800cdbe:	f003 0202 	and.w	r2, r3, #2
 800cdc2:	687b      	ldr	r3, [r7, #4]
 800cdc4:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 800cdc6:	68fb      	ldr	r3, [r7, #12]
 800cdc8:	681a      	ldr	r2, [r3, #0]
 800cdca:	68bb      	ldr	r3, [r7, #8]
 800cdcc:	331b      	adds	r3, #27
 800cdce:	011b      	lsls	r3, r3, #4
 800cdd0:	4413      	add	r3, r2
 800cdd2:	3304      	adds	r3, #4
 800cdd4:	681b      	ldr	r3, [r3, #0]
 800cdd6:	f003 0308 	and.w	r3, r3, #8
 800cdda:	2b00      	cmp	r3, #0
 800cddc:	d003      	beq.n	800cde6 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 800cdde:	687b      	ldr	r3, [r7, #4]
 800cde0:	2208      	movs	r2, #8
 800cde2:	611a      	str	r2, [r3, #16]
 800cde4:	e00b      	b.n	800cdfe <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800cde6:	68fb      	ldr	r3, [r7, #12]
 800cde8:	681a      	ldr	r2, [r3, #0]
 800cdea:	68bb      	ldr	r3, [r7, #8]
 800cdec:	331b      	adds	r3, #27
 800cdee:	011b      	lsls	r3, r3, #4
 800cdf0:	4413      	add	r3, r2
 800cdf2:	3304      	adds	r3, #4
 800cdf4:	681b      	ldr	r3, [r3, #0]
 800cdf6:	f003 020f 	and.w	r2, r3, #15
 800cdfa:	687b      	ldr	r3, [r7, #4]
 800cdfc:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800cdfe:	68fb      	ldr	r3, [r7, #12]
 800ce00:	681a      	ldr	r2, [r3, #0]
 800ce02:	68bb      	ldr	r3, [r7, #8]
 800ce04:	331b      	adds	r3, #27
 800ce06:	011b      	lsls	r3, r3, #4
 800ce08:	4413      	add	r3, r2
 800ce0a:	3304      	adds	r3, #4
 800ce0c:	681b      	ldr	r3, [r3, #0]
 800ce0e:	0a1b      	lsrs	r3, r3, #8
 800ce10:	b2da      	uxtb	r2, r3
 800ce12:	687b      	ldr	r3, [r7, #4]
 800ce14:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800ce16:	68fb      	ldr	r3, [r7, #12]
 800ce18:	681a      	ldr	r2, [r3, #0]
 800ce1a:	68bb      	ldr	r3, [r7, #8]
 800ce1c:	331b      	adds	r3, #27
 800ce1e:	011b      	lsls	r3, r3, #4
 800ce20:	4413      	add	r3, r2
 800ce22:	3304      	adds	r3, #4
 800ce24:	681b      	ldr	r3, [r3, #0]
 800ce26:	0c1b      	lsrs	r3, r3, #16
 800ce28:	b29a      	uxth	r2, r3
 800ce2a:	687b      	ldr	r3, [r7, #4]
 800ce2c:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800ce2e:	68fb      	ldr	r3, [r7, #12]
 800ce30:	681a      	ldr	r2, [r3, #0]
 800ce32:	68bb      	ldr	r3, [r7, #8]
 800ce34:	011b      	lsls	r3, r3, #4
 800ce36:	4413      	add	r3, r2
 800ce38:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800ce3c:	681b      	ldr	r3, [r3, #0]
 800ce3e:	b2da      	uxtb	r2, r3
 800ce40:	683b      	ldr	r3, [r7, #0]
 800ce42:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800ce44:	68fb      	ldr	r3, [r7, #12]
 800ce46:	681a      	ldr	r2, [r3, #0]
 800ce48:	68bb      	ldr	r3, [r7, #8]
 800ce4a:	011b      	lsls	r3, r3, #4
 800ce4c:	4413      	add	r3, r2
 800ce4e:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800ce52:	681b      	ldr	r3, [r3, #0]
 800ce54:	0a1a      	lsrs	r2, r3, #8
 800ce56:	683b      	ldr	r3, [r7, #0]
 800ce58:	3301      	adds	r3, #1
 800ce5a:	b2d2      	uxtb	r2, r2
 800ce5c:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800ce5e:	68fb      	ldr	r3, [r7, #12]
 800ce60:	681a      	ldr	r2, [r3, #0]
 800ce62:	68bb      	ldr	r3, [r7, #8]
 800ce64:	011b      	lsls	r3, r3, #4
 800ce66:	4413      	add	r3, r2
 800ce68:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800ce6c:	681b      	ldr	r3, [r3, #0]
 800ce6e:	0c1a      	lsrs	r2, r3, #16
 800ce70:	683b      	ldr	r3, [r7, #0]
 800ce72:	3302      	adds	r3, #2
 800ce74:	b2d2      	uxtb	r2, r2
 800ce76:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800ce78:	68fb      	ldr	r3, [r7, #12]
 800ce7a:	681a      	ldr	r2, [r3, #0]
 800ce7c:	68bb      	ldr	r3, [r7, #8]
 800ce7e:	011b      	lsls	r3, r3, #4
 800ce80:	4413      	add	r3, r2
 800ce82:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800ce86:	681b      	ldr	r3, [r3, #0]
 800ce88:	0e1a      	lsrs	r2, r3, #24
 800ce8a:	683b      	ldr	r3, [r7, #0]
 800ce8c:	3303      	adds	r3, #3
 800ce8e:	b2d2      	uxtb	r2, r2
 800ce90:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800ce92:	68fb      	ldr	r3, [r7, #12]
 800ce94:	681a      	ldr	r2, [r3, #0]
 800ce96:	68bb      	ldr	r3, [r7, #8]
 800ce98:	011b      	lsls	r3, r3, #4
 800ce9a:	4413      	add	r3, r2
 800ce9c:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800cea0:	681a      	ldr	r2, [r3, #0]
 800cea2:	683b      	ldr	r3, [r7, #0]
 800cea4:	3304      	adds	r3, #4
 800cea6:	b2d2      	uxtb	r2, r2
 800cea8:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800ceaa:	68fb      	ldr	r3, [r7, #12]
 800ceac:	681a      	ldr	r2, [r3, #0]
 800ceae:	68bb      	ldr	r3, [r7, #8]
 800ceb0:	011b      	lsls	r3, r3, #4
 800ceb2:	4413      	add	r3, r2
 800ceb4:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800ceb8:	681b      	ldr	r3, [r3, #0]
 800ceba:	0a1a      	lsrs	r2, r3, #8
 800cebc:	683b      	ldr	r3, [r7, #0]
 800cebe:	3305      	adds	r3, #5
 800cec0:	b2d2      	uxtb	r2, r2
 800cec2:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800cec4:	68fb      	ldr	r3, [r7, #12]
 800cec6:	681a      	ldr	r2, [r3, #0]
 800cec8:	68bb      	ldr	r3, [r7, #8]
 800ceca:	011b      	lsls	r3, r3, #4
 800cecc:	4413      	add	r3, r2
 800cece:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800ced2:	681b      	ldr	r3, [r3, #0]
 800ced4:	0c1a      	lsrs	r2, r3, #16
 800ced6:	683b      	ldr	r3, [r7, #0]
 800ced8:	3306      	adds	r3, #6
 800ceda:	b2d2      	uxtb	r2, r2
 800cedc:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800cede:	68fb      	ldr	r3, [r7, #12]
 800cee0:	681a      	ldr	r2, [r3, #0]
 800cee2:	68bb      	ldr	r3, [r7, #8]
 800cee4:	011b      	lsls	r3, r3, #4
 800cee6:	4413      	add	r3, r2
 800cee8:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800ceec:	681b      	ldr	r3, [r3, #0]
 800ceee:	0e1a      	lsrs	r2, r3, #24
 800cef0:	683b      	ldr	r3, [r7, #0]
 800cef2:	3307      	adds	r3, #7
 800cef4:	b2d2      	uxtb	r2, r2
 800cef6:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800cef8:	68bb      	ldr	r3, [r7, #8]
 800cefa:	2b00      	cmp	r3, #0
 800cefc:	d108      	bne.n	800cf10 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800cefe:	68fb      	ldr	r3, [r7, #12]
 800cf00:	681b      	ldr	r3, [r3, #0]
 800cf02:	68da      	ldr	r2, [r3, #12]
 800cf04:	68fb      	ldr	r3, [r7, #12]
 800cf06:	681b      	ldr	r3, [r3, #0]
 800cf08:	f042 0220 	orr.w	r2, r2, #32
 800cf0c:	60da      	str	r2, [r3, #12]
 800cf0e:	e007      	b.n	800cf20 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800cf10:	68fb      	ldr	r3, [r7, #12]
 800cf12:	681b      	ldr	r3, [r3, #0]
 800cf14:	691a      	ldr	r2, [r3, #16]
 800cf16:	68fb      	ldr	r3, [r7, #12]
 800cf18:	681b      	ldr	r3, [r3, #0]
 800cf1a:	f042 0220 	orr.w	r2, r2, #32
 800cf1e:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 800cf20:	2300      	movs	r3, #0
 800cf22:	e006      	b.n	800cf32 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800cf24:	68fb      	ldr	r3, [r7, #12]
 800cf26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cf28:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800cf2c:	68fb      	ldr	r3, [r7, #12]
 800cf2e:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800cf30:	2301      	movs	r3, #1
  }
}
 800cf32:	4618      	mov	r0, r3
 800cf34:	371c      	adds	r7, #28
 800cf36:	46bd      	mov	sp, r7
 800cf38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf3c:	4770      	bx	lr

0800cf3e <HAL_CAN_GetRxFifoFillLevel>:
  * @param  RxFifo Rx FIFO.
  *         This parameter can be a value of @arg CAN_receive_FIFO_number.
  * @retval Number of messages available in Rx FIFO.
  */
uint32_t HAL_CAN_GetRxFifoFillLevel(const CAN_HandleTypeDef *hcan, uint32_t RxFifo)
{
 800cf3e:	b480      	push	{r7}
 800cf40:	b085      	sub	sp, #20
 800cf42:	af00      	add	r7, sp, #0
 800cf44:	6078      	str	r0, [r7, #4]
 800cf46:	6039      	str	r1, [r7, #0]
  uint32_t filllevel = 0U;
 800cf48:	2300      	movs	r3, #0
 800cf4a:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 800cf4c:	687b      	ldr	r3, [r7, #4]
 800cf4e:	f893 3020 	ldrb.w	r3, [r3, #32]
 800cf52:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800cf54:	7afb      	ldrb	r3, [r7, #11]
 800cf56:	2b01      	cmp	r3, #1
 800cf58:	d002      	beq.n	800cf60 <HAL_CAN_GetRxFifoFillLevel+0x22>
 800cf5a:	7afb      	ldrb	r3, [r7, #11]
 800cf5c:	2b02      	cmp	r3, #2
 800cf5e:	d10f      	bne.n	800cf80 <HAL_CAN_GetRxFifoFillLevel+0x42>
      (state == HAL_CAN_STATE_LISTENING))
  {
    if (RxFifo == CAN_RX_FIFO0)
 800cf60:	683b      	ldr	r3, [r7, #0]
 800cf62:	2b00      	cmp	r3, #0
 800cf64:	d106      	bne.n	800cf74 <HAL_CAN_GetRxFifoFillLevel+0x36>
    {
      filllevel = hcan->Instance->RF0R & CAN_RF0R_FMP0;
 800cf66:	687b      	ldr	r3, [r7, #4]
 800cf68:	681b      	ldr	r3, [r3, #0]
 800cf6a:	68db      	ldr	r3, [r3, #12]
 800cf6c:	f003 0303 	and.w	r3, r3, #3
 800cf70:	60fb      	str	r3, [r7, #12]
 800cf72:	e005      	b.n	800cf80 <HAL_CAN_GetRxFifoFillLevel+0x42>
    }
    else /* RxFifo == CAN_RX_FIFO1 */
    {
      filllevel = hcan->Instance->RF1R & CAN_RF1R_FMP1;
 800cf74:	687b      	ldr	r3, [r7, #4]
 800cf76:	681b      	ldr	r3, [r3, #0]
 800cf78:	691b      	ldr	r3, [r3, #16]
 800cf7a:	f003 0303 	and.w	r3, r3, #3
 800cf7e:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Rx FIFO fill level */
  return filllevel;
 800cf80:	68fb      	ldr	r3, [r7, #12]
}
 800cf82:	4618      	mov	r0, r3
 800cf84:	3714      	adds	r7, #20
 800cf86:	46bd      	mov	sp, r7
 800cf88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf8c:	4770      	bx	lr

0800cf8e <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800cf8e:	b580      	push	{r7, lr}
 800cf90:	b08a      	sub	sp, #40	@ 0x28
 800cf92:	af00      	add	r7, sp, #0
 800cf94:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800cf96:	2300      	movs	r3, #0
 800cf98:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800cf9a:	687b      	ldr	r3, [r7, #4]
 800cf9c:	681b      	ldr	r3, [r3, #0]
 800cf9e:	695b      	ldr	r3, [r3, #20]
 800cfa0:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800cfa2:	687b      	ldr	r3, [r7, #4]
 800cfa4:	681b      	ldr	r3, [r3, #0]
 800cfa6:	685b      	ldr	r3, [r3, #4]
 800cfa8:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800cfaa:	687b      	ldr	r3, [r7, #4]
 800cfac:	681b      	ldr	r3, [r3, #0]
 800cfae:	689b      	ldr	r3, [r3, #8]
 800cfb0:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800cfb2:	687b      	ldr	r3, [r7, #4]
 800cfb4:	681b      	ldr	r3, [r3, #0]
 800cfb6:	68db      	ldr	r3, [r3, #12]
 800cfb8:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800cfba:	687b      	ldr	r3, [r7, #4]
 800cfbc:	681b      	ldr	r3, [r3, #0]
 800cfbe:	691b      	ldr	r3, [r3, #16]
 800cfc0:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800cfc2:	687b      	ldr	r3, [r7, #4]
 800cfc4:	681b      	ldr	r3, [r3, #0]
 800cfc6:	699b      	ldr	r3, [r3, #24]
 800cfc8:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800cfca:	6a3b      	ldr	r3, [r7, #32]
 800cfcc:	f003 0301 	and.w	r3, r3, #1
 800cfd0:	2b00      	cmp	r3, #0
 800cfd2:	d07c      	beq.n	800d0ce <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800cfd4:	69bb      	ldr	r3, [r7, #24]
 800cfd6:	f003 0301 	and.w	r3, r3, #1
 800cfda:	2b00      	cmp	r3, #0
 800cfdc:	d023      	beq.n	800d026 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800cfde:	687b      	ldr	r3, [r7, #4]
 800cfe0:	681b      	ldr	r3, [r3, #0]
 800cfe2:	2201      	movs	r2, #1
 800cfe4:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800cfe6:	69bb      	ldr	r3, [r7, #24]
 800cfe8:	f003 0302 	and.w	r3, r3, #2
 800cfec:	2b00      	cmp	r3, #0
 800cfee:	d003      	beq.n	800cff8 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800cff0:	6878      	ldr	r0, [r7, #4]
 800cff2:	f000 f983 	bl	800d2fc <HAL_CAN_TxMailbox0CompleteCallback>
 800cff6:	e016      	b.n	800d026 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800cff8:	69bb      	ldr	r3, [r7, #24]
 800cffa:	f003 0304 	and.w	r3, r3, #4
 800cffe:	2b00      	cmp	r3, #0
 800d000:	d004      	beq.n	800d00c <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800d002:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d004:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800d008:	627b      	str	r3, [r7, #36]	@ 0x24
 800d00a:	e00c      	b.n	800d026 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800d00c:	69bb      	ldr	r3, [r7, #24]
 800d00e:	f003 0308 	and.w	r3, r3, #8
 800d012:	2b00      	cmp	r3, #0
 800d014:	d004      	beq.n	800d020 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800d016:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d018:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800d01c:	627b      	str	r3, [r7, #36]	@ 0x24
 800d01e:	e002      	b.n	800d026 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800d020:	6878      	ldr	r0, [r7, #4]
 800d022:	f000 f989 	bl	800d338 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800d026:	69bb      	ldr	r3, [r7, #24]
 800d028:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d02c:	2b00      	cmp	r3, #0
 800d02e:	d024      	beq.n	800d07a <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800d030:	687b      	ldr	r3, [r7, #4]
 800d032:	681b      	ldr	r3, [r3, #0]
 800d034:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800d038:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800d03a:	69bb      	ldr	r3, [r7, #24]
 800d03c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800d040:	2b00      	cmp	r3, #0
 800d042:	d003      	beq.n	800d04c <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800d044:	6878      	ldr	r0, [r7, #4]
 800d046:	f000 f963 	bl	800d310 <HAL_CAN_TxMailbox1CompleteCallback>
 800d04a:	e016      	b.n	800d07a <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800d04c:	69bb      	ldr	r3, [r7, #24]
 800d04e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d052:	2b00      	cmp	r3, #0
 800d054:	d004      	beq.n	800d060 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800d056:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d058:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800d05c:	627b      	str	r3, [r7, #36]	@ 0x24
 800d05e:	e00c      	b.n	800d07a <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800d060:	69bb      	ldr	r3, [r7, #24]
 800d062:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800d066:	2b00      	cmp	r3, #0
 800d068:	d004      	beq.n	800d074 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800d06a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d06c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800d070:	627b      	str	r3, [r7, #36]	@ 0x24
 800d072:	e002      	b.n	800d07a <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800d074:	6878      	ldr	r0, [r7, #4]
 800d076:	f000 f969 	bl	800d34c <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800d07a:	69bb      	ldr	r3, [r7, #24]
 800d07c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800d080:	2b00      	cmp	r3, #0
 800d082:	d024      	beq.n	800d0ce <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800d084:	687b      	ldr	r3, [r7, #4]
 800d086:	681b      	ldr	r3, [r3, #0]
 800d088:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800d08c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800d08e:	69bb      	ldr	r3, [r7, #24]
 800d090:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d094:	2b00      	cmp	r3, #0
 800d096:	d003      	beq.n	800d0a0 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800d098:	6878      	ldr	r0, [r7, #4]
 800d09a:	f000 f943 	bl	800d324 <HAL_CAN_TxMailbox2CompleteCallback>
 800d09e:	e016      	b.n	800d0ce <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800d0a0:	69bb      	ldr	r3, [r7, #24]
 800d0a2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800d0a6:	2b00      	cmp	r3, #0
 800d0a8:	d004      	beq.n	800d0b4 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800d0aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d0ac:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d0b0:	627b      	str	r3, [r7, #36]	@ 0x24
 800d0b2:	e00c      	b.n	800d0ce <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800d0b4:	69bb      	ldr	r3, [r7, #24]
 800d0b6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800d0ba:	2b00      	cmp	r3, #0
 800d0bc:	d004      	beq.n	800d0c8 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800d0be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d0c0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800d0c4:	627b      	str	r3, [r7, #36]	@ 0x24
 800d0c6:	e002      	b.n	800d0ce <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800d0c8:	6878      	ldr	r0, [r7, #4]
 800d0ca:	f000 f949 	bl	800d360 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800d0ce:	6a3b      	ldr	r3, [r7, #32]
 800d0d0:	f003 0308 	and.w	r3, r3, #8
 800d0d4:	2b00      	cmp	r3, #0
 800d0d6:	d00c      	beq.n	800d0f2 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800d0d8:	697b      	ldr	r3, [r7, #20]
 800d0da:	f003 0310 	and.w	r3, r3, #16
 800d0de:	2b00      	cmp	r3, #0
 800d0e0:	d007      	beq.n	800d0f2 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800d0e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d0e4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800d0e8:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800d0ea:	687b      	ldr	r3, [r7, #4]
 800d0ec:	681b      	ldr	r3, [r3, #0]
 800d0ee:	2210      	movs	r2, #16
 800d0f0:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800d0f2:	6a3b      	ldr	r3, [r7, #32]
 800d0f4:	f003 0304 	and.w	r3, r3, #4
 800d0f8:	2b00      	cmp	r3, #0
 800d0fa:	d00b      	beq.n	800d114 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800d0fc:	697b      	ldr	r3, [r7, #20]
 800d0fe:	f003 0308 	and.w	r3, r3, #8
 800d102:	2b00      	cmp	r3, #0
 800d104:	d006      	beq.n	800d114 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800d106:	687b      	ldr	r3, [r7, #4]
 800d108:	681b      	ldr	r3, [r3, #0]
 800d10a:	2208      	movs	r2, #8
 800d10c:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800d10e:	6878      	ldr	r0, [r7, #4]
 800d110:	f000 f93a 	bl	800d388 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800d114:	6a3b      	ldr	r3, [r7, #32]
 800d116:	f003 0302 	and.w	r3, r3, #2
 800d11a:	2b00      	cmp	r3, #0
 800d11c:	d009      	beq.n	800d132 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800d11e:	687b      	ldr	r3, [r7, #4]
 800d120:	681b      	ldr	r3, [r3, #0]
 800d122:	68db      	ldr	r3, [r3, #12]
 800d124:	f003 0303 	and.w	r3, r3, #3
 800d128:	2b00      	cmp	r3, #0
 800d12a:	d002      	beq.n	800d132 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800d12c:	6878      	ldr	r0, [r7, #4]
 800d12e:	f000 f921 	bl	800d374 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800d132:	6a3b      	ldr	r3, [r7, #32]
 800d134:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d138:	2b00      	cmp	r3, #0
 800d13a:	d00c      	beq.n	800d156 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800d13c:	693b      	ldr	r3, [r7, #16]
 800d13e:	f003 0310 	and.w	r3, r3, #16
 800d142:	2b00      	cmp	r3, #0
 800d144:	d007      	beq.n	800d156 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800d146:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d148:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800d14c:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800d14e:	687b      	ldr	r3, [r7, #4]
 800d150:	681b      	ldr	r3, [r3, #0]
 800d152:	2210      	movs	r2, #16
 800d154:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800d156:	6a3b      	ldr	r3, [r7, #32]
 800d158:	f003 0320 	and.w	r3, r3, #32
 800d15c:	2b00      	cmp	r3, #0
 800d15e:	d00b      	beq.n	800d178 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800d160:	693b      	ldr	r3, [r7, #16]
 800d162:	f003 0308 	and.w	r3, r3, #8
 800d166:	2b00      	cmp	r3, #0
 800d168:	d006      	beq.n	800d178 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800d16a:	687b      	ldr	r3, [r7, #4]
 800d16c:	681b      	ldr	r3, [r3, #0]
 800d16e:	2208      	movs	r2, #8
 800d170:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800d172:	6878      	ldr	r0, [r7, #4]
 800d174:	f000 f91c 	bl	800d3b0 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800d178:	6a3b      	ldr	r3, [r7, #32]
 800d17a:	f003 0310 	and.w	r3, r3, #16
 800d17e:	2b00      	cmp	r3, #0
 800d180:	d009      	beq.n	800d196 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800d182:	687b      	ldr	r3, [r7, #4]
 800d184:	681b      	ldr	r3, [r3, #0]
 800d186:	691b      	ldr	r3, [r3, #16]
 800d188:	f003 0303 	and.w	r3, r3, #3
 800d18c:	2b00      	cmp	r3, #0
 800d18e:	d002      	beq.n	800d196 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800d190:	6878      	ldr	r0, [r7, #4]
 800d192:	f000 f903 	bl	800d39c <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800d196:	6a3b      	ldr	r3, [r7, #32]
 800d198:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d19c:	2b00      	cmp	r3, #0
 800d19e:	d00b      	beq.n	800d1b8 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800d1a0:	69fb      	ldr	r3, [r7, #28]
 800d1a2:	f003 0310 	and.w	r3, r3, #16
 800d1a6:	2b00      	cmp	r3, #0
 800d1a8:	d006      	beq.n	800d1b8 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800d1aa:	687b      	ldr	r3, [r7, #4]
 800d1ac:	681b      	ldr	r3, [r3, #0]
 800d1ae:	2210      	movs	r2, #16
 800d1b0:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800d1b2:	6878      	ldr	r0, [r7, #4]
 800d1b4:	f000 f906 	bl	800d3c4 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800d1b8:	6a3b      	ldr	r3, [r7, #32]
 800d1ba:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800d1be:	2b00      	cmp	r3, #0
 800d1c0:	d00b      	beq.n	800d1da <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800d1c2:	69fb      	ldr	r3, [r7, #28]
 800d1c4:	f003 0308 	and.w	r3, r3, #8
 800d1c8:	2b00      	cmp	r3, #0
 800d1ca:	d006      	beq.n	800d1da <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800d1cc:	687b      	ldr	r3, [r7, #4]
 800d1ce:	681b      	ldr	r3, [r3, #0]
 800d1d0:	2208      	movs	r2, #8
 800d1d2:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800d1d4:	6878      	ldr	r0, [r7, #4]
 800d1d6:	f000 f8ff 	bl	800d3d8 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800d1da:	6a3b      	ldr	r3, [r7, #32]
 800d1dc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800d1e0:	2b00      	cmp	r3, #0
 800d1e2:	d07b      	beq.n	800d2dc <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800d1e4:	69fb      	ldr	r3, [r7, #28]
 800d1e6:	f003 0304 	and.w	r3, r3, #4
 800d1ea:	2b00      	cmp	r3, #0
 800d1ec:	d072      	beq.n	800d2d4 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800d1ee:	6a3b      	ldr	r3, [r7, #32]
 800d1f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d1f4:	2b00      	cmp	r3, #0
 800d1f6:	d008      	beq.n	800d20a <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800d1f8:	68fb      	ldr	r3, [r7, #12]
 800d1fa:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800d1fe:	2b00      	cmp	r3, #0
 800d200:	d003      	beq.n	800d20a <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800d202:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d204:	f043 0301 	orr.w	r3, r3, #1
 800d208:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800d20a:	6a3b      	ldr	r3, [r7, #32]
 800d20c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800d210:	2b00      	cmp	r3, #0
 800d212:	d008      	beq.n	800d226 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800d214:	68fb      	ldr	r3, [r7, #12]
 800d216:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800d21a:	2b00      	cmp	r3, #0
 800d21c:	d003      	beq.n	800d226 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800d21e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d220:	f043 0302 	orr.w	r3, r3, #2
 800d224:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800d226:	6a3b      	ldr	r3, [r7, #32]
 800d228:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d22c:	2b00      	cmp	r3, #0
 800d22e:	d008      	beq.n	800d242 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800d230:	68fb      	ldr	r3, [r7, #12]
 800d232:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800d236:	2b00      	cmp	r3, #0
 800d238:	d003      	beq.n	800d242 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800d23a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d23c:	f043 0304 	orr.w	r3, r3, #4
 800d240:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800d242:	6a3b      	ldr	r3, [r7, #32]
 800d244:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800d248:	2b00      	cmp	r3, #0
 800d24a:	d043      	beq.n	800d2d4 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800d24c:	68fb      	ldr	r3, [r7, #12]
 800d24e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800d252:	2b00      	cmp	r3, #0
 800d254:	d03e      	beq.n	800d2d4 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 800d256:	68fb      	ldr	r3, [r7, #12]
 800d258:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800d25c:	2b60      	cmp	r3, #96	@ 0x60
 800d25e:	d02b      	beq.n	800d2b8 <HAL_CAN_IRQHandler+0x32a>
 800d260:	2b60      	cmp	r3, #96	@ 0x60
 800d262:	d82e      	bhi.n	800d2c2 <HAL_CAN_IRQHandler+0x334>
 800d264:	2b50      	cmp	r3, #80	@ 0x50
 800d266:	d022      	beq.n	800d2ae <HAL_CAN_IRQHandler+0x320>
 800d268:	2b50      	cmp	r3, #80	@ 0x50
 800d26a:	d82a      	bhi.n	800d2c2 <HAL_CAN_IRQHandler+0x334>
 800d26c:	2b40      	cmp	r3, #64	@ 0x40
 800d26e:	d019      	beq.n	800d2a4 <HAL_CAN_IRQHandler+0x316>
 800d270:	2b40      	cmp	r3, #64	@ 0x40
 800d272:	d826      	bhi.n	800d2c2 <HAL_CAN_IRQHandler+0x334>
 800d274:	2b30      	cmp	r3, #48	@ 0x30
 800d276:	d010      	beq.n	800d29a <HAL_CAN_IRQHandler+0x30c>
 800d278:	2b30      	cmp	r3, #48	@ 0x30
 800d27a:	d822      	bhi.n	800d2c2 <HAL_CAN_IRQHandler+0x334>
 800d27c:	2b10      	cmp	r3, #16
 800d27e:	d002      	beq.n	800d286 <HAL_CAN_IRQHandler+0x2f8>
 800d280:	2b20      	cmp	r3, #32
 800d282:	d005      	beq.n	800d290 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800d284:	e01d      	b.n	800d2c2 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 800d286:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d288:	f043 0308 	orr.w	r3, r3, #8
 800d28c:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800d28e:	e019      	b.n	800d2c4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 800d290:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d292:	f043 0310 	orr.w	r3, r3, #16
 800d296:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800d298:	e014      	b.n	800d2c4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 800d29a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d29c:	f043 0320 	orr.w	r3, r3, #32
 800d2a0:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800d2a2:	e00f      	b.n	800d2c4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 800d2a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d2a6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d2aa:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800d2ac:	e00a      	b.n	800d2c4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 800d2ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d2b0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d2b4:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800d2b6:	e005      	b.n	800d2c4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 800d2b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d2ba:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800d2be:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800d2c0:	e000      	b.n	800d2c4 <HAL_CAN_IRQHandler+0x336>
            break;
 800d2c2:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800d2c4:	687b      	ldr	r3, [r7, #4]
 800d2c6:	681b      	ldr	r3, [r3, #0]
 800d2c8:	699a      	ldr	r2, [r3, #24]
 800d2ca:	687b      	ldr	r3, [r7, #4]
 800d2cc:	681b      	ldr	r3, [r3, #0]
 800d2ce:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800d2d2:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800d2d4:	687b      	ldr	r3, [r7, #4]
 800d2d6:	681b      	ldr	r3, [r3, #0]
 800d2d8:	2204      	movs	r2, #4
 800d2da:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800d2dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d2de:	2b00      	cmp	r3, #0
 800d2e0:	d008      	beq.n	800d2f4 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800d2e2:	687b      	ldr	r3, [r7, #4]
 800d2e4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800d2e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d2e8:	431a      	orrs	r2, r3
 800d2ea:	687b      	ldr	r3, [r7, #4]
 800d2ec:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800d2ee:	6878      	ldr	r0, [r7, #4]
 800d2f0:	f000 f87c 	bl	800d3ec <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800d2f4:	bf00      	nop
 800d2f6:	3728      	adds	r7, #40	@ 0x28
 800d2f8:	46bd      	mov	sp, r7
 800d2fa:	bd80      	pop	{r7, pc}

0800d2fc <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800d2fc:	b480      	push	{r7}
 800d2fe:	b083      	sub	sp, #12
 800d300:	af00      	add	r7, sp, #0
 800d302:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 800d304:	bf00      	nop
 800d306:	370c      	adds	r7, #12
 800d308:	46bd      	mov	sp, r7
 800d30a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d30e:	4770      	bx	lr

0800d310 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800d310:	b480      	push	{r7}
 800d312:	b083      	sub	sp, #12
 800d314:	af00      	add	r7, sp, #0
 800d316:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 800d318:	bf00      	nop
 800d31a:	370c      	adds	r7, #12
 800d31c:	46bd      	mov	sp, r7
 800d31e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d322:	4770      	bx	lr

0800d324 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800d324:	b480      	push	{r7}
 800d326:	b083      	sub	sp, #12
 800d328:	af00      	add	r7, sp, #0
 800d32a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 800d32c:	bf00      	nop
 800d32e:	370c      	adds	r7, #12
 800d330:	46bd      	mov	sp, r7
 800d332:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d336:	4770      	bx	lr

0800d338 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800d338:	b480      	push	{r7}
 800d33a:	b083      	sub	sp, #12
 800d33c:	af00      	add	r7, sp, #0
 800d33e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800d340:	bf00      	nop
 800d342:	370c      	adds	r7, #12
 800d344:	46bd      	mov	sp, r7
 800d346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d34a:	4770      	bx	lr

0800d34c <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800d34c:	b480      	push	{r7}
 800d34e:	b083      	sub	sp, #12
 800d350:	af00      	add	r7, sp, #0
 800d352:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800d354:	bf00      	nop
 800d356:	370c      	adds	r7, #12
 800d358:	46bd      	mov	sp, r7
 800d35a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d35e:	4770      	bx	lr

0800d360 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 800d360:	b480      	push	{r7}
 800d362:	b083      	sub	sp, #12
 800d364:	af00      	add	r7, sp, #0
 800d366:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800d368:	bf00      	nop
 800d36a:	370c      	adds	r7, #12
 800d36c:	46bd      	mov	sp, r7
 800d36e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d372:	4770      	bx	lr

0800d374 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800d374:	b480      	push	{r7}
 800d376:	b083      	sub	sp, #12
 800d378:	af00      	add	r7, sp, #0
 800d37a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 800d37c:	bf00      	nop
 800d37e:	370c      	adds	r7, #12
 800d380:	46bd      	mov	sp, r7
 800d382:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d386:	4770      	bx	lr

0800d388 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 800d388:	b480      	push	{r7}
 800d38a:	b083      	sub	sp, #12
 800d38c:	af00      	add	r7, sp, #0
 800d38e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800d390:	bf00      	nop
 800d392:	370c      	adds	r7, #12
 800d394:	46bd      	mov	sp, r7
 800d396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d39a:	4770      	bx	lr

0800d39c <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800d39c:	b480      	push	{r7}
 800d39e:	b083      	sub	sp, #12
 800d3a0:	af00      	add	r7, sp, #0
 800d3a2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 800d3a4:	bf00      	nop
 800d3a6:	370c      	adds	r7, #12
 800d3a8:	46bd      	mov	sp, r7
 800d3aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3ae:	4770      	bx	lr

0800d3b0 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800d3b0:	b480      	push	{r7}
 800d3b2:	b083      	sub	sp, #12
 800d3b4:	af00      	add	r7, sp, #0
 800d3b6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 800d3b8:	bf00      	nop
 800d3ba:	370c      	adds	r7, #12
 800d3bc:	46bd      	mov	sp, r7
 800d3be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3c2:	4770      	bx	lr

0800d3c4 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800d3c4:	b480      	push	{r7}
 800d3c6:	b083      	sub	sp, #12
 800d3c8:	af00      	add	r7, sp, #0
 800d3ca:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800d3cc:	bf00      	nop
 800d3ce:	370c      	adds	r7, #12
 800d3d0:	46bd      	mov	sp, r7
 800d3d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3d6:	4770      	bx	lr

0800d3d8 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 800d3d8:	b480      	push	{r7}
 800d3da:	b083      	sub	sp, #12
 800d3dc:	af00      	add	r7, sp, #0
 800d3de:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800d3e0:	bf00      	nop
 800d3e2:	370c      	adds	r7, #12
 800d3e4:	46bd      	mov	sp, r7
 800d3e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3ea:	4770      	bx	lr

0800d3ec <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800d3ec:	b480      	push	{r7}
 800d3ee:	b083      	sub	sp, #12
 800d3f0:	af00      	add	r7, sp, #0
 800d3f2:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 800d3f4:	bf00      	nop
 800d3f6:	370c      	adds	r7, #12
 800d3f8:	46bd      	mov	sp, r7
 800d3fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3fe:	4770      	bx	lr

0800d400 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800d400:	b480      	push	{r7}
 800d402:	b085      	sub	sp, #20
 800d404:	af00      	add	r7, sp, #0
 800d406:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800d408:	687b      	ldr	r3, [r7, #4]
 800d40a:	f003 0307 	and.w	r3, r3, #7
 800d40e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800d410:	4b0c      	ldr	r3, [pc, #48]	@ (800d444 <__NVIC_SetPriorityGrouping+0x44>)
 800d412:	68db      	ldr	r3, [r3, #12]
 800d414:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800d416:	68ba      	ldr	r2, [r7, #8]
 800d418:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800d41c:	4013      	ands	r3, r2
 800d41e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800d420:	68fb      	ldr	r3, [r7, #12]
 800d422:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800d424:	68bb      	ldr	r3, [r7, #8]
 800d426:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800d428:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800d42c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800d430:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800d432:	4a04      	ldr	r2, [pc, #16]	@ (800d444 <__NVIC_SetPriorityGrouping+0x44>)
 800d434:	68bb      	ldr	r3, [r7, #8]
 800d436:	60d3      	str	r3, [r2, #12]
}
 800d438:	bf00      	nop
 800d43a:	3714      	adds	r7, #20
 800d43c:	46bd      	mov	sp, r7
 800d43e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d442:	4770      	bx	lr
 800d444:	e000ed00 	.word	0xe000ed00

0800d448 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800d448:	b480      	push	{r7}
 800d44a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800d44c:	4b04      	ldr	r3, [pc, #16]	@ (800d460 <__NVIC_GetPriorityGrouping+0x18>)
 800d44e:	68db      	ldr	r3, [r3, #12]
 800d450:	0a1b      	lsrs	r3, r3, #8
 800d452:	f003 0307 	and.w	r3, r3, #7
}
 800d456:	4618      	mov	r0, r3
 800d458:	46bd      	mov	sp, r7
 800d45a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d45e:	4770      	bx	lr
 800d460:	e000ed00 	.word	0xe000ed00

0800d464 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800d464:	b480      	push	{r7}
 800d466:	b083      	sub	sp, #12
 800d468:	af00      	add	r7, sp, #0
 800d46a:	4603      	mov	r3, r0
 800d46c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800d46e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d472:	2b00      	cmp	r3, #0
 800d474:	db0b      	blt.n	800d48e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800d476:	79fb      	ldrb	r3, [r7, #7]
 800d478:	f003 021f 	and.w	r2, r3, #31
 800d47c:	4907      	ldr	r1, [pc, #28]	@ (800d49c <__NVIC_EnableIRQ+0x38>)
 800d47e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d482:	095b      	lsrs	r3, r3, #5
 800d484:	2001      	movs	r0, #1
 800d486:	fa00 f202 	lsl.w	r2, r0, r2
 800d48a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800d48e:	bf00      	nop
 800d490:	370c      	adds	r7, #12
 800d492:	46bd      	mov	sp, r7
 800d494:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d498:	4770      	bx	lr
 800d49a:	bf00      	nop
 800d49c:	e000e100 	.word	0xe000e100

0800d4a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800d4a0:	b480      	push	{r7}
 800d4a2:	b083      	sub	sp, #12
 800d4a4:	af00      	add	r7, sp, #0
 800d4a6:	4603      	mov	r3, r0
 800d4a8:	6039      	str	r1, [r7, #0]
 800d4aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800d4ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d4b0:	2b00      	cmp	r3, #0
 800d4b2:	db0a      	blt.n	800d4ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800d4b4:	683b      	ldr	r3, [r7, #0]
 800d4b6:	b2da      	uxtb	r2, r3
 800d4b8:	490c      	ldr	r1, [pc, #48]	@ (800d4ec <__NVIC_SetPriority+0x4c>)
 800d4ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d4be:	0112      	lsls	r2, r2, #4
 800d4c0:	b2d2      	uxtb	r2, r2
 800d4c2:	440b      	add	r3, r1
 800d4c4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800d4c8:	e00a      	b.n	800d4e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800d4ca:	683b      	ldr	r3, [r7, #0]
 800d4cc:	b2da      	uxtb	r2, r3
 800d4ce:	4908      	ldr	r1, [pc, #32]	@ (800d4f0 <__NVIC_SetPriority+0x50>)
 800d4d0:	79fb      	ldrb	r3, [r7, #7]
 800d4d2:	f003 030f 	and.w	r3, r3, #15
 800d4d6:	3b04      	subs	r3, #4
 800d4d8:	0112      	lsls	r2, r2, #4
 800d4da:	b2d2      	uxtb	r2, r2
 800d4dc:	440b      	add	r3, r1
 800d4de:	761a      	strb	r2, [r3, #24]
}
 800d4e0:	bf00      	nop
 800d4e2:	370c      	adds	r7, #12
 800d4e4:	46bd      	mov	sp, r7
 800d4e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4ea:	4770      	bx	lr
 800d4ec:	e000e100 	.word	0xe000e100
 800d4f0:	e000ed00 	.word	0xe000ed00

0800d4f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800d4f4:	b480      	push	{r7}
 800d4f6:	b089      	sub	sp, #36	@ 0x24
 800d4f8:	af00      	add	r7, sp, #0
 800d4fa:	60f8      	str	r0, [r7, #12]
 800d4fc:	60b9      	str	r1, [r7, #8]
 800d4fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800d500:	68fb      	ldr	r3, [r7, #12]
 800d502:	f003 0307 	and.w	r3, r3, #7
 800d506:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800d508:	69fb      	ldr	r3, [r7, #28]
 800d50a:	f1c3 0307 	rsb	r3, r3, #7
 800d50e:	2b04      	cmp	r3, #4
 800d510:	bf28      	it	cs
 800d512:	2304      	movcs	r3, #4
 800d514:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800d516:	69fb      	ldr	r3, [r7, #28]
 800d518:	3304      	adds	r3, #4
 800d51a:	2b06      	cmp	r3, #6
 800d51c:	d902      	bls.n	800d524 <NVIC_EncodePriority+0x30>
 800d51e:	69fb      	ldr	r3, [r7, #28]
 800d520:	3b03      	subs	r3, #3
 800d522:	e000      	b.n	800d526 <NVIC_EncodePriority+0x32>
 800d524:	2300      	movs	r3, #0
 800d526:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800d528:	f04f 32ff 	mov.w	r2, #4294967295
 800d52c:	69bb      	ldr	r3, [r7, #24]
 800d52e:	fa02 f303 	lsl.w	r3, r2, r3
 800d532:	43da      	mvns	r2, r3
 800d534:	68bb      	ldr	r3, [r7, #8]
 800d536:	401a      	ands	r2, r3
 800d538:	697b      	ldr	r3, [r7, #20]
 800d53a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800d53c:	f04f 31ff 	mov.w	r1, #4294967295
 800d540:	697b      	ldr	r3, [r7, #20]
 800d542:	fa01 f303 	lsl.w	r3, r1, r3
 800d546:	43d9      	mvns	r1, r3
 800d548:	687b      	ldr	r3, [r7, #4]
 800d54a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800d54c:	4313      	orrs	r3, r2
         );
}
 800d54e:	4618      	mov	r0, r3
 800d550:	3724      	adds	r7, #36	@ 0x24
 800d552:	46bd      	mov	sp, r7
 800d554:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d558:	4770      	bx	lr
	...

0800d55c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800d55c:	b580      	push	{r7, lr}
 800d55e:	b082      	sub	sp, #8
 800d560:	af00      	add	r7, sp, #0
 800d562:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800d564:	687b      	ldr	r3, [r7, #4]
 800d566:	3b01      	subs	r3, #1
 800d568:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800d56c:	d301      	bcc.n	800d572 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800d56e:	2301      	movs	r3, #1
 800d570:	e00f      	b.n	800d592 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800d572:	4a0a      	ldr	r2, [pc, #40]	@ (800d59c <SysTick_Config+0x40>)
 800d574:	687b      	ldr	r3, [r7, #4]
 800d576:	3b01      	subs	r3, #1
 800d578:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800d57a:	210f      	movs	r1, #15
 800d57c:	f04f 30ff 	mov.w	r0, #4294967295
 800d580:	f7ff ff8e 	bl	800d4a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800d584:	4b05      	ldr	r3, [pc, #20]	@ (800d59c <SysTick_Config+0x40>)
 800d586:	2200      	movs	r2, #0
 800d588:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800d58a:	4b04      	ldr	r3, [pc, #16]	@ (800d59c <SysTick_Config+0x40>)
 800d58c:	2207      	movs	r2, #7
 800d58e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800d590:	2300      	movs	r3, #0
}
 800d592:	4618      	mov	r0, r3
 800d594:	3708      	adds	r7, #8
 800d596:	46bd      	mov	sp, r7
 800d598:	bd80      	pop	{r7, pc}
 800d59a:	bf00      	nop
 800d59c:	e000e010 	.word	0xe000e010

0800d5a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800d5a0:	b580      	push	{r7, lr}
 800d5a2:	b082      	sub	sp, #8
 800d5a4:	af00      	add	r7, sp, #0
 800d5a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800d5a8:	6878      	ldr	r0, [r7, #4]
 800d5aa:	f7ff ff29 	bl	800d400 <__NVIC_SetPriorityGrouping>
}
 800d5ae:	bf00      	nop
 800d5b0:	3708      	adds	r7, #8
 800d5b2:	46bd      	mov	sp, r7
 800d5b4:	bd80      	pop	{r7, pc}

0800d5b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800d5b6:	b580      	push	{r7, lr}
 800d5b8:	b086      	sub	sp, #24
 800d5ba:	af00      	add	r7, sp, #0
 800d5bc:	4603      	mov	r3, r0
 800d5be:	60b9      	str	r1, [r7, #8]
 800d5c0:	607a      	str	r2, [r7, #4]
 800d5c2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800d5c4:	2300      	movs	r3, #0
 800d5c6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800d5c8:	f7ff ff3e 	bl	800d448 <__NVIC_GetPriorityGrouping>
 800d5cc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800d5ce:	687a      	ldr	r2, [r7, #4]
 800d5d0:	68b9      	ldr	r1, [r7, #8]
 800d5d2:	6978      	ldr	r0, [r7, #20]
 800d5d4:	f7ff ff8e 	bl	800d4f4 <NVIC_EncodePriority>
 800d5d8:	4602      	mov	r2, r0
 800d5da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d5de:	4611      	mov	r1, r2
 800d5e0:	4618      	mov	r0, r3
 800d5e2:	f7ff ff5d 	bl	800d4a0 <__NVIC_SetPriority>
}
 800d5e6:	bf00      	nop
 800d5e8:	3718      	adds	r7, #24
 800d5ea:	46bd      	mov	sp, r7
 800d5ec:	bd80      	pop	{r7, pc}

0800d5ee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800d5ee:	b580      	push	{r7, lr}
 800d5f0:	b082      	sub	sp, #8
 800d5f2:	af00      	add	r7, sp, #0
 800d5f4:	4603      	mov	r3, r0
 800d5f6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800d5f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d5fc:	4618      	mov	r0, r3
 800d5fe:	f7ff ff31 	bl	800d464 <__NVIC_EnableIRQ>
}
 800d602:	bf00      	nop
 800d604:	3708      	adds	r7, #8
 800d606:	46bd      	mov	sp, r7
 800d608:	bd80      	pop	{r7, pc}

0800d60a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800d60a:	b580      	push	{r7, lr}
 800d60c:	b082      	sub	sp, #8
 800d60e:	af00      	add	r7, sp, #0
 800d610:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800d612:	6878      	ldr	r0, [r7, #4]
 800d614:	f7ff ffa2 	bl	800d55c <SysTick_Config>
 800d618:	4603      	mov	r3, r0
}
 800d61a:	4618      	mov	r0, r3
 800d61c:	3708      	adds	r7, #8
 800d61e:	46bd      	mov	sp, r7
 800d620:	bd80      	pop	{r7, pc}
	...

0800d624 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800d624:	b480      	push	{r7}
 800d626:	b089      	sub	sp, #36	@ 0x24
 800d628:	af00      	add	r7, sp, #0
 800d62a:	6078      	str	r0, [r7, #4]
 800d62c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800d62e:	2300      	movs	r3, #0
 800d630:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800d632:	2300      	movs	r3, #0
 800d634:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800d636:	2300      	movs	r3, #0
 800d638:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800d63a:	2300      	movs	r3, #0
 800d63c:	61fb      	str	r3, [r7, #28]
 800d63e:	e165      	b.n	800d90c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800d640:	2201      	movs	r2, #1
 800d642:	69fb      	ldr	r3, [r7, #28]
 800d644:	fa02 f303 	lsl.w	r3, r2, r3
 800d648:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800d64a:	683b      	ldr	r3, [r7, #0]
 800d64c:	681b      	ldr	r3, [r3, #0]
 800d64e:	697a      	ldr	r2, [r7, #20]
 800d650:	4013      	ands	r3, r2
 800d652:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800d654:	693a      	ldr	r2, [r7, #16]
 800d656:	697b      	ldr	r3, [r7, #20]
 800d658:	429a      	cmp	r2, r3
 800d65a:	f040 8154 	bne.w	800d906 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800d65e:	683b      	ldr	r3, [r7, #0]
 800d660:	685b      	ldr	r3, [r3, #4]
 800d662:	f003 0303 	and.w	r3, r3, #3
 800d666:	2b01      	cmp	r3, #1
 800d668:	d005      	beq.n	800d676 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800d66a:	683b      	ldr	r3, [r7, #0]
 800d66c:	685b      	ldr	r3, [r3, #4]
 800d66e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800d672:	2b02      	cmp	r3, #2
 800d674:	d130      	bne.n	800d6d8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800d676:	687b      	ldr	r3, [r7, #4]
 800d678:	689b      	ldr	r3, [r3, #8]
 800d67a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800d67c:	69fb      	ldr	r3, [r7, #28]
 800d67e:	005b      	lsls	r3, r3, #1
 800d680:	2203      	movs	r2, #3
 800d682:	fa02 f303 	lsl.w	r3, r2, r3
 800d686:	43db      	mvns	r3, r3
 800d688:	69ba      	ldr	r2, [r7, #24]
 800d68a:	4013      	ands	r3, r2
 800d68c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800d68e:	683b      	ldr	r3, [r7, #0]
 800d690:	68da      	ldr	r2, [r3, #12]
 800d692:	69fb      	ldr	r3, [r7, #28]
 800d694:	005b      	lsls	r3, r3, #1
 800d696:	fa02 f303 	lsl.w	r3, r2, r3
 800d69a:	69ba      	ldr	r2, [r7, #24]
 800d69c:	4313      	orrs	r3, r2
 800d69e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800d6a0:	687b      	ldr	r3, [r7, #4]
 800d6a2:	69ba      	ldr	r2, [r7, #24]
 800d6a4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800d6a6:	687b      	ldr	r3, [r7, #4]
 800d6a8:	685b      	ldr	r3, [r3, #4]
 800d6aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800d6ac:	2201      	movs	r2, #1
 800d6ae:	69fb      	ldr	r3, [r7, #28]
 800d6b0:	fa02 f303 	lsl.w	r3, r2, r3
 800d6b4:	43db      	mvns	r3, r3
 800d6b6:	69ba      	ldr	r2, [r7, #24]
 800d6b8:	4013      	ands	r3, r2
 800d6ba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800d6bc:	683b      	ldr	r3, [r7, #0]
 800d6be:	685b      	ldr	r3, [r3, #4]
 800d6c0:	091b      	lsrs	r3, r3, #4
 800d6c2:	f003 0201 	and.w	r2, r3, #1
 800d6c6:	69fb      	ldr	r3, [r7, #28]
 800d6c8:	fa02 f303 	lsl.w	r3, r2, r3
 800d6cc:	69ba      	ldr	r2, [r7, #24]
 800d6ce:	4313      	orrs	r3, r2
 800d6d0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800d6d2:	687b      	ldr	r3, [r7, #4]
 800d6d4:	69ba      	ldr	r2, [r7, #24]
 800d6d6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800d6d8:	683b      	ldr	r3, [r7, #0]
 800d6da:	685b      	ldr	r3, [r3, #4]
 800d6dc:	f003 0303 	and.w	r3, r3, #3
 800d6e0:	2b03      	cmp	r3, #3
 800d6e2:	d017      	beq.n	800d714 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800d6e4:	687b      	ldr	r3, [r7, #4]
 800d6e6:	68db      	ldr	r3, [r3, #12]
 800d6e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800d6ea:	69fb      	ldr	r3, [r7, #28]
 800d6ec:	005b      	lsls	r3, r3, #1
 800d6ee:	2203      	movs	r2, #3
 800d6f0:	fa02 f303 	lsl.w	r3, r2, r3
 800d6f4:	43db      	mvns	r3, r3
 800d6f6:	69ba      	ldr	r2, [r7, #24]
 800d6f8:	4013      	ands	r3, r2
 800d6fa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800d6fc:	683b      	ldr	r3, [r7, #0]
 800d6fe:	689a      	ldr	r2, [r3, #8]
 800d700:	69fb      	ldr	r3, [r7, #28]
 800d702:	005b      	lsls	r3, r3, #1
 800d704:	fa02 f303 	lsl.w	r3, r2, r3
 800d708:	69ba      	ldr	r2, [r7, #24]
 800d70a:	4313      	orrs	r3, r2
 800d70c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800d70e:	687b      	ldr	r3, [r7, #4]
 800d710:	69ba      	ldr	r2, [r7, #24]
 800d712:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800d714:	683b      	ldr	r3, [r7, #0]
 800d716:	685b      	ldr	r3, [r3, #4]
 800d718:	f003 0303 	and.w	r3, r3, #3
 800d71c:	2b02      	cmp	r3, #2
 800d71e:	d123      	bne.n	800d768 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800d720:	69fb      	ldr	r3, [r7, #28]
 800d722:	08da      	lsrs	r2, r3, #3
 800d724:	687b      	ldr	r3, [r7, #4]
 800d726:	3208      	adds	r2, #8
 800d728:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d72c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800d72e:	69fb      	ldr	r3, [r7, #28]
 800d730:	f003 0307 	and.w	r3, r3, #7
 800d734:	009b      	lsls	r3, r3, #2
 800d736:	220f      	movs	r2, #15
 800d738:	fa02 f303 	lsl.w	r3, r2, r3
 800d73c:	43db      	mvns	r3, r3
 800d73e:	69ba      	ldr	r2, [r7, #24]
 800d740:	4013      	ands	r3, r2
 800d742:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800d744:	683b      	ldr	r3, [r7, #0]
 800d746:	691a      	ldr	r2, [r3, #16]
 800d748:	69fb      	ldr	r3, [r7, #28]
 800d74a:	f003 0307 	and.w	r3, r3, #7
 800d74e:	009b      	lsls	r3, r3, #2
 800d750:	fa02 f303 	lsl.w	r3, r2, r3
 800d754:	69ba      	ldr	r2, [r7, #24]
 800d756:	4313      	orrs	r3, r2
 800d758:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800d75a:	69fb      	ldr	r3, [r7, #28]
 800d75c:	08da      	lsrs	r2, r3, #3
 800d75e:	687b      	ldr	r3, [r7, #4]
 800d760:	3208      	adds	r2, #8
 800d762:	69b9      	ldr	r1, [r7, #24]
 800d764:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800d768:	687b      	ldr	r3, [r7, #4]
 800d76a:	681b      	ldr	r3, [r3, #0]
 800d76c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800d76e:	69fb      	ldr	r3, [r7, #28]
 800d770:	005b      	lsls	r3, r3, #1
 800d772:	2203      	movs	r2, #3
 800d774:	fa02 f303 	lsl.w	r3, r2, r3
 800d778:	43db      	mvns	r3, r3
 800d77a:	69ba      	ldr	r2, [r7, #24]
 800d77c:	4013      	ands	r3, r2
 800d77e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800d780:	683b      	ldr	r3, [r7, #0]
 800d782:	685b      	ldr	r3, [r3, #4]
 800d784:	f003 0203 	and.w	r2, r3, #3
 800d788:	69fb      	ldr	r3, [r7, #28]
 800d78a:	005b      	lsls	r3, r3, #1
 800d78c:	fa02 f303 	lsl.w	r3, r2, r3
 800d790:	69ba      	ldr	r2, [r7, #24]
 800d792:	4313      	orrs	r3, r2
 800d794:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800d796:	687b      	ldr	r3, [r7, #4]
 800d798:	69ba      	ldr	r2, [r7, #24]
 800d79a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800d79c:	683b      	ldr	r3, [r7, #0]
 800d79e:	685b      	ldr	r3, [r3, #4]
 800d7a0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800d7a4:	2b00      	cmp	r3, #0
 800d7a6:	f000 80ae 	beq.w	800d906 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800d7aa:	2300      	movs	r3, #0
 800d7ac:	60fb      	str	r3, [r7, #12]
 800d7ae:	4b5d      	ldr	r3, [pc, #372]	@ (800d924 <HAL_GPIO_Init+0x300>)
 800d7b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d7b2:	4a5c      	ldr	r2, [pc, #368]	@ (800d924 <HAL_GPIO_Init+0x300>)
 800d7b4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800d7b8:	6453      	str	r3, [r2, #68]	@ 0x44
 800d7ba:	4b5a      	ldr	r3, [pc, #360]	@ (800d924 <HAL_GPIO_Init+0x300>)
 800d7bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d7be:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800d7c2:	60fb      	str	r3, [r7, #12]
 800d7c4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800d7c6:	4a58      	ldr	r2, [pc, #352]	@ (800d928 <HAL_GPIO_Init+0x304>)
 800d7c8:	69fb      	ldr	r3, [r7, #28]
 800d7ca:	089b      	lsrs	r3, r3, #2
 800d7cc:	3302      	adds	r3, #2
 800d7ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d7d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800d7d4:	69fb      	ldr	r3, [r7, #28]
 800d7d6:	f003 0303 	and.w	r3, r3, #3
 800d7da:	009b      	lsls	r3, r3, #2
 800d7dc:	220f      	movs	r2, #15
 800d7de:	fa02 f303 	lsl.w	r3, r2, r3
 800d7e2:	43db      	mvns	r3, r3
 800d7e4:	69ba      	ldr	r2, [r7, #24]
 800d7e6:	4013      	ands	r3, r2
 800d7e8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800d7ea:	687b      	ldr	r3, [r7, #4]
 800d7ec:	4a4f      	ldr	r2, [pc, #316]	@ (800d92c <HAL_GPIO_Init+0x308>)
 800d7ee:	4293      	cmp	r3, r2
 800d7f0:	d025      	beq.n	800d83e <HAL_GPIO_Init+0x21a>
 800d7f2:	687b      	ldr	r3, [r7, #4]
 800d7f4:	4a4e      	ldr	r2, [pc, #312]	@ (800d930 <HAL_GPIO_Init+0x30c>)
 800d7f6:	4293      	cmp	r3, r2
 800d7f8:	d01f      	beq.n	800d83a <HAL_GPIO_Init+0x216>
 800d7fa:	687b      	ldr	r3, [r7, #4]
 800d7fc:	4a4d      	ldr	r2, [pc, #308]	@ (800d934 <HAL_GPIO_Init+0x310>)
 800d7fe:	4293      	cmp	r3, r2
 800d800:	d019      	beq.n	800d836 <HAL_GPIO_Init+0x212>
 800d802:	687b      	ldr	r3, [r7, #4]
 800d804:	4a4c      	ldr	r2, [pc, #304]	@ (800d938 <HAL_GPIO_Init+0x314>)
 800d806:	4293      	cmp	r3, r2
 800d808:	d013      	beq.n	800d832 <HAL_GPIO_Init+0x20e>
 800d80a:	687b      	ldr	r3, [r7, #4]
 800d80c:	4a4b      	ldr	r2, [pc, #300]	@ (800d93c <HAL_GPIO_Init+0x318>)
 800d80e:	4293      	cmp	r3, r2
 800d810:	d00d      	beq.n	800d82e <HAL_GPIO_Init+0x20a>
 800d812:	687b      	ldr	r3, [r7, #4]
 800d814:	4a4a      	ldr	r2, [pc, #296]	@ (800d940 <HAL_GPIO_Init+0x31c>)
 800d816:	4293      	cmp	r3, r2
 800d818:	d007      	beq.n	800d82a <HAL_GPIO_Init+0x206>
 800d81a:	687b      	ldr	r3, [r7, #4]
 800d81c:	4a49      	ldr	r2, [pc, #292]	@ (800d944 <HAL_GPIO_Init+0x320>)
 800d81e:	4293      	cmp	r3, r2
 800d820:	d101      	bne.n	800d826 <HAL_GPIO_Init+0x202>
 800d822:	2306      	movs	r3, #6
 800d824:	e00c      	b.n	800d840 <HAL_GPIO_Init+0x21c>
 800d826:	2307      	movs	r3, #7
 800d828:	e00a      	b.n	800d840 <HAL_GPIO_Init+0x21c>
 800d82a:	2305      	movs	r3, #5
 800d82c:	e008      	b.n	800d840 <HAL_GPIO_Init+0x21c>
 800d82e:	2304      	movs	r3, #4
 800d830:	e006      	b.n	800d840 <HAL_GPIO_Init+0x21c>
 800d832:	2303      	movs	r3, #3
 800d834:	e004      	b.n	800d840 <HAL_GPIO_Init+0x21c>
 800d836:	2302      	movs	r3, #2
 800d838:	e002      	b.n	800d840 <HAL_GPIO_Init+0x21c>
 800d83a:	2301      	movs	r3, #1
 800d83c:	e000      	b.n	800d840 <HAL_GPIO_Init+0x21c>
 800d83e:	2300      	movs	r3, #0
 800d840:	69fa      	ldr	r2, [r7, #28]
 800d842:	f002 0203 	and.w	r2, r2, #3
 800d846:	0092      	lsls	r2, r2, #2
 800d848:	4093      	lsls	r3, r2
 800d84a:	69ba      	ldr	r2, [r7, #24]
 800d84c:	4313      	orrs	r3, r2
 800d84e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800d850:	4935      	ldr	r1, [pc, #212]	@ (800d928 <HAL_GPIO_Init+0x304>)
 800d852:	69fb      	ldr	r3, [r7, #28]
 800d854:	089b      	lsrs	r3, r3, #2
 800d856:	3302      	adds	r3, #2
 800d858:	69ba      	ldr	r2, [r7, #24]
 800d85a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800d85e:	4b3a      	ldr	r3, [pc, #232]	@ (800d948 <HAL_GPIO_Init+0x324>)
 800d860:	689b      	ldr	r3, [r3, #8]
 800d862:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800d864:	693b      	ldr	r3, [r7, #16]
 800d866:	43db      	mvns	r3, r3
 800d868:	69ba      	ldr	r2, [r7, #24]
 800d86a:	4013      	ands	r3, r2
 800d86c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800d86e:	683b      	ldr	r3, [r7, #0]
 800d870:	685b      	ldr	r3, [r3, #4]
 800d872:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800d876:	2b00      	cmp	r3, #0
 800d878:	d003      	beq.n	800d882 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800d87a:	69ba      	ldr	r2, [r7, #24]
 800d87c:	693b      	ldr	r3, [r7, #16]
 800d87e:	4313      	orrs	r3, r2
 800d880:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800d882:	4a31      	ldr	r2, [pc, #196]	@ (800d948 <HAL_GPIO_Init+0x324>)
 800d884:	69bb      	ldr	r3, [r7, #24]
 800d886:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800d888:	4b2f      	ldr	r3, [pc, #188]	@ (800d948 <HAL_GPIO_Init+0x324>)
 800d88a:	68db      	ldr	r3, [r3, #12]
 800d88c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800d88e:	693b      	ldr	r3, [r7, #16]
 800d890:	43db      	mvns	r3, r3
 800d892:	69ba      	ldr	r2, [r7, #24]
 800d894:	4013      	ands	r3, r2
 800d896:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800d898:	683b      	ldr	r3, [r7, #0]
 800d89a:	685b      	ldr	r3, [r3, #4]
 800d89c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800d8a0:	2b00      	cmp	r3, #0
 800d8a2:	d003      	beq.n	800d8ac <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800d8a4:	69ba      	ldr	r2, [r7, #24]
 800d8a6:	693b      	ldr	r3, [r7, #16]
 800d8a8:	4313      	orrs	r3, r2
 800d8aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800d8ac:	4a26      	ldr	r2, [pc, #152]	@ (800d948 <HAL_GPIO_Init+0x324>)
 800d8ae:	69bb      	ldr	r3, [r7, #24]
 800d8b0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800d8b2:	4b25      	ldr	r3, [pc, #148]	@ (800d948 <HAL_GPIO_Init+0x324>)
 800d8b4:	685b      	ldr	r3, [r3, #4]
 800d8b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800d8b8:	693b      	ldr	r3, [r7, #16]
 800d8ba:	43db      	mvns	r3, r3
 800d8bc:	69ba      	ldr	r2, [r7, #24]
 800d8be:	4013      	ands	r3, r2
 800d8c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800d8c2:	683b      	ldr	r3, [r7, #0]
 800d8c4:	685b      	ldr	r3, [r3, #4]
 800d8c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d8ca:	2b00      	cmp	r3, #0
 800d8cc:	d003      	beq.n	800d8d6 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800d8ce:	69ba      	ldr	r2, [r7, #24]
 800d8d0:	693b      	ldr	r3, [r7, #16]
 800d8d2:	4313      	orrs	r3, r2
 800d8d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800d8d6:	4a1c      	ldr	r2, [pc, #112]	@ (800d948 <HAL_GPIO_Init+0x324>)
 800d8d8:	69bb      	ldr	r3, [r7, #24]
 800d8da:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800d8dc:	4b1a      	ldr	r3, [pc, #104]	@ (800d948 <HAL_GPIO_Init+0x324>)
 800d8de:	681b      	ldr	r3, [r3, #0]
 800d8e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800d8e2:	693b      	ldr	r3, [r7, #16]
 800d8e4:	43db      	mvns	r3, r3
 800d8e6:	69ba      	ldr	r2, [r7, #24]
 800d8e8:	4013      	ands	r3, r2
 800d8ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800d8ec:	683b      	ldr	r3, [r7, #0]
 800d8ee:	685b      	ldr	r3, [r3, #4]
 800d8f0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800d8f4:	2b00      	cmp	r3, #0
 800d8f6:	d003      	beq.n	800d900 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800d8f8:	69ba      	ldr	r2, [r7, #24]
 800d8fa:	693b      	ldr	r3, [r7, #16]
 800d8fc:	4313      	orrs	r3, r2
 800d8fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800d900:	4a11      	ldr	r2, [pc, #68]	@ (800d948 <HAL_GPIO_Init+0x324>)
 800d902:	69bb      	ldr	r3, [r7, #24]
 800d904:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800d906:	69fb      	ldr	r3, [r7, #28]
 800d908:	3301      	adds	r3, #1
 800d90a:	61fb      	str	r3, [r7, #28]
 800d90c:	69fb      	ldr	r3, [r7, #28]
 800d90e:	2b0f      	cmp	r3, #15
 800d910:	f67f ae96 	bls.w	800d640 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800d914:	bf00      	nop
 800d916:	bf00      	nop
 800d918:	3724      	adds	r7, #36	@ 0x24
 800d91a:	46bd      	mov	sp, r7
 800d91c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d920:	4770      	bx	lr
 800d922:	bf00      	nop
 800d924:	40023800 	.word	0x40023800
 800d928:	40013800 	.word	0x40013800
 800d92c:	40020000 	.word	0x40020000
 800d930:	40020400 	.word	0x40020400
 800d934:	40020800 	.word	0x40020800
 800d938:	40020c00 	.word	0x40020c00
 800d93c:	40021000 	.word	0x40021000
 800d940:	40021400 	.word	0x40021400
 800d944:	40021800 	.word	0x40021800
 800d948:	40013c00 	.word	0x40013c00

0800d94c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800d94c:	b480      	push	{r7}
 800d94e:	b083      	sub	sp, #12
 800d950:	af00      	add	r7, sp, #0
 800d952:	6078      	str	r0, [r7, #4]
 800d954:	460b      	mov	r3, r1
 800d956:	807b      	strh	r3, [r7, #2]
 800d958:	4613      	mov	r3, r2
 800d95a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800d95c:	787b      	ldrb	r3, [r7, #1]
 800d95e:	2b00      	cmp	r3, #0
 800d960:	d003      	beq.n	800d96a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800d962:	887a      	ldrh	r2, [r7, #2]
 800d964:	687b      	ldr	r3, [r7, #4]
 800d966:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800d968:	e003      	b.n	800d972 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800d96a:	887b      	ldrh	r3, [r7, #2]
 800d96c:	041a      	lsls	r2, r3, #16
 800d96e:	687b      	ldr	r3, [r7, #4]
 800d970:	619a      	str	r2, [r3, #24]
}
 800d972:	bf00      	nop
 800d974:	370c      	adds	r7, #12
 800d976:	46bd      	mov	sp, r7
 800d978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d97c:	4770      	bx	lr
	...

0800d980 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800d980:	b580      	push	{r7, lr}
 800d982:	b084      	sub	sp, #16
 800d984:	af00      	add	r7, sp, #0
 800d986:	6078      	str	r0, [r7, #4]
 800d988:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800d98a:	687b      	ldr	r3, [r7, #4]
 800d98c:	2b00      	cmp	r3, #0
 800d98e:	d101      	bne.n	800d994 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800d990:	2301      	movs	r3, #1
 800d992:	e0cc      	b.n	800db2e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800d994:	4b68      	ldr	r3, [pc, #416]	@ (800db38 <HAL_RCC_ClockConfig+0x1b8>)
 800d996:	681b      	ldr	r3, [r3, #0]
 800d998:	f003 030f 	and.w	r3, r3, #15
 800d99c:	683a      	ldr	r2, [r7, #0]
 800d99e:	429a      	cmp	r2, r3
 800d9a0:	d90c      	bls.n	800d9bc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800d9a2:	4b65      	ldr	r3, [pc, #404]	@ (800db38 <HAL_RCC_ClockConfig+0x1b8>)
 800d9a4:	683a      	ldr	r2, [r7, #0]
 800d9a6:	b2d2      	uxtb	r2, r2
 800d9a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800d9aa:	4b63      	ldr	r3, [pc, #396]	@ (800db38 <HAL_RCC_ClockConfig+0x1b8>)
 800d9ac:	681b      	ldr	r3, [r3, #0]
 800d9ae:	f003 030f 	and.w	r3, r3, #15
 800d9b2:	683a      	ldr	r2, [r7, #0]
 800d9b4:	429a      	cmp	r2, r3
 800d9b6:	d001      	beq.n	800d9bc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800d9b8:	2301      	movs	r3, #1
 800d9ba:	e0b8      	b.n	800db2e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800d9bc:	687b      	ldr	r3, [r7, #4]
 800d9be:	681b      	ldr	r3, [r3, #0]
 800d9c0:	f003 0302 	and.w	r3, r3, #2
 800d9c4:	2b00      	cmp	r3, #0
 800d9c6:	d020      	beq.n	800da0a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800d9c8:	687b      	ldr	r3, [r7, #4]
 800d9ca:	681b      	ldr	r3, [r3, #0]
 800d9cc:	f003 0304 	and.w	r3, r3, #4
 800d9d0:	2b00      	cmp	r3, #0
 800d9d2:	d005      	beq.n	800d9e0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800d9d4:	4b59      	ldr	r3, [pc, #356]	@ (800db3c <HAL_RCC_ClockConfig+0x1bc>)
 800d9d6:	689b      	ldr	r3, [r3, #8]
 800d9d8:	4a58      	ldr	r2, [pc, #352]	@ (800db3c <HAL_RCC_ClockConfig+0x1bc>)
 800d9da:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800d9de:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800d9e0:	687b      	ldr	r3, [r7, #4]
 800d9e2:	681b      	ldr	r3, [r3, #0]
 800d9e4:	f003 0308 	and.w	r3, r3, #8
 800d9e8:	2b00      	cmp	r3, #0
 800d9ea:	d005      	beq.n	800d9f8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800d9ec:	4b53      	ldr	r3, [pc, #332]	@ (800db3c <HAL_RCC_ClockConfig+0x1bc>)
 800d9ee:	689b      	ldr	r3, [r3, #8]
 800d9f0:	4a52      	ldr	r2, [pc, #328]	@ (800db3c <HAL_RCC_ClockConfig+0x1bc>)
 800d9f2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800d9f6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800d9f8:	4b50      	ldr	r3, [pc, #320]	@ (800db3c <HAL_RCC_ClockConfig+0x1bc>)
 800d9fa:	689b      	ldr	r3, [r3, #8]
 800d9fc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800da00:	687b      	ldr	r3, [r7, #4]
 800da02:	689b      	ldr	r3, [r3, #8]
 800da04:	494d      	ldr	r1, [pc, #308]	@ (800db3c <HAL_RCC_ClockConfig+0x1bc>)
 800da06:	4313      	orrs	r3, r2
 800da08:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800da0a:	687b      	ldr	r3, [r7, #4]
 800da0c:	681b      	ldr	r3, [r3, #0]
 800da0e:	f003 0301 	and.w	r3, r3, #1
 800da12:	2b00      	cmp	r3, #0
 800da14:	d044      	beq.n	800daa0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800da16:	687b      	ldr	r3, [r7, #4]
 800da18:	685b      	ldr	r3, [r3, #4]
 800da1a:	2b01      	cmp	r3, #1
 800da1c:	d107      	bne.n	800da2e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800da1e:	4b47      	ldr	r3, [pc, #284]	@ (800db3c <HAL_RCC_ClockConfig+0x1bc>)
 800da20:	681b      	ldr	r3, [r3, #0]
 800da22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800da26:	2b00      	cmp	r3, #0
 800da28:	d119      	bne.n	800da5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800da2a:	2301      	movs	r3, #1
 800da2c:	e07f      	b.n	800db2e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800da2e:	687b      	ldr	r3, [r7, #4]
 800da30:	685b      	ldr	r3, [r3, #4]
 800da32:	2b02      	cmp	r3, #2
 800da34:	d003      	beq.n	800da3e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800da36:	687b      	ldr	r3, [r7, #4]
 800da38:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800da3a:	2b03      	cmp	r3, #3
 800da3c:	d107      	bne.n	800da4e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800da3e:	4b3f      	ldr	r3, [pc, #252]	@ (800db3c <HAL_RCC_ClockConfig+0x1bc>)
 800da40:	681b      	ldr	r3, [r3, #0]
 800da42:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800da46:	2b00      	cmp	r3, #0
 800da48:	d109      	bne.n	800da5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800da4a:	2301      	movs	r3, #1
 800da4c:	e06f      	b.n	800db2e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800da4e:	4b3b      	ldr	r3, [pc, #236]	@ (800db3c <HAL_RCC_ClockConfig+0x1bc>)
 800da50:	681b      	ldr	r3, [r3, #0]
 800da52:	f003 0302 	and.w	r3, r3, #2
 800da56:	2b00      	cmp	r3, #0
 800da58:	d101      	bne.n	800da5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800da5a:	2301      	movs	r3, #1
 800da5c:	e067      	b.n	800db2e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800da5e:	4b37      	ldr	r3, [pc, #220]	@ (800db3c <HAL_RCC_ClockConfig+0x1bc>)
 800da60:	689b      	ldr	r3, [r3, #8]
 800da62:	f023 0203 	bic.w	r2, r3, #3
 800da66:	687b      	ldr	r3, [r7, #4]
 800da68:	685b      	ldr	r3, [r3, #4]
 800da6a:	4934      	ldr	r1, [pc, #208]	@ (800db3c <HAL_RCC_ClockConfig+0x1bc>)
 800da6c:	4313      	orrs	r3, r2
 800da6e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800da70:	f7fe f9ca 	bl	800be08 <HAL_GetTick>
 800da74:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800da76:	e00a      	b.n	800da8e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800da78:	f7fe f9c6 	bl	800be08 <HAL_GetTick>
 800da7c:	4602      	mov	r2, r0
 800da7e:	68fb      	ldr	r3, [r7, #12]
 800da80:	1ad3      	subs	r3, r2, r3
 800da82:	f241 3288 	movw	r2, #5000	@ 0x1388
 800da86:	4293      	cmp	r3, r2
 800da88:	d901      	bls.n	800da8e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800da8a:	2303      	movs	r3, #3
 800da8c:	e04f      	b.n	800db2e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800da8e:	4b2b      	ldr	r3, [pc, #172]	@ (800db3c <HAL_RCC_ClockConfig+0x1bc>)
 800da90:	689b      	ldr	r3, [r3, #8]
 800da92:	f003 020c 	and.w	r2, r3, #12
 800da96:	687b      	ldr	r3, [r7, #4]
 800da98:	685b      	ldr	r3, [r3, #4]
 800da9a:	009b      	lsls	r3, r3, #2
 800da9c:	429a      	cmp	r2, r3
 800da9e:	d1eb      	bne.n	800da78 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800daa0:	4b25      	ldr	r3, [pc, #148]	@ (800db38 <HAL_RCC_ClockConfig+0x1b8>)
 800daa2:	681b      	ldr	r3, [r3, #0]
 800daa4:	f003 030f 	and.w	r3, r3, #15
 800daa8:	683a      	ldr	r2, [r7, #0]
 800daaa:	429a      	cmp	r2, r3
 800daac:	d20c      	bcs.n	800dac8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800daae:	4b22      	ldr	r3, [pc, #136]	@ (800db38 <HAL_RCC_ClockConfig+0x1b8>)
 800dab0:	683a      	ldr	r2, [r7, #0]
 800dab2:	b2d2      	uxtb	r2, r2
 800dab4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800dab6:	4b20      	ldr	r3, [pc, #128]	@ (800db38 <HAL_RCC_ClockConfig+0x1b8>)
 800dab8:	681b      	ldr	r3, [r3, #0]
 800daba:	f003 030f 	and.w	r3, r3, #15
 800dabe:	683a      	ldr	r2, [r7, #0]
 800dac0:	429a      	cmp	r2, r3
 800dac2:	d001      	beq.n	800dac8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800dac4:	2301      	movs	r3, #1
 800dac6:	e032      	b.n	800db2e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800dac8:	687b      	ldr	r3, [r7, #4]
 800daca:	681b      	ldr	r3, [r3, #0]
 800dacc:	f003 0304 	and.w	r3, r3, #4
 800dad0:	2b00      	cmp	r3, #0
 800dad2:	d008      	beq.n	800dae6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800dad4:	4b19      	ldr	r3, [pc, #100]	@ (800db3c <HAL_RCC_ClockConfig+0x1bc>)
 800dad6:	689b      	ldr	r3, [r3, #8]
 800dad8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800dadc:	687b      	ldr	r3, [r7, #4]
 800dade:	68db      	ldr	r3, [r3, #12]
 800dae0:	4916      	ldr	r1, [pc, #88]	@ (800db3c <HAL_RCC_ClockConfig+0x1bc>)
 800dae2:	4313      	orrs	r3, r2
 800dae4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800dae6:	687b      	ldr	r3, [r7, #4]
 800dae8:	681b      	ldr	r3, [r3, #0]
 800daea:	f003 0308 	and.w	r3, r3, #8
 800daee:	2b00      	cmp	r3, #0
 800daf0:	d009      	beq.n	800db06 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800daf2:	4b12      	ldr	r3, [pc, #72]	@ (800db3c <HAL_RCC_ClockConfig+0x1bc>)
 800daf4:	689b      	ldr	r3, [r3, #8]
 800daf6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800dafa:	687b      	ldr	r3, [r7, #4]
 800dafc:	691b      	ldr	r3, [r3, #16]
 800dafe:	00db      	lsls	r3, r3, #3
 800db00:	490e      	ldr	r1, [pc, #56]	@ (800db3c <HAL_RCC_ClockConfig+0x1bc>)
 800db02:	4313      	orrs	r3, r2
 800db04:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800db06:	f000 f821 	bl	800db4c <HAL_RCC_GetSysClockFreq>
 800db0a:	4602      	mov	r2, r0
 800db0c:	4b0b      	ldr	r3, [pc, #44]	@ (800db3c <HAL_RCC_ClockConfig+0x1bc>)
 800db0e:	689b      	ldr	r3, [r3, #8]
 800db10:	091b      	lsrs	r3, r3, #4
 800db12:	f003 030f 	and.w	r3, r3, #15
 800db16:	490a      	ldr	r1, [pc, #40]	@ (800db40 <HAL_RCC_ClockConfig+0x1c0>)
 800db18:	5ccb      	ldrb	r3, [r1, r3]
 800db1a:	fa22 f303 	lsr.w	r3, r2, r3
 800db1e:	4a09      	ldr	r2, [pc, #36]	@ (800db44 <HAL_RCC_ClockConfig+0x1c4>)
 800db20:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800db22:	4b09      	ldr	r3, [pc, #36]	@ (800db48 <HAL_RCC_ClockConfig+0x1c8>)
 800db24:	681b      	ldr	r3, [r3, #0]
 800db26:	4618      	mov	r0, r3
 800db28:	f7fe f92a 	bl	800bd80 <HAL_InitTick>

  return HAL_OK;
 800db2c:	2300      	movs	r3, #0
}
 800db2e:	4618      	mov	r0, r3
 800db30:	3710      	adds	r7, #16
 800db32:	46bd      	mov	sp, r7
 800db34:	bd80      	pop	{r7, pc}
 800db36:	bf00      	nop
 800db38:	40023c00 	.word	0x40023c00
 800db3c:	40023800 	.word	0x40023800
 800db40:	08010130 	.word	0x08010130
 800db44:	20000000 	.word	0x20000000
 800db48:	20000008 	.word	0x20000008

0800db4c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800db4c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800db50:	b0ae      	sub	sp, #184	@ 0xb8
 800db52:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800db54:	2300      	movs	r3, #0
 800db56:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 800db5a:	2300      	movs	r3, #0
 800db5c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 800db60:	2300      	movs	r3, #0
 800db62:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 800db66:	2300      	movs	r3, #0
 800db68:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 800db6c:	2300      	movs	r3, #0
 800db6e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800db72:	4bcb      	ldr	r3, [pc, #812]	@ (800dea0 <HAL_RCC_GetSysClockFreq+0x354>)
 800db74:	689b      	ldr	r3, [r3, #8]
 800db76:	f003 030c 	and.w	r3, r3, #12
 800db7a:	2b0c      	cmp	r3, #12
 800db7c:	f200 8204 	bhi.w	800df88 <HAL_RCC_GetSysClockFreq+0x43c>
 800db80:	a201      	add	r2, pc, #4	@ (adr r2, 800db88 <HAL_RCC_GetSysClockFreq+0x3c>)
 800db82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800db86:	bf00      	nop
 800db88:	0800dbbd 	.word	0x0800dbbd
 800db8c:	0800df89 	.word	0x0800df89
 800db90:	0800df89 	.word	0x0800df89
 800db94:	0800df89 	.word	0x0800df89
 800db98:	0800dbc5 	.word	0x0800dbc5
 800db9c:	0800df89 	.word	0x0800df89
 800dba0:	0800df89 	.word	0x0800df89
 800dba4:	0800df89 	.word	0x0800df89
 800dba8:	0800dbcd 	.word	0x0800dbcd
 800dbac:	0800df89 	.word	0x0800df89
 800dbb0:	0800df89 	.word	0x0800df89
 800dbb4:	0800df89 	.word	0x0800df89
 800dbb8:	0800ddbd 	.word	0x0800ddbd
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800dbbc:	4bb9      	ldr	r3, [pc, #740]	@ (800dea4 <HAL_RCC_GetSysClockFreq+0x358>)
 800dbbe:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800dbc2:	e1e5      	b.n	800df90 <HAL_RCC_GetSysClockFreq+0x444>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800dbc4:	4bb7      	ldr	r3, [pc, #732]	@ (800dea4 <HAL_RCC_GetSysClockFreq+0x358>)
 800dbc6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800dbca:	e1e1      	b.n	800df90 <HAL_RCC_GetSysClockFreq+0x444>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800dbcc:	4bb4      	ldr	r3, [pc, #720]	@ (800dea0 <HAL_RCC_GetSysClockFreq+0x354>)
 800dbce:	685b      	ldr	r3, [r3, #4]
 800dbd0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800dbd4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800dbd8:	4bb1      	ldr	r3, [pc, #708]	@ (800dea0 <HAL_RCC_GetSysClockFreq+0x354>)
 800dbda:	685b      	ldr	r3, [r3, #4]
 800dbdc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800dbe0:	2b00      	cmp	r3, #0
 800dbe2:	d071      	beq.n	800dcc8 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800dbe4:	4bae      	ldr	r3, [pc, #696]	@ (800dea0 <HAL_RCC_GetSysClockFreq+0x354>)
 800dbe6:	685b      	ldr	r3, [r3, #4]
 800dbe8:	099b      	lsrs	r3, r3, #6
 800dbea:	2200      	movs	r2, #0
 800dbec:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800dbf0:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 800dbf4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800dbf8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dbfc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800dc00:	2300      	movs	r3, #0
 800dc02:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800dc06:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800dc0a:	4622      	mov	r2, r4
 800dc0c:	462b      	mov	r3, r5
 800dc0e:	f04f 0000 	mov.w	r0, #0
 800dc12:	f04f 0100 	mov.w	r1, #0
 800dc16:	0159      	lsls	r1, r3, #5
 800dc18:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800dc1c:	0150      	lsls	r0, r2, #5
 800dc1e:	4602      	mov	r2, r0
 800dc20:	460b      	mov	r3, r1
 800dc22:	4621      	mov	r1, r4
 800dc24:	1a51      	subs	r1, r2, r1
 800dc26:	6439      	str	r1, [r7, #64]	@ 0x40
 800dc28:	4629      	mov	r1, r5
 800dc2a:	eb63 0301 	sbc.w	r3, r3, r1
 800dc2e:	647b      	str	r3, [r7, #68]	@ 0x44
 800dc30:	f04f 0200 	mov.w	r2, #0
 800dc34:	f04f 0300 	mov.w	r3, #0
 800dc38:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 800dc3c:	4649      	mov	r1, r9
 800dc3e:	018b      	lsls	r3, r1, #6
 800dc40:	4641      	mov	r1, r8
 800dc42:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800dc46:	4641      	mov	r1, r8
 800dc48:	018a      	lsls	r2, r1, #6
 800dc4a:	4641      	mov	r1, r8
 800dc4c:	1a51      	subs	r1, r2, r1
 800dc4e:	63b9      	str	r1, [r7, #56]	@ 0x38
 800dc50:	4649      	mov	r1, r9
 800dc52:	eb63 0301 	sbc.w	r3, r3, r1
 800dc56:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800dc58:	f04f 0200 	mov.w	r2, #0
 800dc5c:	f04f 0300 	mov.w	r3, #0
 800dc60:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 800dc64:	4649      	mov	r1, r9
 800dc66:	00cb      	lsls	r3, r1, #3
 800dc68:	4641      	mov	r1, r8
 800dc6a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800dc6e:	4641      	mov	r1, r8
 800dc70:	00ca      	lsls	r2, r1, #3
 800dc72:	4610      	mov	r0, r2
 800dc74:	4619      	mov	r1, r3
 800dc76:	4603      	mov	r3, r0
 800dc78:	4622      	mov	r2, r4
 800dc7a:	189b      	adds	r3, r3, r2
 800dc7c:	633b      	str	r3, [r7, #48]	@ 0x30
 800dc7e:	462b      	mov	r3, r5
 800dc80:	460a      	mov	r2, r1
 800dc82:	eb42 0303 	adc.w	r3, r2, r3
 800dc86:	637b      	str	r3, [r7, #52]	@ 0x34
 800dc88:	f04f 0200 	mov.w	r2, #0
 800dc8c:	f04f 0300 	mov.w	r3, #0
 800dc90:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800dc94:	4629      	mov	r1, r5
 800dc96:	028b      	lsls	r3, r1, #10
 800dc98:	4621      	mov	r1, r4
 800dc9a:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800dc9e:	4621      	mov	r1, r4
 800dca0:	028a      	lsls	r2, r1, #10
 800dca2:	4610      	mov	r0, r2
 800dca4:	4619      	mov	r1, r3
 800dca6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800dcaa:	2200      	movs	r2, #0
 800dcac:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800dcb0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800dcb4:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 800dcb8:	f7f2 fec4 	bl	8000a44 <__aeabi_uldivmod>
 800dcbc:	4602      	mov	r2, r0
 800dcbe:	460b      	mov	r3, r1
 800dcc0:	4613      	mov	r3, r2
 800dcc2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800dcc6:	e067      	b.n	800dd98 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800dcc8:	4b75      	ldr	r3, [pc, #468]	@ (800dea0 <HAL_RCC_GetSysClockFreq+0x354>)
 800dcca:	685b      	ldr	r3, [r3, #4]
 800dccc:	099b      	lsrs	r3, r3, #6
 800dcce:	2200      	movs	r2, #0
 800dcd0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800dcd4:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 800dcd8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800dcdc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dce0:	67bb      	str	r3, [r7, #120]	@ 0x78
 800dce2:	2300      	movs	r3, #0
 800dce4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800dce6:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 800dcea:	4622      	mov	r2, r4
 800dcec:	462b      	mov	r3, r5
 800dcee:	f04f 0000 	mov.w	r0, #0
 800dcf2:	f04f 0100 	mov.w	r1, #0
 800dcf6:	0159      	lsls	r1, r3, #5
 800dcf8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800dcfc:	0150      	lsls	r0, r2, #5
 800dcfe:	4602      	mov	r2, r0
 800dd00:	460b      	mov	r3, r1
 800dd02:	4621      	mov	r1, r4
 800dd04:	1a51      	subs	r1, r2, r1
 800dd06:	62b9      	str	r1, [r7, #40]	@ 0x28
 800dd08:	4629      	mov	r1, r5
 800dd0a:	eb63 0301 	sbc.w	r3, r3, r1
 800dd0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800dd10:	f04f 0200 	mov.w	r2, #0
 800dd14:	f04f 0300 	mov.w	r3, #0
 800dd18:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 800dd1c:	4649      	mov	r1, r9
 800dd1e:	018b      	lsls	r3, r1, #6
 800dd20:	4641      	mov	r1, r8
 800dd22:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800dd26:	4641      	mov	r1, r8
 800dd28:	018a      	lsls	r2, r1, #6
 800dd2a:	4641      	mov	r1, r8
 800dd2c:	ebb2 0a01 	subs.w	sl, r2, r1
 800dd30:	4649      	mov	r1, r9
 800dd32:	eb63 0b01 	sbc.w	fp, r3, r1
 800dd36:	f04f 0200 	mov.w	r2, #0
 800dd3a:	f04f 0300 	mov.w	r3, #0
 800dd3e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800dd42:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800dd46:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800dd4a:	4692      	mov	sl, r2
 800dd4c:	469b      	mov	fp, r3
 800dd4e:	4623      	mov	r3, r4
 800dd50:	eb1a 0303 	adds.w	r3, sl, r3
 800dd54:	623b      	str	r3, [r7, #32]
 800dd56:	462b      	mov	r3, r5
 800dd58:	eb4b 0303 	adc.w	r3, fp, r3
 800dd5c:	627b      	str	r3, [r7, #36]	@ 0x24
 800dd5e:	f04f 0200 	mov.w	r2, #0
 800dd62:	f04f 0300 	mov.w	r3, #0
 800dd66:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800dd6a:	4629      	mov	r1, r5
 800dd6c:	028b      	lsls	r3, r1, #10
 800dd6e:	4621      	mov	r1, r4
 800dd70:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800dd74:	4621      	mov	r1, r4
 800dd76:	028a      	lsls	r2, r1, #10
 800dd78:	4610      	mov	r0, r2
 800dd7a:	4619      	mov	r1, r3
 800dd7c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800dd80:	2200      	movs	r2, #0
 800dd82:	673b      	str	r3, [r7, #112]	@ 0x70
 800dd84:	677a      	str	r2, [r7, #116]	@ 0x74
 800dd86:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 800dd8a:	f7f2 fe5b 	bl	8000a44 <__aeabi_uldivmod>
 800dd8e:	4602      	mov	r2, r0
 800dd90:	460b      	mov	r3, r1
 800dd92:	4613      	mov	r3, r2
 800dd94:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800dd98:	4b41      	ldr	r3, [pc, #260]	@ (800dea0 <HAL_RCC_GetSysClockFreq+0x354>)
 800dd9a:	685b      	ldr	r3, [r3, #4]
 800dd9c:	0c1b      	lsrs	r3, r3, #16
 800dd9e:	f003 0303 	and.w	r3, r3, #3
 800dda2:	3301      	adds	r3, #1
 800dda4:	005b      	lsls	r3, r3, #1
 800dda6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 800ddaa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800ddae:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800ddb2:	fbb2 f3f3 	udiv	r3, r2, r3
 800ddb6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800ddba:	e0e9      	b.n	800df90 <HAL_RCC_GetSysClockFreq+0x444>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800ddbc:	4b38      	ldr	r3, [pc, #224]	@ (800dea0 <HAL_RCC_GetSysClockFreq+0x354>)
 800ddbe:	685b      	ldr	r3, [r3, #4]
 800ddc0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800ddc4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800ddc8:	4b35      	ldr	r3, [pc, #212]	@ (800dea0 <HAL_RCC_GetSysClockFreq+0x354>)
 800ddca:	685b      	ldr	r3, [r3, #4]
 800ddcc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800ddd0:	2b00      	cmp	r3, #0
 800ddd2:	d069      	beq.n	800dea8 <HAL_RCC_GetSysClockFreq+0x35c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800ddd4:	4b32      	ldr	r3, [pc, #200]	@ (800dea0 <HAL_RCC_GetSysClockFreq+0x354>)
 800ddd6:	685b      	ldr	r3, [r3, #4]
 800ddd8:	099b      	lsrs	r3, r3, #6
 800ddda:	2200      	movs	r2, #0
 800dddc:	66bb      	str	r3, [r7, #104]	@ 0x68
 800ddde:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800dde0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800dde2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dde6:	663b      	str	r3, [r7, #96]	@ 0x60
 800dde8:	2300      	movs	r3, #0
 800ddea:	667b      	str	r3, [r7, #100]	@ 0x64
 800ddec:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 800ddf0:	4622      	mov	r2, r4
 800ddf2:	462b      	mov	r3, r5
 800ddf4:	f04f 0000 	mov.w	r0, #0
 800ddf8:	f04f 0100 	mov.w	r1, #0
 800ddfc:	0159      	lsls	r1, r3, #5
 800ddfe:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800de02:	0150      	lsls	r0, r2, #5
 800de04:	4602      	mov	r2, r0
 800de06:	460b      	mov	r3, r1
 800de08:	4621      	mov	r1, r4
 800de0a:	1a51      	subs	r1, r2, r1
 800de0c:	61b9      	str	r1, [r7, #24]
 800de0e:	4629      	mov	r1, r5
 800de10:	eb63 0301 	sbc.w	r3, r3, r1
 800de14:	61fb      	str	r3, [r7, #28]
 800de16:	f04f 0200 	mov.w	r2, #0
 800de1a:	f04f 0300 	mov.w	r3, #0
 800de1e:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800de22:	4659      	mov	r1, fp
 800de24:	018b      	lsls	r3, r1, #6
 800de26:	4651      	mov	r1, sl
 800de28:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800de2c:	4651      	mov	r1, sl
 800de2e:	018a      	lsls	r2, r1, #6
 800de30:	4651      	mov	r1, sl
 800de32:	ebb2 0801 	subs.w	r8, r2, r1
 800de36:	4659      	mov	r1, fp
 800de38:	eb63 0901 	sbc.w	r9, r3, r1
 800de3c:	f04f 0200 	mov.w	r2, #0
 800de40:	f04f 0300 	mov.w	r3, #0
 800de44:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800de48:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800de4c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800de50:	4690      	mov	r8, r2
 800de52:	4699      	mov	r9, r3
 800de54:	4623      	mov	r3, r4
 800de56:	eb18 0303 	adds.w	r3, r8, r3
 800de5a:	613b      	str	r3, [r7, #16]
 800de5c:	462b      	mov	r3, r5
 800de5e:	eb49 0303 	adc.w	r3, r9, r3
 800de62:	617b      	str	r3, [r7, #20]
 800de64:	f04f 0200 	mov.w	r2, #0
 800de68:	f04f 0300 	mov.w	r3, #0
 800de6c:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800de70:	4629      	mov	r1, r5
 800de72:	028b      	lsls	r3, r1, #10
 800de74:	4621      	mov	r1, r4
 800de76:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800de7a:	4621      	mov	r1, r4
 800de7c:	028a      	lsls	r2, r1, #10
 800de7e:	4610      	mov	r0, r2
 800de80:	4619      	mov	r1, r3
 800de82:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800de86:	2200      	movs	r2, #0
 800de88:	65bb      	str	r3, [r7, #88]	@ 0x58
 800de8a:	65fa      	str	r2, [r7, #92]	@ 0x5c
 800de8c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800de90:	f7f2 fdd8 	bl	8000a44 <__aeabi_uldivmod>
 800de94:	4602      	mov	r2, r0
 800de96:	460b      	mov	r3, r1
 800de98:	4613      	mov	r3, r2
 800de9a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800de9e:	e063      	b.n	800df68 <HAL_RCC_GetSysClockFreq+0x41c>
 800dea0:	40023800 	.word	0x40023800
 800dea4:	00f42400 	.word	0x00f42400
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800dea8:	4b3d      	ldr	r3, [pc, #244]	@ (800dfa0 <HAL_RCC_GetSysClockFreq+0x454>)
 800deaa:	685b      	ldr	r3, [r3, #4]
 800deac:	099b      	lsrs	r3, r3, #6
 800deae:	2200      	movs	r2, #0
 800deb0:	4618      	mov	r0, r3
 800deb2:	4611      	mov	r1, r2
 800deb4:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800deb8:	653b      	str	r3, [r7, #80]	@ 0x50
 800deba:	2300      	movs	r3, #0
 800debc:	657b      	str	r3, [r7, #84]	@ 0x54
 800debe:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 800dec2:	4642      	mov	r2, r8
 800dec4:	464b      	mov	r3, r9
 800dec6:	f04f 0000 	mov.w	r0, #0
 800deca:	f04f 0100 	mov.w	r1, #0
 800dece:	0159      	lsls	r1, r3, #5
 800ded0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800ded4:	0150      	lsls	r0, r2, #5
 800ded6:	4602      	mov	r2, r0
 800ded8:	460b      	mov	r3, r1
 800deda:	4641      	mov	r1, r8
 800dedc:	1a51      	subs	r1, r2, r1
 800dede:	60b9      	str	r1, [r7, #8]
 800dee0:	4649      	mov	r1, r9
 800dee2:	eb63 0301 	sbc.w	r3, r3, r1
 800dee6:	60fb      	str	r3, [r7, #12]
 800dee8:	f04f 0200 	mov.w	r2, #0
 800deec:	f04f 0300 	mov.w	r3, #0
 800def0:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 800def4:	4659      	mov	r1, fp
 800def6:	018b      	lsls	r3, r1, #6
 800def8:	4651      	mov	r1, sl
 800defa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800defe:	4651      	mov	r1, sl
 800df00:	018a      	lsls	r2, r1, #6
 800df02:	4651      	mov	r1, sl
 800df04:	1a54      	subs	r4, r2, r1
 800df06:	4659      	mov	r1, fp
 800df08:	eb63 0501 	sbc.w	r5, r3, r1
 800df0c:	f04f 0200 	mov.w	r2, #0
 800df10:	f04f 0300 	mov.w	r3, #0
 800df14:	00eb      	lsls	r3, r5, #3
 800df16:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800df1a:	00e2      	lsls	r2, r4, #3
 800df1c:	4614      	mov	r4, r2
 800df1e:	461d      	mov	r5, r3
 800df20:	4643      	mov	r3, r8
 800df22:	18e3      	adds	r3, r4, r3
 800df24:	603b      	str	r3, [r7, #0]
 800df26:	464b      	mov	r3, r9
 800df28:	eb45 0303 	adc.w	r3, r5, r3
 800df2c:	607b      	str	r3, [r7, #4]
 800df2e:	f04f 0200 	mov.w	r2, #0
 800df32:	f04f 0300 	mov.w	r3, #0
 800df36:	e9d7 4500 	ldrd	r4, r5, [r7]
 800df3a:	4629      	mov	r1, r5
 800df3c:	028b      	lsls	r3, r1, #10
 800df3e:	4621      	mov	r1, r4
 800df40:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800df44:	4621      	mov	r1, r4
 800df46:	028a      	lsls	r2, r1, #10
 800df48:	4610      	mov	r0, r2
 800df4a:	4619      	mov	r1, r3
 800df4c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800df50:	2200      	movs	r2, #0
 800df52:	64bb      	str	r3, [r7, #72]	@ 0x48
 800df54:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800df56:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800df5a:	f7f2 fd73 	bl	8000a44 <__aeabi_uldivmod>
 800df5e:	4602      	mov	r2, r0
 800df60:	460b      	mov	r3, r1
 800df62:	4613      	mov	r3, r2
 800df64:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800df68:	4b0d      	ldr	r3, [pc, #52]	@ (800dfa0 <HAL_RCC_GetSysClockFreq+0x454>)
 800df6a:	685b      	ldr	r3, [r3, #4]
 800df6c:	0f1b      	lsrs	r3, r3, #28
 800df6e:	f003 0307 	and.w	r3, r3, #7
 800df72:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 800df76:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800df7a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800df7e:	fbb2 f3f3 	udiv	r3, r2, r3
 800df82:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800df86:	e003      	b.n	800df90 <HAL_RCC_GetSysClockFreq+0x444>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800df88:	4b06      	ldr	r3, [pc, #24]	@ (800dfa4 <HAL_RCC_GetSysClockFreq+0x458>)
 800df8a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800df8e:	bf00      	nop
    }
  }
  return sysclockfreq;
 800df90:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 800df94:	4618      	mov	r0, r3
 800df96:	37b8      	adds	r7, #184	@ 0xb8
 800df98:	46bd      	mov	sp, r7
 800df9a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800df9e:	bf00      	nop
 800dfa0:	40023800 	.word	0x40023800
 800dfa4:	00f42400 	.word	0x00f42400

0800dfa8 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800dfa8:	b580      	push	{r7, lr}
 800dfaa:	b086      	sub	sp, #24
 800dfac:	af00      	add	r7, sp, #0
 800dfae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800dfb0:	687b      	ldr	r3, [r7, #4]
 800dfb2:	2b00      	cmp	r3, #0
 800dfb4:	d101      	bne.n	800dfba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800dfb6:	2301      	movs	r3, #1
 800dfb8:	e28d      	b.n	800e4d6 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800dfba:	687b      	ldr	r3, [r7, #4]
 800dfbc:	681b      	ldr	r3, [r3, #0]
 800dfbe:	f003 0301 	and.w	r3, r3, #1
 800dfc2:	2b00      	cmp	r3, #0
 800dfc4:	f000 8083 	beq.w	800e0ce <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800dfc8:	4b94      	ldr	r3, [pc, #592]	@ (800e21c <HAL_RCC_OscConfig+0x274>)
 800dfca:	689b      	ldr	r3, [r3, #8]
 800dfcc:	f003 030c 	and.w	r3, r3, #12
 800dfd0:	2b04      	cmp	r3, #4
 800dfd2:	d019      	beq.n	800e008 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800dfd4:	4b91      	ldr	r3, [pc, #580]	@ (800e21c <HAL_RCC_OscConfig+0x274>)
 800dfd6:	689b      	ldr	r3, [r3, #8]
 800dfd8:	f003 030c 	and.w	r3, r3, #12
        || \
 800dfdc:	2b08      	cmp	r3, #8
 800dfde:	d106      	bne.n	800dfee <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800dfe0:	4b8e      	ldr	r3, [pc, #568]	@ (800e21c <HAL_RCC_OscConfig+0x274>)
 800dfe2:	685b      	ldr	r3, [r3, #4]
 800dfe4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800dfe8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800dfec:	d00c      	beq.n	800e008 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800dfee:	4b8b      	ldr	r3, [pc, #556]	@ (800e21c <HAL_RCC_OscConfig+0x274>)
 800dff0:	689b      	ldr	r3, [r3, #8]
 800dff2:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800dff6:	2b0c      	cmp	r3, #12
 800dff8:	d112      	bne.n	800e020 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800dffa:	4b88      	ldr	r3, [pc, #544]	@ (800e21c <HAL_RCC_OscConfig+0x274>)
 800dffc:	685b      	ldr	r3, [r3, #4]
 800dffe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800e002:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800e006:	d10b      	bne.n	800e020 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800e008:	4b84      	ldr	r3, [pc, #528]	@ (800e21c <HAL_RCC_OscConfig+0x274>)
 800e00a:	681b      	ldr	r3, [r3, #0]
 800e00c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800e010:	2b00      	cmp	r3, #0
 800e012:	d05b      	beq.n	800e0cc <HAL_RCC_OscConfig+0x124>
 800e014:	687b      	ldr	r3, [r7, #4]
 800e016:	685b      	ldr	r3, [r3, #4]
 800e018:	2b00      	cmp	r3, #0
 800e01a:	d157      	bne.n	800e0cc <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 800e01c:	2301      	movs	r3, #1
 800e01e:	e25a      	b.n	800e4d6 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800e020:	687b      	ldr	r3, [r7, #4]
 800e022:	685b      	ldr	r3, [r3, #4]
 800e024:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e028:	d106      	bne.n	800e038 <HAL_RCC_OscConfig+0x90>
 800e02a:	4b7c      	ldr	r3, [pc, #496]	@ (800e21c <HAL_RCC_OscConfig+0x274>)
 800e02c:	681b      	ldr	r3, [r3, #0]
 800e02e:	4a7b      	ldr	r2, [pc, #492]	@ (800e21c <HAL_RCC_OscConfig+0x274>)
 800e030:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800e034:	6013      	str	r3, [r2, #0]
 800e036:	e01d      	b.n	800e074 <HAL_RCC_OscConfig+0xcc>
 800e038:	687b      	ldr	r3, [r7, #4]
 800e03a:	685b      	ldr	r3, [r3, #4]
 800e03c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800e040:	d10c      	bne.n	800e05c <HAL_RCC_OscConfig+0xb4>
 800e042:	4b76      	ldr	r3, [pc, #472]	@ (800e21c <HAL_RCC_OscConfig+0x274>)
 800e044:	681b      	ldr	r3, [r3, #0]
 800e046:	4a75      	ldr	r2, [pc, #468]	@ (800e21c <HAL_RCC_OscConfig+0x274>)
 800e048:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800e04c:	6013      	str	r3, [r2, #0]
 800e04e:	4b73      	ldr	r3, [pc, #460]	@ (800e21c <HAL_RCC_OscConfig+0x274>)
 800e050:	681b      	ldr	r3, [r3, #0]
 800e052:	4a72      	ldr	r2, [pc, #456]	@ (800e21c <HAL_RCC_OscConfig+0x274>)
 800e054:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800e058:	6013      	str	r3, [r2, #0]
 800e05a:	e00b      	b.n	800e074 <HAL_RCC_OscConfig+0xcc>
 800e05c:	4b6f      	ldr	r3, [pc, #444]	@ (800e21c <HAL_RCC_OscConfig+0x274>)
 800e05e:	681b      	ldr	r3, [r3, #0]
 800e060:	4a6e      	ldr	r2, [pc, #440]	@ (800e21c <HAL_RCC_OscConfig+0x274>)
 800e062:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800e066:	6013      	str	r3, [r2, #0]
 800e068:	4b6c      	ldr	r3, [pc, #432]	@ (800e21c <HAL_RCC_OscConfig+0x274>)
 800e06a:	681b      	ldr	r3, [r3, #0]
 800e06c:	4a6b      	ldr	r2, [pc, #428]	@ (800e21c <HAL_RCC_OscConfig+0x274>)
 800e06e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800e072:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800e074:	687b      	ldr	r3, [r7, #4]
 800e076:	685b      	ldr	r3, [r3, #4]
 800e078:	2b00      	cmp	r3, #0
 800e07a:	d013      	beq.n	800e0a4 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e07c:	f7fd fec4 	bl	800be08 <HAL_GetTick>
 800e080:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800e082:	e008      	b.n	800e096 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800e084:	f7fd fec0 	bl	800be08 <HAL_GetTick>
 800e088:	4602      	mov	r2, r0
 800e08a:	693b      	ldr	r3, [r7, #16]
 800e08c:	1ad3      	subs	r3, r2, r3
 800e08e:	2b64      	cmp	r3, #100	@ 0x64
 800e090:	d901      	bls.n	800e096 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800e092:	2303      	movs	r3, #3
 800e094:	e21f      	b.n	800e4d6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800e096:	4b61      	ldr	r3, [pc, #388]	@ (800e21c <HAL_RCC_OscConfig+0x274>)
 800e098:	681b      	ldr	r3, [r3, #0]
 800e09a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800e09e:	2b00      	cmp	r3, #0
 800e0a0:	d0f0      	beq.n	800e084 <HAL_RCC_OscConfig+0xdc>
 800e0a2:	e014      	b.n	800e0ce <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e0a4:	f7fd feb0 	bl	800be08 <HAL_GetTick>
 800e0a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800e0aa:	e008      	b.n	800e0be <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800e0ac:	f7fd feac 	bl	800be08 <HAL_GetTick>
 800e0b0:	4602      	mov	r2, r0
 800e0b2:	693b      	ldr	r3, [r7, #16]
 800e0b4:	1ad3      	subs	r3, r2, r3
 800e0b6:	2b64      	cmp	r3, #100	@ 0x64
 800e0b8:	d901      	bls.n	800e0be <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800e0ba:	2303      	movs	r3, #3
 800e0bc:	e20b      	b.n	800e4d6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800e0be:	4b57      	ldr	r3, [pc, #348]	@ (800e21c <HAL_RCC_OscConfig+0x274>)
 800e0c0:	681b      	ldr	r3, [r3, #0]
 800e0c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800e0c6:	2b00      	cmp	r3, #0
 800e0c8:	d1f0      	bne.n	800e0ac <HAL_RCC_OscConfig+0x104>
 800e0ca:	e000      	b.n	800e0ce <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800e0cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800e0ce:	687b      	ldr	r3, [r7, #4]
 800e0d0:	681b      	ldr	r3, [r3, #0]
 800e0d2:	f003 0302 	and.w	r3, r3, #2
 800e0d6:	2b00      	cmp	r3, #0
 800e0d8:	d06f      	beq.n	800e1ba <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800e0da:	4b50      	ldr	r3, [pc, #320]	@ (800e21c <HAL_RCC_OscConfig+0x274>)
 800e0dc:	689b      	ldr	r3, [r3, #8]
 800e0de:	f003 030c 	and.w	r3, r3, #12
 800e0e2:	2b00      	cmp	r3, #0
 800e0e4:	d017      	beq.n	800e116 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800e0e6:	4b4d      	ldr	r3, [pc, #308]	@ (800e21c <HAL_RCC_OscConfig+0x274>)
 800e0e8:	689b      	ldr	r3, [r3, #8]
 800e0ea:	f003 030c 	and.w	r3, r3, #12
        || \
 800e0ee:	2b08      	cmp	r3, #8
 800e0f0:	d105      	bne.n	800e0fe <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800e0f2:	4b4a      	ldr	r3, [pc, #296]	@ (800e21c <HAL_RCC_OscConfig+0x274>)
 800e0f4:	685b      	ldr	r3, [r3, #4]
 800e0f6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800e0fa:	2b00      	cmp	r3, #0
 800e0fc:	d00b      	beq.n	800e116 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800e0fe:	4b47      	ldr	r3, [pc, #284]	@ (800e21c <HAL_RCC_OscConfig+0x274>)
 800e100:	689b      	ldr	r3, [r3, #8]
 800e102:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800e106:	2b0c      	cmp	r3, #12
 800e108:	d11c      	bne.n	800e144 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800e10a:	4b44      	ldr	r3, [pc, #272]	@ (800e21c <HAL_RCC_OscConfig+0x274>)
 800e10c:	685b      	ldr	r3, [r3, #4]
 800e10e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800e112:	2b00      	cmp	r3, #0
 800e114:	d116      	bne.n	800e144 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800e116:	4b41      	ldr	r3, [pc, #260]	@ (800e21c <HAL_RCC_OscConfig+0x274>)
 800e118:	681b      	ldr	r3, [r3, #0]
 800e11a:	f003 0302 	and.w	r3, r3, #2
 800e11e:	2b00      	cmp	r3, #0
 800e120:	d005      	beq.n	800e12e <HAL_RCC_OscConfig+0x186>
 800e122:	687b      	ldr	r3, [r7, #4]
 800e124:	68db      	ldr	r3, [r3, #12]
 800e126:	2b01      	cmp	r3, #1
 800e128:	d001      	beq.n	800e12e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800e12a:	2301      	movs	r3, #1
 800e12c:	e1d3      	b.n	800e4d6 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800e12e:	4b3b      	ldr	r3, [pc, #236]	@ (800e21c <HAL_RCC_OscConfig+0x274>)
 800e130:	681b      	ldr	r3, [r3, #0]
 800e132:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800e136:	687b      	ldr	r3, [r7, #4]
 800e138:	691b      	ldr	r3, [r3, #16]
 800e13a:	00db      	lsls	r3, r3, #3
 800e13c:	4937      	ldr	r1, [pc, #220]	@ (800e21c <HAL_RCC_OscConfig+0x274>)
 800e13e:	4313      	orrs	r3, r2
 800e140:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800e142:	e03a      	b.n	800e1ba <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800e144:	687b      	ldr	r3, [r7, #4]
 800e146:	68db      	ldr	r3, [r3, #12]
 800e148:	2b00      	cmp	r3, #0
 800e14a:	d020      	beq.n	800e18e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800e14c:	4b34      	ldr	r3, [pc, #208]	@ (800e220 <HAL_RCC_OscConfig+0x278>)
 800e14e:	2201      	movs	r2, #1
 800e150:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e152:	f7fd fe59 	bl	800be08 <HAL_GetTick>
 800e156:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800e158:	e008      	b.n	800e16c <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800e15a:	f7fd fe55 	bl	800be08 <HAL_GetTick>
 800e15e:	4602      	mov	r2, r0
 800e160:	693b      	ldr	r3, [r7, #16]
 800e162:	1ad3      	subs	r3, r2, r3
 800e164:	2b02      	cmp	r3, #2
 800e166:	d901      	bls.n	800e16c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800e168:	2303      	movs	r3, #3
 800e16a:	e1b4      	b.n	800e4d6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800e16c:	4b2b      	ldr	r3, [pc, #172]	@ (800e21c <HAL_RCC_OscConfig+0x274>)
 800e16e:	681b      	ldr	r3, [r3, #0]
 800e170:	f003 0302 	and.w	r3, r3, #2
 800e174:	2b00      	cmp	r3, #0
 800e176:	d0f0      	beq.n	800e15a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800e178:	4b28      	ldr	r3, [pc, #160]	@ (800e21c <HAL_RCC_OscConfig+0x274>)
 800e17a:	681b      	ldr	r3, [r3, #0]
 800e17c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800e180:	687b      	ldr	r3, [r7, #4]
 800e182:	691b      	ldr	r3, [r3, #16]
 800e184:	00db      	lsls	r3, r3, #3
 800e186:	4925      	ldr	r1, [pc, #148]	@ (800e21c <HAL_RCC_OscConfig+0x274>)
 800e188:	4313      	orrs	r3, r2
 800e18a:	600b      	str	r3, [r1, #0]
 800e18c:	e015      	b.n	800e1ba <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800e18e:	4b24      	ldr	r3, [pc, #144]	@ (800e220 <HAL_RCC_OscConfig+0x278>)
 800e190:	2200      	movs	r2, #0
 800e192:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e194:	f7fd fe38 	bl	800be08 <HAL_GetTick>
 800e198:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800e19a:	e008      	b.n	800e1ae <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800e19c:	f7fd fe34 	bl	800be08 <HAL_GetTick>
 800e1a0:	4602      	mov	r2, r0
 800e1a2:	693b      	ldr	r3, [r7, #16]
 800e1a4:	1ad3      	subs	r3, r2, r3
 800e1a6:	2b02      	cmp	r3, #2
 800e1a8:	d901      	bls.n	800e1ae <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800e1aa:	2303      	movs	r3, #3
 800e1ac:	e193      	b.n	800e4d6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800e1ae:	4b1b      	ldr	r3, [pc, #108]	@ (800e21c <HAL_RCC_OscConfig+0x274>)
 800e1b0:	681b      	ldr	r3, [r3, #0]
 800e1b2:	f003 0302 	and.w	r3, r3, #2
 800e1b6:	2b00      	cmp	r3, #0
 800e1b8:	d1f0      	bne.n	800e19c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800e1ba:	687b      	ldr	r3, [r7, #4]
 800e1bc:	681b      	ldr	r3, [r3, #0]
 800e1be:	f003 0308 	and.w	r3, r3, #8
 800e1c2:	2b00      	cmp	r3, #0
 800e1c4:	d036      	beq.n	800e234 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800e1c6:	687b      	ldr	r3, [r7, #4]
 800e1c8:	695b      	ldr	r3, [r3, #20]
 800e1ca:	2b00      	cmp	r3, #0
 800e1cc:	d016      	beq.n	800e1fc <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800e1ce:	4b15      	ldr	r3, [pc, #84]	@ (800e224 <HAL_RCC_OscConfig+0x27c>)
 800e1d0:	2201      	movs	r2, #1
 800e1d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800e1d4:	f7fd fe18 	bl	800be08 <HAL_GetTick>
 800e1d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800e1da:	e008      	b.n	800e1ee <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800e1dc:	f7fd fe14 	bl	800be08 <HAL_GetTick>
 800e1e0:	4602      	mov	r2, r0
 800e1e2:	693b      	ldr	r3, [r7, #16]
 800e1e4:	1ad3      	subs	r3, r2, r3
 800e1e6:	2b02      	cmp	r3, #2
 800e1e8:	d901      	bls.n	800e1ee <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800e1ea:	2303      	movs	r3, #3
 800e1ec:	e173      	b.n	800e4d6 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800e1ee:	4b0b      	ldr	r3, [pc, #44]	@ (800e21c <HAL_RCC_OscConfig+0x274>)
 800e1f0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e1f2:	f003 0302 	and.w	r3, r3, #2
 800e1f6:	2b00      	cmp	r3, #0
 800e1f8:	d0f0      	beq.n	800e1dc <HAL_RCC_OscConfig+0x234>
 800e1fa:	e01b      	b.n	800e234 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800e1fc:	4b09      	ldr	r3, [pc, #36]	@ (800e224 <HAL_RCC_OscConfig+0x27c>)
 800e1fe:	2200      	movs	r2, #0
 800e200:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800e202:	f7fd fe01 	bl	800be08 <HAL_GetTick>
 800e206:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800e208:	e00e      	b.n	800e228 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800e20a:	f7fd fdfd 	bl	800be08 <HAL_GetTick>
 800e20e:	4602      	mov	r2, r0
 800e210:	693b      	ldr	r3, [r7, #16]
 800e212:	1ad3      	subs	r3, r2, r3
 800e214:	2b02      	cmp	r3, #2
 800e216:	d907      	bls.n	800e228 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 800e218:	2303      	movs	r3, #3
 800e21a:	e15c      	b.n	800e4d6 <HAL_RCC_OscConfig+0x52e>
 800e21c:	40023800 	.word	0x40023800
 800e220:	42470000 	.word	0x42470000
 800e224:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800e228:	4b8a      	ldr	r3, [pc, #552]	@ (800e454 <HAL_RCC_OscConfig+0x4ac>)
 800e22a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e22c:	f003 0302 	and.w	r3, r3, #2
 800e230:	2b00      	cmp	r3, #0
 800e232:	d1ea      	bne.n	800e20a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800e234:	687b      	ldr	r3, [r7, #4]
 800e236:	681b      	ldr	r3, [r3, #0]
 800e238:	f003 0304 	and.w	r3, r3, #4
 800e23c:	2b00      	cmp	r3, #0
 800e23e:	f000 8097 	beq.w	800e370 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800e242:	2300      	movs	r3, #0
 800e244:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800e246:	4b83      	ldr	r3, [pc, #524]	@ (800e454 <HAL_RCC_OscConfig+0x4ac>)
 800e248:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e24a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800e24e:	2b00      	cmp	r3, #0
 800e250:	d10f      	bne.n	800e272 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800e252:	2300      	movs	r3, #0
 800e254:	60bb      	str	r3, [r7, #8]
 800e256:	4b7f      	ldr	r3, [pc, #508]	@ (800e454 <HAL_RCC_OscConfig+0x4ac>)
 800e258:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e25a:	4a7e      	ldr	r2, [pc, #504]	@ (800e454 <HAL_RCC_OscConfig+0x4ac>)
 800e25c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800e260:	6413      	str	r3, [r2, #64]	@ 0x40
 800e262:	4b7c      	ldr	r3, [pc, #496]	@ (800e454 <HAL_RCC_OscConfig+0x4ac>)
 800e264:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e266:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800e26a:	60bb      	str	r3, [r7, #8]
 800e26c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800e26e:	2301      	movs	r3, #1
 800e270:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800e272:	4b79      	ldr	r3, [pc, #484]	@ (800e458 <HAL_RCC_OscConfig+0x4b0>)
 800e274:	681b      	ldr	r3, [r3, #0]
 800e276:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e27a:	2b00      	cmp	r3, #0
 800e27c:	d118      	bne.n	800e2b0 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800e27e:	4b76      	ldr	r3, [pc, #472]	@ (800e458 <HAL_RCC_OscConfig+0x4b0>)
 800e280:	681b      	ldr	r3, [r3, #0]
 800e282:	4a75      	ldr	r2, [pc, #468]	@ (800e458 <HAL_RCC_OscConfig+0x4b0>)
 800e284:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800e288:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800e28a:	f7fd fdbd 	bl	800be08 <HAL_GetTick>
 800e28e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800e290:	e008      	b.n	800e2a4 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800e292:	f7fd fdb9 	bl	800be08 <HAL_GetTick>
 800e296:	4602      	mov	r2, r0
 800e298:	693b      	ldr	r3, [r7, #16]
 800e29a:	1ad3      	subs	r3, r2, r3
 800e29c:	2b02      	cmp	r3, #2
 800e29e:	d901      	bls.n	800e2a4 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 800e2a0:	2303      	movs	r3, #3
 800e2a2:	e118      	b.n	800e4d6 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800e2a4:	4b6c      	ldr	r3, [pc, #432]	@ (800e458 <HAL_RCC_OscConfig+0x4b0>)
 800e2a6:	681b      	ldr	r3, [r3, #0]
 800e2a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e2ac:	2b00      	cmp	r3, #0
 800e2ae:	d0f0      	beq.n	800e292 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800e2b0:	687b      	ldr	r3, [r7, #4]
 800e2b2:	689b      	ldr	r3, [r3, #8]
 800e2b4:	2b01      	cmp	r3, #1
 800e2b6:	d106      	bne.n	800e2c6 <HAL_RCC_OscConfig+0x31e>
 800e2b8:	4b66      	ldr	r3, [pc, #408]	@ (800e454 <HAL_RCC_OscConfig+0x4ac>)
 800e2ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e2bc:	4a65      	ldr	r2, [pc, #404]	@ (800e454 <HAL_RCC_OscConfig+0x4ac>)
 800e2be:	f043 0301 	orr.w	r3, r3, #1
 800e2c2:	6713      	str	r3, [r2, #112]	@ 0x70
 800e2c4:	e01c      	b.n	800e300 <HAL_RCC_OscConfig+0x358>
 800e2c6:	687b      	ldr	r3, [r7, #4]
 800e2c8:	689b      	ldr	r3, [r3, #8]
 800e2ca:	2b05      	cmp	r3, #5
 800e2cc:	d10c      	bne.n	800e2e8 <HAL_RCC_OscConfig+0x340>
 800e2ce:	4b61      	ldr	r3, [pc, #388]	@ (800e454 <HAL_RCC_OscConfig+0x4ac>)
 800e2d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e2d2:	4a60      	ldr	r2, [pc, #384]	@ (800e454 <HAL_RCC_OscConfig+0x4ac>)
 800e2d4:	f043 0304 	orr.w	r3, r3, #4
 800e2d8:	6713      	str	r3, [r2, #112]	@ 0x70
 800e2da:	4b5e      	ldr	r3, [pc, #376]	@ (800e454 <HAL_RCC_OscConfig+0x4ac>)
 800e2dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e2de:	4a5d      	ldr	r2, [pc, #372]	@ (800e454 <HAL_RCC_OscConfig+0x4ac>)
 800e2e0:	f043 0301 	orr.w	r3, r3, #1
 800e2e4:	6713      	str	r3, [r2, #112]	@ 0x70
 800e2e6:	e00b      	b.n	800e300 <HAL_RCC_OscConfig+0x358>
 800e2e8:	4b5a      	ldr	r3, [pc, #360]	@ (800e454 <HAL_RCC_OscConfig+0x4ac>)
 800e2ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e2ec:	4a59      	ldr	r2, [pc, #356]	@ (800e454 <HAL_RCC_OscConfig+0x4ac>)
 800e2ee:	f023 0301 	bic.w	r3, r3, #1
 800e2f2:	6713      	str	r3, [r2, #112]	@ 0x70
 800e2f4:	4b57      	ldr	r3, [pc, #348]	@ (800e454 <HAL_RCC_OscConfig+0x4ac>)
 800e2f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e2f8:	4a56      	ldr	r2, [pc, #344]	@ (800e454 <HAL_RCC_OscConfig+0x4ac>)
 800e2fa:	f023 0304 	bic.w	r3, r3, #4
 800e2fe:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800e300:	687b      	ldr	r3, [r7, #4]
 800e302:	689b      	ldr	r3, [r3, #8]
 800e304:	2b00      	cmp	r3, #0
 800e306:	d015      	beq.n	800e334 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800e308:	f7fd fd7e 	bl	800be08 <HAL_GetTick>
 800e30c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800e30e:	e00a      	b.n	800e326 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800e310:	f7fd fd7a 	bl	800be08 <HAL_GetTick>
 800e314:	4602      	mov	r2, r0
 800e316:	693b      	ldr	r3, [r7, #16]
 800e318:	1ad3      	subs	r3, r2, r3
 800e31a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800e31e:	4293      	cmp	r3, r2
 800e320:	d901      	bls.n	800e326 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800e322:	2303      	movs	r3, #3
 800e324:	e0d7      	b.n	800e4d6 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800e326:	4b4b      	ldr	r3, [pc, #300]	@ (800e454 <HAL_RCC_OscConfig+0x4ac>)
 800e328:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e32a:	f003 0302 	and.w	r3, r3, #2
 800e32e:	2b00      	cmp	r3, #0
 800e330:	d0ee      	beq.n	800e310 <HAL_RCC_OscConfig+0x368>
 800e332:	e014      	b.n	800e35e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800e334:	f7fd fd68 	bl	800be08 <HAL_GetTick>
 800e338:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800e33a:	e00a      	b.n	800e352 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800e33c:	f7fd fd64 	bl	800be08 <HAL_GetTick>
 800e340:	4602      	mov	r2, r0
 800e342:	693b      	ldr	r3, [r7, #16]
 800e344:	1ad3      	subs	r3, r2, r3
 800e346:	f241 3288 	movw	r2, #5000	@ 0x1388
 800e34a:	4293      	cmp	r3, r2
 800e34c:	d901      	bls.n	800e352 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800e34e:	2303      	movs	r3, #3
 800e350:	e0c1      	b.n	800e4d6 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800e352:	4b40      	ldr	r3, [pc, #256]	@ (800e454 <HAL_RCC_OscConfig+0x4ac>)
 800e354:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e356:	f003 0302 	and.w	r3, r3, #2
 800e35a:	2b00      	cmp	r3, #0
 800e35c:	d1ee      	bne.n	800e33c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800e35e:	7dfb      	ldrb	r3, [r7, #23]
 800e360:	2b01      	cmp	r3, #1
 800e362:	d105      	bne.n	800e370 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800e364:	4b3b      	ldr	r3, [pc, #236]	@ (800e454 <HAL_RCC_OscConfig+0x4ac>)
 800e366:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e368:	4a3a      	ldr	r2, [pc, #232]	@ (800e454 <HAL_RCC_OscConfig+0x4ac>)
 800e36a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800e36e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800e370:	687b      	ldr	r3, [r7, #4]
 800e372:	699b      	ldr	r3, [r3, #24]
 800e374:	2b00      	cmp	r3, #0
 800e376:	f000 80ad 	beq.w	800e4d4 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800e37a:	4b36      	ldr	r3, [pc, #216]	@ (800e454 <HAL_RCC_OscConfig+0x4ac>)
 800e37c:	689b      	ldr	r3, [r3, #8]
 800e37e:	f003 030c 	and.w	r3, r3, #12
 800e382:	2b08      	cmp	r3, #8
 800e384:	d060      	beq.n	800e448 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800e386:	687b      	ldr	r3, [r7, #4]
 800e388:	699b      	ldr	r3, [r3, #24]
 800e38a:	2b02      	cmp	r3, #2
 800e38c:	d145      	bne.n	800e41a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800e38e:	4b33      	ldr	r3, [pc, #204]	@ (800e45c <HAL_RCC_OscConfig+0x4b4>)
 800e390:	2200      	movs	r2, #0
 800e392:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e394:	f7fd fd38 	bl	800be08 <HAL_GetTick>
 800e398:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800e39a:	e008      	b.n	800e3ae <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800e39c:	f7fd fd34 	bl	800be08 <HAL_GetTick>
 800e3a0:	4602      	mov	r2, r0
 800e3a2:	693b      	ldr	r3, [r7, #16]
 800e3a4:	1ad3      	subs	r3, r2, r3
 800e3a6:	2b02      	cmp	r3, #2
 800e3a8:	d901      	bls.n	800e3ae <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800e3aa:	2303      	movs	r3, #3
 800e3ac:	e093      	b.n	800e4d6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800e3ae:	4b29      	ldr	r3, [pc, #164]	@ (800e454 <HAL_RCC_OscConfig+0x4ac>)
 800e3b0:	681b      	ldr	r3, [r3, #0]
 800e3b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800e3b6:	2b00      	cmp	r3, #0
 800e3b8:	d1f0      	bne.n	800e39c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800e3ba:	687b      	ldr	r3, [r7, #4]
 800e3bc:	69da      	ldr	r2, [r3, #28]
 800e3be:	687b      	ldr	r3, [r7, #4]
 800e3c0:	6a1b      	ldr	r3, [r3, #32]
 800e3c2:	431a      	orrs	r2, r3
 800e3c4:	687b      	ldr	r3, [r7, #4]
 800e3c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e3c8:	019b      	lsls	r3, r3, #6
 800e3ca:	431a      	orrs	r2, r3
 800e3cc:	687b      	ldr	r3, [r7, #4]
 800e3ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e3d0:	085b      	lsrs	r3, r3, #1
 800e3d2:	3b01      	subs	r3, #1
 800e3d4:	041b      	lsls	r3, r3, #16
 800e3d6:	431a      	orrs	r2, r3
 800e3d8:	687b      	ldr	r3, [r7, #4]
 800e3da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e3dc:	061b      	lsls	r3, r3, #24
 800e3de:	431a      	orrs	r2, r3
 800e3e0:	687b      	ldr	r3, [r7, #4]
 800e3e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e3e4:	071b      	lsls	r3, r3, #28
 800e3e6:	491b      	ldr	r1, [pc, #108]	@ (800e454 <HAL_RCC_OscConfig+0x4ac>)
 800e3e8:	4313      	orrs	r3, r2
 800e3ea:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800e3ec:	4b1b      	ldr	r3, [pc, #108]	@ (800e45c <HAL_RCC_OscConfig+0x4b4>)
 800e3ee:	2201      	movs	r2, #1
 800e3f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e3f2:	f7fd fd09 	bl	800be08 <HAL_GetTick>
 800e3f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800e3f8:	e008      	b.n	800e40c <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800e3fa:	f7fd fd05 	bl	800be08 <HAL_GetTick>
 800e3fe:	4602      	mov	r2, r0
 800e400:	693b      	ldr	r3, [r7, #16]
 800e402:	1ad3      	subs	r3, r2, r3
 800e404:	2b02      	cmp	r3, #2
 800e406:	d901      	bls.n	800e40c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 800e408:	2303      	movs	r3, #3
 800e40a:	e064      	b.n	800e4d6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800e40c:	4b11      	ldr	r3, [pc, #68]	@ (800e454 <HAL_RCC_OscConfig+0x4ac>)
 800e40e:	681b      	ldr	r3, [r3, #0]
 800e410:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800e414:	2b00      	cmp	r3, #0
 800e416:	d0f0      	beq.n	800e3fa <HAL_RCC_OscConfig+0x452>
 800e418:	e05c      	b.n	800e4d4 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800e41a:	4b10      	ldr	r3, [pc, #64]	@ (800e45c <HAL_RCC_OscConfig+0x4b4>)
 800e41c:	2200      	movs	r2, #0
 800e41e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e420:	f7fd fcf2 	bl	800be08 <HAL_GetTick>
 800e424:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800e426:	e008      	b.n	800e43a <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800e428:	f7fd fcee 	bl	800be08 <HAL_GetTick>
 800e42c:	4602      	mov	r2, r0
 800e42e:	693b      	ldr	r3, [r7, #16]
 800e430:	1ad3      	subs	r3, r2, r3
 800e432:	2b02      	cmp	r3, #2
 800e434:	d901      	bls.n	800e43a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800e436:	2303      	movs	r3, #3
 800e438:	e04d      	b.n	800e4d6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800e43a:	4b06      	ldr	r3, [pc, #24]	@ (800e454 <HAL_RCC_OscConfig+0x4ac>)
 800e43c:	681b      	ldr	r3, [r3, #0]
 800e43e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800e442:	2b00      	cmp	r3, #0
 800e444:	d1f0      	bne.n	800e428 <HAL_RCC_OscConfig+0x480>
 800e446:	e045      	b.n	800e4d4 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800e448:	687b      	ldr	r3, [r7, #4]
 800e44a:	699b      	ldr	r3, [r3, #24]
 800e44c:	2b01      	cmp	r3, #1
 800e44e:	d107      	bne.n	800e460 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 800e450:	2301      	movs	r3, #1
 800e452:	e040      	b.n	800e4d6 <HAL_RCC_OscConfig+0x52e>
 800e454:	40023800 	.word	0x40023800
 800e458:	40007000 	.word	0x40007000
 800e45c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800e460:	4b1f      	ldr	r3, [pc, #124]	@ (800e4e0 <HAL_RCC_OscConfig+0x538>)
 800e462:	685b      	ldr	r3, [r3, #4]
 800e464:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800e466:	687b      	ldr	r3, [r7, #4]
 800e468:	699b      	ldr	r3, [r3, #24]
 800e46a:	2b01      	cmp	r3, #1
 800e46c:	d030      	beq.n	800e4d0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800e46e:	68fb      	ldr	r3, [r7, #12]
 800e470:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800e474:	687b      	ldr	r3, [r7, #4]
 800e476:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800e478:	429a      	cmp	r2, r3
 800e47a:	d129      	bne.n	800e4d0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800e47c:	68fb      	ldr	r3, [r7, #12]
 800e47e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800e482:	687b      	ldr	r3, [r7, #4]
 800e484:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800e486:	429a      	cmp	r2, r3
 800e488:	d122      	bne.n	800e4d0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800e48a:	68fa      	ldr	r2, [r7, #12]
 800e48c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800e490:	4013      	ands	r3, r2
 800e492:	687a      	ldr	r2, [r7, #4]
 800e494:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800e496:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800e498:	4293      	cmp	r3, r2
 800e49a:	d119      	bne.n	800e4d0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800e49c:	68fb      	ldr	r3, [r7, #12]
 800e49e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800e4a2:	687b      	ldr	r3, [r7, #4]
 800e4a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e4a6:	085b      	lsrs	r3, r3, #1
 800e4a8:	3b01      	subs	r3, #1
 800e4aa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800e4ac:	429a      	cmp	r2, r3
 800e4ae:	d10f      	bne.n	800e4d0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800e4b0:	68fb      	ldr	r3, [r7, #12]
 800e4b2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800e4b6:	687b      	ldr	r3, [r7, #4]
 800e4b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e4ba:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800e4bc:	429a      	cmp	r2, r3
 800e4be:	d107      	bne.n	800e4d0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800e4c0:	68fb      	ldr	r3, [r7, #12]
 800e4c2:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800e4c6:	687b      	ldr	r3, [r7, #4]
 800e4c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e4ca:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800e4cc:	429a      	cmp	r2, r3
 800e4ce:	d001      	beq.n	800e4d4 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800e4d0:	2301      	movs	r3, #1
 800e4d2:	e000      	b.n	800e4d6 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 800e4d4:	2300      	movs	r3, #0
}
 800e4d6:	4618      	mov	r0, r3
 800e4d8:	3718      	adds	r7, #24
 800e4da:	46bd      	mov	sp, r7
 800e4dc:	bd80      	pop	{r7, pc}
 800e4de:	bf00      	nop
 800e4e0:	40023800 	.word	0x40023800

0800e4e4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800e4e4:	b580      	push	{r7, lr}
 800e4e6:	b082      	sub	sp, #8
 800e4e8:	af00      	add	r7, sp, #0
 800e4ea:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800e4ec:	687b      	ldr	r3, [r7, #4]
 800e4ee:	2b00      	cmp	r3, #0
 800e4f0:	d101      	bne.n	800e4f6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800e4f2:	2301      	movs	r3, #1
 800e4f4:	e07b      	b.n	800e5ee <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800e4f6:	687b      	ldr	r3, [r7, #4]
 800e4f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e4fa:	2b00      	cmp	r3, #0
 800e4fc:	d108      	bne.n	800e510 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800e4fe:	687b      	ldr	r3, [r7, #4]
 800e500:	685b      	ldr	r3, [r3, #4]
 800e502:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800e506:	d009      	beq.n	800e51c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800e508:	687b      	ldr	r3, [r7, #4]
 800e50a:	2200      	movs	r2, #0
 800e50c:	61da      	str	r2, [r3, #28]
 800e50e:	e005      	b.n	800e51c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800e510:	687b      	ldr	r3, [r7, #4]
 800e512:	2200      	movs	r2, #0
 800e514:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800e516:	687b      	ldr	r3, [r7, #4]
 800e518:	2200      	movs	r2, #0
 800e51a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800e51c:	687b      	ldr	r3, [r7, #4]
 800e51e:	2200      	movs	r2, #0
 800e520:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800e522:	687b      	ldr	r3, [r7, #4]
 800e524:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800e528:	b2db      	uxtb	r3, r3
 800e52a:	2b00      	cmp	r3, #0
 800e52c:	d106      	bne.n	800e53c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800e52e:	687b      	ldr	r3, [r7, #4]
 800e530:	2200      	movs	r2, #0
 800e532:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800e536:	6878      	ldr	r0, [r7, #4]
 800e538:	f7f3 f81c 	bl	8001574 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800e53c:	687b      	ldr	r3, [r7, #4]
 800e53e:	2202      	movs	r2, #2
 800e540:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800e544:	687b      	ldr	r3, [r7, #4]
 800e546:	681b      	ldr	r3, [r3, #0]
 800e548:	681a      	ldr	r2, [r3, #0]
 800e54a:	687b      	ldr	r3, [r7, #4]
 800e54c:	681b      	ldr	r3, [r3, #0]
 800e54e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800e552:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800e554:	687b      	ldr	r3, [r7, #4]
 800e556:	685b      	ldr	r3, [r3, #4]
 800e558:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800e55c:	687b      	ldr	r3, [r7, #4]
 800e55e:	689b      	ldr	r3, [r3, #8]
 800e560:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800e564:	431a      	orrs	r2, r3
 800e566:	687b      	ldr	r3, [r7, #4]
 800e568:	68db      	ldr	r3, [r3, #12]
 800e56a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800e56e:	431a      	orrs	r2, r3
 800e570:	687b      	ldr	r3, [r7, #4]
 800e572:	691b      	ldr	r3, [r3, #16]
 800e574:	f003 0302 	and.w	r3, r3, #2
 800e578:	431a      	orrs	r2, r3
 800e57a:	687b      	ldr	r3, [r7, #4]
 800e57c:	695b      	ldr	r3, [r3, #20]
 800e57e:	f003 0301 	and.w	r3, r3, #1
 800e582:	431a      	orrs	r2, r3
 800e584:	687b      	ldr	r3, [r7, #4]
 800e586:	699b      	ldr	r3, [r3, #24]
 800e588:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800e58c:	431a      	orrs	r2, r3
 800e58e:	687b      	ldr	r3, [r7, #4]
 800e590:	69db      	ldr	r3, [r3, #28]
 800e592:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800e596:	431a      	orrs	r2, r3
 800e598:	687b      	ldr	r3, [r7, #4]
 800e59a:	6a1b      	ldr	r3, [r3, #32]
 800e59c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e5a0:	ea42 0103 	orr.w	r1, r2, r3
 800e5a4:	687b      	ldr	r3, [r7, #4]
 800e5a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e5a8:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800e5ac:	687b      	ldr	r3, [r7, #4]
 800e5ae:	681b      	ldr	r3, [r3, #0]
 800e5b0:	430a      	orrs	r2, r1
 800e5b2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800e5b4:	687b      	ldr	r3, [r7, #4]
 800e5b6:	699b      	ldr	r3, [r3, #24]
 800e5b8:	0c1b      	lsrs	r3, r3, #16
 800e5ba:	f003 0104 	and.w	r1, r3, #4
 800e5be:	687b      	ldr	r3, [r7, #4]
 800e5c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e5c2:	f003 0210 	and.w	r2, r3, #16
 800e5c6:	687b      	ldr	r3, [r7, #4]
 800e5c8:	681b      	ldr	r3, [r3, #0]
 800e5ca:	430a      	orrs	r2, r1
 800e5cc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800e5ce:	687b      	ldr	r3, [r7, #4]
 800e5d0:	681b      	ldr	r3, [r3, #0]
 800e5d2:	69da      	ldr	r2, [r3, #28]
 800e5d4:	687b      	ldr	r3, [r7, #4]
 800e5d6:	681b      	ldr	r3, [r3, #0]
 800e5d8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800e5dc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800e5de:	687b      	ldr	r3, [r7, #4]
 800e5e0:	2200      	movs	r2, #0
 800e5e2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800e5e4:	687b      	ldr	r3, [r7, #4]
 800e5e6:	2201      	movs	r2, #1
 800e5e8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800e5ec:	2300      	movs	r3, #0
}
 800e5ee:	4618      	mov	r0, r3
 800e5f0:	3708      	adds	r7, #8
 800e5f2:	46bd      	mov	sp, r7
 800e5f4:	bd80      	pop	{r7, pc}

0800e5f6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e5f6:	b580      	push	{r7, lr}
 800e5f8:	b088      	sub	sp, #32
 800e5fa:	af00      	add	r7, sp, #0
 800e5fc:	60f8      	str	r0, [r7, #12]
 800e5fe:	60b9      	str	r1, [r7, #8]
 800e600:	603b      	str	r3, [r7, #0]
 800e602:	4613      	mov	r3, r2
 800e604:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800e606:	f7fd fbff 	bl	800be08 <HAL_GetTick>
 800e60a:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 800e60c:	88fb      	ldrh	r3, [r7, #6]
 800e60e:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 800e610:	68fb      	ldr	r3, [r7, #12]
 800e612:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800e616:	b2db      	uxtb	r3, r3
 800e618:	2b01      	cmp	r3, #1
 800e61a:	d001      	beq.n	800e620 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 800e61c:	2302      	movs	r3, #2
 800e61e:	e12a      	b.n	800e876 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 800e620:	68bb      	ldr	r3, [r7, #8]
 800e622:	2b00      	cmp	r3, #0
 800e624:	d002      	beq.n	800e62c <HAL_SPI_Transmit+0x36>
 800e626:	88fb      	ldrh	r3, [r7, #6]
 800e628:	2b00      	cmp	r3, #0
 800e62a:	d101      	bne.n	800e630 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 800e62c:	2301      	movs	r3, #1
 800e62e:	e122      	b.n	800e876 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800e630:	68fb      	ldr	r3, [r7, #12]
 800e632:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800e636:	2b01      	cmp	r3, #1
 800e638:	d101      	bne.n	800e63e <HAL_SPI_Transmit+0x48>
 800e63a:	2302      	movs	r3, #2
 800e63c:	e11b      	b.n	800e876 <HAL_SPI_Transmit+0x280>
 800e63e:	68fb      	ldr	r3, [r7, #12]
 800e640:	2201      	movs	r2, #1
 800e642:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800e646:	68fb      	ldr	r3, [r7, #12]
 800e648:	2203      	movs	r2, #3
 800e64a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800e64e:	68fb      	ldr	r3, [r7, #12]
 800e650:	2200      	movs	r2, #0
 800e652:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800e654:	68fb      	ldr	r3, [r7, #12]
 800e656:	68ba      	ldr	r2, [r7, #8]
 800e658:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800e65a:	68fb      	ldr	r3, [r7, #12]
 800e65c:	88fa      	ldrh	r2, [r7, #6]
 800e65e:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 800e660:	68fb      	ldr	r3, [r7, #12]
 800e662:	88fa      	ldrh	r2, [r7, #6]
 800e664:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800e666:	68fb      	ldr	r3, [r7, #12]
 800e668:	2200      	movs	r2, #0
 800e66a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 800e66c:	68fb      	ldr	r3, [r7, #12]
 800e66e:	2200      	movs	r2, #0
 800e670:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 800e672:	68fb      	ldr	r3, [r7, #12]
 800e674:	2200      	movs	r2, #0
 800e676:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 800e678:	68fb      	ldr	r3, [r7, #12]
 800e67a:	2200      	movs	r2, #0
 800e67c:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 800e67e:	68fb      	ldr	r3, [r7, #12]
 800e680:	2200      	movs	r2, #0
 800e682:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e684:	68fb      	ldr	r3, [r7, #12]
 800e686:	689b      	ldr	r3, [r3, #8]
 800e688:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800e68c:	d10f      	bne.n	800e6ae <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800e68e:	68fb      	ldr	r3, [r7, #12]
 800e690:	681b      	ldr	r3, [r3, #0]
 800e692:	681a      	ldr	r2, [r3, #0]
 800e694:	68fb      	ldr	r3, [r7, #12]
 800e696:	681b      	ldr	r3, [r3, #0]
 800e698:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800e69c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800e69e:	68fb      	ldr	r3, [r7, #12]
 800e6a0:	681b      	ldr	r3, [r3, #0]
 800e6a2:	681a      	ldr	r2, [r3, #0]
 800e6a4:	68fb      	ldr	r3, [r7, #12]
 800e6a6:	681b      	ldr	r3, [r3, #0]
 800e6a8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800e6ac:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800e6ae:	68fb      	ldr	r3, [r7, #12]
 800e6b0:	681b      	ldr	r3, [r3, #0]
 800e6b2:	681b      	ldr	r3, [r3, #0]
 800e6b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e6b8:	2b40      	cmp	r3, #64	@ 0x40
 800e6ba:	d007      	beq.n	800e6cc <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800e6bc:	68fb      	ldr	r3, [r7, #12]
 800e6be:	681b      	ldr	r3, [r3, #0]
 800e6c0:	681a      	ldr	r2, [r3, #0]
 800e6c2:	68fb      	ldr	r3, [r7, #12]
 800e6c4:	681b      	ldr	r3, [r3, #0]
 800e6c6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800e6ca:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800e6cc:	68fb      	ldr	r3, [r7, #12]
 800e6ce:	68db      	ldr	r3, [r3, #12]
 800e6d0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800e6d4:	d152      	bne.n	800e77c <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800e6d6:	68fb      	ldr	r3, [r7, #12]
 800e6d8:	685b      	ldr	r3, [r3, #4]
 800e6da:	2b00      	cmp	r3, #0
 800e6dc:	d002      	beq.n	800e6e4 <HAL_SPI_Transmit+0xee>
 800e6de:	8b7b      	ldrh	r3, [r7, #26]
 800e6e0:	2b01      	cmp	r3, #1
 800e6e2:	d145      	bne.n	800e770 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800e6e4:	68fb      	ldr	r3, [r7, #12]
 800e6e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e6e8:	881a      	ldrh	r2, [r3, #0]
 800e6ea:	68fb      	ldr	r3, [r7, #12]
 800e6ec:	681b      	ldr	r3, [r3, #0]
 800e6ee:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800e6f0:	68fb      	ldr	r3, [r7, #12]
 800e6f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e6f4:	1c9a      	adds	r2, r3, #2
 800e6f6:	68fb      	ldr	r3, [r7, #12]
 800e6f8:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800e6fa:	68fb      	ldr	r3, [r7, #12]
 800e6fc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800e6fe:	b29b      	uxth	r3, r3
 800e700:	3b01      	subs	r3, #1
 800e702:	b29a      	uxth	r2, r3
 800e704:	68fb      	ldr	r3, [r7, #12]
 800e706:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800e708:	e032      	b.n	800e770 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800e70a:	68fb      	ldr	r3, [r7, #12]
 800e70c:	681b      	ldr	r3, [r3, #0]
 800e70e:	689b      	ldr	r3, [r3, #8]
 800e710:	f003 0302 	and.w	r3, r3, #2
 800e714:	2b02      	cmp	r3, #2
 800e716:	d112      	bne.n	800e73e <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800e718:	68fb      	ldr	r3, [r7, #12]
 800e71a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e71c:	881a      	ldrh	r2, [r3, #0]
 800e71e:	68fb      	ldr	r3, [r7, #12]
 800e720:	681b      	ldr	r3, [r3, #0]
 800e722:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800e724:	68fb      	ldr	r3, [r7, #12]
 800e726:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e728:	1c9a      	adds	r2, r3, #2
 800e72a:	68fb      	ldr	r3, [r7, #12]
 800e72c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800e72e:	68fb      	ldr	r3, [r7, #12]
 800e730:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800e732:	b29b      	uxth	r3, r3
 800e734:	3b01      	subs	r3, #1
 800e736:	b29a      	uxth	r2, r3
 800e738:	68fb      	ldr	r3, [r7, #12]
 800e73a:	86da      	strh	r2, [r3, #54]	@ 0x36
 800e73c:	e018      	b.n	800e770 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e73e:	f7fd fb63 	bl	800be08 <HAL_GetTick>
 800e742:	4602      	mov	r2, r0
 800e744:	69fb      	ldr	r3, [r7, #28]
 800e746:	1ad3      	subs	r3, r2, r3
 800e748:	683a      	ldr	r2, [r7, #0]
 800e74a:	429a      	cmp	r2, r3
 800e74c:	d803      	bhi.n	800e756 <HAL_SPI_Transmit+0x160>
 800e74e:	683b      	ldr	r3, [r7, #0]
 800e750:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e754:	d102      	bne.n	800e75c <HAL_SPI_Transmit+0x166>
 800e756:	683b      	ldr	r3, [r7, #0]
 800e758:	2b00      	cmp	r3, #0
 800e75a:	d109      	bne.n	800e770 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800e75c:	68fb      	ldr	r3, [r7, #12]
 800e75e:	2201      	movs	r2, #1
 800e760:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800e764:	68fb      	ldr	r3, [r7, #12]
 800e766:	2200      	movs	r2, #0
 800e768:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800e76c:	2303      	movs	r3, #3
 800e76e:	e082      	b.n	800e876 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800e770:	68fb      	ldr	r3, [r7, #12]
 800e772:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800e774:	b29b      	uxth	r3, r3
 800e776:	2b00      	cmp	r3, #0
 800e778:	d1c7      	bne.n	800e70a <HAL_SPI_Transmit+0x114>
 800e77a:	e053      	b.n	800e824 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800e77c:	68fb      	ldr	r3, [r7, #12]
 800e77e:	685b      	ldr	r3, [r3, #4]
 800e780:	2b00      	cmp	r3, #0
 800e782:	d002      	beq.n	800e78a <HAL_SPI_Transmit+0x194>
 800e784:	8b7b      	ldrh	r3, [r7, #26]
 800e786:	2b01      	cmp	r3, #1
 800e788:	d147      	bne.n	800e81a <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800e78a:	68fb      	ldr	r3, [r7, #12]
 800e78c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800e78e:	68fb      	ldr	r3, [r7, #12]
 800e790:	681b      	ldr	r3, [r3, #0]
 800e792:	330c      	adds	r3, #12
 800e794:	7812      	ldrb	r2, [r2, #0]
 800e796:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800e798:	68fb      	ldr	r3, [r7, #12]
 800e79a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e79c:	1c5a      	adds	r2, r3, #1
 800e79e:	68fb      	ldr	r3, [r7, #12]
 800e7a0:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800e7a2:	68fb      	ldr	r3, [r7, #12]
 800e7a4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800e7a6:	b29b      	uxth	r3, r3
 800e7a8:	3b01      	subs	r3, #1
 800e7aa:	b29a      	uxth	r2, r3
 800e7ac:	68fb      	ldr	r3, [r7, #12]
 800e7ae:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 800e7b0:	e033      	b.n	800e81a <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800e7b2:	68fb      	ldr	r3, [r7, #12]
 800e7b4:	681b      	ldr	r3, [r3, #0]
 800e7b6:	689b      	ldr	r3, [r3, #8]
 800e7b8:	f003 0302 	and.w	r3, r3, #2
 800e7bc:	2b02      	cmp	r3, #2
 800e7be:	d113      	bne.n	800e7e8 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800e7c0:	68fb      	ldr	r3, [r7, #12]
 800e7c2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800e7c4:	68fb      	ldr	r3, [r7, #12]
 800e7c6:	681b      	ldr	r3, [r3, #0]
 800e7c8:	330c      	adds	r3, #12
 800e7ca:	7812      	ldrb	r2, [r2, #0]
 800e7cc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800e7ce:	68fb      	ldr	r3, [r7, #12]
 800e7d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e7d2:	1c5a      	adds	r2, r3, #1
 800e7d4:	68fb      	ldr	r3, [r7, #12]
 800e7d6:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800e7d8:	68fb      	ldr	r3, [r7, #12]
 800e7da:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800e7dc:	b29b      	uxth	r3, r3
 800e7de:	3b01      	subs	r3, #1
 800e7e0:	b29a      	uxth	r2, r3
 800e7e2:	68fb      	ldr	r3, [r7, #12]
 800e7e4:	86da      	strh	r2, [r3, #54]	@ 0x36
 800e7e6:	e018      	b.n	800e81a <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e7e8:	f7fd fb0e 	bl	800be08 <HAL_GetTick>
 800e7ec:	4602      	mov	r2, r0
 800e7ee:	69fb      	ldr	r3, [r7, #28]
 800e7f0:	1ad3      	subs	r3, r2, r3
 800e7f2:	683a      	ldr	r2, [r7, #0]
 800e7f4:	429a      	cmp	r2, r3
 800e7f6:	d803      	bhi.n	800e800 <HAL_SPI_Transmit+0x20a>
 800e7f8:	683b      	ldr	r3, [r7, #0]
 800e7fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e7fe:	d102      	bne.n	800e806 <HAL_SPI_Transmit+0x210>
 800e800:	683b      	ldr	r3, [r7, #0]
 800e802:	2b00      	cmp	r3, #0
 800e804:	d109      	bne.n	800e81a <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800e806:	68fb      	ldr	r3, [r7, #12]
 800e808:	2201      	movs	r2, #1
 800e80a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800e80e:	68fb      	ldr	r3, [r7, #12]
 800e810:	2200      	movs	r2, #0
 800e812:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800e816:	2303      	movs	r3, #3
 800e818:	e02d      	b.n	800e876 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800e81a:	68fb      	ldr	r3, [r7, #12]
 800e81c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800e81e:	b29b      	uxth	r3, r3
 800e820:	2b00      	cmp	r3, #0
 800e822:	d1c6      	bne.n	800e7b2 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800e824:	69fa      	ldr	r2, [r7, #28]
 800e826:	6839      	ldr	r1, [r7, #0]
 800e828:	68f8      	ldr	r0, [r7, #12]
 800e82a:	f000 fa59 	bl	800ece0 <SPI_EndRxTxTransaction>
 800e82e:	4603      	mov	r3, r0
 800e830:	2b00      	cmp	r3, #0
 800e832:	d002      	beq.n	800e83a <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800e834:	68fb      	ldr	r3, [r7, #12]
 800e836:	2220      	movs	r2, #32
 800e838:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800e83a:	68fb      	ldr	r3, [r7, #12]
 800e83c:	689b      	ldr	r3, [r3, #8]
 800e83e:	2b00      	cmp	r3, #0
 800e840:	d10a      	bne.n	800e858 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800e842:	2300      	movs	r3, #0
 800e844:	617b      	str	r3, [r7, #20]
 800e846:	68fb      	ldr	r3, [r7, #12]
 800e848:	681b      	ldr	r3, [r3, #0]
 800e84a:	68db      	ldr	r3, [r3, #12]
 800e84c:	617b      	str	r3, [r7, #20]
 800e84e:	68fb      	ldr	r3, [r7, #12]
 800e850:	681b      	ldr	r3, [r3, #0]
 800e852:	689b      	ldr	r3, [r3, #8]
 800e854:	617b      	str	r3, [r7, #20]
 800e856:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 800e858:	68fb      	ldr	r3, [r7, #12]
 800e85a:	2201      	movs	r2, #1
 800e85c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800e860:	68fb      	ldr	r3, [r7, #12]
 800e862:	2200      	movs	r2, #0
 800e864:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800e868:	68fb      	ldr	r3, [r7, #12]
 800e86a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e86c:	2b00      	cmp	r3, #0
 800e86e:	d001      	beq.n	800e874 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 800e870:	2301      	movs	r3, #1
 800e872:	e000      	b.n	800e876 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 800e874:	2300      	movs	r3, #0
  }
}
 800e876:	4618      	mov	r0, r3
 800e878:	3720      	adds	r7, #32
 800e87a:	46bd      	mov	sp, r7
 800e87c:	bd80      	pop	{r7, pc}

0800e87e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800e87e:	b580      	push	{r7, lr}
 800e880:	b08a      	sub	sp, #40	@ 0x28
 800e882:	af00      	add	r7, sp, #0
 800e884:	60f8      	str	r0, [r7, #12]
 800e886:	60b9      	str	r1, [r7, #8]
 800e888:	607a      	str	r2, [r7, #4]
 800e88a:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800e88c:	2301      	movs	r3, #1
 800e88e:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800e890:	f7fd faba 	bl	800be08 <HAL_GetTick>
 800e894:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800e896:	68fb      	ldr	r3, [r7, #12]
 800e898:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800e89c:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 800e89e:	68fb      	ldr	r3, [r7, #12]
 800e8a0:	685b      	ldr	r3, [r3, #4]
 800e8a2:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800e8a4:	887b      	ldrh	r3, [r7, #2]
 800e8a6:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800e8a8:	7ffb      	ldrb	r3, [r7, #31]
 800e8aa:	2b01      	cmp	r3, #1
 800e8ac:	d00c      	beq.n	800e8c8 <HAL_SPI_TransmitReceive+0x4a>
 800e8ae:	69bb      	ldr	r3, [r7, #24]
 800e8b0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800e8b4:	d106      	bne.n	800e8c4 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800e8b6:	68fb      	ldr	r3, [r7, #12]
 800e8b8:	689b      	ldr	r3, [r3, #8]
 800e8ba:	2b00      	cmp	r3, #0
 800e8bc:	d102      	bne.n	800e8c4 <HAL_SPI_TransmitReceive+0x46>
 800e8be:	7ffb      	ldrb	r3, [r7, #31]
 800e8c0:	2b04      	cmp	r3, #4
 800e8c2:	d001      	beq.n	800e8c8 <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 800e8c4:	2302      	movs	r3, #2
 800e8c6:	e17f      	b.n	800ebc8 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800e8c8:	68bb      	ldr	r3, [r7, #8]
 800e8ca:	2b00      	cmp	r3, #0
 800e8cc:	d005      	beq.n	800e8da <HAL_SPI_TransmitReceive+0x5c>
 800e8ce:	687b      	ldr	r3, [r7, #4]
 800e8d0:	2b00      	cmp	r3, #0
 800e8d2:	d002      	beq.n	800e8da <HAL_SPI_TransmitReceive+0x5c>
 800e8d4:	887b      	ldrh	r3, [r7, #2]
 800e8d6:	2b00      	cmp	r3, #0
 800e8d8:	d101      	bne.n	800e8de <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 800e8da:	2301      	movs	r3, #1
 800e8dc:	e174      	b.n	800ebc8 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800e8de:	68fb      	ldr	r3, [r7, #12]
 800e8e0:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800e8e4:	2b01      	cmp	r3, #1
 800e8e6:	d101      	bne.n	800e8ec <HAL_SPI_TransmitReceive+0x6e>
 800e8e8:	2302      	movs	r3, #2
 800e8ea:	e16d      	b.n	800ebc8 <HAL_SPI_TransmitReceive+0x34a>
 800e8ec:	68fb      	ldr	r3, [r7, #12]
 800e8ee:	2201      	movs	r2, #1
 800e8f0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800e8f4:	68fb      	ldr	r3, [r7, #12]
 800e8f6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800e8fa:	b2db      	uxtb	r3, r3
 800e8fc:	2b04      	cmp	r3, #4
 800e8fe:	d003      	beq.n	800e908 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800e900:	68fb      	ldr	r3, [r7, #12]
 800e902:	2205      	movs	r2, #5
 800e904:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800e908:	68fb      	ldr	r3, [r7, #12]
 800e90a:	2200      	movs	r2, #0
 800e90c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800e90e:	68fb      	ldr	r3, [r7, #12]
 800e910:	687a      	ldr	r2, [r7, #4]
 800e912:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 800e914:	68fb      	ldr	r3, [r7, #12]
 800e916:	887a      	ldrh	r2, [r7, #2]
 800e918:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 800e91a:	68fb      	ldr	r3, [r7, #12]
 800e91c:	887a      	ldrh	r2, [r7, #2]
 800e91e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800e920:	68fb      	ldr	r3, [r7, #12]
 800e922:	68ba      	ldr	r2, [r7, #8]
 800e924:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 800e926:	68fb      	ldr	r3, [r7, #12]
 800e928:	887a      	ldrh	r2, [r7, #2]
 800e92a:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 800e92c:	68fb      	ldr	r3, [r7, #12]
 800e92e:	887a      	ldrh	r2, [r7, #2]
 800e930:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800e932:	68fb      	ldr	r3, [r7, #12]
 800e934:	2200      	movs	r2, #0
 800e936:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800e938:	68fb      	ldr	r3, [r7, #12]
 800e93a:	2200      	movs	r2, #0
 800e93c:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800e93e:	68fb      	ldr	r3, [r7, #12]
 800e940:	681b      	ldr	r3, [r3, #0]
 800e942:	681b      	ldr	r3, [r3, #0]
 800e944:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e948:	2b40      	cmp	r3, #64	@ 0x40
 800e94a:	d007      	beq.n	800e95c <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800e94c:	68fb      	ldr	r3, [r7, #12]
 800e94e:	681b      	ldr	r3, [r3, #0]
 800e950:	681a      	ldr	r2, [r3, #0]
 800e952:	68fb      	ldr	r3, [r7, #12]
 800e954:	681b      	ldr	r3, [r3, #0]
 800e956:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800e95a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800e95c:	68fb      	ldr	r3, [r7, #12]
 800e95e:	68db      	ldr	r3, [r3, #12]
 800e960:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800e964:	d17e      	bne.n	800ea64 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800e966:	68fb      	ldr	r3, [r7, #12]
 800e968:	685b      	ldr	r3, [r3, #4]
 800e96a:	2b00      	cmp	r3, #0
 800e96c:	d002      	beq.n	800e974 <HAL_SPI_TransmitReceive+0xf6>
 800e96e:	8afb      	ldrh	r3, [r7, #22]
 800e970:	2b01      	cmp	r3, #1
 800e972:	d16c      	bne.n	800ea4e <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800e974:	68fb      	ldr	r3, [r7, #12]
 800e976:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e978:	881a      	ldrh	r2, [r3, #0]
 800e97a:	68fb      	ldr	r3, [r7, #12]
 800e97c:	681b      	ldr	r3, [r3, #0]
 800e97e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800e980:	68fb      	ldr	r3, [r7, #12]
 800e982:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e984:	1c9a      	adds	r2, r3, #2
 800e986:	68fb      	ldr	r3, [r7, #12]
 800e988:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800e98a:	68fb      	ldr	r3, [r7, #12]
 800e98c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800e98e:	b29b      	uxth	r3, r3
 800e990:	3b01      	subs	r3, #1
 800e992:	b29a      	uxth	r2, r3
 800e994:	68fb      	ldr	r3, [r7, #12]
 800e996:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800e998:	e059      	b.n	800ea4e <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800e99a:	68fb      	ldr	r3, [r7, #12]
 800e99c:	681b      	ldr	r3, [r3, #0]
 800e99e:	689b      	ldr	r3, [r3, #8]
 800e9a0:	f003 0302 	and.w	r3, r3, #2
 800e9a4:	2b02      	cmp	r3, #2
 800e9a6:	d11b      	bne.n	800e9e0 <HAL_SPI_TransmitReceive+0x162>
 800e9a8:	68fb      	ldr	r3, [r7, #12]
 800e9aa:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800e9ac:	b29b      	uxth	r3, r3
 800e9ae:	2b00      	cmp	r3, #0
 800e9b0:	d016      	beq.n	800e9e0 <HAL_SPI_TransmitReceive+0x162>
 800e9b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e9b4:	2b01      	cmp	r3, #1
 800e9b6:	d113      	bne.n	800e9e0 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800e9b8:	68fb      	ldr	r3, [r7, #12]
 800e9ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e9bc:	881a      	ldrh	r2, [r3, #0]
 800e9be:	68fb      	ldr	r3, [r7, #12]
 800e9c0:	681b      	ldr	r3, [r3, #0]
 800e9c2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800e9c4:	68fb      	ldr	r3, [r7, #12]
 800e9c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e9c8:	1c9a      	adds	r2, r3, #2
 800e9ca:	68fb      	ldr	r3, [r7, #12]
 800e9cc:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800e9ce:	68fb      	ldr	r3, [r7, #12]
 800e9d0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800e9d2:	b29b      	uxth	r3, r3
 800e9d4:	3b01      	subs	r3, #1
 800e9d6:	b29a      	uxth	r2, r3
 800e9d8:	68fb      	ldr	r3, [r7, #12]
 800e9da:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800e9dc:	2300      	movs	r3, #0
 800e9de:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800e9e0:	68fb      	ldr	r3, [r7, #12]
 800e9e2:	681b      	ldr	r3, [r3, #0]
 800e9e4:	689b      	ldr	r3, [r3, #8]
 800e9e6:	f003 0301 	and.w	r3, r3, #1
 800e9ea:	2b01      	cmp	r3, #1
 800e9ec:	d119      	bne.n	800ea22 <HAL_SPI_TransmitReceive+0x1a4>
 800e9ee:	68fb      	ldr	r3, [r7, #12]
 800e9f0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800e9f2:	b29b      	uxth	r3, r3
 800e9f4:	2b00      	cmp	r3, #0
 800e9f6:	d014      	beq.n	800ea22 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800e9f8:	68fb      	ldr	r3, [r7, #12]
 800e9fa:	681b      	ldr	r3, [r3, #0]
 800e9fc:	68da      	ldr	r2, [r3, #12]
 800e9fe:	68fb      	ldr	r3, [r7, #12]
 800ea00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ea02:	b292      	uxth	r2, r2
 800ea04:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800ea06:	68fb      	ldr	r3, [r7, #12]
 800ea08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ea0a:	1c9a      	adds	r2, r3, #2
 800ea0c:	68fb      	ldr	r3, [r7, #12]
 800ea0e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800ea10:	68fb      	ldr	r3, [r7, #12]
 800ea12:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800ea14:	b29b      	uxth	r3, r3
 800ea16:	3b01      	subs	r3, #1
 800ea18:	b29a      	uxth	r2, r3
 800ea1a:	68fb      	ldr	r3, [r7, #12]
 800ea1c:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800ea1e:	2301      	movs	r3, #1
 800ea20:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800ea22:	f7fd f9f1 	bl	800be08 <HAL_GetTick>
 800ea26:	4602      	mov	r2, r0
 800ea28:	6a3b      	ldr	r3, [r7, #32]
 800ea2a:	1ad3      	subs	r3, r2, r3
 800ea2c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ea2e:	429a      	cmp	r2, r3
 800ea30:	d80d      	bhi.n	800ea4e <HAL_SPI_TransmitReceive+0x1d0>
 800ea32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ea34:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ea38:	d009      	beq.n	800ea4e <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800ea3a:	68fb      	ldr	r3, [r7, #12]
 800ea3c:	2201      	movs	r2, #1
 800ea3e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 800ea42:	68fb      	ldr	r3, [r7, #12]
 800ea44:	2200      	movs	r2, #0
 800ea46:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 800ea4a:	2303      	movs	r3, #3
 800ea4c:	e0bc      	b.n	800ebc8 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800ea4e:	68fb      	ldr	r3, [r7, #12]
 800ea50:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800ea52:	b29b      	uxth	r3, r3
 800ea54:	2b00      	cmp	r3, #0
 800ea56:	d1a0      	bne.n	800e99a <HAL_SPI_TransmitReceive+0x11c>
 800ea58:	68fb      	ldr	r3, [r7, #12]
 800ea5a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800ea5c:	b29b      	uxth	r3, r3
 800ea5e:	2b00      	cmp	r3, #0
 800ea60:	d19b      	bne.n	800e99a <HAL_SPI_TransmitReceive+0x11c>
 800ea62:	e082      	b.n	800eb6a <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800ea64:	68fb      	ldr	r3, [r7, #12]
 800ea66:	685b      	ldr	r3, [r3, #4]
 800ea68:	2b00      	cmp	r3, #0
 800ea6a:	d002      	beq.n	800ea72 <HAL_SPI_TransmitReceive+0x1f4>
 800ea6c:	8afb      	ldrh	r3, [r7, #22]
 800ea6e:	2b01      	cmp	r3, #1
 800ea70:	d171      	bne.n	800eb56 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800ea72:	68fb      	ldr	r3, [r7, #12]
 800ea74:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800ea76:	68fb      	ldr	r3, [r7, #12]
 800ea78:	681b      	ldr	r3, [r3, #0]
 800ea7a:	330c      	adds	r3, #12
 800ea7c:	7812      	ldrb	r2, [r2, #0]
 800ea7e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800ea80:	68fb      	ldr	r3, [r7, #12]
 800ea82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ea84:	1c5a      	adds	r2, r3, #1
 800ea86:	68fb      	ldr	r3, [r7, #12]
 800ea88:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800ea8a:	68fb      	ldr	r3, [r7, #12]
 800ea8c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800ea8e:	b29b      	uxth	r3, r3
 800ea90:	3b01      	subs	r3, #1
 800ea92:	b29a      	uxth	r2, r3
 800ea94:	68fb      	ldr	r3, [r7, #12]
 800ea96:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800ea98:	e05d      	b.n	800eb56 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800ea9a:	68fb      	ldr	r3, [r7, #12]
 800ea9c:	681b      	ldr	r3, [r3, #0]
 800ea9e:	689b      	ldr	r3, [r3, #8]
 800eaa0:	f003 0302 	and.w	r3, r3, #2
 800eaa4:	2b02      	cmp	r3, #2
 800eaa6:	d11c      	bne.n	800eae2 <HAL_SPI_TransmitReceive+0x264>
 800eaa8:	68fb      	ldr	r3, [r7, #12]
 800eaaa:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800eaac:	b29b      	uxth	r3, r3
 800eaae:	2b00      	cmp	r3, #0
 800eab0:	d017      	beq.n	800eae2 <HAL_SPI_TransmitReceive+0x264>
 800eab2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eab4:	2b01      	cmp	r3, #1
 800eab6:	d114      	bne.n	800eae2 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800eab8:	68fb      	ldr	r3, [r7, #12]
 800eaba:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800eabc:	68fb      	ldr	r3, [r7, #12]
 800eabe:	681b      	ldr	r3, [r3, #0]
 800eac0:	330c      	adds	r3, #12
 800eac2:	7812      	ldrb	r2, [r2, #0]
 800eac4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800eac6:	68fb      	ldr	r3, [r7, #12]
 800eac8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800eaca:	1c5a      	adds	r2, r3, #1
 800eacc:	68fb      	ldr	r3, [r7, #12]
 800eace:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800ead0:	68fb      	ldr	r3, [r7, #12]
 800ead2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800ead4:	b29b      	uxth	r3, r3
 800ead6:	3b01      	subs	r3, #1
 800ead8:	b29a      	uxth	r2, r3
 800eada:	68fb      	ldr	r3, [r7, #12]
 800eadc:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800eade:	2300      	movs	r3, #0
 800eae0:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800eae2:	68fb      	ldr	r3, [r7, #12]
 800eae4:	681b      	ldr	r3, [r3, #0]
 800eae6:	689b      	ldr	r3, [r3, #8]
 800eae8:	f003 0301 	and.w	r3, r3, #1
 800eaec:	2b01      	cmp	r3, #1
 800eaee:	d119      	bne.n	800eb24 <HAL_SPI_TransmitReceive+0x2a6>
 800eaf0:	68fb      	ldr	r3, [r7, #12]
 800eaf2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800eaf4:	b29b      	uxth	r3, r3
 800eaf6:	2b00      	cmp	r3, #0
 800eaf8:	d014      	beq.n	800eb24 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800eafa:	68fb      	ldr	r3, [r7, #12]
 800eafc:	681b      	ldr	r3, [r3, #0]
 800eafe:	68da      	ldr	r2, [r3, #12]
 800eb00:	68fb      	ldr	r3, [r7, #12]
 800eb02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800eb04:	b2d2      	uxtb	r2, r2
 800eb06:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800eb08:	68fb      	ldr	r3, [r7, #12]
 800eb0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800eb0c:	1c5a      	adds	r2, r3, #1
 800eb0e:	68fb      	ldr	r3, [r7, #12]
 800eb10:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800eb12:	68fb      	ldr	r3, [r7, #12]
 800eb14:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800eb16:	b29b      	uxth	r3, r3
 800eb18:	3b01      	subs	r3, #1
 800eb1a:	b29a      	uxth	r2, r3
 800eb1c:	68fb      	ldr	r3, [r7, #12]
 800eb1e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800eb20:	2301      	movs	r3, #1
 800eb22:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800eb24:	f7fd f970 	bl	800be08 <HAL_GetTick>
 800eb28:	4602      	mov	r2, r0
 800eb2a:	6a3b      	ldr	r3, [r7, #32]
 800eb2c:	1ad3      	subs	r3, r2, r3
 800eb2e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800eb30:	429a      	cmp	r2, r3
 800eb32:	d803      	bhi.n	800eb3c <HAL_SPI_TransmitReceive+0x2be>
 800eb34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eb36:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eb3a:	d102      	bne.n	800eb42 <HAL_SPI_TransmitReceive+0x2c4>
 800eb3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eb3e:	2b00      	cmp	r3, #0
 800eb40:	d109      	bne.n	800eb56 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800eb42:	68fb      	ldr	r3, [r7, #12]
 800eb44:	2201      	movs	r2, #1
 800eb46:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 800eb4a:	68fb      	ldr	r3, [r7, #12]
 800eb4c:	2200      	movs	r2, #0
 800eb4e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 800eb52:	2303      	movs	r3, #3
 800eb54:	e038      	b.n	800ebc8 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800eb56:	68fb      	ldr	r3, [r7, #12]
 800eb58:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800eb5a:	b29b      	uxth	r3, r3
 800eb5c:	2b00      	cmp	r3, #0
 800eb5e:	d19c      	bne.n	800ea9a <HAL_SPI_TransmitReceive+0x21c>
 800eb60:	68fb      	ldr	r3, [r7, #12]
 800eb62:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800eb64:	b29b      	uxth	r3, r3
 800eb66:	2b00      	cmp	r3, #0
 800eb68:	d197      	bne.n	800ea9a <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800eb6a:	6a3a      	ldr	r2, [r7, #32]
 800eb6c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800eb6e:	68f8      	ldr	r0, [r7, #12]
 800eb70:	f000 f8b6 	bl	800ece0 <SPI_EndRxTxTransaction>
 800eb74:	4603      	mov	r3, r0
 800eb76:	2b00      	cmp	r3, #0
 800eb78:	d008      	beq.n	800eb8c <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800eb7a:	68fb      	ldr	r3, [r7, #12]
 800eb7c:	2220      	movs	r2, #32
 800eb7e:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 800eb80:	68fb      	ldr	r3, [r7, #12]
 800eb82:	2200      	movs	r2, #0
 800eb84:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 800eb88:	2301      	movs	r3, #1
 800eb8a:	e01d      	b.n	800ebc8 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800eb8c:	68fb      	ldr	r3, [r7, #12]
 800eb8e:	689b      	ldr	r3, [r3, #8]
 800eb90:	2b00      	cmp	r3, #0
 800eb92:	d10a      	bne.n	800ebaa <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800eb94:	2300      	movs	r3, #0
 800eb96:	613b      	str	r3, [r7, #16]
 800eb98:	68fb      	ldr	r3, [r7, #12]
 800eb9a:	681b      	ldr	r3, [r3, #0]
 800eb9c:	68db      	ldr	r3, [r3, #12]
 800eb9e:	613b      	str	r3, [r7, #16]
 800eba0:	68fb      	ldr	r3, [r7, #12]
 800eba2:	681b      	ldr	r3, [r3, #0]
 800eba4:	689b      	ldr	r3, [r3, #8]
 800eba6:	613b      	str	r3, [r7, #16]
 800eba8:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 800ebaa:	68fb      	ldr	r3, [r7, #12]
 800ebac:	2201      	movs	r2, #1
 800ebae:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800ebb2:	68fb      	ldr	r3, [r7, #12]
 800ebb4:	2200      	movs	r2, #0
 800ebb6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800ebba:	68fb      	ldr	r3, [r7, #12]
 800ebbc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ebbe:	2b00      	cmp	r3, #0
 800ebc0:	d001      	beq.n	800ebc6 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 800ebc2:	2301      	movs	r3, #1
 800ebc4:	e000      	b.n	800ebc8 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 800ebc6:	2300      	movs	r3, #0
  }
}
 800ebc8:	4618      	mov	r0, r3
 800ebca:	3728      	adds	r7, #40	@ 0x28
 800ebcc:	46bd      	mov	sp, r7
 800ebce:	bd80      	pop	{r7, pc}

0800ebd0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800ebd0:	b580      	push	{r7, lr}
 800ebd2:	b088      	sub	sp, #32
 800ebd4:	af00      	add	r7, sp, #0
 800ebd6:	60f8      	str	r0, [r7, #12]
 800ebd8:	60b9      	str	r1, [r7, #8]
 800ebda:	603b      	str	r3, [r7, #0]
 800ebdc:	4613      	mov	r3, r2
 800ebde:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800ebe0:	f7fd f912 	bl	800be08 <HAL_GetTick>
 800ebe4:	4602      	mov	r2, r0
 800ebe6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ebe8:	1a9b      	subs	r3, r3, r2
 800ebea:	683a      	ldr	r2, [r7, #0]
 800ebec:	4413      	add	r3, r2
 800ebee:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800ebf0:	f7fd f90a 	bl	800be08 <HAL_GetTick>
 800ebf4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800ebf6:	4b39      	ldr	r3, [pc, #228]	@ (800ecdc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800ebf8:	681b      	ldr	r3, [r3, #0]
 800ebfa:	015b      	lsls	r3, r3, #5
 800ebfc:	0d1b      	lsrs	r3, r3, #20
 800ebfe:	69fa      	ldr	r2, [r7, #28]
 800ec00:	fb02 f303 	mul.w	r3, r2, r3
 800ec04:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800ec06:	e054      	b.n	800ecb2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800ec08:	683b      	ldr	r3, [r7, #0]
 800ec0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ec0e:	d050      	beq.n	800ecb2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800ec10:	f7fd f8fa 	bl	800be08 <HAL_GetTick>
 800ec14:	4602      	mov	r2, r0
 800ec16:	69bb      	ldr	r3, [r7, #24]
 800ec18:	1ad3      	subs	r3, r2, r3
 800ec1a:	69fa      	ldr	r2, [r7, #28]
 800ec1c:	429a      	cmp	r2, r3
 800ec1e:	d902      	bls.n	800ec26 <SPI_WaitFlagStateUntilTimeout+0x56>
 800ec20:	69fb      	ldr	r3, [r7, #28]
 800ec22:	2b00      	cmp	r3, #0
 800ec24:	d13d      	bne.n	800eca2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800ec26:	68fb      	ldr	r3, [r7, #12]
 800ec28:	681b      	ldr	r3, [r3, #0]
 800ec2a:	685a      	ldr	r2, [r3, #4]
 800ec2c:	68fb      	ldr	r3, [r7, #12]
 800ec2e:	681b      	ldr	r3, [r3, #0]
 800ec30:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800ec34:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ec36:	68fb      	ldr	r3, [r7, #12]
 800ec38:	685b      	ldr	r3, [r3, #4]
 800ec3a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800ec3e:	d111      	bne.n	800ec64 <SPI_WaitFlagStateUntilTimeout+0x94>
 800ec40:	68fb      	ldr	r3, [r7, #12]
 800ec42:	689b      	ldr	r3, [r3, #8]
 800ec44:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800ec48:	d004      	beq.n	800ec54 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800ec4a:	68fb      	ldr	r3, [r7, #12]
 800ec4c:	689b      	ldr	r3, [r3, #8]
 800ec4e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ec52:	d107      	bne.n	800ec64 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800ec54:	68fb      	ldr	r3, [r7, #12]
 800ec56:	681b      	ldr	r3, [r3, #0]
 800ec58:	681a      	ldr	r2, [r3, #0]
 800ec5a:	68fb      	ldr	r3, [r7, #12]
 800ec5c:	681b      	ldr	r3, [r3, #0]
 800ec5e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800ec62:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800ec64:	68fb      	ldr	r3, [r7, #12]
 800ec66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ec68:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800ec6c:	d10f      	bne.n	800ec8e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800ec6e:	68fb      	ldr	r3, [r7, #12]
 800ec70:	681b      	ldr	r3, [r3, #0]
 800ec72:	681a      	ldr	r2, [r3, #0]
 800ec74:	68fb      	ldr	r3, [r7, #12]
 800ec76:	681b      	ldr	r3, [r3, #0]
 800ec78:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800ec7c:	601a      	str	r2, [r3, #0]
 800ec7e:	68fb      	ldr	r3, [r7, #12]
 800ec80:	681b      	ldr	r3, [r3, #0]
 800ec82:	681a      	ldr	r2, [r3, #0]
 800ec84:	68fb      	ldr	r3, [r7, #12]
 800ec86:	681b      	ldr	r3, [r3, #0]
 800ec88:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800ec8c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800ec8e:	68fb      	ldr	r3, [r7, #12]
 800ec90:	2201      	movs	r2, #1
 800ec92:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800ec96:	68fb      	ldr	r3, [r7, #12]
 800ec98:	2200      	movs	r2, #0
 800ec9a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800ec9e:	2303      	movs	r3, #3
 800eca0:	e017      	b.n	800ecd2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800eca2:	697b      	ldr	r3, [r7, #20]
 800eca4:	2b00      	cmp	r3, #0
 800eca6:	d101      	bne.n	800ecac <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800eca8:	2300      	movs	r3, #0
 800ecaa:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800ecac:	697b      	ldr	r3, [r7, #20]
 800ecae:	3b01      	subs	r3, #1
 800ecb0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800ecb2:	68fb      	ldr	r3, [r7, #12]
 800ecb4:	681b      	ldr	r3, [r3, #0]
 800ecb6:	689a      	ldr	r2, [r3, #8]
 800ecb8:	68bb      	ldr	r3, [r7, #8]
 800ecba:	4013      	ands	r3, r2
 800ecbc:	68ba      	ldr	r2, [r7, #8]
 800ecbe:	429a      	cmp	r2, r3
 800ecc0:	bf0c      	ite	eq
 800ecc2:	2301      	moveq	r3, #1
 800ecc4:	2300      	movne	r3, #0
 800ecc6:	b2db      	uxtb	r3, r3
 800ecc8:	461a      	mov	r2, r3
 800ecca:	79fb      	ldrb	r3, [r7, #7]
 800eccc:	429a      	cmp	r2, r3
 800ecce:	d19b      	bne.n	800ec08 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800ecd0:	2300      	movs	r3, #0
}
 800ecd2:	4618      	mov	r0, r3
 800ecd4:	3720      	adds	r7, #32
 800ecd6:	46bd      	mov	sp, r7
 800ecd8:	bd80      	pop	{r7, pc}
 800ecda:	bf00      	nop
 800ecdc:	20000000 	.word	0x20000000

0800ece0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800ece0:	b580      	push	{r7, lr}
 800ece2:	b088      	sub	sp, #32
 800ece4:	af02      	add	r7, sp, #8
 800ece6:	60f8      	str	r0, [r7, #12]
 800ece8:	60b9      	str	r1, [r7, #8]
 800ecea:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 800ecec:	687b      	ldr	r3, [r7, #4]
 800ecee:	9300      	str	r3, [sp, #0]
 800ecf0:	68bb      	ldr	r3, [r7, #8]
 800ecf2:	2201      	movs	r2, #1
 800ecf4:	2102      	movs	r1, #2
 800ecf6:	68f8      	ldr	r0, [r7, #12]
 800ecf8:	f7ff ff6a 	bl	800ebd0 <SPI_WaitFlagStateUntilTimeout>
 800ecfc:	4603      	mov	r3, r0
 800ecfe:	2b00      	cmp	r3, #0
 800ed00:	d007      	beq.n	800ed12 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ed02:	68fb      	ldr	r3, [r7, #12]
 800ed04:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ed06:	f043 0220 	orr.w	r2, r3, #32
 800ed0a:	68fb      	ldr	r3, [r7, #12]
 800ed0c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800ed0e:	2303      	movs	r3, #3
 800ed10:	e032      	b.n	800ed78 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800ed12:	4b1b      	ldr	r3, [pc, #108]	@ (800ed80 <SPI_EndRxTxTransaction+0xa0>)
 800ed14:	681b      	ldr	r3, [r3, #0]
 800ed16:	4a1b      	ldr	r2, [pc, #108]	@ (800ed84 <SPI_EndRxTxTransaction+0xa4>)
 800ed18:	fba2 2303 	umull	r2, r3, r2, r3
 800ed1c:	0d5b      	lsrs	r3, r3, #21
 800ed1e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800ed22:	fb02 f303 	mul.w	r3, r2, r3
 800ed26:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800ed28:	68fb      	ldr	r3, [r7, #12]
 800ed2a:	685b      	ldr	r3, [r3, #4]
 800ed2c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800ed30:	d112      	bne.n	800ed58 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800ed32:	687b      	ldr	r3, [r7, #4]
 800ed34:	9300      	str	r3, [sp, #0]
 800ed36:	68bb      	ldr	r3, [r7, #8]
 800ed38:	2200      	movs	r2, #0
 800ed3a:	2180      	movs	r1, #128	@ 0x80
 800ed3c:	68f8      	ldr	r0, [r7, #12]
 800ed3e:	f7ff ff47 	bl	800ebd0 <SPI_WaitFlagStateUntilTimeout>
 800ed42:	4603      	mov	r3, r0
 800ed44:	2b00      	cmp	r3, #0
 800ed46:	d016      	beq.n	800ed76 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ed48:	68fb      	ldr	r3, [r7, #12]
 800ed4a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ed4c:	f043 0220 	orr.w	r2, r3, #32
 800ed50:	68fb      	ldr	r3, [r7, #12]
 800ed52:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800ed54:	2303      	movs	r3, #3
 800ed56:	e00f      	b.n	800ed78 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800ed58:	697b      	ldr	r3, [r7, #20]
 800ed5a:	2b00      	cmp	r3, #0
 800ed5c:	d00a      	beq.n	800ed74 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 800ed5e:	697b      	ldr	r3, [r7, #20]
 800ed60:	3b01      	subs	r3, #1
 800ed62:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800ed64:	68fb      	ldr	r3, [r7, #12]
 800ed66:	681b      	ldr	r3, [r3, #0]
 800ed68:	689b      	ldr	r3, [r3, #8]
 800ed6a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ed6e:	2b80      	cmp	r3, #128	@ 0x80
 800ed70:	d0f2      	beq.n	800ed58 <SPI_EndRxTxTransaction+0x78>
 800ed72:	e000      	b.n	800ed76 <SPI_EndRxTxTransaction+0x96>
        break;
 800ed74:	bf00      	nop
  }

  return HAL_OK;
 800ed76:	2300      	movs	r3, #0
}
 800ed78:	4618      	mov	r0, r3
 800ed7a:	3718      	adds	r7, #24
 800ed7c:	46bd      	mov	sp, r7
 800ed7e:	bd80      	pop	{r7, pc}
 800ed80:	20000000 	.word	0x20000000
 800ed84:	165e9f81 	.word	0x165e9f81

0800ed88 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800ed88:	b580      	push	{r7, lr}
 800ed8a:	b082      	sub	sp, #8
 800ed8c:	af00      	add	r7, sp, #0
 800ed8e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ed90:	687b      	ldr	r3, [r7, #4]
 800ed92:	2b00      	cmp	r3, #0
 800ed94:	d101      	bne.n	800ed9a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800ed96:	2301      	movs	r3, #1
 800ed98:	e041      	b.n	800ee1e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ed9a:	687b      	ldr	r3, [r7, #4]
 800ed9c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800eda0:	b2db      	uxtb	r3, r3
 800eda2:	2b00      	cmp	r3, #0
 800eda4:	d106      	bne.n	800edb4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800eda6:	687b      	ldr	r3, [r7, #4]
 800eda8:	2200      	movs	r2, #0
 800edaa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800edae:	6878      	ldr	r0, [r7, #4]
 800edb0:	f7f2 fc5e 	bl	8001670 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800edb4:	687b      	ldr	r3, [r7, #4]
 800edb6:	2202      	movs	r2, #2
 800edb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800edbc:	687b      	ldr	r3, [r7, #4]
 800edbe:	681a      	ldr	r2, [r3, #0]
 800edc0:	687b      	ldr	r3, [r7, #4]
 800edc2:	3304      	adds	r3, #4
 800edc4:	4619      	mov	r1, r3
 800edc6:	4610      	mov	r0, r2
 800edc8:	f000 faac 	bl	800f324 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800edcc:	687b      	ldr	r3, [r7, #4]
 800edce:	2201      	movs	r2, #1
 800edd0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800edd4:	687b      	ldr	r3, [r7, #4]
 800edd6:	2201      	movs	r2, #1
 800edd8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800eddc:	687b      	ldr	r3, [r7, #4]
 800edde:	2201      	movs	r2, #1
 800ede0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800ede4:	687b      	ldr	r3, [r7, #4]
 800ede6:	2201      	movs	r2, #1
 800ede8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800edec:	687b      	ldr	r3, [r7, #4]
 800edee:	2201      	movs	r2, #1
 800edf0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800edf4:	687b      	ldr	r3, [r7, #4]
 800edf6:	2201      	movs	r2, #1
 800edf8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800edfc:	687b      	ldr	r3, [r7, #4]
 800edfe:	2201      	movs	r2, #1
 800ee00:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800ee04:	687b      	ldr	r3, [r7, #4]
 800ee06:	2201      	movs	r2, #1
 800ee08:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800ee0c:	687b      	ldr	r3, [r7, #4]
 800ee0e:	2201      	movs	r2, #1
 800ee10:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ee14:	687b      	ldr	r3, [r7, #4]
 800ee16:	2201      	movs	r2, #1
 800ee18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800ee1c:	2300      	movs	r3, #0
}
 800ee1e:	4618      	mov	r0, r3
 800ee20:	3708      	adds	r7, #8
 800ee22:	46bd      	mov	sp, r7
 800ee24:	bd80      	pop	{r7, pc}
	...

0800ee28 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800ee28:	b480      	push	{r7}
 800ee2a:	b085      	sub	sp, #20
 800ee2c:	af00      	add	r7, sp, #0
 800ee2e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800ee30:	687b      	ldr	r3, [r7, #4]
 800ee32:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800ee36:	b2db      	uxtb	r3, r3
 800ee38:	2b01      	cmp	r3, #1
 800ee3a:	d001      	beq.n	800ee40 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800ee3c:	2301      	movs	r3, #1
 800ee3e:	e04e      	b.n	800eede <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ee40:	687b      	ldr	r3, [r7, #4]
 800ee42:	2202      	movs	r2, #2
 800ee44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800ee48:	687b      	ldr	r3, [r7, #4]
 800ee4a:	681b      	ldr	r3, [r3, #0]
 800ee4c:	68da      	ldr	r2, [r3, #12]
 800ee4e:	687b      	ldr	r3, [r7, #4]
 800ee50:	681b      	ldr	r3, [r3, #0]
 800ee52:	f042 0201 	orr.w	r2, r2, #1
 800ee56:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ee58:	687b      	ldr	r3, [r7, #4]
 800ee5a:	681b      	ldr	r3, [r3, #0]
 800ee5c:	4a23      	ldr	r2, [pc, #140]	@ (800eeec <HAL_TIM_Base_Start_IT+0xc4>)
 800ee5e:	4293      	cmp	r3, r2
 800ee60:	d022      	beq.n	800eea8 <HAL_TIM_Base_Start_IT+0x80>
 800ee62:	687b      	ldr	r3, [r7, #4]
 800ee64:	681b      	ldr	r3, [r3, #0]
 800ee66:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ee6a:	d01d      	beq.n	800eea8 <HAL_TIM_Base_Start_IT+0x80>
 800ee6c:	687b      	ldr	r3, [r7, #4]
 800ee6e:	681b      	ldr	r3, [r3, #0]
 800ee70:	4a1f      	ldr	r2, [pc, #124]	@ (800eef0 <HAL_TIM_Base_Start_IT+0xc8>)
 800ee72:	4293      	cmp	r3, r2
 800ee74:	d018      	beq.n	800eea8 <HAL_TIM_Base_Start_IT+0x80>
 800ee76:	687b      	ldr	r3, [r7, #4]
 800ee78:	681b      	ldr	r3, [r3, #0]
 800ee7a:	4a1e      	ldr	r2, [pc, #120]	@ (800eef4 <HAL_TIM_Base_Start_IT+0xcc>)
 800ee7c:	4293      	cmp	r3, r2
 800ee7e:	d013      	beq.n	800eea8 <HAL_TIM_Base_Start_IT+0x80>
 800ee80:	687b      	ldr	r3, [r7, #4]
 800ee82:	681b      	ldr	r3, [r3, #0]
 800ee84:	4a1c      	ldr	r2, [pc, #112]	@ (800eef8 <HAL_TIM_Base_Start_IT+0xd0>)
 800ee86:	4293      	cmp	r3, r2
 800ee88:	d00e      	beq.n	800eea8 <HAL_TIM_Base_Start_IT+0x80>
 800ee8a:	687b      	ldr	r3, [r7, #4]
 800ee8c:	681b      	ldr	r3, [r3, #0]
 800ee8e:	4a1b      	ldr	r2, [pc, #108]	@ (800eefc <HAL_TIM_Base_Start_IT+0xd4>)
 800ee90:	4293      	cmp	r3, r2
 800ee92:	d009      	beq.n	800eea8 <HAL_TIM_Base_Start_IT+0x80>
 800ee94:	687b      	ldr	r3, [r7, #4]
 800ee96:	681b      	ldr	r3, [r3, #0]
 800ee98:	4a19      	ldr	r2, [pc, #100]	@ (800ef00 <HAL_TIM_Base_Start_IT+0xd8>)
 800ee9a:	4293      	cmp	r3, r2
 800ee9c:	d004      	beq.n	800eea8 <HAL_TIM_Base_Start_IT+0x80>
 800ee9e:	687b      	ldr	r3, [r7, #4]
 800eea0:	681b      	ldr	r3, [r3, #0]
 800eea2:	4a18      	ldr	r2, [pc, #96]	@ (800ef04 <HAL_TIM_Base_Start_IT+0xdc>)
 800eea4:	4293      	cmp	r3, r2
 800eea6:	d111      	bne.n	800eecc <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800eea8:	687b      	ldr	r3, [r7, #4]
 800eeaa:	681b      	ldr	r3, [r3, #0]
 800eeac:	689b      	ldr	r3, [r3, #8]
 800eeae:	f003 0307 	and.w	r3, r3, #7
 800eeb2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800eeb4:	68fb      	ldr	r3, [r7, #12]
 800eeb6:	2b06      	cmp	r3, #6
 800eeb8:	d010      	beq.n	800eedc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800eeba:	687b      	ldr	r3, [r7, #4]
 800eebc:	681b      	ldr	r3, [r3, #0]
 800eebe:	681a      	ldr	r2, [r3, #0]
 800eec0:	687b      	ldr	r3, [r7, #4]
 800eec2:	681b      	ldr	r3, [r3, #0]
 800eec4:	f042 0201 	orr.w	r2, r2, #1
 800eec8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800eeca:	e007      	b.n	800eedc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800eecc:	687b      	ldr	r3, [r7, #4]
 800eece:	681b      	ldr	r3, [r3, #0]
 800eed0:	681a      	ldr	r2, [r3, #0]
 800eed2:	687b      	ldr	r3, [r7, #4]
 800eed4:	681b      	ldr	r3, [r3, #0]
 800eed6:	f042 0201 	orr.w	r2, r2, #1
 800eeda:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800eedc:	2300      	movs	r3, #0
}
 800eede:	4618      	mov	r0, r3
 800eee0:	3714      	adds	r7, #20
 800eee2:	46bd      	mov	sp, r7
 800eee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eee8:	4770      	bx	lr
 800eeea:	bf00      	nop
 800eeec:	40010000 	.word	0x40010000
 800eef0:	40000400 	.word	0x40000400
 800eef4:	40000800 	.word	0x40000800
 800eef8:	40000c00 	.word	0x40000c00
 800eefc:	40010400 	.word	0x40010400
 800ef00:	40014000 	.word	0x40014000
 800ef04:	40001800 	.word	0x40001800

0800ef08 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800ef08:	b480      	push	{r7}
 800ef0a:	b083      	sub	sp, #12
 800ef0c:	af00      	add	r7, sp, #0
 800ef0e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800ef10:	687b      	ldr	r3, [r7, #4]
 800ef12:	681b      	ldr	r3, [r3, #0]
 800ef14:	68da      	ldr	r2, [r3, #12]
 800ef16:	687b      	ldr	r3, [r7, #4]
 800ef18:	681b      	ldr	r3, [r3, #0]
 800ef1a:	f022 0201 	bic.w	r2, r2, #1
 800ef1e:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800ef20:	687b      	ldr	r3, [r7, #4]
 800ef22:	681b      	ldr	r3, [r3, #0]
 800ef24:	6a1a      	ldr	r2, [r3, #32]
 800ef26:	f241 1311 	movw	r3, #4369	@ 0x1111
 800ef2a:	4013      	ands	r3, r2
 800ef2c:	2b00      	cmp	r3, #0
 800ef2e:	d10f      	bne.n	800ef50 <HAL_TIM_Base_Stop_IT+0x48>
 800ef30:	687b      	ldr	r3, [r7, #4]
 800ef32:	681b      	ldr	r3, [r3, #0]
 800ef34:	6a1a      	ldr	r2, [r3, #32]
 800ef36:	f240 4344 	movw	r3, #1092	@ 0x444
 800ef3a:	4013      	ands	r3, r2
 800ef3c:	2b00      	cmp	r3, #0
 800ef3e:	d107      	bne.n	800ef50 <HAL_TIM_Base_Stop_IT+0x48>
 800ef40:	687b      	ldr	r3, [r7, #4]
 800ef42:	681b      	ldr	r3, [r3, #0]
 800ef44:	681a      	ldr	r2, [r3, #0]
 800ef46:	687b      	ldr	r3, [r7, #4]
 800ef48:	681b      	ldr	r3, [r3, #0]
 800ef4a:	f022 0201 	bic.w	r2, r2, #1
 800ef4e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800ef50:	687b      	ldr	r3, [r7, #4]
 800ef52:	2201      	movs	r2, #1
 800ef54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 800ef58:	2300      	movs	r3, #0
}
 800ef5a:	4618      	mov	r0, r3
 800ef5c:	370c      	adds	r7, #12
 800ef5e:	46bd      	mov	sp, r7
 800ef60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef64:	4770      	bx	lr

0800ef66 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800ef66:	b580      	push	{r7, lr}
 800ef68:	b084      	sub	sp, #16
 800ef6a:	af00      	add	r7, sp, #0
 800ef6c:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800ef6e:	687b      	ldr	r3, [r7, #4]
 800ef70:	681b      	ldr	r3, [r3, #0]
 800ef72:	68db      	ldr	r3, [r3, #12]
 800ef74:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800ef76:	687b      	ldr	r3, [r7, #4]
 800ef78:	681b      	ldr	r3, [r3, #0]
 800ef7a:	691b      	ldr	r3, [r3, #16]
 800ef7c:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800ef7e:	68bb      	ldr	r3, [r7, #8]
 800ef80:	f003 0302 	and.w	r3, r3, #2
 800ef84:	2b00      	cmp	r3, #0
 800ef86:	d020      	beq.n	800efca <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800ef88:	68fb      	ldr	r3, [r7, #12]
 800ef8a:	f003 0302 	and.w	r3, r3, #2
 800ef8e:	2b00      	cmp	r3, #0
 800ef90:	d01b      	beq.n	800efca <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800ef92:	687b      	ldr	r3, [r7, #4]
 800ef94:	681b      	ldr	r3, [r3, #0]
 800ef96:	f06f 0202 	mvn.w	r2, #2
 800ef9a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800ef9c:	687b      	ldr	r3, [r7, #4]
 800ef9e:	2201      	movs	r2, #1
 800efa0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800efa2:	687b      	ldr	r3, [r7, #4]
 800efa4:	681b      	ldr	r3, [r3, #0]
 800efa6:	699b      	ldr	r3, [r3, #24]
 800efa8:	f003 0303 	and.w	r3, r3, #3
 800efac:	2b00      	cmp	r3, #0
 800efae:	d003      	beq.n	800efb8 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800efb0:	6878      	ldr	r0, [r7, #4]
 800efb2:	f000 f999 	bl	800f2e8 <HAL_TIM_IC_CaptureCallback>
 800efb6:	e005      	b.n	800efc4 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800efb8:	6878      	ldr	r0, [r7, #4]
 800efba:	f000 f98b 	bl	800f2d4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800efbe:	6878      	ldr	r0, [r7, #4]
 800efc0:	f000 f99c 	bl	800f2fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800efc4:	687b      	ldr	r3, [r7, #4]
 800efc6:	2200      	movs	r2, #0
 800efc8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800efca:	68bb      	ldr	r3, [r7, #8]
 800efcc:	f003 0304 	and.w	r3, r3, #4
 800efd0:	2b00      	cmp	r3, #0
 800efd2:	d020      	beq.n	800f016 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800efd4:	68fb      	ldr	r3, [r7, #12]
 800efd6:	f003 0304 	and.w	r3, r3, #4
 800efda:	2b00      	cmp	r3, #0
 800efdc:	d01b      	beq.n	800f016 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800efde:	687b      	ldr	r3, [r7, #4]
 800efe0:	681b      	ldr	r3, [r3, #0]
 800efe2:	f06f 0204 	mvn.w	r2, #4
 800efe6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800efe8:	687b      	ldr	r3, [r7, #4]
 800efea:	2202      	movs	r2, #2
 800efec:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800efee:	687b      	ldr	r3, [r7, #4]
 800eff0:	681b      	ldr	r3, [r3, #0]
 800eff2:	699b      	ldr	r3, [r3, #24]
 800eff4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800eff8:	2b00      	cmp	r3, #0
 800effa:	d003      	beq.n	800f004 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800effc:	6878      	ldr	r0, [r7, #4]
 800effe:	f000 f973 	bl	800f2e8 <HAL_TIM_IC_CaptureCallback>
 800f002:	e005      	b.n	800f010 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f004:	6878      	ldr	r0, [r7, #4]
 800f006:	f000 f965 	bl	800f2d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f00a:	6878      	ldr	r0, [r7, #4]
 800f00c:	f000 f976 	bl	800f2fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f010:	687b      	ldr	r3, [r7, #4]
 800f012:	2200      	movs	r2, #0
 800f014:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800f016:	68bb      	ldr	r3, [r7, #8]
 800f018:	f003 0308 	and.w	r3, r3, #8
 800f01c:	2b00      	cmp	r3, #0
 800f01e:	d020      	beq.n	800f062 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800f020:	68fb      	ldr	r3, [r7, #12]
 800f022:	f003 0308 	and.w	r3, r3, #8
 800f026:	2b00      	cmp	r3, #0
 800f028:	d01b      	beq.n	800f062 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800f02a:	687b      	ldr	r3, [r7, #4]
 800f02c:	681b      	ldr	r3, [r3, #0]
 800f02e:	f06f 0208 	mvn.w	r2, #8
 800f032:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800f034:	687b      	ldr	r3, [r7, #4]
 800f036:	2204      	movs	r2, #4
 800f038:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800f03a:	687b      	ldr	r3, [r7, #4]
 800f03c:	681b      	ldr	r3, [r3, #0]
 800f03e:	69db      	ldr	r3, [r3, #28]
 800f040:	f003 0303 	and.w	r3, r3, #3
 800f044:	2b00      	cmp	r3, #0
 800f046:	d003      	beq.n	800f050 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f048:	6878      	ldr	r0, [r7, #4]
 800f04a:	f000 f94d 	bl	800f2e8 <HAL_TIM_IC_CaptureCallback>
 800f04e:	e005      	b.n	800f05c <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f050:	6878      	ldr	r0, [r7, #4]
 800f052:	f000 f93f 	bl	800f2d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f056:	6878      	ldr	r0, [r7, #4]
 800f058:	f000 f950 	bl	800f2fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f05c:	687b      	ldr	r3, [r7, #4]
 800f05e:	2200      	movs	r2, #0
 800f060:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800f062:	68bb      	ldr	r3, [r7, #8]
 800f064:	f003 0310 	and.w	r3, r3, #16
 800f068:	2b00      	cmp	r3, #0
 800f06a:	d020      	beq.n	800f0ae <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800f06c:	68fb      	ldr	r3, [r7, #12]
 800f06e:	f003 0310 	and.w	r3, r3, #16
 800f072:	2b00      	cmp	r3, #0
 800f074:	d01b      	beq.n	800f0ae <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800f076:	687b      	ldr	r3, [r7, #4]
 800f078:	681b      	ldr	r3, [r3, #0]
 800f07a:	f06f 0210 	mvn.w	r2, #16
 800f07e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800f080:	687b      	ldr	r3, [r7, #4]
 800f082:	2208      	movs	r2, #8
 800f084:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800f086:	687b      	ldr	r3, [r7, #4]
 800f088:	681b      	ldr	r3, [r3, #0]
 800f08a:	69db      	ldr	r3, [r3, #28]
 800f08c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800f090:	2b00      	cmp	r3, #0
 800f092:	d003      	beq.n	800f09c <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f094:	6878      	ldr	r0, [r7, #4]
 800f096:	f000 f927 	bl	800f2e8 <HAL_TIM_IC_CaptureCallback>
 800f09a:	e005      	b.n	800f0a8 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f09c:	6878      	ldr	r0, [r7, #4]
 800f09e:	f000 f919 	bl	800f2d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f0a2:	6878      	ldr	r0, [r7, #4]
 800f0a4:	f000 f92a 	bl	800f2fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f0a8:	687b      	ldr	r3, [r7, #4]
 800f0aa:	2200      	movs	r2, #0
 800f0ac:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800f0ae:	68bb      	ldr	r3, [r7, #8]
 800f0b0:	f003 0301 	and.w	r3, r3, #1
 800f0b4:	2b00      	cmp	r3, #0
 800f0b6:	d00c      	beq.n	800f0d2 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800f0b8:	68fb      	ldr	r3, [r7, #12]
 800f0ba:	f003 0301 	and.w	r3, r3, #1
 800f0be:	2b00      	cmp	r3, #0
 800f0c0:	d007      	beq.n	800f0d2 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800f0c2:	687b      	ldr	r3, [r7, #4]
 800f0c4:	681b      	ldr	r3, [r3, #0]
 800f0c6:	f06f 0201 	mvn.w	r2, #1
 800f0ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800f0cc:	6878      	ldr	r0, [r7, #4]
 800f0ce:	f7f2 f95b 	bl	8001388 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800f0d2:	68bb      	ldr	r3, [r7, #8]
 800f0d4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f0d8:	2b00      	cmp	r3, #0
 800f0da:	d00c      	beq.n	800f0f6 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800f0dc:	68fb      	ldr	r3, [r7, #12]
 800f0de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f0e2:	2b00      	cmp	r3, #0
 800f0e4:	d007      	beq.n	800f0f6 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800f0e6:	687b      	ldr	r3, [r7, #4]
 800f0e8:	681b      	ldr	r3, [r3, #0]
 800f0ea:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800f0ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800f0f0:	6878      	ldr	r0, [r7, #4]
 800f0f2:	f000 fae3 	bl	800f6bc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800f0f6:	68bb      	ldr	r3, [r7, #8]
 800f0f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f0fc:	2b00      	cmp	r3, #0
 800f0fe:	d00c      	beq.n	800f11a <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800f100:	68fb      	ldr	r3, [r7, #12]
 800f102:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f106:	2b00      	cmp	r3, #0
 800f108:	d007      	beq.n	800f11a <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800f10a:	687b      	ldr	r3, [r7, #4]
 800f10c:	681b      	ldr	r3, [r3, #0]
 800f10e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800f112:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800f114:	6878      	ldr	r0, [r7, #4]
 800f116:	f000 f8fb 	bl	800f310 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800f11a:	68bb      	ldr	r3, [r7, #8]
 800f11c:	f003 0320 	and.w	r3, r3, #32
 800f120:	2b00      	cmp	r3, #0
 800f122:	d00c      	beq.n	800f13e <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800f124:	68fb      	ldr	r3, [r7, #12]
 800f126:	f003 0320 	and.w	r3, r3, #32
 800f12a:	2b00      	cmp	r3, #0
 800f12c:	d007      	beq.n	800f13e <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800f12e:	687b      	ldr	r3, [r7, #4]
 800f130:	681b      	ldr	r3, [r3, #0]
 800f132:	f06f 0220 	mvn.w	r2, #32
 800f136:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800f138:	6878      	ldr	r0, [r7, #4]
 800f13a:	f000 fab5 	bl	800f6a8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800f13e:	bf00      	nop
 800f140:	3710      	adds	r7, #16
 800f142:	46bd      	mov	sp, r7
 800f144:	bd80      	pop	{r7, pc}

0800f146 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800f146:	b580      	push	{r7, lr}
 800f148:	b084      	sub	sp, #16
 800f14a:	af00      	add	r7, sp, #0
 800f14c:	6078      	str	r0, [r7, #4]
 800f14e:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800f150:	2300      	movs	r3, #0
 800f152:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800f154:	687b      	ldr	r3, [r7, #4]
 800f156:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800f15a:	2b01      	cmp	r3, #1
 800f15c:	d101      	bne.n	800f162 <HAL_TIM_ConfigClockSource+0x1c>
 800f15e:	2302      	movs	r3, #2
 800f160:	e0b4      	b.n	800f2cc <HAL_TIM_ConfigClockSource+0x186>
 800f162:	687b      	ldr	r3, [r7, #4]
 800f164:	2201      	movs	r2, #1
 800f166:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800f16a:	687b      	ldr	r3, [r7, #4]
 800f16c:	2202      	movs	r2, #2
 800f16e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800f172:	687b      	ldr	r3, [r7, #4]
 800f174:	681b      	ldr	r3, [r3, #0]
 800f176:	689b      	ldr	r3, [r3, #8]
 800f178:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800f17a:	68bb      	ldr	r3, [r7, #8]
 800f17c:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800f180:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800f182:	68bb      	ldr	r3, [r7, #8]
 800f184:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800f188:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800f18a:	687b      	ldr	r3, [r7, #4]
 800f18c:	681b      	ldr	r3, [r3, #0]
 800f18e:	68ba      	ldr	r2, [r7, #8]
 800f190:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800f192:	683b      	ldr	r3, [r7, #0]
 800f194:	681b      	ldr	r3, [r3, #0]
 800f196:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800f19a:	d03e      	beq.n	800f21a <HAL_TIM_ConfigClockSource+0xd4>
 800f19c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800f1a0:	f200 8087 	bhi.w	800f2b2 <HAL_TIM_ConfigClockSource+0x16c>
 800f1a4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800f1a8:	f000 8086 	beq.w	800f2b8 <HAL_TIM_ConfigClockSource+0x172>
 800f1ac:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800f1b0:	d87f      	bhi.n	800f2b2 <HAL_TIM_ConfigClockSource+0x16c>
 800f1b2:	2b70      	cmp	r3, #112	@ 0x70
 800f1b4:	d01a      	beq.n	800f1ec <HAL_TIM_ConfigClockSource+0xa6>
 800f1b6:	2b70      	cmp	r3, #112	@ 0x70
 800f1b8:	d87b      	bhi.n	800f2b2 <HAL_TIM_ConfigClockSource+0x16c>
 800f1ba:	2b60      	cmp	r3, #96	@ 0x60
 800f1bc:	d050      	beq.n	800f260 <HAL_TIM_ConfigClockSource+0x11a>
 800f1be:	2b60      	cmp	r3, #96	@ 0x60
 800f1c0:	d877      	bhi.n	800f2b2 <HAL_TIM_ConfigClockSource+0x16c>
 800f1c2:	2b50      	cmp	r3, #80	@ 0x50
 800f1c4:	d03c      	beq.n	800f240 <HAL_TIM_ConfigClockSource+0xfa>
 800f1c6:	2b50      	cmp	r3, #80	@ 0x50
 800f1c8:	d873      	bhi.n	800f2b2 <HAL_TIM_ConfigClockSource+0x16c>
 800f1ca:	2b40      	cmp	r3, #64	@ 0x40
 800f1cc:	d058      	beq.n	800f280 <HAL_TIM_ConfigClockSource+0x13a>
 800f1ce:	2b40      	cmp	r3, #64	@ 0x40
 800f1d0:	d86f      	bhi.n	800f2b2 <HAL_TIM_ConfigClockSource+0x16c>
 800f1d2:	2b30      	cmp	r3, #48	@ 0x30
 800f1d4:	d064      	beq.n	800f2a0 <HAL_TIM_ConfigClockSource+0x15a>
 800f1d6:	2b30      	cmp	r3, #48	@ 0x30
 800f1d8:	d86b      	bhi.n	800f2b2 <HAL_TIM_ConfigClockSource+0x16c>
 800f1da:	2b20      	cmp	r3, #32
 800f1dc:	d060      	beq.n	800f2a0 <HAL_TIM_ConfigClockSource+0x15a>
 800f1de:	2b20      	cmp	r3, #32
 800f1e0:	d867      	bhi.n	800f2b2 <HAL_TIM_ConfigClockSource+0x16c>
 800f1e2:	2b00      	cmp	r3, #0
 800f1e4:	d05c      	beq.n	800f2a0 <HAL_TIM_ConfigClockSource+0x15a>
 800f1e6:	2b10      	cmp	r3, #16
 800f1e8:	d05a      	beq.n	800f2a0 <HAL_TIM_ConfigClockSource+0x15a>
 800f1ea:	e062      	b.n	800f2b2 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800f1ec:	687b      	ldr	r3, [r7, #4]
 800f1ee:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800f1f0:	683b      	ldr	r3, [r7, #0]
 800f1f2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800f1f4:	683b      	ldr	r3, [r7, #0]
 800f1f6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800f1f8:	683b      	ldr	r3, [r7, #0]
 800f1fa:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800f1fc:	f000 f9b8 	bl	800f570 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800f200:	687b      	ldr	r3, [r7, #4]
 800f202:	681b      	ldr	r3, [r3, #0]
 800f204:	689b      	ldr	r3, [r3, #8]
 800f206:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800f208:	68bb      	ldr	r3, [r7, #8]
 800f20a:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800f20e:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800f210:	687b      	ldr	r3, [r7, #4]
 800f212:	681b      	ldr	r3, [r3, #0]
 800f214:	68ba      	ldr	r2, [r7, #8]
 800f216:	609a      	str	r2, [r3, #8]
      break;
 800f218:	e04f      	b.n	800f2ba <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800f21a:	687b      	ldr	r3, [r7, #4]
 800f21c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800f21e:	683b      	ldr	r3, [r7, #0]
 800f220:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800f222:	683b      	ldr	r3, [r7, #0]
 800f224:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800f226:	683b      	ldr	r3, [r7, #0]
 800f228:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800f22a:	f000 f9a1 	bl	800f570 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800f22e:	687b      	ldr	r3, [r7, #4]
 800f230:	681b      	ldr	r3, [r3, #0]
 800f232:	689a      	ldr	r2, [r3, #8]
 800f234:	687b      	ldr	r3, [r7, #4]
 800f236:	681b      	ldr	r3, [r3, #0]
 800f238:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800f23c:	609a      	str	r2, [r3, #8]
      break;
 800f23e:	e03c      	b.n	800f2ba <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800f240:	687b      	ldr	r3, [r7, #4]
 800f242:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800f244:	683b      	ldr	r3, [r7, #0]
 800f246:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800f248:	683b      	ldr	r3, [r7, #0]
 800f24a:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800f24c:	461a      	mov	r2, r3
 800f24e:	f000 f915 	bl	800f47c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800f252:	687b      	ldr	r3, [r7, #4]
 800f254:	681b      	ldr	r3, [r3, #0]
 800f256:	2150      	movs	r1, #80	@ 0x50
 800f258:	4618      	mov	r0, r3
 800f25a:	f000 f96e 	bl	800f53a <TIM_ITRx_SetConfig>
      break;
 800f25e:	e02c      	b.n	800f2ba <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800f260:	687b      	ldr	r3, [r7, #4]
 800f262:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800f264:	683b      	ldr	r3, [r7, #0]
 800f266:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800f268:	683b      	ldr	r3, [r7, #0]
 800f26a:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800f26c:	461a      	mov	r2, r3
 800f26e:	f000 f934 	bl	800f4da <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800f272:	687b      	ldr	r3, [r7, #4]
 800f274:	681b      	ldr	r3, [r3, #0]
 800f276:	2160      	movs	r1, #96	@ 0x60
 800f278:	4618      	mov	r0, r3
 800f27a:	f000 f95e 	bl	800f53a <TIM_ITRx_SetConfig>
      break;
 800f27e:	e01c      	b.n	800f2ba <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800f280:	687b      	ldr	r3, [r7, #4]
 800f282:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800f284:	683b      	ldr	r3, [r7, #0]
 800f286:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800f288:	683b      	ldr	r3, [r7, #0]
 800f28a:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800f28c:	461a      	mov	r2, r3
 800f28e:	f000 f8f5 	bl	800f47c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800f292:	687b      	ldr	r3, [r7, #4]
 800f294:	681b      	ldr	r3, [r3, #0]
 800f296:	2140      	movs	r1, #64	@ 0x40
 800f298:	4618      	mov	r0, r3
 800f29a:	f000 f94e 	bl	800f53a <TIM_ITRx_SetConfig>
      break;
 800f29e:	e00c      	b.n	800f2ba <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800f2a0:	687b      	ldr	r3, [r7, #4]
 800f2a2:	681a      	ldr	r2, [r3, #0]
 800f2a4:	683b      	ldr	r3, [r7, #0]
 800f2a6:	681b      	ldr	r3, [r3, #0]
 800f2a8:	4619      	mov	r1, r3
 800f2aa:	4610      	mov	r0, r2
 800f2ac:	f000 f945 	bl	800f53a <TIM_ITRx_SetConfig>
      break;
 800f2b0:	e003      	b.n	800f2ba <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800f2b2:	2301      	movs	r3, #1
 800f2b4:	73fb      	strb	r3, [r7, #15]
      break;
 800f2b6:	e000      	b.n	800f2ba <HAL_TIM_ConfigClockSource+0x174>
      break;
 800f2b8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800f2ba:	687b      	ldr	r3, [r7, #4]
 800f2bc:	2201      	movs	r2, #1
 800f2be:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800f2c2:	687b      	ldr	r3, [r7, #4]
 800f2c4:	2200      	movs	r2, #0
 800f2c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800f2ca:	7bfb      	ldrb	r3, [r7, #15]
}
 800f2cc:	4618      	mov	r0, r3
 800f2ce:	3710      	adds	r7, #16
 800f2d0:	46bd      	mov	sp, r7
 800f2d2:	bd80      	pop	{r7, pc}

0800f2d4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800f2d4:	b480      	push	{r7}
 800f2d6:	b083      	sub	sp, #12
 800f2d8:	af00      	add	r7, sp, #0
 800f2da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800f2dc:	bf00      	nop
 800f2de:	370c      	adds	r7, #12
 800f2e0:	46bd      	mov	sp, r7
 800f2e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2e6:	4770      	bx	lr

0800f2e8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800f2e8:	b480      	push	{r7}
 800f2ea:	b083      	sub	sp, #12
 800f2ec:	af00      	add	r7, sp, #0
 800f2ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800f2f0:	bf00      	nop
 800f2f2:	370c      	adds	r7, #12
 800f2f4:	46bd      	mov	sp, r7
 800f2f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2fa:	4770      	bx	lr

0800f2fc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800f2fc:	b480      	push	{r7}
 800f2fe:	b083      	sub	sp, #12
 800f300:	af00      	add	r7, sp, #0
 800f302:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800f304:	bf00      	nop
 800f306:	370c      	adds	r7, #12
 800f308:	46bd      	mov	sp, r7
 800f30a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f30e:	4770      	bx	lr

0800f310 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800f310:	b480      	push	{r7}
 800f312:	b083      	sub	sp, #12
 800f314:	af00      	add	r7, sp, #0
 800f316:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800f318:	bf00      	nop
 800f31a:	370c      	adds	r7, #12
 800f31c:	46bd      	mov	sp, r7
 800f31e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f322:	4770      	bx	lr

0800f324 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800f324:	b480      	push	{r7}
 800f326:	b085      	sub	sp, #20
 800f328:	af00      	add	r7, sp, #0
 800f32a:	6078      	str	r0, [r7, #4]
 800f32c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800f32e:	687b      	ldr	r3, [r7, #4]
 800f330:	681b      	ldr	r3, [r3, #0]
 800f332:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800f334:	687b      	ldr	r3, [r7, #4]
 800f336:	4a46      	ldr	r2, [pc, #280]	@ (800f450 <TIM_Base_SetConfig+0x12c>)
 800f338:	4293      	cmp	r3, r2
 800f33a:	d013      	beq.n	800f364 <TIM_Base_SetConfig+0x40>
 800f33c:	687b      	ldr	r3, [r7, #4]
 800f33e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f342:	d00f      	beq.n	800f364 <TIM_Base_SetConfig+0x40>
 800f344:	687b      	ldr	r3, [r7, #4]
 800f346:	4a43      	ldr	r2, [pc, #268]	@ (800f454 <TIM_Base_SetConfig+0x130>)
 800f348:	4293      	cmp	r3, r2
 800f34a:	d00b      	beq.n	800f364 <TIM_Base_SetConfig+0x40>
 800f34c:	687b      	ldr	r3, [r7, #4]
 800f34e:	4a42      	ldr	r2, [pc, #264]	@ (800f458 <TIM_Base_SetConfig+0x134>)
 800f350:	4293      	cmp	r3, r2
 800f352:	d007      	beq.n	800f364 <TIM_Base_SetConfig+0x40>
 800f354:	687b      	ldr	r3, [r7, #4]
 800f356:	4a41      	ldr	r2, [pc, #260]	@ (800f45c <TIM_Base_SetConfig+0x138>)
 800f358:	4293      	cmp	r3, r2
 800f35a:	d003      	beq.n	800f364 <TIM_Base_SetConfig+0x40>
 800f35c:	687b      	ldr	r3, [r7, #4]
 800f35e:	4a40      	ldr	r2, [pc, #256]	@ (800f460 <TIM_Base_SetConfig+0x13c>)
 800f360:	4293      	cmp	r3, r2
 800f362:	d108      	bne.n	800f376 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800f364:	68fb      	ldr	r3, [r7, #12]
 800f366:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800f36a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800f36c:	683b      	ldr	r3, [r7, #0]
 800f36e:	685b      	ldr	r3, [r3, #4]
 800f370:	68fa      	ldr	r2, [r7, #12]
 800f372:	4313      	orrs	r3, r2
 800f374:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800f376:	687b      	ldr	r3, [r7, #4]
 800f378:	4a35      	ldr	r2, [pc, #212]	@ (800f450 <TIM_Base_SetConfig+0x12c>)
 800f37a:	4293      	cmp	r3, r2
 800f37c:	d02b      	beq.n	800f3d6 <TIM_Base_SetConfig+0xb2>
 800f37e:	687b      	ldr	r3, [r7, #4]
 800f380:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f384:	d027      	beq.n	800f3d6 <TIM_Base_SetConfig+0xb2>
 800f386:	687b      	ldr	r3, [r7, #4]
 800f388:	4a32      	ldr	r2, [pc, #200]	@ (800f454 <TIM_Base_SetConfig+0x130>)
 800f38a:	4293      	cmp	r3, r2
 800f38c:	d023      	beq.n	800f3d6 <TIM_Base_SetConfig+0xb2>
 800f38e:	687b      	ldr	r3, [r7, #4]
 800f390:	4a31      	ldr	r2, [pc, #196]	@ (800f458 <TIM_Base_SetConfig+0x134>)
 800f392:	4293      	cmp	r3, r2
 800f394:	d01f      	beq.n	800f3d6 <TIM_Base_SetConfig+0xb2>
 800f396:	687b      	ldr	r3, [r7, #4]
 800f398:	4a30      	ldr	r2, [pc, #192]	@ (800f45c <TIM_Base_SetConfig+0x138>)
 800f39a:	4293      	cmp	r3, r2
 800f39c:	d01b      	beq.n	800f3d6 <TIM_Base_SetConfig+0xb2>
 800f39e:	687b      	ldr	r3, [r7, #4]
 800f3a0:	4a2f      	ldr	r2, [pc, #188]	@ (800f460 <TIM_Base_SetConfig+0x13c>)
 800f3a2:	4293      	cmp	r3, r2
 800f3a4:	d017      	beq.n	800f3d6 <TIM_Base_SetConfig+0xb2>
 800f3a6:	687b      	ldr	r3, [r7, #4]
 800f3a8:	4a2e      	ldr	r2, [pc, #184]	@ (800f464 <TIM_Base_SetConfig+0x140>)
 800f3aa:	4293      	cmp	r3, r2
 800f3ac:	d013      	beq.n	800f3d6 <TIM_Base_SetConfig+0xb2>
 800f3ae:	687b      	ldr	r3, [r7, #4]
 800f3b0:	4a2d      	ldr	r2, [pc, #180]	@ (800f468 <TIM_Base_SetConfig+0x144>)
 800f3b2:	4293      	cmp	r3, r2
 800f3b4:	d00f      	beq.n	800f3d6 <TIM_Base_SetConfig+0xb2>
 800f3b6:	687b      	ldr	r3, [r7, #4]
 800f3b8:	4a2c      	ldr	r2, [pc, #176]	@ (800f46c <TIM_Base_SetConfig+0x148>)
 800f3ba:	4293      	cmp	r3, r2
 800f3bc:	d00b      	beq.n	800f3d6 <TIM_Base_SetConfig+0xb2>
 800f3be:	687b      	ldr	r3, [r7, #4]
 800f3c0:	4a2b      	ldr	r2, [pc, #172]	@ (800f470 <TIM_Base_SetConfig+0x14c>)
 800f3c2:	4293      	cmp	r3, r2
 800f3c4:	d007      	beq.n	800f3d6 <TIM_Base_SetConfig+0xb2>
 800f3c6:	687b      	ldr	r3, [r7, #4]
 800f3c8:	4a2a      	ldr	r2, [pc, #168]	@ (800f474 <TIM_Base_SetConfig+0x150>)
 800f3ca:	4293      	cmp	r3, r2
 800f3cc:	d003      	beq.n	800f3d6 <TIM_Base_SetConfig+0xb2>
 800f3ce:	687b      	ldr	r3, [r7, #4]
 800f3d0:	4a29      	ldr	r2, [pc, #164]	@ (800f478 <TIM_Base_SetConfig+0x154>)
 800f3d2:	4293      	cmp	r3, r2
 800f3d4:	d108      	bne.n	800f3e8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800f3d6:	68fb      	ldr	r3, [r7, #12]
 800f3d8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800f3dc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800f3de:	683b      	ldr	r3, [r7, #0]
 800f3e0:	68db      	ldr	r3, [r3, #12]
 800f3e2:	68fa      	ldr	r2, [r7, #12]
 800f3e4:	4313      	orrs	r3, r2
 800f3e6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800f3e8:	68fb      	ldr	r3, [r7, #12]
 800f3ea:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800f3ee:	683b      	ldr	r3, [r7, #0]
 800f3f0:	695b      	ldr	r3, [r3, #20]
 800f3f2:	4313      	orrs	r3, r2
 800f3f4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800f3f6:	687b      	ldr	r3, [r7, #4]
 800f3f8:	68fa      	ldr	r2, [r7, #12]
 800f3fa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800f3fc:	683b      	ldr	r3, [r7, #0]
 800f3fe:	689a      	ldr	r2, [r3, #8]
 800f400:	687b      	ldr	r3, [r7, #4]
 800f402:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800f404:	683b      	ldr	r3, [r7, #0]
 800f406:	681a      	ldr	r2, [r3, #0]
 800f408:	687b      	ldr	r3, [r7, #4]
 800f40a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800f40c:	687b      	ldr	r3, [r7, #4]
 800f40e:	4a10      	ldr	r2, [pc, #64]	@ (800f450 <TIM_Base_SetConfig+0x12c>)
 800f410:	4293      	cmp	r3, r2
 800f412:	d003      	beq.n	800f41c <TIM_Base_SetConfig+0xf8>
 800f414:	687b      	ldr	r3, [r7, #4]
 800f416:	4a12      	ldr	r2, [pc, #72]	@ (800f460 <TIM_Base_SetConfig+0x13c>)
 800f418:	4293      	cmp	r3, r2
 800f41a:	d103      	bne.n	800f424 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800f41c:	683b      	ldr	r3, [r7, #0]
 800f41e:	691a      	ldr	r2, [r3, #16]
 800f420:	687b      	ldr	r3, [r7, #4]
 800f422:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800f424:	687b      	ldr	r3, [r7, #4]
 800f426:	2201      	movs	r2, #1
 800f428:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800f42a:	687b      	ldr	r3, [r7, #4]
 800f42c:	691b      	ldr	r3, [r3, #16]
 800f42e:	f003 0301 	and.w	r3, r3, #1
 800f432:	2b01      	cmp	r3, #1
 800f434:	d105      	bne.n	800f442 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800f436:	687b      	ldr	r3, [r7, #4]
 800f438:	691b      	ldr	r3, [r3, #16]
 800f43a:	f023 0201 	bic.w	r2, r3, #1
 800f43e:	687b      	ldr	r3, [r7, #4]
 800f440:	611a      	str	r2, [r3, #16]
  }
}
 800f442:	bf00      	nop
 800f444:	3714      	adds	r7, #20
 800f446:	46bd      	mov	sp, r7
 800f448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f44c:	4770      	bx	lr
 800f44e:	bf00      	nop
 800f450:	40010000 	.word	0x40010000
 800f454:	40000400 	.word	0x40000400
 800f458:	40000800 	.word	0x40000800
 800f45c:	40000c00 	.word	0x40000c00
 800f460:	40010400 	.word	0x40010400
 800f464:	40014000 	.word	0x40014000
 800f468:	40014400 	.word	0x40014400
 800f46c:	40014800 	.word	0x40014800
 800f470:	40001800 	.word	0x40001800
 800f474:	40001c00 	.word	0x40001c00
 800f478:	40002000 	.word	0x40002000

0800f47c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800f47c:	b480      	push	{r7}
 800f47e:	b087      	sub	sp, #28
 800f480:	af00      	add	r7, sp, #0
 800f482:	60f8      	str	r0, [r7, #12]
 800f484:	60b9      	str	r1, [r7, #8]
 800f486:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800f488:	68fb      	ldr	r3, [r7, #12]
 800f48a:	6a1b      	ldr	r3, [r3, #32]
 800f48c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800f48e:	68fb      	ldr	r3, [r7, #12]
 800f490:	6a1b      	ldr	r3, [r3, #32]
 800f492:	f023 0201 	bic.w	r2, r3, #1
 800f496:	68fb      	ldr	r3, [r7, #12]
 800f498:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800f49a:	68fb      	ldr	r3, [r7, #12]
 800f49c:	699b      	ldr	r3, [r3, #24]
 800f49e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800f4a0:	693b      	ldr	r3, [r7, #16]
 800f4a2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800f4a6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800f4a8:	687b      	ldr	r3, [r7, #4]
 800f4aa:	011b      	lsls	r3, r3, #4
 800f4ac:	693a      	ldr	r2, [r7, #16]
 800f4ae:	4313      	orrs	r3, r2
 800f4b0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800f4b2:	697b      	ldr	r3, [r7, #20]
 800f4b4:	f023 030a 	bic.w	r3, r3, #10
 800f4b8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800f4ba:	697a      	ldr	r2, [r7, #20]
 800f4bc:	68bb      	ldr	r3, [r7, #8]
 800f4be:	4313      	orrs	r3, r2
 800f4c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800f4c2:	68fb      	ldr	r3, [r7, #12]
 800f4c4:	693a      	ldr	r2, [r7, #16]
 800f4c6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800f4c8:	68fb      	ldr	r3, [r7, #12]
 800f4ca:	697a      	ldr	r2, [r7, #20]
 800f4cc:	621a      	str	r2, [r3, #32]
}
 800f4ce:	bf00      	nop
 800f4d0:	371c      	adds	r7, #28
 800f4d2:	46bd      	mov	sp, r7
 800f4d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4d8:	4770      	bx	lr

0800f4da <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800f4da:	b480      	push	{r7}
 800f4dc:	b087      	sub	sp, #28
 800f4de:	af00      	add	r7, sp, #0
 800f4e0:	60f8      	str	r0, [r7, #12]
 800f4e2:	60b9      	str	r1, [r7, #8]
 800f4e4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800f4e6:	68fb      	ldr	r3, [r7, #12]
 800f4e8:	6a1b      	ldr	r3, [r3, #32]
 800f4ea:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800f4ec:	68fb      	ldr	r3, [r7, #12]
 800f4ee:	6a1b      	ldr	r3, [r3, #32]
 800f4f0:	f023 0210 	bic.w	r2, r3, #16
 800f4f4:	68fb      	ldr	r3, [r7, #12]
 800f4f6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800f4f8:	68fb      	ldr	r3, [r7, #12]
 800f4fa:	699b      	ldr	r3, [r3, #24]
 800f4fc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800f4fe:	693b      	ldr	r3, [r7, #16]
 800f500:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800f504:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800f506:	687b      	ldr	r3, [r7, #4]
 800f508:	031b      	lsls	r3, r3, #12
 800f50a:	693a      	ldr	r2, [r7, #16]
 800f50c:	4313      	orrs	r3, r2
 800f50e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800f510:	697b      	ldr	r3, [r7, #20]
 800f512:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800f516:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800f518:	68bb      	ldr	r3, [r7, #8]
 800f51a:	011b      	lsls	r3, r3, #4
 800f51c:	697a      	ldr	r2, [r7, #20]
 800f51e:	4313      	orrs	r3, r2
 800f520:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800f522:	68fb      	ldr	r3, [r7, #12]
 800f524:	693a      	ldr	r2, [r7, #16]
 800f526:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800f528:	68fb      	ldr	r3, [r7, #12]
 800f52a:	697a      	ldr	r2, [r7, #20]
 800f52c:	621a      	str	r2, [r3, #32]
}
 800f52e:	bf00      	nop
 800f530:	371c      	adds	r7, #28
 800f532:	46bd      	mov	sp, r7
 800f534:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f538:	4770      	bx	lr

0800f53a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800f53a:	b480      	push	{r7}
 800f53c:	b085      	sub	sp, #20
 800f53e:	af00      	add	r7, sp, #0
 800f540:	6078      	str	r0, [r7, #4]
 800f542:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800f544:	687b      	ldr	r3, [r7, #4]
 800f546:	689b      	ldr	r3, [r3, #8]
 800f548:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800f54a:	68fb      	ldr	r3, [r7, #12]
 800f54c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800f550:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800f552:	683a      	ldr	r2, [r7, #0]
 800f554:	68fb      	ldr	r3, [r7, #12]
 800f556:	4313      	orrs	r3, r2
 800f558:	f043 0307 	orr.w	r3, r3, #7
 800f55c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800f55e:	687b      	ldr	r3, [r7, #4]
 800f560:	68fa      	ldr	r2, [r7, #12]
 800f562:	609a      	str	r2, [r3, #8]
}
 800f564:	bf00      	nop
 800f566:	3714      	adds	r7, #20
 800f568:	46bd      	mov	sp, r7
 800f56a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f56e:	4770      	bx	lr

0800f570 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800f570:	b480      	push	{r7}
 800f572:	b087      	sub	sp, #28
 800f574:	af00      	add	r7, sp, #0
 800f576:	60f8      	str	r0, [r7, #12]
 800f578:	60b9      	str	r1, [r7, #8]
 800f57a:	607a      	str	r2, [r7, #4]
 800f57c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800f57e:	68fb      	ldr	r3, [r7, #12]
 800f580:	689b      	ldr	r3, [r3, #8]
 800f582:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800f584:	697b      	ldr	r3, [r7, #20]
 800f586:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800f58a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800f58c:	683b      	ldr	r3, [r7, #0]
 800f58e:	021a      	lsls	r2, r3, #8
 800f590:	687b      	ldr	r3, [r7, #4]
 800f592:	431a      	orrs	r2, r3
 800f594:	68bb      	ldr	r3, [r7, #8]
 800f596:	4313      	orrs	r3, r2
 800f598:	697a      	ldr	r2, [r7, #20]
 800f59a:	4313      	orrs	r3, r2
 800f59c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800f59e:	68fb      	ldr	r3, [r7, #12]
 800f5a0:	697a      	ldr	r2, [r7, #20]
 800f5a2:	609a      	str	r2, [r3, #8]
}
 800f5a4:	bf00      	nop
 800f5a6:	371c      	adds	r7, #28
 800f5a8:	46bd      	mov	sp, r7
 800f5aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5ae:	4770      	bx	lr

0800f5b0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800f5b0:	b480      	push	{r7}
 800f5b2:	b085      	sub	sp, #20
 800f5b4:	af00      	add	r7, sp, #0
 800f5b6:	6078      	str	r0, [r7, #4]
 800f5b8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800f5ba:	687b      	ldr	r3, [r7, #4]
 800f5bc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800f5c0:	2b01      	cmp	r3, #1
 800f5c2:	d101      	bne.n	800f5c8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800f5c4:	2302      	movs	r3, #2
 800f5c6:	e05a      	b.n	800f67e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800f5c8:	687b      	ldr	r3, [r7, #4]
 800f5ca:	2201      	movs	r2, #1
 800f5cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f5d0:	687b      	ldr	r3, [r7, #4]
 800f5d2:	2202      	movs	r2, #2
 800f5d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800f5d8:	687b      	ldr	r3, [r7, #4]
 800f5da:	681b      	ldr	r3, [r3, #0]
 800f5dc:	685b      	ldr	r3, [r3, #4]
 800f5de:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800f5e0:	687b      	ldr	r3, [r7, #4]
 800f5e2:	681b      	ldr	r3, [r3, #0]
 800f5e4:	689b      	ldr	r3, [r3, #8]
 800f5e6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800f5e8:	68fb      	ldr	r3, [r7, #12]
 800f5ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800f5ee:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800f5f0:	683b      	ldr	r3, [r7, #0]
 800f5f2:	681b      	ldr	r3, [r3, #0]
 800f5f4:	68fa      	ldr	r2, [r7, #12]
 800f5f6:	4313      	orrs	r3, r2
 800f5f8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800f5fa:	687b      	ldr	r3, [r7, #4]
 800f5fc:	681b      	ldr	r3, [r3, #0]
 800f5fe:	68fa      	ldr	r2, [r7, #12]
 800f600:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f602:	687b      	ldr	r3, [r7, #4]
 800f604:	681b      	ldr	r3, [r3, #0]
 800f606:	4a21      	ldr	r2, [pc, #132]	@ (800f68c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800f608:	4293      	cmp	r3, r2
 800f60a:	d022      	beq.n	800f652 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800f60c:	687b      	ldr	r3, [r7, #4]
 800f60e:	681b      	ldr	r3, [r3, #0]
 800f610:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f614:	d01d      	beq.n	800f652 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800f616:	687b      	ldr	r3, [r7, #4]
 800f618:	681b      	ldr	r3, [r3, #0]
 800f61a:	4a1d      	ldr	r2, [pc, #116]	@ (800f690 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800f61c:	4293      	cmp	r3, r2
 800f61e:	d018      	beq.n	800f652 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800f620:	687b      	ldr	r3, [r7, #4]
 800f622:	681b      	ldr	r3, [r3, #0]
 800f624:	4a1b      	ldr	r2, [pc, #108]	@ (800f694 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800f626:	4293      	cmp	r3, r2
 800f628:	d013      	beq.n	800f652 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800f62a:	687b      	ldr	r3, [r7, #4]
 800f62c:	681b      	ldr	r3, [r3, #0]
 800f62e:	4a1a      	ldr	r2, [pc, #104]	@ (800f698 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800f630:	4293      	cmp	r3, r2
 800f632:	d00e      	beq.n	800f652 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800f634:	687b      	ldr	r3, [r7, #4]
 800f636:	681b      	ldr	r3, [r3, #0]
 800f638:	4a18      	ldr	r2, [pc, #96]	@ (800f69c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800f63a:	4293      	cmp	r3, r2
 800f63c:	d009      	beq.n	800f652 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800f63e:	687b      	ldr	r3, [r7, #4]
 800f640:	681b      	ldr	r3, [r3, #0]
 800f642:	4a17      	ldr	r2, [pc, #92]	@ (800f6a0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800f644:	4293      	cmp	r3, r2
 800f646:	d004      	beq.n	800f652 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800f648:	687b      	ldr	r3, [r7, #4]
 800f64a:	681b      	ldr	r3, [r3, #0]
 800f64c:	4a15      	ldr	r2, [pc, #84]	@ (800f6a4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800f64e:	4293      	cmp	r3, r2
 800f650:	d10c      	bne.n	800f66c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800f652:	68bb      	ldr	r3, [r7, #8]
 800f654:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800f658:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800f65a:	683b      	ldr	r3, [r7, #0]
 800f65c:	685b      	ldr	r3, [r3, #4]
 800f65e:	68ba      	ldr	r2, [r7, #8]
 800f660:	4313      	orrs	r3, r2
 800f662:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800f664:	687b      	ldr	r3, [r7, #4]
 800f666:	681b      	ldr	r3, [r3, #0]
 800f668:	68ba      	ldr	r2, [r7, #8]
 800f66a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800f66c:	687b      	ldr	r3, [r7, #4]
 800f66e:	2201      	movs	r2, #1
 800f670:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800f674:	687b      	ldr	r3, [r7, #4]
 800f676:	2200      	movs	r2, #0
 800f678:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800f67c:	2300      	movs	r3, #0
}
 800f67e:	4618      	mov	r0, r3
 800f680:	3714      	adds	r7, #20
 800f682:	46bd      	mov	sp, r7
 800f684:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f688:	4770      	bx	lr
 800f68a:	bf00      	nop
 800f68c:	40010000 	.word	0x40010000
 800f690:	40000400 	.word	0x40000400
 800f694:	40000800 	.word	0x40000800
 800f698:	40000c00 	.word	0x40000c00
 800f69c:	40010400 	.word	0x40010400
 800f6a0:	40014000 	.word	0x40014000
 800f6a4:	40001800 	.word	0x40001800

0800f6a8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800f6a8:	b480      	push	{r7}
 800f6aa:	b083      	sub	sp, #12
 800f6ac:	af00      	add	r7, sp, #0
 800f6ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800f6b0:	bf00      	nop
 800f6b2:	370c      	adds	r7, #12
 800f6b4:	46bd      	mov	sp, r7
 800f6b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6ba:	4770      	bx	lr

0800f6bc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800f6bc:	b480      	push	{r7}
 800f6be:	b083      	sub	sp, #12
 800f6c0:	af00      	add	r7, sp, #0
 800f6c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800f6c4:	bf00      	nop
 800f6c6:	370c      	adds	r7, #12
 800f6c8:	46bd      	mov	sp, r7
 800f6ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6ce:	4770      	bx	lr

0800f6d0 <memset>:
 800f6d0:	4402      	add	r2, r0
 800f6d2:	4603      	mov	r3, r0
 800f6d4:	4293      	cmp	r3, r2
 800f6d6:	d100      	bne.n	800f6da <memset+0xa>
 800f6d8:	4770      	bx	lr
 800f6da:	f803 1b01 	strb.w	r1, [r3], #1
 800f6de:	e7f9      	b.n	800f6d4 <memset+0x4>

0800f6e0 <__errno>:
 800f6e0:	4b01      	ldr	r3, [pc, #4]	@ (800f6e8 <__errno+0x8>)
 800f6e2:	6818      	ldr	r0, [r3, #0]
 800f6e4:	4770      	bx	lr
 800f6e6:	bf00      	nop
 800f6e8:	20000010 	.word	0x20000010

0800f6ec <__libc_init_array>:
 800f6ec:	b570      	push	{r4, r5, r6, lr}
 800f6ee:	4d0d      	ldr	r5, [pc, #52]	@ (800f724 <__libc_init_array+0x38>)
 800f6f0:	4c0d      	ldr	r4, [pc, #52]	@ (800f728 <__libc_init_array+0x3c>)
 800f6f2:	1b64      	subs	r4, r4, r5
 800f6f4:	10a4      	asrs	r4, r4, #2
 800f6f6:	2600      	movs	r6, #0
 800f6f8:	42a6      	cmp	r6, r4
 800f6fa:	d109      	bne.n	800f710 <__libc_init_array+0x24>
 800f6fc:	4d0b      	ldr	r5, [pc, #44]	@ (800f72c <__libc_init_array+0x40>)
 800f6fe:	4c0c      	ldr	r4, [pc, #48]	@ (800f730 <__libc_init_array+0x44>)
 800f700:	f000 fd06 	bl	8010110 <_init>
 800f704:	1b64      	subs	r4, r4, r5
 800f706:	10a4      	asrs	r4, r4, #2
 800f708:	2600      	movs	r6, #0
 800f70a:	42a6      	cmp	r6, r4
 800f70c:	d105      	bne.n	800f71a <__libc_init_array+0x2e>
 800f70e:	bd70      	pop	{r4, r5, r6, pc}
 800f710:	f855 3b04 	ldr.w	r3, [r5], #4
 800f714:	4798      	blx	r3
 800f716:	3601      	adds	r6, #1
 800f718:	e7ee      	b.n	800f6f8 <__libc_init_array+0xc>
 800f71a:	f855 3b04 	ldr.w	r3, [r5], #4
 800f71e:	4798      	blx	r3
 800f720:	3601      	adds	r6, #1
 800f722:	e7f2      	b.n	800f70a <__libc_init_array+0x1e>
 800f724:	08010164 	.word	0x08010164
 800f728:	08010164 	.word	0x08010164
 800f72c:	08010164 	.word	0x08010164
 800f730:	08010168 	.word	0x08010168

0800f734 <logf>:
 800f734:	b508      	push	{r3, lr}
 800f736:	ed2d 8b02 	vpush	{d8}
 800f73a:	eeb0 8a40 	vmov.f32	s16, s0
 800f73e:	f000 f88f 	bl	800f860 <__ieee754_logf>
 800f742:	eeb4 8a48 	vcmp.f32	s16, s16
 800f746:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f74a:	d60f      	bvs.n	800f76c <logf+0x38>
 800f74c:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800f750:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f754:	dc0a      	bgt.n	800f76c <logf+0x38>
 800f756:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800f75a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f75e:	d108      	bne.n	800f772 <logf+0x3e>
 800f760:	f7ff ffbe 	bl	800f6e0 <__errno>
 800f764:	2322      	movs	r3, #34	@ 0x22
 800f766:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 800f788 <logf+0x54>
 800f76a:	6003      	str	r3, [r0, #0]
 800f76c:	ecbd 8b02 	vpop	{d8}
 800f770:	bd08      	pop	{r3, pc}
 800f772:	f7ff ffb5 	bl	800f6e0 <__errno>
 800f776:	ecbd 8b02 	vpop	{d8}
 800f77a:	2321      	movs	r3, #33	@ 0x21
 800f77c:	6003      	str	r3, [r0, #0]
 800f77e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800f782:	4802      	ldr	r0, [pc, #8]	@ (800f78c <logf+0x58>)
 800f784:	f000 b866 	b.w	800f854 <nanf>
 800f788:	ff800000 	.word	0xff800000
 800f78c:	08010142 	.word	0x08010142

0800f790 <powf>:
 800f790:	b508      	push	{r3, lr}
 800f792:	ed2d 8b04 	vpush	{d8-d9}
 800f796:	eeb0 8a60 	vmov.f32	s16, s1
 800f79a:	eeb0 9a40 	vmov.f32	s18, s0
 800f79e:	f000 f951 	bl	800fa44 <__ieee754_powf>
 800f7a2:	eeb4 8a48 	vcmp.f32	s16, s16
 800f7a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f7aa:	eef0 8a40 	vmov.f32	s17, s0
 800f7ae:	d63e      	bvs.n	800f82e <powf+0x9e>
 800f7b0:	eeb5 9a40 	vcmp.f32	s18, #0.0
 800f7b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f7b8:	d112      	bne.n	800f7e0 <powf+0x50>
 800f7ba:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800f7be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f7c2:	d039      	beq.n	800f838 <powf+0xa8>
 800f7c4:	eeb0 0a48 	vmov.f32	s0, s16
 800f7c8:	f000 f839 	bl	800f83e <finitef>
 800f7cc:	b378      	cbz	r0, 800f82e <powf+0x9e>
 800f7ce:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800f7d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f7d6:	d52a      	bpl.n	800f82e <powf+0x9e>
 800f7d8:	f7ff ff82 	bl	800f6e0 <__errno>
 800f7dc:	2322      	movs	r3, #34	@ 0x22
 800f7de:	e014      	b.n	800f80a <powf+0x7a>
 800f7e0:	f000 f82d 	bl	800f83e <finitef>
 800f7e4:	b998      	cbnz	r0, 800f80e <powf+0x7e>
 800f7e6:	eeb0 0a49 	vmov.f32	s0, s18
 800f7ea:	f000 f828 	bl	800f83e <finitef>
 800f7ee:	b170      	cbz	r0, 800f80e <powf+0x7e>
 800f7f0:	eeb0 0a48 	vmov.f32	s0, s16
 800f7f4:	f000 f823 	bl	800f83e <finitef>
 800f7f8:	b148      	cbz	r0, 800f80e <powf+0x7e>
 800f7fa:	eef4 8a68 	vcmp.f32	s17, s17
 800f7fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f802:	d7e9      	bvc.n	800f7d8 <powf+0x48>
 800f804:	f7ff ff6c 	bl	800f6e0 <__errno>
 800f808:	2321      	movs	r3, #33	@ 0x21
 800f80a:	6003      	str	r3, [r0, #0]
 800f80c:	e00f      	b.n	800f82e <powf+0x9e>
 800f80e:	eef5 8a40 	vcmp.f32	s17, #0.0
 800f812:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f816:	d10a      	bne.n	800f82e <powf+0x9e>
 800f818:	eeb0 0a49 	vmov.f32	s0, s18
 800f81c:	f000 f80f 	bl	800f83e <finitef>
 800f820:	b128      	cbz	r0, 800f82e <powf+0x9e>
 800f822:	eeb0 0a48 	vmov.f32	s0, s16
 800f826:	f000 f80a 	bl	800f83e <finitef>
 800f82a:	2800      	cmp	r0, #0
 800f82c:	d1d4      	bne.n	800f7d8 <powf+0x48>
 800f82e:	eeb0 0a68 	vmov.f32	s0, s17
 800f832:	ecbd 8b04 	vpop	{d8-d9}
 800f836:	bd08      	pop	{r3, pc}
 800f838:	eef7 8a00 	vmov.f32	s17, #112	@ 0x3f800000  1.0
 800f83c:	e7f7      	b.n	800f82e <powf+0x9e>

0800f83e <finitef>:
 800f83e:	ee10 3a10 	vmov	r3, s0
 800f842:	f023 4000 	bic.w	r0, r3, #2147483648	@ 0x80000000
 800f846:	f1b0 4fff 	cmp.w	r0, #2139095040	@ 0x7f800000
 800f84a:	bfac      	ite	ge
 800f84c:	2000      	movge	r0, #0
 800f84e:	2001      	movlt	r0, #1
 800f850:	4770      	bx	lr
	...

0800f854 <nanf>:
 800f854:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800f85c <nanf+0x8>
 800f858:	4770      	bx	lr
 800f85a:	bf00      	nop
 800f85c:	7fc00000 	.word	0x7fc00000

0800f860 <__ieee754_logf>:
 800f860:	ee10 3a10 	vmov	r3, s0
 800f864:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 800f868:	d106      	bne.n	800f878 <__ieee754_logf+0x18>
 800f86a:	ed9f 7a66 	vldr	s14, [pc, #408]	@ 800fa04 <__ieee754_logf+0x1a4>
 800f86e:	eddf 7a66 	vldr	s15, [pc, #408]	@ 800fa08 <__ieee754_logf+0x1a8>
 800f872:	ee87 0a27 	vdiv.f32	s0, s14, s15
 800f876:	4770      	bx	lr
 800f878:	2b00      	cmp	r3, #0
 800f87a:	461a      	mov	r2, r3
 800f87c:	da02      	bge.n	800f884 <__ieee754_logf+0x24>
 800f87e:	ee30 7a40 	vsub.f32	s14, s0, s0
 800f882:	e7f4      	b.n	800f86e <__ieee754_logf+0xe>
 800f884:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800f888:	db02      	blt.n	800f890 <__ieee754_logf+0x30>
 800f88a:	ee30 0a00 	vadd.f32	s0, s0, s0
 800f88e:	4770      	bx	lr
 800f890:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800f894:	bfb8      	it	lt
 800f896:	eddf 7a5d 	vldrlt	s15, [pc, #372]	@ 800fa0c <__ieee754_logf+0x1ac>
 800f89a:	485d      	ldr	r0, [pc, #372]	@ (800fa10 <__ieee754_logf+0x1b0>)
 800f89c:	bfbe      	ittt	lt
 800f89e:	ee60 7a27 	vmullt.f32	s15, s0, s15
 800f8a2:	f06f 0118 	mvnlt.w	r1, #24
 800f8a6:	ee17 2a90 	vmovlt	r2, s15
 800f8aa:	ea4f 53e2 	mov.w	r3, r2, asr #23
 800f8ae:	f3c2 0216 	ubfx	r2, r2, #0, #23
 800f8b2:	4410      	add	r0, r2
 800f8b4:	bfa8      	it	ge
 800f8b6:	2100      	movge	r1, #0
 800f8b8:	3b7f      	subs	r3, #127	@ 0x7f
 800f8ba:	440b      	add	r3, r1
 800f8bc:	f400 0100 	and.w	r1, r0, #8388608	@ 0x800000
 800f8c0:	f081 517e 	eor.w	r1, r1, #1065353216	@ 0x3f800000
 800f8c4:	4311      	orrs	r1, r2
 800f8c6:	ee00 1a10 	vmov	s0, r1
 800f8ca:	4952      	ldr	r1, [pc, #328]	@ (800fa14 <__ieee754_logf+0x1b4>)
 800f8cc:	eb03 53d0 	add.w	r3, r3, r0, lsr #23
 800f8d0:	f102 000f 	add.w	r0, r2, #15
 800f8d4:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800f8d8:	4001      	ands	r1, r0
 800f8da:	ee30 0a67 	vsub.f32	s0, s0, s15
 800f8de:	bb89      	cbnz	r1, 800f944 <__ieee754_logf+0xe4>
 800f8e0:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800f8e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f8e8:	d10f      	bne.n	800f90a <__ieee754_logf+0xaa>
 800f8ea:	2b00      	cmp	r3, #0
 800f8ec:	f000 8087 	beq.w	800f9fe <__ieee754_logf+0x19e>
 800f8f0:	ee07 3a90 	vmov	s15, r3
 800f8f4:	ed9f 0a48 	vldr	s0, [pc, #288]	@ 800fa18 <__ieee754_logf+0x1b8>
 800f8f8:	ed9f 7a48 	vldr	s14, [pc, #288]	@ 800fa1c <__ieee754_logf+0x1bc>
 800f8fc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f900:	ee27 0a80 	vmul.f32	s0, s15, s0
 800f904:	eea7 0a87 	vfma.f32	s0, s15, s14
 800f908:	4770      	bx	lr
 800f90a:	eddf 6a45 	vldr	s13, [pc, #276]	@ 800fa20 <__ieee754_logf+0x1c0>
 800f90e:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800f912:	eee0 7a66 	vfms.f32	s15, s0, s13
 800f916:	ee20 7a00 	vmul.f32	s14, s0, s0
 800f91a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f91e:	b913      	cbnz	r3, 800f926 <__ieee754_logf+0xc6>
 800f920:	ee30 0a47 	vsub.f32	s0, s0, s14
 800f924:	4770      	bx	lr
 800f926:	ee07 3a90 	vmov	s15, r3
 800f92a:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 800fa18 <__ieee754_logf+0x1b8>
 800f92e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f932:	eea7 7ae6 	vfms.f32	s14, s15, s13
 800f936:	ee37 0a40 	vsub.f32	s0, s14, s0
 800f93a:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 800fa1c <__ieee754_logf+0x1bc>
 800f93e:	ee97 0a87 	vfnms.f32	s0, s15, s14
 800f942:	4770      	bx	lr
 800f944:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 800f948:	ee70 7a27 	vadd.f32	s15, s0, s15
 800f94c:	eddf 5a35 	vldr	s11, [pc, #212]	@ 800fa24 <__ieee754_logf+0x1c4>
 800f950:	eddf 4a35 	vldr	s9, [pc, #212]	@ 800fa28 <__ieee754_logf+0x1c8>
 800f954:	4935      	ldr	r1, [pc, #212]	@ (800fa2c <__ieee754_logf+0x1cc>)
 800f956:	ee80 6a27 	vdiv.f32	s12, s0, s15
 800f95a:	4411      	add	r1, r2
 800f95c:	f5c2 1257 	rsb	r2, r2, #3522560	@ 0x35c000
 800f960:	f502 7222 	add.w	r2, r2, #648	@ 0x288
 800f964:	430a      	orrs	r2, r1
 800f966:	2a00      	cmp	r2, #0
 800f968:	ee07 3a90 	vmov	s15, r3
 800f96c:	ee26 5a06 	vmul.f32	s10, s12, s12
 800f970:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800f974:	ee25 7a05 	vmul.f32	s14, s10, s10
 800f978:	eddf 7a2d 	vldr	s15, [pc, #180]	@ 800fa30 <__ieee754_logf+0x1d0>
 800f97c:	eee7 7a25 	vfma.f32	s15, s14, s11
 800f980:	eddf 5a2c 	vldr	s11, [pc, #176]	@ 800fa34 <__ieee754_logf+0x1d4>
 800f984:	eee7 5a87 	vfma.f32	s11, s15, s14
 800f988:	eddf 7a2b 	vldr	s15, [pc, #172]	@ 800fa38 <__ieee754_logf+0x1d8>
 800f98c:	eee7 7a24 	vfma.f32	s15, s14, s9
 800f990:	eddf 4a2a 	vldr	s9, [pc, #168]	@ 800fa3c <__ieee754_logf+0x1dc>
 800f994:	eee7 4a87 	vfma.f32	s9, s15, s14
 800f998:	eddf 7a29 	vldr	s15, [pc, #164]	@ 800fa40 <__ieee754_logf+0x1e0>
 800f99c:	eee4 7a87 	vfma.f32	s15, s9, s14
 800f9a0:	ee67 7a85 	vmul.f32	s15, s15, s10
 800f9a4:	eee5 7a87 	vfma.f32	s15, s11, s14
 800f9a8:	dd1a      	ble.n	800f9e0 <__ieee754_logf+0x180>
 800f9aa:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800f9ae:	ee20 7a07 	vmul.f32	s14, s0, s14
 800f9b2:	ee27 7a00 	vmul.f32	s14, s14, s0
 800f9b6:	ee77 7a87 	vadd.f32	s15, s15, s14
 800f9ba:	ee67 7a86 	vmul.f32	s15, s15, s12
 800f9be:	b913      	cbnz	r3, 800f9c6 <__ieee754_logf+0x166>
 800f9c0:	ee37 7a67 	vsub.f32	s14, s14, s15
 800f9c4:	e7ac      	b.n	800f920 <__ieee754_logf+0xc0>
 800f9c6:	ed9f 6a14 	vldr	s12, [pc, #80]	@ 800fa18 <__ieee754_logf+0x1b8>
 800f9ca:	eee6 7a86 	vfma.f32	s15, s13, s12
 800f9ce:	ee37 7a67 	vsub.f32	s14, s14, s15
 800f9d2:	ee37 0a40 	vsub.f32	s0, s14, s0
 800f9d6:	eddf 7a11 	vldr	s15, [pc, #68]	@ 800fa1c <__ieee754_logf+0x1bc>
 800f9da:	ee96 0aa7 	vfnms.f32	s0, s13, s15
 800f9de:	4770      	bx	lr
 800f9e0:	ee70 7a67 	vsub.f32	s15, s0, s15
 800f9e4:	ee67 7a86 	vmul.f32	s15, s15, s12
 800f9e8:	b913      	cbnz	r3, 800f9f0 <__ieee754_logf+0x190>
 800f9ea:	ee30 0a67 	vsub.f32	s0, s0, s15
 800f9ee:	4770      	bx	lr
 800f9f0:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 800fa18 <__ieee754_logf+0x1b8>
 800f9f4:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800f9f8:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800f9fc:	e7eb      	b.n	800f9d6 <__ieee754_logf+0x176>
 800f9fe:	ed9f 0a02 	vldr	s0, [pc, #8]	@ 800fa08 <__ieee754_logf+0x1a8>
 800fa02:	4770      	bx	lr
 800fa04:	cc000000 	.word	0xcc000000
 800fa08:	00000000 	.word	0x00000000
 800fa0c:	4c000000 	.word	0x4c000000
 800fa10:	004afb20 	.word	0x004afb20
 800fa14:	007ffff0 	.word	0x007ffff0
 800fa18:	3717f7d1 	.word	0x3717f7d1
 800fa1c:	3f317180 	.word	0x3f317180
 800fa20:	3eaaaaab 	.word	0x3eaaaaab
 800fa24:	3e1cd04f 	.word	0x3e1cd04f
 800fa28:	3e178897 	.word	0x3e178897
 800fa2c:	ffcf5c30 	.word	0xffcf5c30
 800fa30:	3e638e29 	.word	0x3e638e29
 800fa34:	3ecccccd 	.word	0x3ecccccd
 800fa38:	3e3a3325 	.word	0x3e3a3325
 800fa3c:	3e924925 	.word	0x3e924925
 800fa40:	3f2aaaab 	.word	0x3f2aaaab

0800fa44 <__ieee754_powf>:
 800fa44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fa48:	ee10 4a90 	vmov	r4, s1
 800fa4c:	f034 4900 	bics.w	r9, r4, #2147483648	@ 0x80000000
 800fa50:	ed2d 8b02 	vpush	{d8}
 800fa54:	ee10 6a10 	vmov	r6, s0
 800fa58:	eeb0 8a40 	vmov.f32	s16, s0
 800fa5c:	eef0 8a60 	vmov.f32	s17, s1
 800fa60:	d10c      	bne.n	800fa7c <__ieee754_powf+0x38>
 800fa62:	f486 0680 	eor.w	r6, r6, #4194304	@ 0x400000
 800fa66:	0076      	lsls	r6, r6, #1
 800fa68:	f516 0f00 	cmn.w	r6, #8388608	@ 0x800000
 800fa6c:	f240 8274 	bls.w	800ff58 <__ieee754_powf+0x514>
 800fa70:	ee38 0a28 	vadd.f32	s0, s16, s17
 800fa74:	ecbd 8b02 	vpop	{d8}
 800fa78:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fa7c:	f026 4800 	bic.w	r8, r6, #2147483648	@ 0x80000000
 800fa80:	f1b8 4fff 	cmp.w	r8, #2139095040	@ 0x7f800000
 800fa84:	d802      	bhi.n	800fa8c <__ieee754_powf+0x48>
 800fa86:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 800fa8a:	d908      	bls.n	800fa9e <__ieee754_powf+0x5a>
 800fa8c:	f1b6 5f7e 	cmp.w	r6, #1065353216	@ 0x3f800000
 800fa90:	d1ee      	bne.n	800fa70 <__ieee754_powf+0x2c>
 800fa92:	f484 0480 	eor.w	r4, r4, #4194304	@ 0x400000
 800fa96:	0064      	lsls	r4, r4, #1
 800fa98:	f514 0f00 	cmn.w	r4, #8388608	@ 0x800000
 800fa9c:	e7e6      	b.n	800fa6c <__ieee754_powf+0x28>
 800fa9e:	2e00      	cmp	r6, #0
 800faa0:	da1f      	bge.n	800fae2 <__ieee754_powf+0x9e>
 800faa2:	f1b9 4f97 	cmp.w	r9, #1266679808	@ 0x4b800000
 800faa6:	f080 8260 	bcs.w	800ff6a <__ieee754_powf+0x526>
 800faaa:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 800faae:	d32f      	bcc.n	800fb10 <__ieee754_powf+0xcc>
 800fab0:	ea4f 53e9 	mov.w	r3, r9, asr #23
 800fab4:	f1c3 0396 	rsb	r3, r3, #150	@ 0x96
 800fab8:	fa49 f503 	asr.w	r5, r9, r3
 800fabc:	fa05 f303 	lsl.w	r3, r5, r3
 800fac0:	454b      	cmp	r3, r9
 800fac2:	d123      	bne.n	800fb0c <__ieee754_powf+0xc8>
 800fac4:	f005 0501 	and.w	r5, r5, #1
 800fac8:	f1c5 0502 	rsb	r5, r5, #2
 800facc:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 800fad0:	d11f      	bne.n	800fb12 <__ieee754_powf+0xce>
 800fad2:	2c00      	cmp	r4, #0
 800fad4:	f280 8246 	bge.w	800ff64 <__ieee754_powf+0x520>
 800fad8:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800fadc:	ee87 0a88 	vdiv.f32	s0, s15, s16
 800fae0:	e7c8      	b.n	800fa74 <__ieee754_powf+0x30>
 800fae2:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 800fae6:	d111      	bne.n	800fb0c <__ieee754_powf+0xc8>
 800fae8:	f1b8 5f7e 	cmp.w	r8, #1065353216	@ 0x3f800000
 800faec:	f000 8234 	beq.w	800ff58 <__ieee754_powf+0x514>
 800faf0:	d906      	bls.n	800fb00 <__ieee754_powf+0xbc>
 800faf2:	ed9f 0ac5 	vldr	s0, [pc, #788]	@ 800fe08 <__ieee754_powf+0x3c4>
 800faf6:	2c00      	cmp	r4, #0
 800faf8:	bfa8      	it	ge
 800fafa:	eeb0 0a68 	vmovge.f32	s0, s17
 800fafe:	e7b9      	b.n	800fa74 <__ieee754_powf+0x30>
 800fb00:	2c00      	cmp	r4, #0
 800fb02:	f280 822c 	bge.w	800ff5e <__ieee754_powf+0x51a>
 800fb06:	eeb1 0a68 	vneg.f32	s0, s17
 800fb0a:	e7b3      	b.n	800fa74 <__ieee754_powf+0x30>
 800fb0c:	2500      	movs	r5, #0
 800fb0e:	e7dd      	b.n	800facc <__ieee754_powf+0x88>
 800fb10:	2500      	movs	r5, #0
 800fb12:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 800fb16:	d102      	bne.n	800fb1e <__ieee754_powf+0xda>
 800fb18:	ee28 0a08 	vmul.f32	s0, s16, s16
 800fb1c:	e7aa      	b.n	800fa74 <__ieee754_powf+0x30>
 800fb1e:	f1b4 5f7c 	cmp.w	r4, #1056964608	@ 0x3f000000
 800fb22:	f040 8227 	bne.w	800ff74 <__ieee754_powf+0x530>
 800fb26:	2e00      	cmp	r6, #0
 800fb28:	f2c0 8224 	blt.w	800ff74 <__ieee754_powf+0x530>
 800fb2c:	eeb0 0a48 	vmov.f32	s0, s16
 800fb30:	ecbd 8b02 	vpop	{d8}
 800fb34:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fb38:	f000 bae6 	b.w	8010108 <__ieee754_sqrtf>
 800fb3c:	2d01      	cmp	r5, #1
 800fb3e:	d199      	bne.n	800fa74 <__ieee754_powf+0x30>
 800fb40:	eeb1 0a40 	vneg.f32	s0, s0
 800fb44:	e796      	b.n	800fa74 <__ieee754_powf+0x30>
 800fb46:	0ff0      	lsrs	r0, r6, #31
 800fb48:	3801      	subs	r0, #1
 800fb4a:	ea55 0300 	orrs.w	r3, r5, r0
 800fb4e:	d104      	bne.n	800fb5a <__ieee754_powf+0x116>
 800fb50:	ee38 8a48 	vsub.f32	s16, s16, s16
 800fb54:	ee88 0a08 	vdiv.f32	s0, s16, s16
 800fb58:	e78c      	b.n	800fa74 <__ieee754_powf+0x30>
 800fb5a:	f1b9 4f9a 	cmp.w	r9, #1291845632	@ 0x4d000000
 800fb5e:	d96d      	bls.n	800fc3c <__ieee754_powf+0x1f8>
 800fb60:	4baa      	ldr	r3, [pc, #680]	@ (800fe0c <__ieee754_powf+0x3c8>)
 800fb62:	4598      	cmp	r8, r3
 800fb64:	d808      	bhi.n	800fb78 <__ieee754_powf+0x134>
 800fb66:	2c00      	cmp	r4, #0
 800fb68:	da0b      	bge.n	800fb82 <__ieee754_powf+0x13e>
 800fb6a:	2000      	movs	r0, #0
 800fb6c:	ecbd 8b02 	vpop	{d8}
 800fb70:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fb74:	f000 bac2 	b.w	80100fc <__math_oflowf>
 800fb78:	4ba5      	ldr	r3, [pc, #660]	@ (800fe10 <__ieee754_powf+0x3cc>)
 800fb7a:	4598      	cmp	r8, r3
 800fb7c:	d908      	bls.n	800fb90 <__ieee754_powf+0x14c>
 800fb7e:	2c00      	cmp	r4, #0
 800fb80:	dcf3      	bgt.n	800fb6a <__ieee754_powf+0x126>
 800fb82:	2000      	movs	r0, #0
 800fb84:	ecbd 8b02 	vpop	{d8}
 800fb88:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fb8c:	f000 bab0 	b.w	80100f0 <__math_uflowf>
 800fb90:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800fb94:	ee30 0a67 	vsub.f32	s0, s0, s15
 800fb98:	eddf 6a9e 	vldr	s13, [pc, #632]	@ 800fe14 <__ieee754_powf+0x3d0>
 800fb9c:	eef5 7a00 	vmov.f32	s15, #80	@ 0x3e800000  0.250
 800fba0:	eee0 6a67 	vfms.f32	s13, s0, s15
 800fba4:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800fba8:	eee6 7ac0 	vfms.f32	s15, s13, s0
 800fbac:	ee20 7a00 	vmul.f32	s14, s0, s0
 800fbb0:	eddf 6a99 	vldr	s13, [pc, #612]	@ 800fe18 <__ieee754_powf+0x3d4>
 800fbb4:	ee27 7a27 	vmul.f32	s14, s14, s15
 800fbb8:	eddf 7a98 	vldr	s15, [pc, #608]	@ 800fe1c <__ieee754_powf+0x3d8>
 800fbbc:	ee67 7ac7 	vnmul.f32	s15, s15, s14
 800fbc0:	ed9f 7a97 	vldr	s14, [pc, #604]	@ 800fe20 <__ieee754_powf+0x3dc>
 800fbc4:	eee0 7a07 	vfma.f32	s15, s0, s14
 800fbc8:	eeb0 7a67 	vmov.f32	s14, s15
 800fbcc:	eea0 7a26 	vfma.f32	s14, s0, s13
 800fbd0:	ee17 3a10 	vmov	r3, s14
 800fbd4:	f36f 030b 	bfc	r3, #0, #12
 800fbd8:	ee07 3a10 	vmov	s14, r3
 800fbdc:	eeb0 6a47 	vmov.f32	s12, s14
 800fbe0:	eea0 6a66 	vfms.f32	s12, s0, s13
 800fbe4:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800fbe8:	3d01      	subs	r5, #1
 800fbea:	4305      	orrs	r5, r0
 800fbec:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800fbf0:	eebf 8a00 	vmov.f32	s16, #240	@ 0xbf800000 -1.0
 800fbf4:	f36f 040b 	bfc	r4, #0, #12
 800fbf8:	bf18      	it	ne
 800fbfa:	eeb0 8a66 	vmovne.f32	s16, s13
 800fbfe:	ee06 4a90 	vmov	s13, r4
 800fc02:	ee67 0aa8 	vmul.f32	s1, s15, s17
 800fc06:	ee38 6ae6 	vsub.f32	s12, s17, s13
 800fc0a:	ee67 7a26 	vmul.f32	s15, s14, s13
 800fc0e:	eee6 0a07 	vfma.f32	s1, s12, s14
 800fc12:	ee30 7aa7 	vadd.f32	s14, s1, s15
 800fc16:	ee17 1a10 	vmov	r1, s14
 800fc1a:	2900      	cmp	r1, #0
 800fc1c:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800fc20:	f340 80dd 	ble.w	800fdde <__ieee754_powf+0x39a>
 800fc24:	f1b3 4f86 	cmp.w	r3, #1124073472	@ 0x43000000
 800fc28:	f240 80ca 	bls.w	800fdc0 <__ieee754_powf+0x37c>
 800fc2c:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800fc30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fc34:	bf4c      	ite	mi
 800fc36:	2001      	movmi	r0, #1
 800fc38:	2000      	movpl	r0, #0
 800fc3a:	e797      	b.n	800fb6c <__ieee754_powf+0x128>
 800fc3c:	f016 4fff 	tst.w	r6, #2139095040	@ 0x7f800000
 800fc40:	bf01      	itttt	eq
 800fc42:	eddf 7a78 	vldreq	s15, [pc, #480]	@ 800fe24 <__ieee754_powf+0x3e0>
 800fc46:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 800fc4a:	f06f 0317 	mvneq.w	r3, #23
 800fc4e:	ee17 7a90 	vmoveq	r7, s15
 800fc52:	ea4f 52e7 	mov.w	r2, r7, asr #23
 800fc56:	bf18      	it	ne
 800fc58:	2300      	movne	r3, #0
 800fc5a:	3a7f      	subs	r2, #127	@ 0x7f
 800fc5c:	441a      	add	r2, r3
 800fc5e:	4b72      	ldr	r3, [pc, #456]	@ (800fe28 <__ieee754_powf+0x3e4>)
 800fc60:	f3c7 0716 	ubfx	r7, r7, #0, #23
 800fc64:	429f      	cmp	r7, r3
 800fc66:	f047 517e 	orr.w	r1, r7, #1065353216	@ 0x3f800000
 800fc6a:	dd06      	ble.n	800fc7a <__ieee754_powf+0x236>
 800fc6c:	4b6f      	ldr	r3, [pc, #444]	@ (800fe2c <__ieee754_powf+0x3e8>)
 800fc6e:	429f      	cmp	r7, r3
 800fc70:	f340 80a4 	ble.w	800fdbc <__ieee754_powf+0x378>
 800fc74:	3201      	adds	r2, #1
 800fc76:	f5a1 0100 	sub.w	r1, r1, #8388608	@ 0x800000
 800fc7a:	2600      	movs	r6, #0
 800fc7c:	4b6c      	ldr	r3, [pc, #432]	@ (800fe30 <__ieee754_powf+0x3ec>)
 800fc7e:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 800fc82:	ee07 1a10 	vmov	s14, r1
 800fc86:	edd3 5a00 	vldr	s11, [r3]
 800fc8a:	4b6a      	ldr	r3, [pc, #424]	@ (800fe34 <__ieee754_powf+0x3f0>)
 800fc8c:	ee75 7a87 	vadd.f32	s15, s11, s14
 800fc90:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800fc94:	eec6 4aa7 	vdiv.f32	s9, s13, s15
 800fc98:	1049      	asrs	r1, r1, #1
 800fc9a:	f041 5100 	orr.w	r1, r1, #536870912	@ 0x20000000
 800fc9e:	f501 2180 	add.w	r1, r1, #262144	@ 0x40000
 800fca2:	eb01 5146 	add.w	r1, r1, r6, lsl #21
 800fca6:	ee37 6a65 	vsub.f32	s12, s14, s11
 800fcaa:	ee07 1a90 	vmov	s15, r1
 800fcae:	ee26 5a24 	vmul.f32	s10, s12, s9
 800fcb2:	ee77 5ae5 	vsub.f32	s11, s15, s11
 800fcb6:	ee15 7a10 	vmov	r7, s10
 800fcba:	401f      	ands	r7, r3
 800fcbc:	ee06 7a90 	vmov	s13, r7
 800fcc0:	eea6 6ae7 	vfms.f32	s12, s13, s15
 800fcc4:	ee37 7a65 	vsub.f32	s14, s14, s11
 800fcc8:	ee65 7a05 	vmul.f32	s15, s10, s10
 800fccc:	eea6 6ac7 	vfms.f32	s12, s13, s14
 800fcd0:	eddf 5a59 	vldr	s11, [pc, #356]	@ 800fe38 <__ieee754_powf+0x3f4>
 800fcd4:	ed9f 7a59 	vldr	s14, [pc, #356]	@ 800fe3c <__ieee754_powf+0x3f8>
 800fcd8:	eee7 5a87 	vfma.f32	s11, s15, s14
 800fcdc:	ed9f 7a58 	vldr	s14, [pc, #352]	@ 800fe40 <__ieee754_powf+0x3fc>
 800fce0:	eea5 7aa7 	vfma.f32	s14, s11, s15
 800fce4:	eddf 5a4b 	vldr	s11, [pc, #300]	@ 800fe14 <__ieee754_powf+0x3d0>
 800fce8:	eee7 5a27 	vfma.f32	s11, s14, s15
 800fcec:	ed9f 7a55 	vldr	s14, [pc, #340]	@ 800fe44 <__ieee754_powf+0x400>
 800fcf0:	eea5 7aa7 	vfma.f32	s14, s11, s15
 800fcf4:	eddf 5a54 	vldr	s11, [pc, #336]	@ 800fe48 <__ieee754_powf+0x404>
 800fcf8:	ee26 6a24 	vmul.f32	s12, s12, s9
 800fcfc:	eee7 5a27 	vfma.f32	s11, s14, s15
 800fd00:	ee35 7a26 	vadd.f32	s14, s10, s13
 800fd04:	ee67 4aa7 	vmul.f32	s9, s15, s15
 800fd08:	ee27 7a06 	vmul.f32	s14, s14, s12
 800fd0c:	eef0 7a08 	vmov.f32	s15, #8	@ 0x40400000  3.0
 800fd10:	eea4 7aa5 	vfma.f32	s14, s9, s11
 800fd14:	eef0 5a67 	vmov.f32	s11, s15
 800fd18:	eee6 5aa6 	vfma.f32	s11, s13, s13
 800fd1c:	ee75 5a87 	vadd.f32	s11, s11, s14
 800fd20:	ee15 1a90 	vmov	r1, s11
 800fd24:	4019      	ands	r1, r3
 800fd26:	ee05 1a90 	vmov	s11, r1
 800fd2a:	ee75 7ae7 	vsub.f32	s15, s11, s15
 800fd2e:	eee6 7ae6 	vfms.f32	s15, s13, s13
 800fd32:	ee77 7a67 	vsub.f32	s15, s14, s15
 800fd36:	ee67 7a85 	vmul.f32	s15, s15, s10
 800fd3a:	eee6 7a25 	vfma.f32	s15, s12, s11
 800fd3e:	eeb0 6a67 	vmov.f32	s12, s15
 800fd42:	eea6 6aa5 	vfma.f32	s12, s13, s11
 800fd46:	ee16 1a10 	vmov	r1, s12
 800fd4a:	4019      	ands	r1, r3
 800fd4c:	ee06 1a10 	vmov	s12, r1
 800fd50:	eeb0 7a46 	vmov.f32	s14, s12
 800fd54:	eea6 7ae5 	vfms.f32	s14, s13, s11
 800fd58:	493c      	ldr	r1, [pc, #240]	@ (800fe4c <__ieee754_powf+0x408>)
 800fd5a:	eb01 0186 	add.w	r1, r1, r6, lsl #2
 800fd5e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800fd62:	ed9f 7a3b 	vldr	s14, [pc, #236]	@ 800fe50 <__ieee754_powf+0x40c>
 800fd66:	eddf 5a3b 	vldr	s11, [pc, #236]	@ 800fe54 <__ieee754_powf+0x410>
 800fd6a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800fd6e:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 800fe58 <__ieee754_powf+0x414>
 800fd72:	eee6 7a07 	vfma.f32	s15, s12, s14
 800fd76:	ed91 7a00 	vldr	s14, [r1]
 800fd7a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800fd7e:	ee07 2a10 	vmov	s14, r2
 800fd82:	4a36      	ldr	r2, [pc, #216]	@ (800fe5c <__ieee754_powf+0x418>)
 800fd84:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 800fd88:	eeb0 7a67 	vmov.f32	s14, s15
 800fd8c:	eea6 7a25 	vfma.f32	s14, s12, s11
 800fd90:	eb02 0286 	add.w	r2, r2, r6, lsl #2
 800fd94:	ed92 5a00 	vldr	s10, [r2]
 800fd98:	ee37 7a05 	vadd.f32	s14, s14, s10
 800fd9c:	ee37 7a26 	vadd.f32	s14, s14, s13
 800fda0:	ee17 2a10 	vmov	r2, s14
 800fda4:	401a      	ands	r2, r3
 800fda6:	ee07 2a10 	vmov	s14, r2
 800fdaa:	ee77 6a66 	vsub.f32	s13, s14, s13
 800fdae:	ee76 6ac5 	vsub.f32	s13, s13, s10
 800fdb2:	eee6 6a65 	vfms.f32	s13, s12, s11
 800fdb6:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800fdba:	e715      	b.n	800fbe8 <__ieee754_powf+0x1a4>
 800fdbc:	2601      	movs	r6, #1
 800fdbe:	e75d      	b.n	800fc7c <__ieee754_powf+0x238>
 800fdc0:	d152      	bne.n	800fe68 <__ieee754_powf+0x424>
 800fdc2:	eddf 6a27 	vldr	s13, [pc, #156]	@ 800fe60 <__ieee754_powf+0x41c>
 800fdc6:	ee37 7a67 	vsub.f32	s14, s14, s15
 800fdca:	ee70 6aa6 	vadd.f32	s13, s1, s13
 800fdce:	eef4 6ac7 	vcmpe.f32	s13, s14
 800fdd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fdd6:	f73f af29 	bgt.w	800fc2c <__ieee754_powf+0x1e8>
 800fdda:	2386      	movs	r3, #134	@ 0x86
 800fddc:	e048      	b.n	800fe70 <__ieee754_powf+0x42c>
 800fdde:	4a21      	ldr	r2, [pc, #132]	@ (800fe64 <__ieee754_powf+0x420>)
 800fde0:	4293      	cmp	r3, r2
 800fde2:	d907      	bls.n	800fdf4 <__ieee754_powf+0x3b0>
 800fde4:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800fde8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fdec:	bf4c      	ite	mi
 800fdee:	2001      	movmi	r0, #1
 800fdf0:	2000      	movpl	r0, #0
 800fdf2:	e6c7      	b.n	800fb84 <__ieee754_powf+0x140>
 800fdf4:	d138      	bne.n	800fe68 <__ieee754_powf+0x424>
 800fdf6:	ee37 7a67 	vsub.f32	s14, s14, s15
 800fdfa:	eeb4 7ae0 	vcmpe.f32	s14, s1
 800fdfe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fe02:	dbea      	blt.n	800fdda <__ieee754_powf+0x396>
 800fe04:	e7ee      	b.n	800fde4 <__ieee754_powf+0x3a0>
 800fe06:	bf00      	nop
 800fe08:	00000000 	.word	0x00000000
 800fe0c:	3f7ffff3 	.word	0x3f7ffff3
 800fe10:	3f800007 	.word	0x3f800007
 800fe14:	3eaaaaab 	.word	0x3eaaaaab
 800fe18:	3fb8aa00 	.word	0x3fb8aa00
 800fe1c:	3fb8aa3b 	.word	0x3fb8aa3b
 800fe20:	36eca570 	.word	0x36eca570
 800fe24:	4b800000 	.word	0x4b800000
 800fe28:	001cc471 	.word	0x001cc471
 800fe2c:	005db3d6 	.word	0x005db3d6
 800fe30:	08010154 	.word	0x08010154
 800fe34:	fffff000 	.word	0xfffff000
 800fe38:	3e6c3255 	.word	0x3e6c3255
 800fe3c:	3e53f142 	.word	0x3e53f142
 800fe40:	3e8ba305 	.word	0x3e8ba305
 800fe44:	3edb6db7 	.word	0x3edb6db7
 800fe48:	3f19999a 	.word	0x3f19999a
 800fe4c:	08010144 	.word	0x08010144
 800fe50:	3f76384f 	.word	0x3f76384f
 800fe54:	3f763800 	.word	0x3f763800
 800fe58:	369dc3a0 	.word	0x369dc3a0
 800fe5c:	0801014c 	.word	0x0801014c
 800fe60:	3338aa3c 	.word	0x3338aa3c
 800fe64:	43160000 	.word	0x43160000
 800fe68:	f1b3 5f7c 	cmp.w	r3, #1056964608	@ 0x3f000000
 800fe6c:	d96f      	bls.n	800ff4e <__ieee754_powf+0x50a>
 800fe6e:	15db      	asrs	r3, r3, #23
 800fe70:	3b7e      	subs	r3, #126	@ 0x7e
 800fe72:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 800fe76:	4118      	asrs	r0, r3
 800fe78:	4408      	add	r0, r1
 800fe7a:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800fe7e:	4a4e      	ldr	r2, [pc, #312]	@ (800ffb8 <__ieee754_powf+0x574>)
 800fe80:	3b7f      	subs	r3, #127	@ 0x7f
 800fe82:	411a      	asrs	r2, r3
 800fe84:	4002      	ands	r2, r0
 800fe86:	ee07 2a10 	vmov	s14, r2
 800fe8a:	f3c0 0016 	ubfx	r0, r0, #0, #23
 800fe8e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800fe92:	f1c3 0317 	rsb	r3, r3, #23
 800fe96:	4118      	asrs	r0, r3
 800fe98:	2900      	cmp	r1, #0
 800fe9a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800fe9e:	bfb8      	it	lt
 800fea0:	4240      	neglt	r0, r0
 800fea2:	ee77 6aa0 	vadd.f32	s13, s15, s1
 800fea6:	ed9f 7a45 	vldr	s14, [pc, #276]	@ 800ffbc <__ieee754_powf+0x578>
 800feaa:	ed9f 6a45 	vldr	s12, [pc, #276]	@ 800ffc0 <__ieee754_powf+0x57c>
 800feae:	ee16 3a90 	vmov	r3, s13
 800feb2:	f36f 030b 	bfc	r3, #0, #12
 800feb6:	ee06 3a90 	vmov	s13, r3
 800feba:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800febe:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800fec2:	ee70 0ae7 	vsub.f32	s1, s1, s15
 800fec6:	eddf 7a3f 	vldr	s15, [pc, #252]	@ 800ffc4 <__ieee754_powf+0x580>
 800feca:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800fece:	eee0 7a87 	vfma.f32	s15, s1, s14
 800fed2:	eeb0 7a67 	vmov.f32	s14, s15
 800fed6:	eea6 7a86 	vfma.f32	s14, s13, s12
 800feda:	eef0 5a47 	vmov.f32	s11, s14
 800fede:	eee6 5ac6 	vfms.f32	s11, s13, s12
 800fee2:	ee67 6a07 	vmul.f32	s13, s14, s14
 800fee6:	ee77 7ae5 	vsub.f32	s15, s15, s11
 800feea:	ed9f 6a37 	vldr	s12, [pc, #220]	@ 800ffc8 <__ieee754_powf+0x584>
 800feee:	eddf 5a37 	vldr	s11, [pc, #220]	@ 800ffcc <__ieee754_powf+0x588>
 800fef2:	eea6 6aa5 	vfma.f32	s12, s13, s11
 800fef6:	eddf 5a36 	vldr	s11, [pc, #216]	@ 800ffd0 <__ieee754_powf+0x58c>
 800fefa:	eee6 5a26 	vfma.f32	s11, s12, s13
 800fefe:	ed9f 6a35 	vldr	s12, [pc, #212]	@ 800ffd4 <__ieee754_powf+0x590>
 800ff02:	eea5 6aa6 	vfma.f32	s12, s11, s13
 800ff06:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800ffd8 <__ieee754_powf+0x594>
 800ff0a:	eee6 5a26 	vfma.f32	s11, s12, s13
 800ff0e:	eeb0 6a47 	vmov.f32	s12, s14
 800ff12:	eea5 6ae6 	vfms.f32	s12, s11, s13
 800ff16:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800ff1a:	ee67 5a06 	vmul.f32	s11, s14, s12
 800ff1e:	ee36 6a66 	vsub.f32	s12, s12, s13
 800ff22:	eee7 7a27 	vfma.f32	s15, s14, s15
 800ff26:	eec5 6a86 	vdiv.f32	s13, s11, s12
 800ff2a:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800ff2e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ff32:	ee30 0a67 	vsub.f32	s0, s0, s15
 800ff36:	ee10 3a10 	vmov	r3, s0
 800ff3a:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 800ff3e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800ff42:	da06      	bge.n	800ff52 <__ieee754_powf+0x50e>
 800ff44:	f000 f854 	bl	800fff0 <scalbnf>
 800ff48:	ee20 0a08 	vmul.f32	s0, s0, s16
 800ff4c:	e592      	b.n	800fa74 <__ieee754_powf+0x30>
 800ff4e:	2000      	movs	r0, #0
 800ff50:	e7a7      	b.n	800fea2 <__ieee754_powf+0x45e>
 800ff52:	ee00 3a10 	vmov	s0, r3
 800ff56:	e7f7      	b.n	800ff48 <__ieee754_powf+0x504>
 800ff58:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800ff5c:	e58a      	b.n	800fa74 <__ieee754_powf+0x30>
 800ff5e:	ed9f 0a1f 	vldr	s0, [pc, #124]	@ 800ffdc <__ieee754_powf+0x598>
 800ff62:	e587      	b.n	800fa74 <__ieee754_powf+0x30>
 800ff64:	eeb0 0a48 	vmov.f32	s0, s16
 800ff68:	e584      	b.n	800fa74 <__ieee754_powf+0x30>
 800ff6a:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 800ff6e:	f43f adbb 	beq.w	800fae8 <__ieee754_powf+0xa4>
 800ff72:	2502      	movs	r5, #2
 800ff74:	eeb0 0a48 	vmov.f32	s0, s16
 800ff78:	f000 f832 	bl	800ffe0 <fabsf>
 800ff7c:	f026 4340 	bic.w	r3, r6, #3221225472	@ 0xc0000000
 800ff80:	f1b3 5f7e 	cmp.w	r3, #1065353216	@ 0x3f800000
 800ff84:	4647      	mov	r7, r8
 800ff86:	d003      	beq.n	800ff90 <__ieee754_powf+0x54c>
 800ff88:	f1b8 0f00 	cmp.w	r8, #0
 800ff8c:	f47f addb 	bne.w	800fb46 <__ieee754_powf+0x102>
 800ff90:	2c00      	cmp	r4, #0
 800ff92:	bfbc      	itt	lt
 800ff94:	eef7 7a00 	vmovlt.f32	s15, #112	@ 0x3f800000  1.0
 800ff98:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 800ff9c:	2e00      	cmp	r6, #0
 800ff9e:	f6bf ad69 	bge.w	800fa74 <__ieee754_powf+0x30>
 800ffa2:	f1a8 587e 	sub.w	r8, r8, #1065353216	@ 0x3f800000
 800ffa6:	ea58 0805 	orrs.w	r8, r8, r5
 800ffaa:	f47f adc7 	bne.w	800fb3c <__ieee754_powf+0xf8>
 800ffae:	ee70 7a40 	vsub.f32	s15, s0, s0
 800ffb2:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 800ffb6:	e55d      	b.n	800fa74 <__ieee754_powf+0x30>
 800ffb8:	ff800000 	.word	0xff800000
 800ffbc:	3f317218 	.word	0x3f317218
 800ffc0:	3f317200 	.word	0x3f317200
 800ffc4:	35bfbe8c 	.word	0x35bfbe8c
 800ffc8:	b5ddea0e 	.word	0xb5ddea0e
 800ffcc:	3331bb4c 	.word	0x3331bb4c
 800ffd0:	388ab355 	.word	0x388ab355
 800ffd4:	bb360b61 	.word	0xbb360b61
 800ffd8:	3e2aaaab 	.word	0x3e2aaaab
 800ffdc:	00000000 	.word	0x00000000

0800ffe0 <fabsf>:
 800ffe0:	ee10 3a10 	vmov	r3, s0
 800ffe4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800ffe8:	ee00 3a10 	vmov	s0, r3
 800ffec:	4770      	bx	lr
	...

0800fff0 <scalbnf>:
 800fff0:	ee10 3a10 	vmov	r3, s0
 800fff4:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 800fff8:	d02b      	beq.n	8010052 <scalbnf+0x62>
 800fffa:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 800fffe:	d302      	bcc.n	8010006 <scalbnf+0x16>
 8010000:	ee30 0a00 	vadd.f32	s0, s0, s0
 8010004:	4770      	bx	lr
 8010006:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 801000a:	d123      	bne.n	8010054 <scalbnf+0x64>
 801000c:	4b24      	ldr	r3, [pc, #144]	@ (80100a0 <scalbnf+0xb0>)
 801000e:	eddf 7a25 	vldr	s15, [pc, #148]	@ 80100a4 <scalbnf+0xb4>
 8010012:	4298      	cmp	r0, r3
 8010014:	ee20 0a27 	vmul.f32	s0, s0, s15
 8010018:	db17      	blt.n	801004a <scalbnf+0x5a>
 801001a:	ee10 3a10 	vmov	r3, s0
 801001e:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8010022:	3a19      	subs	r2, #25
 8010024:	f24c 3150 	movw	r1, #50000	@ 0xc350
 8010028:	4288      	cmp	r0, r1
 801002a:	dd15      	ble.n	8010058 <scalbnf+0x68>
 801002c:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 80100a8 <scalbnf+0xb8>
 8010030:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 80100ac <scalbnf+0xbc>
 8010034:	ee10 3a10 	vmov	r3, s0
 8010038:	eeb0 7a67 	vmov.f32	s14, s15
 801003c:	2b00      	cmp	r3, #0
 801003e:	bfb8      	it	lt
 8010040:	eef0 7a66 	vmovlt.f32	s15, s13
 8010044:	ee27 0a87 	vmul.f32	s0, s15, s14
 8010048:	4770      	bx	lr
 801004a:	eddf 7a19 	vldr	s15, [pc, #100]	@ 80100b0 <scalbnf+0xc0>
 801004e:	ee27 0a80 	vmul.f32	s0, s15, s0
 8010052:	4770      	bx	lr
 8010054:	0dd2      	lsrs	r2, r2, #23
 8010056:	e7e5      	b.n	8010024 <scalbnf+0x34>
 8010058:	4410      	add	r0, r2
 801005a:	28fe      	cmp	r0, #254	@ 0xfe
 801005c:	dce6      	bgt.n	801002c <scalbnf+0x3c>
 801005e:	2800      	cmp	r0, #0
 8010060:	dd06      	ble.n	8010070 <scalbnf+0x80>
 8010062:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8010066:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 801006a:	ee00 3a10 	vmov	s0, r3
 801006e:	4770      	bx	lr
 8010070:	f110 0f16 	cmn.w	r0, #22
 8010074:	da09      	bge.n	801008a <scalbnf+0x9a>
 8010076:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 80100b0 <scalbnf+0xc0>
 801007a:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 80100b4 <scalbnf+0xc4>
 801007e:	ee10 3a10 	vmov	r3, s0
 8010082:	eeb0 7a67 	vmov.f32	s14, s15
 8010086:	2b00      	cmp	r3, #0
 8010088:	e7d9      	b.n	801003e <scalbnf+0x4e>
 801008a:	3019      	adds	r0, #25
 801008c:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8010090:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8010094:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 80100b8 <scalbnf+0xc8>
 8010098:	ee07 3a90 	vmov	s15, r3
 801009c:	e7d7      	b.n	801004e <scalbnf+0x5e>
 801009e:	bf00      	nop
 80100a0:	ffff3cb0 	.word	0xffff3cb0
 80100a4:	4c000000 	.word	0x4c000000
 80100a8:	7149f2ca 	.word	0x7149f2ca
 80100ac:	f149f2ca 	.word	0xf149f2ca
 80100b0:	0da24260 	.word	0x0da24260
 80100b4:	8da24260 	.word	0x8da24260
 80100b8:	33000000 	.word	0x33000000

080100bc <with_errnof>:
 80100bc:	b510      	push	{r4, lr}
 80100be:	ed2d 8b02 	vpush	{d8}
 80100c2:	eeb0 8a40 	vmov.f32	s16, s0
 80100c6:	4604      	mov	r4, r0
 80100c8:	f7ff fb0a 	bl	800f6e0 <__errno>
 80100cc:	eeb0 0a48 	vmov.f32	s0, s16
 80100d0:	ecbd 8b02 	vpop	{d8}
 80100d4:	6004      	str	r4, [r0, #0]
 80100d6:	bd10      	pop	{r4, pc}

080100d8 <xflowf>:
 80100d8:	b130      	cbz	r0, 80100e8 <xflowf+0x10>
 80100da:	eef1 7a40 	vneg.f32	s15, s0
 80100de:	ee27 0a80 	vmul.f32	s0, s15, s0
 80100e2:	2022      	movs	r0, #34	@ 0x22
 80100e4:	f7ff bfea 	b.w	80100bc <with_errnof>
 80100e8:	eef0 7a40 	vmov.f32	s15, s0
 80100ec:	e7f7      	b.n	80100de <xflowf+0x6>
	...

080100f0 <__math_uflowf>:
 80100f0:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 80100f8 <__math_uflowf+0x8>
 80100f4:	f7ff bff0 	b.w	80100d8 <xflowf>
 80100f8:	10000000 	.word	0x10000000

080100fc <__math_oflowf>:
 80100fc:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8010104 <__math_oflowf+0x8>
 8010100:	f7ff bfea 	b.w	80100d8 <xflowf>
 8010104:	70000000 	.word	0x70000000

08010108 <__ieee754_sqrtf>:
 8010108:	eeb1 0ac0 	vsqrt.f32	s0, s0
 801010c:	4770      	bx	lr
	...

08010110 <_init>:
 8010110:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010112:	bf00      	nop
 8010114:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010116:	bc08      	pop	{r3}
 8010118:	469e      	mov	lr, r3
 801011a:	4770      	bx	lr

0801011c <_fini>:
 801011c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801011e:	bf00      	nop
 8010120:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010122:	bc08      	pop	{r3}
 8010124:	469e      	mov	lr, r3
 8010126:	4770      	bx	lr
