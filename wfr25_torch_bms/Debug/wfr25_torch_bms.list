
wfr25_torch_bms.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008bc0  080001c8  080001c8  000011c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000034  08008d88  08008d88  00009d88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008dbc  08008dbc  0000a060  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08008dbc  08008dbc  00009dbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008dc4  08008dc4  0000a060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008dc4  08008dc4  00009dc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008dc8  08008dc8  00009dc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08008dcc  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004d0  20000060  08008e2c  0000a060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000530  08008e2c  0000a530  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a060  2**0
                  CONTENTS, READONLY
 12 .debug_info   000133fa  00000000  00000000  0000a090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002e8a  00000000  00000000  0001d48a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010f0  00000000  00000000  00020318  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d04  00000000  00000000  00021408  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023eb7  00000000  00000000  0002210c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015768  00000000  00000000  00045fc3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e06f9  00000000  00000000  0005b72b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0013be24  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004ba0  00000000  00000000  0013be68  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  00140a08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	@ (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	@ (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	20000060 	.word	0x20000060
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08008d70 	.word	0x08008d70

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	@ (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	@ (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	@ (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000064 	.word	0x20000064
 8000204:	08008d70 	.word	0x08008d70

08000208 <__aeabi_drsub>:
 8000208:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800020c:	e002      	b.n	8000214 <__adddf3>
 800020e:	bf00      	nop

08000210 <__aeabi_dsub>:
 8000210:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000214 <__adddf3>:
 8000214:	b530      	push	{r4, r5, lr}
 8000216:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800021a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800021e:	ea94 0f05 	teq	r4, r5
 8000222:	bf08      	it	eq
 8000224:	ea90 0f02 	teqeq	r0, r2
 8000228:	bf1f      	itttt	ne
 800022a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800022e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000232:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000236:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800023a:	f000 80e2 	beq.w	8000402 <__adddf3+0x1ee>
 800023e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000242:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000246:	bfb8      	it	lt
 8000248:	426d      	neglt	r5, r5
 800024a:	dd0c      	ble.n	8000266 <__adddf3+0x52>
 800024c:	442c      	add	r4, r5
 800024e:	ea80 0202 	eor.w	r2, r0, r2
 8000252:	ea81 0303 	eor.w	r3, r1, r3
 8000256:	ea82 0000 	eor.w	r0, r2, r0
 800025a:	ea83 0101 	eor.w	r1, r3, r1
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	2d36      	cmp	r5, #54	@ 0x36
 8000268:	bf88      	it	hi
 800026a:	bd30      	pophi	{r4, r5, pc}
 800026c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000270:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000274:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000278:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800027c:	d002      	beq.n	8000284 <__adddf3+0x70>
 800027e:	4240      	negs	r0, r0
 8000280:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000284:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000288:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800028c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000290:	d002      	beq.n	8000298 <__adddf3+0x84>
 8000292:	4252      	negs	r2, r2
 8000294:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000298:	ea94 0f05 	teq	r4, r5
 800029c:	f000 80a7 	beq.w	80003ee <__adddf3+0x1da>
 80002a0:	f1a4 0401 	sub.w	r4, r4, #1
 80002a4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a8:	db0d      	blt.n	80002c6 <__adddf3+0xb2>
 80002aa:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ae:	fa22 f205 	lsr.w	r2, r2, r5
 80002b2:	1880      	adds	r0, r0, r2
 80002b4:	f141 0100 	adc.w	r1, r1, #0
 80002b8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002bc:	1880      	adds	r0, r0, r2
 80002be:	fa43 f305 	asr.w	r3, r3, r5
 80002c2:	4159      	adcs	r1, r3
 80002c4:	e00e      	b.n	80002e4 <__adddf3+0xd0>
 80002c6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ca:	f10e 0e20 	add.w	lr, lr, #32
 80002ce:	2a01      	cmp	r2, #1
 80002d0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002d4:	bf28      	it	cs
 80002d6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002da:	fa43 f305 	asr.w	r3, r3, r5
 80002de:	18c0      	adds	r0, r0, r3
 80002e0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002e4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002e8:	d507      	bpl.n	80002fa <__adddf3+0xe6>
 80002ea:	f04f 0e00 	mov.w	lr, #0
 80002ee:	f1dc 0c00 	rsbs	ip, ip, #0
 80002f2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002f6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002fa:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002fe:	d31b      	bcc.n	8000338 <__adddf3+0x124>
 8000300:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000304:	d30c      	bcc.n	8000320 <__adddf3+0x10c>
 8000306:	0849      	lsrs	r1, r1, #1
 8000308:	ea5f 0030 	movs.w	r0, r0, rrx
 800030c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000310:	f104 0401 	add.w	r4, r4, #1
 8000314:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000318:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800031c:	f080 809a 	bcs.w	8000454 <__adddf3+0x240>
 8000320:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	ea41 0105 	orr.w	r1, r1, r5
 8000336:	bd30      	pop	{r4, r5, pc}
 8000338:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800033c:	4140      	adcs	r0, r0
 800033e:	eb41 0101 	adc.w	r1, r1, r1
 8000342:	3c01      	subs	r4, #1
 8000344:	bf28      	it	cs
 8000346:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800034a:	d2e9      	bcs.n	8000320 <__adddf3+0x10c>
 800034c:	f091 0f00 	teq	r1, #0
 8000350:	bf04      	itt	eq
 8000352:	4601      	moveq	r1, r0
 8000354:	2000      	moveq	r0, #0
 8000356:	fab1 f381 	clz	r3, r1
 800035a:	bf08      	it	eq
 800035c:	3320      	addeq	r3, #32
 800035e:	f1a3 030b 	sub.w	r3, r3, #11
 8000362:	f1b3 0220 	subs.w	r2, r3, #32
 8000366:	da0c      	bge.n	8000382 <__adddf3+0x16e>
 8000368:	320c      	adds	r2, #12
 800036a:	dd08      	ble.n	800037e <__adddf3+0x16a>
 800036c:	f102 0c14 	add.w	ip, r2, #20
 8000370:	f1c2 020c 	rsb	r2, r2, #12
 8000374:	fa01 f00c 	lsl.w	r0, r1, ip
 8000378:	fa21 f102 	lsr.w	r1, r1, r2
 800037c:	e00c      	b.n	8000398 <__adddf3+0x184>
 800037e:	f102 0214 	add.w	r2, r2, #20
 8000382:	bfd8      	it	le
 8000384:	f1c2 0c20 	rsble	ip, r2, #32
 8000388:	fa01 f102 	lsl.w	r1, r1, r2
 800038c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000390:	bfdc      	itt	le
 8000392:	ea41 010c 	orrle.w	r1, r1, ip
 8000396:	4090      	lslle	r0, r2
 8000398:	1ae4      	subs	r4, r4, r3
 800039a:	bfa2      	ittt	ge
 800039c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003a0:	4329      	orrge	r1, r5
 80003a2:	bd30      	popge	{r4, r5, pc}
 80003a4:	ea6f 0404 	mvn.w	r4, r4
 80003a8:	3c1f      	subs	r4, #31
 80003aa:	da1c      	bge.n	80003e6 <__adddf3+0x1d2>
 80003ac:	340c      	adds	r4, #12
 80003ae:	dc0e      	bgt.n	80003ce <__adddf3+0x1ba>
 80003b0:	f104 0414 	add.w	r4, r4, #20
 80003b4:	f1c4 0220 	rsb	r2, r4, #32
 80003b8:	fa20 f004 	lsr.w	r0, r0, r4
 80003bc:	fa01 f302 	lsl.w	r3, r1, r2
 80003c0:	ea40 0003 	orr.w	r0, r0, r3
 80003c4:	fa21 f304 	lsr.w	r3, r1, r4
 80003c8:	ea45 0103 	orr.w	r1, r5, r3
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	f1c4 040c 	rsb	r4, r4, #12
 80003d2:	f1c4 0220 	rsb	r2, r4, #32
 80003d6:	fa20 f002 	lsr.w	r0, r0, r2
 80003da:	fa01 f304 	lsl.w	r3, r1, r4
 80003de:	ea40 0003 	orr.w	r0, r0, r3
 80003e2:	4629      	mov	r1, r5
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ea:	4629      	mov	r1, r5
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f094 0f00 	teq	r4, #0
 80003f2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003f6:	bf06      	itte	eq
 80003f8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003fc:	3401      	addeq	r4, #1
 80003fe:	3d01      	subne	r5, #1
 8000400:	e74e      	b.n	80002a0 <__adddf3+0x8c>
 8000402:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000406:	bf18      	it	ne
 8000408:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800040c:	d029      	beq.n	8000462 <__adddf3+0x24e>
 800040e:	ea94 0f05 	teq	r4, r5
 8000412:	bf08      	it	eq
 8000414:	ea90 0f02 	teqeq	r0, r2
 8000418:	d005      	beq.n	8000426 <__adddf3+0x212>
 800041a:	ea54 0c00 	orrs.w	ip, r4, r0
 800041e:	bf04      	itt	eq
 8000420:	4619      	moveq	r1, r3
 8000422:	4610      	moveq	r0, r2
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	ea91 0f03 	teq	r1, r3
 800042a:	bf1e      	ittt	ne
 800042c:	2100      	movne	r1, #0
 800042e:	2000      	movne	r0, #0
 8000430:	bd30      	popne	{r4, r5, pc}
 8000432:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000436:	d105      	bne.n	8000444 <__adddf3+0x230>
 8000438:	0040      	lsls	r0, r0, #1
 800043a:	4149      	adcs	r1, r1
 800043c:	bf28      	it	cs
 800043e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000442:	bd30      	pop	{r4, r5, pc}
 8000444:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000448:	bf3c      	itt	cc
 800044a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800044e:	bd30      	popcc	{r4, r5, pc}
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000454:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000458:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800045c:	f04f 0000 	mov.w	r0, #0
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000466:	bf1a      	itte	ne
 8000468:	4619      	movne	r1, r3
 800046a:	4610      	movne	r0, r2
 800046c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000470:	bf1c      	itt	ne
 8000472:	460b      	movne	r3, r1
 8000474:	4602      	movne	r2, r0
 8000476:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800047a:	bf06      	itte	eq
 800047c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000480:	ea91 0f03 	teqeq	r1, r3
 8000484:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	bf00      	nop

0800048c <__aeabi_ui2d>:
 800048c:	f090 0f00 	teq	r0, #0
 8000490:	bf04      	itt	eq
 8000492:	2100      	moveq	r1, #0
 8000494:	4770      	bxeq	lr
 8000496:	b530      	push	{r4, r5, lr}
 8000498:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800049c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004a0:	f04f 0500 	mov.w	r5, #0
 80004a4:	f04f 0100 	mov.w	r1, #0
 80004a8:	e750      	b.n	800034c <__adddf3+0x138>
 80004aa:	bf00      	nop

080004ac <__aeabi_i2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004c0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004c4:	bf48      	it	mi
 80004c6:	4240      	negmi	r0, r0
 80004c8:	f04f 0100 	mov.w	r1, #0
 80004cc:	e73e      	b.n	800034c <__adddf3+0x138>
 80004ce:	bf00      	nop

080004d0 <__aeabi_f2d>:
 80004d0:	0042      	lsls	r2, r0, #1
 80004d2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004d6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004da:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004de:	bf1f      	itttt	ne
 80004e0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004e4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004e8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004ec:	4770      	bxne	lr
 80004ee:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004f2:	bf08      	it	eq
 80004f4:	4770      	bxeq	lr
 80004f6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004fa:	bf04      	itt	eq
 80004fc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000500:	4770      	bxeq	lr
 8000502:	b530      	push	{r4, r5, lr}
 8000504:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000510:	e71c      	b.n	800034c <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_ul2d>:
 8000514:	ea50 0201 	orrs.w	r2, r0, r1
 8000518:	bf08      	it	eq
 800051a:	4770      	bxeq	lr
 800051c:	b530      	push	{r4, r5, lr}
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	e00a      	b.n	800053a <__aeabi_l2d+0x16>

08000524 <__aeabi_l2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000532:	d502      	bpl.n	800053a <__aeabi_l2d+0x16>
 8000534:	4240      	negs	r0, r0
 8000536:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800053a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800053e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000542:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000546:	f43f aed8 	beq.w	80002fa <__adddf3+0xe6>
 800054a:	f04f 0203 	mov.w	r2, #3
 800054e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000552:	bf18      	it	ne
 8000554:	3203      	addne	r2, #3
 8000556:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800055a:	bf18      	it	ne
 800055c:	3203      	addne	r2, #3
 800055e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000562:	f1c2 0320 	rsb	r3, r2, #32
 8000566:	fa00 fc03 	lsl.w	ip, r0, r3
 800056a:	fa20 f002 	lsr.w	r0, r0, r2
 800056e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000572:	ea40 000e 	orr.w	r0, r0, lr
 8000576:	fa21 f102 	lsr.w	r1, r1, r2
 800057a:	4414      	add	r4, r2
 800057c:	e6bd      	b.n	80002fa <__adddf3+0xe6>
 800057e:	bf00      	nop

08000580 <__aeabi_dmul>:
 8000580:	b570      	push	{r4, r5, r6, lr}
 8000582:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000586:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800058a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800058e:	bf1d      	ittte	ne
 8000590:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000594:	ea94 0f0c 	teqne	r4, ip
 8000598:	ea95 0f0c 	teqne	r5, ip
 800059c:	f000 f8de 	bleq	800075c <__aeabi_dmul+0x1dc>
 80005a0:	442c      	add	r4, r5
 80005a2:	ea81 0603 	eor.w	r6, r1, r3
 80005a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005b2:	bf18      	it	ne
 80005b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005bc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005c0:	d038      	beq.n	8000634 <__aeabi_dmul+0xb4>
 80005c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ce:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005d6:	f04f 0600 	mov.w	r6, #0
 80005da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005de:	f09c 0f00 	teq	ip, #0
 80005e2:	bf18      	it	ne
 80005e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005e8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005ec:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005f0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005f4:	d204      	bcs.n	8000600 <__aeabi_dmul+0x80>
 80005f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005fa:	416d      	adcs	r5, r5
 80005fc:	eb46 0606 	adc.w	r6, r6, r6
 8000600:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000604:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000608:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800060c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000610:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000614:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000618:	bf88      	it	hi
 800061a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800061e:	d81e      	bhi.n	800065e <__aeabi_dmul+0xde>
 8000620:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000624:	bf08      	it	eq
 8000626:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800062a:	f150 0000 	adcs.w	r0, r0, #0
 800062e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000632:	bd70      	pop	{r4, r5, r6, pc}
 8000634:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000638:	ea46 0101 	orr.w	r1, r6, r1
 800063c:	ea40 0002 	orr.w	r0, r0, r2
 8000640:	ea81 0103 	eor.w	r1, r1, r3
 8000644:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000648:	bfc2      	ittt	gt
 800064a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800064e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000652:	bd70      	popgt	{r4, r5, r6, pc}
 8000654:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000658:	f04f 0e00 	mov.w	lr, #0
 800065c:	3c01      	subs	r4, #1
 800065e:	f300 80ab 	bgt.w	80007b8 <__aeabi_dmul+0x238>
 8000662:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000666:	bfde      	ittt	le
 8000668:	2000      	movle	r0, #0
 800066a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800066e:	bd70      	pople	{r4, r5, r6, pc}
 8000670:	f1c4 0400 	rsb	r4, r4, #0
 8000674:	3c20      	subs	r4, #32
 8000676:	da35      	bge.n	80006e4 <__aeabi_dmul+0x164>
 8000678:	340c      	adds	r4, #12
 800067a:	dc1b      	bgt.n	80006b4 <__aeabi_dmul+0x134>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f305 	lsl.w	r3, r0, r5
 8000688:	fa20 f004 	lsr.w	r0, r0, r4
 800068c:	fa01 f205 	lsl.w	r2, r1, r5
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000698:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800069c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a0:	fa21 f604 	lsr.w	r6, r1, r4
 80006a4:	eb42 0106 	adc.w	r1, r2, r6
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 040c 	rsb	r4, r4, #12
 80006b8:	f1c4 0520 	rsb	r5, r4, #32
 80006bc:	fa00 f304 	lsl.w	r3, r0, r4
 80006c0:	fa20 f005 	lsr.w	r0, r0, r5
 80006c4:	fa01 f204 	lsl.w	r2, r1, r4
 80006c8:	ea40 0002 	orr.w	r0, r0, r2
 80006cc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d4:	f141 0100 	adc.w	r1, r1, #0
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 0520 	rsb	r5, r4, #32
 80006e8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80006f0:	fa20 f304 	lsr.w	r3, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea43 0302 	orr.w	r3, r3, r2
 80006fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000704:	fa21 f204 	lsr.w	r2, r1, r4
 8000708:	ea20 0002 	bic.w	r0, r0, r2
 800070c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f094 0f00 	teq	r4, #0
 8000720:	d10f      	bne.n	8000742 <__aeabi_dmul+0x1c2>
 8000722:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000726:	0040      	lsls	r0, r0, #1
 8000728:	eb41 0101 	adc.w	r1, r1, r1
 800072c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000730:	bf08      	it	eq
 8000732:	3c01      	subeq	r4, #1
 8000734:	d0f7      	beq.n	8000726 <__aeabi_dmul+0x1a6>
 8000736:	ea41 0106 	orr.w	r1, r1, r6
 800073a:	f095 0f00 	teq	r5, #0
 800073e:	bf18      	it	ne
 8000740:	4770      	bxne	lr
 8000742:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000746:	0052      	lsls	r2, r2, #1
 8000748:	eb43 0303 	adc.w	r3, r3, r3
 800074c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000750:	bf08      	it	eq
 8000752:	3d01      	subeq	r5, #1
 8000754:	d0f7      	beq.n	8000746 <__aeabi_dmul+0x1c6>
 8000756:	ea43 0306 	orr.w	r3, r3, r6
 800075a:	4770      	bx	lr
 800075c:	ea94 0f0c 	teq	r4, ip
 8000760:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000764:	bf18      	it	ne
 8000766:	ea95 0f0c 	teqne	r5, ip
 800076a:	d00c      	beq.n	8000786 <__aeabi_dmul+0x206>
 800076c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000770:	bf18      	it	ne
 8000772:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000776:	d1d1      	bne.n	800071c <__aeabi_dmul+0x19c>
 8000778:	ea81 0103 	eor.w	r1, r1, r3
 800077c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000780:	f04f 0000 	mov.w	r0, #0
 8000784:	bd70      	pop	{r4, r5, r6, pc}
 8000786:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800078a:	bf06      	itte	eq
 800078c:	4610      	moveq	r0, r2
 800078e:	4619      	moveq	r1, r3
 8000790:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000794:	d019      	beq.n	80007ca <__aeabi_dmul+0x24a>
 8000796:	ea94 0f0c 	teq	r4, ip
 800079a:	d102      	bne.n	80007a2 <__aeabi_dmul+0x222>
 800079c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007a0:	d113      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007a2:	ea95 0f0c 	teq	r5, ip
 80007a6:	d105      	bne.n	80007b4 <__aeabi_dmul+0x234>
 80007a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007ac:	bf1c      	itt	ne
 80007ae:	4610      	movne	r0, r2
 80007b0:	4619      	movne	r1, r3
 80007b2:	d10a      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007b4:	ea81 0103 	eor.w	r1, r1, r3
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007c0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007c4:	f04f 0000 	mov.w	r0, #0
 80007c8:	bd70      	pop	{r4, r5, r6, pc}
 80007ca:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007ce:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007d2:	bd70      	pop	{r4, r5, r6, pc}

080007d4 <__aeabi_ddiv>:
 80007d4:	b570      	push	{r4, r5, r6, lr}
 80007d6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007da:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007de:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007e2:	bf1d      	ittte	ne
 80007e4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007e8:	ea94 0f0c 	teqne	r4, ip
 80007ec:	ea95 0f0c 	teqne	r5, ip
 80007f0:	f000 f8a7 	bleq	8000942 <__aeabi_ddiv+0x16e>
 80007f4:	eba4 0405 	sub.w	r4, r4, r5
 80007f8:	ea81 0e03 	eor.w	lr, r1, r3
 80007fc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000800:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000804:	f000 8088 	beq.w	8000918 <__aeabi_ddiv+0x144>
 8000808:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800080c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000810:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000814:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000818:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800081c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000820:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000824:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000828:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800082c:	429d      	cmp	r5, r3
 800082e:	bf08      	it	eq
 8000830:	4296      	cmpeq	r6, r2
 8000832:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000836:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800083a:	d202      	bcs.n	8000842 <__aeabi_ddiv+0x6e>
 800083c:	085b      	lsrs	r3, r3, #1
 800083e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000842:	1ab6      	subs	r6, r6, r2
 8000844:	eb65 0503 	sbc.w	r5, r5, r3
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000852:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 000c 	orrcs.w	r0, r0, ip
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008b0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008b4:	d018      	beq.n	80008e8 <__aeabi_ddiv+0x114>
 80008b6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ba:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008be:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008c2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008c6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ca:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ce:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008d2:	d1c0      	bne.n	8000856 <__aeabi_ddiv+0x82>
 80008d4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008d8:	d10b      	bne.n	80008f2 <__aeabi_ddiv+0x11e>
 80008da:	ea41 0100 	orr.w	r1, r1, r0
 80008de:	f04f 0000 	mov.w	r0, #0
 80008e2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008e6:	e7b6      	b.n	8000856 <__aeabi_ddiv+0x82>
 80008e8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008ec:	bf04      	itt	eq
 80008ee:	4301      	orreq	r1, r0
 80008f0:	2000      	moveq	r0, #0
 80008f2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008f6:	bf88      	it	hi
 80008f8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008fc:	f63f aeaf 	bhi.w	800065e <__aeabi_dmul+0xde>
 8000900:	ebb5 0c03 	subs.w	ip, r5, r3
 8000904:	bf04      	itt	eq
 8000906:	ebb6 0c02 	subseq.w	ip, r6, r2
 800090a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800090e:	f150 0000 	adcs.w	r0, r0, #0
 8000912:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000916:	bd70      	pop	{r4, r5, r6, pc}
 8000918:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800091c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000920:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000924:	bfc2      	ittt	gt
 8000926:	ebd4 050c 	rsbsgt	r5, r4, ip
 800092a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800092e:	bd70      	popgt	{r4, r5, r6, pc}
 8000930:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000934:	f04f 0e00 	mov.w	lr, #0
 8000938:	3c01      	subs	r4, #1
 800093a:	e690      	b.n	800065e <__aeabi_dmul+0xde>
 800093c:	ea45 0e06 	orr.w	lr, r5, r6
 8000940:	e68d      	b.n	800065e <__aeabi_dmul+0xde>
 8000942:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000946:	ea94 0f0c 	teq	r4, ip
 800094a:	bf08      	it	eq
 800094c:	ea95 0f0c 	teqeq	r5, ip
 8000950:	f43f af3b 	beq.w	80007ca <__aeabi_dmul+0x24a>
 8000954:	ea94 0f0c 	teq	r4, ip
 8000958:	d10a      	bne.n	8000970 <__aeabi_ddiv+0x19c>
 800095a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800095e:	f47f af34 	bne.w	80007ca <__aeabi_dmul+0x24a>
 8000962:	ea95 0f0c 	teq	r5, ip
 8000966:	f47f af25 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800096a:	4610      	mov	r0, r2
 800096c:	4619      	mov	r1, r3
 800096e:	e72c      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000970:	ea95 0f0c 	teq	r5, ip
 8000974:	d106      	bne.n	8000984 <__aeabi_ddiv+0x1b0>
 8000976:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800097a:	f43f aefd 	beq.w	8000778 <__aeabi_dmul+0x1f8>
 800097e:	4610      	mov	r0, r2
 8000980:	4619      	mov	r1, r3
 8000982:	e722      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000984:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800098e:	f47f aec5 	bne.w	800071c <__aeabi_dmul+0x19c>
 8000992:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000996:	f47f af0d 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800099a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800099e:	f47f aeeb 	bne.w	8000778 <__aeabi_dmul+0x1f8>
 80009a2:	e712      	b.n	80007ca <__aeabi_dmul+0x24a>

080009a4 <__aeabi_d2f>:
 80009a4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009a8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 80009ac:	bf24      	itt	cs
 80009ae:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 80009b2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 80009b6:	d90d      	bls.n	80009d4 <__aeabi_d2f+0x30>
 80009b8:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80009bc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80009c0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80009c4:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 80009c8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80009cc:	bf08      	it	eq
 80009ce:	f020 0001 	biceq.w	r0, r0, #1
 80009d2:	4770      	bx	lr
 80009d4:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 80009d8:	d121      	bne.n	8000a1e <__aeabi_d2f+0x7a>
 80009da:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 80009de:	bfbc      	itt	lt
 80009e0:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 80009e4:	4770      	bxlt	lr
 80009e6:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ea:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009ee:	f1c2 0218 	rsb	r2, r2, #24
 80009f2:	f1c2 0c20 	rsb	ip, r2, #32
 80009f6:	fa10 f30c 	lsls.w	r3, r0, ip
 80009fa:	fa20 f002 	lsr.w	r0, r0, r2
 80009fe:	bf18      	it	ne
 8000a00:	f040 0001 	orrne.w	r0, r0, #1
 8000a04:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a08:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a0c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a10:	ea40 000c 	orr.w	r0, r0, ip
 8000a14:	fa23 f302 	lsr.w	r3, r3, r2
 8000a18:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a1c:	e7cc      	b.n	80009b8 <__aeabi_d2f+0x14>
 8000a1e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a22:	d107      	bne.n	8000a34 <__aeabi_d2f+0x90>
 8000a24:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a28:	bf1e      	ittt	ne
 8000a2a:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000a2e:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000a32:	4770      	bxne	lr
 8000a34:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000a38:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000a3c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000a40:	4770      	bx	lr
 8000a42:	bf00      	nop

08000a44 <__aeabi_uldivmod>:
 8000a44:	b953      	cbnz	r3, 8000a5c <__aeabi_uldivmod+0x18>
 8000a46:	b94a      	cbnz	r2, 8000a5c <__aeabi_uldivmod+0x18>
 8000a48:	2900      	cmp	r1, #0
 8000a4a:	bf08      	it	eq
 8000a4c:	2800      	cmpeq	r0, #0
 8000a4e:	bf1c      	itt	ne
 8000a50:	f04f 31ff 	movne.w	r1, #4294967295
 8000a54:	f04f 30ff 	movne.w	r0, #4294967295
 8000a58:	f000 b988 	b.w	8000d6c <__aeabi_idiv0>
 8000a5c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a60:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a64:	f000 f806 	bl	8000a74 <__udivmoddi4>
 8000a68:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a6c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a70:	b004      	add	sp, #16
 8000a72:	4770      	bx	lr

08000a74 <__udivmoddi4>:
 8000a74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a78:	9d08      	ldr	r5, [sp, #32]
 8000a7a:	468e      	mov	lr, r1
 8000a7c:	4604      	mov	r4, r0
 8000a7e:	4688      	mov	r8, r1
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d14a      	bne.n	8000b1a <__udivmoddi4+0xa6>
 8000a84:	428a      	cmp	r2, r1
 8000a86:	4617      	mov	r7, r2
 8000a88:	d962      	bls.n	8000b50 <__udivmoddi4+0xdc>
 8000a8a:	fab2 f682 	clz	r6, r2
 8000a8e:	b14e      	cbz	r6, 8000aa4 <__udivmoddi4+0x30>
 8000a90:	f1c6 0320 	rsb	r3, r6, #32
 8000a94:	fa01 f806 	lsl.w	r8, r1, r6
 8000a98:	fa20 f303 	lsr.w	r3, r0, r3
 8000a9c:	40b7      	lsls	r7, r6
 8000a9e:	ea43 0808 	orr.w	r8, r3, r8
 8000aa2:	40b4      	lsls	r4, r6
 8000aa4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000aa8:	fa1f fc87 	uxth.w	ip, r7
 8000aac:	fbb8 f1fe 	udiv	r1, r8, lr
 8000ab0:	0c23      	lsrs	r3, r4, #16
 8000ab2:	fb0e 8811 	mls	r8, lr, r1, r8
 8000ab6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000aba:	fb01 f20c 	mul.w	r2, r1, ip
 8000abe:	429a      	cmp	r2, r3
 8000ac0:	d909      	bls.n	8000ad6 <__udivmoddi4+0x62>
 8000ac2:	18fb      	adds	r3, r7, r3
 8000ac4:	f101 30ff 	add.w	r0, r1, #4294967295
 8000ac8:	f080 80ea 	bcs.w	8000ca0 <__udivmoddi4+0x22c>
 8000acc:	429a      	cmp	r2, r3
 8000ace:	f240 80e7 	bls.w	8000ca0 <__udivmoddi4+0x22c>
 8000ad2:	3902      	subs	r1, #2
 8000ad4:	443b      	add	r3, r7
 8000ad6:	1a9a      	subs	r2, r3, r2
 8000ad8:	b2a3      	uxth	r3, r4
 8000ada:	fbb2 f0fe 	udiv	r0, r2, lr
 8000ade:	fb0e 2210 	mls	r2, lr, r0, r2
 8000ae2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000ae6:	fb00 fc0c 	mul.w	ip, r0, ip
 8000aea:	459c      	cmp	ip, r3
 8000aec:	d909      	bls.n	8000b02 <__udivmoddi4+0x8e>
 8000aee:	18fb      	adds	r3, r7, r3
 8000af0:	f100 32ff 	add.w	r2, r0, #4294967295
 8000af4:	f080 80d6 	bcs.w	8000ca4 <__udivmoddi4+0x230>
 8000af8:	459c      	cmp	ip, r3
 8000afa:	f240 80d3 	bls.w	8000ca4 <__udivmoddi4+0x230>
 8000afe:	443b      	add	r3, r7
 8000b00:	3802      	subs	r0, #2
 8000b02:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000b06:	eba3 030c 	sub.w	r3, r3, ip
 8000b0a:	2100      	movs	r1, #0
 8000b0c:	b11d      	cbz	r5, 8000b16 <__udivmoddi4+0xa2>
 8000b0e:	40f3      	lsrs	r3, r6
 8000b10:	2200      	movs	r2, #0
 8000b12:	e9c5 3200 	strd	r3, r2, [r5]
 8000b16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b1a:	428b      	cmp	r3, r1
 8000b1c:	d905      	bls.n	8000b2a <__udivmoddi4+0xb6>
 8000b1e:	b10d      	cbz	r5, 8000b24 <__udivmoddi4+0xb0>
 8000b20:	e9c5 0100 	strd	r0, r1, [r5]
 8000b24:	2100      	movs	r1, #0
 8000b26:	4608      	mov	r0, r1
 8000b28:	e7f5      	b.n	8000b16 <__udivmoddi4+0xa2>
 8000b2a:	fab3 f183 	clz	r1, r3
 8000b2e:	2900      	cmp	r1, #0
 8000b30:	d146      	bne.n	8000bc0 <__udivmoddi4+0x14c>
 8000b32:	4573      	cmp	r3, lr
 8000b34:	d302      	bcc.n	8000b3c <__udivmoddi4+0xc8>
 8000b36:	4282      	cmp	r2, r0
 8000b38:	f200 8105 	bhi.w	8000d46 <__udivmoddi4+0x2d2>
 8000b3c:	1a84      	subs	r4, r0, r2
 8000b3e:	eb6e 0203 	sbc.w	r2, lr, r3
 8000b42:	2001      	movs	r0, #1
 8000b44:	4690      	mov	r8, r2
 8000b46:	2d00      	cmp	r5, #0
 8000b48:	d0e5      	beq.n	8000b16 <__udivmoddi4+0xa2>
 8000b4a:	e9c5 4800 	strd	r4, r8, [r5]
 8000b4e:	e7e2      	b.n	8000b16 <__udivmoddi4+0xa2>
 8000b50:	2a00      	cmp	r2, #0
 8000b52:	f000 8090 	beq.w	8000c76 <__udivmoddi4+0x202>
 8000b56:	fab2 f682 	clz	r6, r2
 8000b5a:	2e00      	cmp	r6, #0
 8000b5c:	f040 80a4 	bne.w	8000ca8 <__udivmoddi4+0x234>
 8000b60:	1a8a      	subs	r2, r1, r2
 8000b62:	0c03      	lsrs	r3, r0, #16
 8000b64:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000b68:	b280      	uxth	r0, r0
 8000b6a:	b2bc      	uxth	r4, r7
 8000b6c:	2101      	movs	r1, #1
 8000b6e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000b72:	fb0e 221c 	mls	r2, lr, ip, r2
 8000b76:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000b7a:	fb04 f20c 	mul.w	r2, r4, ip
 8000b7e:	429a      	cmp	r2, r3
 8000b80:	d907      	bls.n	8000b92 <__udivmoddi4+0x11e>
 8000b82:	18fb      	adds	r3, r7, r3
 8000b84:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000b88:	d202      	bcs.n	8000b90 <__udivmoddi4+0x11c>
 8000b8a:	429a      	cmp	r2, r3
 8000b8c:	f200 80e0 	bhi.w	8000d50 <__udivmoddi4+0x2dc>
 8000b90:	46c4      	mov	ip, r8
 8000b92:	1a9b      	subs	r3, r3, r2
 8000b94:	fbb3 f2fe 	udiv	r2, r3, lr
 8000b98:	fb0e 3312 	mls	r3, lr, r2, r3
 8000b9c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000ba0:	fb02 f404 	mul.w	r4, r2, r4
 8000ba4:	429c      	cmp	r4, r3
 8000ba6:	d907      	bls.n	8000bb8 <__udivmoddi4+0x144>
 8000ba8:	18fb      	adds	r3, r7, r3
 8000baa:	f102 30ff 	add.w	r0, r2, #4294967295
 8000bae:	d202      	bcs.n	8000bb6 <__udivmoddi4+0x142>
 8000bb0:	429c      	cmp	r4, r3
 8000bb2:	f200 80ca 	bhi.w	8000d4a <__udivmoddi4+0x2d6>
 8000bb6:	4602      	mov	r2, r0
 8000bb8:	1b1b      	subs	r3, r3, r4
 8000bba:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000bbe:	e7a5      	b.n	8000b0c <__udivmoddi4+0x98>
 8000bc0:	f1c1 0620 	rsb	r6, r1, #32
 8000bc4:	408b      	lsls	r3, r1
 8000bc6:	fa22 f706 	lsr.w	r7, r2, r6
 8000bca:	431f      	orrs	r7, r3
 8000bcc:	fa0e f401 	lsl.w	r4, lr, r1
 8000bd0:	fa20 f306 	lsr.w	r3, r0, r6
 8000bd4:	fa2e fe06 	lsr.w	lr, lr, r6
 8000bd8:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000bdc:	4323      	orrs	r3, r4
 8000bde:	fa00 f801 	lsl.w	r8, r0, r1
 8000be2:	fa1f fc87 	uxth.w	ip, r7
 8000be6:	fbbe f0f9 	udiv	r0, lr, r9
 8000bea:	0c1c      	lsrs	r4, r3, #16
 8000bec:	fb09 ee10 	mls	lr, r9, r0, lr
 8000bf0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000bf4:	fb00 fe0c 	mul.w	lr, r0, ip
 8000bf8:	45a6      	cmp	lr, r4
 8000bfa:	fa02 f201 	lsl.w	r2, r2, r1
 8000bfe:	d909      	bls.n	8000c14 <__udivmoddi4+0x1a0>
 8000c00:	193c      	adds	r4, r7, r4
 8000c02:	f100 3aff 	add.w	sl, r0, #4294967295
 8000c06:	f080 809c 	bcs.w	8000d42 <__udivmoddi4+0x2ce>
 8000c0a:	45a6      	cmp	lr, r4
 8000c0c:	f240 8099 	bls.w	8000d42 <__udivmoddi4+0x2ce>
 8000c10:	3802      	subs	r0, #2
 8000c12:	443c      	add	r4, r7
 8000c14:	eba4 040e 	sub.w	r4, r4, lr
 8000c18:	fa1f fe83 	uxth.w	lr, r3
 8000c1c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000c20:	fb09 4413 	mls	r4, r9, r3, r4
 8000c24:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000c28:	fb03 fc0c 	mul.w	ip, r3, ip
 8000c2c:	45a4      	cmp	ip, r4
 8000c2e:	d908      	bls.n	8000c42 <__udivmoddi4+0x1ce>
 8000c30:	193c      	adds	r4, r7, r4
 8000c32:	f103 3eff 	add.w	lr, r3, #4294967295
 8000c36:	f080 8082 	bcs.w	8000d3e <__udivmoddi4+0x2ca>
 8000c3a:	45a4      	cmp	ip, r4
 8000c3c:	d97f      	bls.n	8000d3e <__udivmoddi4+0x2ca>
 8000c3e:	3b02      	subs	r3, #2
 8000c40:	443c      	add	r4, r7
 8000c42:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000c46:	eba4 040c 	sub.w	r4, r4, ip
 8000c4a:	fba0 ec02 	umull	lr, ip, r0, r2
 8000c4e:	4564      	cmp	r4, ip
 8000c50:	4673      	mov	r3, lr
 8000c52:	46e1      	mov	r9, ip
 8000c54:	d362      	bcc.n	8000d1c <__udivmoddi4+0x2a8>
 8000c56:	d05f      	beq.n	8000d18 <__udivmoddi4+0x2a4>
 8000c58:	b15d      	cbz	r5, 8000c72 <__udivmoddi4+0x1fe>
 8000c5a:	ebb8 0203 	subs.w	r2, r8, r3
 8000c5e:	eb64 0409 	sbc.w	r4, r4, r9
 8000c62:	fa04 f606 	lsl.w	r6, r4, r6
 8000c66:	fa22 f301 	lsr.w	r3, r2, r1
 8000c6a:	431e      	orrs	r6, r3
 8000c6c:	40cc      	lsrs	r4, r1
 8000c6e:	e9c5 6400 	strd	r6, r4, [r5]
 8000c72:	2100      	movs	r1, #0
 8000c74:	e74f      	b.n	8000b16 <__udivmoddi4+0xa2>
 8000c76:	fbb1 fcf2 	udiv	ip, r1, r2
 8000c7a:	0c01      	lsrs	r1, r0, #16
 8000c7c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000c80:	b280      	uxth	r0, r0
 8000c82:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000c86:	463b      	mov	r3, r7
 8000c88:	4638      	mov	r0, r7
 8000c8a:	463c      	mov	r4, r7
 8000c8c:	46b8      	mov	r8, r7
 8000c8e:	46be      	mov	lr, r7
 8000c90:	2620      	movs	r6, #32
 8000c92:	fbb1 f1f7 	udiv	r1, r1, r7
 8000c96:	eba2 0208 	sub.w	r2, r2, r8
 8000c9a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000c9e:	e766      	b.n	8000b6e <__udivmoddi4+0xfa>
 8000ca0:	4601      	mov	r1, r0
 8000ca2:	e718      	b.n	8000ad6 <__udivmoddi4+0x62>
 8000ca4:	4610      	mov	r0, r2
 8000ca6:	e72c      	b.n	8000b02 <__udivmoddi4+0x8e>
 8000ca8:	f1c6 0220 	rsb	r2, r6, #32
 8000cac:	fa2e f302 	lsr.w	r3, lr, r2
 8000cb0:	40b7      	lsls	r7, r6
 8000cb2:	40b1      	lsls	r1, r6
 8000cb4:	fa20 f202 	lsr.w	r2, r0, r2
 8000cb8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cbc:	430a      	orrs	r2, r1
 8000cbe:	fbb3 f8fe 	udiv	r8, r3, lr
 8000cc2:	b2bc      	uxth	r4, r7
 8000cc4:	fb0e 3318 	mls	r3, lr, r8, r3
 8000cc8:	0c11      	lsrs	r1, r2, #16
 8000cca:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cce:	fb08 f904 	mul.w	r9, r8, r4
 8000cd2:	40b0      	lsls	r0, r6
 8000cd4:	4589      	cmp	r9, r1
 8000cd6:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000cda:	b280      	uxth	r0, r0
 8000cdc:	d93e      	bls.n	8000d5c <__udivmoddi4+0x2e8>
 8000cde:	1879      	adds	r1, r7, r1
 8000ce0:	f108 3cff 	add.w	ip, r8, #4294967295
 8000ce4:	d201      	bcs.n	8000cea <__udivmoddi4+0x276>
 8000ce6:	4589      	cmp	r9, r1
 8000ce8:	d81f      	bhi.n	8000d2a <__udivmoddi4+0x2b6>
 8000cea:	eba1 0109 	sub.w	r1, r1, r9
 8000cee:	fbb1 f9fe 	udiv	r9, r1, lr
 8000cf2:	fb09 f804 	mul.w	r8, r9, r4
 8000cf6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000cfa:	b292      	uxth	r2, r2
 8000cfc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000d00:	4542      	cmp	r2, r8
 8000d02:	d229      	bcs.n	8000d58 <__udivmoddi4+0x2e4>
 8000d04:	18ba      	adds	r2, r7, r2
 8000d06:	f109 31ff 	add.w	r1, r9, #4294967295
 8000d0a:	d2c4      	bcs.n	8000c96 <__udivmoddi4+0x222>
 8000d0c:	4542      	cmp	r2, r8
 8000d0e:	d2c2      	bcs.n	8000c96 <__udivmoddi4+0x222>
 8000d10:	f1a9 0102 	sub.w	r1, r9, #2
 8000d14:	443a      	add	r2, r7
 8000d16:	e7be      	b.n	8000c96 <__udivmoddi4+0x222>
 8000d18:	45f0      	cmp	r8, lr
 8000d1a:	d29d      	bcs.n	8000c58 <__udivmoddi4+0x1e4>
 8000d1c:	ebbe 0302 	subs.w	r3, lr, r2
 8000d20:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000d24:	3801      	subs	r0, #1
 8000d26:	46e1      	mov	r9, ip
 8000d28:	e796      	b.n	8000c58 <__udivmoddi4+0x1e4>
 8000d2a:	eba7 0909 	sub.w	r9, r7, r9
 8000d2e:	4449      	add	r1, r9
 8000d30:	f1a8 0c02 	sub.w	ip, r8, #2
 8000d34:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d38:	fb09 f804 	mul.w	r8, r9, r4
 8000d3c:	e7db      	b.n	8000cf6 <__udivmoddi4+0x282>
 8000d3e:	4673      	mov	r3, lr
 8000d40:	e77f      	b.n	8000c42 <__udivmoddi4+0x1ce>
 8000d42:	4650      	mov	r0, sl
 8000d44:	e766      	b.n	8000c14 <__udivmoddi4+0x1a0>
 8000d46:	4608      	mov	r0, r1
 8000d48:	e6fd      	b.n	8000b46 <__udivmoddi4+0xd2>
 8000d4a:	443b      	add	r3, r7
 8000d4c:	3a02      	subs	r2, #2
 8000d4e:	e733      	b.n	8000bb8 <__udivmoddi4+0x144>
 8000d50:	f1ac 0c02 	sub.w	ip, ip, #2
 8000d54:	443b      	add	r3, r7
 8000d56:	e71c      	b.n	8000b92 <__udivmoddi4+0x11e>
 8000d58:	4649      	mov	r1, r9
 8000d5a:	e79c      	b.n	8000c96 <__udivmoddi4+0x222>
 8000d5c:	eba1 0109 	sub.w	r1, r1, r9
 8000d60:	46c4      	mov	ip, r8
 8000d62:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d66:	fb09 f804 	mul.w	r8, r9, r4
 8000d6a:	e7c4      	b.n	8000cf6 <__udivmoddi4+0x282>

08000d6c <__aeabi_idiv0>:
 8000d6c:	4770      	bx	lr
 8000d6e:	bf00      	nop

08000d70 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d74:	f003 fe12 	bl	800499c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d78:	f000 f812 	bl	8000da0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d7c:	f000 fa04 	bl	8001188 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000d80:	f000 f942 	bl	8001008 <MX_SPI1_Init>
  MX_SPI3_Init();
 8000d84:	f000 f976 	bl	8001074 <MX_SPI3_Init>
  MX_ADC1_Init();
 8000d88:	f000 f878 	bl	8000e7c <MX_ADC1_Init>
  MX_TIM2_Init();
 8000d8c:	f000 f9a8 	bl	80010e0 <MX_TIM2_Init>
  MX_CAN1_Init(1);
 8000d90:	2001      	movs	r0, #1
 8000d92:	f000 f8c5 	bl	8000f20 <MX_CAN1_Init>
  /* USER CODE BEGIN 2 */
  torch_main();
 8000d96:	f001 fee1 	bl	8002b5c <torch_main>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000d9a:	bf00      	nop
 8000d9c:	e7fd      	b.n	8000d9a <main+0x2a>
	...

08000da0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b094      	sub	sp, #80	@ 0x50
 8000da4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000da6:	f107 031c 	add.w	r3, r7, #28
 8000daa:	2234      	movs	r2, #52	@ 0x34
 8000dac:	2100      	movs	r1, #0
 8000dae:	4618      	mov	r0, r3
 8000db0:	f007 fabe 	bl	8008330 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000db4:	f107 0308 	add.w	r3, r7, #8
 8000db8:	2200      	movs	r2, #0
 8000dba:	601a      	str	r2, [r3, #0]
 8000dbc:	605a      	str	r2, [r3, #4]
 8000dbe:	609a      	str	r2, [r3, #8]
 8000dc0:	60da      	str	r2, [r3, #12]
 8000dc2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	607b      	str	r3, [r7, #4]
 8000dc8:	4b2a      	ldr	r3, [pc, #168]	@ (8000e74 <SystemClock_Config+0xd4>)
 8000dca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dcc:	4a29      	ldr	r2, [pc, #164]	@ (8000e74 <SystemClock_Config+0xd4>)
 8000dce:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000dd2:	6413      	str	r3, [r2, #64]	@ 0x40
 8000dd4:	4b27      	ldr	r3, [pc, #156]	@ (8000e74 <SystemClock_Config+0xd4>)
 8000dd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dd8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ddc:	607b      	str	r3, [r7, #4]
 8000dde:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000de0:	2300      	movs	r3, #0
 8000de2:	603b      	str	r3, [r7, #0]
 8000de4:	4b24      	ldr	r3, [pc, #144]	@ (8000e78 <SystemClock_Config+0xd8>)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000dec:	4a22      	ldr	r2, [pc, #136]	@ (8000e78 <SystemClock_Config+0xd8>)
 8000dee:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000df2:	6013      	str	r3, [r2, #0]
 8000df4:	4b20      	ldr	r3, [pc, #128]	@ (8000e78 <SystemClock_Config+0xd8>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000dfc:	603b      	str	r3, [r7, #0]
 8000dfe:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000e00:	2301      	movs	r3, #1
 8000e02:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000e04:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000e08:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e0a:	2302      	movs	r3, #2
 8000e0c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e0e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000e12:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000e14:	2310      	movs	r3, #16
 8000e16:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000e18:	23c0      	movs	r3, #192	@ 0xc0
 8000e1a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000e1c:	2302      	movs	r3, #2
 8000e1e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000e20:	2302      	movs	r3, #2
 8000e22:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000e24:	2302      	movs	r3, #2
 8000e26:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e28:	f107 031c 	add.w	r3, r7, #28
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	f005 feeb 	bl	8006c08 <HAL_RCC_OscConfig>
 8000e32:	4603      	mov	r3, r0
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d001      	beq.n	8000e3c <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000e38:	f000 fa86 	bl	8001348 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e3c:	230f      	movs	r3, #15
 8000e3e:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e40:	2302      	movs	r3, #2
 8000e42:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e44:	2300      	movs	r3, #0
 8000e46:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000e48:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000e4c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8000e4e:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000e52:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000e54:	f107 0308 	add.w	r3, r7, #8
 8000e58:	2103      	movs	r1, #3
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	f005 fbc0 	bl	80065e0 <HAL_RCC_ClockConfig>
 8000e60:	4603      	mov	r3, r0
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d001      	beq.n	8000e6a <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000e66:	f000 fa6f 	bl	8001348 <Error_Handler>
  }
}
 8000e6a:	bf00      	nop
 8000e6c:	3750      	adds	r7, #80	@ 0x50
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bd80      	pop	{r7, pc}
 8000e72:	bf00      	nop
 8000e74:	40023800 	.word	0x40023800
 8000e78:	40007000 	.word	0x40007000

08000e7c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b084      	sub	sp, #16
 8000e80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000e82:	463b      	mov	r3, r7
 8000e84:	2200      	movs	r2, #0
 8000e86:	601a      	str	r2, [r3, #0]
 8000e88:	605a      	str	r2, [r3, #4]
 8000e8a:	609a      	str	r2, [r3, #8]
 8000e8c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000e8e:	4b21      	ldr	r3, [pc, #132]	@ (8000f14 <MX_ADC1_Init+0x98>)
 8000e90:	4a21      	ldr	r2, [pc, #132]	@ (8000f18 <MX_ADC1_Init+0x9c>)
 8000e92:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000e94:	4b1f      	ldr	r3, [pc, #124]	@ (8000f14 <MX_ADC1_Init+0x98>)
 8000e96:	2200      	movs	r2, #0
 8000e98:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000e9a:	4b1e      	ldr	r3, [pc, #120]	@ (8000f14 <MX_ADC1_Init+0x98>)
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000ea0:	4b1c      	ldr	r3, [pc, #112]	@ (8000f14 <MX_ADC1_Init+0x98>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000ea6:	4b1b      	ldr	r3, [pc, #108]	@ (8000f14 <MX_ADC1_Init+0x98>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000eac:	4b19      	ldr	r3, [pc, #100]	@ (8000f14 <MX_ADC1_Init+0x98>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000eb4:	4b17      	ldr	r3, [pc, #92]	@ (8000f14 <MX_ADC1_Init+0x98>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000eba:	4b16      	ldr	r3, [pc, #88]	@ (8000f14 <MX_ADC1_Init+0x98>)
 8000ebc:	4a17      	ldr	r2, [pc, #92]	@ (8000f1c <MX_ADC1_Init+0xa0>)
 8000ebe:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ec0:	4b14      	ldr	r3, [pc, #80]	@ (8000f14 <MX_ADC1_Init+0x98>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000ec6:	4b13      	ldr	r3, [pc, #76]	@ (8000f14 <MX_ADC1_Init+0x98>)
 8000ec8:	2201      	movs	r2, #1
 8000eca:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000ecc:	4b11      	ldr	r3, [pc, #68]	@ (8000f14 <MX_ADC1_Init+0x98>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ed4:	4b0f      	ldr	r3, [pc, #60]	@ (8000f14 <MX_ADC1_Init+0x98>)
 8000ed6:	2201      	movs	r2, #1
 8000ed8:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000eda:	480e      	ldr	r0, [pc, #56]	@ (8000f14 <MX_ADC1_Init+0x98>)
 8000edc:	f003 fdf4 	bl	8004ac8 <HAL_ADC_Init>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d001      	beq.n	8000eea <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000ee6:	f000 fa2f 	bl	8001348 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8000eea:	230f      	movs	r3, #15
 8000eec:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000eee:	2301      	movs	r3, #1
 8000ef0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ef6:	463b      	mov	r3, r7
 8000ef8:	4619      	mov	r1, r3
 8000efa:	4806      	ldr	r0, [pc, #24]	@ (8000f14 <MX_ADC1_Init+0x98>)
 8000efc:	f003 ffc6 	bl	8004e8c <HAL_ADC_ConfigChannel>
 8000f00:	4603      	mov	r3, r0
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d001      	beq.n	8000f0a <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000f06:	f000 fa1f 	bl	8001348 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000f0a:	bf00      	nop
 8000f0c:	3710      	adds	r7, #16
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bd80      	pop	{r7, pc}
 8000f12:	bf00      	nop
 8000f14:	2000007c 	.word	0x2000007c
 8000f18:	40012000 	.word	0x40012000
 8000f1c:	0f000001 	.word	0x0f000001

08000f20 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
void MX_CAN1_Init(uint8_t mode)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b08c      	sub	sp, #48	@ 0x30
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	4603      	mov	r3, r0
 8000f28:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN CAN1_Init 0 */

  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */
  if(mode == 1) { hcan1.Init.Prescaler = 3; }	// 500 kHz
 8000f2a:	79fb      	ldrb	r3, [r7, #7]
 8000f2c:	2b01      	cmp	r3, #1
 8000f2e:	d103      	bne.n	8000f38 <MX_CAN1_Init+0x18>
 8000f30:	4b33      	ldr	r3, [pc, #204]	@ (8001000 <MX_CAN1_Init+0xe0>)
 8000f32:	2203      	movs	r2, #3
 8000f34:	605a      	str	r2, [r3, #4]
 8000f36:	e002      	b.n	8000f3e <MX_CAN1_Init+0x1e>
  else { hcan1.Init.Prescaler = 6; }			// 250 kHz
 8000f38:	4b31      	ldr	r3, [pc, #196]	@ (8001000 <MX_CAN1_Init+0xe0>)
 8000f3a:	2206      	movs	r2, #6
 8000f3c:	605a      	str	r2, [r3, #4]
  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000f3e:	4b30      	ldr	r3, [pc, #192]	@ (8001000 <MX_CAN1_Init+0xe0>)
 8000f40:	4a30      	ldr	r2, [pc, #192]	@ (8001004 <MX_CAN1_Init+0xe4>)
 8000f42:	601a      	str	r2, [r3, #0]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000f44:	4b2e      	ldr	r3, [pc, #184]	@ (8001000 <MX_CAN1_Init+0xe0>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000f4a:	4b2d      	ldr	r3, [pc, #180]	@ (8001000 <MX_CAN1_Init+0xe0>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_11TQ;
 8000f50:	4b2b      	ldr	r3, [pc, #172]	@ (8001000 <MX_CAN1_Init+0xe0>)
 8000f52:	f44f 2220 	mov.w	r2, #655360	@ 0xa0000
 8000f56:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_4TQ;
 8000f58:	4b29      	ldr	r3, [pc, #164]	@ (8001000 <MX_CAN1_Init+0xe0>)
 8000f5a:	f44f 1240 	mov.w	r2, #3145728	@ 0x300000
 8000f5e:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000f60:	4b27      	ldr	r3, [pc, #156]	@ (8001000 <MX_CAN1_Init+0xe0>)
 8000f62:	2200      	movs	r2, #0
 8000f64:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000f66:	4b26      	ldr	r3, [pc, #152]	@ (8001000 <MX_CAN1_Init+0xe0>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000f6c:	4b24      	ldr	r3, [pc, #144]	@ (8001000 <MX_CAN1_Init+0xe0>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000f72:	4b23      	ldr	r3, [pc, #140]	@ (8001000 <MX_CAN1_Init+0xe0>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000f78:	4b21      	ldr	r3, [pc, #132]	@ (8001000 <MX_CAN1_Init+0xe0>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000f7e:	4b20      	ldr	r3, [pc, #128]	@ (8001000 <MX_CAN1_Init+0xe0>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000f84:	481e      	ldr	r0, [pc, #120]	@ (8001000 <MX_CAN1_Init+0xe0>)
 8000f86:	f004 f9af 	bl	80052e8 <HAL_CAN_Init>
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d001      	beq.n	8000f94 <MX_CAN1_Init+0x74>
  {
    Error_Handler();
 8000f90:	f000 f9da 	bl	8001348 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  CAN_FilterTypeDef canFilter;

  canFilter.FilterActivation = CAN_FILTER_ENABLE;
 8000f94:	2301      	movs	r3, #1
 8000f96:	62bb      	str	r3, [r7, #40]	@ 0x28
  canFilter.FilterBank = 1;
 8000f98:	2301      	movs	r3, #1
 8000f9a:	61fb      	str	r3, [r7, #28]
  canFilter.FilterFIFOAssignment = CAN_RX_FIFO0;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	61bb      	str	r3, [r7, #24]
  canFilter.FilterIdHigh = CAN_FAULT_ID << 5;
 8000fa0:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8000fa4:	60bb      	str	r3, [r7, #8]
  canFilter.FilterIdLow = 0x0000;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	60fb      	str	r3, [r7, #12]
  canFilter.FilterMaskIdHigh = 0xFFE0;
 8000faa:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8000fae:	613b      	str	r3, [r7, #16]
  canFilter.FilterMaskIdLow = 0x0000;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	617b      	str	r3, [r7, #20]
  canFilter.FilterMode = CAN_FILTERMODE_IDMASK;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	623b      	str	r3, [r7, #32]
  canFilter.FilterScale = CAN_FILTERSCALE_32BIT;
 8000fb8:	2301      	movs	r3, #1
 8000fba:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_CAN_ConfigFilter(&hcan1, &canFilter);
 8000fbc:	f107 0308 	add.w	r3, r7, #8
 8000fc0:	4619      	mov	r1, r3
 8000fc2:	480f      	ldr	r0, [pc, #60]	@ (8001000 <MX_CAN1_Init+0xe0>)
 8000fc4:	f004 fa8c 	bl	80054e0 <HAL_CAN_ConfigFilter>

  canFilter.FilterBank = 2;
 8000fc8:	2302      	movs	r3, #2
 8000fca:	61fb      	str	r3, [r7, #28]
  canFilter.FilterIdHigh = CAN_MIN_VCELL_ID << 5;
 8000fcc:	f647 43e0 	movw	r3, #31968	@ 0x7ce0
 8000fd0:	60bb      	str	r3, [r7, #8]
  HAL_CAN_ConfigFilter(&hcan1, &canFilter);
 8000fd2:	f107 0308 	add.w	r3, r7, #8
 8000fd6:	4619      	mov	r1, r3
 8000fd8:	4809      	ldr	r0, [pc, #36]	@ (8001000 <MX_CAN1_Init+0xe0>)
 8000fda:	f004 fa81 	bl	80054e0 <HAL_CAN_ConfigFilter>

  canFilter.FilterBank = 3;
 8000fde:	2303      	movs	r3, #3
 8000fe0:	61fb      	str	r3, [r7, #28]
  canFilter.FilterFIFOAssignment = CAN_RX_FIFO1;
 8000fe2:	2301      	movs	r3, #1
 8000fe4:	61bb      	str	r3, [r7, #24]
  canFilter.FilterIdHigh = CAN_PACK_STAT_ID << 5;
 8000fe6:	f44f 4304 	mov.w	r3, #33792	@ 0x8400
 8000fea:	60bb      	str	r3, [r7, #8]
  HAL_CAN_ConfigFilter(&hcan1, &canFilter);
 8000fec:	f107 0308 	add.w	r3, r7, #8
 8000ff0:	4619      	mov	r1, r3
 8000ff2:	4803      	ldr	r0, [pc, #12]	@ (8001000 <MX_CAN1_Init+0xe0>)
 8000ff4:	f004 fa74 	bl	80054e0 <HAL_CAN_ConfigFilter>

  /* USER CODE END CAN1_Init 2 */

}
 8000ff8:	bf00      	nop
 8000ffa:	3730      	adds	r7, #48	@ 0x30
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	bd80      	pop	{r7, pc}
 8001000:	200000c4 	.word	0x200000c4
 8001004:	40006400 	.word	0x40006400

08001008 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800100c:	4b17      	ldr	r3, [pc, #92]	@ (800106c <MX_SPI1_Init+0x64>)
 800100e:	4a18      	ldr	r2, [pc, #96]	@ (8001070 <MX_SPI1_Init+0x68>)
 8001010:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001012:	4b16      	ldr	r3, [pc, #88]	@ (800106c <MX_SPI1_Init+0x64>)
 8001014:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001018:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800101a:	4b14      	ldr	r3, [pc, #80]	@ (800106c <MX_SPI1_Init+0x64>)
 800101c:	2200      	movs	r2, #0
 800101e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001020:	4b12      	ldr	r3, [pc, #72]	@ (800106c <MX_SPI1_Init+0x64>)
 8001022:	2200      	movs	r2, #0
 8001024:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001026:	4b11      	ldr	r3, [pc, #68]	@ (800106c <MX_SPI1_Init+0x64>)
 8001028:	2200      	movs	r2, #0
 800102a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800102c:	4b0f      	ldr	r3, [pc, #60]	@ (800106c <MX_SPI1_Init+0x64>)
 800102e:	2200      	movs	r2, #0
 8001030:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001032:	4b0e      	ldr	r3, [pc, #56]	@ (800106c <MX_SPI1_Init+0x64>)
 8001034:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001038:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 800103a:	4b0c      	ldr	r3, [pc, #48]	@ (800106c <MX_SPI1_Init+0x64>)
 800103c:	2220      	movs	r2, #32
 800103e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001040:	4b0a      	ldr	r3, [pc, #40]	@ (800106c <MX_SPI1_Init+0x64>)
 8001042:	2200      	movs	r2, #0
 8001044:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001046:	4b09      	ldr	r3, [pc, #36]	@ (800106c <MX_SPI1_Init+0x64>)
 8001048:	2200      	movs	r2, #0
 800104a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800104c:	4b07      	ldr	r3, [pc, #28]	@ (800106c <MX_SPI1_Init+0x64>)
 800104e:	2200      	movs	r2, #0
 8001050:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001052:	4b06      	ldr	r3, [pc, #24]	@ (800106c <MX_SPI1_Init+0x64>)
 8001054:	220a      	movs	r2, #10
 8001056:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001058:	4804      	ldr	r0, [pc, #16]	@ (800106c <MX_SPI1_Init+0x64>)
 800105a:	f006 f873 	bl	8007144 <HAL_SPI_Init>
 800105e:	4603      	mov	r3, r0
 8001060:	2b00      	cmp	r3, #0
 8001062:	d001      	beq.n	8001068 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001064:	f000 f970 	bl	8001348 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001068:	bf00      	nop
 800106a:	bd80      	pop	{r7, pc}
 800106c:	200000ec 	.word	0x200000ec
 8001070:	40013000 	.word	0x40013000

08001074 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8001078:	4b17      	ldr	r3, [pc, #92]	@ (80010d8 <MX_SPI3_Init+0x64>)
 800107a:	4a18      	ldr	r2, [pc, #96]	@ (80010dc <MX_SPI3_Init+0x68>)
 800107c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800107e:	4b16      	ldr	r3, [pc, #88]	@ (80010d8 <MX_SPI3_Init+0x64>)
 8001080:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001084:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001086:	4b14      	ldr	r3, [pc, #80]	@ (80010d8 <MX_SPI3_Init+0x64>)
 8001088:	2200      	movs	r2, #0
 800108a:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 800108c:	4b12      	ldr	r3, [pc, #72]	@ (80010d8 <MX_SPI3_Init+0x64>)
 800108e:	2200      	movs	r2, #0
 8001090:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001092:	4b11      	ldr	r3, [pc, #68]	@ (80010d8 <MX_SPI3_Init+0x64>)
 8001094:	2200      	movs	r2, #0
 8001096:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001098:	4b0f      	ldr	r3, [pc, #60]	@ (80010d8 <MX_SPI3_Init+0x64>)
 800109a:	2200      	movs	r2, #0
 800109c:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800109e:	4b0e      	ldr	r3, [pc, #56]	@ (80010d8 <MX_SPI3_Init+0x64>)
 80010a0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80010a4:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80010a6:	4b0c      	ldr	r3, [pc, #48]	@ (80010d8 <MX_SPI3_Init+0x64>)
 80010a8:	2220      	movs	r2, #32
 80010aa:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80010ac:	4b0a      	ldr	r3, [pc, #40]	@ (80010d8 <MX_SPI3_Init+0x64>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80010b2:	4b09      	ldr	r3, [pc, #36]	@ (80010d8 <MX_SPI3_Init+0x64>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80010b8:	4b07      	ldr	r3, [pc, #28]	@ (80010d8 <MX_SPI3_Init+0x64>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 10;
 80010be:	4b06      	ldr	r3, [pc, #24]	@ (80010d8 <MX_SPI3_Init+0x64>)
 80010c0:	220a      	movs	r2, #10
 80010c2:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80010c4:	4804      	ldr	r0, [pc, #16]	@ (80010d8 <MX_SPI3_Init+0x64>)
 80010c6:	f006 f83d 	bl	8007144 <HAL_SPI_Init>
 80010ca:	4603      	mov	r3, r0
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d001      	beq.n	80010d4 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 80010d0:	f000 f93a 	bl	8001348 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80010d4:	bf00      	nop
 80010d6:	bd80      	pop	{r7, pc}
 80010d8:	20000144 	.word	0x20000144
 80010dc:	40003c00 	.word	0x40003c00

080010e0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b086      	sub	sp, #24
 80010e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80010e6:	f107 0308 	add.w	r3, r7, #8
 80010ea:	2200      	movs	r2, #0
 80010ec:	601a      	str	r2, [r3, #0]
 80010ee:	605a      	str	r2, [r3, #4]
 80010f0:	609a      	str	r2, [r3, #8]
 80010f2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010f4:	463b      	mov	r3, r7
 80010f6:	2200      	movs	r2, #0
 80010f8:	601a      	str	r2, [r3, #0]
 80010fa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80010fc:	4b21      	ldr	r3, [pc, #132]	@ (8001184 <MX_TIM2_Init+0xa4>)
 80010fe:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001102:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 187;
 8001104:	4b1f      	ldr	r3, [pc, #124]	@ (8001184 <MX_TIM2_Init+0xa4>)
 8001106:	22bb      	movs	r2, #187	@ 0xbb
 8001108:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800110a:	4b1e      	ldr	r3, [pc, #120]	@ (8001184 <MX_TIM2_Init+0xa4>)
 800110c:	2200      	movs	r2, #0
 800110e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 255;
 8001110:	4b1c      	ldr	r3, [pc, #112]	@ (8001184 <MX_TIM2_Init+0xa4>)
 8001112:	22ff      	movs	r2, #255	@ 0xff
 8001114:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001116:	4b1b      	ldr	r3, [pc, #108]	@ (8001184 <MX_TIM2_Init+0xa4>)
 8001118:	2200      	movs	r2, #0
 800111a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800111c:	4b19      	ldr	r3, [pc, #100]	@ (8001184 <MX_TIM2_Init+0xa4>)
 800111e:	2200      	movs	r2, #0
 8001120:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001122:	4818      	ldr	r0, [pc, #96]	@ (8001184 <MX_TIM2_Init+0xa4>)
 8001124:	f006 fc60 	bl	80079e8 <HAL_TIM_Base_Init>
 8001128:	4603      	mov	r3, r0
 800112a:	2b00      	cmp	r3, #0
 800112c:	d001      	beq.n	8001132 <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 800112e:	f000 f90b 	bl	8001348 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001132:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001136:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001138:	f107 0308 	add.w	r3, r7, #8
 800113c:	4619      	mov	r1, r3
 800113e:	4811      	ldr	r0, [pc, #68]	@ (8001184 <MX_TIM2_Init+0xa4>)
 8001140:	f006 fe31 	bl	8007da6 <HAL_TIM_ConfigClockSource>
 8001144:	4603      	mov	r3, r0
 8001146:	2b00      	cmp	r3, #0
 8001148:	d001      	beq.n	800114e <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 800114a:	f000 f8fd 	bl	8001348 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800114e:	2300      	movs	r3, #0
 8001150:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001152:	2300      	movs	r3, #0
 8001154:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001156:	463b      	mov	r3, r7
 8001158:	4619      	mov	r1, r3
 800115a:	480a      	ldr	r0, [pc, #40]	@ (8001184 <MX_TIM2_Init+0xa4>)
 800115c:	f007 f858 	bl	8008210 <HAL_TIMEx_MasterConfigSynchronization>
 8001160:	4603      	mov	r3, r0
 8001162:	2b00      	cmp	r3, #0
 8001164:	d001      	beq.n	800116a <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 8001166:	f000 f8ef 	bl	8001348 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */
  HAL_NVIC_EnableIRQ(TIM2_IRQn);  // Enable TIM2 Interrupt in NVIC
 800116a:	201c      	movs	r0, #28
 800116c:	f005 f86f 	bl	800624e <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);  // Set Priority
 8001170:	2200      	movs	r2, #0
 8001172:	2101      	movs	r1, #1
 8001174:	201c      	movs	r0, #28
 8001176:	f005 f84e 	bl	8006216 <HAL_NVIC_SetPriority>
  /* USER CODE END TIM2_Init 2 */

}
 800117a:	bf00      	nop
 800117c:	3718      	adds	r7, #24
 800117e:	46bd      	mov	sp, r7
 8001180:	bd80      	pop	{r7, pc}
 8001182:	bf00      	nop
 8001184:	2000019c 	.word	0x2000019c

08001188 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b08a      	sub	sp, #40	@ 0x28
 800118c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800118e:	f107 0314 	add.w	r3, r7, #20
 8001192:	2200      	movs	r2, #0
 8001194:	601a      	str	r2, [r3, #0]
 8001196:	605a      	str	r2, [r3, #4]
 8001198:	609a      	str	r2, [r3, #8]
 800119a:	60da      	str	r2, [r3, #12]
 800119c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800119e:	2300      	movs	r3, #0
 80011a0:	613b      	str	r3, [r7, #16]
 80011a2:	4b4d      	ldr	r3, [pc, #308]	@ (80012d8 <MX_GPIO_Init+0x150>)
 80011a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011a6:	4a4c      	ldr	r2, [pc, #304]	@ (80012d8 <MX_GPIO_Init+0x150>)
 80011a8:	f043 0304 	orr.w	r3, r3, #4
 80011ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80011ae:	4b4a      	ldr	r3, [pc, #296]	@ (80012d8 <MX_GPIO_Init+0x150>)
 80011b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011b2:	f003 0304 	and.w	r3, r3, #4
 80011b6:	613b      	str	r3, [r7, #16]
 80011b8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80011ba:	2300      	movs	r3, #0
 80011bc:	60fb      	str	r3, [r7, #12]
 80011be:	4b46      	ldr	r3, [pc, #280]	@ (80012d8 <MX_GPIO_Init+0x150>)
 80011c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011c2:	4a45      	ldr	r2, [pc, #276]	@ (80012d8 <MX_GPIO_Init+0x150>)
 80011c4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80011c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80011ca:	4b43      	ldr	r3, [pc, #268]	@ (80012d8 <MX_GPIO_Init+0x150>)
 80011cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80011d2:	60fb      	str	r3, [r7, #12]
 80011d4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011d6:	2300      	movs	r3, #0
 80011d8:	60bb      	str	r3, [r7, #8]
 80011da:	4b3f      	ldr	r3, [pc, #252]	@ (80012d8 <MX_GPIO_Init+0x150>)
 80011dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011de:	4a3e      	ldr	r2, [pc, #248]	@ (80012d8 <MX_GPIO_Init+0x150>)
 80011e0:	f043 0301 	orr.w	r3, r3, #1
 80011e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80011e6:	4b3c      	ldr	r3, [pc, #240]	@ (80012d8 <MX_GPIO_Init+0x150>)
 80011e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011ea:	f003 0301 	and.w	r3, r3, #1
 80011ee:	60bb      	str	r3, [r7, #8]
 80011f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011f2:	2300      	movs	r3, #0
 80011f4:	607b      	str	r3, [r7, #4]
 80011f6:	4b38      	ldr	r3, [pc, #224]	@ (80012d8 <MX_GPIO_Init+0x150>)
 80011f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011fa:	4a37      	ldr	r2, [pc, #220]	@ (80012d8 <MX_GPIO_Init+0x150>)
 80011fc:	f043 0302 	orr.w	r3, r3, #2
 8001200:	6313      	str	r3, [r2, #48]	@ 0x30
 8001202:	4b35      	ldr	r3, [pc, #212]	@ (80012d8 <MX_GPIO_Init+0x150>)
 8001204:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001206:	f003 0302 	and.w	r3, r3, #2
 800120a:	607b      	str	r3, [r7, #4]
 800120c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800120e:	2300      	movs	r3, #0
 8001210:	603b      	str	r3, [r7, #0]
 8001212:	4b31      	ldr	r3, [pc, #196]	@ (80012d8 <MX_GPIO_Init+0x150>)
 8001214:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001216:	4a30      	ldr	r2, [pc, #192]	@ (80012d8 <MX_GPIO_Init+0x150>)
 8001218:	f043 0308 	orr.w	r3, r3, #8
 800121c:	6313      	str	r3, [r2, #48]	@ 0x30
 800121e:	4b2e      	ldr	r3, [pc, #184]	@ (80012d8 <MX_GPIO_Init+0x150>)
 8001220:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001222:	f003 0308 	and.w	r3, r3, #8
 8001226:	603b      	str	r3, [r7, #0]
 8001228:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_4|GPIO_PIN_7
 800122a:	2200      	movs	r2, #0
 800122c:	f246 3190 	movw	r1, #25488	@ 0x6390
 8001230:	482a      	ldr	r0, [pc, #168]	@ (80012dc <MX_GPIO_Init+0x154>)
 8001232:	f005 f9bb 	bl	80065ac <HAL_GPIO_WritePin>
                          |GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_8
 8001236:	2200      	movs	r2, #0
 8001238:	f248 111c 	movw	r1, #33052	@ 0x811c
 800123c:	4828      	ldr	r0, [pc, #160]	@ (80012e0 <MX_GPIO_Init+0x158>)
 800123e:	f005 f9b5 	bl	80065ac <HAL_GPIO_WritePin>
                          |GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 8001242:	2200      	movs	r2, #0
 8001244:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001248:	4826      	ldr	r0, [pc, #152]	@ (80012e4 <MX_GPIO_Init+0x15c>)
 800124a:	f005 f9af 	bl	80065ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 800124e:	2200      	movs	r2, #0
 8001250:	2104      	movs	r1, #4
 8001252:	4825      	ldr	r0, [pc, #148]	@ (80012e8 <MX_GPIO_Init+0x160>)
 8001254:	f005 f9aa 	bl	80065ac <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 PC4 PC7
                           PC8 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_4|GPIO_PIN_7
 8001258:	f246 3390 	movw	r3, #25488	@ 0x6390
 800125c:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800125e:	2301      	movs	r3, #1
 8001260:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001262:	2300      	movs	r3, #0
 8001264:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001266:	2300      	movs	r3, #0
 8001268:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800126a:	f107 0314 	add.w	r3, r7, #20
 800126e:	4619      	mov	r1, r3
 8001270:	481a      	ldr	r0, [pc, #104]	@ (80012dc <MX_GPIO_Init+0x154>)
 8001272:	f005 f807 	bl	8006284 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 PA3 PA4 PA8
                           PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_8
 8001276:	f248 131c 	movw	r3, #33052	@ 0x811c
 800127a:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800127c:	2301      	movs	r3, #1
 800127e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001280:	2300      	movs	r3, #0
 8001282:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001284:	2300      	movs	r3, #0
 8001286:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001288:	f107 0314 	add.w	r3, r7, #20
 800128c:	4619      	mov	r1, r3
 800128e:	4814      	ldr	r0, [pc, #80]	@ (80012e0 <MX_GPIO_Init+0x158>)
 8001290:	f004 fff8 	bl	8006284 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001294:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001298:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800129a:	2301      	movs	r3, #1
 800129c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800129e:	2300      	movs	r3, #0
 80012a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012a2:	2300      	movs	r3, #0
 80012a4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012a6:	f107 0314 	add.w	r3, r7, #20
 80012aa:	4619      	mov	r1, r3
 80012ac:	480d      	ldr	r0, [pc, #52]	@ (80012e4 <MX_GPIO_Init+0x15c>)
 80012ae:	f004 ffe9 	bl	8006284 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80012b2:	2304      	movs	r3, #4
 80012b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012b6:	2301      	movs	r3, #1
 80012b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ba:	2300      	movs	r3, #0
 80012bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012be:	2300      	movs	r3, #0
 80012c0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80012c2:	f107 0314 	add.w	r3, r7, #20
 80012c6:	4619      	mov	r1, r3
 80012c8:	4807      	ldr	r0, [pc, #28]	@ (80012e8 <MX_GPIO_Init+0x160>)
 80012ca:	f004 ffdb 	bl	8006284 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80012ce:	bf00      	nop
 80012d0:	3728      	adds	r7, #40	@ 0x28
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	bf00      	nop
 80012d8:	40023800 	.word	0x40023800
 80012dc:	40020800 	.word	0x40020800
 80012e0:	40020000 	.word	0x40020000
 80012e4:	40020400 	.word	0x40020400
 80012e8:	40020c00 	.word	0x40020c00

080012ec <TIM2_IRQHandler>:

/* USER CODE BEGIN 4 */
void TIM2_IRQHandler(void)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	af00      	add	r7, sp, #0
    HAL_TIM_IRQHandler(&htim2);  // Call HAL's IRQ handler
 80012f0:	4802      	ldr	r0, [pc, #8]	@ (80012fc <TIM2_IRQHandler+0x10>)
 80012f2:	f006 fc68 	bl	8007bc6 <HAL_TIM_IRQHandler>
}
 80012f6:	bf00      	nop
 80012f8:	bd80      	pop	{r7, pc}
 80012fa:	bf00      	nop
 80012fc:	2000019c 	.word	0x2000019c

08001300 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001300:	b480      	push	{r7}
 8001302:	b083      	sub	sp, #12
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM2) {
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001310:	d10e      	bne.n	8001330 <HAL_TIM_PeriodElapsedCallback+0x30>
        Counter++;
 8001312:	4b0a      	ldr	r3, [pc, #40]	@ (800133c <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	3301      	adds	r3, #1
 8001318:	4a08      	ldr	r2, [pc, #32]	@ (800133c <HAL_TIM_PeriodElapsedCallback+0x3c>)
 800131a:	6013      	str	r3, [r2, #0]
        transmitCounter++;
 800131c:	4b08      	ldr	r3, [pc, #32]	@ (8001340 <HAL_TIM_PeriodElapsedCallback+0x40>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	3301      	adds	r3, #1
 8001322:	4a07      	ldr	r2, [pc, #28]	@ (8001340 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8001324:	6013      	str	r3, [r2, #0]
        measureCounter++;
 8001326:	4b07      	ldr	r3, [pc, #28]	@ (8001344 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	3301      	adds	r3, #1
 800132c:	4a05      	ldr	r2, [pc, #20]	@ (8001344 <HAL_TIM_PeriodElapsedCallback+0x44>)
 800132e:	6013      	str	r3, [r2, #0]
        //canTimeoutCounter++;
    }
}
 8001330:	bf00      	nop
 8001332:	370c      	adds	r7, #12
 8001334:	46bd      	mov	sp, r7
 8001336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133a:	4770      	bx	lr
 800133c:	200003f0 	.word	0x200003f0
 8001340:	200003e4 	.word	0x200003e4
 8001344:	200003e8 	.word	0x200003e8

08001348 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001348:	b480      	push	{r7}
 800134a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800134c:	b672      	cpsid	i
}
 800134e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001350:	bf00      	nop
 8001352:	e7fd      	b.n	8001350 <Error_Handler+0x8>

08001354 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001354:	b480      	push	{r7}
 8001356:	b083      	sub	sp, #12
 8001358:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800135a:	2300      	movs	r3, #0
 800135c:	607b      	str	r3, [r7, #4]
 800135e:	4b10      	ldr	r3, [pc, #64]	@ (80013a0 <HAL_MspInit+0x4c>)
 8001360:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001362:	4a0f      	ldr	r2, [pc, #60]	@ (80013a0 <HAL_MspInit+0x4c>)
 8001364:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001368:	6453      	str	r3, [r2, #68]	@ 0x44
 800136a:	4b0d      	ldr	r3, [pc, #52]	@ (80013a0 <HAL_MspInit+0x4c>)
 800136c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800136e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001372:	607b      	str	r3, [r7, #4]
 8001374:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001376:	2300      	movs	r3, #0
 8001378:	603b      	str	r3, [r7, #0]
 800137a:	4b09      	ldr	r3, [pc, #36]	@ (80013a0 <HAL_MspInit+0x4c>)
 800137c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800137e:	4a08      	ldr	r2, [pc, #32]	@ (80013a0 <HAL_MspInit+0x4c>)
 8001380:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001384:	6413      	str	r3, [r2, #64]	@ 0x40
 8001386:	4b06      	ldr	r3, [pc, #24]	@ (80013a0 <HAL_MspInit+0x4c>)
 8001388:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800138a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800138e:	603b      	str	r3, [r7, #0]
 8001390:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001392:	bf00      	nop
 8001394:	370c      	adds	r7, #12
 8001396:	46bd      	mov	sp, r7
 8001398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139c:	4770      	bx	lr
 800139e:	bf00      	nop
 80013a0:	40023800 	.word	0x40023800

080013a4 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b08a      	sub	sp, #40	@ 0x28
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013ac:	f107 0314 	add.w	r3, r7, #20
 80013b0:	2200      	movs	r2, #0
 80013b2:	601a      	str	r2, [r3, #0]
 80013b4:	605a      	str	r2, [r3, #4]
 80013b6:	609a      	str	r2, [r3, #8]
 80013b8:	60da      	str	r2, [r3, #12]
 80013ba:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	4a17      	ldr	r2, [pc, #92]	@ (8001420 <HAL_ADC_MspInit+0x7c>)
 80013c2:	4293      	cmp	r3, r2
 80013c4:	d127      	bne.n	8001416 <HAL_ADC_MspInit+0x72>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80013c6:	2300      	movs	r3, #0
 80013c8:	613b      	str	r3, [r7, #16]
 80013ca:	4b16      	ldr	r3, [pc, #88]	@ (8001424 <HAL_ADC_MspInit+0x80>)
 80013cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013ce:	4a15      	ldr	r2, [pc, #84]	@ (8001424 <HAL_ADC_MspInit+0x80>)
 80013d0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80013d4:	6453      	str	r3, [r2, #68]	@ 0x44
 80013d6:	4b13      	ldr	r3, [pc, #76]	@ (8001424 <HAL_ADC_MspInit+0x80>)
 80013d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80013de:	613b      	str	r3, [r7, #16]
 80013e0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80013e2:	2300      	movs	r3, #0
 80013e4:	60fb      	str	r3, [r7, #12]
 80013e6:	4b0f      	ldr	r3, [pc, #60]	@ (8001424 <HAL_ADC_MspInit+0x80>)
 80013e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013ea:	4a0e      	ldr	r2, [pc, #56]	@ (8001424 <HAL_ADC_MspInit+0x80>)
 80013ec:	f043 0304 	orr.w	r3, r3, #4
 80013f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80013f2:	4b0c      	ldr	r3, [pc, #48]	@ (8001424 <HAL_ADC_MspInit+0x80>)
 80013f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013f6:	f003 0304 	and.w	r3, r3, #4
 80013fa:	60fb      	str	r3, [r7, #12]
 80013fc:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC5     ------> ADC1_IN15
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80013fe:	2320      	movs	r3, #32
 8001400:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001402:	2303      	movs	r3, #3
 8001404:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001406:	2300      	movs	r3, #0
 8001408:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800140a:	f107 0314 	add.w	r3, r7, #20
 800140e:	4619      	mov	r1, r3
 8001410:	4805      	ldr	r0, [pc, #20]	@ (8001428 <HAL_ADC_MspInit+0x84>)
 8001412:	f004 ff37 	bl	8006284 <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001416:	bf00      	nop
 8001418:	3728      	adds	r7, #40	@ 0x28
 800141a:	46bd      	mov	sp, r7
 800141c:	bd80      	pop	{r7, pc}
 800141e:	bf00      	nop
 8001420:	40012000 	.word	0x40012000
 8001424:	40023800 	.word	0x40023800
 8001428:	40020800 	.word	0x40020800

0800142c <HAL_CAN_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcan: CAN handle pointer
  * @retval None
  */
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b08a      	sub	sp, #40	@ 0x28
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001434:	f107 0314 	add.w	r3, r7, #20
 8001438:	2200      	movs	r2, #0
 800143a:	601a      	str	r2, [r3, #0]
 800143c:	605a      	str	r2, [r3, #4]
 800143e:	609a      	str	r2, [r3, #8]
 8001440:	60da      	str	r2, [r3, #12]
 8001442:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	4a21      	ldr	r2, [pc, #132]	@ (80014d0 <HAL_CAN_MspInit+0xa4>)
 800144a:	4293      	cmp	r3, r2
 800144c:	d13c      	bne.n	80014c8 <HAL_CAN_MspInit+0x9c>
  {
    /* USER CODE BEGIN CAN1_MspInit 0 */

    /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800144e:	2300      	movs	r3, #0
 8001450:	613b      	str	r3, [r7, #16]
 8001452:	4b20      	ldr	r3, [pc, #128]	@ (80014d4 <HAL_CAN_MspInit+0xa8>)
 8001454:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001456:	4a1f      	ldr	r2, [pc, #124]	@ (80014d4 <HAL_CAN_MspInit+0xa8>)
 8001458:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800145c:	6413      	str	r3, [r2, #64]	@ 0x40
 800145e:	4b1d      	ldr	r3, [pc, #116]	@ (80014d4 <HAL_CAN_MspInit+0xa8>)
 8001460:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001462:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001466:	613b      	str	r3, [r7, #16]
 8001468:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800146a:	2300      	movs	r3, #0
 800146c:	60fb      	str	r3, [r7, #12]
 800146e:	4b19      	ldr	r3, [pc, #100]	@ (80014d4 <HAL_CAN_MspInit+0xa8>)
 8001470:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001472:	4a18      	ldr	r2, [pc, #96]	@ (80014d4 <HAL_CAN_MspInit+0xa8>)
 8001474:	f043 0301 	orr.w	r3, r3, #1
 8001478:	6313      	str	r3, [r2, #48]	@ 0x30
 800147a:	4b16      	ldr	r3, [pc, #88]	@ (80014d4 <HAL_CAN_MspInit+0xa8>)
 800147c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800147e:	f003 0301 	and.w	r3, r3, #1
 8001482:	60fb      	str	r3, [r7, #12]
 8001484:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001486:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800148a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800148c:	2302      	movs	r3, #2
 800148e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001490:	2300      	movs	r3, #0
 8001492:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001494:	2303      	movs	r3, #3
 8001496:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001498:	2309      	movs	r3, #9
 800149a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800149c:	f107 0314 	add.w	r3, r7, #20
 80014a0:	4619      	mov	r1, r3
 80014a2:	480d      	ldr	r0, [pc, #52]	@ (80014d8 <HAL_CAN_MspInit+0xac>)
 80014a4:	f004 feee 	bl	8006284 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 80014a8:	2200      	movs	r2, #0
 80014aa:	2100      	movs	r1, #0
 80014ac:	2014      	movs	r0, #20
 80014ae:	f004 feb2 	bl	8006216 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80014b2:	2014      	movs	r0, #20
 80014b4:	f004 fecb 	bl	800624e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 80014b8:	2200      	movs	r2, #0
 80014ba:	2100      	movs	r1, #0
 80014bc:	2015      	movs	r0, #21
 80014be:	f004 feaa 	bl	8006216 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 80014c2:	2015      	movs	r0, #21
 80014c4:	f004 fec3 	bl	800624e <HAL_NVIC_EnableIRQ>

    /* USER CODE END CAN1_MspInit 1 */

  }

}
 80014c8:	bf00      	nop
 80014ca:	3728      	adds	r7, #40	@ 0x28
 80014cc:	46bd      	mov	sp, r7
 80014ce:	bd80      	pop	{r7, pc}
 80014d0:	40006400 	.word	0x40006400
 80014d4:	40023800 	.word	0x40023800
 80014d8:	40020000 	.word	0x40020000

080014dc <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b08c      	sub	sp, #48	@ 0x30
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014e4:	f107 031c 	add.w	r3, r7, #28
 80014e8:	2200      	movs	r2, #0
 80014ea:	601a      	str	r2, [r3, #0]
 80014ec:	605a      	str	r2, [r3, #4]
 80014ee:	609a      	str	r2, [r3, #8]
 80014f0:	60da      	str	r2, [r3, #12]
 80014f2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	4a32      	ldr	r2, [pc, #200]	@ (80015c4 <HAL_SPI_MspInit+0xe8>)
 80014fa:	4293      	cmp	r3, r2
 80014fc:	d12c      	bne.n	8001558 <HAL_SPI_MspInit+0x7c>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80014fe:	2300      	movs	r3, #0
 8001500:	61bb      	str	r3, [r7, #24]
 8001502:	4b31      	ldr	r3, [pc, #196]	@ (80015c8 <HAL_SPI_MspInit+0xec>)
 8001504:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001506:	4a30      	ldr	r2, [pc, #192]	@ (80015c8 <HAL_SPI_MspInit+0xec>)
 8001508:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800150c:	6453      	str	r3, [r2, #68]	@ 0x44
 800150e:	4b2e      	ldr	r3, [pc, #184]	@ (80015c8 <HAL_SPI_MspInit+0xec>)
 8001510:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001512:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001516:	61bb      	str	r3, [r7, #24]
 8001518:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800151a:	2300      	movs	r3, #0
 800151c:	617b      	str	r3, [r7, #20]
 800151e:	4b2a      	ldr	r3, [pc, #168]	@ (80015c8 <HAL_SPI_MspInit+0xec>)
 8001520:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001522:	4a29      	ldr	r2, [pc, #164]	@ (80015c8 <HAL_SPI_MspInit+0xec>)
 8001524:	f043 0301 	orr.w	r3, r3, #1
 8001528:	6313      	str	r3, [r2, #48]	@ 0x30
 800152a:	4b27      	ldr	r3, [pc, #156]	@ (80015c8 <HAL_SPI_MspInit+0xec>)
 800152c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800152e:	f003 0301 	and.w	r3, r3, #1
 8001532:	617b      	str	r3, [r7, #20]
 8001534:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001536:	23e0      	movs	r3, #224	@ 0xe0
 8001538:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800153a:	2302      	movs	r3, #2
 800153c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800153e:	2300      	movs	r3, #0
 8001540:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001542:	2303      	movs	r3, #3
 8001544:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001546:	2305      	movs	r3, #5
 8001548:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800154a:	f107 031c 	add.w	r3, r7, #28
 800154e:	4619      	mov	r1, r3
 8001550:	481e      	ldr	r0, [pc, #120]	@ (80015cc <HAL_SPI_MspInit+0xf0>)
 8001552:	f004 fe97 	bl	8006284 <HAL_GPIO_Init>
    /* USER CODE BEGIN SPI3_MspInit 1 */

    /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001556:	e031      	b.n	80015bc <HAL_SPI_MspInit+0xe0>
  else if(hspi->Instance==SPI3)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	4a1c      	ldr	r2, [pc, #112]	@ (80015d0 <HAL_SPI_MspInit+0xf4>)
 800155e:	4293      	cmp	r3, r2
 8001560:	d12c      	bne.n	80015bc <HAL_SPI_MspInit+0xe0>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001562:	2300      	movs	r3, #0
 8001564:	613b      	str	r3, [r7, #16]
 8001566:	4b18      	ldr	r3, [pc, #96]	@ (80015c8 <HAL_SPI_MspInit+0xec>)
 8001568:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800156a:	4a17      	ldr	r2, [pc, #92]	@ (80015c8 <HAL_SPI_MspInit+0xec>)
 800156c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001570:	6413      	str	r3, [r2, #64]	@ 0x40
 8001572:	4b15      	ldr	r3, [pc, #84]	@ (80015c8 <HAL_SPI_MspInit+0xec>)
 8001574:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001576:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800157a:	613b      	str	r3, [r7, #16]
 800157c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800157e:	2300      	movs	r3, #0
 8001580:	60fb      	str	r3, [r7, #12]
 8001582:	4b11      	ldr	r3, [pc, #68]	@ (80015c8 <HAL_SPI_MspInit+0xec>)
 8001584:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001586:	4a10      	ldr	r2, [pc, #64]	@ (80015c8 <HAL_SPI_MspInit+0xec>)
 8001588:	f043 0304 	orr.w	r3, r3, #4
 800158c:	6313      	str	r3, [r2, #48]	@ 0x30
 800158e:	4b0e      	ldr	r3, [pc, #56]	@ (80015c8 <HAL_SPI_MspInit+0xec>)
 8001590:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001592:	f003 0304 	and.w	r3, r3, #4
 8001596:	60fb      	str	r3, [r7, #12]
 8001598:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 800159a:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 800159e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015a0:	2302      	movs	r3, #2
 80015a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a4:	2300      	movs	r3, #0
 80015a6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015a8:	2303      	movs	r3, #3
 80015aa:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80015ac:	2306      	movs	r3, #6
 80015ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015b0:	f107 031c 	add.w	r3, r7, #28
 80015b4:	4619      	mov	r1, r3
 80015b6:	4807      	ldr	r0, [pc, #28]	@ (80015d4 <HAL_SPI_MspInit+0xf8>)
 80015b8:	f004 fe64 	bl	8006284 <HAL_GPIO_Init>
}
 80015bc:	bf00      	nop
 80015be:	3730      	adds	r7, #48	@ 0x30
 80015c0:	46bd      	mov	sp, r7
 80015c2:	bd80      	pop	{r7, pc}
 80015c4:	40013000 	.word	0x40013000
 80015c8:	40023800 	.word	0x40023800
 80015cc:	40020000 	.word	0x40020000
 80015d0:	40003c00 	.word	0x40003c00
 80015d4:	40020800 	.word	0x40020800

080015d8 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80015d8:	b480      	push	{r7}
 80015da:	b085      	sub	sp, #20
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80015e8:	d10d      	bne.n	8001606 <HAL_TIM_Base_MspInit+0x2e>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80015ea:	2300      	movs	r3, #0
 80015ec:	60fb      	str	r3, [r7, #12]
 80015ee:	4b09      	ldr	r3, [pc, #36]	@ (8001614 <HAL_TIM_Base_MspInit+0x3c>)
 80015f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015f2:	4a08      	ldr	r2, [pc, #32]	@ (8001614 <HAL_TIM_Base_MspInit+0x3c>)
 80015f4:	f043 0301 	orr.w	r3, r3, #1
 80015f8:	6413      	str	r3, [r2, #64]	@ 0x40
 80015fa:	4b06      	ldr	r3, [pc, #24]	@ (8001614 <HAL_TIM_Base_MspInit+0x3c>)
 80015fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015fe:	f003 0301 	and.w	r3, r3, #1
 8001602:	60fb      	str	r3, [r7, #12]
 8001604:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 8001606:	bf00      	nop
 8001608:	3714      	adds	r7, #20
 800160a:	46bd      	mov	sp, r7
 800160c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001610:	4770      	bx	lr
 8001612:	bf00      	nop
 8001614:	40023800 	.word	0x40023800

08001618 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001618:	b480      	push	{r7}
 800161a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800161c:	bf00      	nop
 800161e:	e7fd      	b.n	800161c <NMI_Handler+0x4>

08001620 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001620:	b480      	push	{r7}
 8001622:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001624:	bf00      	nop
 8001626:	e7fd      	b.n	8001624 <HardFault_Handler+0x4>

08001628 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001628:	b480      	push	{r7}
 800162a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800162c:	bf00      	nop
 800162e:	e7fd      	b.n	800162c <MemManage_Handler+0x4>

08001630 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001630:	b480      	push	{r7}
 8001632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001634:	bf00      	nop
 8001636:	e7fd      	b.n	8001634 <BusFault_Handler+0x4>

08001638 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001638:	b480      	push	{r7}
 800163a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800163c:	bf00      	nop
 800163e:	e7fd      	b.n	800163c <UsageFault_Handler+0x4>

08001640 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001640:	b480      	push	{r7}
 8001642:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001644:	bf00      	nop
 8001646:	46bd      	mov	sp, r7
 8001648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164c:	4770      	bx	lr

0800164e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800164e:	b480      	push	{r7}
 8001650:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001652:	bf00      	nop
 8001654:	46bd      	mov	sp, r7
 8001656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165a:	4770      	bx	lr

0800165c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800165c:	b480      	push	{r7}
 800165e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001660:	bf00      	nop
 8001662:	46bd      	mov	sp, r7
 8001664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001668:	4770      	bx	lr

0800166a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800166a:	b580      	push	{r7, lr}
 800166c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800166e:	f003 f9e7 	bl	8004a40 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001672:	bf00      	nop
 8001674:	bd80      	pop	{r7, pc}
	...

08001678 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 800167c:	4802      	ldr	r0, [pc, #8]	@ (8001688 <CAN1_RX0_IRQHandler+0x10>)
 800167e:	f004 fab6 	bl	8005bee <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8001682:	bf00      	nop
 8001684:	bd80      	pop	{r7, pc}
 8001686:	bf00      	nop
 8001688:	200000c4 	.word	0x200000c4

0800168c <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001690:	4802      	ldr	r0, [pc, #8]	@ (800169c <CAN1_RX1_IRQHandler+0x10>)
 8001692:	f004 faac 	bl	8005bee <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8001696:	bf00      	nop
 8001698:	bd80      	pop	{r7, pc}
 800169a:	bf00      	nop
 800169c:	200000c4 	.word	0x200000c4

080016a0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80016a0:	b480      	push	{r7}
 80016a2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80016a4:	4b06      	ldr	r3, [pc, #24]	@ (80016c0 <SystemInit+0x20>)
 80016a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80016aa:	4a05      	ldr	r2, [pc, #20]	@ (80016c0 <SystemInit+0x20>)
 80016ac:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80016b0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80016b4:	bf00      	nop
 80016b6:	46bd      	mov	sp, r7
 80016b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016bc:	4770      	bx	lr
 80016be:	bf00      	nop
 80016c0:	e000ed00 	.word	0xe000ed00

080016c4 <resistor_temp_sense>:
#include "torch_ltc6813.h"
#include "torch_temperature.h"


void resistor_temp_sense(void)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b0b6      	sub	sp, #216	@ 0xd8
 80016c8:	af00      	add	r7, sp, #0
	float sideB_boardThermistorVoltages[9];

	float sideA_temperatures[9];
	float sideB_temperatures[9];

	ADAXD(SIDE_A);
 80016ca:	2001      	movs	r0, #1
 80016cc:	f001 f8f0 	bl	80028b0 <ADAXD>
	ADAXD(SIDE_B);
 80016d0:	2000      	movs	r0, #0
 80016d2:	f001 f8ed 	bl	80028b0 <ADAXD>
	wait(3);
 80016d6:	2003      	movs	r0, #3
 80016d8:	f001 feba 	bl	8003450 <wait>

	RDAUXA(sideA_auxRegisterA, SIDE_A);
 80016dc:	f107 03c8 	add.w	r3, r7, #200	@ 0xc8
 80016e0:	2101      	movs	r1, #1
 80016e2:	4618      	mov	r0, r3
 80016e4:	f001 f854 	bl	8002790 <RDAUXA>
	RDAUXA(sideB_auxRegisterA, SIDE_B);
 80016e8:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 80016ec:	2100      	movs	r1, #0
 80016ee:	4618      	mov	r0, r3
 80016f0:	f001 f84e 	bl	8002790 <RDAUXA>
	wait(1);
 80016f4:	2001      	movs	r0, #1
 80016f6:	f001 feab 	bl	8003450 <wait>
	RDAUXB(sideA_auxRegisterB, SIDE_A);
 80016fa:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 80016fe:	2101      	movs	r1, #1
 8001700:	4618      	mov	r0, r3
 8001702:	f001 f869 	bl	80027d8 <RDAUXB>
	RDAUXB(sideB_auxRegisterB, SIDE_B);
 8001706:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 800170a:	2100      	movs	r1, #0
 800170c:	4618      	mov	r0, r3
 800170e:	f001 f863 	bl	80027d8 <RDAUXB>
	wait(1);
 8001712:	2001      	movs	r0, #1
 8001714:	f001 fe9c 	bl	8003450 <wait>
	RDAUXC(sideA_auxRegisterC, SIDE_A);
 8001718:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 800171c:	2101      	movs	r1, #1
 800171e:	4618      	mov	r0, r3
 8001720:	f001 f87e 	bl	8002820 <RDAUXC>
	RDAUXC(sideB_auxRegisterC, SIDE_B);
 8001724:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 8001728:	2100      	movs	r1, #0
 800172a:	4618      	mov	r0, r3
 800172c:	f001 f878 	bl	8002820 <RDAUXC>
	wait(1);
 8001730:	2001      	movs	r0, #1
 8001732:	f001 fe8d 	bl	8003450 <wait>
	RDAUXD(sideA_auxRegisterD, SIDE_A);
 8001736:	f107 03b0 	add.w	r3, r7, #176	@ 0xb0
 800173a:	2101      	movs	r1, #1
 800173c:	4618      	mov	r0, r3
 800173e:	f001 f893 	bl	8002868 <RDAUXD>
	RDAUXD(sideB_auxRegisterD, SIDE_B);
 8001742:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 8001746:	2100      	movs	r1, #0
 8001748:	4618      	mov	r0, r3
 800174a:	f001 f88d 	bl	8002868 <RDAUXD>

	sideA_boardThermistorVoltages[0] = ((sideA_auxRegisterA[1] << 8) | sideA_auxRegisterA[0]) / 10000.0f;
 800174e:	f897 30c9 	ldrb.w	r3, [r7, #201]	@ 0xc9
 8001752:	021b      	lsls	r3, r3, #8
 8001754:	f897 20c8 	ldrb.w	r2, [r7, #200]	@ 0xc8
 8001758:	4313      	orrs	r3, r2
 800175a:	ee07 3a90 	vmov	s15, r3
 800175e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001762:	eddf 6aa6 	vldr	s13, [pc, #664]	@ 80019fc <resistor_temp_sense+0x338>
 8001766:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800176a:	edc7 7a1b 	vstr	s15, [r7, #108]	@ 0x6c
	sideA_boardThermistorVoltages[1] = ((sideA_auxRegisterA[3] << 8) | sideA_auxRegisterA[2]) / 10000.0f;
 800176e:	f897 30cb 	ldrb.w	r3, [r7, #203]	@ 0xcb
 8001772:	021b      	lsls	r3, r3, #8
 8001774:	f897 20ca 	ldrb.w	r2, [r7, #202]	@ 0xca
 8001778:	4313      	orrs	r3, r2
 800177a:	ee07 3a90 	vmov	s15, r3
 800177e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001782:	eddf 6a9e 	vldr	s13, [pc, #632]	@ 80019fc <resistor_temp_sense+0x338>
 8001786:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800178a:	edc7 7a1c 	vstr	s15, [r7, #112]	@ 0x70
	sideA_boardThermistorVoltages[2] = ((sideA_auxRegisterA[5] << 8) | sideA_auxRegisterA[4]) / 10000.0f;
 800178e:	f897 30cd 	ldrb.w	r3, [r7, #205]	@ 0xcd
 8001792:	021b      	lsls	r3, r3, #8
 8001794:	f897 20cc 	ldrb.w	r2, [r7, #204]	@ 0xcc
 8001798:	4313      	orrs	r3, r2
 800179a:	ee07 3a90 	vmov	s15, r3
 800179e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80017a2:	eddf 6a96 	vldr	s13, [pc, #600]	@ 80019fc <resistor_temp_sense+0x338>
 80017a6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80017aa:	edc7 7a1d 	vstr	s15, [r7, #116]	@ 0x74
	sideA_boardThermistorVoltages[3] = ((sideA_auxRegisterB[1] << 8) | sideA_auxRegisterB[0]) / 10000.0f;
 80017ae:	f897 30c1 	ldrb.w	r3, [r7, #193]	@ 0xc1
 80017b2:	021b      	lsls	r3, r3, #8
 80017b4:	f897 20c0 	ldrb.w	r2, [r7, #192]	@ 0xc0
 80017b8:	4313      	orrs	r3, r2
 80017ba:	ee07 3a90 	vmov	s15, r3
 80017be:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80017c2:	eddf 6a8e 	vldr	s13, [pc, #568]	@ 80019fc <resistor_temp_sense+0x338>
 80017c6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80017ca:	edc7 7a1e 	vstr	s15, [r7, #120]	@ 0x78
	sideA_boardThermistorVoltages[4] = ((sideA_auxRegisterB[3] << 8) | sideA_auxRegisterB[2]) / 10000.0f;
 80017ce:	f897 30c3 	ldrb.w	r3, [r7, #195]	@ 0xc3
 80017d2:	021b      	lsls	r3, r3, #8
 80017d4:	f897 20c2 	ldrb.w	r2, [r7, #194]	@ 0xc2
 80017d8:	4313      	orrs	r3, r2
 80017da:	ee07 3a90 	vmov	s15, r3
 80017de:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80017e2:	eddf 6a86 	vldr	s13, [pc, #536]	@ 80019fc <resistor_temp_sense+0x338>
 80017e6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80017ea:	edc7 7a1f 	vstr	s15, [r7, #124]	@ 0x7c
	sideA_boardThermistorVoltages[5] = ((sideA_auxRegisterC[1] << 8) | sideA_auxRegisterC[0]) / 10000.0f;
 80017ee:	f897 30b9 	ldrb.w	r3, [r7, #185]	@ 0xb9
 80017f2:	021b      	lsls	r3, r3, #8
 80017f4:	f897 20b8 	ldrb.w	r2, [r7, #184]	@ 0xb8
 80017f8:	4313      	orrs	r3, r2
 80017fa:	ee07 3a90 	vmov	s15, r3
 80017fe:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001802:	eddf 6a7e 	vldr	s13, [pc, #504]	@ 80019fc <resistor_temp_sense+0x338>
 8001806:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800180a:	edc7 7a20 	vstr	s15, [r7, #128]	@ 0x80
	sideA_boardThermistorVoltages[6] = ((sideA_auxRegisterC[3] << 8) | sideA_auxRegisterC[2]) / 10000.0f;
 800180e:	f897 30bb 	ldrb.w	r3, [r7, #187]	@ 0xbb
 8001812:	021b      	lsls	r3, r3, #8
 8001814:	f897 20ba 	ldrb.w	r2, [r7, #186]	@ 0xba
 8001818:	4313      	orrs	r3, r2
 800181a:	ee07 3a90 	vmov	s15, r3
 800181e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001822:	eddf 6a76 	vldr	s13, [pc, #472]	@ 80019fc <resistor_temp_sense+0x338>
 8001826:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800182a:	edc7 7a21 	vstr	s15, [r7, #132]	@ 0x84
	sideA_boardThermistorVoltages[7] = ((sideA_auxRegisterC[5] << 8) | sideA_auxRegisterC[4]) / 10000.0f;
 800182e:	f897 30bd 	ldrb.w	r3, [r7, #189]	@ 0xbd
 8001832:	021b      	lsls	r3, r3, #8
 8001834:	f897 20bc 	ldrb.w	r2, [r7, #188]	@ 0xbc
 8001838:	4313      	orrs	r3, r2
 800183a:	ee07 3a90 	vmov	s15, r3
 800183e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001842:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 80019fc <resistor_temp_sense+0x338>
 8001846:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800184a:	edc7 7a22 	vstr	s15, [r7, #136]	@ 0x88
	sideA_boardThermistorVoltages[8] = ((sideA_auxRegisterD[1] << 8) | sideA_auxRegisterD[0]) / 10000.0f;
 800184e:	f897 30b1 	ldrb.w	r3, [r7, #177]	@ 0xb1
 8001852:	021b      	lsls	r3, r3, #8
 8001854:	f897 20b0 	ldrb.w	r2, [r7, #176]	@ 0xb0
 8001858:	4313      	orrs	r3, r2
 800185a:	ee07 3a90 	vmov	s15, r3
 800185e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001862:	eddf 6a66 	vldr	s13, [pc, #408]	@ 80019fc <resistor_temp_sense+0x338>
 8001866:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800186a:	edc7 7a23 	vstr	s15, [r7, #140]	@ 0x8c

	sideB_boardThermistorVoltages[0] = ((sideB_auxRegisterA[1] << 8) | sideB_auxRegisterA[0]) / 10000.0f;
 800186e:	f897 30a9 	ldrb.w	r3, [r7, #169]	@ 0xa9
 8001872:	021b      	lsls	r3, r3, #8
 8001874:	f897 20a8 	ldrb.w	r2, [r7, #168]	@ 0xa8
 8001878:	4313      	orrs	r3, r2
 800187a:	ee07 3a90 	vmov	s15, r3
 800187e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001882:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 80019fc <resistor_temp_sense+0x338>
 8001886:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800188a:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
	sideB_boardThermistorVoltages[1] = ((sideB_auxRegisterA[3] << 8) | sideB_auxRegisterA[2]) / 10000.0f;
 800188e:	f897 30ab 	ldrb.w	r3, [r7, #171]	@ 0xab
 8001892:	021b      	lsls	r3, r3, #8
 8001894:	f897 20aa 	ldrb.w	r2, [r7, #170]	@ 0xaa
 8001898:	4313      	orrs	r3, r2
 800189a:	ee07 3a90 	vmov	s15, r3
 800189e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80018a2:	eddf 6a56 	vldr	s13, [pc, #344]	@ 80019fc <resistor_temp_sense+0x338>
 80018a6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80018aa:	edc7 7a13 	vstr	s15, [r7, #76]	@ 0x4c
	sideB_boardThermistorVoltages[2] = ((sideB_auxRegisterA[5] << 8) | sideB_auxRegisterA[4]) / 10000.0f;
 80018ae:	f897 30ad 	ldrb.w	r3, [r7, #173]	@ 0xad
 80018b2:	021b      	lsls	r3, r3, #8
 80018b4:	f897 20ac 	ldrb.w	r2, [r7, #172]	@ 0xac
 80018b8:	4313      	orrs	r3, r2
 80018ba:	ee07 3a90 	vmov	s15, r3
 80018be:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80018c2:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 80019fc <resistor_temp_sense+0x338>
 80018c6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80018ca:	edc7 7a14 	vstr	s15, [r7, #80]	@ 0x50
	sideB_boardThermistorVoltages[3] = ((sideB_auxRegisterB[1] << 8) | sideB_auxRegisterB[0]) / 10000.0f;
 80018ce:	f897 30a1 	ldrb.w	r3, [r7, #161]	@ 0xa1
 80018d2:	021b      	lsls	r3, r3, #8
 80018d4:	f897 20a0 	ldrb.w	r2, [r7, #160]	@ 0xa0
 80018d8:	4313      	orrs	r3, r2
 80018da:	ee07 3a90 	vmov	s15, r3
 80018de:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80018e2:	eddf 6a46 	vldr	s13, [pc, #280]	@ 80019fc <resistor_temp_sense+0x338>
 80018e6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80018ea:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54
	sideB_boardThermistorVoltages[4] = ((sideB_auxRegisterB[3] << 8) | sideB_auxRegisterB[2]) / 10000.0f;
 80018ee:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80018f2:	021b      	lsls	r3, r3, #8
 80018f4:	f897 20a2 	ldrb.w	r2, [r7, #162]	@ 0xa2
 80018f8:	4313      	orrs	r3, r2
 80018fa:	ee07 3a90 	vmov	s15, r3
 80018fe:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001902:	eddf 6a3e 	vldr	s13, [pc, #248]	@ 80019fc <resistor_temp_sense+0x338>
 8001906:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800190a:	edc7 7a16 	vstr	s15, [r7, #88]	@ 0x58
	sideB_boardThermistorVoltages[5] = ((sideB_auxRegisterC[1] << 8) | sideB_auxRegisterC[0]) / 10000.0f;
 800190e:	f897 3099 	ldrb.w	r3, [r7, #153]	@ 0x99
 8001912:	021b      	lsls	r3, r3, #8
 8001914:	f897 2098 	ldrb.w	r2, [r7, #152]	@ 0x98
 8001918:	4313      	orrs	r3, r2
 800191a:	ee07 3a90 	vmov	s15, r3
 800191e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001922:	eddf 6a36 	vldr	s13, [pc, #216]	@ 80019fc <resistor_temp_sense+0x338>
 8001926:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800192a:	edc7 7a17 	vstr	s15, [r7, #92]	@ 0x5c
	sideB_boardThermistorVoltages[6] = ((sideB_auxRegisterC[3] << 8) | sideB_auxRegisterC[2]) / 10000.0f;
 800192e:	f897 309b 	ldrb.w	r3, [r7, #155]	@ 0x9b
 8001932:	021b      	lsls	r3, r3, #8
 8001934:	f897 209a 	ldrb.w	r2, [r7, #154]	@ 0x9a
 8001938:	4313      	orrs	r3, r2
 800193a:	ee07 3a90 	vmov	s15, r3
 800193e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001942:	eddf 6a2e 	vldr	s13, [pc, #184]	@ 80019fc <resistor_temp_sense+0x338>
 8001946:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800194a:	edc7 7a18 	vstr	s15, [r7, #96]	@ 0x60
	sideB_boardThermistorVoltages[7] = ((sideB_auxRegisterC[5] << 8) | sideB_auxRegisterC[4]) / 10000.0f;
 800194e:	f897 309d 	ldrb.w	r3, [r7, #157]	@ 0x9d
 8001952:	021b      	lsls	r3, r3, #8
 8001954:	f897 209c 	ldrb.w	r2, [r7, #156]	@ 0x9c
 8001958:	4313      	orrs	r3, r2
 800195a:	ee07 3a90 	vmov	s15, r3
 800195e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001962:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80019fc <resistor_temp_sense+0x338>
 8001966:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800196a:	edc7 7a19 	vstr	s15, [r7, #100]	@ 0x64
	sideB_boardThermistorVoltages[8] = ((sideB_auxRegisterD[1] << 8) | sideB_auxRegisterD[0]) / 10000.0f;
 800196e:	f897 3091 	ldrb.w	r3, [r7, #145]	@ 0x91
 8001972:	021b      	lsls	r3, r3, #8
 8001974:	f897 2090 	ldrb.w	r2, [r7, #144]	@ 0x90
 8001978:	4313      	orrs	r3, r2
 800197a:	ee07 3a90 	vmov	s15, r3
 800197e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001982:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 80019fc <resistor_temp_sense+0x338>
 8001986:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800198a:	edc7 7a1a 	vstr	s15, [r7, #104]	@ 0x68

	sideA_VREF2 = ((sideA_auxRegisterB[5] << 8) | sideA_auxRegisterB[4]) / 10000.0f;
 800198e:	f897 30c5 	ldrb.w	r3, [r7, #197]	@ 0xc5
 8001992:	021b      	lsls	r3, r3, #8
 8001994:	f897 20c4 	ldrb.w	r2, [r7, #196]	@ 0xc4
 8001998:	4313      	orrs	r3, r2
 800199a:	ee07 3a90 	vmov	s15, r3
 800199e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80019a2:	eddf 6a16 	vldr	s13, [pc, #88]	@ 80019fc <resistor_temp_sense+0x338>
 80019a6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80019aa:	edc7 7a35 	vstr	s15, [r7, #212]	@ 0xd4
	sideB_VREF2 = ((sideB_auxRegisterB[5] << 8) | sideB_auxRegisterB[4]) / 10000.0f;
 80019ae:	f897 30a5 	ldrb.w	r3, [r7, #165]	@ 0xa5
 80019b2:	021b      	lsls	r3, r3, #8
 80019b4:	f897 20a4 	ldrb.w	r2, [r7, #164]	@ 0xa4
 80019b8:	4313      	orrs	r3, r2
 80019ba:	ee07 3a90 	vmov	s15, r3
 80019be:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80019c2:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 80019fc <resistor_temp_sense+0x338>
 80019c6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80019ca:	edc7 7a34 	vstr	s15, [r7, #208]	@ 0xd0

	board_temperature_sense(sideA_boardThermistorVoltages, sideA_VREF2, sideA_temperatures);
 80019ce:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 80019d2:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80019d6:	4611      	mov	r1, r2
 80019d8:	ed97 0a35 	vldr	s0, [r7, #212]	@ 0xd4
 80019dc:	4618      	mov	r0, r3
 80019de:	f002 fc97 	bl	8004310 <board_temperature_sense>
	board_temperature_sense(sideB_boardThermistorVoltages, sideB_VREF2, sideB_temperatures);
 80019e2:	463a      	mov	r2, r7
 80019e4:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80019e8:	4611      	mov	r1, r2
 80019ea:	ed97 0a34 	vldr	s0, [r7, #208]	@ 0xd0
 80019ee:	4618      	mov	r0, r3
 80019f0:	f002 fc8e 	bl	8004310 <board_temperature_sense>
}
 80019f4:	bf00      	nop
 80019f6:	37d8      	adds	r7, #216	@ 0xd8
 80019f8:	46bd      	mov	sp, r7
 80019fa:	bd80      	pop	{r7, pc}
 80019fc:	461c4000 	.word	0x461c4000

08001a00 <can_transmit>:

}*/


void can_transmit(uint16_t canMsgID, uint8_t *payload)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b08a      	sub	sp, #40	@ 0x28
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	4603      	mov	r3, r0
 8001a08:	6039      	str	r1, [r7, #0]
 8001a0a:	80fb      	strh	r3, [r7, #6]
	CAN_TxHeaderTypeDef TxHeader;
	uint32_t TxMailbox;

	TxHeader.DLC = 8;
 8001a0c:	2308      	movs	r3, #8
 8001a0e:	623b      	str	r3, [r7, #32]
	TxHeader.ExtId = 0;
 8001a10:	2300      	movs	r3, #0
 8001a12:	617b      	str	r3, [r7, #20]
	TxHeader.IDE = CAN_ID_STD;
 8001a14:	2300      	movs	r3, #0
 8001a16:	61bb      	str	r3, [r7, #24]
	TxHeader.RTR = CAN_RTR_DATA;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	61fb      	str	r3, [r7, #28]
	TxHeader.StdId = canMsgID;
 8001a1c:	88fb      	ldrh	r3, [r7, #6]
 8001a1e:	613b      	str	r3, [r7, #16]
	TxHeader.TransmitGlobalTime = DISABLE;
 8001a20:	2300      	movs	r3, #0
 8001a22:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24

	HAL_CAN_AddTxMessage(&hcan1, &TxHeader, payload, &TxMailbox);
 8001a26:	f107 030c 	add.w	r3, r7, #12
 8001a2a:	f107 0110 	add.w	r1, r7, #16
 8001a2e:	683a      	ldr	r2, [r7, #0]
 8001a30:	4804      	ldr	r0, [pc, #16]	@ (8001a44 <can_transmit+0x44>)
 8001a32:	f003 fec2 	bl	80057ba <HAL_CAN_AddTxMessage>
	wait(10);
 8001a36:	200a      	movs	r0, #10
 8001a38:	f001 fd0a 	bl	8003450 <wait>
}
 8001a3c:	bf00      	nop
 8001a3e:	3728      	adds	r7, #40	@ 0x28
 8001a40:	46bd      	mov	sp, r7
 8001a42:	bd80      	pop	{r7, pc}
 8001a44:	200000c4 	.word	0x200000c4

08001a48 <silent_error_loop>:


void silent_error_loop(void)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	af00      	add	r7, sp, #0
	pull_high(GPIOA, GPIO_PIN_8);		// ACTIVE LED
 8001a4c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001a50:	4808      	ldr	r0, [pc, #32]	@ (8001a74 <silent_error_loop+0x2c>)
 8001a52:	f001 fced 	bl	8003430 <pull_high>
	pull_high(GPIOC, GPIO_PIN_9);		// CHARGE LED
 8001a56:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001a5a:	4807      	ldr	r0, [pc, #28]	@ (8001a78 <silent_error_loop+0x30>)
 8001a5c:	f001 fce8 	bl	8003430 <pull_high>
	stop_timer(&htim2);
 8001a60:	4806      	ldr	r0, [pc, #24]	@ (8001a7c <silent_error_loop+0x34>)
 8001a62:	f001 fd5b 	bl	800351c <stop_timer>
	HAL_CAN_Stop(&hcan1);
 8001a66:	4806      	ldr	r0, [pc, #24]	@ (8001a80 <silent_error_loop+0x38>)
 8001a68:	f003 fe5e 	bl	8005728 <HAL_CAN_Stop>
	while(1) {
		wait(10);
 8001a6c:	200a      	movs	r0, #10
 8001a6e:	f001 fcef 	bl	8003450 <wait>
 8001a72:	e7fb      	b.n	8001a6c <silent_error_loop+0x24>
 8001a74:	40020000 	.word	0x40020000
 8001a78:	40020800 	.word	0x40020800
 8001a7c:	2000019c 	.word	0x2000019c
 8001a80:	200000c4 	.word	0x200000c4

08001a84 <error_loop>:
	}
}


void error_loop(uint8_t errorCode, uint16_t faultValue, uint8_t faultIndex)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b084      	sub	sp, #16
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	71fb      	strb	r3, [r7, #7]
 8001a8e:	460b      	mov	r3, r1
 8001a90:	80bb      	strh	r3, [r7, #4]
 8001a92:	4613      	mov	r3, r2
 8001a94:	71bb      	strb	r3, [r7, #6]
	uint8_t msgFault[8];

	msgFault[0] = moduleID;
 8001a96:	4b34      	ldr	r3, [pc, #208]	@ (8001b68 <error_loop+0xe4>)
 8001a98:	781b      	ldrb	r3, [r3, #0]
 8001a9a:	723b      	strb	r3, [r7, #8]
	msgFault[1] = errorCode;
 8001a9c:	79fb      	ldrb	r3, [r7, #7]
 8001a9e:	727b      	strb	r3, [r7, #9]

	switch(errorCode) {
 8001aa0:	79fb      	ldrb	r3, [r7, #7]
 8001aa2:	2b47      	cmp	r3, #71	@ 0x47
 8001aa4:	d028      	beq.n	8001af8 <error_loop+0x74>
 8001aa6:	2b47      	cmp	r3, #71	@ 0x47
 8001aa8:	dc37      	bgt.n	8001b1a <error_loop+0x96>
 8001aaa:	2b45      	cmp	r3, #69	@ 0x45
 8001aac:	d002      	beq.n	8001ab4 <error_loop+0x30>
 8001aae:	2b46      	cmp	r3, #70	@ 0x46
 8001ab0:	d011      	beq.n	8001ad6 <error_loop+0x52>
 8001ab2:	e032      	b.n	8001b1a <error_loop+0x96>
		case ERROR_OVERHEAT:
			// Setting cell voltage portions of fault message to zero
			msgFault[2] = 0;
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	72bb      	strb	r3, [r7, #10]
			msgFault[3] = 0;
 8001ab8:	2300      	movs	r3, #0
 8001aba:	72fb      	strb	r3, [r7, #11]
			msgFault[4] = 0;
 8001abc:	2300      	movs	r3, #0
 8001abe:	733b      	strb	r3, [r7, #12]

			msgFault[5] = (uint8_t)(faultValue & 0xFF);
 8001ac0:	88bb      	ldrh	r3, [r7, #4]
 8001ac2:	b2db      	uxtb	r3, r3
 8001ac4:	737b      	strb	r3, [r7, #13]
			msgFault[6] = (uint8_t)((faultValue >> 8) & 0xFF);
 8001ac6:	88bb      	ldrh	r3, [r7, #4]
 8001ac8:	0a1b      	lsrs	r3, r3, #8
 8001aca:	b29b      	uxth	r3, r3
 8001acc:	b2db      	uxtb	r3, r3
 8001ace:	73bb      	strb	r3, [r7, #14]
			msgFault[7] = faultIndex;
 8001ad0:	79bb      	ldrb	r3, [r7, #6]
 8001ad2:	73fb      	strb	r3, [r7, #15]
			break;
 8001ad4:	e02e      	b.n	8001b34 <error_loop+0xb0>
		case ERROR_UNDERVOLT:
			msgFault[2] = (uint8_t)(faultValue & 0xFF);
 8001ad6:	88bb      	ldrh	r3, [r7, #4]
 8001ad8:	b2db      	uxtb	r3, r3
 8001ada:	72bb      	strb	r3, [r7, #10]
			msgFault[3] = (uint8_t)((faultValue >> 8) & 0xFF);
 8001adc:	88bb      	ldrh	r3, [r7, #4]
 8001ade:	0a1b      	lsrs	r3, r3, #8
 8001ae0:	b29b      	uxth	r3, r3
 8001ae2:	b2db      	uxtb	r3, r3
 8001ae4:	72fb      	strb	r3, [r7, #11]
			msgFault[4] = faultIndex;
 8001ae6:	79bb      	ldrb	r3, [r7, #6]
 8001ae8:	733b      	strb	r3, [r7, #12]

			// Setting temperature portions of fault message to zero
			msgFault[5] = 0;
 8001aea:	2300      	movs	r3, #0
 8001aec:	737b      	strb	r3, [r7, #13]
			msgFault[6] = 0;
 8001aee:	2300      	movs	r3, #0
 8001af0:	73bb      	strb	r3, [r7, #14]
			msgFault[7] = 0;
 8001af2:	2300      	movs	r3, #0
 8001af4:	73fb      	strb	r3, [r7, #15]
			break;
 8001af6:	e01d      	b.n	8001b34 <error_loop+0xb0>
		case ERROR_OVERVOLT:
			msgFault[2] = (uint8_t)(faultValue & 0xFF);
 8001af8:	88bb      	ldrh	r3, [r7, #4]
 8001afa:	b2db      	uxtb	r3, r3
 8001afc:	72bb      	strb	r3, [r7, #10]
			msgFault[3] = (uint8_t)((faultValue >> 8) & 0xFF);
 8001afe:	88bb      	ldrh	r3, [r7, #4]
 8001b00:	0a1b      	lsrs	r3, r3, #8
 8001b02:	b29b      	uxth	r3, r3
 8001b04:	b2db      	uxtb	r3, r3
 8001b06:	72fb      	strb	r3, [r7, #11]
			msgFault[4] = faultIndex;
 8001b08:	79bb      	ldrb	r3, [r7, #6]
 8001b0a:	733b      	strb	r3, [r7, #12]

			// Setting temperature portions of fault message to zero
			msgFault[5] = 0;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	737b      	strb	r3, [r7, #13]
			msgFault[6] = 0;
 8001b10:	2300      	movs	r3, #0
 8001b12:	73bb      	strb	r3, [r7, #14]
			msgFault[7] = 0;
 8001b14:	2300      	movs	r3, #0
 8001b16:	73fb      	strb	r3, [r7, #15]
			break;
 8001b18:	e00c      	b.n	8001b34 <error_loop+0xb0>
		default:
			msgFault[2] = 0;
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	72bb      	strb	r3, [r7, #10]
			msgFault[3] = 0;
 8001b1e:	2300      	movs	r3, #0
 8001b20:	72fb      	strb	r3, [r7, #11]
			msgFault[4] = 0;
 8001b22:	2300      	movs	r3, #0
 8001b24:	733b      	strb	r3, [r7, #12]
			msgFault[5] = 0;
 8001b26:	2300      	movs	r3, #0
 8001b28:	737b      	strb	r3, [r7, #13]
			msgFault[6] = 0;
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	73bb      	strb	r3, [r7, #14]
			msgFault[7] = 0;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	73fb      	strb	r3, [r7, #15]
			break;
 8001b32:	bf00      	nop
	}
	pull_high(GPIOA, GPIO_PIN_8);		// ACTIVE LED
 8001b34:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001b38:	480c      	ldr	r0, [pc, #48]	@ (8001b6c <error_loop+0xe8>)
 8001b3a:	f001 fc79 	bl	8003430 <pull_high>
	pull_high(GPIOC, GPIO_PIN_9);		// CHARGE LED
 8001b3e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001b42:	480b      	ldr	r0, [pc, #44]	@ (8001b70 <error_loop+0xec>)
 8001b44:	f001 fc74 	bl	8003430 <pull_high>
	stop_timer(&htim2);
 8001b48:	480a      	ldr	r0, [pc, #40]	@ (8001b74 <error_loop+0xf0>)
 8001b4a:	f001 fce7 	bl	800351c <stop_timer>
	while(1) {
		can_transmit(CAN_FAULT_ID, msgFault);
 8001b4e:	f107 0308 	add.w	r3, r7, #8
 8001b52:	4619      	mov	r1, r3
 8001b54:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001b58:	f7ff ff52 	bl	8001a00 <can_transmit>
		wait(1000);
 8001b5c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001b60:	f001 fc76 	bl	8003450 <wait>
		can_transmit(CAN_FAULT_ID, msgFault);
 8001b64:	bf00      	nop
 8001b66:	e7f2      	b.n	8001b4e <error_loop+0xca>
 8001b68:	08008da0 	.word	0x08008da0
 8001b6c:	40020000 	.word	0x40020000
 8001b70:	40020800 	.word	0x40020800
 8001b74:	2000019c 	.word	0x2000019c

08001b78 <transmit_voltages>:
	}
}


void transmit_voltages(uint16_t *cellVoltages)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b08c      	sub	sp, #48	@ 0x30
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
	uint8_t msgV2[8];
	uint8_t msgV3[8];
	uint8_t msgV4[8];
	uint8_t msgV5[8];

	msgV1[0] = (uint8_t)(*cellVoltages & 0xFF);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	881b      	ldrh	r3, [r3, #0]
 8001b84:	b2db      	uxtb	r3, r3
 8001b86:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
	msgV1[1] = (uint8_t)((*cellVoltages >> 8) & 0xFF);
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	881b      	ldrh	r3, [r3, #0]
 8001b8e:	0a1b      	lsrs	r3, r3, #8
 8001b90:	b29b      	uxth	r3, r3
 8001b92:	b2db      	uxtb	r3, r3
 8001b94:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
	msgV1[2] = (uint8_t)(*(cellVoltages + 1) & 0xFF);
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	3302      	adds	r3, #2
 8001b9c:	881b      	ldrh	r3, [r3, #0]
 8001b9e:	b2db      	uxtb	r3, r3
 8001ba0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
	msgV1[3] = (uint8_t)((*(cellVoltages + 1) >> 8) & 0xFF);
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	3302      	adds	r3, #2
 8001ba8:	881b      	ldrh	r3, [r3, #0]
 8001baa:	0a1b      	lsrs	r3, r3, #8
 8001bac:	b29b      	uxth	r3, r3
 8001bae:	b2db      	uxtb	r3, r3
 8001bb0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
	msgV1[4] = (uint8_t)(*(cellVoltages + 2) & 0xFF);
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	3304      	adds	r3, #4
 8001bb8:	881b      	ldrh	r3, [r3, #0]
 8001bba:	b2db      	uxtb	r3, r3
 8001bbc:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
	msgV1[5] = (uint8_t)((*(cellVoltages + 2) >> 8) & 0xFF);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	3304      	adds	r3, #4
 8001bc4:	881b      	ldrh	r3, [r3, #0]
 8001bc6:	0a1b      	lsrs	r3, r3, #8
 8001bc8:	b29b      	uxth	r3, r3
 8001bca:	b2db      	uxtb	r3, r3
 8001bcc:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
	msgV1[6] = (uint8_t)(*(cellVoltages + 3) & 0xFF);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	3306      	adds	r3, #6
 8001bd4:	881b      	ldrh	r3, [r3, #0]
 8001bd6:	b2db      	uxtb	r3, r3
 8001bd8:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
	msgV1[7] = (uint8_t)((*(cellVoltages + 3) >> 8) & 0xFF);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	3306      	adds	r3, #6
 8001be0:	881b      	ldrh	r3, [r3, #0]
 8001be2:	0a1b      	lsrs	r3, r3, #8
 8001be4:	b29b      	uxth	r3, r3
 8001be6:	b2db      	uxtb	r3, r3
 8001be8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

	msgV2[0] = (uint8_t)(*(cellVoltages + 4) & 0xFF);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	3308      	adds	r3, #8
 8001bf0:	881b      	ldrh	r3, [r3, #0]
 8001bf2:	b2db      	uxtb	r3, r3
 8001bf4:	f887 3020 	strb.w	r3, [r7, #32]
	msgV2[1] = (uint8_t)((*(cellVoltages + 4) >> 8) & 0xFF);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	3308      	adds	r3, #8
 8001bfc:	881b      	ldrh	r3, [r3, #0]
 8001bfe:	0a1b      	lsrs	r3, r3, #8
 8001c00:	b29b      	uxth	r3, r3
 8001c02:	b2db      	uxtb	r3, r3
 8001c04:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
	msgV2[2] = (uint8_t)(*(cellVoltages + 5) & 0xFF);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	330a      	adds	r3, #10
 8001c0c:	881b      	ldrh	r3, [r3, #0]
 8001c0e:	b2db      	uxtb	r3, r3
 8001c10:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
	msgV2[3] = (uint8_t)((*(cellVoltages + 5) >> 8) & 0xFF);
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	330a      	adds	r3, #10
 8001c18:	881b      	ldrh	r3, [r3, #0]
 8001c1a:	0a1b      	lsrs	r3, r3, #8
 8001c1c:	b29b      	uxth	r3, r3
 8001c1e:	b2db      	uxtb	r3, r3
 8001c20:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
	msgV2[4] = (uint8_t)(*(cellVoltages + 6) & 0xFF);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	330c      	adds	r3, #12
 8001c28:	881b      	ldrh	r3, [r3, #0]
 8001c2a:	b2db      	uxtb	r3, r3
 8001c2c:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
	msgV2[5] = (uint8_t)((*(cellVoltages + 6) >> 8) & 0xFF);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	330c      	adds	r3, #12
 8001c34:	881b      	ldrh	r3, [r3, #0]
 8001c36:	0a1b      	lsrs	r3, r3, #8
 8001c38:	b29b      	uxth	r3, r3
 8001c3a:	b2db      	uxtb	r3, r3
 8001c3c:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
	msgV2[6] = (uint8_t)(*(cellVoltages + 7) & 0xFF);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	330e      	adds	r3, #14
 8001c44:	881b      	ldrh	r3, [r3, #0]
 8001c46:	b2db      	uxtb	r3, r3
 8001c48:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	msgV2[7] = (uint8_t)((*(cellVoltages + 7) >> 8) & 0xFF);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	330e      	adds	r3, #14
 8001c50:	881b      	ldrh	r3, [r3, #0]
 8001c52:	0a1b      	lsrs	r3, r3, #8
 8001c54:	b29b      	uxth	r3, r3
 8001c56:	b2db      	uxtb	r3, r3
 8001c58:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

	msgV3[0] = (uint8_t)(*(cellVoltages + 8) & 0xFF);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	3310      	adds	r3, #16
 8001c60:	881b      	ldrh	r3, [r3, #0]
 8001c62:	b2db      	uxtb	r3, r3
 8001c64:	763b      	strb	r3, [r7, #24]
	msgV3[1] = (uint8_t)((*(cellVoltages + 8) >> 8) & 0xFF);
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	3310      	adds	r3, #16
 8001c6a:	881b      	ldrh	r3, [r3, #0]
 8001c6c:	0a1b      	lsrs	r3, r3, #8
 8001c6e:	b29b      	uxth	r3, r3
 8001c70:	b2db      	uxtb	r3, r3
 8001c72:	767b      	strb	r3, [r7, #25]
	msgV3[2] = (uint8_t)(*(cellVoltages + 9) & 0xFF);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	3312      	adds	r3, #18
 8001c78:	881b      	ldrh	r3, [r3, #0]
 8001c7a:	b2db      	uxtb	r3, r3
 8001c7c:	76bb      	strb	r3, [r7, #26]
	msgV3[3] = (uint8_t)((*(cellVoltages + 9) >> 8) & 0xFF);
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	3312      	adds	r3, #18
 8001c82:	881b      	ldrh	r3, [r3, #0]
 8001c84:	0a1b      	lsrs	r3, r3, #8
 8001c86:	b29b      	uxth	r3, r3
 8001c88:	b2db      	uxtb	r3, r3
 8001c8a:	76fb      	strb	r3, [r7, #27]
	msgV3[4] = (uint8_t)(*(cellVoltages + 10) & 0xFF);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	3314      	adds	r3, #20
 8001c90:	881b      	ldrh	r3, [r3, #0]
 8001c92:	b2db      	uxtb	r3, r3
 8001c94:	773b      	strb	r3, [r7, #28]
	msgV3[5] = (uint8_t)((*(cellVoltages + 10) >> 8) & 0xFF);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	3314      	adds	r3, #20
 8001c9a:	881b      	ldrh	r3, [r3, #0]
 8001c9c:	0a1b      	lsrs	r3, r3, #8
 8001c9e:	b29b      	uxth	r3, r3
 8001ca0:	b2db      	uxtb	r3, r3
 8001ca2:	777b      	strb	r3, [r7, #29]
	msgV3[6] = (uint8_t)(*(cellVoltages + 11) & 0xFF);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	3316      	adds	r3, #22
 8001ca8:	881b      	ldrh	r3, [r3, #0]
 8001caa:	b2db      	uxtb	r3, r3
 8001cac:	77bb      	strb	r3, [r7, #30]
	msgV3[7] = (uint8_t)((*(cellVoltages + 11) >> 8) & 0xFF);
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	3316      	adds	r3, #22
 8001cb2:	881b      	ldrh	r3, [r3, #0]
 8001cb4:	0a1b      	lsrs	r3, r3, #8
 8001cb6:	b29b      	uxth	r3, r3
 8001cb8:	b2db      	uxtb	r3, r3
 8001cba:	77fb      	strb	r3, [r7, #31]

	msgV4[0] = (uint8_t)(*(cellVoltages + 12) & 0xFF);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	3318      	adds	r3, #24
 8001cc0:	881b      	ldrh	r3, [r3, #0]
 8001cc2:	b2db      	uxtb	r3, r3
 8001cc4:	743b      	strb	r3, [r7, #16]
	msgV4[1] = (uint8_t)((*(cellVoltages + 12) >> 8) & 0xFF);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	3318      	adds	r3, #24
 8001cca:	881b      	ldrh	r3, [r3, #0]
 8001ccc:	0a1b      	lsrs	r3, r3, #8
 8001cce:	b29b      	uxth	r3, r3
 8001cd0:	b2db      	uxtb	r3, r3
 8001cd2:	747b      	strb	r3, [r7, #17]
	msgV4[2] = (uint8_t)(*(cellVoltages + 13) & 0xFF);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	331a      	adds	r3, #26
 8001cd8:	881b      	ldrh	r3, [r3, #0]
 8001cda:	b2db      	uxtb	r3, r3
 8001cdc:	74bb      	strb	r3, [r7, #18]
	msgV4[3] = (uint8_t)((*(cellVoltages + 13) >> 8) & 0xFF);
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	331a      	adds	r3, #26
 8001ce2:	881b      	ldrh	r3, [r3, #0]
 8001ce4:	0a1b      	lsrs	r3, r3, #8
 8001ce6:	b29b      	uxth	r3, r3
 8001ce8:	b2db      	uxtb	r3, r3
 8001cea:	74fb      	strb	r3, [r7, #19]
	msgV4[4] = (uint8_t)(*(cellVoltages + 14) & 0xFF);
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	331c      	adds	r3, #28
 8001cf0:	881b      	ldrh	r3, [r3, #0]
 8001cf2:	b2db      	uxtb	r3, r3
 8001cf4:	753b      	strb	r3, [r7, #20]
	msgV4[5] = (uint8_t)((*(cellVoltages + 14) >> 8) & 0xFF);
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	331c      	adds	r3, #28
 8001cfa:	881b      	ldrh	r3, [r3, #0]
 8001cfc:	0a1b      	lsrs	r3, r3, #8
 8001cfe:	b29b      	uxth	r3, r3
 8001d00:	b2db      	uxtb	r3, r3
 8001d02:	757b      	strb	r3, [r7, #21]
	msgV4[6] = (uint8_t)(*(cellVoltages + 15) & 0xFF);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	331e      	adds	r3, #30
 8001d08:	881b      	ldrh	r3, [r3, #0]
 8001d0a:	b2db      	uxtb	r3, r3
 8001d0c:	75bb      	strb	r3, [r7, #22]
	msgV4[7] = (uint8_t)((*(cellVoltages + 15) >> 8) & 0xFF);
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	331e      	adds	r3, #30
 8001d12:	881b      	ldrh	r3, [r3, #0]
 8001d14:	0a1b      	lsrs	r3, r3, #8
 8001d16:	b29b      	uxth	r3, r3
 8001d18:	b2db      	uxtb	r3, r3
 8001d1a:	75fb      	strb	r3, [r7, #23]

	msgV5[0] = (uint8_t)(*(cellVoltages + 16) & 0xFF);
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	3320      	adds	r3, #32
 8001d20:	881b      	ldrh	r3, [r3, #0]
 8001d22:	b2db      	uxtb	r3, r3
 8001d24:	723b      	strb	r3, [r7, #8]
	msgV5[1] = (uint8_t)((*(cellVoltages + 16) >> 8) & 0xFF);
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	3320      	adds	r3, #32
 8001d2a:	881b      	ldrh	r3, [r3, #0]
 8001d2c:	0a1b      	lsrs	r3, r3, #8
 8001d2e:	b29b      	uxth	r3, r3
 8001d30:	b2db      	uxtb	r3, r3
 8001d32:	727b      	strb	r3, [r7, #9]
	msgV5[2] = (uint8_t)(*(cellVoltages + 17) & 0xFF);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	3322      	adds	r3, #34	@ 0x22
 8001d38:	881b      	ldrh	r3, [r3, #0]
 8001d3a:	b2db      	uxtb	r3, r3
 8001d3c:	72bb      	strb	r3, [r7, #10]
	msgV5[3] = (uint8_t)((*(cellVoltages + 17) >> 8) & 0xFF);
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	3322      	adds	r3, #34	@ 0x22
 8001d42:	881b      	ldrh	r3, [r3, #0]
 8001d44:	0a1b      	lsrs	r3, r3, #8
 8001d46:	b29b      	uxth	r3, r3
 8001d48:	b2db      	uxtb	r3, r3
 8001d4a:	72fb      	strb	r3, [r7, #11]
	msgV5[4] = (uint8_t)(*(cellVoltages + 18) & 0xFF);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	3324      	adds	r3, #36	@ 0x24
 8001d50:	881b      	ldrh	r3, [r3, #0]
 8001d52:	b2db      	uxtb	r3, r3
 8001d54:	733b      	strb	r3, [r7, #12]
	msgV5[5] = (uint8_t)((*(cellVoltages + 18) >> 8) & 0xFF);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	3324      	adds	r3, #36	@ 0x24
 8001d5a:	881b      	ldrh	r3, [r3, #0]
 8001d5c:	0a1b      	lsrs	r3, r3, #8
 8001d5e:	b29b      	uxth	r3, r3
 8001d60:	b2db      	uxtb	r3, r3
 8001d62:	737b      	strb	r3, [r7, #13]
	msgV5[6] = (uint8_t)(*(cellVoltages + 19) & 0xFF);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	3326      	adds	r3, #38	@ 0x26
 8001d68:	881b      	ldrh	r3, [r3, #0]
 8001d6a:	b2db      	uxtb	r3, r3
 8001d6c:	73bb      	strb	r3, [r7, #14]
	msgV5[7] = (uint8_t)((*(cellVoltages + 19) >> 8) & 0xFF);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	3326      	adds	r3, #38	@ 0x26
 8001d72:	881b      	ldrh	r3, [r3, #0]
 8001d74:	0a1b      	lsrs	r3, r3, #8
 8001d76:	b29b      	uxth	r3, r3
 8001d78:	b2db      	uxtb	r3, r3
 8001d7a:	73fb      	strb	r3, [r7, #15]

	switch(moduleID) {
 8001d7c:	4b65      	ldr	r3, [pc, #404]	@ (8001f14 <transmit_voltages+0x39c>)
 8001d7e:	781b      	ldrb	r3, [r3, #0]
 8001d80:	3b01      	subs	r3, #1
 8001d82:	2b04      	cmp	r3, #4
 8001d84:	f200 80c2 	bhi.w	8001f0c <transmit_voltages+0x394>
 8001d88:	a201      	add	r2, pc, #4	@ (adr r2, 8001d90 <transmit_voltages+0x218>)
 8001d8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d8e:	bf00      	nop
 8001d90:	08001da5 	.word	0x08001da5
 8001d94:	08001ded 	.word	0x08001ded
 8001d98:	08001e35 	.word	0x08001e35
 8001d9c:	08001e7d 	.word	0x08001e7d
 8001da0:	08001ec5 	.word	0x08001ec5
		case 1:
			can_transmit(CAN_M1_V1_ID, msgV1);
 8001da4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001da8:	4619      	mov	r1, r3
 8001daa:	f240 30ee 	movw	r0, #1006	@ 0x3ee
 8001dae:	f7ff fe27 	bl	8001a00 <can_transmit>
			can_transmit(CAN_M1_V2_ID, msgV2);
 8001db2:	f107 0320 	add.w	r3, r7, #32
 8001db6:	4619      	mov	r1, r3
 8001db8:	f240 30ef 	movw	r0, #1007	@ 0x3ef
 8001dbc:	f7ff fe20 	bl	8001a00 <can_transmit>
			can_transmit(CAN_M1_V3_ID, msgV3);
 8001dc0:	f107 0318 	add.w	r3, r7, #24
 8001dc4:	4619      	mov	r1, r3
 8001dc6:	f44f 707c 	mov.w	r0, #1008	@ 0x3f0
 8001dca:	f7ff fe19 	bl	8001a00 <can_transmit>
			can_transmit(CAN_M1_V4_ID, msgV4);
 8001dce:	f107 0310 	add.w	r3, r7, #16
 8001dd2:	4619      	mov	r1, r3
 8001dd4:	f240 30f1 	movw	r0, #1009	@ 0x3f1
 8001dd8:	f7ff fe12 	bl	8001a00 <can_transmit>
			can_transmit(CAN_M1_V5_ID, msgV5);
 8001ddc:	f107 0308 	add.w	r3, r7, #8
 8001de0:	4619      	mov	r1, r3
 8001de2:	f240 30f2 	movw	r0, #1010	@ 0x3f2
 8001de6:	f7ff fe0b 	bl	8001a00 <can_transmit>
			break;
 8001dea:	e08f      	b.n	8001f0c <transmit_voltages+0x394>
		case 2:
			can_transmit(CAN_M2_V1_ID, msgV1);
 8001dec:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001df0:	4619      	mov	r1, r3
 8001df2:	f240 30f3 	movw	r0, #1011	@ 0x3f3
 8001df6:	f7ff fe03 	bl	8001a00 <can_transmit>
			can_transmit(CAN_M2_V2_ID, msgV2);
 8001dfa:	f107 0320 	add.w	r3, r7, #32
 8001dfe:	4619      	mov	r1, r3
 8001e00:	f44f 707d 	mov.w	r0, #1012	@ 0x3f4
 8001e04:	f7ff fdfc 	bl	8001a00 <can_transmit>
			can_transmit(CAN_M2_V3_ID, msgV3);
 8001e08:	f107 0318 	add.w	r3, r7, #24
 8001e0c:	4619      	mov	r1, r3
 8001e0e:	f240 30f5 	movw	r0, #1013	@ 0x3f5
 8001e12:	f7ff fdf5 	bl	8001a00 <can_transmit>
			can_transmit(CAN_M2_V4_ID, msgV4);
 8001e16:	f107 0310 	add.w	r3, r7, #16
 8001e1a:	4619      	mov	r1, r3
 8001e1c:	f240 30f6 	movw	r0, #1014	@ 0x3f6
 8001e20:	f7ff fdee 	bl	8001a00 <can_transmit>
			can_transmit(CAN_M2_V5_ID, msgV5);
 8001e24:	f107 0308 	add.w	r3, r7, #8
 8001e28:	4619      	mov	r1, r3
 8001e2a:	f240 30f7 	movw	r0, #1015	@ 0x3f7
 8001e2e:	f7ff fde7 	bl	8001a00 <can_transmit>
			break;
 8001e32:	e06b      	b.n	8001f0c <transmit_voltages+0x394>
		case 3:
			can_transmit(CAN_M3_V1_ID, msgV1);
 8001e34:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001e38:	4619      	mov	r1, r3
 8001e3a:	f44f 707e 	mov.w	r0, #1016	@ 0x3f8
 8001e3e:	f7ff fddf 	bl	8001a00 <can_transmit>
			can_transmit(CAN_M3_V2_ID, msgV2);
 8001e42:	f107 0320 	add.w	r3, r7, #32
 8001e46:	4619      	mov	r1, r3
 8001e48:	f240 30f9 	movw	r0, #1017	@ 0x3f9
 8001e4c:	f7ff fdd8 	bl	8001a00 <can_transmit>
			can_transmit(CAN_M3_V3_ID, msgV3);
 8001e50:	f107 0318 	add.w	r3, r7, #24
 8001e54:	4619      	mov	r1, r3
 8001e56:	f240 30fa 	movw	r0, #1018	@ 0x3fa
 8001e5a:	f7ff fdd1 	bl	8001a00 <can_transmit>
			can_transmit(CAN_M3_V4_ID, msgV4);
 8001e5e:	f107 0310 	add.w	r3, r7, #16
 8001e62:	4619      	mov	r1, r3
 8001e64:	f240 30fb 	movw	r0, #1019	@ 0x3fb
 8001e68:	f7ff fdca 	bl	8001a00 <can_transmit>
			can_transmit(CAN_M3_V5_ID, msgV5);
 8001e6c:	f107 0308 	add.w	r3, r7, #8
 8001e70:	4619      	mov	r1, r3
 8001e72:	f44f 707f 	mov.w	r0, #1020	@ 0x3fc
 8001e76:	f7ff fdc3 	bl	8001a00 <can_transmit>
			break;
 8001e7a:	e047      	b.n	8001f0c <transmit_voltages+0x394>
		case 4:
			can_transmit(CAN_M4_V1_ID, msgV1);
 8001e7c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001e80:	4619      	mov	r1, r3
 8001e82:	f240 30fd 	movw	r0, #1021	@ 0x3fd
 8001e86:	f7ff fdbb 	bl	8001a00 <can_transmit>
			can_transmit(CAN_M4_V2_ID, msgV2);
 8001e8a:	f107 0320 	add.w	r3, r7, #32
 8001e8e:	4619      	mov	r1, r3
 8001e90:	f240 30fe 	movw	r0, #1022	@ 0x3fe
 8001e94:	f7ff fdb4 	bl	8001a00 <can_transmit>
			can_transmit(CAN_M4_V3_ID, msgV3);
 8001e98:	f107 0318 	add.w	r3, r7, #24
 8001e9c:	4619      	mov	r1, r3
 8001e9e:	f240 30ff 	movw	r0, #1023	@ 0x3ff
 8001ea2:	f7ff fdad 	bl	8001a00 <can_transmit>
			can_transmit(CAN_M4_V4_ID, msgV4);
 8001ea6:	f107 0310 	add.w	r3, r7, #16
 8001eaa:	4619      	mov	r1, r3
 8001eac:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8001eb0:	f7ff fda6 	bl	8001a00 <can_transmit>
			can_transmit(CAN_M4_V5_ID, msgV5);
 8001eb4:	f107 0308 	add.w	r3, r7, #8
 8001eb8:	4619      	mov	r1, r3
 8001eba:	f240 4001 	movw	r0, #1025	@ 0x401
 8001ebe:	f7ff fd9f 	bl	8001a00 <can_transmit>
			break;
 8001ec2:	e023      	b.n	8001f0c <transmit_voltages+0x394>
		case 5:
			can_transmit(CAN_M5_V1_ID, msgV1);
 8001ec4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001ec8:	4619      	mov	r1, r3
 8001eca:	f240 4002 	movw	r0, #1026	@ 0x402
 8001ece:	f7ff fd97 	bl	8001a00 <can_transmit>
			can_transmit(CAN_M5_V2_ID, msgV2);
 8001ed2:	f107 0320 	add.w	r3, r7, #32
 8001ed6:	4619      	mov	r1, r3
 8001ed8:	f240 4003 	movw	r0, #1027	@ 0x403
 8001edc:	f7ff fd90 	bl	8001a00 <can_transmit>
			can_transmit(CAN_M5_V3_ID, msgV3);
 8001ee0:	f107 0318 	add.w	r3, r7, #24
 8001ee4:	4619      	mov	r1, r3
 8001ee6:	f240 4004 	movw	r0, #1028	@ 0x404
 8001eea:	f7ff fd89 	bl	8001a00 <can_transmit>
			can_transmit(CAN_M5_V4_ID, msgV4);
 8001eee:	f107 0310 	add.w	r3, r7, #16
 8001ef2:	4619      	mov	r1, r3
 8001ef4:	f240 4005 	movw	r0, #1029	@ 0x405
 8001ef8:	f7ff fd82 	bl	8001a00 <can_transmit>
			can_transmit(CAN_M5_V5_ID, msgV5);
 8001efc:	f107 0308 	add.w	r3, r7, #8
 8001f00:	4619      	mov	r1, r3
 8001f02:	f240 4006 	movw	r0, #1030	@ 0x406
 8001f06:	f7ff fd7b 	bl	8001a00 <can_transmit>
			break;
 8001f0a:	bf00      	nop
	}
}
 8001f0c:	bf00      	nop
 8001f0e:	3730      	adds	r7, #48	@ 0x30
 8001f10:	46bd      	mov	sp, r7
 8001f12:	bd80      	pop	{r7, pc}
 8001f14:	08008da0 	.word	0x08008da0

08001f18 <transmit_temperatures>:


void transmit_temperatures(float *temperatures)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b098      	sub	sp, #96	@ 0x60
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
	uint8_t msgT1[8];
	uint8_t msgT2[8];
	uint8_t msgT3[8];
	uint8_t msgT4[8];
	uint8_t msgT5[8];
	float tempScale = 1000.0f;
 8001f20:	4bc4      	ldr	r3, [pc, #784]	@ (8002234 <transmit_temperatures+0x31c>)
 8001f22:	65bb      	str	r3, [r7, #88]	@ 0x58
	uint16_t intTemps[THERM_QTY];

	for(uint8_t i = 0; i < THERM_QTY; i++) {
 8001f24:	2300      	movs	r3, #0
 8001f26:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8001f2a:	e01b      	b.n	8001f64 <transmit_temperatures+0x4c>
		intTemps[i] = (uint16_t)(*(temperatures + i) * tempScale);
 8001f2c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8001f30:	009b      	lsls	r3, r3, #2
 8001f32:	687a      	ldr	r2, [r7, #4]
 8001f34:	4413      	add	r3, r2
 8001f36:	ed93 7a00 	vldr	s14, [r3]
 8001f3a:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 8001f3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f42:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8001f46:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001f4a:	ee17 2a90 	vmov	r2, s15
 8001f4e:	b292      	uxth	r2, r2
 8001f50:	005b      	lsls	r3, r3, #1
 8001f52:	3360      	adds	r3, #96	@ 0x60
 8001f54:	443b      	add	r3, r7
 8001f56:	f823 2c54 	strh.w	r2, [r3, #-84]
	for(uint8_t i = 0; i < THERM_QTY; i++) {
 8001f5a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8001f5e:	3301      	adds	r3, #1
 8001f60:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8001f64:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8001f68:	2b11      	cmp	r3, #17
 8001f6a:	d9df      	bls.n	8001f2c <transmit_temperatures+0x14>
	}

	msgT1[0] = (uint8_t)(intTemps[0] & 0xFF);
 8001f6c:	89bb      	ldrh	r3, [r7, #12]
 8001f6e:	b2db      	uxtb	r3, r3
 8001f70:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
	msgT1[1] = (uint8_t)((intTemps[0] >> 8) & 0xFF);
 8001f74:	89bb      	ldrh	r3, [r7, #12]
 8001f76:	0a1b      	lsrs	r3, r3, #8
 8001f78:	b29b      	uxth	r3, r3
 8001f7a:	b2db      	uxtb	r3, r3
 8001f7c:	f887 3051 	strb.w	r3, [r7, #81]	@ 0x51
	msgT1[2] = (uint8_t)(intTemps[1] & 0xFF);
 8001f80:	89fb      	ldrh	r3, [r7, #14]
 8001f82:	b2db      	uxtb	r3, r3
 8001f84:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
	msgT1[3] = (uint8_t)((intTemps[1] >> 8) & 0xFF);
 8001f88:	89fb      	ldrh	r3, [r7, #14]
 8001f8a:	0a1b      	lsrs	r3, r3, #8
 8001f8c:	b29b      	uxth	r3, r3
 8001f8e:	b2db      	uxtb	r3, r3
 8001f90:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
	msgT1[4] = (uint8_t)(intTemps[2] & 0xFF);
 8001f94:	8a3b      	ldrh	r3, [r7, #16]
 8001f96:	b2db      	uxtb	r3, r3
 8001f98:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
	msgT1[5] = (uint8_t)((intTemps[2] >> 8) & 0xFF);
 8001f9c:	8a3b      	ldrh	r3, [r7, #16]
 8001f9e:	0a1b      	lsrs	r3, r3, #8
 8001fa0:	b29b      	uxth	r3, r3
 8001fa2:	b2db      	uxtb	r3, r3
 8001fa4:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
	msgT1[6] = (uint8_t)(intTemps[3] & 0xFF);
 8001fa8:	8a7b      	ldrh	r3, [r7, #18]
 8001faa:	b2db      	uxtb	r3, r3
 8001fac:	f887 3056 	strb.w	r3, [r7, #86]	@ 0x56
	msgT1[7] = (uint8_t)((intTemps[3] >> 8) & 0xFF);
 8001fb0:	8a7b      	ldrh	r3, [r7, #18]
 8001fb2:	0a1b      	lsrs	r3, r3, #8
 8001fb4:	b29b      	uxth	r3, r3
 8001fb6:	b2db      	uxtb	r3, r3
 8001fb8:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

	msgT2[0] = (uint8_t)(intTemps[4] & 0xFF);
 8001fbc:	8abb      	ldrh	r3, [r7, #20]
 8001fbe:	b2db      	uxtb	r3, r3
 8001fc0:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
	msgT2[1] = (uint8_t)((intTemps[4] >> 8) & 0xFF);
 8001fc4:	8abb      	ldrh	r3, [r7, #20]
 8001fc6:	0a1b      	lsrs	r3, r3, #8
 8001fc8:	b29b      	uxth	r3, r3
 8001fca:	b2db      	uxtb	r3, r3
 8001fcc:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
	msgT2[2] = (uint8_t)(intTemps[5] & 0xFF);
 8001fd0:	8afb      	ldrh	r3, [r7, #22]
 8001fd2:	b2db      	uxtb	r3, r3
 8001fd4:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
	msgT2[3] = (uint8_t)((intTemps[5] >> 8) & 0xFF);
 8001fd8:	8afb      	ldrh	r3, [r7, #22]
 8001fda:	0a1b      	lsrs	r3, r3, #8
 8001fdc:	b29b      	uxth	r3, r3
 8001fde:	b2db      	uxtb	r3, r3
 8001fe0:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
	msgT2[4] = (uint8_t)(intTemps[6] & 0xFF);
 8001fe4:	8b3b      	ldrh	r3, [r7, #24]
 8001fe6:	b2db      	uxtb	r3, r3
 8001fe8:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
	msgT2[5] = (uint8_t)((intTemps[6] >> 8) & 0xFF);
 8001fec:	8b3b      	ldrh	r3, [r7, #24]
 8001fee:	0a1b      	lsrs	r3, r3, #8
 8001ff0:	b29b      	uxth	r3, r3
 8001ff2:	b2db      	uxtb	r3, r3
 8001ff4:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d
	msgT2[6] = (uint8_t)(intTemps[7] & 0xFF);
 8001ff8:	8b7b      	ldrh	r3, [r7, #26]
 8001ffa:	b2db      	uxtb	r3, r3
 8001ffc:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
	msgT2[7] = (uint8_t)((intTemps[7] >> 8) & 0xFF);
 8002000:	8b7b      	ldrh	r3, [r7, #26]
 8002002:	0a1b      	lsrs	r3, r3, #8
 8002004:	b29b      	uxth	r3, r3
 8002006:	b2db      	uxtb	r3, r3
 8002008:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

	msgT3[0] = (uint8_t)(intTemps[8] & 0xFF);
 800200c:	8bbb      	ldrh	r3, [r7, #28]
 800200e:	b2db      	uxtb	r3, r3
 8002010:	f887 3040 	strb.w	r3, [r7, #64]	@ 0x40
	msgT3[1] = (uint8_t)((intTemps[8] >> 8) & 0xFF);
 8002014:	8bbb      	ldrh	r3, [r7, #28]
 8002016:	0a1b      	lsrs	r3, r3, #8
 8002018:	b29b      	uxth	r3, r3
 800201a:	b2db      	uxtb	r3, r3
 800201c:	f887 3041 	strb.w	r3, [r7, #65]	@ 0x41
	msgT3[2] = (uint8_t)(intTemps[9] & 0xFF);
 8002020:	8bfb      	ldrh	r3, [r7, #30]
 8002022:	b2db      	uxtb	r3, r3
 8002024:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
	msgT3[3] = (uint8_t)((intTemps[9] >> 8) & 0xFF);
 8002028:	8bfb      	ldrh	r3, [r7, #30]
 800202a:	0a1b      	lsrs	r3, r3, #8
 800202c:	b29b      	uxth	r3, r3
 800202e:	b2db      	uxtb	r3, r3
 8002030:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
	msgT3[4] = (uint8_t)(intTemps[10] & 0xFF);
 8002034:	8c3b      	ldrh	r3, [r7, #32]
 8002036:	b2db      	uxtb	r3, r3
 8002038:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
	msgT3[5] = (uint8_t)((intTemps[10] >> 8) & 0xFF);
 800203c:	8c3b      	ldrh	r3, [r7, #32]
 800203e:	0a1b      	lsrs	r3, r3, #8
 8002040:	b29b      	uxth	r3, r3
 8002042:	b2db      	uxtb	r3, r3
 8002044:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
	msgT3[6] = (uint8_t)(intTemps[11] & 0xFF);
 8002048:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800204a:	b2db      	uxtb	r3, r3
 800204c:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
	msgT3[7] = (uint8_t)((intTemps[11] >> 8) & 0xFF);
 8002050:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8002052:	0a1b      	lsrs	r3, r3, #8
 8002054:	b29b      	uxth	r3, r3
 8002056:	b2db      	uxtb	r3, r3
 8002058:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47

	msgT4[0] = (uint8_t)(intTemps[12] & 0xFF);
 800205c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800205e:	b2db      	uxtb	r3, r3
 8002060:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
	msgT4[1] = (uint8_t)((intTemps[12] >> 8) & 0xFF);
 8002064:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002066:	0a1b      	lsrs	r3, r3, #8
 8002068:	b29b      	uxth	r3, r3
 800206a:	b2db      	uxtb	r3, r3
 800206c:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
	msgT4[2] = (uint8_t)(intTemps[13] & 0xFF);
 8002070:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8002072:	b2db      	uxtb	r3, r3
 8002074:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
	msgT4[3] = (uint8_t)((intTemps[13] >> 8) & 0xFF);
 8002078:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800207a:	0a1b      	lsrs	r3, r3, #8
 800207c:	b29b      	uxth	r3, r3
 800207e:	b2db      	uxtb	r3, r3
 8002080:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
	msgT4[4] = (uint8_t)(intTemps[14] & 0xFF);
 8002084:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8002086:	b2db      	uxtb	r3, r3
 8002088:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
	msgT4[5] = (uint8_t)((intTemps[14] >> 8) & 0xFF);
 800208c:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800208e:	0a1b      	lsrs	r3, r3, #8
 8002090:	b29b      	uxth	r3, r3
 8002092:	b2db      	uxtb	r3, r3
 8002094:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
	msgT4[6] = (uint8_t)(intTemps[15] & 0xFF);
 8002098:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800209a:	b2db      	uxtb	r3, r3
 800209c:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
	msgT4[7] = (uint8_t)((intTemps[15] >> 8) & 0xFF);
 80020a0:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80020a2:	0a1b      	lsrs	r3, r3, #8
 80020a4:	b29b      	uxth	r3, r3
 80020a6:	b2db      	uxtb	r3, r3
 80020a8:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f

	msgT5[0] = (uint8_t)(intTemps[16] & 0xFF);
 80020ac:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80020ae:	b2db      	uxtb	r3, r3
 80020b0:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
	msgT5[1] = (uint8_t)((intTemps[16] >> 8) & 0xFF);
 80020b4:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80020b6:	0a1b      	lsrs	r3, r3, #8
 80020b8:	b29b      	uxth	r3, r3
 80020ba:	b2db      	uxtb	r3, r3
 80020bc:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
	msgT5[2] = (uint8_t)(intTemps[17] & 0xFF);
 80020c0:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80020c2:	b2db      	uxtb	r3, r3
 80020c4:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
	msgT5[3] = (uint8_t)((intTemps[17] >> 8) & 0xFF);
 80020c8:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80020ca:	0a1b      	lsrs	r3, r3, #8
 80020cc:	b29b      	uxth	r3, r3
 80020ce:	b2db      	uxtb	r3, r3
 80020d0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
	msgT5[4] = 0;
 80020d4:	2300      	movs	r3, #0
 80020d6:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
	msgT5[5] = 0;
 80020da:	2300      	movs	r3, #0
 80020dc:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
	msgT5[6] = 0;
 80020e0:	2300      	movs	r3, #0
 80020e2:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
	msgT5[7] = 0;
 80020e6:	2300      	movs	r3, #0
 80020e8:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

	switch(moduleID) {
 80020ec:	4b52      	ldr	r3, [pc, #328]	@ (8002238 <transmit_temperatures+0x320>)
 80020ee:	781b      	ldrb	r3, [r3, #0]
 80020f0:	3b01      	subs	r3, #1
 80020f2:	2b04      	cmp	r3, #4
 80020f4:	f200 80c6 	bhi.w	8002284 <transmit_temperatures+0x36c>
 80020f8:	a201      	add	r2, pc, #4	@ (adr r2, 8002100 <transmit_temperatures+0x1e8>)
 80020fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020fe:	bf00      	nop
 8002100:	08002115 	.word	0x08002115
 8002104:	0800215d 	.word	0x0800215d
 8002108:	080021a5 	.word	0x080021a5
 800210c:	080021ed 	.word	0x080021ed
 8002110:	0800223d 	.word	0x0800223d
		case 1:
			can_transmit(CAN_M1_T1_ID, msgT1);
 8002114:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8002118:	4619      	mov	r1, r3
 800211a:	f240 4007 	movw	r0, #1031	@ 0x407
 800211e:	f7ff fc6f 	bl	8001a00 <can_transmit>
			can_transmit(CAN_M1_T2_ID, msgT2);
 8002122:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8002126:	4619      	mov	r1, r3
 8002128:	f44f 6081 	mov.w	r0, #1032	@ 0x408
 800212c:	f7ff fc68 	bl	8001a00 <can_transmit>
			can_transmit(CAN_M1_T3_ID, msgT3);
 8002130:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8002134:	4619      	mov	r1, r3
 8002136:	f240 4009 	movw	r0, #1033	@ 0x409
 800213a:	f7ff fc61 	bl	8001a00 <can_transmit>
			can_transmit(CAN_M1_T4_ID, msgT4);
 800213e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002142:	4619      	mov	r1, r3
 8002144:	f240 400a 	movw	r0, #1034	@ 0x40a
 8002148:	f7ff fc5a 	bl	8001a00 <can_transmit>
			can_transmit(CAN_M1_T5_ID, msgT5);
 800214c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002150:	4619      	mov	r1, r3
 8002152:	f240 400b 	movw	r0, #1035	@ 0x40b
 8002156:	f7ff fc53 	bl	8001a00 <can_transmit>
			break;
 800215a:	e093      	b.n	8002284 <transmit_temperatures+0x36c>
		case 2:
			can_transmit(CAN_M2_T1_ID, msgT1);
 800215c:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8002160:	4619      	mov	r1, r3
 8002162:	f240 400c 	movw	r0, #1036	@ 0x40c
 8002166:	f7ff fc4b 	bl	8001a00 <can_transmit>
			can_transmit(CAN_M2_T2_ID, msgT2);
 800216a:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800216e:	4619      	mov	r1, r3
 8002170:	f240 400d 	movw	r0, #1037	@ 0x40d
 8002174:	f7ff fc44 	bl	8001a00 <can_transmit>
			can_transmit(CAN_M2_T3_ID, msgT3);
 8002178:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800217c:	4619      	mov	r1, r3
 800217e:	f240 400e 	movw	r0, #1038	@ 0x40e
 8002182:	f7ff fc3d 	bl	8001a00 <can_transmit>
			can_transmit(CAN_M2_T4_ID, msgT4);
 8002186:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800218a:	4619      	mov	r1, r3
 800218c:	f240 400f 	movw	r0, #1039	@ 0x40f
 8002190:	f7ff fc36 	bl	8001a00 <can_transmit>
			can_transmit(CAN_M2_T5_ID, msgT5);
 8002194:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002198:	4619      	mov	r1, r3
 800219a:	f44f 6082 	mov.w	r0, #1040	@ 0x410
 800219e:	f7ff fc2f 	bl	8001a00 <can_transmit>
			break;
 80021a2:	e06f      	b.n	8002284 <transmit_temperatures+0x36c>
		case 3:
			can_transmit(CAN_M3_T1_ID, msgT1);
 80021a4:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80021a8:	4619      	mov	r1, r3
 80021aa:	f240 4011 	movw	r0, #1041	@ 0x411
 80021ae:	f7ff fc27 	bl	8001a00 <can_transmit>
			can_transmit(CAN_M3_T2_ID, msgT2);
 80021b2:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80021b6:	4619      	mov	r1, r3
 80021b8:	f240 4012 	movw	r0, #1042	@ 0x412
 80021bc:	f7ff fc20 	bl	8001a00 <can_transmit>
			can_transmit(CAN_M3_T3_ID, msgT3);
 80021c0:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80021c4:	4619      	mov	r1, r3
 80021c6:	f240 4013 	movw	r0, #1043	@ 0x413
 80021ca:	f7ff fc19 	bl	8001a00 <can_transmit>
			can_transmit(CAN_M3_T4_ID, msgT4);
 80021ce:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80021d2:	4619      	mov	r1, r3
 80021d4:	f240 4014 	movw	r0, #1044	@ 0x414
 80021d8:	f7ff fc12 	bl	8001a00 <can_transmit>
			can_transmit(CAN_M3_T5_ID, msgT5);
 80021dc:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80021e0:	4619      	mov	r1, r3
 80021e2:	f240 4015 	movw	r0, #1045	@ 0x415
 80021e6:	f7ff fc0b 	bl	8001a00 <can_transmit>
			break;
 80021ea:	e04b      	b.n	8002284 <transmit_temperatures+0x36c>
		case 4:
			can_transmit(CAN_M4_T1_ID, msgT1);
 80021ec:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80021f0:	4619      	mov	r1, r3
 80021f2:	f240 4016 	movw	r0, #1046	@ 0x416
 80021f6:	f7ff fc03 	bl	8001a00 <can_transmit>
			can_transmit(CAN_M4_T2_ID, msgT2);
 80021fa:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80021fe:	4619      	mov	r1, r3
 8002200:	f240 4017 	movw	r0, #1047	@ 0x417
 8002204:	f7ff fbfc 	bl	8001a00 <can_transmit>
			can_transmit(CAN_M4_T3_ID, msgT3);
 8002208:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800220c:	4619      	mov	r1, r3
 800220e:	f44f 6083 	mov.w	r0, #1048	@ 0x418
 8002212:	f7ff fbf5 	bl	8001a00 <can_transmit>
			can_transmit(CAN_M4_T4_ID, msgT4);
 8002216:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800221a:	4619      	mov	r1, r3
 800221c:	f240 4019 	movw	r0, #1049	@ 0x419
 8002220:	f7ff fbee 	bl	8001a00 <can_transmit>
			can_transmit(CAN_M4_T5_ID, msgT5);
 8002224:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002228:	4619      	mov	r1, r3
 800222a:	f240 401a 	movw	r0, #1050	@ 0x41a
 800222e:	f7ff fbe7 	bl	8001a00 <can_transmit>
			break;
 8002232:	e027      	b.n	8002284 <transmit_temperatures+0x36c>
 8002234:	447a0000 	.word	0x447a0000
 8002238:	08008da0 	.word	0x08008da0
		case 5:
			can_transmit(CAN_M5_T1_ID, msgT1);
 800223c:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8002240:	4619      	mov	r1, r3
 8002242:	f240 401b 	movw	r0, #1051	@ 0x41b
 8002246:	f7ff fbdb 	bl	8001a00 <can_transmit>
			can_transmit(CAN_M5_T2_ID, msgT2);
 800224a:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800224e:	4619      	mov	r1, r3
 8002250:	f240 401c 	movw	r0, #1052	@ 0x41c
 8002254:	f7ff fbd4 	bl	8001a00 <can_transmit>
			can_transmit(CAN_M5_T3_ID, msgT3);
 8002258:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800225c:	4619      	mov	r1, r3
 800225e:	f240 401d 	movw	r0, #1053	@ 0x41d
 8002262:	f7ff fbcd 	bl	8001a00 <can_transmit>
			can_transmit(CAN_M5_T4_ID, msgT4);
 8002266:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800226a:	4619      	mov	r1, r3
 800226c:	f240 401e 	movw	r0, #1054	@ 0x41e
 8002270:	f7ff fbc6 	bl	8001a00 <can_transmit>
			can_transmit(CAN_M5_T5_ID, msgT5);
 8002274:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002278:	4619      	mov	r1, r3
 800227a:	f240 401f 	movw	r0, #1055	@ 0x41f
 800227e:	f7ff fbbf 	bl	8001a00 <can_transmit>
			break;
 8002282:	bf00      	nop
	}
}
 8002284:	bf00      	nop
 8002286:	3760      	adds	r7, #96	@ 0x60
 8002288:	46bd      	mov	sp, r7
 800228a:	bd80      	pop	{r7, pc}

0800228c <setup_PEC15>:
uint16_t PEC15_table[256];
uint16_t CRC15_Poly = 0x4599;


void setup_PEC15(void)
{
 800228c:	b480      	push	{r7}
 800228e:	b083      	sub	sp, #12
 8002290:	af00      	add	r7, sp, #0
  uint16_t PEC15_seed = 16;
 8002292:	2310      	movs	r3, #16
 8002294:	80fb      	strh	r3, [r7, #6]

  for (uint16_t i = 0; i < 256; i++) {
 8002296:	2300      	movs	r3, #0
 8002298:	80bb      	strh	r3, [r7, #4]
 800229a:	e024      	b.n	80022e6 <setup_PEC15+0x5a>
    PEC15_seed = i << 7;
 800229c:	88bb      	ldrh	r3, [r7, #4]
 800229e:	01db      	lsls	r3, r3, #7
 80022a0:	80fb      	strh	r3, [r7, #6]

    for (uint8_t bit = 8; bit > 0; bit--){
 80022a2:	2308      	movs	r3, #8
 80022a4:	70fb      	strb	r3, [r7, #3]
 80022a6:	e013      	b.n	80022d0 <setup_PEC15+0x44>
      if (PEC15_seed & 0x4000) {
 80022a8:	88fb      	ldrh	r3, [r7, #6]
 80022aa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d008      	beq.n	80022c4 <setup_PEC15+0x38>
        PEC15_seed = ((PEC15_seed << 1));
 80022b2:	88fb      	ldrh	r3, [r7, #6]
 80022b4:	005b      	lsls	r3, r3, #1
 80022b6:	80fb      	strh	r3, [r7, #6]
        PEC15_seed = (PEC15_seed ^ CRC15_Poly);
 80022b8:	4b10      	ldr	r3, [pc, #64]	@ (80022fc <setup_PEC15+0x70>)
 80022ba:	881a      	ldrh	r2, [r3, #0]
 80022bc:	88fb      	ldrh	r3, [r7, #6]
 80022be:	4053      	eors	r3, r2
 80022c0:	80fb      	strh	r3, [r7, #6]
 80022c2:	e002      	b.n	80022ca <setup_PEC15+0x3e>
      }
      else {
        PEC15_seed = ((PEC15_seed << 1));
 80022c4:	88fb      	ldrh	r3, [r7, #6]
 80022c6:	005b      	lsls	r3, r3, #1
 80022c8:	80fb      	strh	r3, [r7, #6]
    for (uint8_t bit = 8; bit > 0; bit--){
 80022ca:	78fb      	ldrb	r3, [r7, #3]
 80022cc:	3b01      	subs	r3, #1
 80022ce:	70fb      	strb	r3, [r7, #3]
 80022d0:	78fb      	ldrb	r3, [r7, #3]
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d1e8      	bne.n	80022a8 <setup_PEC15+0x1c>
      }
    }
    PEC15_table[i] = PEC15_seed & 0xFFFF;
 80022d6:	88bb      	ldrh	r3, [r7, #4]
 80022d8:	4909      	ldr	r1, [pc, #36]	@ (8002300 <setup_PEC15+0x74>)
 80022da:	88fa      	ldrh	r2, [r7, #6]
 80022dc:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
  for (uint16_t i = 0; i < 256; i++) {
 80022e0:	88bb      	ldrh	r3, [r7, #4]
 80022e2:	3301      	adds	r3, #1
 80022e4:	80bb      	strh	r3, [r7, #4]
 80022e6:	88bb      	ldrh	r3, [r7, #4]
 80022e8:	2bff      	cmp	r3, #255	@ 0xff
 80022ea:	d9d7      	bls.n	800229c <setup_PEC15+0x10>
  }
}
 80022ec:	bf00      	nop
 80022ee:	bf00      	nop
 80022f0:	370c      	adds	r7, #12
 80022f2:	46bd      	mov	sp, r7
 80022f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f8:	4770      	bx	lr
 80022fa:	bf00      	nop
 80022fc:	20000004 	.word	0x20000004
 8002300:	200001e4 	.word	0x200001e4

08002304 <compute_PEC15>:


uint16_t compute_PEC15(uint8_t *data_ptr, uint8_t len)
{
 8002304:	b480      	push	{r7}
 8002306:	b085      	sub	sp, #20
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
 800230c:	460b      	mov	r3, r1
 800230e:	70fb      	strb	r3, [r7, #3]
  uint16_t PEC15_seed = 16;
 8002310:	2310      	movs	r3, #16
 8002312:	81fb      	strh	r3, [r7, #14]
  uint16_t address;

  for (uint16_t i = 0; i < len; i++) {
 8002314:	2300      	movs	r3, #0
 8002316:	81bb      	strh	r3, [r7, #12]
 8002318:	e019      	b.n	800234e <compute_PEC15+0x4a>
    address = ((PEC15_seed >> 7) ^ data_ptr[i]) & 0xFF;
 800231a:	89fb      	ldrh	r3, [r7, #14]
 800231c:	09db      	lsrs	r3, r3, #7
 800231e:	b29b      	uxth	r3, r3
 8002320:	89ba      	ldrh	r2, [r7, #12]
 8002322:	6879      	ldr	r1, [r7, #4]
 8002324:	440a      	add	r2, r1
 8002326:	7812      	ldrb	r2, [r2, #0]
 8002328:	4053      	eors	r3, r2
 800232a:	b29b      	uxth	r3, r3
 800232c:	b2db      	uxtb	r3, r3
 800232e:	817b      	strh	r3, [r7, #10]
    PEC15_seed = (PEC15_seed << 8 ) ^ PEC15_table[address];
 8002330:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002334:	021b      	lsls	r3, r3, #8
 8002336:	b21a      	sxth	r2, r3
 8002338:	897b      	ldrh	r3, [r7, #10]
 800233a:	490c      	ldr	r1, [pc, #48]	@ (800236c <compute_PEC15+0x68>)
 800233c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8002340:	b21b      	sxth	r3, r3
 8002342:	4053      	eors	r3, r2
 8002344:	b21b      	sxth	r3, r3
 8002346:	81fb      	strh	r3, [r7, #14]
  for (uint16_t i = 0; i < len; i++) {
 8002348:	89bb      	ldrh	r3, [r7, #12]
 800234a:	3301      	adds	r3, #1
 800234c:	81bb      	strh	r3, [r7, #12]
 800234e:	78fb      	ldrb	r3, [r7, #3]
 8002350:	b29b      	uxth	r3, r3
 8002352:	89ba      	ldrh	r2, [r7, #12]
 8002354:	429a      	cmp	r2, r3
 8002356:	d3e0      	bcc.n	800231a <compute_PEC15+0x16>
  }
  return (PEC15_seed * 2);
 8002358:	89fb      	ldrh	r3, [r7, #14]
 800235a:	005b      	lsls	r3, r3, #1
 800235c:	b29b      	uxth	r3, r3
}
 800235e:	4618      	mov	r0, r3
 8002360:	3714      	adds	r7, #20
 8002362:	46bd      	mov	sp, r7
 8002364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002368:	4770      	bx	lr
 800236a:	bf00      	nop
 800236c:	200001e4 	.word	0x200001e4

08002370 <append_PEC>:


void append_PEC(uint8_t *data_ptr, uint8_t len, uint16_t PEC)
{
 8002370:	b480      	push	{r7}
 8002372:	b083      	sub	sp, #12
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
 8002378:	460b      	mov	r3, r1
 800237a:	70fb      	strb	r3, [r7, #3]
 800237c:	4613      	mov	r3, r2
 800237e:	803b      	strh	r3, [r7, #0]
  data_ptr[len] = (PEC >> 8) & 0xFF;
 8002380:	883b      	ldrh	r3, [r7, #0]
 8002382:	0a1b      	lsrs	r3, r3, #8
 8002384:	b299      	uxth	r1, r3
 8002386:	78fb      	ldrb	r3, [r7, #3]
 8002388:	687a      	ldr	r2, [r7, #4]
 800238a:	4413      	add	r3, r2
 800238c:	b2ca      	uxtb	r2, r1
 800238e:	701a      	strb	r2, [r3, #0]
  data_ptr[len + 1] = PEC & 0xFF;
 8002390:	78fb      	ldrb	r3, [r7, #3]
 8002392:	3301      	adds	r3, #1
 8002394:	687a      	ldr	r2, [r7, #4]
 8002396:	4413      	add	r3, r2
 8002398:	883a      	ldrh	r2, [r7, #0]
 800239a:	b2d2      	uxtb	r2, r2
 800239c:	701a      	strb	r2, [r3, #0]
}
 800239e:	bf00      	nop
 80023a0:	370c      	adds	r7, #12
 80023a2:	46bd      	mov	sp, r7
 80023a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a8:	4770      	bx	lr

080023aa <verify_PEC15>:


uint8_t verify_PEC15(uint8_t *receivedData_ptr)
{
 80023aa:	b580      	push	{r7, lr}
 80023ac:	b084      	sub	sp, #16
 80023ae:	af00      	add	r7, sp, #0
 80023b0:	6078      	str	r0, [r7, #4]
	uint16_t receivedPEC = (receivedData_ptr[PAYLOAD_LEN - 2] << 8) | receivedData_ptr[PAYLOAD_LEN - 1];
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	3306      	adds	r3, #6
 80023b6:	781b      	ldrb	r3, [r3, #0]
 80023b8:	b21b      	sxth	r3, r3
 80023ba:	021b      	lsls	r3, r3, #8
 80023bc:	b21a      	sxth	r2, r3
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	3307      	adds	r3, #7
 80023c2:	781b      	ldrb	r3, [r3, #0]
 80023c4:	b21b      	sxth	r3, r3
 80023c6:	4313      	orrs	r3, r2
 80023c8:	b21b      	sxth	r3, r3
 80023ca:	81fb      	strh	r3, [r7, #14]

	uint16_t calculatedPEC = compute_PEC15(receivedData_ptr, PAYLOAD_LEN - 2);
 80023cc:	2106      	movs	r1, #6
 80023ce:	6878      	ldr	r0, [r7, #4]
 80023d0:	f7ff ff98 	bl	8002304 <compute_PEC15>
 80023d4:	4603      	mov	r3, r0
 80023d6:	81bb      	strh	r3, [r7, #12]

	if (receivedPEC == calculatedPEC) { return 2; }
 80023d8:	89fa      	ldrh	r2, [r7, #14]
 80023da:	89bb      	ldrh	r3, [r7, #12]
 80023dc:	429a      	cmp	r2, r3
 80023de:	d101      	bne.n	80023e4 <verify_PEC15+0x3a>
 80023e0:	2302      	movs	r3, #2
 80023e2:	e000      	b.n	80023e6 <verify_PEC15+0x3c>

	else { return 1; }
 80023e4:	2301      	movs	r3, #1
}
 80023e6:	4618      	mov	r0, r3
 80023e8:	3710      	adds	r7, #16
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bd80      	pop	{r7, pc}
	...

080023f0 <action_cmd>:


void action_cmd(uint8_t *cmd_ptr, uint8_t sideA)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b082      	sub	sp, #8
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
 80023f8:	460b      	mov	r3, r1
 80023fa:	70fb      	strb	r3, [r7, #3]
	// TO LTC SIDE A (CELL 1 to 10)
	if (sideA) {
 80023fc:	78fb      	ldrb	r3, [r7, #3]
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d011      	beq.n	8002426 <action_cmd+0x36>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);		// MAKE THIS GENERIC
 8002402:	2200      	movs	r2, #0
 8002404:	2110      	movs	r1, #16
 8002406:	4813      	ldr	r0, [pc, #76]	@ (8002454 <action_cmd+0x64>)
 8002408:	f004 f8d0 	bl	80065ac <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi1, cmd_ptr, CMD_LEN, HAL_MAX_DELAY);
 800240c:	f04f 33ff 	mov.w	r3, #4294967295
 8002410:	2204      	movs	r2, #4
 8002412:	6879      	ldr	r1, [r7, #4]
 8002414:	4810      	ldr	r0, [pc, #64]	@ (8002458 <action_cmd+0x68>)
 8002416:	f004 ff1e 	bl	8007256 <HAL_SPI_Transmit>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);		// MAKE THIS GENERIC
 800241a:	2201      	movs	r2, #1
 800241c:	2110      	movs	r1, #16
 800241e:	480d      	ldr	r0, [pc, #52]	@ (8002454 <action_cmd+0x64>)
 8002420:	f004 f8c4 	bl	80065ac <HAL_GPIO_WritePin>
	else {
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);		// MAKE THIS GENERIC
		HAL_SPI_Transmit(&hspi3, cmd_ptr, CMD_LEN, HAL_MAX_DELAY);
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET);		// MAKE THIS GENERIC
	}
}
 8002424:	e012      	b.n	800244c <action_cmd+0x5c>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);		// MAKE THIS GENERIC
 8002426:	2200      	movs	r2, #0
 8002428:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800242c:	4809      	ldr	r0, [pc, #36]	@ (8002454 <action_cmd+0x64>)
 800242e:	f004 f8bd 	bl	80065ac <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi3, cmd_ptr, CMD_LEN, HAL_MAX_DELAY);
 8002432:	f04f 33ff 	mov.w	r3, #4294967295
 8002436:	2204      	movs	r2, #4
 8002438:	6879      	ldr	r1, [r7, #4]
 800243a:	4808      	ldr	r0, [pc, #32]	@ (800245c <action_cmd+0x6c>)
 800243c:	f004 ff0b 	bl	8007256 <HAL_SPI_Transmit>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET);		// MAKE THIS GENERIC
 8002440:	2201      	movs	r2, #1
 8002442:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002446:	4803      	ldr	r0, [pc, #12]	@ (8002454 <action_cmd+0x64>)
 8002448:	f004 f8b0 	bl	80065ac <HAL_GPIO_WritePin>
}
 800244c:	bf00      	nop
 800244e:	3708      	adds	r7, #8
 8002450:	46bd      	mov	sp, r7
 8002452:	bd80      	pop	{r7, pc}
 8002454:	40020000 	.word	0x40020000
 8002458:	200000ec 	.word	0x200000ec
 800245c:	20000144 	.word	0x20000144

08002460 <write_cmd>:


void write_cmd(uint8_t *cmd_ptr, uint8_t *payload_ptr, uint8_t sideA)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	b084      	sub	sp, #16
 8002464:	af00      	add	r7, sp, #0
 8002466:	60f8      	str	r0, [r7, #12]
 8002468:	60b9      	str	r1, [r7, #8]
 800246a:	4613      	mov	r3, r2
 800246c:	71fb      	strb	r3, [r7, #7]
	// TO LTC SIDE A (CELL 1 to 10)
	if (sideA) {
 800246e:	79fb      	ldrb	r3, [r7, #7]
 8002470:	2b00      	cmp	r3, #0
 8002472:	d018      	beq.n	80024a6 <write_cmd+0x46>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);		// MAKE THIS GENERIC
 8002474:	2200      	movs	r2, #0
 8002476:	2110      	movs	r1, #16
 8002478:	481a      	ldr	r0, [pc, #104]	@ (80024e4 <write_cmd+0x84>)
 800247a:	f004 f897 	bl	80065ac <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi1, cmd_ptr, CMD_LEN, HAL_MAX_DELAY);
 800247e:	f04f 33ff 	mov.w	r3, #4294967295
 8002482:	2204      	movs	r2, #4
 8002484:	68f9      	ldr	r1, [r7, #12]
 8002486:	4818      	ldr	r0, [pc, #96]	@ (80024e8 <write_cmd+0x88>)
 8002488:	f004 fee5 	bl	8007256 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi1, payload_ptr, PAYLOAD_LEN, HAL_MAX_DELAY);
 800248c:	f04f 33ff 	mov.w	r3, #4294967295
 8002490:	2208      	movs	r2, #8
 8002492:	68b9      	ldr	r1, [r7, #8]
 8002494:	4814      	ldr	r0, [pc, #80]	@ (80024e8 <write_cmd+0x88>)
 8002496:	f004 fede 	bl	8007256 <HAL_SPI_Transmit>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);		// MAKE THIS GENERIC
 800249a:	2201      	movs	r2, #1
 800249c:	2110      	movs	r1, #16
 800249e:	4811      	ldr	r0, [pc, #68]	@ (80024e4 <write_cmd+0x84>)
 80024a0:	f004 f884 	bl	80065ac <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);		// MAKE THIS GENERIC
		HAL_SPI_Transmit(&hspi3, cmd_ptr, CMD_LEN, HAL_MAX_DELAY);
		HAL_SPI_Transmit(&hspi3, payload_ptr, PAYLOAD_LEN, HAL_MAX_DELAY);
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET);		// MAKE THIS GENERIC
	}
}
 80024a4:	e019      	b.n	80024da <write_cmd+0x7a>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);		// MAKE THIS GENERIC
 80024a6:	2200      	movs	r2, #0
 80024a8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80024ac:	480d      	ldr	r0, [pc, #52]	@ (80024e4 <write_cmd+0x84>)
 80024ae:	f004 f87d 	bl	80065ac <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi3, cmd_ptr, CMD_LEN, HAL_MAX_DELAY);
 80024b2:	f04f 33ff 	mov.w	r3, #4294967295
 80024b6:	2204      	movs	r2, #4
 80024b8:	68f9      	ldr	r1, [r7, #12]
 80024ba:	480c      	ldr	r0, [pc, #48]	@ (80024ec <write_cmd+0x8c>)
 80024bc:	f004 fecb 	bl	8007256 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi3, payload_ptr, PAYLOAD_LEN, HAL_MAX_DELAY);
 80024c0:	f04f 33ff 	mov.w	r3, #4294967295
 80024c4:	2208      	movs	r2, #8
 80024c6:	68b9      	ldr	r1, [r7, #8]
 80024c8:	4808      	ldr	r0, [pc, #32]	@ (80024ec <write_cmd+0x8c>)
 80024ca:	f004 fec4 	bl	8007256 <HAL_SPI_Transmit>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET);		// MAKE THIS GENERIC
 80024ce:	2201      	movs	r2, #1
 80024d0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80024d4:	4803      	ldr	r0, [pc, #12]	@ (80024e4 <write_cmd+0x84>)
 80024d6:	f004 f869 	bl	80065ac <HAL_GPIO_WritePin>
}
 80024da:	bf00      	nop
 80024dc:	3710      	adds	r7, #16
 80024de:	46bd      	mov	sp, r7
 80024e0:	bd80      	pop	{r7, pc}
 80024e2:	bf00      	nop
 80024e4:	40020000 	.word	0x40020000
 80024e8:	200000ec 	.word	0x200000ec
 80024ec:	20000144 	.word	0x20000144

080024f0 <read_cmd>:

void read_cmd(uint8_t *cmd_ptr, uint8_t *receivedPayload_ptr, uint8_t sideA)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b088      	sub	sp, #32
 80024f4:	af02      	add	r7, sp, #8
 80024f6:	60f8      	str	r0, [r7, #12]
 80024f8:	60b9      	str	r1, [r7, #8]
 80024fa:	4613      	mov	r3, r2
 80024fc:	71fb      	strb	r3, [r7, #7]
	uint8_t dummies[8] = {0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF};
 80024fe:	4a23      	ldr	r2, [pc, #140]	@ (800258c <read_cmd+0x9c>)
 8002500:	f107 0310 	add.w	r3, r7, #16
 8002504:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002508:	e883 0003 	stmia.w	r3, {r0, r1}

	// TO LTC SIDE A (CELL 1 to 10)
	if (sideA) {
 800250c:	79fb      	ldrb	r3, [r7, #7]
 800250e:	2b00      	cmp	r3, #0
 8002510:	d01b      	beq.n	800254a <read_cmd+0x5a>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);		// MAKE THIS GENERIC
 8002512:	2200      	movs	r2, #0
 8002514:	2110      	movs	r1, #16
 8002516:	481e      	ldr	r0, [pc, #120]	@ (8002590 <read_cmd+0xa0>)
 8002518:	f004 f848 	bl	80065ac <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi1, cmd_ptr, CMD_LEN, HAL_MAX_DELAY);
 800251c:	f04f 33ff 	mov.w	r3, #4294967295
 8002520:	2204      	movs	r2, #4
 8002522:	68f9      	ldr	r1, [r7, #12]
 8002524:	481b      	ldr	r0, [pc, #108]	@ (8002594 <read_cmd+0xa4>)
 8002526:	f004 fe96 	bl	8007256 <HAL_SPI_Transmit>
		HAL_SPI_TransmitReceive(&hspi1, dummies, receivedPayload_ptr, PAYLOAD_LEN, HAL_MAX_DELAY);
 800252a:	f107 0110 	add.w	r1, r7, #16
 800252e:	f04f 33ff 	mov.w	r3, #4294967295
 8002532:	9300      	str	r3, [sp, #0]
 8002534:	2308      	movs	r3, #8
 8002536:	68ba      	ldr	r2, [r7, #8]
 8002538:	4816      	ldr	r0, [pc, #88]	@ (8002594 <read_cmd+0xa4>)
 800253a:	f004 ffd0 	bl	80074de <HAL_SPI_TransmitReceive>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);		// MAKE THIS GENERIC
 800253e:	2201      	movs	r2, #1
 8002540:	2110      	movs	r1, #16
 8002542:	4813      	ldr	r0, [pc, #76]	@ (8002590 <read_cmd+0xa0>)
 8002544:	f004 f832 	bl	80065ac <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);		// MAKE THIS GENERIC
		HAL_SPI_Transmit(&hspi3, cmd_ptr, CMD_LEN, HAL_MAX_DELAY);
		HAL_SPI_TransmitReceive(&hspi3, dummies, receivedPayload_ptr, PAYLOAD_LEN, HAL_MAX_DELAY);
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET);		// MAKE THIS GENERIC
	}
}
 8002548:	e01c      	b.n	8002584 <read_cmd+0x94>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);		// MAKE THIS GENERIC
 800254a:	2200      	movs	r2, #0
 800254c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002550:	480f      	ldr	r0, [pc, #60]	@ (8002590 <read_cmd+0xa0>)
 8002552:	f004 f82b 	bl	80065ac <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi3, cmd_ptr, CMD_LEN, HAL_MAX_DELAY);
 8002556:	f04f 33ff 	mov.w	r3, #4294967295
 800255a:	2204      	movs	r2, #4
 800255c:	68f9      	ldr	r1, [r7, #12]
 800255e:	480e      	ldr	r0, [pc, #56]	@ (8002598 <read_cmd+0xa8>)
 8002560:	f004 fe79 	bl	8007256 <HAL_SPI_Transmit>
		HAL_SPI_TransmitReceive(&hspi3, dummies, receivedPayload_ptr, PAYLOAD_LEN, HAL_MAX_DELAY);
 8002564:	f107 0110 	add.w	r1, r7, #16
 8002568:	f04f 33ff 	mov.w	r3, #4294967295
 800256c:	9300      	str	r3, [sp, #0]
 800256e:	2308      	movs	r3, #8
 8002570:	68ba      	ldr	r2, [r7, #8]
 8002572:	4809      	ldr	r0, [pc, #36]	@ (8002598 <read_cmd+0xa8>)
 8002574:	f004 ffb3 	bl	80074de <HAL_SPI_TransmitReceive>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET);		// MAKE THIS GENERIC
 8002578:	2201      	movs	r2, #1
 800257a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800257e:	4804      	ldr	r0, [pc, #16]	@ (8002590 <read_cmd+0xa0>)
 8002580:	f004 f814 	bl	80065ac <HAL_GPIO_WritePin>
}
 8002584:	bf00      	nop
 8002586:	3718      	adds	r7, #24
 8002588:	46bd      	mov	sp, r7
 800258a:	bd80      	pop	{r7, pc}
 800258c:	08008d88 	.word	0x08008d88
 8002590:	40020000 	.word	0x40020000
 8002594:	200000ec 	.word	0x200000ec
 8002598:	20000144 	.word	0x20000144

0800259c <WRCFGA>:

// *** WRITE COMMANDS ***
void WRCFGA(uint8_t *payload_ptr, uint8_t side)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	b088      	sub	sp, #32
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
 80025a4:	460b      	mov	r3, r1
 80025a6:	70fb      	strb	r3, [r7, #3]
	uint8_t cmd[4];
	uint16_t cmd_PEC;
	uint8_t configRegisterGroupA[8];
	uint16_t configRegisterGroupA_PEC;

	cmd[0] = 0x00;
 80025a8:	2300      	movs	r3, #0
 80025aa:	753b      	strb	r3, [r7, #20]
	cmd[1] = 0x01;
 80025ac:	2301      	movs	r3, #1
 80025ae:	757b      	strb	r3, [r7, #21]
	cmd_PEC = compute_PEC15(cmd, 2);
 80025b0:	f107 0314 	add.w	r3, r7, #20
 80025b4:	2102      	movs	r1, #2
 80025b6:	4618      	mov	r0, r3
 80025b8:	f7ff fea4 	bl	8002304 <compute_PEC15>
 80025bc:	4603      	mov	r3, r0
 80025be:	83bb      	strh	r3, [r7, #28]
	append_PEC(cmd, 2, cmd_PEC);
 80025c0:	8bba      	ldrh	r2, [r7, #28]
 80025c2:	f107 0314 	add.w	r3, r7, #20
 80025c6:	2102      	movs	r1, #2
 80025c8:	4618      	mov	r0, r3
 80025ca:	f7ff fed1 	bl	8002370 <append_PEC>

	for(uint8_t i = 0; i < 6; i ++) {
 80025ce:	2300      	movs	r3, #0
 80025d0:	77fb      	strb	r3, [r7, #31]
 80025d2:	e00b      	b.n	80025ec <WRCFGA+0x50>
		configRegisterGroupA[i] = *(payload_ptr + i);
 80025d4:	7ffb      	ldrb	r3, [r7, #31]
 80025d6:	687a      	ldr	r2, [r7, #4]
 80025d8:	441a      	add	r2, r3
 80025da:	7ffb      	ldrb	r3, [r7, #31]
 80025dc:	7812      	ldrb	r2, [r2, #0]
 80025de:	3320      	adds	r3, #32
 80025e0:	443b      	add	r3, r7
 80025e2:	f803 2c14 	strb.w	r2, [r3, #-20]
	for(uint8_t i = 0; i < 6; i ++) {
 80025e6:	7ffb      	ldrb	r3, [r7, #31]
 80025e8:	3301      	adds	r3, #1
 80025ea:	77fb      	strb	r3, [r7, #31]
 80025ec:	7ffb      	ldrb	r3, [r7, #31]
 80025ee:	2b05      	cmp	r3, #5
 80025f0:	d9f0      	bls.n	80025d4 <WRCFGA+0x38>
	}
	configRegisterGroupA_PEC = compute_PEC15(configRegisterGroupA, 6);
 80025f2:	f107 030c 	add.w	r3, r7, #12
 80025f6:	2106      	movs	r1, #6
 80025f8:	4618      	mov	r0, r3
 80025fa:	f7ff fe83 	bl	8002304 <compute_PEC15>
 80025fe:	4603      	mov	r3, r0
 8002600:	837b      	strh	r3, [r7, #26]
	append_PEC(configRegisterGroupA, 6, configRegisterGroupA_PEC);
 8002602:	8b7a      	ldrh	r2, [r7, #26]
 8002604:	f107 030c 	add.w	r3, r7, #12
 8002608:	2106      	movs	r1, #6
 800260a:	4618      	mov	r0, r3
 800260c:	f7ff feb0 	bl	8002370 <append_PEC>

	write_cmd(cmd, configRegisterGroupA, side);
 8002610:	78fa      	ldrb	r2, [r7, #3]
 8002612:	f107 010c 	add.w	r1, r7, #12
 8002616:	f107 0314 	add.w	r3, r7, #20
 800261a:	4618      	mov	r0, r3
 800261c:	f7ff ff20 	bl	8002460 <write_cmd>
}
 8002620:	bf00      	nop
 8002622:	3720      	adds	r7, #32
 8002624:	46bd      	mov	sp, r7
 8002626:	bd80      	pop	{r7, pc}

08002628 <RDCFGA>:
// *** END WRITE COMMANDS ***


// *** READ COMMANDS ***
void RDCFGA(uint8_t *configRegisterGroupA_ptr, uint8_t side)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b084      	sub	sp, #16
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
 8002630:	460b      	mov	r3, r1
 8002632:	70fb      	strb	r3, [r7, #3]
	uint8_t cmd[4];
	uint16_t cmd_PEC;

	cmd[0] = 0x00;
 8002634:	2300      	movs	r3, #0
 8002636:	723b      	strb	r3, [r7, #8]
	cmd[1] = 0x02;
 8002638:	2302      	movs	r3, #2
 800263a:	727b      	strb	r3, [r7, #9]
	cmd_PEC = compute_PEC15(cmd, 2);
 800263c:	f107 0308 	add.w	r3, r7, #8
 8002640:	2102      	movs	r1, #2
 8002642:	4618      	mov	r0, r3
 8002644:	f7ff fe5e 	bl	8002304 <compute_PEC15>
 8002648:	4603      	mov	r3, r0
 800264a:	81fb      	strh	r3, [r7, #14]
	append_PEC(cmd, 2, cmd_PEC);
 800264c:	89fa      	ldrh	r2, [r7, #14]
 800264e:	f107 0308 	add.w	r3, r7, #8
 8002652:	2102      	movs	r1, #2
 8002654:	4618      	mov	r0, r3
 8002656:	f7ff fe8b 	bl	8002370 <append_PEC>

	read_cmd(cmd, configRegisterGroupA_ptr, side);
 800265a:	78fa      	ldrb	r2, [r7, #3]
 800265c:	f107 0308 	add.w	r3, r7, #8
 8002660:	6879      	ldr	r1, [r7, #4]
 8002662:	4618      	mov	r0, r3
 8002664:	f7ff ff44 	bl	80024f0 <read_cmd>
}
 8002668:	bf00      	nop
 800266a:	3710      	adds	r7, #16
 800266c:	46bd      	mov	sp, r7
 800266e:	bd80      	pop	{r7, pc}

08002670 <RDCVA>:
	read_cmd(cmd, configRegisterGroupB_ptr, side);
}


void RDCVA(uint8_t *cellVoltageRegisterGroupA_ptr, uint8_t side)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	b084      	sub	sp, #16
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
 8002678:	460b      	mov	r3, r1
 800267a:	70fb      	strb	r3, [r7, #3]
	uint8_t cmd[4];
	uint16_t cmd_PEC;

	cmd[0] = 0x00;
 800267c:	2300      	movs	r3, #0
 800267e:	723b      	strb	r3, [r7, #8]
	cmd[1] = 0x04;
 8002680:	2304      	movs	r3, #4
 8002682:	727b      	strb	r3, [r7, #9]
	cmd_PEC = compute_PEC15(cmd, 2);
 8002684:	f107 0308 	add.w	r3, r7, #8
 8002688:	2102      	movs	r1, #2
 800268a:	4618      	mov	r0, r3
 800268c:	f7ff fe3a 	bl	8002304 <compute_PEC15>
 8002690:	4603      	mov	r3, r0
 8002692:	81fb      	strh	r3, [r7, #14]
	append_PEC(cmd, 2, cmd_PEC);
 8002694:	89fa      	ldrh	r2, [r7, #14]
 8002696:	f107 0308 	add.w	r3, r7, #8
 800269a:	2102      	movs	r1, #2
 800269c:	4618      	mov	r0, r3
 800269e:	f7ff fe67 	bl	8002370 <append_PEC>

	read_cmd(cmd, cellVoltageRegisterGroupA_ptr, side);
 80026a2:	78fa      	ldrb	r2, [r7, #3]
 80026a4:	f107 0308 	add.w	r3, r7, #8
 80026a8:	6879      	ldr	r1, [r7, #4]
 80026aa:	4618      	mov	r0, r3
 80026ac:	f7ff ff20 	bl	80024f0 <read_cmd>
}
 80026b0:	bf00      	nop
 80026b2:	3710      	adds	r7, #16
 80026b4:	46bd      	mov	sp, r7
 80026b6:	bd80      	pop	{r7, pc}

080026b8 <RDCVB>:


void RDCVB(uint8_t *cellVoltageRegisterGroupB_ptr, uint8_t side)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b084      	sub	sp, #16
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
 80026c0:	460b      	mov	r3, r1
 80026c2:	70fb      	strb	r3, [r7, #3]
	uint8_t cmd[4];
	uint16_t cmd_PEC;

	cmd[0] = 0x00;
 80026c4:	2300      	movs	r3, #0
 80026c6:	723b      	strb	r3, [r7, #8]
	cmd[1] = 0x06;
 80026c8:	2306      	movs	r3, #6
 80026ca:	727b      	strb	r3, [r7, #9]
	cmd_PEC = compute_PEC15(cmd, 2);
 80026cc:	f107 0308 	add.w	r3, r7, #8
 80026d0:	2102      	movs	r1, #2
 80026d2:	4618      	mov	r0, r3
 80026d4:	f7ff fe16 	bl	8002304 <compute_PEC15>
 80026d8:	4603      	mov	r3, r0
 80026da:	81fb      	strh	r3, [r7, #14]
	append_PEC(cmd, 2, cmd_PEC);
 80026dc:	89fa      	ldrh	r2, [r7, #14]
 80026de:	f107 0308 	add.w	r3, r7, #8
 80026e2:	2102      	movs	r1, #2
 80026e4:	4618      	mov	r0, r3
 80026e6:	f7ff fe43 	bl	8002370 <append_PEC>

	read_cmd(cmd, cellVoltageRegisterGroupB_ptr, side);
 80026ea:	78fa      	ldrb	r2, [r7, #3]
 80026ec:	f107 0308 	add.w	r3, r7, #8
 80026f0:	6879      	ldr	r1, [r7, #4]
 80026f2:	4618      	mov	r0, r3
 80026f4:	f7ff fefc 	bl	80024f0 <read_cmd>
}
 80026f8:	bf00      	nop
 80026fa:	3710      	adds	r7, #16
 80026fc:	46bd      	mov	sp, r7
 80026fe:	bd80      	pop	{r7, pc}

08002700 <RDCVC>:


void RDCVC(uint8_t *cellVoltageRegisterGroupC_ptr, uint8_t side)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	b084      	sub	sp, #16
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
 8002708:	460b      	mov	r3, r1
 800270a:	70fb      	strb	r3, [r7, #3]
	uint8_t cmd[4];
	uint16_t cmd_PEC;

	cmd[0] = 0x00;
 800270c:	2300      	movs	r3, #0
 800270e:	723b      	strb	r3, [r7, #8]
	cmd[1] = 0x08;
 8002710:	2308      	movs	r3, #8
 8002712:	727b      	strb	r3, [r7, #9]
	cmd_PEC = compute_PEC15(cmd, 2);
 8002714:	f107 0308 	add.w	r3, r7, #8
 8002718:	2102      	movs	r1, #2
 800271a:	4618      	mov	r0, r3
 800271c:	f7ff fdf2 	bl	8002304 <compute_PEC15>
 8002720:	4603      	mov	r3, r0
 8002722:	81fb      	strh	r3, [r7, #14]
	append_PEC(cmd, 2, cmd_PEC);
 8002724:	89fa      	ldrh	r2, [r7, #14]
 8002726:	f107 0308 	add.w	r3, r7, #8
 800272a:	2102      	movs	r1, #2
 800272c:	4618      	mov	r0, r3
 800272e:	f7ff fe1f 	bl	8002370 <append_PEC>

	read_cmd(cmd, cellVoltageRegisterGroupC_ptr, side);
 8002732:	78fa      	ldrb	r2, [r7, #3]
 8002734:	f107 0308 	add.w	r3, r7, #8
 8002738:	6879      	ldr	r1, [r7, #4]
 800273a:	4618      	mov	r0, r3
 800273c:	f7ff fed8 	bl	80024f0 <read_cmd>
}
 8002740:	bf00      	nop
 8002742:	3710      	adds	r7, #16
 8002744:	46bd      	mov	sp, r7
 8002746:	bd80      	pop	{r7, pc}

08002748 <RDCVD>:


void RDCVD(uint8_t *cellVoltageRegisterGroupD_ptr, uint8_t side)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	b084      	sub	sp, #16
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
 8002750:	460b      	mov	r3, r1
 8002752:	70fb      	strb	r3, [r7, #3]
	uint8_t cmd[4];
	uint16_t cmd_PEC;

	cmd[0] = 0x00;
 8002754:	2300      	movs	r3, #0
 8002756:	723b      	strb	r3, [r7, #8]
	cmd[1] = 0x0A;
 8002758:	230a      	movs	r3, #10
 800275a:	727b      	strb	r3, [r7, #9]
	cmd_PEC = compute_PEC15(cmd, 2);
 800275c:	f107 0308 	add.w	r3, r7, #8
 8002760:	2102      	movs	r1, #2
 8002762:	4618      	mov	r0, r3
 8002764:	f7ff fdce 	bl	8002304 <compute_PEC15>
 8002768:	4603      	mov	r3, r0
 800276a:	81fb      	strh	r3, [r7, #14]
	append_PEC(cmd, 2, cmd_PEC);
 800276c:	89fa      	ldrh	r2, [r7, #14]
 800276e:	f107 0308 	add.w	r3, r7, #8
 8002772:	2102      	movs	r1, #2
 8002774:	4618      	mov	r0, r3
 8002776:	f7ff fdfb 	bl	8002370 <append_PEC>

	read_cmd(cmd, cellVoltageRegisterGroupD_ptr, side);
 800277a:	78fa      	ldrb	r2, [r7, #3]
 800277c:	f107 0308 	add.w	r3, r7, #8
 8002780:	6879      	ldr	r1, [r7, #4]
 8002782:	4618      	mov	r0, r3
 8002784:	f7ff feb4 	bl	80024f0 <read_cmd>
}
 8002788:	bf00      	nop
 800278a:	3710      	adds	r7, #16
 800278c:	46bd      	mov	sp, r7
 800278e:	bd80      	pop	{r7, pc}

08002790 <RDAUXA>:
	read_cmd(cmd, statusRegisterGroupB_ptr, side);
}


void RDAUXA(uint8_t *auxiliaryRegisterGroupA_ptr, uint8_t side)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	b084      	sub	sp, #16
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
 8002798:	460b      	mov	r3, r1
 800279a:	70fb      	strb	r3, [r7, #3]
	uint8_t cmd[4];
	uint16_t cmd_PEC;

	cmd[0] = 0x00;
 800279c:	2300      	movs	r3, #0
 800279e:	723b      	strb	r3, [r7, #8]
	cmd[1] = 0x0C;
 80027a0:	230c      	movs	r3, #12
 80027a2:	727b      	strb	r3, [r7, #9]
	cmd_PEC = compute_PEC15(cmd, 2);
 80027a4:	f107 0308 	add.w	r3, r7, #8
 80027a8:	2102      	movs	r1, #2
 80027aa:	4618      	mov	r0, r3
 80027ac:	f7ff fdaa 	bl	8002304 <compute_PEC15>
 80027b0:	4603      	mov	r3, r0
 80027b2:	81fb      	strh	r3, [r7, #14]
	append_PEC(cmd, 2, cmd_PEC);
 80027b4:	89fa      	ldrh	r2, [r7, #14]
 80027b6:	f107 0308 	add.w	r3, r7, #8
 80027ba:	2102      	movs	r1, #2
 80027bc:	4618      	mov	r0, r3
 80027be:	f7ff fdd7 	bl	8002370 <append_PEC>

	read_cmd(cmd, auxiliaryRegisterGroupA_ptr, side);
 80027c2:	78fa      	ldrb	r2, [r7, #3]
 80027c4:	f107 0308 	add.w	r3, r7, #8
 80027c8:	6879      	ldr	r1, [r7, #4]
 80027ca:	4618      	mov	r0, r3
 80027cc:	f7ff fe90 	bl	80024f0 <read_cmd>
}
 80027d0:	bf00      	nop
 80027d2:	3710      	adds	r7, #16
 80027d4:	46bd      	mov	sp, r7
 80027d6:	bd80      	pop	{r7, pc}

080027d8 <RDAUXB>:


void RDAUXB(uint8_t *auxiliaryRegisterGroupB_ptr, uint8_t side)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	b084      	sub	sp, #16
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
 80027e0:	460b      	mov	r3, r1
 80027e2:	70fb      	strb	r3, [r7, #3]
	uint8_t cmd[4];
	uint16_t cmd_PEC;

	cmd[0] = 0x00;
 80027e4:	2300      	movs	r3, #0
 80027e6:	723b      	strb	r3, [r7, #8]
	cmd[1] = 0x0E;
 80027e8:	230e      	movs	r3, #14
 80027ea:	727b      	strb	r3, [r7, #9]
	cmd_PEC = compute_PEC15(cmd, 2);
 80027ec:	f107 0308 	add.w	r3, r7, #8
 80027f0:	2102      	movs	r1, #2
 80027f2:	4618      	mov	r0, r3
 80027f4:	f7ff fd86 	bl	8002304 <compute_PEC15>
 80027f8:	4603      	mov	r3, r0
 80027fa:	81fb      	strh	r3, [r7, #14]
	append_PEC(cmd, 2, cmd_PEC);
 80027fc:	89fa      	ldrh	r2, [r7, #14]
 80027fe:	f107 0308 	add.w	r3, r7, #8
 8002802:	2102      	movs	r1, #2
 8002804:	4618      	mov	r0, r3
 8002806:	f7ff fdb3 	bl	8002370 <append_PEC>

	read_cmd(cmd, auxiliaryRegisterGroupB_ptr, side);
 800280a:	78fa      	ldrb	r2, [r7, #3]
 800280c:	f107 0308 	add.w	r3, r7, #8
 8002810:	6879      	ldr	r1, [r7, #4]
 8002812:	4618      	mov	r0, r3
 8002814:	f7ff fe6c 	bl	80024f0 <read_cmd>
}
 8002818:	bf00      	nop
 800281a:	3710      	adds	r7, #16
 800281c:	46bd      	mov	sp, r7
 800281e:	bd80      	pop	{r7, pc}

08002820 <RDAUXC>:


void RDAUXC(uint8_t *auxiliaryRegisterGroupC_ptr, uint8_t side)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	b084      	sub	sp, #16
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
 8002828:	460b      	mov	r3, r1
 800282a:	70fb      	strb	r3, [r7, #3]
	uint8_t cmd[4];
	uint16_t cmd_PEC;

	cmd[0] = 0x00;
 800282c:	2300      	movs	r3, #0
 800282e:	723b      	strb	r3, [r7, #8]
	cmd[1] = 0x0D;
 8002830:	230d      	movs	r3, #13
 8002832:	727b      	strb	r3, [r7, #9]
	cmd_PEC = compute_PEC15(cmd, 2);
 8002834:	f107 0308 	add.w	r3, r7, #8
 8002838:	2102      	movs	r1, #2
 800283a:	4618      	mov	r0, r3
 800283c:	f7ff fd62 	bl	8002304 <compute_PEC15>
 8002840:	4603      	mov	r3, r0
 8002842:	81fb      	strh	r3, [r7, #14]
	append_PEC(cmd, 2, cmd_PEC);
 8002844:	89fa      	ldrh	r2, [r7, #14]
 8002846:	f107 0308 	add.w	r3, r7, #8
 800284a:	2102      	movs	r1, #2
 800284c:	4618      	mov	r0, r3
 800284e:	f7ff fd8f 	bl	8002370 <append_PEC>

	read_cmd(cmd, auxiliaryRegisterGroupC_ptr, side);
 8002852:	78fa      	ldrb	r2, [r7, #3]
 8002854:	f107 0308 	add.w	r3, r7, #8
 8002858:	6879      	ldr	r1, [r7, #4]
 800285a:	4618      	mov	r0, r3
 800285c:	f7ff fe48 	bl	80024f0 <read_cmd>
}
 8002860:	bf00      	nop
 8002862:	3710      	adds	r7, #16
 8002864:	46bd      	mov	sp, r7
 8002866:	bd80      	pop	{r7, pc}

08002868 <RDAUXD>:


void RDAUXD(uint8_t *auxiliaryRegisterGroupD_ptr, uint8_t side)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	b084      	sub	sp, #16
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
 8002870:	460b      	mov	r3, r1
 8002872:	70fb      	strb	r3, [r7, #3]
	uint8_t cmd[4];
	uint16_t cmd_PEC;

	cmd[0] = 0x00;
 8002874:	2300      	movs	r3, #0
 8002876:	723b      	strb	r3, [r7, #8]
	cmd[1] = 0x0F;
 8002878:	230f      	movs	r3, #15
 800287a:	727b      	strb	r3, [r7, #9]
	cmd_PEC = compute_PEC15(cmd, 2);
 800287c:	f107 0308 	add.w	r3, r7, #8
 8002880:	2102      	movs	r1, #2
 8002882:	4618      	mov	r0, r3
 8002884:	f7ff fd3e 	bl	8002304 <compute_PEC15>
 8002888:	4603      	mov	r3, r0
 800288a:	81fb      	strh	r3, [r7, #14]
	append_PEC(cmd, 2, cmd_PEC);
 800288c:	89fa      	ldrh	r2, [r7, #14]
 800288e:	f107 0308 	add.w	r3, r7, #8
 8002892:	2102      	movs	r1, #2
 8002894:	4618      	mov	r0, r3
 8002896:	f7ff fd6b 	bl	8002370 <append_PEC>

	read_cmd(cmd, auxiliaryRegisterGroupD_ptr, side);
 800289a:	78fa      	ldrb	r2, [r7, #3]
 800289c:	f107 0308 	add.w	r3, r7, #8
 80028a0:	6879      	ldr	r1, [r7, #4]
 80028a2:	4618      	mov	r0, r3
 80028a4:	f7ff fe24 	bl	80024f0 <read_cmd>
}
 80028a8:	bf00      	nop
 80028aa:	3710      	adds	r7, #16
 80028ac:	46bd      	mov	sp, r7
 80028ae:	bd80      	pop	{r7, pc}

080028b0 <ADAXD>:
	action_cmd(cmd, side);
}


void ADAXD(uint8_t side)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b084      	sub	sp, #16
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	4603      	mov	r3, r0
 80028b8:	71fb      	strb	r3, [r7, #7]
	uint8_t cmd[4];
	uint16_t cmd_PEC;

	cmd[0] = 0x05;
 80028ba:	2305      	movs	r3, #5
 80028bc:	723b      	strb	r3, [r7, #8]
	cmd[1] = 0x00;
 80028be:	2300      	movs	r3, #0
 80028c0:	727b      	strb	r3, [r7, #9]
	cmd_PEC = compute_PEC15(cmd, 2);
 80028c2:	f107 0308 	add.w	r3, r7, #8
 80028c6:	2102      	movs	r1, #2
 80028c8:	4618      	mov	r0, r3
 80028ca:	f7ff fd1b 	bl	8002304 <compute_PEC15>
 80028ce:	4603      	mov	r3, r0
 80028d0:	81fb      	strh	r3, [r7, #14]
	append_PEC(cmd, 2, cmd_PEC);
 80028d2:	89fa      	ldrh	r2, [r7, #14]
 80028d4:	f107 0308 	add.w	r3, r7, #8
 80028d8:	2102      	movs	r1, #2
 80028da:	4618      	mov	r0, r3
 80028dc:	f7ff fd48 	bl	8002370 <append_PEC>

	action_cmd(cmd, side);
 80028e0:	79fa      	ldrb	r2, [r7, #7]
 80028e2:	f107 0308 	add.w	r3, r7, #8
 80028e6:	4611      	mov	r1, r2
 80028e8:	4618      	mov	r0, r3
 80028ea:	f7ff fd81 	bl	80023f0 <action_cmd>
}
 80028ee:	bf00      	nop
 80028f0:	3710      	adds	r7, #16
 80028f2:	46bd      	mov	sp, r7
 80028f4:	bd80      	pop	{r7, pc}

080028f6 <ADCV>:


void ADCV(uint8_t side)
{
 80028f6:	b580      	push	{r7, lr}
 80028f8:	b084      	sub	sp, #16
 80028fa:	af00      	add	r7, sp, #0
 80028fc:	4603      	mov	r3, r0
 80028fe:	71fb      	strb	r3, [r7, #7]
	uint8_t cmd[4];
	uint16_t cmd_PEC;

	cmd[0] = 0x03;
 8002900:	2303      	movs	r3, #3
 8002902:	723b      	strb	r3, [r7, #8]
	cmd[1] = 0xE0;
 8002904:	23e0      	movs	r3, #224	@ 0xe0
 8002906:	727b      	strb	r3, [r7, #9]
	cmd_PEC = compute_PEC15(cmd, 2);
 8002908:	f107 0308 	add.w	r3, r7, #8
 800290c:	2102      	movs	r1, #2
 800290e:	4618      	mov	r0, r3
 8002910:	f7ff fcf8 	bl	8002304 <compute_PEC15>
 8002914:	4603      	mov	r3, r0
 8002916:	81fb      	strh	r3, [r7, #14]
	append_PEC(cmd, 2, cmd_PEC);
 8002918:	89fa      	ldrh	r2, [r7, #14]
 800291a:	f107 0308 	add.w	r3, r7, #8
 800291e:	2102      	movs	r1, #2
 8002920:	4618      	mov	r0, r3
 8002922:	f7ff fd25 	bl	8002370 <append_PEC>

	action_cmd(cmd, side);
 8002926:	79fa      	ldrb	r2, [r7, #7]
 8002928:	f107 0308 	add.w	r3, r7, #8
 800292c:	4611      	mov	r1, r2
 800292e:	4618      	mov	r0, r3
 8002930:	f7ff fd5e 	bl	80023f0 <action_cmd>
}
 8002934:	bf00      	nop
 8002936:	3710      	adds	r7, #16
 8002938:	46bd      	mov	sp, r7
 800293a:	bd80      	pop	{r7, pc}

0800293c <CLRCELL>:


void CLRCELL(uint8_t side)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	b084      	sub	sp, #16
 8002940:	af00      	add	r7, sp, #0
 8002942:	4603      	mov	r3, r0
 8002944:	71fb      	strb	r3, [r7, #7]
	uint8_t cmd[4];
	uint16_t cmd_PEC;

	cmd[0] = 0x07;
 8002946:	2307      	movs	r3, #7
 8002948:	723b      	strb	r3, [r7, #8]
	cmd[1] = 0x11;
 800294a:	2311      	movs	r3, #17
 800294c:	727b      	strb	r3, [r7, #9]
	cmd_PEC = compute_PEC15(cmd, 2);
 800294e:	f107 0308 	add.w	r3, r7, #8
 8002952:	2102      	movs	r1, #2
 8002954:	4618      	mov	r0, r3
 8002956:	f7ff fcd5 	bl	8002304 <compute_PEC15>
 800295a:	4603      	mov	r3, r0
 800295c:	81fb      	strh	r3, [r7, #14]
	append_PEC(cmd, 2, cmd_PEC);
 800295e:	89fa      	ldrh	r2, [r7, #14]
 8002960:	f107 0308 	add.w	r3, r7, #8
 8002964:	2102      	movs	r1, #2
 8002966:	4618      	mov	r0, r3
 8002968:	f7ff fd02 	bl	8002370 <append_PEC>

	action_cmd(cmd, side);
 800296c:	79fa      	ldrb	r2, [r7, #7]
 800296e:	f107 0308 	add.w	r3, r7, #8
 8002972:	4611      	mov	r1, r2
 8002974:	4618      	mov	r0, r3
 8002976:	f7ff fd3b 	bl	80023f0 <action_cmd>
}
 800297a:	bf00      	nop
 800297c:	3710      	adds	r7, #16
 800297e:	46bd      	mov	sp, r7
 8002980:	bd80      	pop	{r7, pc}
	...

08002984 <force_refup>:
	action_cmd(cmd, side);
}
// *** END ACTION COMMANDS ***

void force_refup(void)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	b084      	sub	sp, #16
 8002988:	af00      	add	r7, sp, #0
	uint8_t attempts = 0;
 800298a:	2300      	movs	r3, #0
 800298c:	73fb      	strb	r3, [r7, #15]

	uint8_t payloadRegisterA[8];

	payloadRegisterA[0] = 0xFE;
 800298e:	23fe      	movs	r3, #254	@ 0xfe
 8002990:	713b      	strb	r3, [r7, #4]
	payloadRegisterA[1] = 0x00;
 8002992:	2300      	movs	r3, #0
 8002994:	717b      	strb	r3, [r7, #5]
	payloadRegisterA[2] = 0x00;
 8002996:	2300      	movs	r3, #0
 8002998:	71bb      	strb	r3, [r7, #6]
	payloadRegisterA[3] = 0x00;
 800299a:	2300      	movs	r3, #0
 800299c:	71fb      	strb	r3, [r7, #7]
	payloadRegisterA[4] = 0x00;
 800299e:	2300      	movs	r3, #0
 80029a0:	723b      	strb	r3, [r7, #8]
	payloadRegisterA[5] = 0x00;
 80029a2:	2300      	movs	r3, #0
 80029a4:	727b      	strb	r3, [r7, #9]

	while(attempts < ATTEMPT_LIMIT) {
 80029a6:	e01a      	b.n	80029de <force_refup+0x5a>
		WRCFGA(payloadRegisterA, SIDE_A);
 80029a8:	1d3b      	adds	r3, r7, #4
 80029aa:	2101      	movs	r1, #1
 80029ac:	4618      	mov	r0, r3
 80029ae:	f7ff fdf5 	bl	800259c <WRCFGA>
		WRCFGA(payloadRegisterA, SIDE_B);
 80029b2:	1d3b      	adds	r3, r7, #4
 80029b4:	2100      	movs	r1, #0
 80029b6:	4618      	mov	r0, r3
 80029b8:	f7ff fdf0 	bl	800259c <WRCFGA>
		wait(1);
 80029bc:	2001      	movs	r0, #1
 80029be:	f000 fd47 	bl	8003450 <wait>

		if(refup_check()) { attempts = 13; }
 80029c2:	f000 f849 	bl	8002a58 <refup_check>
 80029c6:	4603      	mov	r3, r0
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d002      	beq.n	80029d2 <force_refup+0x4e>
 80029cc:	230d      	movs	r3, #13
 80029ce:	73fb      	strb	r3, [r7, #15]
 80029d0:	e005      	b.n	80029de <force_refup+0x5a>

		else {
			attempts++;
 80029d2:	7bfb      	ldrb	r3, [r7, #15]
 80029d4:	3301      	adds	r3, #1
 80029d6:	73fb      	strb	r3, [r7, #15]
			wait(1);
 80029d8:	2001      	movs	r0, #1
 80029da:	f000 fd39 	bl	8003450 <wait>
	while(attempts < ATTEMPT_LIMIT) {
 80029de:	7bfb      	ldrb	r3, [r7, #15]
 80029e0:	2b09      	cmp	r3, #9
 80029e2:	d9e1      	bls.n	80029a8 <force_refup+0x24>
		}
	}
	if(attempts != 13) {
 80029e4:	7bfb      	ldrb	r3, [r7, #15]
 80029e6:	2b0d      	cmp	r3, #13
 80029e8:	d02d      	beq.n	8002a46 <force_refup+0xc2>
		//fault nigga
		while(1) {
			pull_high(GPIOA, GPIO_PIN_8);
 80029ea:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80029ee:	4818      	ldr	r0, [pc, #96]	@ (8002a50 <force_refup+0xcc>)
 80029f0:	f000 fd1e 	bl	8003430 <pull_high>
			pull_high(GPIOC, GPIO_PIN_9);
 80029f4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80029f8:	4816      	ldr	r0, [pc, #88]	@ (8002a54 <force_refup+0xd0>)
 80029fa:	f000 fd19 	bl	8003430 <pull_high>
			pull_high(GPIOC, GPIO_PIN_8);
 80029fe:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002a02:	4814      	ldr	r0, [pc, #80]	@ (8002a54 <force_refup+0xd0>)
 8002a04:	f000 fd14 	bl	8003430 <pull_high>
			pull_high(GPIOC, GPIO_PIN_7);
 8002a08:	2180      	movs	r1, #128	@ 0x80
 8002a0a:	4812      	ldr	r0, [pc, #72]	@ (8002a54 <force_refup+0xd0>)
 8002a0c:	f000 fd10 	bl	8003430 <pull_high>
			wait(250);
 8002a10:	20fa      	movs	r0, #250	@ 0xfa
 8002a12:	f000 fd1d 	bl	8003450 <wait>
			pull_low(GPIOA, GPIO_PIN_8);
 8002a16:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002a1a:	480d      	ldr	r0, [pc, #52]	@ (8002a50 <force_refup+0xcc>)
 8002a1c:	f000 fcf8 	bl	8003410 <pull_low>
			pull_low(GPIOC, GPIO_PIN_9);
 8002a20:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002a24:	480b      	ldr	r0, [pc, #44]	@ (8002a54 <force_refup+0xd0>)
 8002a26:	f000 fcf3 	bl	8003410 <pull_low>
			pull_low(GPIOC, GPIO_PIN_8);
 8002a2a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002a2e:	4809      	ldr	r0, [pc, #36]	@ (8002a54 <force_refup+0xd0>)
 8002a30:	f000 fcee 	bl	8003410 <pull_low>
			pull_low(GPIOC, GPIO_PIN_7);
 8002a34:	2180      	movs	r1, #128	@ 0x80
 8002a36:	4807      	ldr	r0, [pc, #28]	@ (8002a54 <force_refup+0xd0>)
 8002a38:	f000 fcea 	bl	8003410 <pull_low>
			wait(250);
 8002a3c:	20fa      	movs	r0, #250	@ 0xfa
 8002a3e:	f000 fd07 	bl	8003450 <wait>
			pull_high(GPIOA, GPIO_PIN_8);
 8002a42:	bf00      	nop
 8002a44:	e7d1      	b.n	80029ea <force_refup+0x66>
		}
	}
}
 8002a46:	bf00      	nop
 8002a48:	3710      	adds	r7, #16
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	bd80      	pop	{r7, pc}
 8002a4e:	bf00      	nop
 8002a50:	40020000 	.word	0x40020000
 8002a54:	40020800 	.word	0x40020800

08002a58 <refup_check>:


uint8_t refup_check(void)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b086      	sub	sp, #24
 8002a5c:	af00      	add	r7, sp, #0
	uint8_t attempts = 0;
 8002a5e:	2300      	movs	r3, #0
 8002a60:	75fb      	strb	r3, [r7, #23]

	uint8_t sideA_configRegisterA[8];
	uint8_t sideB_configRegisterA[8];

	uint8_t sideA_configRegisterA_PECflag = 0;
 8002a62:	2300      	movs	r3, #0
 8002a64:	753b      	strb	r3, [r7, #20]
	uint8_t sideB_configRegisterA_PECflag = 0;
 8002a66:	2300      	movs	r3, #0
 8002a68:	74fb      	strb	r3, [r7, #19]

	uint8_t sideA_refonBit;
	uint8_t sideB_refonBit;

	while(attempts < ATTEMPT_LIMIT) {
 8002a6a:	e032      	b.n	8002ad2 <refup_check+0x7a>
		RDCFGA(sideA_configRegisterA, SIDE_A);
 8002a6c:	f107 0308 	add.w	r3, r7, #8
 8002a70:	2101      	movs	r1, #1
 8002a72:	4618      	mov	r0, r3
 8002a74:	f7ff fdd8 	bl	8002628 <RDCFGA>
		RDCFGA(sideB_configRegisterA, SIDE_B);
 8002a78:	463b      	mov	r3, r7
 8002a7a:	2100      	movs	r1, #0
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	f7ff fdd3 	bl	8002628 <RDCFGA>

		sideA_configRegisterA_PECflag = verify_PEC15(sideA_configRegisterA);
 8002a82:	f107 0308 	add.w	r3, r7, #8
 8002a86:	4618      	mov	r0, r3
 8002a88:	f7ff fc8f 	bl	80023aa <verify_PEC15>
 8002a8c:	4603      	mov	r3, r0
 8002a8e:	753b      	strb	r3, [r7, #20]
		sideB_configRegisterA_PECflag = verify_PEC15(sideB_configRegisterA);
 8002a90:	463b      	mov	r3, r7
 8002a92:	4618      	mov	r0, r3
 8002a94:	f7ff fc89 	bl	80023aa <verify_PEC15>
 8002a98:	4603      	mov	r3, r0
 8002a9a:	74fb      	strb	r3, [r7, #19]

		sideA_refonBit = (sideA_configRegisterA[0] >> 2) & 0x01;
 8002a9c:	7a3b      	ldrb	r3, [r7, #8]
 8002a9e:	089b      	lsrs	r3, r3, #2
 8002aa0:	b2db      	uxtb	r3, r3
 8002aa2:	f003 0301 	and.w	r3, r3, #1
 8002aa6:	75bb      	strb	r3, [r7, #22]
		sideB_refonBit = (sideB_configRegisterA[0] >> 2) & 0x01;
 8002aa8:	783b      	ldrb	r3, [r7, #0]
 8002aaa:	089b      	lsrs	r3, r3, #2
 8002aac:	b2db      	uxtb	r3, r3
 8002aae:	f003 0301 	and.w	r3, r3, #1
 8002ab2:	757b      	strb	r3, [r7, #21]

		if(sideA_configRegisterA_PECflag == 2 && sideB_configRegisterA_PECflag == 2) {
 8002ab4:	7d3b      	ldrb	r3, [r7, #20]
 8002ab6:	2b02      	cmp	r3, #2
 8002ab8:	d105      	bne.n	8002ac6 <refup_check+0x6e>
 8002aba:	7cfb      	ldrb	r3, [r7, #19]
 8002abc:	2b02      	cmp	r3, #2
 8002abe:	d102      	bne.n	8002ac6 <refup_check+0x6e>
			attempts = 13;
 8002ac0:	230d      	movs	r3, #13
 8002ac2:	75fb      	strb	r3, [r7, #23]
 8002ac4:	e005      	b.n	8002ad2 <refup_check+0x7a>
		}
		else {
			attempts++;
 8002ac6:	7dfb      	ldrb	r3, [r7, #23]
 8002ac8:	3301      	adds	r3, #1
 8002aca:	75fb      	strb	r3, [r7, #23]
			wait(1);
 8002acc:	2001      	movs	r0, #1
 8002ace:	f000 fcbf 	bl	8003450 <wait>
	while(attempts < ATTEMPT_LIMIT) {
 8002ad2:	7dfb      	ldrb	r3, [r7, #23]
 8002ad4:	2b09      	cmp	r3, #9
 8002ad6:	d9c9      	bls.n	8002a6c <refup_check+0x14>
		}
	}
	if(attempts != 13) {
 8002ad8:	7dfb      	ldrb	r3, [r7, #23]
 8002ada:	2b0d      	cmp	r3, #13
 8002adc:	d02d      	beq.n	8002b3a <refup_check+0xe2>
		//fault nigga
		while(1) {
			pull_high(GPIOA, GPIO_PIN_8);
 8002ade:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002ae2:	481c      	ldr	r0, [pc, #112]	@ (8002b54 <refup_check+0xfc>)
 8002ae4:	f000 fca4 	bl	8003430 <pull_high>
			pull_high(GPIOC, GPIO_PIN_9);
 8002ae8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002aec:	481a      	ldr	r0, [pc, #104]	@ (8002b58 <refup_check+0x100>)
 8002aee:	f000 fc9f 	bl	8003430 <pull_high>
			pull_high(GPIOC, GPIO_PIN_8);
 8002af2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002af6:	4818      	ldr	r0, [pc, #96]	@ (8002b58 <refup_check+0x100>)
 8002af8:	f000 fc9a 	bl	8003430 <pull_high>
			pull_high(GPIOC, GPIO_PIN_7);
 8002afc:	2180      	movs	r1, #128	@ 0x80
 8002afe:	4816      	ldr	r0, [pc, #88]	@ (8002b58 <refup_check+0x100>)
 8002b00:	f000 fc96 	bl	8003430 <pull_high>
			wait(250);
 8002b04:	20fa      	movs	r0, #250	@ 0xfa
 8002b06:	f000 fca3 	bl	8003450 <wait>
			pull_low(GPIOA, GPIO_PIN_8);
 8002b0a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002b0e:	4811      	ldr	r0, [pc, #68]	@ (8002b54 <refup_check+0xfc>)
 8002b10:	f000 fc7e 	bl	8003410 <pull_low>
			pull_low(GPIOC, GPIO_PIN_9);
 8002b14:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002b18:	480f      	ldr	r0, [pc, #60]	@ (8002b58 <refup_check+0x100>)
 8002b1a:	f000 fc79 	bl	8003410 <pull_low>
			pull_low(GPIOC, GPIO_PIN_8);
 8002b1e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002b22:	480d      	ldr	r0, [pc, #52]	@ (8002b58 <refup_check+0x100>)
 8002b24:	f000 fc74 	bl	8003410 <pull_low>
			pull_low(GPIOC, GPIO_PIN_7);
 8002b28:	2180      	movs	r1, #128	@ 0x80
 8002b2a:	480b      	ldr	r0, [pc, #44]	@ (8002b58 <refup_check+0x100>)
 8002b2c:	f000 fc70 	bl	8003410 <pull_low>
			wait(250);
 8002b30:	20fa      	movs	r0, #250	@ 0xfa
 8002b32:	f000 fc8d 	bl	8003450 <wait>
			pull_high(GPIOA, GPIO_PIN_8);
 8002b36:	bf00      	nop
 8002b38:	e7d1      	b.n	8002ade <refup_check+0x86>
		}
	}
	if(sideA_refonBit == 1 && sideB_refonBit == 1) { return 1; }
 8002b3a:	7dbb      	ldrb	r3, [r7, #22]
 8002b3c:	2b01      	cmp	r3, #1
 8002b3e:	d104      	bne.n	8002b4a <refup_check+0xf2>
 8002b40:	7d7b      	ldrb	r3, [r7, #21]
 8002b42:	2b01      	cmp	r3, #1
 8002b44:	d101      	bne.n	8002b4a <refup_check+0xf2>
 8002b46:	2301      	movs	r3, #1
 8002b48:	e000      	b.n	8002b4c <refup_check+0xf4>

	else { return 0; }
 8002b4a:	2300      	movs	r3, #0
}
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	3718      	adds	r7, #24
 8002b50:	46bd      	mov	sp, r7
 8002b52:	bd80      	pop	{r7, pc}
 8002b54:	40020000 	.word	0x40020000
 8002b58:	40020800 	.word	0x40020800

08002b5c <torch_main>:
uint8_t mode;
uint8_t state;


void torch_main(void)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b0b6      	sub	sp, #216	@ 0xd8
 8002b60:	af00      	add	r7, sp, #0
	mode = 3;
 8002b62:	4bc8      	ldr	r3, [pc, #800]	@ (8002e84 <torch_main+0x328>)
 8002b64:	2203      	movs	r2, #3
 8002b66:	701a      	strb	r2, [r3, #0]

	uint16_t cellVoltages[CELL_QTY];		// Holds all cell voltages within a module
	float temperatures[THERM_QTY];			// Holds all module thermistor temperatures

	uint16_t packCurrent;
	uint16_t globalMinCellVoltage = 0;			// Holds the minimum cell voltage in the entire pack
 8002b68:	2300      	movs	r3, #0
 8002b6a:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe

	uint8_t overheats = 0;
 8002b6e:	2300      	movs	r3, #0
 8002b70:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
	uint8_t overheatFlag = 0;
 8002b74:	2300      	movs	r3, #0
 8002b76:	f887 30d6 	strb.w	r3, [r7, #214]	@ 0xd6

	uint8_t overvolts = 0;
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	f887 30d5 	strb.w	r3, [r7, #213]	@ 0xd5
	uint8_t overvoltFlag = 0;
 8002b80:	2300      	movs	r3, #0
 8002b82:	f887 30d4 	strb.w	r3, [r7, #212]	@ 0xd4

	uint8_t undervolts = 0;
 8002b86:	2300      	movs	r3, #0
 8002b88:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
	uint8_t undervoltFlag = 0;
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	f887 30d2 	strb.w	r3, [r7, #210]	@ 0xd2
	float faultingTemperature;
	uint8_t faultingCellIndex;
	uint16_t faultingCellVoltage;


	pull_low(GPIOA, GPIO_PIN_4);		// LTC6820 side A !SS
 8002b92:	2110      	movs	r1, #16
 8002b94:	48bc      	ldr	r0, [pc, #752]	@ (8002e88 <torch_main+0x32c>)
 8002b96:	f000 fc3b 	bl	8003410 <pull_low>
	pull_low(GPIOA, GPIO_PIN_15);		// LTC6820 side B !SS
 8002b9a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002b9e:	48ba      	ldr	r0, [pc, #744]	@ (8002e88 <torch_main+0x32c>)
 8002ba0:	f000 fc36 	bl	8003410 <pull_low>
	pull_high(GPIOC, GPIO_PIN_4);		// LTC6820 side A force EN
 8002ba4:	2110      	movs	r1, #16
 8002ba6:	48b9      	ldr	r0, [pc, #740]	@ (8002e8c <torch_main+0x330>)
 8002ba8:	f000 fc42 	bl	8003430 <pull_high>
	pull_high(GPIOD, GPIO_PIN_2);		// LTC6820 side B force EN
 8002bac:	2104      	movs	r1, #4
 8002bae:	48b8      	ldr	r0, [pc, #736]	@ (8002e90 <torch_main+0x334>)
 8002bb0:	f000 fc3e 	bl	8003430 <pull_high>

	// 2 SECOND BUFFER
	start_timer(&htim2);
 8002bb4:	48b7      	ldr	r0, [pc, #732]	@ (8002e94 <torch_main+0x338>)
 8002bb6:	f000 fc57 	bl	8003468 <start_timer>
	while (Counter <= 2000) {
 8002bba:	e002      	b.n	8002bc2 <torch_main+0x66>
		wait(1);
 8002bbc:	2001      	movs	r0, #1
 8002bbe:	f000 fc47 	bl	8003450 <wait>
	while (Counter <= 2000) {
 8002bc2:	4bb5      	ldr	r3, [pc, #724]	@ (8002e98 <torch_main+0x33c>)
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8002bca:	d9f7      	bls.n	8002bbc <torch_main+0x60>
	}
	stop_timer(&htim2);
 8002bcc:	48b1      	ldr	r0, [pc, #708]	@ (8002e94 <torch_main+0x338>)
 8002bce:	f000 fca5 	bl	800351c <stop_timer>

	setup_PEC15();
 8002bd2:	f7ff fb5b 	bl	800228c <setup_PEC15>

	// !! MODE = 3 IS STANDALONE ACTIVE !!
	if(mode == 3) {
 8002bd6:	4bab      	ldr	r3, [pc, #684]	@ (8002e84 <torch_main+0x328>)
 8002bd8:	781b      	ldrb	r3, [r3, #0]
 8002bda:	2b03      	cmp	r3, #3
 8002bdc:	f040 83af 	bne.w	800333e <torch_main+0x7e2>
		transmitCounter = 0;
 8002be0:	4bae      	ldr	r3, [pc, #696]	@ (8002e9c <torch_main+0x340>)
 8002be2:	2200      	movs	r2, #0
 8002be4:	601a      	str	r2, [r3, #0]
		measureCounter = 0;
 8002be6:	4bae      	ldr	r3, [pc, #696]	@ (8002ea0 <torch_main+0x344>)
 8002be8:	2200      	movs	r2, #0
 8002bea:	601a      	str	r2, [r3, #0]
		state = ACTIVE;						// Change this to CHARGE if you wanna force it to start CHARGE
 8002bec:	4bad      	ldr	r3, [pc, #692]	@ (8002ea4 <torch_main+0x348>)
 8002bee:	2201      	movs	r2, #1
 8002bf0:	701a      	strb	r2, [r3, #0]
		pull_high(GPIOA, GPIO_PIN_8);		// TURN ON ACTIVE LED
 8002bf2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002bf6:	48a4      	ldr	r0, [pc, #656]	@ (8002e88 <torch_main+0x32c>)
 8002bf8:	f000 fc1a 	bl	8003430 <pull_high>
		HAL_CAN_Start(&hcan1);
 8002bfc:	48aa      	ldr	r0, [pc, #680]	@ (8002ea8 <torch_main+0x34c>)
 8002bfe:	f002 fd4f 	bl	80056a0 <HAL_CAN_Start>
		start_timer(&htim2);
 8002c02:	48a4      	ldr	r0, [pc, #656]	@ (8002e94 <torch_main+0x338>)
 8002c04:	f000 fc30 	bl	8003468 <start_timer>
		force_refup();
 8002c08:	f7ff febc 	bl	8002984 <force_refup>
	}
	while(mode == 3) {
 8002c0c:	e397      	b.n	800333e <torch_main+0x7e2>
		while(state == ACTIVE) {

			if(measureCounter > 100) {
 8002c0e:	4ba4      	ldr	r3, [pc, #656]	@ (8002ea0 <torch_main+0x344>)
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	2b64      	cmp	r3, #100	@ 0x64
 8002c14:	f240 8102 	bls.w	8002e1c <torch_main+0x2c0>
				if(!refup_check()) {
 8002c18:	f7ff ff1e 	bl	8002a58 <refup_check>
 8002c1c:	4603      	mov	r3, r0
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d104      	bne.n	8002c2c <torch_main+0xd0>
					force_refup();
 8002c22:	f7ff feaf 	bl	8002984 <force_refup>
					wait(1);
 8002c26:	2001      	movs	r0, #1
 8002c28:	f000 fc12 	bl	8003450 <wait>
				}

				temperature_sense(temperatures);
 8002c2c:	f107 0318 	add.w	r3, r7, #24
 8002c30:	4618      	mov	r0, r3
 8002c32:	f001 fb39 	bl	80042a8 <temperature_sense>
				voltage_sense(cellVoltages);
 8002c36:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	f001 fc50 	bl	80044e0 <voltage_sense>

				for(uint8_t i = 0; i < THERM_QTY; i++) {
 8002c40:	2300      	movs	r3, #0
 8002c42:	f887 30c7 	strb.w	r3, [r7, #199]	@ 0xc7
 8002c46:	e024      	b.n	8002c92 <torch_main+0x136>
					if(temperatures[i] > MAX_TEMPERATURE) {
 8002c48:	f897 30c7 	ldrb.w	r3, [r7, #199]	@ 0xc7
 8002c4c:	009b      	lsls	r3, r3, #2
 8002c4e:	33d8      	adds	r3, #216	@ 0xd8
 8002c50:	443b      	add	r3, r7
 8002c52:	3bc0      	subs	r3, #192	@ 0xc0
 8002c54:	edd3 7a00 	vldr	s15, [r3]
 8002c58:	ed9f 7a94 	vldr	s14, [pc, #592]	@ 8002eac <torch_main+0x350>
 8002c5c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002c60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c64:	dd10      	ble.n	8002c88 <torch_main+0x12c>
						overheatFlag = 1;
 8002c66:	2301      	movs	r3, #1
 8002c68:	f887 30d6 	strb.w	r3, [r7, #214]	@ 0xd6
						faultingThermistorIndex = i + 1;
 8002c6c:	f897 30c7 	ldrb.w	r3, [r7, #199]	@ 0xc7
 8002c70:	3301      	adds	r3, #1
 8002c72:	f887 30d1 	strb.w	r3, [r7, #209]	@ 0xd1
						faultingTemperature = temperatures[i];
 8002c76:	f897 30c7 	ldrb.w	r3, [r7, #199]	@ 0xc7
 8002c7a:	009b      	lsls	r3, r3, #2
 8002c7c:	33d8      	adds	r3, #216	@ 0xd8
 8002c7e:	443b      	add	r3, r7
 8002c80:	3bc0      	subs	r3, #192	@ 0xc0
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
				for(uint8_t i = 0; i < THERM_QTY; i++) {
 8002c88:	f897 30c7 	ldrb.w	r3, [r7, #199]	@ 0xc7
 8002c8c:	3301      	adds	r3, #1
 8002c8e:	f887 30c7 	strb.w	r3, [r7, #199]	@ 0xc7
 8002c92:	f897 30c7 	ldrb.w	r3, [r7, #199]	@ 0xc7
 8002c96:	2b11      	cmp	r3, #17
 8002c98:	d9d6      	bls.n	8002c48 <torch_main+0xec>
					}
				}
				if(overheatFlag) { overheats++; }
 8002c9a:	f897 30d6 	ldrb.w	r3, [r7, #214]	@ 0xd6
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d005      	beq.n	8002cae <torch_main+0x152>
 8002ca2:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
 8002ca6:	3301      	adds	r3, #1
 8002ca8:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8002cac:	e008      	b.n	8002cc0 <torch_main+0x164>

				else {
					if(overheats > 0) { overheats--; }
 8002cae:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d004      	beq.n	8002cc0 <torch_main+0x164>
 8002cb6:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
 8002cba:	3b01      	subs	r3, #1
 8002cbc:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
				}
				// MODULE OVERHEAT FAULT
				if(overheats > ATTEMPT_LIMIT) {
 8002cc0:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
 8002cc4:	2b0a      	cmp	r3, #10
 8002cc6:	d916      	bls.n	8002cf6 <torch_main+0x19a>
					float tempScale = 1000.0f;
 8002cc8:	4b79      	ldr	r3, [pc, #484]	@ (8002eb0 <torch_main+0x354>)
 8002cca:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
					uint16_t intFaultingTemperature = (uint16_t)(faultingTemperature * tempScale);
 8002cce:	ed97 7a33 	vldr	s14, [r7, #204]	@ 0xcc
 8002cd2:	edd7 7a2c 	vldr	s15, [r7, #176]	@ 0xb0
 8002cd6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002cda:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002cde:	ee17 3a90 	vmov	r3, s15
 8002ce2:	f8a7 30ae 	strh.w	r3, [r7, #174]	@ 0xae

					error_loop(ERROR_OVERHEAT, intFaultingTemperature, faultingThermistorIndex);
 8002ce6:	f897 20d1 	ldrb.w	r2, [r7, #209]	@ 0xd1
 8002cea:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	@ 0xae
 8002cee:	4619      	mov	r1, r3
 8002cf0:	2045      	movs	r0, #69	@ 0x45
 8002cf2:	f7fe fec7 	bl	8001a84 <error_loop>
				}

				for(uint8_t i = 0; i < CELL_QTY; i++) {
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	f887 30c6 	strb.w	r3, [r7, #198]	@ 0xc6
 8002cfc:	e03d      	b.n	8002d7a <torch_main+0x21e>
					if(cellVoltages[i] > MAX_CELL_VOLTAGE) {
 8002cfe:	f897 30c6 	ldrb.w	r3, [r7, #198]	@ 0xc6
 8002d02:	005b      	lsls	r3, r3, #1
 8002d04:	33d8      	adds	r3, #216	@ 0xd8
 8002d06:	443b      	add	r3, r7
 8002d08:	f833 3c78 	ldrh.w	r3, [r3, #-120]
 8002d0c:	f24a 4210 	movw	r2, #42000	@ 0xa410
 8002d10:	4293      	cmp	r3, r2
 8002d12:	d911      	bls.n	8002d38 <torch_main+0x1dc>
						overvoltFlag = 1;
 8002d14:	2301      	movs	r3, #1
 8002d16:	f887 30d4 	strb.w	r3, [r7, #212]	@ 0xd4
						faultingCellIndex = i + 1;
 8002d1a:	f897 30c6 	ldrb.w	r3, [r7, #198]	@ 0xc6
 8002d1e:	3301      	adds	r3, #1
 8002d20:	f887 30cb 	strb.w	r3, [r7, #203]	@ 0xcb
						faultingCellVoltage = cellVoltages[i];
 8002d24:	f897 30c6 	ldrb.w	r3, [r7, #198]	@ 0xc6
 8002d28:	005b      	lsls	r3, r3, #1
 8002d2a:	33d8      	adds	r3, #216	@ 0xd8
 8002d2c:	443b      	add	r3, r7
 8002d2e:	f833 3c78 	ldrh.w	r3, [r3, #-120]
 8002d32:	f8a7 30c8 	strh.w	r3, [r7, #200]	@ 0xc8
 8002d36:	e01b      	b.n	8002d70 <torch_main+0x214>
					}
					else if(cellVoltages[i] < MIN_CELL_VOLTAGE) {
 8002d38:	f897 30c6 	ldrb.w	r3, [r7, #198]	@ 0xc6
 8002d3c:	005b      	lsls	r3, r3, #1
 8002d3e:	33d8      	adds	r3, #216	@ 0xd8
 8002d40:	443b      	add	r3, r7
 8002d42:	f833 3c78 	ldrh.w	r3, [r3, #-120]
 8002d46:	f246 12a7 	movw	r2, #24999	@ 0x61a7
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	d810      	bhi.n	8002d70 <torch_main+0x214>
						undervoltFlag = 1;
 8002d4e:	2301      	movs	r3, #1
 8002d50:	f887 30d2 	strb.w	r3, [r7, #210]	@ 0xd2
						faultingCellIndex = i + 1;
 8002d54:	f897 30c6 	ldrb.w	r3, [r7, #198]	@ 0xc6
 8002d58:	3301      	adds	r3, #1
 8002d5a:	f887 30cb 	strb.w	r3, [r7, #203]	@ 0xcb
						faultingCellVoltage = cellVoltages[i];
 8002d5e:	f897 30c6 	ldrb.w	r3, [r7, #198]	@ 0xc6
 8002d62:	005b      	lsls	r3, r3, #1
 8002d64:	33d8      	adds	r3, #216	@ 0xd8
 8002d66:	443b      	add	r3, r7
 8002d68:	f833 3c78 	ldrh.w	r3, [r3, #-120]
 8002d6c:	f8a7 30c8 	strh.w	r3, [r7, #200]	@ 0xc8
				for(uint8_t i = 0; i < CELL_QTY; i++) {
 8002d70:	f897 30c6 	ldrb.w	r3, [r7, #198]	@ 0xc6
 8002d74:	3301      	adds	r3, #1
 8002d76:	f887 30c6 	strb.w	r3, [r7, #198]	@ 0xc6
 8002d7a:	f897 30c6 	ldrb.w	r3, [r7, #198]	@ 0xc6
 8002d7e:	2b13      	cmp	r3, #19
 8002d80:	d9bd      	bls.n	8002cfe <torch_main+0x1a2>
					}
				}
				if(overvoltFlag) { overvolts++; }
 8002d82:	f897 30d4 	ldrb.w	r3, [r7, #212]	@ 0xd4
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d004      	beq.n	8002d94 <torch_main+0x238>
 8002d8a:	f897 30d5 	ldrb.w	r3, [r7, #213]	@ 0xd5
 8002d8e:	3301      	adds	r3, #1
 8002d90:	f887 30d5 	strb.w	r3, [r7, #213]	@ 0xd5

				if(undervoltFlag) { undervolts++; }
 8002d94:	f897 30d2 	ldrb.w	r3, [r7, #210]	@ 0xd2
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d004      	beq.n	8002da6 <torch_main+0x24a>
 8002d9c:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 8002da0:	3301      	adds	r3, #1
 8002da2:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3

				if(overvoltFlag == 0 && undervoltFlag == 0) {
 8002da6:	f897 30d4 	ldrb.w	r3, [r7, #212]	@ 0xd4
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d115      	bne.n	8002dda <torch_main+0x27e>
 8002dae:	f897 30d2 	ldrb.w	r3, [r7, #210]	@ 0xd2
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d111      	bne.n	8002dda <torch_main+0x27e>
					if(overvolts > 0) { overvolts--; }
 8002db6:	f897 30d5 	ldrb.w	r3, [r7, #213]	@ 0xd5
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d004      	beq.n	8002dc8 <torch_main+0x26c>
 8002dbe:	f897 30d5 	ldrb.w	r3, [r7, #213]	@ 0xd5
 8002dc2:	3b01      	subs	r3, #1
 8002dc4:	f887 30d5 	strb.w	r3, [r7, #213]	@ 0xd5

					if(undervolts > 0) { undervolts--; }
 8002dc8:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d004      	beq.n	8002dda <torch_main+0x27e>
 8002dd0:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 8002dd4:	3b01      	subs	r3, #1
 8002dd6:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
				}
				// OVERVOLT/UNDERVOLT FAULTS
				if(overvolts > ATTEMPT_LIMIT) {
 8002dda:	f897 30d5 	ldrb.w	r3, [r7, #213]	@ 0xd5
 8002dde:	2b0a      	cmp	r3, #10
 8002de0:	d907      	bls.n	8002df2 <torch_main+0x296>
					error_loop(ERROR_OVERVOLT, faultingCellVoltage, faultingCellIndex);
 8002de2:	f897 20cb 	ldrb.w	r2, [r7, #203]	@ 0xcb
 8002de6:	f8b7 30c8 	ldrh.w	r3, [r7, #200]	@ 0xc8
 8002dea:	4619      	mov	r1, r3
 8002dec:	2047      	movs	r0, #71	@ 0x47
 8002dee:	f7fe fe49 	bl	8001a84 <error_loop>
				}
				if(undervolts > ATTEMPT_LIMIT) {
 8002df2:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 8002df6:	2b0a      	cmp	r3, #10
 8002df8:	d907      	bls.n	8002e0a <torch_main+0x2ae>
					error_loop(ERROR_UNDERVOLT, faultingCellVoltage, faultingCellIndex);
 8002dfa:	f897 20cb 	ldrb.w	r2, [r7, #203]	@ 0xcb
 8002dfe:	f8b7 30c8 	ldrh.w	r3, [r7, #200]	@ 0xc8
 8002e02:	4619      	mov	r1, r3
 8002e04:	2046      	movs	r0, #70	@ 0x46
 8002e06:	f7fe fe3d 	bl	8001a84 <error_loop>
				}

				overvoltFlag = 0;
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	f887 30d4 	strb.w	r3, [r7, #212]	@ 0xd4
				undervoltFlag = 0;
 8002e10:	2300      	movs	r3, #0
 8002e12:	f887 30d2 	strb.w	r3, [r7, #210]	@ 0xd2
				measureCounter = 0;
 8002e16:	4b22      	ldr	r3, [pc, #136]	@ (8002ea0 <torch_main+0x344>)
 8002e18:	2200      	movs	r2, #0
 8002e1a:	601a      	str	r2, [r3, #0]
			}

			if(transmitCounter > 1000) {
 8002e1c:	4b1f      	ldr	r3, [pc, #124]	@ (8002e9c <torch_main+0x340>)
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002e24:	d90c      	bls.n	8002e40 <torch_main+0x2e4>
				transmit_voltages(cellVoltages);
 8002e26:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	f7fe fea4 	bl	8001b78 <transmit_voltages>
				transmit_temperatures(temperatures);
 8002e30:	f107 0318 	add.w	r3, r7, #24
 8002e34:	4618      	mov	r0, r3
 8002e36:	f7ff f86f 	bl	8001f18 <transmit_temperatures>
				transmitCounter = 0;
 8002e3a:	4b18      	ldr	r3, [pc, #96]	@ (8002e9c <torch_main+0x340>)
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	601a      	str	r2, [r3, #0]
			}

			if(HAL_CAN_GetRxFifoFillLevel(&hcan1, CAN_RX_FIFO0) > 0) {
 8002e40:	2100      	movs	r1, #0
 8002e42:	4819      	ldr	r0, [pc, #100]	@ (8002ea8 <torch_main+0x34c>)
 8002e44:	f002 feab 	bl	8005b9e <HAL_CAN_GetRxFifoFillLevel>
 8002e48:	4603      	mov	r3, r0
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d047      	beq.n	8002ede <torch_main+0x382>
				uint8_t attempts = 0;
 8002e4e:	2300      	movs	r3, #0
 8002e50:	f887 30c5 	strb.w	r3, [r7, #197]	@ 0xc5

				while(attempts < ATTEMPT_LIMIT) {
 8002e54:	e036      	b.n	8002ec4 <torch_main+0x368>
					if(HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &RxHeader, RxData) == HAL_OK) {
 8002e56:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 8002e5a:	f107 0290 	add.w	r2, r7, #144	@ 0x90
 8002e5e:	2100      	movs	r1, #0
 8002e60:	4811      	ldr	r0, [pc, #68]	@ (8002ea8 <torch_main+0x34c>)
 8002e62:	f002 fd7a 	bl	800595a <HAL_CAN_GetRxMessage>
 8002e66:	4603      	mov	r3, r0
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d123      	bne.n	8002eb4 <torch_main+0x358>

						if(RxHeader.StdId == CAN_FAULT_ID) { silent_error_loop(); }
 8002e6c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002e70:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002e74:	d101      	bne.n	8002e7a <torch_main+0x31e>
 8002e76:	f7fe fde7 	bl	8001a48 <silent_error_loop>

						attempts = 13;
 8002e7a:	230d      	movs	r3, #13
 8002e7c:	f887 30c5 	strb.w	r3, [r7, #197]	@ 0xc5
 8002e80:	e020      	b.n	8002ec4 <torch_main+0x368>
 8002e82:	bf00      	nop
 8002e84:	200003ec 	.word	0x200003ec
 8002e88:	40020000 	.word	0x40020000
 8002e8c:	40020800 	.word	0x40020800
 8002e90:	40020c00 	.word	0x40020c00
 8002e94:	2000019c 	.word	0x2000019c
 8002e98:	200003f0 	.word	0x200003f0
 8002e9c:	200003e4 	.word	0x200003e4
 8002ea0:	200003e8 	.word	0x200003e8
 8002ea4:	200003ed 	.word	0x200003ed
 8002ea8:	200000c4 	.word	0x200000c4
 8002eac:	42700000 	.word	0x42700000
 8002eb0:	447a0000 	.word	0x447a0000
					}
					else {
						attempts++;
 8002eb4:	f897 30c5 	ldrb.w	r3, [r7, #197]	@ 0xc5
 8002eb8:	3301      	adds	r3, #1
 8002eba:	f887 30c5 	strb.w	r3, [r7, #197]	@ 0xc5
						wait(5);
 8002ebe:	2005      	movs	r0, #5
 8002ec0:	f000 fac6 	bl	8003450 <wait>
				while(attempts < ATTEMPT_LIMIT) {
 8002ec4:	f897 30c5 	ldrb.w	r3, [r7, #197]	@ 0xc5
 8002ec8:	2b09      	cmp	r3, #9
 8002eca:	d9c4      	bls.n	8002e56 <torch_main+0x2fa>
					}
				}

				if(attempts != 13) { error_loop(ERROR_CAN_READ, 0, 0); }
 8002ecc:	f897 30c5 	ldrb.w	r3, [r7, #197]	@ 0xc5
 8002ed0:	2b0d      	cmp	r3, #13
 8002ed2:	d004      	beq.n	8002ede <torch_main+0x382>
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	2100      	movs	r1, #0
 8002ed8:	2053      	movs	r0, #83	@ 0x53
 8002eda:	f7fe fdd3 	bl	8001a84 <error_loop>
			}
			if(HAL_CAN_GetRxFifoFillLevel(&hcan1, CAN_RX_FIFO1) > 0) {
 8002ede:	2101      	movs	r1, #1
 8002ee0:	48c3      	ldr	r0, [pc, #780]	@ (80031f0 <torch_main+0x694>)
 8002ee2:	f002 fe5c 	bl	8005b9e <HAL_CAN_GetRxFifoFillLevel>
 8002ee6:	4603      	mov	r3, r0
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d04a      	beq.n	8002f82 <torch_main+0x426>
				uint8_t attempts = 0;
 8002eec:	2300      	movs	r3, #0
 8002eee:	f887 30c4 	strb.w	r3, [r7, #196]	@ 0xc4

				while(attempts < ATTEMPT_LIMIT) {
 8002ef2:	e039      	b.n	8002f68 <torch_main+0x40c>
					if(HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO1, &RxHeader, RxData) == HAL_OK) {
 8002ef4:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 8002ef8:	f107 0290 	add.w	r2, r7, #144	@ 0x90
 8002efc:	2101      	movs	r1, #1
 8002efe:	48bc      	ldr	r0, [pc, #752]	@ (80031f0 <torch_main+0x694>)
 8002f00:	f002 fd2b 	bl	800595a <HAL_CAN_GetRxMessage>
 8002f04:	4603      	mov	r3, r0
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d126      	bne.n	8002f58 <torch_main+0x3fc>
						if(RxHeader.StdId == CAN_PACK_STAT_ID) {
 8002f0a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002f0e:	f5b3 6f84 	cmp.w	r3, #1056	@ 0x420
 8002f12:	d11d      	bne.n	8002f50 <torch_main+0x3f4>
							packCurrent = (uint16_t)RxData[0] | ((uint16_t)RxData[1] << 8);
 8002f14:	f897 3088 	ldrb.w	r3, [r7, #136]	@ 0x88
 8002f18:	b21a      	sxth	r2, r3
 8002f1a:	f897 3089 	ldrb.w	r3, [r7, #137]	@ 0x89
 8002f1e:	b21b      	sxth	r3, r3
 8002f20:	021b      	lsls	r3, r3, #8
 8002f22:	b21b      	sxth	r3, r3
 8002f24:	4313      	orrs	r3, r2
 8002f26:	b21b      	sxth	r3, r3
 8002f28:	f8a7 30b4 	strh.w	r3, [r7, #180]	@ 0xb4
							switch(RxData[5]) {
 8002f2c:	f897 308d 	ldrb.w	r3, [r7, #141]	@ 0x8d
 8002f30:	2b03      	cmp	r3, #3
 8002f32:	d002      	beq.n	8002f3a <torch_main+0x3de>
 8002f34:	2b04      	cmp	r3, #4
 8002f36:	d004      	beq.n	8002f42 <torch_main+0x3e6>
 8002f38:	e006      	b.n	8002f48 <torch_main+0x3ec>
								case 3:					// CHARGE
									state = CHARGE;
 8002f3a:	4bae      	ldr	r3, [pc, #696]	@ (80031f4 <torch_main+0x698>)
 8002f3c:	2202      	movs	r2, #2
 8002f3e:	701a      	strb	r2, [r3, #0]
									break;
 8002f40:	e006      	b.n	8002f50 <torch_main+0x3f4>
								case 4:					// Fault
									silent_error_loop();
 8002f42:	f7fe fd81 	bl	8001a48 <silent_error_loop>
									break;
 8002f46:	e003      	b.n	8002f50 <torch_main+0x3f4>
								default:				// ACTIVE
									state = ACTIVE;
 8002f48:	4baa      	ldr	r3, [pc, #680]	@ (80031f4 <torch_main+0x698>)
 8002f4a:	2201      	movs	r2, #1
 8002f4c:	701a      	strb	r2, [r3, #0]
									break;
 8002f4e:	bf00      	nop
							}
						}
						attempts = 13;
 8002f50:	230d      	movs	r3, #13
 8002f52:	f887 30c4 	strb.w	r3, [r7, #196]	@ 0xc4
 8002f56:	e007      	b.n	8002f68 <torch_main+0x40c>
					}
					else {
						attempts++;
 8002f58:	f897 30c4 	ldrb.w	r3, [r7, #196]	@ 0xc4
 8002f5c:	3301      	adds	r3, #1
 8002f5e:	f887 30c4 	strb.w	r3, [r7, #196]	@ 0xc4
						wait(5);
 8002f62:	2005      	movs	r0, #5
 8002f64:	f000 fa74 	bl	8003450 <wait>
				while(attempts < ATTEMPT_LIMIT) {
 8002f68:	f897 30c4 	ldrb.w	r3, [r7, #196]	@ 0xc4
 8002f6c:	2b09      	cmp	r3, #9
 8002f6e:	d9c1      	bls.n	8002ef4 <torch_main+0x398>
					}
				}
				if(attempts != 13) { error_loop(ERROR_CAN_READ, 0, 0); }
 8002f70:	f897 30c4 	ldrb.w	r3, [r7, #196]	@ 0xc4
 8002f74:	2b0d      	cmp	r3, #13
 8002f76:	d004      	beq.n	8002f82 <torch_main+0x426>
 8002f78:	2200      	movs	r2, #0
 8002f7a:	2100      	movs	r1, #0
 8002f7c:	2053      	movs	r0, #83	@ 0x53
 8002f7e:	f7fe fd81 	bl	8001a84 <error_loop>
			}

			wait(1);
 8002f82:	2001      	movs	r0, #1
 8002f84:	f000 fa64 	bl	8003450 <wait>
		while(state == ACTIVE) {
 8002f88:	4b9a      	ldr	r3, [pc, #616]	@ (80031f4 <torch_main+0x698>)
 8002f8a:	781b      	ldrb	r3, [r3, #0]
 8002f8c:	2b01      	cmp	r3, #1
 8002f8e:	f43f ae3e 	beq.w	8002c0e <torch_main+0xb2>
		}
		if(state == CHARGE) {
 8002f92:	4b98      	ldr	r3, [pc, #608]	@ (80031f4 <torch_main+0x698>)
 8002f94:	781b      	ldrb	r3, [r3, #0]
 8002f96:	2b02      	cmp	r3, #2
 8002f98:	f040 81cc 	bne.w	8003334 <torch_main+0x7d8>
			pull_low(GPIOA, GPIO_PIN_8);		// TURN OFF ACTIVE LED
 8002f9c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002fa0:	4895      	ldr	r0, [pc, #596]	@ (80031f8 <torch_main+0x69c>)
 8002fa2:	f000 fa35 	bl	8003410 <pull_low>
			pull_high(GPIOC, GPIO_PIN_9);		// TURN ON CHARGE LED
 8002fa6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002faa:	4894      	ldr	r0, [pc, #592]	@ (80031fc <torch_main+0x6a0>)
 8002fac:	f000 fa40 	bl	8003430 <pull_high>
			//HAL_CAN_Stop(&hcan1);
			//HAL_CAN_DeInit(&hcan1);
			//MX_CAN1_Init(0);
			//HAL_CAN_Start(&hcan1);

			transmitCounter = 0;
 8002fb0:	4b93      	ldr	r3, [pc, #588]	@ (8003200 <torch_main+0x6a4>)
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	601a      	str	r2, [r3, #0]
			measureCounter = 0;
 8002fb6:	4b93      	ldr	r3, [pc, #588]	@ (8003204 <torch_main+0x6a8>)
 8002fb8:	2200      	movs	r2, #0
 8002fba:	601a      	str	r2, [r3, #0]
		}
		while(state == CHARGE) {
 8002fbc:	e1ba      	b.n	8003334 <torch_main+0x7d8>
			if(measureCounter > 100) {
 8002fbe:	4b91      	ldr	r3, [pc, #580]	@ (8003204 <torch_main+0x6a8>)
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	2b64      	cmp	r3, #100	@ 0x64
 8002fc4:	f240 80f6 	bls.w	80031b4 <torch_main+0x658>
				if(!refup_check()) {
 8002fc8:	f7ff fd46 	bl	8002a58 <refup_check>
 8002fcc:	4603      	mov	r3, r0
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d104      	bne.n	8002fdc <torch_main+0x480>
					force_refup();
 8002fd2:	f7ff fcd7 	bl	8002984 <force_refup>
					wait(1);
 8002fd6:	2001      	movs	r0, #1
 8002fd8:	f000 fa3a 	bl	8003450 <wait>
				}

				temperature_sense(temperatures);
 8002fdc:	f107 0318 	add.w	r3, r7, #24
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	f001 f961 	bl	80042a8 <temperature_sense>
				voltage_sense(cellVoltages);
 8002fe6:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8002fea:	4618      	mov	r0, r3
 8002fec:	f001 fa78 	bl	80044e0 <voltage_sense>

				for(uint8_t i = 0; i < THERM_QTY; i++) {
 8002ff0:	2300      	movs	r3, #0
 8002ff2:	f887 30c3 	strb.w	r3, [r7, #195]	@ 0xc3
 8002ff6:	e024      	b.n	8003042 <torch_main+0x4e6>
					if(temperatures[i] > MAX_TEMPERATURE) {
 8002ff8:	f897 30c3 	ldrb.w	r3, [r7, #195]	@ 0xc3
 8002ffc:	009b      	lsls	r3, r3, #2
 8002ffe:	33d8      	adds	r3, #216	@ 0xd8
 8003000:	443b      	add	r3, r7
 8003002:	3bc0      	subs	r3, #192	@ 0xc0
 8003004:	edd3 7a00 	vldr	s15, [r3]
 8003008:	ed9f 7a7f 	vldr	s14, [pc, #508]	@ 8003208 <torch_main+0x6ac>
 800300c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003010:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003014:	dd10      	ble.n	8003038 <torch_main+0x4dc>
						overheatFlag = 1;
 8003016:	2301      	movs	r3, #1
 8003018:	f887 30d6 	strb.w	r3, [r7, #214]	@ 0xd6
						faultingThermistorIndex = i + 1;
 800301c:	f897 30c3 	ldrb.w	r3, [r7, #195]	@ 0xc3
 8003020:	3301      	adds	r3, #1
 8003022:	f887 30d1 	strb.w	r3, [r7, #209]	@ 0xd1
						faultingTemperature = temperatures[i];
 8003026:	f897 30c3 	ldrb.w	r3, [r7, #195]	@ 0xc3
 800302a:	009b      	lsls	r3, r3, #2
 800302c:	33d8      	adds	r3, #216	@ 0xd8
 800302e:	443b      	add	r3, r7
 8003030:	3bc0      	subs	r3, #192	@ 0xc0
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
				for(uint8_t i = 0; i < THERM_QTY; i++) {
 8003038:	f897 30c3 	ldrb.w	r3, [r7, #195]	@ 0xc3
 800303c:	3301      	adds	r3, #1
 800303e:	f887 30c3 	strb.w	r3, [r7, #195]	@ 0xc3
 8003042:	f897 30c3 	ldrb.w	r3, [r7, #195]	@ 0xc3
 8003046:	2b11      	cmp	r3, #17
 8003048:	d9d6      	bls.n	8002ff8 <torch_main+0x49c>
					}
				}
				if(overheatFlag) { overheats++; }
 800304a:	f897 30d6 	ldrb.w	r3, [r7, #214]	@ 0xd6
 800304e:	2b00      	cmp	r3, #0
 8003050:	d005      	beq.n	800305e <torch_main+0x502>
 8003052:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
 8003056:	3301      	adds	r3, #1
 8003058:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 800305c:	e008      	b.n	8003070 <torch_main+0x514>

				else {
					if(overheats > 0) { overheats--; }
 800305e:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
 8003062:	2b00      	cmp	r3, #0
 8003064:	d004      	beq.n	8003070 <torch_main+0x514>
 8003066:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
 800306a:	3b01      	subs	r3, #1
 800306c:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
				}
				// MODULE OVERHEAT FAULT
				if(overheats > ATTEMPT_LIMIT) {
 8003070:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
 8003074:	2b0a      	cmp	r3, #10
 8003076:	d916      	bls.n	80030a6 <torch_main+0x54a>
					float tempScale = 1000.0f;
 8003078:	4b64      	ldr	r3, [pc, #400]	@ (800320c <torch_main+0x6b0>)
 800307a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
					uint16_t intFaultingTemperature = (uint16_t)(faultingTemperature * tempScale);
 800307e:	ed97 7a33 	vldr	s14, [r7, #204]	@ 0xcc
 8003082:	edd7 7a2e 	vldr	s15, [r7, #184]	@ 0xb8
 8003086:	ee67 7a27 	vmul.f32	s15, s14, s15
 800308a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800308e:	ee17 3a90 	vmov	r3, s15
 8003092:	f8a7 30b6 	strh.w	r3, [r7, #182]	@ 0xb6

					error_loop(ERROR_OVERHEAT, intFaultingTemperature, faultingThermistorIndex);
 8003096:	f897 20d1 	ldrb.w	r2, [r7, #209]	@ 0xd1
 800309a:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	@ 0xb6
 800309e:	4619      	mov	r1, r3
 80030a0:	2045      	movs	r0, #69	@ 0x45
 80030a2:	f7fe fcef 	bl	8001a84 <error_loop>
				}

				for(uint8_t i = 0; i < CELL_QTY; i++) {
 80030a6:	2300      	movs	r3, #0
 80030a8:	f887 30c2 	strb.w	r3, [r7, #194]	@ 0xc2
 80030ac:	e03d      	b.n	800312a <torch_main+0x5ce>
					if(cellVoltages[i] > MAX_CELL_VOLTAGE) {
 80030ae:	f897 30c2 	ldrb.w	r3, [r7, #194]	@ 0xc2
 80030b2:	005b      	lsls	r3, r3, #1
 80030b4:	33d8      	adds	r3, #216	@ 0xd8
 80030b6:	443b      	add	r3, r7
 80030b8:	f833 3c78 	ldrh.w	r3, [r3, #-120]
 80030bc:	f24a 4210 	movw	r2, #42000	@ 0xa410
 80030c0:	4293      	cmp	r3, r2
 80030c2:	d911      	bls.n	80030e8 <torch_main+0x58c>
						overvoltFlag = 1;
 80030c4:	2301      	movs	r3, #1
 80030c6:	f887 30d4 	strb.w	r3, [r7, #212]	@ 0xd4
						faultingCellIndex = i + 1;
 80030ca:	f897 30c2 	ldrb.w	r3, [r7, #194]	@ 0xc2
 80030ce:	3301      	adds	r3, #1
 80030d0:	f887 30cb 	strb.w	r3, [r7, #203]	@ 0xcb
						faultingCellVoltage = cellVoltages[i];
 80030d4:	f897 30c2 	ldrb.w	r3, [r7, #194]	@ 0xc2
 80030d8:	005b      	lsls	r3, r3, #1
 80030da:	33d8      	adds	r3, #216	@ 0xd8
 80030dc:	443b      	add	r3, r7
 80030de:	f833 3c78 	ldrh.w	r3, [r3, #-120]
 80030e2:	f8a7 30c8 	strh.w	r3, [r7, #200]	@ 0xc8
 80030e6:	e01b      	b.n	8003120 <torch_main+0x5c4>
					}
					else if(cellVoltages[i] < MIN_CELL_VOLTAGE) {
 80030e8:	f897 30c2 	ldrb.w	r3, [r7, #194]	@ 0xc2
 80030ec:	005b      	lsls	r3, r3, #1
 80030ee:	33d8      	adds	r3, #216	@ 0xd8
 80030f0:	443b      	add	r3, r7
 80030f2:	f833 3c78 	ldrh.w	r3, [r3, #-120]
 80030f6:	f246 12a7 	movw	r2, #24999	@ 0x61a7
 80030fa:	4293      	cmp	r3, r2
 80030fc:	d810      	bhi.n	8003120 <torch_main+0x5c4>
						undervoltFlag = 1;
 80030fe:	2301      	movs	r3, #1
 8003100:	f887 30d2 	strb.w	r3, [r7, #210]	@ 0xd2
						faultingCellIndex = i + 1;
 8003104:	f897 30c2 	ldrb.w	r3, [r7, #194]	@ 0xc2
 8003108:	3301      	adds	r3, #1
 800310a:	f887 30cb 	strb.w	r3, [r7, #203]	@ 0xcb
						faultingCellVoltage = cellVoltages[i];
 800310e:	f897 30c2 	ldrb.w	r3, [r7, #194]	@ 0xc2
 8003112:	005b      	lsls	r3, r3, #1
 8003114:	33d8      	adds	r3, #216	@ 0xd8
 8003116:	443b      	add	r3, r7
 8003118:	f833 3c78 	ldrh.w	r3, [r3, #-120]
 800311c:	f8a7 30c8 	strh.w	r3, [r7, #200]	@ 0xc8
				for(uint8_t i = 0; i < CELL_QTY; i++) {
 8003120:	f897 30c2 	ldrb.w	r3, [r7, #194]	@ 0xc2
 8003124:	3301      	adds	r3, #1
 8003126:	f887 30c2 	strb.w	r3, [r7, #194]	@ 0xc2
 800312a:	f897 30c2 	ldrb.w	r3, [r7, #194]	@ 0xc2
 800312e:	2b13      	cmp	r3, #19
 8003130:	d9bd      	bls.n	80030ae <torch_main+0x552>
					}
				}
				if(overvoltFlag) { overvolts++; }
 8003132:	f897 30d4 	ldrb.w	r3, [r7, #212]	@ 0xd4
 8003136:	2b00      	cmp	r3, #0
 8003138:	d004      	beq.n	8003144 <torch_main+0x5e8>
 800313a:	f897 30d5 	ldrb.w	r3, [r7, #213]	@ 0xd5
 800313e:	3301      	adds	r3, #1
 8003140:	f887 30d5 	strb.w	r3, [r7, #213]	@ 0xd5

				if(undervoltFlag) { undervolts++; }
 8003144:	f897 30d2 	ldrb.w	r3, [r7, #210]	@ 0xd2
 8003148:	2b00      	cmp	r3, #0
 800314a:	d004      	beq.n	8003156 <torch_main+0x5fa>
 800314c:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 8003150:	3301      	adds	r3, #1
 8003152:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3

				if(overvoltFlag == 0 && undervoltFlag == 0) {
 8003156:	f897 30d4 	ldrb.w	r3, [r7, #212]	@ 0xd4
 800315a:	2b00      	cmp	r3, #0
 800315c:	d115      	bne.n	800318a <torch_main+0x62e>
 800315e:	f897 30d2 	ldrb.w	r3, [r7, #210]	@ 0xd2
 8003162:	2b00      	cmp	r3, #0
 8003164:	d111      	bne.n	800318a <torch_main+0x62e>
					if(overvolts > 0) { overvolts--; }
 8003166:	f897 30d5 	ldrb.w	r3, [r7, #213]	@ 0xd5
 800316a:	2b00      	cmp	r3, #0
 800316c:	d004      	beq.n	8003178 <torch_main+0x61c>
 800316e:	f897 30d5 	ldrb.w	r3, [r7, #213]	@ 0xd5
 8003172:	3b01      	subs	r3, #1
 8003174:	f887 30d5 	strb.w	r3, [r7, #213]	@ 0xd5

					if(undervolts > 0) { undervolts--; }
 8003178:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 800317c:	2b00      	cmp	r3, #0
 800317e:	d004      	beq.n	800318a <torch_main+0x62e>
 8003180:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 8003184:	3b01      	subs	r3, #1
 8003186:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
				}
				// UNDERVOLT FAULTS

				if(undervolts > ATTEMPT_LIMIT) {
 800318a:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 800318e:	2b0a      	cmp	r3, #10
 8003190:	d907      	bls.n	80031a2 <torch_main+0x646>
					error_loop(ERROR_UNDERVOLT, faultingCellVoltage, faultingCellIndex);
 8003192:	f897 20cb 	ldrb.w	r2, [r7, #203]	@ 0xcb
 8003196:	f8b7 30c8 	ldrh.w	r3, [r7, #200]	@ 0xc8
 800319a:	4619      	mov	r1, r3
 800319c:	2046      	movs	r0, #70	@ 0x46
 800319e:	f7fe fc71 	bl	8001a84 <error_loop>
				// Overvolt means charging's done
				if(overvolts > ATTEMPT_LIMIT) {
					// do nothing (no fault)
				}

				overvoltFlag = 0;
 80031a2:	2300      	movs	r3, #0
 80031a4:	f887 30d4 	strb.w	r3, [r7, #212]	@ 0xd4
				undervoltFlag = 0;
 80031a8:	2300      	movs	r3, #0
 80031aa:	f887 30d2 	strb.w	r3, [r7, #210]	@ 0xd2
				measureCounter = 0;
 80031ae:	4b15      	ldr	r3, [pc, #84]	@ (8003204 <torch_main+0x6a8>)
 80031b0:	2200      	movs	r2, #0
 80031b2:	601a      	str	r2, [r3, #0]
			}

			if(transmitCounter > 1000) {
 80031b4:	4b12      	ldr	r3, [pc, #72]	@ (8003200 <torch_main+0x6a4>)
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80031bc:	d90c      	bls.n	80031d8 <torch_main+0x67c>
				transmit_voltages(cellVoltages);
 80031be:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80031c2:	4618      	mov	r0, r3
 80031c4:	f7fe fcd8 	bl	8001b78 <transmit_voltages>
				transmit_temperatures(temperatures);
 80031c8:	f107 0318 	add.w	r3, r7, #24
 80031cc:	4618      	mov	r0, r3
 80031ce:	f7fe fea3 	bl	8001f18 <transmit_temperatures>
				transmitCounter = 0;
 80031d2:	4b0b      	ldr	r3, [pc, #44]	@ (8003200 <torch_main+0x6a4>)
 80031d4:	2200      	movs	r2, #0
 80031d6:	601a      	str	r2, [r3, #0]
			}

			if(HAL_CAN_GetRxFifoFillLevel(&hcan1, CAN_RX_FIFO0) > 0) {
 80031d8:	2100      	movs	r1, #0
 80031da:	4805      	ldr	r0, [pc, #20]	@ (80031f0 <torch_main+0x694>)
 80031dc:	f002 fcdf 	bl	8005b9e <HAL_CAN_GetRxFifoFillLevel>
 80031e0:	4603      	mov	r3, r0
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d051      	beq.n	800328a <torch_main+0x72e>
				uint8_t attempts = 0;
 80031e6:	2300      	movs	r3, #0
 80031e8:	f887 30c1 	strb.w	r3, [r7, #193]	@ 0xc1

				while(attempts < ATTEMPT_LIMIT) {
 80031ec:	e040      	b.n	8003270 <torch_main+0x714>
 80031ee:	bf00      	nop
 80031f0:	200000c4 	.word	0x200000c4
 80031f4:	200003ed 	.word	0x200003ed
 80031f8:	40020000 	.word	0x40020000
 80031fc:	40020800 	.word	0x40020800
 8003200:	200003e4 	.word	0x200003e4
 8003204:	200003e8 	.word	0x200003e8
 8003208:	42700000 	.word	0x42700000
 800320c:	447a0000 	.word	0x447a0000
					if(HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &RxHeader, RxData) == HAL_OK) {
 8003210:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 8003214:	f107 0290 	add.w	r2, r7, #144	@ 0x90
 8003218:	2100      	movs	r1, #0
 800321a:	4878      	ldr	r0, [pc, #480]	@ (80033fc <torch_main+0x8a0>)
 800321c:	f002 fb9d 	bl	800595a <HAL_CAN_GetRxMessage>
 8003220:	4603      	mov	r3, r0
 8003222:	2b00      	cmp	r3, #0
 8003224:	d11c      	bne.n	8003260 <torch_main+0x704>

						if(RxHeader.StdId == CAN_FAULT_ID) { silent_error_loop(); }
 8003226:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800322a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800322e:	d101      	bne.n	8003234 <torch_main+0x6d8>
 8003230:	f7fe fc0a 	bl	8001a48 <silent_error_loop>

						if(RxHeader.StdId == CAN_MIN_VCELL_ID) { globalMinCellVoltage = (uint16_t)RxData[0] | ((uint16_t)RxData[1] << 8); }
 8003234:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003238:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800323c:	4293      	cmp	r3, r2
 800323e:	d10b      	bne.n	8003258 <torch_main+0x6fc>
 8003240:	f897 3088 	ldrb.w	r3, [r7, #136]	@ 0x88
 8003244:	b21a      	sxth	r2, r3
 8003246:	f897 3089 	ldrb.w	r3, [r7, #137]	@ 0x89
 800324a:	b21b      	sxth	r3, r3
 800324c:	021b      	lsls	r3, r3, #8
 800324e:	b21b      	sxth	r3, r3
 8003250:	4313      	orrs	r3, r2
 8003252:	b21b      	sxth	r3, r3
 8003254:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe

						attempts = 13;
 8003258:	230d      	movs	r3, #13
 800325a:	f887 30c1 	strb.w	r3, [r7, #193]	@ 0xc1
 800325e:	e007      	b.n	8003270 <torch_main+0x714>
					}
					else {
						attempts++;
 8003260:	f897 30c1 	ldrb.w	r3, [r7, #193]	@ 0xc1
 8003264:	3301      	adds	r3, #1
 8003266:	f887 30c1 	strb.w	r3, [r7, #193]	@ 0xc1
						wait(5);
 800326a:	2005      	movs	r0, #5
 800326c:	f000 f8f0 	bl	8003450 <wait>
				while(attempts < ATTEMPT_LIMIT) {
 8003270:	f897 30c1 	ldrb.w	r3, [r7, #193]	@ 0xc1
 8003274:	2b09      	cmp	r3, #9
 8003276:	d9cb      	bls.n	8003210 <torch_main+0x6b4>
					}
				}
				if(attempts != 13) { error_loop(ERROR_CAN_READ, 0, 0); }
 8003278:	f897 30c1 	ldrb.w	r3, [r7, #193]	@ 0xc1
 800327c:	2b0d      	cmp	r3, #13
 800327e:	d004      	beq.n	800328a <torch_main+0x72e>
 8003280:	2200      	movs	r2, #0
 8003282:	2100      	movs	r1, #0
 8003284:	2053      	movs	r0, #83	@ 0x53
 8003286:	f7fe fbfd 	bl	8001a84 <error_loop>
			}
			if(HAL_CAN_GetRxFifoFillLevel(&hcan1, CAN_RX_FIFO1) > 0) {
 800328a:	2101      	movs	r1, #1
 800328c:	485b      	ldr	r0, [pc, #364]	@ (80033fc <torch_main+0x8a0>)
 800328e:	f002 fc86 	bl	8005b9e <HAL_CAN_GetRxFifoFillLevel>
 8003292:	4603      	mov	r3, r0
 8003294:	2b00      	cmp	r3, #0
 8003296:	d04a      	beq.n	800332e <torch_main+0x7d2>
				uint8_t attempts = 0;
 8003298:	2300      	movs	r3, #0
 800329a:	f887 30c0 	strb.w	r3, [r7, #192]	@ 0xc0

				while(attempts < ATTEMPT_LIMIT) {
 800329e:	e039      	b.n	8003314 <torch_main+0x7b8>
					if(HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO1, &RxHeader, RxData) == HAL_OK) {
 80032a0:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 80032a4:	f107 0290 	add.w	r2, r7, #144	@ 0x90
 80032a8:	2101      	movs	r1, #1
 80032aa:	4854      	ldr	r0, [pc, #336]	@ (80033fc <torch_main+0x8a0>)
 80032ac:	f002 fb55 	bl	800595a <HAL_CAN_GetRxMessage>
 80032b0:	4603      	mov	r3, r0
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d126      	bne.n	8003304 <torch_main+0x7a8>
						if(RxHeader.StdId == CAN_PACK_STAT_ID) {
 80032b6:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80032ba:	f5b3 6f84 	cmp.w	r3, #1056	@ 0x420
 80032be:	d11d      	bne.n	80032fc <torch_main+0x7a0>
							packCurrent = (uint16_t)RxData[0] | ((uint16_t)RxData[1] << 8);
 80032c0:	f897 3088 	ldrb.w	r3, [r7, #136]	@ 0x88
 80032c4:	b21a      	sxth	r2, r3
 80032c6:	f897 3089 	ldrb.w	r3, [r7, #137]	@ 0x89
 80032ca:	b21b      	sxth	r3, r3
 80032cc:	021b      	lsls	r3, r3, #8
 80032ce:	b21b      	sxth	r3, r3
 80032d0:	4313      	orrs	r3, r2
 80032d2:	b21b      	sxth	r3, r3
 80032d4:	f8a7 30b4 	strh.w	r3, [r7, #180]	@ 0xb4
							switch(RxData[5]) {
 80032d8:	f897 308d 	ldrb.w	r3, [r7, #141]	@ 0x8d
 80032dc:	2b03      	cmp	r3, #3
 80032de:	d002      	beq.n	80032e6 <torch_main+0x78a>
 80032e0:	2b04      	cmp	r3, #4
 80032e2:	d004      	beq.n	80032ee <torch_main+0x792>
 80032e4:	e006      	b.n	80032f4 <torch_main+0x798>
								case 3:					// CHARGE
									state = CHARGE;
 80032e6:	4b46      	ldr	r3, [pc, #280]	@ (8003400 <torch_main+0x8a4>)
 80032e8:	2202      	movs	r2, #2
 80032ea:	701a      	strb	r2, [r3, #0]
									break;
 80032ec:	e006      	b.n	80032fc <torch_main+0x7a0>
								case 4:					// Fault
									silent_error_loop();
 80032ee:	f7fe fbab 	bl	8001a48 <silent_error_loop>
									break;
 80032f2:	e003      	b.n	80032fc <torch_main+0x7a0>
								default:				// ACTIVE
									state = ACTIVE;
 80032f4:	4b42      	ldr	r3, [pc, #264]	@ (8003400 <torch_main+0x8a4>)
 80032f6:	2201      	movs	r2, #1
 80032f8:	701a      	strb	r2, [r3, #0]
									break;
 80032fa:	bf00      	nop
							}
						}
						attempts = 13;
 80032fc:	230d      	movs	r3, #13
 80032fe:	f887 30c0 	strb.w	r3, [r7, #192]	@ 0xc0
 8003302:	e007      	b.n	8003314 <torch_main+0x7b8>
					}
					else {
						attempts++;
 8003304:	f897 30c0 	ldrb.w	r3, [r7, #192]	@ 0xc0
 8003308:	3301      	adds	r3, #1
 800330a:	f887 30c0 	strb.w	r3, [r7, #192]	@ 0xc0
						wait(5);
 800330e:	2005      	movs	r0, #5
 8003310:	f000 f89e 	bl	8003450 <wait>
				while(attempts < ATTEMPT_LIMIT) {
 8003314:	f897 30c0 	ldrb.w	r3, [r7, #192]	@ 0xc0
 8003318:	2b09      	cmp	r3, #9
 800331a:	d9c1      	bls.n	80032a0 <torch_main+0x744>
					}
				}
				if(attempts != 13) { error_loop(ERROR_CAN_READ, 0, 0); }
 800331c:	f897 30c0 	ldrb.w	r3, [r7, #192]	@ 0xc0
 8003320:	2b0d      	cmp	r3, #13
 8003322:	d004      	beq.n	800332e <torch_main+0x7d2>
 8003324:	2200      	movs	r2, #0
 8003326:	2100      	movs	r1, #0
 8003328:	2053      	movs	r0, #83	@ 0x53
 800332a:	f7fe fbab 	bl	8001a84 <error_loop>
			}
			if(globalMinCellVoltage > 0) {

			}

			wait(1);
 800332e:	2001      	movs	r0, #1
 8003330:	f000 f88e 	bl	8003450 <wait>
		while(state == CHARGE) {
 8003334:	4b32      	ldr	r3, [pc, #200]	@ (8003400 <torch_main+0x8a4>)
 8003336:	781b      	ldrb	r3, [r3, #0]
 8003338:	2b02      	cmp	r3, #2
 800333a:	f43f ae40 	beq.w	8002fbe <torch_main+0x462>
	while(mode == 3) {
 800333e:	4b31      	ldr	r3, [pc, #196]	@ (8003404 <torch_main+0x8a8>)
 8003340:	781b      	ldrb	r3, [r3, #0]
 8003342:	2b03      	cmp	r3, #3
 8003344:	f43f ae20 	beq.w	8002f88 <torch_main+0x42c>
		}
	}

	// !! MODE = 4 IS BALANCE TEST CODE !!
	if(mode == 4) {
 8003348:	4b2e      	ldr	r3, [pc, #184]	@ (8003404 <torch_main+0x8a8>)
 800334a:	781b      	ldrb	r3, [r3, #0]
 800334c:	2b04      	cmp	r3, #4
 800334e:	d110      	bne.n	8003372 <torch_main+0x816>
		force_refup();
 8003350:	f7ff fb18 	bl	8002984 <force_refup>
		wait(1);
 8003354:	2001      	movs	r0, #1
 8003356:	f000 f87b 	bl	8003450 <wait>
		pull_low(GPIOA, GPIO_PIN_8);		// TURN OFF ACTIVE LED
 800335a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800335e:	482a      	ldr	r0, [pc, #168]	@ (8003408 <torch_main+0x8ac>)
 8003360:	f000 f856 	bl	8003410 <pull_low>
		pull_high(GPIOC, GPIO_PIN_9);		// TURN ON CHARGE LED
 8003364:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003368:	4828      	ldr	r0, [pc, #160]	@ (800340c <torch_main+0x8b0>)
 800336a:	f000 f861 	bl	8003430 <pull_high>
		resistor_temp_sense();
 800336e:	f7fe f9a9 	bl	80016c4 <resistor_temp_sense>
	}
	mode = 0;
 8003372:	4b24      	ldr	r3, [pc, #144]	@ (8003404 <torch_main+0x8a8>)
 8003374:	2200      	movs	r2, #0
 8003376:	701a      	strb	r2, [r3, #0]

	uint8_t cellsToBalance[CELL_QTY] = {0};
 8003378:	1d3b      	adds	r3, r7, #4
 800337a:	2200      	movs	r2, #0
 800337c:	601a      	str	r2, [r3, #0]
 800337e:	605a      	str	r2, [r3, #4]
 8003380:	609a      	str	r2, [r3, #8]
 8003382:	60da      	str	r2, [r3, #12]
 8003384:	611a      	str	r2, [r3, #16]
	uint8_t cellsToBalanceQty = 0;
 8003386:	2300      	movs	r3, #0
 8003388:	f887 30bd 	strb.w	r3, [r7, #189]	@ 0xbd
	    sideB_ITMP = (sideB_statusRegisterGroupA[3] << 8) | sideB_statusRegisterGroupA[2];
	    sideB_VA = (sideB_statusRegisterGroupA[5] << 8) | sideB_statusRegisterGroupA[4];*/
		// end test


	while(mode == 0) {
 800338c:	e02d      	b.n	80033ea <torch_main+0x88e>
		  pull_high(GPIOA, GPIO_PIN_8);		// ACTIVE LED
 800338e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003392:	481d      	ldr	r0, [pc, #116]	@ (8003408 <torch_main+0x8ac>)
 8003394:	f000 f84c 	bl	8003430 <pull_high>
		  pull_high(GPIOC, GPIO_PIN_9);		// CHARGE LED
 8003398:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800339c:	481b      	ldr	r0, [pc, #108]	@ (800340c <torch_main+0x8b0>)
 800339e:	f000 f847 	bl	8003430 <pull_high>
		  pull_high(GPIOC, GPIO_PIN_8);		// BALANCE LED
 80033a2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80033a6:	4819      	ldr	r0, [pc, #100]	@ (800340c <torch_main+0x8b0>)
 80033a8:	f000 f842 	bl	8003430 <pull_high>
		  pull_high(GPIOC, GPIO_PIN_7);		// HOT LED
 80033ac:	2180      	movs	r1, #128	@ 0x80
 80033ae:	4817      	ldr	r0, [pc, #92]	@ (800340c <torch_main+0x8b0>)
 80033b0:	f000 f83e 	bl	8003430 <pull_high>
		  wait(1000);
 80033b4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80033b8:	f000 f84a 	bl	8003450 <wait>
		  pull_low(GPIOA, GPIO_PIN_8);
 80033bc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80033c0:	4811      	ldr	r0, [pc, #68]	@ (8003408 <torch_main+0x8ac>)
 80033c2:	f000 f825 	bl	8003410 <pull_low>
		  pull_low(GPIOC, GPIO_PIN_9);
 80033c6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80033ca:	4810      	ldr	r0, [pc, #64]	@ (800340c <torch_main+0x8b0>)
 80033cc:	f000 f820 	bl	8003410 <pull_low>
		  pull_low(GPIOC, GPIO_PIN_8);
 80033d0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80033d4:	480d      	ldr	r0, [pc, #52]	@ (800340c <torch_main+0x8b0>)
 80033d6:	f000 f81b 	bl	8003410 <pull_low>
		  pull_low(GPIOC, GPIO_PIN_7);
 80033da:	2180      	movs	r1, #128	@ 0x80
 80033dc:	480b      	ldr	r0, [pc, #44]	@ (800340c <torch_main+0x8b0>)
 80033de:	f000 f817 	bl	8003410 <pull_low>
		  wait(1000);
 80033e2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80033e6:	f000 f833 	bl	8003450 <wait>
	while(mode == 0) {
 80033ea:	4b06      	ldr	r3, [pc, #24]	@ (8003404 <torch_main+0x8a8>)
 80033ec:	781b      	ldrb	r3, [r3, #0]
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d0cd      	beq.n	800338e <torch_main+0x832>
	}
}
 80033f2:	bf00      	nop
 80033f4:	bf00      	nop
 80033f6:	37d8      	adds	r7, #216	@ 0xd8
 80033f8:	46bd      	mov	sp, r7
 80033fa:	bd80      	pop	{r7, pc}
 80033fc:	200000c4 	.word	0x200000c4
 8003400:	200003ed 	.word	0x200003ed
 8003404:	200003ec 	.word	0x200003ec
 8003408:	40020000 	.word	0x40020000
 800340c:	40020800 	.word	0x40020800

08003410 <pull_low>:
#include "torch_stm32.h"

volatile uint32_t Counter = 0;

void pull_low(GPIO_TypeDef *port, uint16_t pin)
{
 8003410:	b580      	push	{r7, lr}
 8003412:	b082      	sub	sp, #8
 8003414:	af00      	add	r7, sp, #0
 8003416:	6078      	str	r0, [r7, #4]
 8003418:	460b      	mov	r3, r1
 800341a:	807b      	strh	r3, [r7, #2]
	HAL_GPIO_WritePin(port, pin, GPIO_PIN_RESET);
 800341c:	887b      	ldrh	r3, [r7, #2]
 800341e:	2200      	movs	r2, #0
 8003420:	4619      	mov	r1, r3
 8003422:	6878      	ldr	r0, [r7, #4]
 8003424:	f003 f8c2 	bl	80065ac <HAL_GPIO_WritePin>
}
 8003428:	bf00      	nop
 800342a:	3708      	adds	r7, #8
 800342c:	46bd      	mov	sp, r7
 800342e:	bd80      	pop	{r7, pc}

08003430 <pull_high>:


void pull_high(GPIO_TypeDef *port, uint16_t pin)
{
 8003430:	b580      	push	{r7, lr}
 8003432:	b082      	sub	sp, #8
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]
 8003438:	460b      	mov	r3, r1
 800343a:	807b      	strh	r3, [r7, #2]
	HAL_GPIO_WritePin(port, pin, GPIO_PIN_SET);
 800343c:	887b      	ldrh	r3, [r7, #2]
 800343e:	2201      	movs	r2, #1
 8003440:	4619      	mov	r1, r3
 8003442:	6878      	ldr	r0, [r7, #4]
 8003444:	f003 f8b2 	bl	80065ac <HAL_GPIO_WritePin>
}
 8003448:	bf00      	nop
 800344a:	3708      	adds	r7, #8
 800344c:	46bd      	mov	sp, r7
 800344e:	bd80      	pop	{r7, pc}

08003450 <wait>:


void wait(uint32_t msDelay)
{
 8003450:	b580      	push	{r7, lr}
 8003452:	b082      	sub	sp, #8
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
	HAL_Delay(msDelay);
 8003458:	6878      	ldr	r0, [r7, #4]
 800345a:	f001 fb11 	bl	8004a80 <HAL_Delay>
}
 800345e:	bf00      	nop
 8003460:	3708      	adds	r7, #8
 8003462:	46bd      	mov	sp, r7
 8003464:	bd80      	pop	{r7, pc}
	...

08003468 <start_timer>:
	else { return 1; }
}


void start_timer(TIM_HandleTypeDef *htim)
{
 8003468:	b580      	push	{r7, lr}
 800346a:	b084      	sub	sp, #16
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef status;										// status indicates whether the reception was successful or not
	uint8_t attempts = 0;											// 5 attempts
 8003470:	2300      	movs	r3, #0
 8003472:	73fb      	strb	r3, [r7, #15]

	Counter = 0;
 8003474:	4b26      	ldr	r3, [pc, #152]	@ (8003510 <start_timer+0xa8>)
 8003476:	2200      	movs	r2, #0
 8003478:	601a      	str	r2, [r3, #0]

	while(attempts < 5) {
 800347a:	e010      	b.n	800349e <start_timer+0x36>
		status = HAL_TIM_Base_Start_IT(htim);
 800347c:	6878      	ldr	r0, [r7, #4]
 800347e:	f004 fb03 	bl	8007a88 <HAL_TIM_Base_Start_IT>
 8003482:	4603      	mov	r3, r0
 8003484:	73bb      	strb	r3, [r7, #14]

		if(status == HAL_OK) { attempts = 10; }
 8003486:	7bbb      	ldrb	r3, [r7, #14]
 8003488:	2b00      	cmp	r3, #0
 800348a:	d102      	bne.n	8003492 <start_timer+0x2a>
 800348c:	230a      	movs	r3, #10
 800348e:	73fb      	strb	r3, [r7, #15]
 8003490:	e005      	b.n	800349e <start_timer+0x36>

		else {
			attempts++;
 8003492:	7bfb      	ldrb	r3, [r7, #15]
 8003494:	3301      	adds	r3, #1
 8003496:	73fb      	strb	r3, [r7, #15]
			wait(1);
 8003498:	2001      	movs	r0, #1
 800349a:	f7ff ffd9 	bl	8003450 <wait>
	while(attempts < 5) {
 800349e:	7bfb      	ldrb	r3, [r7, #15]
 80034a0:	2b04      	cmp	r3, #4
 80034a2:	d9eb      	bls.n	800347c <start_timer+0x14>
		}
	}
	if(attempts != 10) {
 80034a4:	7bfb      	ldrb	r3, [r7, #15]
 80034a6:	2b0a      	cmp	r3, #10
 80034a8:	d02d      	beq.n	8003506 <start_timer+0x9e>
		// STM ERROR (INTERNAL)
		while(1) {
			  pull_high(GPIOA, GPIO_PIN_8);
 80034aa:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80034ae:	4819      	ldr	r0, [pc, #100]	@ (8003514 <start_timer+0xac>)
 80034b0:	f7ff ffbe 	bl	8003430 <pull_high>
			  pull_high(GPIOC, GPIO_PIN_9);
 80034b4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80034b8:	4817      	ldr	r0, [pc, #92]	@ (8003518 <start_timer+0xb0>)
 80034ba:	f7ff ffb9 	bl	8003430 <pull_high>
			  pull_high(GPIOC, GPIO_PIN_8);
 80034be:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80034c2:	4815      	ldr	r0, [pc, #84]	@ (8003518 <start_timer+0xb0>)
 80034c4:	f7ff ffb4 	bl	8003430 <pull_high>
			  pull_high(GPIOC, GPIO_PIN_7);
 80034c8:	2180      	movs	r1, #128	@ 0x80
 80034ca:	4813      	ldr	r0, [pc, #76]	@ (8003518 <start_timer+0xb0>)
 80034cc:	f7ff ffb0 	bl	8003430 <pull_high>
			  wait(250);
 80034d0:	20fa      	movs	r0, #250	@ 0xfa
 80034d2:	f7ff ffbd 	bl	8003450 <wait>
			  pull_low(GPIOA, GPIO_PIN_8);
 80034d6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80034da:	480e      	ldr	r0, [pc, #56]	@ (8003514 <start_timer+0xac>)
 80034dc:	f7ff ff98 	bl	8003410 <pull_low>
			  pull_low(GPIOC, GPIO_PIN_9);
 80034e0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80034e4:	480c      	ldr	r0, [pc, #48]	@ (8003518 <start_timer+0xb0>)
 80034e6:	f7ff ff93 	bl	8003410 <pull_low>
			  pull_low(GPIOC, GPIO_PIN_8);
 80034ea:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80034ee:	480a      	ldr	r0, [pc, #40]	@ (8003518 <start_timer+0xb0>)
 80034f0:	f7ff ff8e 	bl	8003410 <pull_low>
			  pull_low(GPIOC, GPIO_PIN_7);
 80034f4:	2180      	movs	r1, #128	@ 0x80
 80034f6:	4808      	ldr	r0, [pc, #32]	@ (8003518 <start_timer+0xb0>)
 80034f8:	f7ff ff8a 	bl	8003410 <pull_low>
			  wait(250);
 80034fc:	20fa      	movs	r0, #250	@ 0xfa
 80034fe:	f7ff ffa7 	bl	8003450 <wait>
			  pull_high(GPIOA, GPIO_PIN_8);
 8003502:	bf00      	nop
 8003504:	e7d1      	b.n	80034aa <start_timer+0x42>
			  // ADD CAN MESSAGE SPAM
		}
	}
}
 8003506:	bf00      	nop
 8003508:	3710      	adds	r7, #16
 800350a:	46bd      	mov	sp, r7
 800350c:	bd80      	pop	{r7, pc}
 800350e:	bf00      	nop
 8003510:	200003f0 	.word	0x200003f0
 8003514:	40020000 	.word	0x40020000
 8003518:	40020800 	.word	0x40020800

0800351c <stop_timer>:


void stop_timer(TIM_HandleTypeDef *htim)
{
 800351c:	b580      	push	{r7, lr}
 800351e:	b084      	sub	sp, #16
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef status;										// status indicates whether the reception was successful or not
	uint8_t attempts = 0;											// 5 attempts
 8003524:	2300      	movs	r3, #0
 8003526:	73fb      	strb	r3, [r7, #15]

	while(attempts < 5) {
 8003528:	e010      	b.n	800354c <stop_timer+0x30>
		status = HAL_TIM_Base_Stop_IT(htim);
 800352a:	6878      	ldr	r0, [r7, #4]
 800352c:	f004 fb1c 	bl	8007b68 <HAL_TIM_Base_Stop_IT>
 8003530:	4603      	mov	r3, r0
 8003532:	73bb      	strb	r3, [r7, #14]

		if(status == HAL_OK) { attempts = 10; }
 8003534:	7bbb      	ldrb	r3, [r7, #14]
 8003536:	2b00      	cmp	r3, #0
 8003538:	d102      	bne.n	8003540 <stop_timer+0x24>
 800353a:	230a      	movs	r3, #10
 800353c:	73fb      	strb	r3, [r7, #15]
 800353e:	e005      	b.n	800354c <stop_timer+0x30>

		else {
			attempts++;
 8003540:	7bfb      	ldrb	r3, [r7, #15]
 8003542:	3301      	adds	r3, #1
 8003544:	73fb      	strb	r3, [r7, #15]
			wait(1);
 8003546:	2001      	movs	r0, #1
 8003548:	f7ff ff82 	bl	8003450 <wait>
	while(attempts < 5) {
 800354c:	7bfb      	ldrb	r3, [r7, #15]
 800354e:	2b04      	cmp	r3, #4
 8003550:	d9eb      	bls.n	800352a <stop_timer+0xe>
		}
	}
	if(attempts == 10) {
 8003552:	7bfb      	ldrb	r3, [r7, #15]
 8003554:	2b0a      	cmp	r3, #10
 8003556:	d107      	bne.n	8003568 <stop_timer+0x4c>
		__HAL_TIM_SET_COUNTER(htim, 0);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	2200      	movs	r2, #0
 800355e:	625a      	str	r2, [r3, #36]	@ 0x24
		Counter = 0;
 8003560:	4b19      	ldr	r3, [pc, #100]	@ (80035c8 <stop_timer+0xac>)
 8003562:	2200      	movs	r2, #0
 8003564:	601a      	str	r2, [r3, #0]
			  pull_low(GPIOC, GPIO_PIN_7);
			  wait(250);
			  // ADD CAN MESSAGE SPAM
		}
	}
}
 8003566:	e02c      	b.n	80035c2 <stop_timer+0xa6>
			  pull_high(GPIOA, GPIO_PIN_8);
 8003568:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800356c:	4817      	ldr	r0, [pc, #92]	@ (80035cc <stop_timer+0xb0>)
 800356e:	f7ff ff5f 	bl	8003430 <pull_high>
			  pull_high(GPIOC, GPIO_PIN_9);
 8003572:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003576:	4816      	ldr	r0, [pc, #88]	@ (80035d0 <stop_timer+0xb4>)
 8003578:	f7ff ff5a 	bl	8003430 <pull_high>
			  pull_high(GPIOC, GPIO_PIN_8);
 800357c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003580:	4813      	ldr	r0, [pc, #76]	@ (80035d0 <stop_timer+0xb4>)
 8003582:	f7ff ff55 	bl	8003430 <pull_high>
			  pull_high(GPIOC, GPIO_PIN_7);
 8003586:	2180      	movs	r1, #128	@ 0x80
 8003588:	4811      	ldr	r0, [pc, #68]	@ (80035d0 <stop_timer+0xb4>)
 800358a:	f7ff ff51 	bl	8003430 <pull_high>
			  wait(250);
 800358e:	20fa      	movs	r0, #250	@ 0xfa
 8003590:	f7ff ff5e 	bl	8003450 <wait>
			  pull_low(GPIOA, GPIO_PIN_8);
 8003594:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003598:	480c      	ldr	r0, [pc, #48]	@ (80035cc <stop_timer+0xb0>)
 800359a:	f7ff ff39 	bl	8003410 <pull_low>
			  pull_low(GPIOC, GPIO_PIN_9);
 800359e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80035a2:	480b      	ldr	r0, [pc, #44]	@ (80035d0 <stop_timer+0xb4>)
 80035a4:	f7ff ff34 	bl	8003410 <pull_low>
			  pull_low(GPIOC, GPIO_PIN_8);
 80035a8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80035ac:	4808      	ldr	r0, [pc, #32]	@ (80035d0 <stop_timer+0xb4>)
 80035ae:	f7ff ff2f 	bl	8003410 <pull_low>
			  pull_low(GPIOC, GPIO_PIN_7);
 80035b2:	2180      	movs	r1, #128	@ 0x80
 80035b4:	4806      	ldr	r0, [pc, #24]	@ (80035d0 <stop_timer+0xb4>)
 80035b6:	f7ff ff2b 	bl	8003410 <pull_low>
			  wait(250);
 80035ba:	20fa      	movs	r0, #250	@ 0xfa
 80035bc:	f7ff ff48 	bl	8003450 <wait>
			  pull_high(GPIOA, GPIO_PIN_8);
 80035c0:	e7d2      	b.n	8003568 <stop_timer+0x4c>
}
 80035c2:	3710      	adds	r7, #16
 80035c4:	46bd      	mov	sp, r7
 80035c6:	bd80      	pop	{r7, pc}
 80035c8:	200003f0 	.word	0x200003f0
 80035cc:	40020000 	.word	0x40020000
 80035d0:	40020800 	.word	0x40020800
 80035d4:	00000000 	.word	0x00000000

080035d8 <read_thermistors>:
#include "torch_temperature.h"
#include "torch_stm32.h"
#include <math.h>

void read_thermistors(float *thermistorArray_ptr)
{
 80035d8:	b590      	push	{r4, r7, lr}
 80035da:	b0a3      	sub	sp, #140	@ 0x8c
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
	uint16_t ADCSum;

	//HAL_ADC_Start(&hadc1);
	// ADD MUX ENABLE ON FINAL BOARD

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
 80035e0:	2200      	movs	r2, #0
 80035e2:	2108      	movs	r1, #8
 80035e4:	48c4      	ldr	r0, [pc, #784]	@ (80038f8 <read_thermistors+0x320>)
 80035e6:	f002 ffe1 	bl	80065ac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
 80035ea:	2200      	movs	r2, #0
 80035ec:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80035f0:	48c2      	ldr	r0, [pc, #776]	@ (80038fc <read_thermistors+0x324>)
 80035f2:	f002 ffdb 	bl	80065ac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 80035f6:	2200      	movs	r2, #0
 80035f8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80035fc:	48c0      	ldr	r0, [pc, #768]	@ (8003900 <read_thermistors+0x328>)
 80035fe:	f002 ffd5 	bl	80065ac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 8003602:	2200      	movs	r2, #0
 8003604:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003608:	48bd      	ldr	r0, [pc, #756]	@ (8003900 <read_thermistors+0x328>)
 800360a:	f002 ffcf 	bl	80065ac <HAL_GPIO_WritePin>
	HAL_Delay(1);
 800360e:	2001      	movs	r0, #1
 8003610:	f001 fa36 	bl	8004a80 <HAL_Delay>
	ADCSum = 0;
 8003614:	2300      	movs	r3, #0
 8003616:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
	for (uint8_t i = 0; i < FILTER_LEN; i++) {
 800361a:	2300      	movs	r3, #0
 800361c:	f887 3085 	strb.w	r3, [r7, #133]	@ 0x85
 8003620:	e019      	b.n	8003656 <read_thermistors+0x7e>
		HAL_ADC_Start(&hadc1);
 8003622:	48b8      	ldr	r0, [pc, #736]	@ (8003904 <read_thermistors+0x32c>)
 8003624:	f001 fa94 	bl	8004b50 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8003628:	f04f 31ff 	mov.w	r1, #4294967295
 800362c:	48b5      	ldr	r0, [pc, #724]	@ (8003904 <read_thermistors+0x32c>)
 800362e:	f001 fb94 	bl	8004d5a <HAL_ADC_PollForConversion>
		ADCSum += HAL_ADC_GetValue(&hadc1);
 8003632:	48b4      	ldr	r0, [pc, #720]	@ (8003904 <read_thermistors+0x32c>)
 8003634:	f001 fc1c 	bl	8004e70 <HAL_ADC_GetValue>
 8003638:	4603      	mov	r3, r0
 800363a:	b29a      	uxth	r2, r3
 800363c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003640:	4413      	add	r3, r2
 8003642:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
		HAL_ADC_Stop(&hadc1);
 8003646:	48af      	ldr	r0, [pc, #700]	@ (8003904 <read_thermistors+0x32c>)
 8003648:	f001 fb54 	bl	8004cf4 <HAL_ADC_Stop>
	for (uint8_t i = 0; i < FILTER_LEN; i++) {
 800364c:	f897 3085 	ldrb.w	r3, [r7, #133]	@ 0x85
 8003650:	3301      	adds	r3, #1
 8003652:	f887 3085 	strb.w	r3, [r7, #133]	@ 0x85
 8003656:	f897 3085 	ldrb.w	r3, [r7, #133]	@ 0x85
 800365a:	2b09      	cmp	r3, #9
 800365c:	d9e1      	bls.n	8003622 <read_thermistors+0x4a>
	}
	thermistorRawADC[0] = ADCSum / FILTER_LEN;
 800365e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003662:	4aa9      	ldr	r2, [pc, #676]	@ (8003908 <read_thermistors+0x330>)
 8003664:	fba2 2303 	umull	r2, r3, r2, r3
 8003668:	08db      	lsrs	r3, r3, #3
 800366a:	b29b      	uxth	r3, r3
 800366c:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_SET);
 8003670:	2201      	movs	r2, #1
 8003672:	2108      	movs	r1, #8
 8003674:	48a0      	ldr	r0, [pc, #640]	@ (80038f8 <read_thermistors+0x320>)
 8003676:	f002 ff99 	bl	80065ac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
 800367a:	2200      	movs	r2, #0
 800367c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8003680:	489e      	ldr	r0, [pc, #632]	@ (80038fc <read_thermistors+0x324>)
 8003682:	f002 ff93 	bl	80065ac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 8003686:	2200      	movs	r2, #0
 8003688:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800368c:	489c      	ldr	r0, [pc, #624]	@ (8003900 <read_thermistors+0x328>)
 800368e:	f002 ff8d 	bl	80065ac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 8003692:	2200      	movs	r2, #0
 8003694:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003698:	4899      	ldr	r0, [pc, #612]	@ (8003900 <read_thermistors+0x328>)
 800369a:	f002 ff87 	bl	80065ac <HAL_GPIO_WritePin>
	HAL_Delay(1);
 800369e:	2001      	movs	r0, #1
 80036a0:	f001 f9ee 	bl	8004a80 <HAL_Delay>
	ADCSum = 0;
 80036a4:	2300      	movs	r3, #0
 80036a6:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
	for (uint8_t i = 0; i < FILTER_LEN; i++) {
 80036aa:	2300      	movs	r3, #0
 80036ac:	f887 3084 	strb.w	r3, [r7, #132]	@ 0x84
 80036b0:	e019      	b.n	80036e6 <read_thermistors+0x10e>
		HAL_ADC_Start(&hadc1);
 80036b2:	4894      	ldr	r0, [pc, #592]	@ (8003904 <read_thermistors+0x32c>)
 80036b4:	f001 fa4c 	bl	8004b50 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 80036b8:	f04f 31ff 	mov.w	r1, #4294967295
 80036bc:	4891      	ldr	r0, [pc, #580]	@ (8003904 <read_thermistors+0x32c>)
 80036be:	f001 fb4c 	bl	8004d5a <HAL_ADC_PollForConversion>
		ADCSum += HAL_ADC_GetValue(&hadc1);
 80036c2:	4890      	ldr	r0, [pc, #576]	@ (8003904 <read_thermistors+0x32c>)
 80036c4:	f001 fbd4 	bl	8004e70 <HAL_ADC_GetValue>
 80036c8:	4603      	mov	r3, r0
 80036ca:	b29a      	uxth	r2, r3
 80036cc:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80036d0:	4413      	add	r3, r2
 80036d2:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
		HAL_ADC_Stop(&hadc1);
 80036d6:	488b      	ldr	r0, [pc, #556]	@ (8003904 <read_thermistors+0x32c>)
 80036d8:	f001 fb0c 	bl	8004cf4 <HAL_ADC_Stop>
	for (uint8_t i = 0; i < FILTER_LEN; i++) {
 80036dc:	f897 3084 	ldrb.w	r3, [r7, #132]	@ 0x84
 80036e0:	3301      	adds	r3, #1
 80036e2:	f887 3084 	strb.w	r3, [r7, #132]	@ 0x84
 80036e6:	f897 3084 	ldrb.w	r3, [r7, #132]	@ 0x84
 80036ea:	2b09      	cmp	r3, #9
 80036ec:	d9e1      	bls.n	80036b2 <read_thermistors+0xda>
	}
	thermistorRawADC[1] = ADCSum / FILTER_LEN;
 80036ee:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80036f2:	4a85      	ldr	r2, [pc, #532]	@ (8003908 <read_thermistors+0x330>)
 80036f4:	fba2 2303 	umull	r2, r3, r2, r3
 80036f8:	08db      	lsrs	r3, r3, #3
 80036fa:	b29b      	uxth	r3, r3
 80036fc:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
 8003700:	2200      	movs	r2, #0
 8003702:	2108      	movs	r1, #8
 8003704:	487c      	ldr	r0, [pc, #496]	@ (80038f8 <read_thermistors+0x320>)
 8003706:	f002 ff51 	bl	80065ac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_SET);
 800370a:	2201      	movs	r2, #1
 800370c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8003710:	487a      	ldr	r0, [pc, #488]	@ (80038fc <read_thermistors+0x324>)
 8003712:	f002 ff4b 	bl	80065ac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 8003716:	2200      	movs	r2, #0
 8003718:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800371c:	4878      	ldr	r0, [pc, #480]	@ (8003900 <read_thermistors+0x328>)
 800371e:	f002 ff45 	bl	80065ac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 8003722:	2200      	movs	r2, #0
 8003724:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003728:	4875      	ldr	r0, [pc, #468]	@ (8003900 <read_thermistors+0x328>)
 800372a:	f002 ff3f 	bl	80065ac <HAL_GPIO_WritePin>
	HAL_Delay(1);
 800372e:	2001      	movs	r0, #1
 8003730:	f001 f9a6 	bl	8004a80 <HAL_Delay>
	ADCSum = 0;
 8003734:	2300      	movs	r3, #0
 8003736:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
	for (uint8_t i = 0; i < FILTER_LEN; i++) {
 800373a:	2300      	movs	r3, #0
 800373c:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
 8003740:	e019      	b.n	8003776 <read_thermistors+0x19e>
		HAL_ADC_Start(&hadc1);
 8003742:	4870      	ldr	r0, [pc, #448]	@ (8003904 <read_thermistors+0x32c>)
 8003744:	f001 fa04 	bl	8004b50 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8003748:	f04f 31ff 	mov.w	r1, #4294967295
 800374c:	486d      	ldr	r0, [pc, #436]	@ (8003904 <read_thermistors+0x32c>)
 800374e:	f001 fb04 	bl	8004d5a <HAL_ADC_PollForConversion>
		ADCSum += HAL_ADC_GetValue(&hadc1);
 8003752:	486c      	ldr	r0, [pc, #432]	@ (8003904 <read_thermistors+0x32c>)
 8003754:	f001 fb8c 	bl	8004e70 <HAL_ADC_GetValue>
 8003758:	4603      	mov	r3, r0
 800375a:	b29a      	uxth	r2, r3
 800375c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003760:	4413      	add	r3, r2
 8003762:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
		HAL_ADC_Stop(&hadc1);
 8003766:	4867      	ldr	r0, [pc, #412]	@ (8003904 <read_thermistors+0x32c>)
 8003768:	f001 fac4 	bl	8004cf4 <HAL_ADC_Stop>
	for (uint8_t i = 0; i < FILTER_LEN; i++) {
 800376c:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 8003770:	3301      	adds	r3, #1
 8003772:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
 8003776:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 800377a:	2b09      	cmp	r3, #9
 800377c:	d9e1      	bls.n	8003742 <read_thermistors+0x16a>
	}
	thermistorRawADC[2] = ADCSum / FILTER_LEN;
 800377e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003782:	4a61      	ldr	r2, [pc, #388]	@ (8003908 <read_thermistors+0x330>)
 8003784:	fba2 2303 	umull	r2, r3, r2, r3
 8003788:	08db      	lsrs	r3, r3, #3
 800378a:	b29b      	uxth	r3, r3
 800378c:	f8a7 3054 	strh.w	r3, [r7, #84]	@ 0x54

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_SET);
 8003790:	2201      	movs	r2, #1
 8003792:	2108      	movs	r1, #8
 8003794:	4858      	ldr	r0, [pc, #352]	@ (80038f8 <read_thermistors+0x320>)
 8003796:	f002 ff09 	bl	80065ac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_SET);
 800379a:	2201      	movs	r2, #1
 800379c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80037a0:	4856      	ldr	r0, [pc, #344]	@ (80038fc <read_thermistors+0x324>)
 80037a2:	f002 ff03 	bl	80065ac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 80037a6:	2200      	movs	r2, #0
 80037a8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80037ac:	4854      	ldr	r0, [pc, #336]	@ (8003900 <read_thermistors+0x328>)
 80037ae:	f002 fefd 	bl	80065ac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 80037b2:	2200      	movs	r2, #0
 80037b4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80037b8:	4851      	ldr	r0, [pc, #324]	@ (8003900 <read_thermistors+0x328>)
 80037ba:	f002 fef7 	bl	80065ac <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80037be:	2001      	movs	r0, #1
 80037c0:	f001 f95e 	bl	8004a80 <HAL_Delay>
	ADCSum = 0;
 80037c4:	2300      	movs	r3, #0
 80037c6:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
	for (uint8_t i = 0; i < FILTER_LEN; i++) {
 80037ca:	2300      	movs	r3, #0
 80037cc:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
 80037d0:	e019      	b.n	8003806 <read_thermistors+0x22e>
		HAL_ADC_Start(&hadc1);
 80037d2:	484c      	ldr	r0, [pc, #304]	@ (8003904 <read_thermistors+0x32c>)
 80037d4:	f001 f9bc 	bl	8004b50 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 80037d8:	f04f 31ff 	mov.w	r1, #4294967295
 80037dc:	4849      	ldr	r0, [pc, #292]	@ (8003904 <read_thermistors+0x32c>)
 80037de:	f001 fabc 	bl	8004d5a <HAL_ADC_PollForConversion>
		ADCSum += HAL_ADC_GetValue(&hadc1);
 80037e2:	4848      	ldr	r0, [pc, #288]	@ (8003904 <read_thermistors+0x32c>)
 80037e4:	f001 fb44 	bl	8004e70 <HAL_ADC_GetValue>
 80037e8:	4603      	mov	r3, r0
 80037ea:	b29a      	uxth	r2, r3
 80037ec:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80037f0:	4413      	add	r3, r2
 80037f2:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
		HAL_ADC_Stop(&hadc1);
 80037f6:	4843      	ldr	r0, [pc, #268]	@ (8003904 <read_thermistors+0x32c>)
 80037f8:	f001 fa7c 	bl	8004cf4 <HAL_ADC_Stop>
	for (uint8_t i = 0; i < FILTER_LEN; i++) {
 80037fc:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
 8003800:	3301      	adds	r3, #1
 8003802:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
 8003806:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
 800380a:	2b09      	cmp	r3, #9
 800380c:	d9e1      	bls.n	80037d2 <read_thermistors+0x1fa>
	}
	thermistorRawADC[3] = ADCSum / FILTER_LEN;
 800380e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003812:	4a3d      	ldr	r2, [pc, #244]	@ (8003908 <read_thermistors+0x330>)
 8003814:	fba2 2303 	umull	r2, r3, r2, r3
 8003818:	08db      	lsrs	r3, r3, #3
 800381a:	b29b      	uxth	r3, r3
 800381c:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
 8003820:	2200      	movs	r2, #0
 8003822:	2108      	movs	r1, #8
 8003824:	4834      	ldr	r0, [pc, #208]	@ (80038f8 <read_thermistors+0x320>)
 8003826:	f002 fec1 	bl	80065ac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
 800382a:	2200      	movs	r2, #0
 800382c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8003830:	4832      	ldr	r0, [pc, #200]	@ (80038fc <read_thermistors+0x324>)
 8003832:	f002 febb 	bl	80065ac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 8003836:	2201      	movs	r2, #1
 8003838:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800383c:	4830      	ldr	r0, [pc, #192]	@ (8003900 <read_thermistors+0x328>)
 800383e:	f002 feb5 	bl	80065ac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 8003842:	2200      	movs	r2, #0
 8003844:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003848:	482d      	ldr	r0, [pc, #180]	@ (8003900 <read_thermistors+0x328>)
 800384a:	f002 feaf 	bl	80065ac <HAL_GPIO_WritePin>
	HAL_Delay(1);
 800384e:	2001      	movs	r0, #1
 8003850:	f001 f916 	bl	8004a80 <HAL_Delay>
	ADCSum = 0;
 8003854:	2300      	movs	r3, #0
 8003856:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
	for (uint8_t i = 0; i <= 10; i++) {
 800385a:	2300      	movs	r3, #0
 800385c:	f887 3081 	strb.w	r3, [r7, #129]	@ 0x81
 8003860:	e019      	b.n	8003896 <read_thermistors+0x2be>
		HAL_ADC_Start(&hadc1);
 8003862:	4828      	ldr	r0, [pc, #160]	@ (8003904 <read_thermistors+0x32c>)
 8003864:	f001 f974 	bl	8004b50 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8003868:	f04f 31ff 	mov.w	r1, #4294967295
 800386c:	4825      	ldr	r0, [pc, #148]	@ (8003904 <read_thermistors+0x32c>)
 800386e:	f001 fa74 	bl	8004d5a <HAL_ADC_PollForConversion>
		ADCSum += HAL_ADC_GetValue(&hadc1);
 8003872:	4824      	ldr	r0, [pc, #144]	@ (8003904 <read_thermistors+0x32c>)
 8003874:	f001 fafc 	bl	8004e70 <HAL_ADC_GetValue>
 8003878:	4603      	mov	r3, r0
 800387a:	b29a      	uxth	r2, r3
 800387c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003880:	4413      	add	r3, r2
 8003882:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
		HAL_ADC_Stop(&hadc1);
 8003886:	481f      	ldr	r0, [pc, #124]	@ (8003904 <read_thermistors+0x32c>)
 8003888:	f001 fa34 	bl	8004cf4 <HAL_ADC_Stop>
	for (uint8_t i = 0; i <= 10; i++) {
 800388c:	f897 3081 	ldrb.w	r3, [r7, #129]	@ 0x81
 8003890:	3301      	adds	r3, #1
 8003892:	f887 3081 	strb.w	r3, [r7, #129]	@ 0x81
 8003896:	f897 3081 	ldrb.w	r3, [r7, #129]	@ 0x81
 800389a:	2b0a      	cmp	r3, #10
 800389c:	d9e1      	bls.n	8003862 <read_thermistors+0x28a>
	}
	thermistorRawADC[4] = (ADCSum / FILTER_LEN) - 200;
 800389e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80038a2:	4a19      	ldr	r2, [pc, #100]	@ (8003908 <read_thermistors+0x330>)
 80038a4:	fba2 2303 	umull	r2, r3, r2, r3
 80038a8:	08db      	lsrs	r3, r3, #3
 80038aa:	b29b      	uxth	r3, r3
 80038ac:	3bc8      	subs	r3, #200	@ 0xc8
 80038ae:	b29b      	uxth	r3, r3
 80038b0:	f8a7 3058 	strh.w	r3, [r7, #88]	@ 0x58

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_SET);
 80038b4:	2201      	movs	r2, #1
 80038b6:	2108      	movs	r1, #8
 80038b8:	480f      	ldr	r0, [pc, #60]	@ (80038f8 <read_thermistors+0x320>)
 80038ba:	f002 fe77 	bl	80065ac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
 80038be:	2200      	movs	r2, #0
 80038c0:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80038c4:	480d      	ldr	r0, [pc, #52]	@ (80038fc <read_thermistors+0x324>)
 80038c6:	f002 fe71 	bl	80065ac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 80038ca:	2201      	movs	r2, #1
 80038cc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80038d0:	480b      	ldr	r0, [pc, #44]	@ (8003900 <read_thermistors+0x328>)
 80038d2:	f002 fe6b 	bl	80065ac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 80038d6:	2200      	movs	r2, #0
 80038d8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80038dc:	4808      	ldr	r0, [pc, #32]	@ (8003900 <read_thermistors+0x328>)
 80038de:	f002 fe65 	bl	80065ac <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80038e2:	2001      	movs	r0, #1
 80038e4:	f001 f8cc 	bl	8004a80 <HAL_Delay>
	ADCSum = 0;
 80038e8:	2300      	movs	r3, #0
 80038ea:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
	for (uint8_t i = 0; i < FILTER_LEN; i++) {
 80038ee:	2300      	movs	r3, #0
 80038f0:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
 80038f4:	e024      	b.n	8003940 <read_thermistors+0x368>
 80038f6:	bf00      	nop
 80038f8:	40020000 	.word	0x40020000
 80038fc:	40020800 	.word	0x40020800
 8003900:	40020400 	.word	0x40020400
 8003904:	2000007c 	.word	0x2000007c
 8003908:	cccccccd 	.word	0xcccccccd
		HAL_ADC_Start(&hadc1);
 800390c:	48b4      	ldr	r0, [pc, #720]	@ (8003be0 <read_thermistors+0x608>)
 800390e:	f001 f91f 	bl	8004b50 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8003912:	f04f 31ff 	mov.w	r1, #4294967295
 8003916:	48b2      	ldr	r0, [pc, #712]	@ (8003be0 <read_thermistors+0x608>)
 8003918:	f001 fa1f 	bl	8004d5a <HAL_ADC_PollForConversion>
		ADCSum += HAL_ADC_GetValue(&hadc1);
 800391c:	48b0      	ldr	r0, [pc, #704]	@ (8003be0 <read_thermistors+0x608>)
 800391e:	f001 faa7 	bl	8004e70 <HAL_ADC_GetValue>
 8003922:	4603      	mov	r3, r0
 8003924:	b29a      	uxth	r2, r3
 8003926:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800392a:	4413      	add	r3, r2
 800392c:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
		HAL_ADC_Stop(&hadc1);
 8003930:	48ab      	ldr	r0, [pc, #684]	@ (8003be0 <read_thermistors+0x608>)
 8003932:	f001 f9df 	bl	8004cf4 <HAL_ADC_Stop>
	for (uint8_t i = 0; i < FILTER_LEN; i++) {
 8003936:	f897 3080 	ldrb.w	r3, [r7, #128]	@ 0x80
 800393a:	3301      	adds	r3, #1
 800393c:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
 8003940:	f897 3080 	ldrb.w	r3, [r7, #128]	@ 0x80
 8003944:	2b09      	cmp	r3, #9
 8003946:	d9e1      	bls.n	800390c <read_thermistors+0x334>
	}
	thermistorRawADC[5] = ADCSum / FILTER_LEN;
 8003948:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800394c:	4aa5      	ldr	r2, [pc, #660]	@ (8003be4 <read_thermistors+0x60c>)
 800394e:	fba2 2303 	umull	r2, r3, r2, r3
 8003952:	08db      	lsrs	r3, r3, #3
 8003954:	b29b      	uxth	r3, r3
 8003956:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
 800395a:	2200      	movs	r2, #0
 800395c:	2108      	movs	r1, #8
 800395e:	48a2      	ldr	r0, [pc, #648]	@ (8003be8 <read_thermistors+0x610>)
 8003960:	f002 fe24 	bl	80065ac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_SET);
 8003964:	2201      	movs	r2, #1
 8003966:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800396a:	48a0      	ldr	r0, [pc, #640]	@ (8003bec <read_thermistors+0x614>)
 800396c:	f002 fe1e 	bl	80065ac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 8003970:	2201      	movs	r2, #1
 8003972:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8003976:	489e      	ldr	r0, [pc, #632]	@ (8003bf0 <read_thermistors+0x618>)
 8003978:	f002 fe18 	bl	80065ac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 800397c:	2200      	movs	r2, #0
 800397e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003982:	489b      	ldr	r0, [pc, #620]	@ (8003bf0 <read_thermistors+0x618>)
 8003984:	f002 fe12 	bl	80065ac <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8003988:	2001      	movs	r0, #1
 800398a:	f001 f879 	bl	8004a80 <HAL_Delay>
	ADCSum = 0;
 800398e:	2300      	movs	r3, #0
 8003990:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
	for (uint8_t i = 0; i <= 10; i++) {
 8003994:	2300      	movs	r3, #0
 8003996:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 800399a:	e019      	b.n	80039d0 <read_thermistors+0x3f8>
		HAL_ADC_Start(&hadc1);
 800399c:	4890      	ldr	r0, [pc, #576]	@ (8003be0 <read_thermistors+0x608>)
 800399e:	f001 f8d7 	bl	8004b50 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 80039a2:	f04f 31ff 	mov.w	r1, #4294967295
 80039a6:	488e      	ldr	r0, [pc, #568]	@ (8003be0 <read_thermistors+0x608>)
 80039a8:	f001 f9d7 	bl	8004d5a <HAL_ADC_PollForConversion>
		ADCSum += HAL_ADC_GetValue(&hadc1);
 80039ac:	488c      	ldr	r0, [pc, #560]	@ (8003be0 <read_thermistors+0x608>)
 80039ae:	f001 fa5f 	bl	8004e70 <HAL_ADC_GetValue>
 80039b2:	4603      	mov	r3, r0
 80039b4:	b29a      	uxth	r2, r3
 80039b6:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80039ba:	4413      	add	r3, r2
 80039bc:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
		HAL_ADC_Stop(&hadc1);
 80039c0:	4887      	ldr	r0, [pc, #540]	@ (8003be0 <read_thermistors+0x608>)
 80039c2:	f001 f997 	bl	8004cf4 <HAL_ADC_Stop>
	for (uint8_t i = 0; i <= 10; i++) {
 80039c6:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 80039ca:	3301      	adds	r3, #1
 80039cc:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 80039d0:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 80039d4:	2b0a      	cmp	r3, #10
 80039d6:	d9e1      	bls.n	800399c <read_thermistors+0x3c4>
	}
	thermistorRawADC[6] = (ADCSum / FILTER_LEN) - 200;
 80039d8:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80039dc:	4a81      	ldr	r2, [pc, #516]	@ (8003be4 <read_thermistors+0x60c>)
 80039de:	fba2 2303 	umull	r2, r3, r2, r3
 80039e2:	08db      	lsrs	r3, r3, #3
 80039e4:	b29b      	uxth	r3, r3
 80039e6:	3bc8      	subs	r3, #200	@ 0xc8
 80039e8:	b29b      	uxth	r3, r3
 80039ea:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_SET);
 80039ee:	2201      	movs	r2, #1
 80039f0:	2108      	movs	r1, #8
 80039f2:	487d      	ldr	r0, [pc, #500]	@ (8003be8 <read_thermistors+0x610>)
 80039f4:	f002 fdda 	bl	80065ac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_SET);
 80039f8:	2201      	movs	r2, #1
 80039fa:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80039fe:	487b      	ldr	r0, [pc, #492]	@ (8003bec <read_thermistors+0x614>)
 8003a00:	f002 fdd4 	bl	80065ac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 8003a04:	2201      	movs	r2, #1
 8003a06:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8003a0a:	4879      	ldr	r0, [pc, #484]	@ (8003bf0 <read_thermistors+0x618>)
 8003a0c:	f002 fdce 	bl	80065ac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 8003a10:	2200      	movs	r2, #0
 8003a12:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003a16:	4876      	ldr	r0, [pc, #472]	@ (8003bf0 <read_thermistors+0x618>)
 8003a18:	f002 fdc8 	bl	80065ac <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8003a1c:	2001      	movs	r0, #1
 8003a1e:	f001 f82f 	bl	8004a80 <HAL_Delay>
	ADCSum = 0;
 8003a22:	2300      	movs	r3, #0
 8003a24:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
	for (uint8_t i = 0; i < FILTER_LEN; i++) {
 8003a28:	2300      	movs	r3, #0
 8003a2a:	f887 307e 	strb.w	r3, [r7, #126]	@ 0x7e
 8003a2e:	e019      	b.n	8003a64 <read_thermistors+0x48c>
		HAL_ADC_Start(&hadc1);
 8003a30:	486b      	ldr	r0, [pc, #428]	@ (8003be0 <read_thermistors+0x608>)
 8003a32:	f001 f88d 	bl	8004b50 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8003a36:	f04f 31ff 	mov.w	r1, #4294967295
 8003a3a:	4869      	ldr	r0, [pc, #420]	@ (8003be0 <read_thermistors+0x608>)
 8003a3c:	f001 f98d 	bl	8004d5a <HAL_ADC_PollForConversion>
		ADCSum += HAL_ADC_GetValue(&hadc1);
 8003a40:	4867      	ldr	r0, [pc, #412]	@ (8003be0 <read_thermistors+0x608>)
 8003a42:	f001 fa15 	bl	8004e70 <HAL_ADC_GetValue>
 8003a46:	4603      	mov	r3, r0
 8003a48:	b29a      	uxth	r2, r3
 8003a4a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003a4e:	4413      	add	r3, r2
 8003a50:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
		HAL_ADC_Stop(&hadc1);
 8003a54:	4862      	ldr	r0, [pc, #392]	@ (8003be0 <read_thermistors+0x608>)
 8003a56:	f001 f94d 	bl	8004cf4 <HAL_ADC_Stop>
	for (uint8_t i = 0; i < FILTER_LEN; i++) {
 8003a5a:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 8003a5e:	3301      	adds	r3, #1
 8003a60:	f887 307e 	strb.w	r3, [r7, #126]	@ 0x7e
 8003a64:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 8003a68:	2b09      	cmp	r3, #9
 8003a6a:	d9e1      	bls.n	8003a30 <read_thermistors+0x458>
	}
	thermistorRawADC[7] = ADCSum / FILTER_LEN;
 8003a6c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003a70:	4a5c      	ldr	r2, [pc, #368]	@ (8003be4 <read_thermistors+0x60c>)
 8003a72:	fba2 2303 	umull	r2, r3, r2, r3
 8003a76:	08db      	lsrs	r3, r3, #3
 8003a78:	b29b      	uxth	r3, r3
 8003a7a:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
 8003a7e:	2200      	movs	r2, #0
 8003a80:	2108      	movs	r1, #8
 8003a82:	4859      	ldr	r0, [pc, #356]	@ (8003be8 <read_thermistors+0x610>)
 8003a84:	f002 fd92 	bl	80065ac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
 8003a88:	2200      	movs	r2, #0
 8003a8a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8003a8e:	4857      	ldr	r0, [pc, #348]	@ (8003bec <read_thermistors+0x614>)
 8003a90:	f002 fd8c 	bl	80065ac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 8003a94:	2200      	movs	r2, #0
 8003a96:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8003a9a:	4855      	ldr	r0, [pc, #340]	@ (8003bf0 <read_thermistors+0x618>)
 8003a9c:	f002 fd86 	bl	80065ac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 8003aa0:	2201      	movs	r2, #1
 8003aa2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003aa6:	4852      	ldr	r0, [pc, #328]	@ (8003bf0 <read_thermistors+0x618>)
 8003aa8:	f002 fd80 	bl	80065ac <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8003aac:	2001      	movs	r0, #1
 8003aae:	f000 ffe7 	bl	8004a80 <HAL_Delay>
	ADCSum = 0;
 8003ab2:	2300      	movs	r3, #0
 8003ab4:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
	for (uint8_t i = 0; i < FILTER_LEN; i++) {
 8003ab8:	2300      	movs	r3, #0
 8003aba:	f887 307d 	strb.w	r3, [r7, #125]	@ 0x7d
 8003abe:	e019      	b.n	8003af4 <read_thermistors+0x51c>
		HAL_ADC_Start(&hadc1);
 8003ac0:	4847      	ldr	r0, [pc, #284]	@ (8003be0 <read_thermistors+0x608>)
 8003ac2:	f001 f845 	bl	8004b50 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8003ac6:	f04f 31ff 	mov.w	r1, #4294967295
 8003aca:	4845      	ldr	r0, [pc, #276]	@ (8003be0 <read_thermistors+0x608>)
 8003acc:	f001 f945 	bl	8004d5a <HAL_ADC_PollForConversion>
		ADCSum += HAL_ADC_GetValue(&hadc1);
 8003ad0:	4843      	ldr	r0, [pc, #268]	@ (8003be0 <read_thermistors+0x608>)
 8003ad2:	f001 f9cd 	bl	8004e70 <HAL_ADC_GetValue>
 8003ad6:	4603      	mov	r3, r0
 8003ad8:	b29a      	uxth	r2, r3
 8003ada:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003ade:	4413      	add	r3, r2
 8003ae0:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
		HAL_ADC_Stop(&hadc1);
 8003ae4:	483e      	ldr	r0, [pc, #248]	@ (8003be0 <read_thermistors+0x608>)
 8003ae6:	f001 f905 	bl	8004cf4 <HAL_ADC_Stop>
	for (uint8_t i = 0; i < FILTER_LEN; i++) {
 8003aea:	f897 307d 	ldrb.w	r3, [r7, #125]	@ 0x7d
 8003aee:	3301      	adds	r3, #1
 8003af0:	f887 307d 	strb.w	r3, [r7, #125]	@ 0x7d
 8003af4:	f897 307d 	ldrb.w	r3, [r7, #125]	@ 0x7d
 8003af8:	2b09      	cmp	r3, #9
 8003afa:	d9e1      	bls.n	8003ac0 <read_thermistors+0x4e8>
	}
	thermistorRawADC[8] = ADCSum / FILTER_LEN;
 8003afc:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003b00:	4a38      	ldr	r2, [pc, #224]	@ (8003be4 <read_thermistors+0x60c>)
 8003b02:	fba2 2303 	umull	r2, r3, r2, r3
 8003b06:	08db      	lsrs	r3, r3, #3
 8003b08:	b29b      	uxth	r3, r3
 8003b0a:	f8a7 3060 	strh.w	r3, [r7, #96]	@ 0x60

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_SET);
 8003b0e:	2201      	movs	r2, #1
 8003b10:	2108      	movs	r1, #8
 8003b12:	4835      	ldr	r0, [pc, #212]	@ (8003be8 <read_thermistors+0x610>)
 8003b14:	f002 fd4a 	bl	80065ac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
 8003b18:	2200      	movs	r2, #0
 8003b1a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8003b1e:	4833      	ldr	r0, [pc, #204]	@ (8003bec <read_thermistors+0x614>)
 8003b20:	f002 fd44 	bl	80065ac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 8003b24:	2200      	movs	r2, #0
 8003b26:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8003b2a:	4831      	ldr	r0, [pc, #196]	@ (8003bf0 <read_thermistors+0x618>)
 8003b2c:	f002 fd3e 	bl	80065ac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 8003b30:	2201      	movs	r2, #1
 8003b32:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003b36:	482e      	ldr	r0, [pc, #184]	@ (8003bf0 <read_thermistors+0x618>)
 8003b38:	f002 fd38 	bl	80065ac <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8003b3c:	2001      	movs	r0, #1
 8003b3e:	f000 ff9f 	bl	8004a80 <HAL_Delay>
	ADCSum = 0;
 8003b42:	2300      	movs	r3, #0
 8003b44:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
	for (uint8_t i = 0; i < FILTER_LEN; i++) {
 8003b48:	2300      	movs	r3, #0
 8003b4a:	f887 307c 	strb.w	r3, [r7, #124]	@ 0x7c
 8003b4e:	e019      	b.n	8003b84 <read_thermistors+0x5ac>
		HAL_ADC_Start(&hadc1);
 8003b50:	4823      	ldr	r0, [pc, #140]	@ (8003be0 <read_thermistors+0x608>)
 8003b52:	f000 fffd 	bl	8004b50 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8003b56:	f04f 31ff 	mov.w	r1, #4294967295
 8003b5a:	4821      	ldr	r0, [pc, #132]	@ (8003be0 <read_thermistors+0x608>)
 8003b5c:	f001 f8fd 	bl	8004d5a <HAL_ADC_PollForConversion>
		ADCSum += HAL_ADC_GetValue(&hadc1);
 8003b60:	481f      	ldr	r0, [pc, #124]	@ (8003be0 <read_thermistors+0x608>)
 8003b62:	f001 f985 	bl	8004e70 <HAL_ADC_GetValue>
 8003b66:	4603      	mov	r3, r0
 8003b68:	b29a      	uxth	r2, r3
 8003b6a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003b6e:	4413      	add	r3, r2
 8003b70:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
		HAL_ADC_Stop(&hadc1);
 8003b74:	481a      	ldr	r0, [pc, #104]	@ (8003be0 <read_thermistors+0x608>)
 8003b76:	f001 f8bd 	bl	8004cf4 <HAL_ADC_Stop>
	for (uint8_t i = 0; i < FILTER_LEN; i++) {
 8003b7a:	f897 307c 	ldrb.w	r3, [r7, #124]	@ 0x7c
 8003b7e:	3301      	adds	r3, #1
 8003b80:	f887 307c 	strb.w	r3, [r7, #124]	@ 0x7c
 8003b84:	f897 307c 	ldrb.w	r3, [r7, #124]	@ 0x7c
 8003b88:	2b09      	cmp	r3, #9
 8003b8a:	d9e1      	bls.n	8003b50 <read_thermistors+0x578>
	}
	thermistorRawADC[9] = ADCSum / FILTER_LEN;
 8003b8c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003b90:	4a14      	ldr	r2, [pc, #80]	@ (8003be4 <read_thermistors+0x60c>)
 8003b92:	fba2 2303 	umull	r2, r3, r2, r3
 8003b96:	08db      	lsrs	r3, r3, #3
 8003b98:	b29b      	uxth	r3, r3
 8003b9a:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	2108      	movs	r1, #8
 8003ba2:	4811      	ldr	r0, [pc, #68]	@ (8003be8 <read_thermistors+0x610>)
 8003ba4:	f002 fd02 	bl	80065ac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_SET);
 8003ba8:	2201      	movs	r2, #1
 8003baa:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8003bae:	480f      	ldr	r0, [pc, #60]	@ (8003bec <read_thermistors+0x614>)
 8003bb0:	f002 fcfc 	bl	80065ac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8003bba:	480d      	ldr	r0, [pc, #52]	@ (8003bf0 <read_thermistors+0x618>)
 8003bbc:	f002 fcf6 	bl	80065ac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 8003bc0:	2201      	movs	r2, #1
 8003bc2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003bc6:	480a      	ldr	r0, [pc, #40]	@ (8003bf0 <read_thermistors+0x618>)
 8003bc8:	f002 fcf0 	bl	80065ac <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8003bcc:	2001      	movs	r0, #1
 8003bce:	f000 ff57 	bl	8004a80 <HAL_Delay>
	ADCSum = 0;
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
	for (uint8_t i = 0; i < FILTER_LEN; i++) {
 8003bd8:	2300      	movs	r3, #0
 8003bda:	f887 307b 	strb.w	r3, [r7, #123]	@ 0x7b
 8003bde:	e023      	b.n	8003c28 <read_thermistors+0x650>
 8003be0:	2000007c 	.word	0x2000007c
 8003be4:	cccccccd 	.word	0xcccccccd
 8003be8:	40020000 	.word	0x40020000
 8003bec:	40020800 	.word	0x40020800
 8003bf0:	40020400 	.word	0x40020400
		HAL_ADC_Start(&hadc1);
 8003bf4:	48d0      	ldr	r0, [pc, #832]	@ (8003f38 <read_thermistors+0x960>)
 8003bf6:	f000 ffab 	bl	8004b50 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8003bfa:	f04f 31ff 	mov.w	r1, #4294967295
 8003bfe:	48ce      	ldr	r0, [pc, #824]	@ (8003f38 <read_thermistors+0x960>)
 8003c00:	f001 f8ab 	bl	8004d5a <HAL_ADC_PollForConversion>
		ADCSum += HAL_ADC_GetValue(&hadc1);
 8003c04:	48cc      	ldr	r0, [pc, #816]	@ (8003f38 <read_thermistors+0x960>)
 8003c06:	f001 f933 	bl	8004e70 <HAL_ADC_GetValue>
 8003c0a:	4603      	mov	r3, r0
 8003c0c:	b29a      	uxth	r2, r3
 8003c0e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003c12:	4413      	add	r3, r2
 8003c14:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
		HAL_ADC_Stop(&hadc1);
 8003c18:	48c7      	ldr	r0, [pc, #796]	@ (8003f38 <read_thermistors+0x960>)
 8003c1a:	f001 f86b 	bl	8004cf4 <HAL_ADC_Stop>
	for (uint8_t i = 0; i < FILTER_LEN; i++) {
 8003c1e:	f897 307b 	ldrb.w	r3, [r7, #123]	@ 0x7b
 8003c22:	3301      	adds	r3, #1
 8003c24:	f887 307b 	strb.w	r3, [r7, #123]	@ 0x7b
 8003c28:	f897 307b 	ldrb.w	r3, [r7, #123]	@ 0x7b
 8003c2c:	2b09      	cmp	r3, #9
 8003c2e:	d9e1      	bls.n	8003bf4 <read_thermistors+0x61c>
	}
	thermistorRawADC[10] = ADCSum / FILTER_LEN;
 8003c30:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003c34:	4ac1      	ldr	r2, [pc, #772]	@ (8003f3c <read_thermistors+0x964>)
 8003c36:	fba2 2303 	umull	r2, r3, r2, r3
 8003c3a:	08db      	lsrs	r3, r3, #3
 8003c3c:	b29b      	uxth	r3, r3
 8003c3e:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_SET);
 8003c42:	2201      	movs	r2, #1
 8003c44:	2108      	movs	r1, #8
 8003c46:	48be      	ldr	r0, [pc, #760]	@ (8003f40 <read_thermistors+0x968>)
 8003c48:	f002 fcb0 	bl	80065ac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_SET);
 8003c4c:	2201      	movs	r2, #1
 8003c4e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8003c52:	48bc      	ldr	r0, [pc, #752]	@ (8003f44 <read_thermistors+0x96c>)
 8003c54:	f002 fcaa 	bl	80065ac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 8003c58:	2200      	movs	r2, #0
 8003c5a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8003c5e:	48ba      	ldr	r0, [pc, #744]	@ (8003f48 <read_thermistors+0x970>)
 8003c60:	f002 fca4 	bl	80065ac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 8003c64:	2201      	movs	r2, #1
 8003c66:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003c6a:	48b7      	ldr	r0, [pc, #732]	@ (8003f48 <read_thermistors+0x970>)
 8003c6c:	f002 fc9e 	bl	80065ac <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8003c70:	2001      	movs	r0, #1
 8003c72:	f000 ff05 	bl	8004a80 <HAL_Delay>
	ADCSum = 0;
 8003c76:	2300      	movs	r3, #0
 8003c78:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
	for (uint8_t i = 0; i < FILTER_LEN; i++) {
 8003c7c:	2300      	movs	r3, #0
 8003c7e:	f887 307a 	strb.w	r3, [r7, #122]	@ 0x7a
 8003c82:	e019      	b.n	8003cb8 <read_thermistors+0x6e0>
		HAL_ADC_Start(&hadc1);
 8003c84:	48ac      	ldr	r0, [pc, #688]	@ (8003f38 <read_thermistors+0x960>)
 8003c86:	f000 ff63 	bl	8004b50 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8003c8a:	f04f 31ff 	mov.w	r1, #4294967295
 8003c8e:	48aa      	ldr	r0, [pc, #680]	@ (8003f38 <read_thermistors+0x960>)
 8003c90:	f001 f863 	bl	8004d5a <HAL_ADC_PollForConversion>
		ADCSum += HAL_ADC_GetValue(&hadc1);
 8003c94:	48a8      	ldr	r0, [pc, #672]	@ (8003f38 <read_thermistors+0x960>)
 8003c96:	f001 f8eb 	bl	8004e70 <HAL_ADC_GetValue>
 8003c9a:	4603      	mov	r3, r0
 8003c9c:	b29a      	uxth	r2, r3
 8003c9e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003ca2:	4413      	add	r3, r2
 8003ca4:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
		HAL_ADC_Stop(&hadc1);
 8003ca8:	48a3      	ldr	r0, [pc, #652]	@ (8003f38 <read_thermistors+0x960>)
 8003caa:	f001 f823 	bl	8004cf4 <HAL_ADC_Stop>
	for (uint8_t i = 0; i < FILTER_LEN; i++) {
 8003cae:	f897 307a 	ldrb.w	r3, [r7, #122]	@ 0x7a
 8003cb2:	3301      	adds	r3, #1
 8003cb4:	f887 307a 	strb.w	r3, [r7, #122]	@ 0x7a
 8003cb8:	f897 307a 	ldrb.w	r3, [r7, #122]	@ 0x7a
 8003cbc:	2b09      	cmp	r3, #9
 8003cbe:	d9e1      	bls.n	8003c84 <read_thermistors+0x6ac>
	}
	thermistorRawADC[11] = ADCSum / FILTER_LEN;
 8003cc0:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003cc4:	4a9d      	ldr	r2, [pc, #628]	@ (8003f3c <read_thermistors+0x964>)
 8003cc6:	fba2 2303 	umull	r2, r3, r2, r3
 8003cca:	08db      	lsrs	r3, r3, #3
 8003ccc:	b29b      	uxth	r3, r3
 8003cce:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
 8003cd2:	2200      	movs	r2, #0
 8003cd4:	2108      	movs	r1, #8
 8003cd6:	489a      	ldr	r0, [pc, #616]	@ (8003f40 <read_thermistors+0x968>)
 8003cd8:	f002 fc68 	bl	80065ac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
 8003cdc:	2200      	movs	r2, #0
 8003cde:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8003ce2:	4898      	ldr	r0, [pc, #608]	@ (8003f44 <read_thermistors+0x96c>)
 8003ce4:	f002 fc62 	bl	80065ac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 8003ce8:	2201      	movs	r2, #1
 8003cea:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8003cee:	4896      	ldr	r0, [pc, #600]	@ (8003f48 <read_thermistors+0x970>)
 8003cf0:	f002 fc5c 	bl	80065ac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 8003cf4:	2201      	movs	r2, #1
 8003cf6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003cfa:	4893      	ldr	r0, [pc, #588]	@ (8003f48 <read_thermistors+0x970>)
 8003cfc:	f002 fc56 	bl	80065ac <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8003d00:	2001      	movs	r0, #1
 8003d02:	f000 febd 	bl	8004a80 <HAL_Delay>
	ADCSum = 0;
 8003d06:	2300      	movs	r3, #0
 8003d08:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
	for (uint8_t i = 0; i < FILTER_LEN; i++) {
 8003d0c:	2300      	movs	r3, #0
 8003d0e:	f887 3079 	strb.w	r3, [r7, #121]	@ 0x79
 8003d12:	e019      	b.n	8003d48 <read_thermistors+0x770>
		HAL_ADC_Start(&hadc1);
 8003d14:	4888      	ldr	r0, [pc, #544]	@ (8003f38 <read_thermistors+0x960>)
 8003d16:	f000 ff1b 	bl	8004b50 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8003d1a:	f04f 31ff 	mov.w	r1, #4294967295
 8003d1e:	4886      	ldr	r0, [pc, #536]	@ (8003f38 <read_thermistors+0x960>)
 8003d20:	f001 f81b 	bl	8004d5a <HAL_ADC_PollForConversion>
		ADCSum += HAL_ADC_GetValue(&hadc1);
 8003d24:	4884      	ldr	r0, [pc, #528]	@ (8003f38 <read_thermistors+0x960>)
 8003d26:	f001 f8a3 	bl	8004e70 <HAL_ADC_GetValue>
 8003d2a:	4603      	mov	r3, r0
 8003d2c:	b29a      	uxth	r2, r3
 8003d2e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003d32:	4413      	add	r3, r2
 8003d34:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
		HAL_ADC_Stop(&hadc1);
 8003d38:	487f      	ldr	r0, [pc, #508]	@ (8003f38 <read_thermistors+0x960>)
 8003d3a:	f000 ffdb 	bl	8004cf4 <HAL_ADC_Stop>
	for (uint8_t i = 0; i < FILTER_LEN; i++) {
 8003d3e:	f897 3079 	ldrb.w	r3, [r7, #121]	@ 0x79
 8003d42:	3301      	adds	r3, #1
 8003d44:	f887 3079 	strb.w	r3, [r7, #121]	@ 0x79
 8003d48:	f897 3079 	ldrb.w	r3, [r7, #121]	@ 0x79
 8003d4c:	2b09      	cmp	r3, #9
 8003d4e:	d9e1      	bls.n	8003d14 <read_thermistors+0x73c>
	}
	thermistorRawADC[12] = ADCSum / FILTER_LEN;
 8003d50:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003d54:	4a79      	ldr	r2, [pc, #484]	@ (8003f3c <read_thermistors+0x964>)
 8003d56:	fba2 2303 	umull	r2, r3, r2, r3
 8003d5a:	08db      	lsrs	r3, r3, #3
 8003d5c:	b29b      	uxth	r3, r3
 8003d5e:	f8a7 3068 	strh.w	r3, [r7, #104]	@ 0x68

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_SET);
 8003d62:	2201      	movs	r2, #1
 8003d64:	2108      	movs	r1, #8
 8003d66:	4876      	ldr	r0, [pc, #472]	@ (8003f40 <read_thermistors+0x968>)
 8003d68:	f002 fc20 	bl	80065ac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
 8003d6c:	2200      	movs	r2, #0
 8003d6e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8003d72:	4874      	ldr	r0, [pc, #464]	@ (8003f44 <read_thermistors+0x96c>)
 8003d74:	f002 fc1a 	bl	80065ac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 8003d78:	2201      	movs	r2, #1
 8003d7a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8003d7e:	4872      	ldr	r0, [pc, #456]	@ (8003f48 <read_thermistors+0x970>)
 8003d80:	f002 fc14 	bl	80065ac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 8003d84:	2201      	movs	r2, #1
 8003d86:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003d8a:	486f      	ldr	r0, [pc, #444]	@ (8003f48 <read_thermistors+0x970>)
 8003d8c:	f002 fc0e 	bl	80065ac <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8003d90:	2001      	movs	r0, #1
 8003d92:	f000 fe75 	bl	8004a80 <HAL_Delay>
	ADCSum = 0;
 8003d96:	2300      	movs	r3, #0
 8003d98:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
	for (uint8_t i = 0; i < FILTER_LEN; i++) {
 8003d9c:	2300      	movs	r3, #0
 8003d9e:	f887 3078 	strb.w	r3, [r7, #120]	@ 0x78
 8003da2:	e019      	b.n	8003dd8 <read_thermistors+0x800>
		HAL_ADC_Start(&hadc1);
 8003da4:	4864      	ldr	r0, [pc, #400]	@ (8003f38 <read_thermistors+0x960>)
 8003da6:	f000 fed3 	bl	8004b50 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8003daa:	f04f 31ff 	mov.w	r1, #4294967295
 8003dae:	4862      	ldr	r0, [pc, #392]	@ (8003f38 <read_thermistors+0x960>)
 8003db0:	f000 ffd3 	bl	8004d5a <HAL_ADC_PollForConversion>
		ADCSum += HAL_ADC_GetValue(&hadc1);
 8003db4:	4860      	ldr	r0, [pc, #384]	@ (8003f38 <read_thermistors+0x960>)
 8003db6:	f001 f85b 	bl	8004e70 <HAL_ADC_GetValue>
 8003dba:	4603      	mov	r3, r0
 8003dbc:	b29a      	uxth	r2, r3
 8003dbe:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003dc2:	4413      	add	r3, r2
 8003dc4:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
		HAL_ADC_Stop(&hadc1);
 8003dc8:	485b      	ldr	r0, [pc, #364]	@ (8003f38 <read_thermistors+0x960>)
 8003dca:	f000 ff93 	bl	8004cf4 <HAL_ADC_Stop>
	for (uint8_t i = 0; i < FILTER_LEN; i++) {
 8003dce:	f897 3078 	ldrb.w	r3, [r7, #120]	@ 0x78
 8003dd2:	3301      	adds	r3, #1
 8003dd4:	f887 3078 	strb.w	r3, [r7, #120]	@ 0x78
 8003dd8:	f897 3078 	ldrb.w	r3, [r7, #120]	@ 0x78
 8003ddc:	2b09      	cmp	r3, #9
 8003dde:	d9e1      	bls.n	8003da4 <read_thermistors+0x7cc>
	}
	thermistorRawADC[13] = ADCSum / FILTER_LEN;
 8003de0:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003de4:	4a55      	ldr	r2, [pc, #340]	@ (8003f3c <read_thermistors+0x964>)
 8003de6:	fba2 2303 	umull	r2, r3, r2, r3
 8003dea:	08db      	lsrs	r3, r3, #3
 8003dec:	b29b      	uxth	r3, r3
 8003dee:	f8a7 306a 	strh.w	r3, [r7, #106]	@ 0x6a

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
 8003df2:	2200      	movs	r2, #0
 8003df4:	2108      	movs	r1, #8
 8003df6:	4852      	ldr	r0, [pc, #328]	@ (8003f40 <read_thermistors+0x968>)
 8003df8:	f002 fbd8 	bl	80065ac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_SET);
 8003dfc:	2201      	movs	r2, #1
 8003dfe:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8003e02:	4850      	ldr	r0, [pc, #320]	@ (8003f44 <read_thermistors+0x96c>)
 8003e04:	f002 fbd2 	bl	80065ac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 8003e08:	2201      	movs	r2, #1
 8003e0a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8003e0e:	484e      	ldr	r0, [pc, #312]	@ (8003f48 <read_thermistors+0x970>)
 8003e10:	f002 fbcc 	bl	80065ac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 8003e14:	2201      	movs	r2, #1
 8003e16:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003e1a:	484b      	ldr	r0, [pc, #300]	@ (8003f48 <read_thermistors+0x970>)
 8003e1c:	f002 fbc6 	bl	80065ac <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8003e20:	2001      	movs	r0, #1
 8003e22:	f000 fe2d 	bl	8004a80 <HAL_Delay>
	ADCSum = 0;
 8003e26:	2300      	movs	r3, #0
 8003e28:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
	for (uint8_t i = 0; i <= 10; i++) {
 8003e2c:	2300      	movs	r3, #0
 8003e2e:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 8003e32:	e019      	b.n	8003e68 <read_thermistors+0x890>
		HAL_ADC_Start(&hadc1);
 8003e34:	4840      	ldr	r0, [pc, #256]	@ (8003f38 <read_thermistors+0x960>)
 8003e36:	f000 fe8b 	bl	8004b50 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8003e3a:	f04f 31ff 	mov.w	r1, #4294967295
 8003e3e:	483e      	ldr	r0, [pc, #248]	@ (8003f38 <read_thermistors+0x960>)
 8003e40:	f000 ff8b 	bl	8004d5a <HAL_ADC_PollForConversion>
		ADCSum += HAL_ADC_GetValue(&hadc1);
 8003e44:	483c      	ldr	r0, [pc, #240]	@ (8003f38 <read_thermistors+0x960>)
 8003e46:	f001 f813 	bl	8004e70 <HAL_ADC_GetValue>
 8003e4a:	4603      	mov	r3, r0
 8003e4c:	b29a      	uxth	r2, r3
 8003e4e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003e52:	4413      	add	r3, r2
 8003e54:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
		HAL_ADC_Stop(&hadc1);
 8003e58:	4837      	ldr	r0, [pc, #220]	@ (8003f38 <read_thermistors+0x960>)
 8003e5a:	f000 ff4b 	bl	8004cf4 <HAL_ADC_Stop>
	for (uint8_t i = 0; i <= 10; i++) {
 8003e5e:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8003e62:	3301      	adds	r3, #1
 8003e64:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 8003e68:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8003e6c:	2b0a      	cmp	r3, #10
 8003e6e:	d9e1      	bls.n	8003e34 <read_thermistors+0x85c>
	}
	thermistorRawADC[14] = (ADCSum / FILTER_LEN) - 200;
 8003e70:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003e74:	4a31      	ldr	r2, [pc, #196]	@ (8003f3c <read_thermistors+0x964>)
 8003e76:	fba2 2303 	umull	r2, r3, r2, r3
 8003e7a:	08db      	lsrs	r3, r3, #3
 8003e7c:	b29b      	uxth	r3, r3
 8003e7e:	3bc8      	subs	r3, #200	@ 0xc8
 8003e80:	b29b      	uxth	r3, r3
 8003e82:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_SET);
 8003e86:	2201      	movs	r2, #1
 8003e88:	2108      	movs	r1, #8
 8003e8a:	482d      	ldr	r0, [pc, #180]	@ (8003f40 <read_thermistors+0x968>)
 8003e8c:	f002 fb8e 	bl	80065ac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_SET);
 8003e90:	2201      	movs	r2, #1
 8003e92:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8003e96:	482b      	ldr	r0, [pc, #172]	@ (8003f44 <read_thermistors+0x96c>)
 8003e98:	f002 fb88 	bl	80065ac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 8003e9c:	2201      	movs	r2, #1
 8003e9e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8003ea2:	4829      	ldr	r0, [pc, #164]	@ (8003f48 <read_thermistors+0x970>)
 8003ea4:	f002 fb82 	bl	80065ac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 8003ea8:	2201      	movs	r2, #1
 8003eaa:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003eae:	4826      	ldr	r0, [pc, #152]	@ (8003f48 <read_thermistors+0x970>)
 8003eb0:	f002 fb7c 	bl	80065ac <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8003eb4:	2001      	movs	r0, #1
 8003eb6:	f000 fde3 	bl	8004a80 <HAL_Delay>
	ADCSum = 0;
 8003eba:	2300      	movs	r3, #0
 8003ebc:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
	for (uint8_t i = 0; i < FILTER_LEN; i++) {
 8003ec0:	2300      	movs	r3, #0
 8003ec2:	f887 3076 	strb.w	r3, [r7, #118]	@ 0x76
 8003ec6:	e019      	b.n	8003efc <read_thermistors+0x924>
		HAL_ADC_Start(&hadc1);
 8003ec8:	481b      	ldr	r0, [pc, #108]	@ (8003f38 <read_thermistors+0x960>)
 8003eca:	f000 fe41 	bl	8004b50 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8003ece:	f04f 31ff 	mov.w	r1, #4294967295
 8003ed2:	4819      	ldr	r0, [pc, #100]	@ (8003f38 <read_thermistors+0x960>)
 8003ed4:	f000 ff41 	bl	8004d5a <HAL_ADC_PollForConversion>
		ADCSum += HAL_ADC_GetValue(&hadc1);
 8003ed8:	4817      	ldr	r0, [pc, #92]	@ (8003f38 <read_thermistors+0x960>)
 8003eda:	f000 ffc9 	bl	8004e70 <HAL_ADC_GetValue>
 8003ede:	4603      	mov	r3, r0
 8003ee0:	b29a      	uxth	r2, r3
 8003ee2:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003ee6:	4413      	add	r3, r2
 8003ee8:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
		HAL_ADC_Stop(&hadc1);
 8003eec:	4812      	ldr	r0, [pc, #72]	@ (8003f38 <read_thermistors+0x960>)
 8003eee:	f000 ff01 	bl	8004cf4 <HAL_ADC_Stop>
	for (uint8_t i = 0; i < FILTER_LEN; i++) {
 8003ef2:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 8003ef6:	3301      	adds	r3, #1
 8003ef8:	f887 3076 	strb.w	r3, [r7, #118]	@ 0x76
 8003efc:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 8003f00:	2b09      	cmp	r3, #9
 8003f02:	d9e1      	bls.n	8003ec8 <read_thermistors+0x8f0>
	}
	thermistorRawADC[15] = ADCSum / FILTER_LEN;
 8003f04:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003f08:	4a0c      	ldr	r2, [pc, #48]	@ (8003f3c <read_thermistors+0x964>)
 8003f0a:	fba2 2303 	umull	r2, r3, r2, r3
 8003f0e:	08db      	lsrs	r3, r3, #3
 8003f10:	b29b      	uxth	r3, r3
 8003f12:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e

	thermistorRawADC[16] = thermistorRawADC[13] + 22;
 8003f16:	f8b7 306a 	ldrh.w	r3, [r7, #106]	@ 0x6a
 8003f1a:	3316      	adds	r3, #22
 8003f1c:	b29b      	uxth	r3, r3
 8003f1e:	f8a7 3070 	strh.w	r3, [r7, #112]	@ 0x70
	thermistorRawADC[17] = thermistorRawADC[11] + 33;
 8003f22:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8003f26:	3321      	adds	r3, #33	@ 0x21
 8003f28:	b29b      	uxth	r3, r3
 8003f2a:	f8a7 3072 	strh.w	r3, [r7, #114]	@ 0x72

	// ADD MUX DISABLE ON FINAL BOARD

	for(uint8_t i = 0; i < 18; i++) {
 8003f2e:	2300      	movs	r3, #0
 8003f30:	f887 3075 	strb.w	r3, [r7, #117]	@ 0x75
 8003f34:	e035      	b.n	8003fa2 <read_thermistors+0x9ca>
 8003f36:	bf00      	nop
 8003f38:	2000007c 	.word	0x2000007c
 8003f3c:	cccccccd 	.word	0xcccccccd
 8003f40:	40020000 	.word	0x40020000
 8003f44:	40020800 	.word	0x40020800
 8003f48:	40020400 	.word	0x40020400
		thermistorVoltage[i] = (thermistorRawADC[i] / 4095.0) * 3.3;
 8003f4c:	f897 3075 	ldrb.w	r3, [r7, #117]	@ 0x75
 8003f50:	005b      	lsls	r3, r3, #1
 8003f52:	3388      	adds	r3, #136	@ 0x88
 8003f54:	443b      	add	r3, r7
 8003f56:	f833 3c38 	ldrh.w	r3, [r3, #-56]
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	f7fc faa6 	bl	80004ac <__aeabi_i2d>
 8003f60:	a321      	add	r3, pc, #132	@ (adr r3, 8003fe8 <read_thermistors+0xa10>)
 8003f62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f66:	f7fc fc35 	bl	80007d4 <__aeabi_ddiv>
 8003f6a:	4602      	mov	r2, r0
 8003f6c:	460b      	mov	r3, r1
 8003f6e:	4610      	mov	r0, r2
 8003f70:	4619      	mov	r1, r3
 8003f72:	a31f      	add	r3, pc, #124	@ (adr r3, 8003ff0 <read_thermistors+0xa18>)
 8003f74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f78:	f7fc fb02 	bl	8000580 <__aeabi_dmul>
 8003f7c:	4602      	mov	r2, r0
 8003f7e:	460b      	mov	r3, r1
 8003f80:	f897 4075 	ldrb.w	r4, [r7, #117]	@ 0x75
 8003f84:	4610      	mov	r0, r2
 8003f86:	4619      	mov	r1, r3
 8003f88:	f7fc fd0c 	bl	80009a4 <__aeabi_d2f>
 8003f8c:	4602      	mov	r2, r0
 8003f8e:	00a3      	lsls	r3, r4, #2
 8003f90:	3388      	adds	r3, #136	@ 0x88
 8003f92:	443b      	add	r3, r7
 8003f94:	3b80      	subs	r3, #128	@ 0x80
 8003f96:	601a      	str	r2, [r3, #0]
	for(uint8_t i = 0; i < 18; i++) {
 8003f98:	f897 3075 	ldrb.w	r3, [r7, #117]	@ 0x75
 8003f9c:	3301      	adds	r3, #1
 8003f9e:	f887 3075 	strb.w	r3, [r7, #117]	@ 0x75
 8003fa2:	f897 3075 	ldrb.w	r3, [r7, #117]	@ 0x75
 8003fa6:	2b11      	cmp	r3, #17
 8003fa8:	d9d0      	bls.n	8003f4c <read_thermistors+0x974>
	}

	for(uint8_t i = 0; i < 18; i++) {
 8003faa:	2300      	movs	r3, #0
 8003fac:	f887 3074 	strb.w	r3, [r7, #116]	@ 0x74
 8003fb0:	e011      	b.n	8003fd6 <read_thermistors+0x9fe>
		*(thermistorArray_ptr + i) = thermistorVoltage[i];
 8003fb2:	f897 2074 	ldrb.w	r2, [r7, #116]	@ 0x74
 8003fb6:	f897 3074 	ldrb.w	r3, [r7, #116]	@ 0x74
 8003fba:	009b      	lsls	r3, r3, #2
 8003fbc:	6879      	ldr	r1, [r7, #4]
 8003fbe:	440b      	add	r3, r1
 8003fc0:	0092      	lsls	r2, r2, #2
 8003fc2:	3288      	adds	r2, #136	@ 0x88
 8003fc4:	443a      	add	r2, r7
 8003fc6:	3a80      	subs	r2, #128	@ 0x80
 8003fc8:	6812      	ldr	r2, [r2, #0]
 8003fca:	601a      	str	r2, [r3, #0]
	for(uint8_t i = 0; i < 18; i++) {
 8003fcc:	f897 3074 	ldrb.w	r3, [r7, #116]	@ 0x74
 8003fd0:	3301      	adds	r3, #1
 8003fd2:	f887 3074 	strb.w	r3, [r7, #116]	@ 0x74
 8003fd6:	f897 3074 	ldrb.w	r3, [r7, #116]	@ 0x74
 8003fda:	2b11      	cmp	r3, #17
 8003fdc:	d9e9      	bls.n	8003fb2 <read_thermistors+0x9da>
	}
}
 8003fde:	bf00      	nop
 8003fe0:	bf00      	nop
 8003fe2:	378c      	adds	r7, #140	@ 0x8c
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	bd90      	pop	{r4, r7, pc}
 8003fe8:	00000000 	.word	0x00000000
 8003fec:	40affe00 	.word	0x40affe00
 8003ff0:	66666666 	.word	0x66666666
 8003ff4:	400a6666 	.word	0x400a6666

08003ff8 <compute_resistance>:


void compute_resistance(float *thermistorVoltage_ptr)
{
 8003ff8:	b5b0      	push	{r4, r5, r7, lr}
 8003ffa:	b09a      	sub	sp, #104	@ 0x68
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	6078      	str	r0, [r7, #4]
	float thermistorResistance[THERM_QTY];
	uint16_t Rpu = 10000;			// Thermistor pull up resistor
 8004000:	f242 7310 	movw	r3, #10000	@ 0x2710
 8004004:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
	float Rmw = 0;					// Trace resistance on module board (UPDATE; different for each thermistor)
 8004008:	f04f 0300 	mov.w	r3, #0
 800400c:	663b      	str	r3, [r7, #96]	@ 0x60
	float Rmc = 0.03;				// Module board connector resistance
 800400e:	4b3e      	ldr	r3, [pc, #248]	@ (8004108 <compute_resistance+0x110>)
 8004010:	65fb      	str	r3, [r7, #92]	@ 0x5c
	float Rec = 0.03;				// Embedded board connector resistance
 8004012:	4b3d      	ldr	r3, [pc, #244]	@ (8004108 <compute_resistance+0x110>)
 8004014:	65bb      	str	r3, [r7, #88]	@ 0x58
	float Rew = 0;					// Trace resistance on embedded board (UPDATE; different for each thermistor)
 8004016:	f04f 0300 	mov.w	r3, #0
 800401a:	657b      	str	r3, [r7, #84]	@ 0x54
	float Req = Rpu + Rmc + Rec;	// Equivalent resistance (UPDATE; different for each thermistor)
 800401c:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8004020:	ee07 3a90 	vmov	s15, r3
 8004024:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004028:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 800402c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004030:	ed97 7a16 	vldr	s14, [r7, #88]	@ 0x58
 8004034:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004038:	edc7 7a14 	vstr	s15, [r7, #80]	@ 0x50

	// MAKE i < THERM_QTY instead of i < 16 on final board
	for(uint8_t i = 0; i < 18; i++) { thermistorResistance[i] = (*(thermistorVoltage_ptr + i)*Req)/(3.3 - *(thermistorVoltage_ptr + i)); }
 800403c:	2300      	movs	r3, #0
 800403e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8004042:	e039      	b.n	80040b8 <compute_resistance+0xc0>
 8004044:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8004048:	009b      	lsls	r3, r3, #2
 800404a:	687a      	ldr	r2, [r7, #4]
 800404c:	4413      	add	r3, r2
 800404e:	ed93 7a00 	vldr	s14, [r3]
 8004052:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 8004056:	ee67 7a27 	vmul.f32	s15, s14, s15
 800405a:	ee17 0a90 	vmov	r0, s15
 800405e:	f7fc fa37 	bl	80004d0 <__aeabi_f2d>
 8004062:	4604      	mov	r4, r0
 8004064:	460d      	mov	r5, r1
 8004066:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800406a:	009b      	lsls	r3, r3, #2
 800406c:	687a      	ldr	r2, [r7, #4]
 800406e:	4413      	add	r3, r2
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	4618      	mov	r0, r3
 8004074:	f7fc fa2c 	bl	80004d0 <__aeabi_f2d>
 8004078:	4602      	mov	r2, r0
 800407a:	460b      	mov	r3, r1
 800407c:	a120      	add	r1, pc, #128	@ (adr r1, 8004100 <compute_resistance+0x108>)
 800407e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004082:	f7fc f8c5 	bl	8000210 <__aeabi_dsub>
 8004086:	4602      	mov	r2, r0
 8004088:	460b      	mov	r3, r1
 800408a:	4620      	mov	r0, r4
 800408c:	4629      	mov	r1, r5
 800408e:	f7fc fba1 	bl	80007d4 <__aeabi_ddiv>
 8004092:	4602      	mov	r2, r0
 8004094:	460b      	mov	r3, r1
 8004096:	f897 4067 	ldrb.w	r4, [r7, #103]	@ 0x67
 800409a:	4610      	mov	r0, r2
 800409c:	4619      	mov	r1, r3
 800409e:	f7fc fc81 	bl	80009a4 <__aeabi_d2f>
 80040a2:	4602      	mov	r2, r0
 80040a4:	00a3      	lsls	r3, r4, #2
 80040a6:	3368      	adds	r3, #104	@ 0x68
 80040a8:	443b      	add	r3, r7
 80040aa:	3b60      	subs	r3, #96	@ 0x60
 80040ac:	601a      	str	r2, [r3, #0]
 80040ae:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80040b2:	3301      	adds	r3, #1
 80040b4:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 80040b8:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80040bc:	2b11      	cmp	r3, #17
 80040be:	d9c1      	bls.n	8004044 <compute_resistance+0x4c>

	// MAKE i < THERM_QTY instead of i < 16 on final board
	for(uint8_t i = 0; i < 18; i++) { *(thermistorVoltage_ptr + i) = thermistorResistance[i]; }
 80040c0:	2300      	movs	r3, #0
 80040c2:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
 80040c6:	e011      	b.n	80040ec <compute_resistance+0xf4>
 80040c8:	f897 2066 	ldrb.w	r2, [r7, #102]	@ 0x66
 80040cc:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 80040d0:	009b      	lsls	r3, r3, #2
 80040d2:	6879      	ldr	r1, [r7, #4]
 80040d4:	440b      	add	r3, r1
 80040d6:	0092      	lsls	r2, r2, #2
 80040d8:	3268      	adds	r2, #104	@ 0x68
 80040da:	443a      	add	r2, r7
 80040dc:	3a60      	subs	r2, #96	@ 0x60
 80040de:	6812      	ldr	r2, [r2, #0]
 80040e0:	601a      	str	r2, [r3, #0]
 80040e2:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 80040e6:	3301      	adds	r3, #1
 80040e8:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
 80040ec:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 80040f0:	2b11      	cmp	r3, #17
 80040f2:	d9e9      	bls.n	80040c8 <compute_resistance+0xd0>
}
 80040f4:	bf00      	nop
 80040f6:	bf00      	nop
 80040f8:	3768      	adds	r7, #104	@ 0x68
 80040fa:	46bd      	mov	sp, r7
 80040fc:	bdb0      	pop	{r4, r5, r7, pc}
 80040fe:	bf00      	nop
 8004100:	66666666 	.word	0x66666666
 8004104:	400a6666 	.word	0x400a6666
 8004108:	3cf5c28f 	.word	0x3cf5c28f
 800410c:	00000000 	.word	0x00000000

08004110 <compute_temperature>:


void compute_temperature(float *thermistorResistance_ptr)
{
 8004110:	b590      	push	{r4, r7, lr}
 8004112:	ed2d 8b02 	vpush	{d8}
 8004116:	b09b      	sub	sp, #108	@ 0x6c
 8004118:	af00      	add	r7, sp, #0
 800411a:	6078      	str	r0, [r7, #4]
	float temperature[THERM_QTY];
	float A = 0.003354016;
 800411c:	4b5e      	ldr	r3, [pc, #376]	@ (8004298 <compute_temperature+0x188>)
 800411e:	663b      	str	r3, [r7, #96]	@ 0x60
	float B = 0.000256985;
 8004120:	4b5e      	ldr	r3, [pc, #376]	@ (800429c <compute_temperature+0x18c>)
 8004122:	65fb      	str	r3, [r7, #92]	@ 0x5c
	float C = 0.000002620131;
 8004124:	4b5e      	ldr	r3, [pc, #376]	@ (80042a0 <compute_temperature+0x190>)
 8004126:	65bb      	str	r3, [r7, #88]	@ 0x58
	float D = 0.00000006383091;
 8004128:	4b5e      	ldr	r3, [pc, #376]	@ (80042a4 <compute_temperature+0x194>)
 800412a:	657b      	str	r3, [r7, #84]	@ 0x54
	uint16_t R25 = 10000;
 800412c:	f242 7310 	movw	r3, #10000	@ 0x2710
 8004130:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52


	for(uint8_t i = 0; i < 18; i++) {
 8004134:	2300      	movs	r3, #0
 8004136:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800413a:	e082      	b.n	8004242 <compute_temperature+0x132>
		temperature[i] = (1/(A +
							 B*logf(*(thermistorResistance_ptr + i)/R25) +
 800413c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8004140:	009b      	lsls	r3, r3, #2
 8004142:	687a      	ldr	r2, [r7, #4]
 8004144:	4413      	add	r3, r2
 8004146:	ed93 7a00 	vldr	s14, [r3]
 800414a:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 800414e:	ee07 3a90 	vmov	s15, r3
 8004152:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004156:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800415a:	eeb0 0a66 	vmov.f32	s0, s13
 800415e:	f004 f919 	bl	8008394 <logf>
 8004162:	eeb0 7a40 	vmov.f32	s14, s0
 8004166:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 800416a:	ee27 7a27 	vmul.f32	s14, s14, s15
		temperature[i] = (1/(A +
 800416e:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 8004172:	ee37 8a27 	vadd.f32	s16, s14, s15
							 C*powf(logf(*(thermistorResistance_ptr + i)/R25), 2) +
 8004176:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800417a:	009b      	lsls	r3, r3, #2
 800417c:	687a      	ldr	r2, [r7, #4]
 800417e:	4413      	add	r3, r2
 8004180:	ed93 7a00 	vldr	s14, [r3]
 8004184:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 8004188:	ee07 3a90 	vmov	s15, r3
 800418c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004190:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8004194:	eeb0 0a66 	vmov.f32	s0, s13
 8004198:	f004 f8fc 	bl	8008394 <logf>
 800419c:	eef0 7a40 	vmov.f32	s15, s0
 80041a0:	eef0 0a00 	vmov.f32	s1, #0	@ 0x40000000  2.0
 80041a4:	eeb0 0a67 	vmov.f32	s0, s15
 80041a8:	f004 f922 	bl	80083f0 <powf>
 80041ac:	eeb0 7a40 	vmov.f32	s14, s0
 80041b0:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 80041b4:	ee67 7a27 	vmul.f32	s15, s14, s15
							 B*logf(*(thermistorResistance_ptr + i)/R25) +
 80041b8:	ee38 8a27 	vadd.f32	s16, s16, s15
							 D*powf(logf(*(thermistorResistance_ptr + i)/R25), 3))) - 273.15;
 80041bc:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80041c0:	009b      	lsls	r3, r3, #2
 80041c2:	687a      	ldr	r2, [r7, #4]
 80041c4:	4413      	add	r3, r2
 80041c6:	ed93 7a00 	vldr	s14, [r3]
 80041ca:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 80041ce:	ee07 3a90 	vmov	s15, r3
 80041d2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80041d6:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80041da:	eeb0 0a66 	vmov.f32	s0, s13
 80041de:	f004 f8d9 	bl	8008394 <logf>
 80041e2:	eef0 7a40 	vmov.f32	s15, s0
 80041e6:	eef0 0a08 	vmov.f32	s1, #8	@ 0x40400000  3.0
 80041ea:	eeb0 0a67 	vmov.f32	s0, s15
 80041ee:	f004 f8ff 	bl	80083f0 <powf>
 80041f2:	eeb0 7a40 	vmov.f32	s14, s0
 80041f6:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 80041fa:	ee67 7a27 	vmul.f32	s15, s14, s15
							 C*powf(logf(*(thermistorResistance_ptr + i)/R25), 2) +
 80041fe:	ee78 7a27 	vadd.f32	s15, s16, s15
		temperature[i] = (1/(A +
 8004202:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004206:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800420a:	ee16 0a90 	vmov	r0, s13
 800420e:	f7fc f95f 	bl	80004d0 <__aeabi_f2d>
							 D*powf(logf(*(thermistorResistance_ptr + i)/R25), 3))) - 273.15;
 8004212:	a31f      	add	r3, pc, #124	@ (adr r3, 8004290 <compute_temperature+0x180>)
 8004214:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004218:	f7fb fffa 	bl	8000210 <__aeabi_dsub>
 800421c:	4602      	mov	r2, r0
 800421e:	460b      	mov	r3, r1
		temperature[i] = (1/(A +
 8004220:	f897 4067 	ldrb.w	r4, [r7, #103]	@ 0x67
							 D*powf(logf(*(thermistorResistance_ptr + i)/R25), 3))) - 273.15;
 8004224:	4610      	mov	r0, r2
 8004226:	4619      	mov	r1, r3
 8004228:	f7fc fbbc 	bl	80009a4 <__aeabi_d2f>
 800422c:	4602      	mov	r2, r0
		temperature[i] = (1/(A +
 800422e:	00a3      	lsls	r3, r4, #2
 8004230:	3368      	adds	r3, #104	@ 0x68
 8004232:	443b      	add	r3, r7
 8004234:	3b60      	subs	r3, #96	@ 0x60
 8004236:	601a      	str	r2, [r3, #0]
	for(uint8_t i = 0; i < 18; i++) {
 8004238:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800423c:	3301      	adds	r3, #1
 800423e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8004242:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8004246:	2b11      	cmp	r3, #17
 8004248:	f67f af78 	bls.w	800413c <compute_temperature+0x2c>
	}
	// MAKE i < THERM_QTY instead of i < 16 on final board
	for(uint8_t i = 0; i < 18; i++) { *(thermistorResistance_ptr + i) = temperature[i]; }
 800424c:	2300      	movs	r3, #0
 800424e:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
 8004252:	e011      	b.n	8004278 <compute_temperature+0x168>
 8004254:	f897 2066 	ldrb.w	r2, [r7, #102]	@ 0x66
 8004258:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 800425c:	009b      	lsls	r3, r3, #2
 800425e:	6879      	ldr	r1, [r7, #4]
 8004260:	440b      	add	r3, r1
 8004262:	0092      	lsls	r2, r2, #2
 8004264:	3268      	adds	r2, #104	@ 0x68
 8004266:	443a      	add	r2, r7
 8004268:	3a60      	subs	r2, #96	@ 0x60
 800426a:	6812      	ldr	r2, [r2, #0]
 800426c:	601a      	str	r2, [r3, #0]
 800426e:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 8004272:	3301      	adds	r3, #1
 8004274:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
 8004278:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 800427c:	2b11      	cmp	r3, #17
 800427e:	d9e9      	bls.n	8004254 <compute_temperature+0x144>
}
 8004280:	bf00      	nop
 8004282:	bf00      	nop
 8004284:	376c      	adds	r7, #108	@ 0x6c
 8004286:	46bd      	mov	sp, r7
 8004288:	ecbd 8b02 	vpop	{d8}
 800428c:	bd90      	pop	{r4, r7, pc}
 800428e:	bf00      	nop
 8004290:	66666666 	.word	0x66666666
 8004294:	40711266 	.word	0x40711266
 8004298:	3b5bcf0d 	.word	0x3b5bcf0d
 800429c:	3986bbf1 	.word	0x3986bbf1
 80042a0:	362fd582 	.word	0x362fd582
 80042a4:	3389136a 	.word	0x3389136a

080042a8 <temperature_sense>:


void temperature_sense(float *temperature_ptr)
{
 80042a8:	b580      	push	{r7, lr}
 80042aa:	b096      	sub	sp, #88	@ 0x58
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	6078      	str	r0, [r7, #4]
	float thermistorArray[THERM_QTY];

	read_thermistors(thermistorArray);
 80042b0:	f107 030c 	add.w	r3, r7, #12
 80042b4:	4618      	mov	r0, r3
 80042b6:	f7ff f98f 	bl	80035d8 <read_thermistors>

	compute_resistance(thermistorArray);
 80042ba:	f107 030c 	add.w	r3, r7, #12
 80042be:	4618      	mov	r0, r3
 80042c0:	f7ff fe9a 	bl	8003ff8 <compute_resistance>

	compute_temperature(thermistorArray);
 80042c4:	f107 030c 	add.w	r3, r7, #12
 80042c8:	4618      	mov	r0, r3
 80042ca:	f7ff ff21 	bl	8004110 <compute_temperature>

	for(uint8_t i = 0; i < 18; i++) { *(temperature_ptr + i) = thermistorArray[i]; }
 80042ce:	2300      	movs	r3, #0
 80042d0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
 80042d4:	e011      	b.n	80042fa <temperature_sense+0x52>
 80042d6:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 80042da:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80042de:	009b      	lsls	r3, r3, #2
 80042e0:	6879      	ldr	r1, [r7, #4]
 80042e2:	440b      	add	r3, r1
 80042e4:	0092      	lsls	r2, r2, #2
 80042e6:	3258      	adds	r2, #88	@ 0x58
 80042e8:	443a      	add	r2, r7
 80042ea:	3a4c      	subs	r2, #76	@ 0x4c
 80042ec:	6812      	ldr	r2, [r2, #0]
 80042ee:	601a      	str	r2, [r3, #0]
 80042f0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80042f4:	3301      	adds	r3, #1
 80042f6:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
 80042fa:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80042fe:	2b11      	cmp	r3, #17
 8004300:	d9e9      	bls.n	80042d6 <temperature_sense+0x2e>
}
 8004302:	bf00      	nop
 8004304:	bf00      	nop
 8004306:	3758      	adds	r7, #88	@ 0x58
 8004308:	46bd      	mov	sp, r7
 800430a:	bd80      	pop	{r7, pc}
 800430c:	0000      	movs	r0, r0
	...

08004310 <board_temperature_sense>:


void board_temperature_sense(float *boardThermistorVoltages, float VREF2, float *boardTemperatures)
{
 8004310:	b590      	push	{r4, r7, lr}
 8004312:	ed2d 8b02 	vpush	{d8}
 8004316:	b095      	sub	sp, #84	@ 0x54
 8004318:	af00      	add	r7, sp, #0
 800431a:	60f8      	str	r0, [r7, #12]
 800431c:	ed87 0a02 	vstr	s0, [r7, #8]
 8004320:	6079      	str	r1, [r7, #4]
	float thermistorResistance[9];
	uint16_t Rpu = 10000;
 8004322:	f242 7310 	movw	r3, #10000	@ 0x2710
 8004326:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c

	float A = 0.003354016;
 800432a:	4b69      	ldr	r3, [pc, #420]	@ (80044d0 <board_temperature_sense+0x1c0>)
 800432c:	64bb      	str	r3, [r7, #72]	@ 0x48
	float B = 0.000256985;
 800432e:	4b69      	ldr	r3, [pc, #420]	@ (80044d4 <board_temperature_sense+0x1c4>)
 8004330:	647b      	str	r3, [r7, #68]	@ 0x44
	float C = 0.000002620131;
 8004332:	4b69      	ldr	r3, [pc, #420]	@ (80044d8 <board_temperature_sense+0x1c8>)
 8004334:	643b      	str	r3, [r7, #64]	@ 0x40
	float D = 0.00000006383091;
 8004336:	4b69      	ldr	r3, [pc, #420]	@ (80044dc <board_temperature_sense+0x1cc>)
 8004338:	63fb      	str	r3, [r7, #60]	@ 0x3c
	uint16_t R25 = 10000;
 800433a:	f242 7310 	movw	r3, #10000	@ 0x2710
 800433e:	877b      	strh	r3, [r7, #58]	@ 0x3a

	for(uint8_t i = 0; i < 9; i++) {
 8004340:	2300      	movs	r3, #0
 8004342:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 8004346:	e028      	b.n	800439a <board_temperature_sense+0x8a>
		thermistorResistance[i] = (*(boardThermistorVoltages + i)*Rpu)/(VREF2 - *(boardThermistorVoltages + i));
 8004348:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800434c:	009b      	lsls	r3, r3, #2
 800434e:	68fa      	ldr	r2, [r7, #12]
 8004350:	4413      	add	r3, r2
 8004352:	ed93 7a00 	vldr	s14, [r3]
 8004356:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 800435a:	ee07 3a90 	vmov	s15, r3
 800435e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004362:	ee67 6a27 	vmul.f32	s13, s14, s15
 8004366:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800436a:	009b      	lsls	r3, r3, #2
 800436c:	68fa      	ldr	r2, [r7, #12]
 800436e:	4413      	add	r3, r2
 8004370:	edd3 7a00 	vldr	s15, [r3]
 8004374:	ed97 7a02 	vldr	s14, [r7, #8]
 8004378:	ee37 7a67 	vsub.f32	s14, s14, s15
 800437c:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8004380:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004384:	009b      	lsls	r3, r3, #2
 8004386:	3350      	adds	r3, #80	@ 0x50
 8004388:	443b      	add	r3, r7
 800438a:	3b3c      	subs	r3, #60	@ 0x3c
 800438c:	edc3 7a00 	vstr	s15, [r3]
	for(uint8_t i = 0; i < 9; i++) {
 8004390:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8004394:	3301      	adds	r3, #1
 8004396:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 800439a:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800439e:	2b08      	cmp	r3, #8
 80043a0:	d9d2      	bls.n	8004348 <board_temperature_sense+0x38>
	}

	for(uint8_t i = 0; i < 9; i++) {
 80043a2:	2300      	movs	r3, #0
 80043a4:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
 80043a8:	e081      	b.n	80044ae <board_temperature_sense+0x19e>
		*(boardTemperatures + i) = (1/(A +
									   B*logf(thermistorResistance[i]/R25) +
 80043aa:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 80043ae:	009b      	lsls	r3, r3, #2
 80043b0:	3350      	adds	r3, #80	@ 0x50
 80043b2:	443b      	add	r3, r7
 80043b4:	3b3c      	subs	r3, #60	@ 0x3c
 80043b6:	ed93 7a00 	vldr	s14, [r3]
 80043ba:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80043bc:	ee07 3a90 	vmov	s15, r3
 80043c0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80043c4:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80043c8:	eeb0 0a66 	vmov.f32	s0, s13
 80043cc:	f003 ffe2 	bl	8008394 <logf>
 80043d0:	eeb0 7a40 	vmov.f32	s14, s0
 80043d4:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 80043d8:	ee27 7a27 	vmul.f32	s14, s14, s15
		*(boardTemperatures + i) = (1/(A +
 80043dc:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 80043e0:	ee37 8a27 	vadd.f32	s16, s14, s15
									   C*powf(logf(thermistorResistance[i]/R25), 2) +
 80043e4:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 80043e8:	009b      	lsls	r3, r3, #2
 80043ea:	3350      	adds	r3, #80	@ 0x50
 80043ec:	443b      	add	r3, r7
 80043ee:	3b3c      	subs	r3, #60	@ 0x3c
 80043f0:	ed93 7a00 	vldr	s14, [r3]
 80043f4:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80043f6:	ee07 3a90 	vmov	s15, r3
 80043fa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80043fe:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8004402:	eeb0 0a66 	vmov.f32	s0, s13
 8004406:	f003 ffc5 	bl	8008394 <logf>
 800440a:	eef0 7a40 	vmov.f32	s15, s0
 800440e:	eef0 0a00 	vmov.f32	s1, #0	@ 0x40000000  2.0
 8004412:	eeb0 0a67 	vmov.f32	s0, s15
 8004416:	f003 ffeb 	bl	80083f0 <powf>
 800441a:	eeb0 7a40 	vmov.f32	s14, s0
 800441e:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 8004422:	ee67 7a27 	vmul.f32	s15, s14, s15
									   B*logf(thermistorResistance[i]/R25) +
 8004426:	ee38 8a27 	vadd.f32	s16, s16, s15
									   D*powf(logf(thermistorResistance[i]/R25), 3))) - 273.15;
 800442a:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 800442e:	009b      	lsls	r3, r3, #2
 8004430:	3350      	adds	r3, #80	@ 0x50
 8004432:	443b      	add	r3, r7
 8004434:	3b3c      	subs	r3, #60	@ 0x3c
 8004436:	ed93 7a00 	vldr	s14, [r3]
 800443a:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800443c:	ee07 3a90 	vmov	s15, r3
 8004440:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004444:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8004448:	eeb0 0a66 	vmov.f32	s0, s13
 800444c:	f003 ffa2 	bl	8008394 <logf>
 8004450:	eef0 7a40 	vmov.f32	s15, s0
 8004454:	eef0 0a08 	vmov.f32	s1, #8	@ 0x40400000  3.0
 8004458:	eeb0 0a67 	vmov.f32	s0, s15
 800445c:	f003 ffc8 	bl	80083f0 <powf>
 8004460:	eeb0 7a40 	vmov.f32	s14, s0
 8004464:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8004468:	ee67 7a27 	vmul.f32	s15, s14, s15
									   C*powf(logf(thermistorResistance[i]/R25), 2) +
 800446c:	ee78 7a27 	vadd.f32	s15, s16, s15
		*(boardTemperatures + i) = (1/(A +
 8004470:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004474:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8004478:	ee16 0a90 	vmov	r0, s13
 800447c:	f7fc f828 	bl	80004d0 <__aeabi_f2d>
									   D*powf(logf(thermistorResistance[i]/R25), 3))) - 273.15;
 8004480:	a311      	add	r3, pc, #68	@ (adr r3, 80044c8 <board_temperature_sense+0x1b8>)
 8004482:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004486:	f7fb fec3 	bl	8000210 <__aeabi_dsub>
 800448a:	4602      	mov	r2, r0
 800448c:	460b      	mov	r3, r1
 800448e:	4610      	mov	r0, r2
 8004490:	4619      	mov	r1, r3
		*(boardTemperatures + i) = (1/(A +
 8004492:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 8004496:	009b      	lsls	r3, r3, #2
 8004498:	687a      	ldr	r2, [r7, #4]
 800449a:	18d4      	adds	r4, r2, r3
									   D*powf(logf(thermistorResistance[i]/R25), 3))) - 273.15;
 800449c:	f7fc fa82 	bl	80009a4 <__aeabi_d2f>
 80044a0:	4603      	mov	r3, r0
		*(boardTemperatures + i) = (1/(A +
 80044a2:	6023      	str	r3, [r4, #0]
	for(uint8_t i = 0; i < 9; i++) {
 80044a4:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 80044a8:	3301      	adds	r3, #1
 80044aa:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
 80044ae:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 80044b2:	2b08      	cmp	r3, #8
 80044b4:	f67f af79 	bls.w	80043aa <board_temperature_sense+0x9a>
	}
}
 80044b8:	bf00      	nop
 80044ba:	bf00      	nop
 80044bc:	3754      	adds	r7, #84	@ 0x54
 80044be:	46bd      	mov	sp, r7
 80044c0:	ecbd 8b02 	vpop	{d8}
 80044c4:	bd90      	pop	{r4, r7, pc}
 80044c6:	bf00      	nop
 80044c8:	66666666 	.word	0x66666666
 80044cc:	40711266 	.word	0x40711266
 80044d0:	3b5bcf0d 	.word	0x3b5bcf0d
 80044d4:	3986bbf1 	.word	0x3986bbf1
 80044d8:	362fd582 	.word	0x362fd582
 80044dc:	3389136a 	.word	0x3389136a

080044e0 <voltage_sense>:
#include "torch_voltage.h"
#include "torch_can.h"


void voltage_sense(uint16_t *cellVoltages)
{
 80044e0:	b580      	push	{r7, lr}
 80044e2:	b096      	sub	sp, #88	@ 0x58
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	6078      	str	r0, [r7, #4]
	uint8_t attempts = 0;
 80044e8:	2300      	movs	r3, #0
 80044ea:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	uint8_t sideB_cellVoltageA_PECflag;
	uint8_t sideB_cellVoltageB_PECflag;
	uint8_t sideB_cellVoltageC_PECflag;
	uint8_t sideB_cellVoltageD_PECflag;

	CLRCELL(SIDE_A);
 80044ee:	2001      	movs	r0, #1
 80044f0:	f7fe fa24 	bl	800293c <CLRCELL>
	CLRCELL(SIDE_B);
 80044f4:	2000      	movs	r0, #0
 80044f6:	f7fe fa21 	bl	800293c <CLRCELL>
	wait(3);
 80044fa:	2003      	movs	r0, #3
 80044fc:	f7fe ffa8 	bl	8003450 <wait>

	while(attempts < ATTEMPT_LIMIT) {
 8004500:	e105      	b.n	800470e <voltage_sense+0x22e>
		ADCV(SIDE_A);
 8004502:	2001      	movs	r0, #1
 8004504:	f7fe f9f7 	bl	80028f6 <ADCV>
		ADCV(SIDE_B);
 8004508:	2000      	movs	r0, #0
 800450a:	f7fe f9f4 	bl	80028f6 <ADCV>
		wait(3);
 800450e:	2003      	movs	r0, #3
 8004510:	f7fe ff9e 	bl	8003450 <wait>

		RDCVA(sideA_cellVoltageA, SIDE_A);
 8004514:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8004518:	2101      	movs	r1, #1
 800451a:	4618      	mov	r0, r3
 800451c:	f7fe f8a8 	bl	8002670 <RDCVA>
		RDCVA(sideB_cellVoltageA, SIDE_B);
 8004520:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004524:	2100      	movs	r1, #0
 8004526:	4618      	mov	r0, r3
 8004528:	f7fe f8a2 	bl	8002670 <RDCVA>
		wait(1);
 800452c:	2001      	movs	r0, #1
 800452e:	f7fe ff8f 	bl	8003450 <wait>
		RDCVB(sideA_cellVoltageB, SIDE_A);
 8004532:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8004536:	2101      	movs	r1, #1
 8004538:	4618      	mov	r0, r3
 800453a:	f7fe f8bd 	bl	80026b8 <RDCVB>
		RDCVB(sideB_cellVoltageB, SIDE_B);
 800453e:	f107 031c 	add.w	r3, r7, #28
 8004542:	2100      	movs	r1, #0
 8004544:	4618      	mov	r0, r3
 8004546:	f7fe f8b7 	bl	80026b8 <RDCVB>
		wait(1);
 800454a:	2001      	movs	r0, #1
 800454c:	f7fe ff80 	bl	8003450 <wait>
		RDCVC(sideA_cellVoltageC, SIDE_A);
 8004550:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8004554:	2101      	movs	r1, #1
 8004556:	4618      	mov	r0, r3
 8004558:	f7fe f8d2 	bl	8002700 <RDCVC>
		RDCVC(sideB_cellVoltageC, SIDE_B);
 800455c:	f107 0314 	add.w	r3, r7, #20
 8004560:	2100      	movs	r1, #0
 8004562:	4618      	mov	r0, r3
 8004564:	f7fe f8cc 	bl	8002700 <RDCVC>
		wait(1);
 8004568:	2001      	movs	r0, #1
 800456a:	f7fe ff71 	bl	8003450 <wait>
		RDCVD(sideA_cellVoltageD, SIDE_A);
 800456e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004572:	2101      	movs	r1, #1
 8004574:	4618      	mov	r0, r3
 8004576:	f7fe f8e7 	bl	8002748 <RDCVD>
		RDCVD(sideB_cellVoltageD, SIDE_B);
 800457a:	f107 030c 	add.w	r3, r7, #12
 800457e:	2100      	movs	r1, #0
 8004580:	4618      	mov	r0, r3
 8004582:	f7fe f8e1 	bl	8002748 <RDCVD>

		sideA_cellVoltageA_PECflag = verify_PEC15(sideA_cellVoltageA);
 8004586:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 800458a:	4618      	mov	r0, r3
 800458c:	f7fd ff0d 	bl	80023aa <verify_PEC15>
 8004590:	4603      	mov	r3, r0
 8004592:	f887 3056 	strb.w	r3, [r7, #86]	@ 0x56
		sideA_cellVoltageB_PECflag = verify_PEC15(sideA_cellVoltageB);
 8004596:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800459a:	4618      	mov	r0, r3
 800459c:	f7fd ff05 	bl	80023aa <verify_PEC15>
 80045a0:	4603      	mov	r3, r0
 80045a2:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
		sideA_cellVoltageC_PECflag = verify_PEC15(sideA_cellVoltageC);
 80045a6:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80045aa:	4618      	mov	r0, r3
 80045ac:	f7fd fefd 	bl	80023aa <verify_PEC15>
 80045b0:	4603      	mov	r3, r0
 80045b2:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
		sideA_cellVoltageD_PECflag = verify_PEC15(sideA_cellVoltageD);
 80045b6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80045ba:	4618      	mov	r0, r3
 80045bc:	f7fd fef5 	bl	80023aa <verify_PEC15>
 80045c0:	4603      	mov	r3, r0
 80045c2:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53

		sideB_cellVoltageA_PECflag = verify_PEC15(sideB_cellVoltageA);
 80045c6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80045ca:	4618      	mov	r0, r3
 80045cc:	f7fd feed 	bl	80023aa <verify_PEC15>
 80045d0:	4603      	mov	r3, r0
 80045d2:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
		sideB_cellVoltageB_PECflag = verify_PEC15(sideB_cellVoltageB);
 80045d6:	f107 031c 	add.w	r3, r7, #28
 80045da:	4618      	mov	r0, r3
 80045dc:	f7fd fee5 	bl	80023aa <verify_PEC15>
 80045e0:	4603      	mov	r3, r0
 80045e2:	f887 3051 	strb.w	r3, [r7, #81]	@ 0x51
		sideB_cellVoltageC_PECflag = verify_PEC15(sideB_cellVoltageC);
 80045e6:	f107 0314 	add.w	r3, r7, #20
 80045ea:	4618      	mov	r0, r3
 80045ec:	f7fd fedd 	bl	80023aa <verify_PEC15>
 80045f0:	4603      	mov	r3, r0
 80045f2:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
		sideB_cellVoltageD_PECflag = verify_PEC15(sideB_cellVoltageD);
 80045f6:	f107 030c 	add.w	r3, r7, #12
 80045fa:	4618      	mov	r0, r3
 80045fc:	f7fd fed5 	bl	80023aa <verify_PEC15>
 8004600:	4603      	mov	r3, r0
 8004602:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

		if(sideA_cellVoltageA_PECflag == 2 &&
 8004606:	f897 3056 	ldrb.w	r3, [r7, #86]	@ 0x56
 800460a:	2b02      	cmp	r3, #2
 800460c:	d177      	bne.n	80046fe <voltage_sense+0x21e>
 800460e:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8004612:	2b02      	cmp	r3, #2
 8004614:	d173      	bne.n	80046fe <voltage_sense+0x21e>
		   sideA_cellVoltageB_PECflag == 2 &&
 8004616:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 800461a:	2b02      	cmp	r3, #2
 800461c:	d16f      	bne.n	80046fe <voltage_sense+0x21e>
		   sideA_cellVoltageC_PECflag == 2 &&
 800461e:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 8004622:	2b02      	cmp	r3, #2
 8004624:	d16b      	bne.n	80046fe <voltage_sense+0x21e>
		   sideA_cellVoltageD_PECflag == 2 &&
 8004626:	f897 3052 	ldrb.w	r3, [r7, #82]	@ 0x52
 800462a:	2b02      	cmp	r3, #2
 800462c:	d167      	bne.n	80046fe <voltage_sense+0x21e>
		   sideB_cellVoltageA_PECflag == 2 &&
 800462e:	f897 3051 	ldrb.w	r3, [r7, #81]	@ 0x51
 8004632:	2b02      	cmp	r3, #2
 8004634:	d163      	bne.n	80046fe <voltage_sense+0x21e>
		   sideB_cellVoltageB_PECflag == 2 &&
 8004636:	f897 3050 	ldrb.w	r3, [r7, #80]	@ 0x50
 800463a:	2b02      	cmp	r3, #2
 800463c:	d15f      	bne.n	80046fe <voltage_sense+0x21e>
		   sideB_cellVoltageC_PECflag == 2 &&
 800463e:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8004642:	2b02      	cmp	r3, #2
 8004644:	d15b      	bne.n	80046fe <voltage_sense+0x21e>
		   sideB_cellVoltageD_PECflag == 2 &&
		   sideA_cellVoltageA[1] != 0xFF &&
 8004646:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
		   sideB_cellVoltageD_PECflag == 2 &&
 800464a:	2bff      	cmp	r3, #255	@ 0xff
 800464c:	d057      	beq.n	80046fe <voltage_sense+0x21e>
		   sideA_cellVoltageA[3] != 0xFF &&
 800464e:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
		   sideA_cellVoltageA[1] != 0xFF &&
 8004652:	2bff      	cmp	r3, #255	@ 0xff
 8004654:	d053      	beq.n	80046fe <voltage_sense+0x21e>
		   sideA_cellVoltageA[5] != 0xFF &&
 8004656:	f897 3049 	ldrb.w	r3, [r7, #73]	@ 0x49
		   sideA_cellVoltageA[3] != 0xFF &&
 800465a:	2bff      	cmp	r3, #255	@ 0xff
 800465c:	d04f      	beq.n	80046fe <voltage_sense+0x21e>
		   sideB_cellVoltageA[1] != 0xFF &&
 800465e:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
		   sideA_cellVoltageA[5] != 0xFF &&
 8004662:	2bff      	cmp	r3, #255	@ 0xff
 8004664:	d04b      	beq.n	80046fe <voltage_sense+0x21e>
		   sideB_cellVoltageA[3] != 0xFF &&
 8004666:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
		   sideB_cellVoltageA[1] != 0xFF &&
 800466a:	2bff      	cmp	r3, #255	@ 0xff
 800466c:	d047      	beq.n	80046fe <voltage_sense+0x21e>
		   sideB_cellVoltageA[5] != 0xFF &&
 800466e:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
		   sideB_cellVoltageA[3] != 0xFF &&
 8004672:	2bff      	cmp	r3, #255	@ 0xff
 8004674:	d043      	beq.n	80046fe <voltage_sense+0x21e>
		   sideA_cellVoltageB[1] != 0xFF &&
 8004676:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
		   sideB_cellVoltageA[5] != 0xFF &&
 800467a:	2bff      	cmp	r3, #255	@ 0xff
 800467c:	d03f      	beq.n	80046fe <voltage_sense+0x21e>
		   sideA_cellVoltageB[3] != 0xFF &&
 800467e:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
		   sideA_cellVoltageB[1] != 0xFF &&
 8004682:	2bff      	cmp	r3, #255	@ 0xff
 8004684:	d03b      	beq.n	80046fe <voltage_sense+0x21e>
		   sideA_cellVoltageB[5] != 0xFF &&
 8004686:	f897 3041 	ldrb.w	r3, [r7, #65]	@ 0x41
		   sideA_cellVoltageB[3] != 0xFF &&
 800468a:	2bff      	cmp	r3, #255	@ 0xff
 800468c:	d037      	beq.n	80046fe <voltage_sense+0x21e>
		   sideB_cellVoltageB[1] != 0xFF &&
 800468e:	7f7b      	ldrb	r3, [r7, #29]
		   sideA_cellVoltageB[5] != 0xFF &&
 8004690:	2bff      	cmp	r3, #255	@ 0xff
 8004692:	d034      	beq.n	80046fe <voltage_sense+0x21e>
		   sideB_cellVoltageB[3] != 0xFF &&
 8004694:	7ffb      	ldrb	r3, [r7, #31]
		   sideB_cellVoltageB[1] != 0xFF &&
 8004696:	2bff      	cmp	r3, #255	@ 0xff
 8004698:	d031      	beq.n	80046fe <voltage_sense+0x21e>
		   sideB_cellVoltageB[5] != 0xFF &&
 800469a:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
		   sideB_cellVoltageB[3] != 0xFF &&
 800469e:	2bff      	cmp	r3, #255	@ 0xff
 80046a0:	d02d      	beq.n	80046fe <voltage_sense+0x21e>
		   sideA_cellVoltageC[1] != 0xFF &&
 80046a2:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
		   sideB_cellVoltageB[5] != 0xFF &&
 80046a6:	2bff      	cmp	r3, #255	@ 0xff
 80046a8:	d029      	beq.n	80046fe <voltage_sense+0x21e>
		   sideA_cellVoltageC[3] != 0xFF &&
 80046aa:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
		   sideA_cellVoltageC[1] != 0xFF &&
 80046ae:	2bff      	cmp	r3, #255	@ 0xff
 80046b0:	d025      	beq.n	80046fe <voltage_sense+0x21e>
		   sideA_cellVoltageC[5] != 0xFF &&
 80046b2:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
		   sideA_cellVoltageC[3] != 0xFF &&
 80046b6:	2bff      	cmp	r3, #255	@ 0xff
 80046b8:	d021      	beq.n	80046fe <voltage_sense+0x21e>
		   sideB_cellVoltageC[1] != 0xFF &&
 80046ba:	7d7b      	ldrb	r3, [r7, #21]
		   sideA_cellVoltageC[5] != 0xFF &&
 80046bc:	2bff      	cmp	r3, #255	@ 0xff
 80046be:	d01e      	beq.n	80046fe <voltage_sense+0x21e>
		   sideB_cellVoltageC[3] != 0xFF &&
 80046c0:	7dfb      	ldrb	r3, [r7, #23]
		   sideB_cellVoltageC[1] != 0xFF &&
 80046c2:	2bff      	cmp	r3, #255	@ 0xff
 80046c4:	d01b      	beq.n	80046fe <voltage_sense+0x21e>
		   sideB_cellVoltageC[5] != 0xFF &&
 80046c6:	7e7b      	ldrb	r3, [r7, #25]
		   sideB_cellVoltageC[3] != 0xFF &&
 80046c8:	2bff      	cmp	r3, #255	@ 0xff
 80046ca:	d018      	beq.n	80046fe <voltage_sense+0x21e>
		   sideA_cellVoltageD[1] != 0xFF &&
 80046cc:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
		   sideB_cellVoltageC[5] != 0xFF &&
 80046d0:	2bff      	cmp	r3, #255	@ 0xff
 80046d2:	d014      	beq.n	80046fe <voltage_sense+0x21e>
		   sideA_cellVoltageD[3] != 0xFF &&
 80046d4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
		   sideA_cellVoltageD[1] != 0xFF &&
 80046d8:	2bff      	cmp	r3, #255	@ 0xff
 80046da:	d010      	beq.n	80046fe <voltage_sense+0x21e>
		   sideA_cellVoltageD[5] != 0xFF &&
 80046dc:	f897 3031 	ldrb.w	r3, [r7, #49]	@ 0x31
		   sideA_cellVoltageD[3] != 0xFF &&
 80046e0:	2bff      	cmp	r3, #255	@ 0xff
 80046e2:	d00c      	beq.n	80046fe <voltage_sense+0x21e>
		   sideB_cellVoltageD[1] != 0xFF &&
 80046e4:	7b7b      	ldrb	r3, [r7, #13]
		   sideA_cellVoltageD[5] != 0xFF &&
 80046e6:	2bff      	cmp	r3, #255	@ 0xff
 80046e8:	d009      	beq.n	80046fe <voltage_sense+0x21e>
		   sideB_cellVoltageD[3] != 0xFF &&
 80046ea:	7bfb      	ldrb	r3, [r7, #15]
		   sideB_cellVoltageD[1] != 0xFF &&
 80046ec:	2bff      	cmp	r3, #255	@ 0xff
 80046ee:	d006      	beq.n	80046fe <voltage_sense+0x21e>
		   sideB_cellVoltageD[5] != 0xFF)
 80046f0:	7c7b      	ldrb	r3, [r7, #17]
		   sideB_cellVoltageD[3] != 0xFF &&
 80046f2:	2bff      	cmp	r3, #255	@ 0xff
 80046f4:	d003      	beq.n	80046fe <voltage_sense+0x21e>
		{
			attempts = 13;
 80046f6:	230d      	movs	r3, #13
 80046f8:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
 80046fc:	e007      	b.n	800470e <voltage_sense+0x22e>
		}
		else {
			attempts++;
 80046fe:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8004702:	3301      	adds	r3, #1
 8004704:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			wait(1);
 8004708:	2001      	movs	r0, #1
 800470a:	f7fe fea1 	bl	8003450 <wait>
	while(attempts < ATTEMPT_LIMIT) {
 800470e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8004712:	2b09      	cmp	r3, #9
 8004714:	f67f aef5 	bls.w	8004502 <voltage_sense+0x22>
		}
	}
	if(attempts != 13) {
 8004718:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800471c:	2b0d      	cmp	r3, #13
 800471e:	d004      	beq.n	800472a <voltage_sense+0x24a>
		error_loop(ERROR_PEC, 0, 0);
 8004720:	2200      	movs	r2, #0
 8004722:	2100      	movs	r1, #0
 8004724:	2052      	movs	r0, #82	@ 0x52
 8004726:	f7fd f9ad 	bl	8001a84 <error_loop>
	}

	*cellVoltages = (sideA_cellVoltageA[1] << 8) | sideA_cellVoltageA[0];
 800472a:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 800472e:	b21b      	sxth	r3, r3
 8004730:	021b      	lsls	r3, r3, #8
 8004732:	b21a      	sxth	r2, r3
 8004734:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8004738:	b21b      	sxth	r3, r3
 800473a:	4313      	orrs	r3, r2
 800473c:	b21b      	sxth	r3, r3
 800473e:	b29a      	uxth	r2, r3
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	801a      	strh	r2, [r3, #0]
	*(cellVoltages + 1) = (sideA_cellVoltageA[3] << 8) | sideA_cellVoltageA[2];
 8004744:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8004748:	b21b      	sxth	r3, r3
 800474a:	021b      	lsls	r3, r3, #8
 800474c:	b21a      	sxth	r2, r3
 800474e:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8004752:	b21b      	sxth	r3, r3
 8004754:	4313      	orrs	r3, r2
 8004756:	b21a      	sxth	r2, r3
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	3302      	adds	r3, #2
 800475c:	b292      	uxth	r2, r2
 800475e:	801a      	strh	r2, [r3, #0]
	*(cellVoltages + 2) = (sideA_cellVoltageA[5] << 8) | sideA_cellVoltageA[4];
 8004760:	f897 3049 	ldrb.w	r3, [r7, #73]	@ 0x49
 8004764:	b21b      	sxth	r3, r3
 8004766:	021b      	lsls	r3, r3, #8
 8004768:	b21a      	sxth	r2, r3
 800476a:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 800476e:	b21b      	sxth	r3, r3
 8004770:	4313      	orrs	r3, r2
 8004772:	b21a      	sxth	r2, r3
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	3304      	adds	r3, #4
 8004778:	b292      	uxth	r2, r2
 800477a:	801a      	strh	r2, [r3, #0]
	*(cellVoltages + 3) = (sideA_cellVoltageB[1] << 8) | sideA_cellVoltageB[0];
 800477c:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 8004780:	b21b      	sxth	r3, r3
 8004782:	021b      	lsls	r3, r3, #8
 8004784:	b21a      	sxth	r2, r3
 8004786:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 800478a:	b21b      	sxth	r3, r3
 800478c:	4313      	orrs	r3, r2
 800478e:	b21a      	sxth	r2, r3
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	3306      	adds	r3, #6
 8004794:	b292      	uxth	r2, r2
 8004796:	801a      	strh	r2, [r3, #0]
	*(cellVoltages + 4) = (sideA_cellVoltageB[3] << 8) | sideA_cellVoltageB[2];
 8004798:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800479c:	b21b      	sxth	r3, r3
 800479e:	021b      	lsls	r3, r3, #8
 80047a0:	b21a      	sxth	r2, r3
 80047a2:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 80047a6:	b21b      	sxth	r3, r3
 80047a8:	4313      	orrs	r3, r2
 80047aa:	b21a      	sxth	r2, r3
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	3308      	adds	r3, #8
 80047b0:	b292      	uxth	r2, r2
 80047b2:	801a      	strh	r2, [r3, #0]
	*(cellVoltages + 5) = (sideA_cellVoltageB[5] << 8) | sideA_cellVoltageB[4];
 80047b4:	f897 3041 	ldrb.w	r3, [r7, #65]	@ 0x41
 80047b8:	b21b      	sxth	r3, r3
 80047ba:	021b      	lsls	r3, r3, #8
 80047bc:	b21a      	sxth	r2, r3
 80047be:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 80047c2:	b21b      	sxth	r3, r3
 80047c4:	4313      	orrs	r3, r2
 80047c6:	b21a      	sxth	r2, r3
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	330a      	adds	r3, #10
 80047cc:	b292      	uxth	r2, r2
 80047ce:	801a      	strh	r2, [r3, #0]
	*(cellVoltages + 6) = (sideA_cellVoltageC[1] << 8) | sideA_cellVoltageC[0];
 80047d0:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 80047d4:	b21b      	sxth	r3, r3
 80047d6:	021b      	lsls	r3, r3, #8
 80047d8:	b21a      	sxth	r2, r3
 80047da:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 80047de:	b21b      	sxth	r3, r3
 80047e0:	4313      	orrs	r3, r2
 80047e2:	b21a      	sxth	r2, r3
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	330c      	adds	r3, #12
 80047e8:	b292      	uxth	r2, r2
 80047ea:	801a      	strh	r2, [r3, #0]
	*(cellVoltages + 7) = (sideA_cellVoltageC[3] << 8) | sideA_cellVoltageC[2];
 80047ec:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80047f0:	b21b      	sxth	r3, r3
 80047f2:	021b      	lsls	r3, r3, #8
 80047f4:	b21a      	sxth	r2, r3
 80047f6:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 80047fa:	b21b      	sxth	r3, r3
 80047fc:	4313      	orrs	r3, r2
 80047fe:	b21a      	sxth	r2, r3
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	330e      	adds	r3, #14
 8004804:	b292      	uxth	r2, r2
 8004806:	801a      	strh	r2, [r3, #0]
	*(cellVoltages + 8) = (sideA_cellVoltageC[5] << 8) | sideA_cellVoltageC[4];
 8004808:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 800480c:	b21b      	sxth	r3, r3
 800480e:	021b      	lsls	r3, r3, #8
 8004810:	b21a      	sxth	r2, r3
 8004812:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 8004816:	b21b      	sxth	r3, r3
 8004818:	4313      	orrs	r3, r2
 800481a:	b21a      	sxth	r2, r3
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	3310      	adds	r3, #16
 8004820:	b292      	uxth	r2, r2
 8004822:	801a      	strh	r2, [r3, #0]
	*(cellVoltages + 9) = (sideA_cellVoltageD[1] << 8) | sideA_cellVoltageD[0];
 8004824:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8004828:	b21b      	sxth	r3, r3
 800482a:	021b      	lsls	r3, r3, #8
 800482c:	b21a      	sxth	r2, r3
 800482e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8004832:	b21b      	sxth	r3, r3
 8004834:	4313      	orrs	r3, r2
 8004836:	b21a      	sxth	r2, r3
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	3312      	adds	r3, #18
 800483c:	b292      	uxth	r2, r2
 800483e:	801a      	strh	r2, [r3, #0]

	*(cellVoltages + 10) = (sideB_cellVoltageA[1] << 8) | sideB_cellVoltageA[0];
 8004840:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8004844:	b21b      	sxth	r3, r3
 8004846:	021b      	lsls	r3, r3, #8
 8004848:	b21a      	sxth	r2, r3
 800484a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800484e:	b21b      	sxth	r3, r3
 8004850:	4313      	orrs	r3, r2
 8004852:	b21a      	sxth	r2, r3
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	3314      	adds	r3, #20
 8004858:	b292      	uxth	r2, r2
 800485a:	801a      	strh	r2, [r3, #0]
	*(cellVoltages + 11) = (sideB_cellVoltageA[3] << 8) | sideB_cellVoltageA[2];
 800485c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004860:	b21b      	sxth	r3, r3
 8004862:	021b      	lsls	r3, r3, #8
 8004864:	b21a      	sxth	r2, r3
 8004866:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800486a:	b21b      	sxth	r3, r3
 800486c:	4313      	orrs	r3, r2
 800486e:	b21a      	sxth	r2, r3
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	3316      	adds	r3, #22
 8004874:	b292      	uxth	r2, r2
 8004876:	801a      	strh	r2, [r3, #0]
	*(cellVoltages + 12) = (sideB_cellVoltageA[5] << 8) | sideB_cellVoltageA[4];
 8004878:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800487c:	b21b      	sxth	r3, r3
 800487e:	021b      	lsls	r3, r3, #8
 8004880:	b21a      	sxth	r2, r3
 8004882:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8004886:	b21b      	sxth	r3, r3
 8004888:	4313      	orrs	r3, r2
 800488a:	b21a      	sxth	r2, r3
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	3318      	adds	r3, #24
 8004890:	b292      	uxth	r2, r2
 8004892:	801a      	strh	r2, [r3, #0]
	*(cellVoltages + 13) = (sideB_cellVoltageB[1] << 8) | sideB_cellVoltageB[0];
 8004894:	7f7b      	ldrb	r3, [r7, #29]
 8004896:	b21b      	sxth	r3, r3
 8004898:	021b      	lsls	r3, r3, #8
 800489a:	b21a      	sxth	r2, r3
 800489c:	7f3b      	ldrb	r3, [r7, #28]
 800489e:	b21b      	sxth	r3, r3
 80048a0:	4313      	orrs	r3, r2
 80048a2:	b21a      	sxth	r2, r3
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	331a      	adds	r3, #26
 80048a8:	b292      	uxth	r2, r2
 80048aa:	801a      	strh	r2, [r3, #0]
	*(cellVoltages + 14) = (sideB_cellVoltageB[3] << 8) | sideB_cellVoltageB[2];
 80048ac:	7ffb      	ldrb	r3, [r7, #31]
 80048ae:	b21b      	sxth	r3, r3
 80048b0:	021b      	lsls	r3, r3, #8
 80048b2:	b21a      	sxth	r2, r3
 80048b4:	7fbb      	ldrb	r3, [r7, #30]
 80048b6:	b21b      	sxth	r3, r3
 80048b8:	4313      	orrs	r3, r2
 80048ba:	b21a      	sxth	r2, r3
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	331c      	adds	r3, #28
 80048c0:	b292      	uxth	r2, r2
 80048c2:	801a      	strh	r2, [r3, #0]
	*(cellVoltages + 15) = (sideB_cellVoltageB[5] << 8) | sideB_cellVoltageB[4];
 80048c4:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80048c8:	b21b      	sxth	r3, r3
 80048ca:	021b      	lsls	r3, r3, #8
 80048cc:	b21a      	sxth	r2, r3
 80048ce:	f897 3020 	ldrb.w	r3, [r7, #32]
 80048d2:	b21b      	sxth	r3, r3
 80048d4:	4313      	orrs	r3, r2
 80048d6:	b21a      	sxth	r2, r3
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	331e      	adds	r3, #30
 80048dc:	b292      	uxth	r2, r2
 80048de:	801a      	strh	r2, [r3, #0]
	*(cellVoltages + 16) = (sideB_cellVoltageC[1] << 8) | sideB_cellVoltageC[0];
 80048e0:	7d7b      	ldrb	r3, [r7, #21]
 80048e2:	b21b      	sxth	r3, r3
 80048e4:	021b      	lsls	r3, r3, #8
 80048e6:	b21a      	sxth	r2, r3
 80048e8:	7d3b      	ldrb	r3, [r7, #20]
 80048ea:	b21b      	sxth	r3, r3
 80048ec:	4313      	orrs	r3, r2
 80048ee:	b21a      	sxth	r2, r3
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	3320      	adds	r3, #32
 80048f4:	b292      	uxth	r2, r2
 80048f6:	801a      	strh	r2, [r3, #0]
	*(cellVoltages + 17) = (sideB_cellVoltageC[3] << 8) | sideB_cellVoltageC[2];
 80048f8:	7dfb      	ldrb	r3, [r7, #23]
 80048fa:	b21b      	sxth	r3, r3
 80048fc:	021b      	lsls	r3, r3, #8
 80048fe:	b21a      	sxth	r2, r3
 8004900:	7dbb      	ldrb	r3, [r7, #22]
 8004902:	b21b      	sxth	r3, r3
 8004904:	4313      	orrs	r3, r2
 8004906:	b21a      	sxth	r2, r3
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	3322      	adds	r3, #34	@ 0x22
 800490c:	b292      	uxth	r2, r2
 800490e:	801a      	strh	r2, [r3, #0]
	*(cellVoltages + 18) = (sideB_cellVoltageC[5] << 8) | sideB_cellVoltageC[4];
 8004910:	7e7b      	ldrb	r3, [r7, #25]
 8004912:	b21b      	sxth	r3, r3
 8004914:	021b      	lsls	r3, r3, #8
 8004916:	b21a      	sxth	r2, r3
 8004918:	7e3b      	ldrb	r3, [r7, #24]
 800491a:	b21b      	sxth	r3, r3
 800491c:	4313      	orrs	r3, r2
 800491e:	b21a      	sxth	r2, r3
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	3324      	adds	r3, #36	@ 0x24
 8004924:	b292      	uxth	r2, r2
 8004926:	801a      	strh	r2, [r3, #0]
	*(cellVoltages + 19) = (sideB_cellVoltageD[1] << 8) | sideB_cellVoltageD[0];
 8004928:	7b7b      	ldrb	r3, [r7, #13]
 800492a:	b21b      	sxth	r3, r3
 800492c:	021b      	lsls	r3, r3, #8
 800492e:	b21a      	sxth	r2, r3
 8004930:	7b3b      	ldrb	r3, [r7, #12]
 8004932:	b21b      	sxth	r3, r3
 8004934:	4313      	orrs	r3, r2
 8004936:	b21a      	sxth	r2, r3
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	3326      	adds	r3, #38	@ 0x26
 800493c:	b292      	uxth	r2, r2
 800493e:	801a      	strh	r2, [r3, #0]

}
 8004940:	bf00      	nop
 8004942:	3758      	adds	r7, #88	@ 0x58
 8004944:	46bd      	mov	sp, r7
 8004946:	bd80      	pop	{r7, pc}

08004948 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8004948:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8004980 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800494c:	f7fc fea8 	bl	80016a0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004950:	480c      	ldr	r0, [pc, #48]	@ (8004984 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8004952:	490d      	ldr	r1, [pc, #52]	@ (8004988 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8004954:	4a0d      	ldr	r2, [pc, #52]	@ (800498c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8004956:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004958:	e002      	b.n	8004960 <LoopCopyDataInit>

0800495a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800495a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800495c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800495e:	3304      	adds	r3, #4

08004960 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004960:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004962:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004964:	d3f9      	bcc.n	800495a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004966:	4a0a      	ldr	r2, [pc, #40]	@ (8004990 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8004968:	4c0a      	ldr	r4, [pc, #40]	@ (8004994 <LoopFillZerobss+0x22>)
  movs r3, #0
 800496a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800496c:	e001      	b.n	8004972 <LoopFillZerobss>

0800496e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800496e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004970:	3204      	adds	r2, #4

08004972 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004972:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004974:	d3fb      	bcc.n	800496e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8004976:	f003 fce9 	bl	800834c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800497a:	f7fc f9f9 	bl	8000d70 <main>
  bx  lr    
 800497e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8004980:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004984:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004988:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 800498c:	08008dcc 	.word	0x08008dcc
  ldr r2, =_sbss
 8004990:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8004994:	20000530 	.word	0x20000530

08004998 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004998:	e7fe      	b.n	8004998 <ADC_IRQHandler>
	...

0800499c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800499c:	b580      	push	{r7, lr}
 800499e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80049a0:	4b0e      	ldr	r3, [pc, #56]	@ (80049dc <HAL_Init+0x40>)
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	4a0d      	ldr	r2, [pc, #52]	@ (80049dc <HAL_Init+0x40>)
 80049a6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80049aa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80049ac:	4b0b      	ldr	r3, [pc, #44]	@ (80049dc <HAL_Init+0x40>)
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	4a0a      	ldr	r2, [pc, #40]	@ (80049dc <HAL_Init+0x40>)
 80049b2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80049b6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80049b8:	4b08      	ldr	r3, [pc, #32]	@ (80049dc <HAL_Init+0x40>)
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	4a07      	ldr	r2, [pc, #28]	@ (80049dc <HAL_Init+0x40>)
 80049be:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80049c2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80049c4:	2003      	movs	r0, #3
 80049c6:	f001 fc1b 	bl	8006200 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80049ca:	200f      	movs	r0, #15
 80049cc:	f000 f808 	bl	80049e0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80049d0:	f7fc fcc0 	bl	8001354 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80049d4:	2300      	movs	r3, #0
}
 80049d6:	4618      	mov	r0, r3
 80049d8:	bd80      	pop	{r7, pc}
 80049da:	bf00      	nop
 80049dc:	40023c00 	.word	0x40023c00

080049e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80049e0:	b580      	push	{r7, lr}
 80049e2:	b082      	sub	sp, #8
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80049e8:	4b12      	ldr	r3, [pc, #72]	@ (8004a34 <HAL_InitTick+0x54>)
 80049ea:	681a      	ldr	r2, [r3, #0]
 80049ec:	4b12      	ldr	r3, [pc, #72]	@ (8004a38 <HAL_InitTick+0x58>)
 80049ee:	781b      	ldrb	r3, [r3, #0]
 80049f0:	4619      	mov	r1, r3
 80049f2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80049f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80049fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80049fe:	4618      	mov	r0, r3
 8004a00:	f001 fc33 	bl	800626a <HAL_SYSTICK_Config>
 8004a04:	4603      	mov	r3, r0
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d001      	beq.n	8004a0e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004a0a:	2301      	movs	r3, #1
 8004a0c:	e00e      	b.n	8004a2c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	2b0f      	cmp	r3, #15
 8004a12:	d80a      	bhi.n	8004a2a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004a14:	2200      	movs	r2, #0
 8004a16:	6879      	ldr	r1, [r7, #4]
 8004a18:	f04f 30ff 	mov.w	r0, #4294967295
 8004a1c:	f001 fbfb 	bl	8006216 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004a20:	4a06      	ldr	r2, [pc, #24]	@ (8004a3c <HAL_InitTick+0x5c>)
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004a26:	2300      	movs	r3, #0
 8004a28:	e000      	b.n	8004a2c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004a2a:	2301      	movs	r3, #1
}
 8004a2c:	4618      	mov	r0, r3
 8004a2e:	3708      	adds	r7, #8
 8004a30:	46bd      	mov	sp, r7
 8004a32:	bd80      	pop	{r7, pc}
 8004a34:	20000000 	.word	0x20000000
 8004a38:	2000000c 	.word	0x2000000c
 8004a3c:	20000008 	.word	0x20000008

08004a40 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004a40:	b480      	push	{r7}
 8004a42:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004a44:	4b06      	ldr	r3, [pc, #24]	@ (8004a60 <HAL_IncTick+0x20>)
 8004a46:	781b      	ldrb	r3, [r3, #0]
 8004a48:	461a      	mov	r2, r3
 8004a4a:	4b06      	ldr	r3, [pc, #24]	@ (8004a64 <HAL_IncTick+0x24>)
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	4413      	add	r3, r2
 8004a50:	4a04      	ldr	r2, [pc, #16]	@ (8004a64 <HAL_IncTick+0x24>)
 8004a52:	6013      	str	r3, [r2, #0]
}
 8004a54:	bf00      	nop
 8004a56:	46bd      	mov	sp, r7
 8004a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5c:	4770      	bx	lr
 8004a5e:	bf00      	nop
 8004a60:	2000000c 	.word	0x2000000c
 8004a64:	200003f4 	.word	0x200003f4

08004a68 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004a68:	b480      	push	{r7}
 8004a6a:	af00      	add	r7, sp, #0
  return uwTick;
 8004a6c:	4b03      	ldr	r3, [pc, #12]	@ (8004a7c <HAL_GetTick+0x14>)
 8004a6e:	681b      	ldr	r3, [r3, #0]
}
 8004a70:	4618      	mov	r0, r3
 8004a72:	46bd      	mov	sp, r7
 8004a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a78:	4770      	bx	lr
 8004a7a:	bf00      	nop
 8004a7c:	200003f4 	.word	0x200003f4

08004a80 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004a80:	b580      	push	{r7, lr}
 8004a82:	b084      	sub	sp, #16
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004a88:	f7ff ffee 	bl	8004a68 <HAL_GetTick>
 8004a8c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a98:	d005      	beq.n	8004aa6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004a9a:	4b0a      	ldr	r3, [pc, #40]	@ (8004ac4 <HAL_Delay+0x44>)
 8004a9c:	781b      	ldrb	r3, [r3, #0]
 8004a9e:	461a      	mov	r2, r3
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	4413      	add	r3, r2
 8004aa4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004aa6:	bf00      	nop
 8004aa8:	f7ff ffde 	bl	8004a68 <HAL_GetTick>
 8004aac:	4602      	mov	r2, r0
 8004aae:	68bb      	ldr	r3, [r7, #8]
 8004ab0:	1ad3      	subs	r3, r2, r3
 8004ab2:	68fa      	ldr	r2, [r7, #12]
 8004ab4:	429a      	cmp	r2, r3
 8004ab6:	d8f7      	bhi.n	8004aa8 <HAL_Delay+0x28>
  {
  }
}
 8004ab8:	bf00      	nop
 8004aba:	bf00      	nop
 8004abc:	3710      	adds	r7, #16
 8004abe:	46bd      	mov	sp, r7
 8004ac0:	bd80      	pop	{r7, pc}
 8004ac2:	bf00      	nop
 8004ac4:	2000000c 	.word	0x2000000c

08004ac8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004ac8:	b580      	push	{r7, lr}
 8004aca:	b084      	sub	sp, #16
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004ad0:	2300      	movs	r3, #0
 8004ad2:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d101      	bne.n	8004ade <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8004ada:	2301      	movs	r3, #1
 8004adc:	e033      	b.n	8004b46 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d109      	bne.n	8004afa <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004ae6:	6878      	ldr	r0, [r7, #4]
 8004ae8:	f7fc fc5c 	bl	80013a4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	2200      	movs	r2, #0
 8004af0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	2200      	movs	r2, #0
 8004af6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004afe:	f003 0310 	and.w	r3, r3, #16
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d118      	bne.n	8004b38 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b0a:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8004b0e:	f023 0302 	bic.w	r3, r3, #2
 8004b12:	f043 0202 	orr.w	r2, r3, #2
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8004b1a:	6878      	ldr	r0, [r7, #4]
 8004b1c:	f000 fae8 	bl	80050f0 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	2200      	movs	r2, #0
 8004b24:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b2a:	f023 0303 	bic.w	r3, r3, #3
 8004b2e:	f043 0201 	orr.w	r2, r3, #1
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	641a      	str	r2, [r3, #64]	@ 0x40
 8004b36:	e001      	b.n	8004b3c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8004b38:	2301      	movs	r3, #1
 8004b3a:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	2200      	movs	r2, #0
 8004b40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8004b44:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b46:	4618      	mov	r0, r3
 8004b48:	3710      	adds	r7, #16
 8004b4a:	46bd      	mov	sp, r7
 8004b4c:	bd80      	pop	{r7, pc}
	...

08004b50 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8004b50:	b480      	push	{r7}
 8004b52:	b085      	sub	sp, #20
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8004b58:	2300      	movs	r3, #0
 8004b5a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004b62:	2b01      	cmp	r3, #1
 8004b64:	d101      	bne.n	8004b6a <HAL_ADC_Start+0x1a>
 8004b66:	2302      	movs	r3, #2
 8004b68:	e0b2      	b.n	8004cd0 <HAL_ADC_Start+0x180>
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	2201      	movs	r2, #1
 8004b6e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	689b      	ldr	r3, [r3, #8]
 8004b78:	f003 0301 	and.w	r3, r3, #1
 8004b7c:	2b01      	cmp	r3, #1
 8004b7e:	d018      	beq.n	8004bb2 <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	689a      	ldr	r2, [r3, #8]
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f042 0201 	orr.w	r2, r2, #1
 8004b8e:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8004b90:	4b52      	ldr	r3, [pc, #328]	@ (8004cdc <HAL_ADC_Start+0x18c>)
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	4a52      	ldr	r2, [pc, #328]	@ (8004ce0 <HAL_ADC_Start+0x190>)
 8004b96:	fba2 2303 	umull	r2, r3, r2, r3
 8004b9a:	0c9a      	lsrs	r2, r3, #18
 8004b9c:	4613      	mov	r3, r2
 8004b9e:	005b      	lsls	r3, r3, #1
 8004ba0:	4413      	add	r3, r2
 8004ba2:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8004ba4:	e002      	b.n	8004bac <HAL_ADC_Start+0x5c>
    {
      counter--;
 8004ba6:	68bb      	ldr	r3, [r7, #8]
 8004ba8:	3b01      	subs	r3, #1
 8004baa:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8004bac:	68bb      	ldr	r3, [r7, #8]
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d1f9      	bne.n	8004ba6 <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	689b      	ldr	r3, [r3, #8]
 8004bb8:	f003 0301 	and.w	r3, r3, #1
 8004bbc:	2b01      	cmp	r3, #1
 8004bbe:	d17a      	bne.n	8004cb6 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bc4:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8004bc8:	f023 0301 	bic.w	r3, r3, #1
 8004bcc:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	685b      	ldr	r3, [r3, #4]
 8004bda:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d007      	beq.n	8004bf2 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004be6:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8004bea:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bf6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004bfa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004bfe:	d106      	bne.n	8004c0e <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c04:	f023 0206 	bic.w	r2, r3, #6
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	645a      	str	r2, [r3, #68]	@ 0x44
 8004c0c:	e002      	b.n	8004c14 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	2200      	movs	r2, #0
 8004c12:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	2200      	movs	r2, #0
 8004c18:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004c1c:	4b31      	ldr	r3, [pc, #196]	@ (8004ce4 <HAL_ADC_Start+0x194>)
 8004c1e:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8004c28:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	685b      	ldr	r3, [r3, #4]
 8004c2e:	f003 031f 	and.w	r3, r3, #31
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d12a      	bne.n	8004c8c <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	4a2b      	ldr	r2, [pc, #172]	@ (8004ce8 <HAL_ADC_Start+0x198>)
 8004c3c:	4293      	cmp	r3, r2
 8004c3e:	d015      	beq.n	8004c6c <HAL_ADC_Start+0x11c>
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	4a29      	ldr	r2, [pc, #164]	@ (8004cec <HAL_ADC_Start+0x19c>)
 8004c46:	4293      	cmp	r3, r2
 8004c48:	d105      	bne.n	8004c56 <HAL_ADC_Start+0x106>
 8004c4a:	4b26      	ldr	r3, [pc, #152]	@ (8004ce4 <HAL_ADC_Start+0x194>)
 8004c4c:	685b      	ldr	r3, [r3, #4]
 8004c4e:	f003 031f 	and.w	r3, r3, #31
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d00a      	beq.n	8004c6c <HAL_ADC_Start+0x11c>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	4a25      	ldr	r2, [pc, #148]	@ (8004cf0 <HAL_ADC_Start+0x1a0>)
 8004c5c:	4293      	cmp	r3, r2
 8004c5e:	d136      	bne.n	8004cce <HAL_ADC_Start+0x17e>
 8004c60:	4b20      	ldr	r3, [pc, #128]	@ (8004ce4 <HAL_ADC_Start+0x194>)
 8004c62:	685b      	ldr	r3, [r3, #4]
 8004c64:	f003 0310 	and.w	r3, r3, #16
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d130      	bne.n	8004cce <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	689b      	ldr	r3, [r3, #8]
 8004c72:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d129      	bne.n	8004cce <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	689a      	ldr	r2, [r3, #8]
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8004c88:	609a      	str	r2, [r3, #8]
 8004c8a:	e020      	b.n	8004cce <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	4a15      	ldr	r2, [pc, #84]	@ (8004ce8 <HAL_ADC_Start+0x198>)
 8004c92:	4293      	cmp	r3, r2
 8004c94:	d11b      	bne.n	8004cce <HAL_ADC_Start+0x17e>
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	689b      	ldr	r3, [r3, #8]
 8004c9c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d114      	bne.n	8004cce <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	689a      	ldr	r2, [r3, #8]
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8004cb2:	609a      	str	r2, [r3, #8]
 8004cb4:	e00b      	b.n	8004cce <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cba:	f043 0210 	orr.w	r2, r3, #16
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004cc6:	f043 0201 	orr.w	r2, r3, #1
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8004cce:	2300      	movs	r3, #0
}
 8004cd0:	4618      	mov	r0, r3
 8004cd2:	3714      	adds	r7, #20
 8004cd4:	46bd      	mov	sp, r7
 8004cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cda:	4770      	bx	lr
 8004cdc:	20000000 	.word	0x20000000
 8004ce0:	431bde83 	.word	0x431bde83
 8004ce4:	40012300 	.word	0x40012300
 8004ce8:	40012000 	.word	0x40012000
 8004cec:	40012100 	.word	0x40012100
 8004cf0:	40012200 	.word	0x40012200

08004cf4 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8004cf4:	b480      	push	{r7}
 8004cf6:	b083      	sub	sp, #12
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004d02:	2b01      	cmp	r3, #1
 8004d04:	d101      	bne.n	8004d0a <HAL_ADC_Stop+0x16>
 8004d06:	2302      	movs	r3, #2
 8004d08:	e021      	b.n	8004d4e <HAL_ADC_Stop+0x5a>
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	2201      	movs	r2, #1
 8004d0e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	689a      	ldr	r2, [r3, #8]
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	f022 0201 	bic.w	r2, r2, #1
 8004d20:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	689b      	ldr	r3, [r3, #8]
 8004d28:	f003 0301 	and.w	r3, r3, #1
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d109      	bne.n	8004d44 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d34:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8004d38:	f023 0301 	bic.w	r3, r3, #1
 8004d3c:	f043 0201 	orr.w	r2, r3, #1
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	2200      	movs	r2, #0
 8004d48:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8004d4c:	2300      	movs	r3, #0
}
 8004d4e:	4618      	mov	r0, r3
 8004d50:	370c      	adds	r7, #12
 8004d52:	46bd      	mov	sp, r7
 8004d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d58:	4770      	bx	lr

08004d5a <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8004d5a:	b580      	push	{r7, lr}
 8004d5c:	b084      	sub	sp, #16
 8004d5e:	af00      	add	r7, sp, #0
 8004d60:	6078      	str	r0, [r7, #4]
 8004d62:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8004d64:	2300      	movs	r3, #0
 8004d66:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	689b      	ldr	r3, [r3, #8]
 8004d6e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004d72:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004d76:	d113      	bne.n	8004da0 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	689b      	ldr	r3, [r3, #8]
 8004d7e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8004d82:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004d86:	d10b      	bne.n	8004da0 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d8c:	f043 0220 	orr.w	r2, r3, #32
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	2200      	movs	r2, #0
 8004d98:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8004d9c:	2301      	movs	r3, #1
 8004d9e:	e063      	b.n	8004e68 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 8004da0:	f7ff fe62 	bl	8004a68 <HAL_GetTick>
 8004da4:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8004da6:	e021      	b.n	8004dec <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8004da8:	683b      	ldr	r3, [r7, #0]
 8004daa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dae:	d01d      	beq.n	8004dec <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8004db0:	683b      	ldr	r3, [r7, #0]
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d007      	beq.n	8004dc6 <HAL_ADC_PollForConversion+0x6c>
 8004db6:	f7ff fe57 	bl	8004a68 <HAL_GetTick>
 8004dba:	4602      	mov	r2, r0
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	1ad3      	subs	r3, r2, r3
 8004dc0:	683a      	ldr	r2, [r7, #0]
 8004dc2:	429a      	cmp	r2, r3
 8004dc4:	d212      	bcs.n	8004dec <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	f003 0302 	and.w	r3, r3, #2
 8004dd0:	2b02      	cmp	r3, #2
 8004dd2:	d00b      	beq.n	8004dec <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004dd8:	f043 0204 	orr.w	r2, r3, #4
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	2200      	movs	r2, #0
 8004de4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 8004de8:	2303      	movs	r3, #3
 8004dea:	e03d      	b.n	8004e68 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	f003 0302 	and.w	r3, r3, #2
 8004df6:	2b02      	cmp	r3, #2
 8004df8:	d1d6      	bne.n	8004da8 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	f06f 0212 	mvn.w	r2, #18
 8004e02:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e08:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	689b      	ldr	r3, [r3, #8]
 8004e16:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d123      	bne.n	8004e66 <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d11f      	bne.n	8004e66 <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e2c:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d006      	beq.n	8004e42 <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	689b      	ldr	r3, [r3, #8]
 8004e3a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d111      	bne.n	8004e66 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e46:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e52:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d105      	bne.n	8004e66 <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e5e:	f043 0201 	orr.w	r2, r3, #1
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 8004e66:	2300      	movs	r3, #0
}
 8004e68:	4618      	mov	r0, r3
 8004e6a:	3710      	adds	r7, #16
 8004e6c:	46bd      	mov	sp, r7
 8004e6e:	bd80      	pop	{r7, pc}

08004e70 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8004e70:	b480      	push	{r7}
 8004e72:	b083      	sub	sp, #12
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8004e7e:	4618      	mov	r0, r3
 8004e80:	370c      	adds	r7, #12
 8004e82:	46bd      	mov	sp, r7
 8004e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e88:	4770      	bx	lr
	...

08004e8c <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8004e8c:	b480      	push	{r7}
 8004e8e:	b085      	sub	sp, #20
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	6078      	str	r0, [r7, #4]
 8004e94:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8004e96:	2300      	movs	r3, #0
 8004e98:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004ea0:	2b01      	cmp	r3, #1
 8004ea2:	d101      	bne.n	8004ea8 <HAL_ADC_ConfigChannel+0x1c>
 8004ea4:	2302      	movs	r3, #2
 8004ea6:	e113      	b.n	80050d0 <HAL_ADC_ConfigChannel+0x244>
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	2201      	movs	r2, #1
 8004eac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8004eb0:	683b      	ldr	r3, [r7, #0]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	2b09      	cmp	r3, #9
 8004eb6:	d925      	bls.n	8004f04 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	68d9      	ldr	r1, [r3, #12]
 8004ebe:	683b      	ldr	r3, [r7, #0]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	b29b      	uxth	r3, r3
 8004ec4:	461a      	mov	r2, r3
 8004ec6:	4613      	mov	r3, r2
 8004ec8:	005b      	lsls	r3, r3, #1
 8004eca:	4413      	add	r3, r2
 8004ecc:	3b1e      	subs	r3, #30
 8004ece:	2207      	movs	r2, #7
 8004ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8004ed4:	43da      	mvns	r2, r3
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	400a      	ands	r2, r1
 8004edc:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	68d9      	ldr	r1, [r3, #12]
 8004ee4:	683b      	ldr	r3, [r7, #0]
 8004ee6:	689a      	ldr	r2, [r3, #8]
 8004ee8:	683b      	ldr	r3, [r7, #0]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	b29b      	uxth	r3, r3
 8004eee:	4618      	mov	r0, r3
 8004ef0:	4603      	mov	r3, r0
 8004ef2:	005b      	lsls	r3, r3, #1
 8004ef4:	4403      	add	r3, r0
 8004ef6:	3b1e      	subs	r3, #30
 8004ef8:	409a      	lsls	r2, r3
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	430a      	orrs	r2, r1
 8004f00:	60da      	str	r2, [r3, #12]
 8004f02:	e022      	b.n	8004f4a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	6919      	ldr	r1, [r3, #16]
 8004f0a:	683b      	ldr	r3, [r7, #0]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	b29b      	uxth	r3, r3
 8004f10:	461a      	mov	r2, r3
 8004f12:	4613      	mov	r3, r2
 8004f14:	005b      	lsls	r3, r3, #1
 8004f16:	4413      	add	r3, r2
 8004f18:	2207      	movs	r2, #7
 8004f1a:	fa02 f303 	lsl.w	r3, r2, r3
 8004f1e:	43da      	mvns	r2, r3
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	400a      	ands	r2, r1
 8004f26:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	6919      	ldr	r1, [r3, #16]
 8004f2e:	683b      	ldr	r3, [r7, #0]
 8004f30:	689a      	ldr	r2, [r3, #8]
 8004f32:	683b      	ldr	r3, [r7, #0]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	b29b      	uxth	r3, r3
 8004f38:	4618      	mov	r0, r3
 8004f3a:	4603      	mov	r3, r0
 8004f3c:	005b      	lsls	r3, r3, #1
 8004f3e:	4403      	add	r3, r0
 8004f40:	409a      	lsls	r2, r3
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	430a      	orrs	r2, r1
 8004f48:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8004f4a:	683b      	ldr	r3, [r7, #0]
 8004f4c:	685b      	ldr	r3, [r3, #4]
 8004f4e:	2b06      	cmp	r3, #6
 8004f50:	d824      	bhi.n	8004f9c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8004f58:	683b      	ldr	r3, [r7, #0]
 8004f5a:	685a      	ldr	r2, [r3, #4]
 8004f5c:	4613      	mov	r3, r2
 8004f5e:	009b      	lsls	r3, r3, #2
 8004f60:	4413      	add	r3, r2
 8004f62:	3b05      	subs	r3, #5
 8004f64:	221f      	movs	r2, #31
 8004f66:	fa02 f303 	lsl.w	r3, r2, r3
 8004f6a:	43da      	mvns	r2, r3
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	400a      	ands	r2, r1
 8004f72:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8004f7a:	683b      	ldr	r3, [r7, #0]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	b29b      	uxth	r3, r3
 8004f80:	4618      	mov	r0, r3
 8004f82:	683b      	ldr	r3, [r7, #0]
 8004f84:	685a      	ldr	r2, [r3, #4]
 8004f86:	4613      	mov	r3, r2
 8004f88:	009b      	lsls	r3, r3, #2
 8004f8a:	4413      	add	r3, r2
 8004f8c:	3b05      	subs	r3, #5
 8004f8e:	fa00 f203 	lsl.w	r2, r0, r3
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	430a      	orrs	r2, r1
 8004f98:	635a      	str	r2, [r3, #52]	@ 0x34
 8004f9a:	e04c      	b.n	8005036 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8004f9c:	683b      	ldr	r3, [r7, #0]
 8004f9e:	685b      	ldr	r3, [r3, #4]
 8004fa0:	2b0c      	cmp	r3, #12
 8004fa2:	d824      	bhi.n	8004fee <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8004faa:	683b      	ldr	r3, [r7, #0]
 8004fac:	685a      	ldr	r2, [r3, #4]
 8004fae:	4613      	mov	r3, r2
 8004fb0:	009b      	lsls	r3, r3, #2
 8004fb2:	4413      	add	r3, r2
 8004fb4:	3b23      	subs	r3, #35	@ 0x23
 8004fb6:	221f      	movs	r2, #31
 8004fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8004fbc:	43da      	mvns	r2, r3
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	400a      	ands	r2, r1
 8004fc4:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8004fcc:	683b      	ldr	r3, [r7, #0]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	b29b      	uxth	r3, r3
 8004fd2:	4618      	mov	r0, r3
 8004fd4:	683b      	ldr	r3, [r7, #0]
 8004fd6:	685a      	ldr	r2, [r3, #4]
 8004fd8:	4613      	mov	r3, r2
 8004fda:	009b      	lsls	r3, r3, #2
 8004fdc:	4413      	add	r3, r2
 8004fde:	3b23      	subs	r3, #35	@ 0x23
 8004fe0:	fa00 f203 	lsl.w	r2, r0, r3
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	430a      	orrs	r2, r1
 8004fea:	631a      	str	r2, [r3, #48]	@ 0x30
 8004fec:	e023      	b.n	8005036 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004ff4:	683b      	ldr	r3, [r7, #0]
 8004ff6:	685a      	ldr	r2, [r3, #4]
 8004ff8:	4613      	mov	r3, r2
 8004ffa:	009b      	lsls	r3, r3, #2
 8004ffc:	4413      	add	r3, r2
 8004ffe:	3b41      	subs	r3, #65	@ 0x41
 8005000:	221f      	movs	r2, #31
 8005002:	fa02 f303 	lsl.w	r3, r2, r3
 8005006:	43da      	mvns	r2, r3
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	400a      	ands	r2, r1
 800500e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8005016:	683b      	ldr	r3, [r7, #0]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	b29b      	uxth	r3, r3
 800501c:	4618      	mov	r0, r3
 800501e:	683b      	ldr	r3, [r7, #0]
 8005020:	685a      	ldr	r2, [r3, #4]
 8005022:	4613      	mov	r3, r2
 8005024:	009b      	lsls	r3, r3, #2
 8005026:	4413      	add	r3, r2
 8005028:	3b41      	subs	r3, #65	@ 0x41
 800502a:	fa00 f203 	lsl.w	r2, r0, r3
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	430a      	orrs	r2, r1
 8005034:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005036:	4b29      	ldr	r3, [pc, #164]	@ (80050dc <HAL_ADC_ConfigChannel+0x250>)
 8005038:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	4a28      	ldr	r2, [pc, #160]	@ (80050e0 <HAL_ADC_ConfigChannel+0x254>)
 8005040:	4293      	cmp	r3, r2
 8005042:	d10f      	bne.n	8005064 <HAL_ADC_ConfigChannel+0x1d8>
 8005044:	683b      	ldr	r3, [r7, #0]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	2b12      	cmp	r3, #18
 800504a:	d10b      	bne.n	8005064 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	685b      	ldr	r3, [r3, #4]
 8005050:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	685b      	ldr	r3, [r3, #4]
 800505c:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	4a1d      	ldr	r2, [pc, #116]	@ (80050e0 <HAL_ADC_ConfigChannel+0x254>)
 800506a:	4293      	cmp	r3, r2
 800506c:	d12b      	bne.n	80050c6 <HAL_ADC_ConfigChannel+0x23a>
 800506e:	683b      	ldr	r3, [r7, #0]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	4a1c      	ldr	r2, [pc, #112]	@ (80050e4 <HAL_ADC_ConfigChannel+0x258>)
 8005074:	4293      	cmp	r3, r2
 8005076:	d003      	beq.n	8005080 <HAL_ADC_ConfigChannel+0x1f4>
 8005078:	683b      	ldr	r3, [r7, #0]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	2b11      	cmp	r3, #17
 800507e:	d122      	bne.n	80050c6 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	685b      	ldr	r3, [r3, #4]
 8005084:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	685b      	ldr	r3, [r3, #4]
 8005090:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005098:	683b      	ldr	r3, [r7, #0]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	4a11      	ldr	r2, [pc, #68]	@ (80050e4 <HAL_ADC_ConfigChannel+0x258>)
 800509e:	4293      	cmp	r3, r2
 80050a0:	d111      	bne.n	80050c6 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80050a2:	4b11      	ldr	r3, [pc, #68]	@ (80050e8 <HAL_ADC_ConfigChannel+0x25c>)
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	4a11      	ldr	r2, [pc, #68]	@ (80050ec <HAL_ADC_ConfigChannel+0x260>)
 80050a8:	fba2 2303 	umull	r2, r3, r2, r3
 80050ac:	0c9a      	lsrs	r2, r3, #18
 80050ae:	4613      	mov	r3, r2
 80050b0:	009b      	lsls	r3, r3, #2
 80050b2:	4413      	add	r3, r2
 80050b4:	005b      	lsls	r3, r3, #1
 80050b6:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80050b8:	e002      	b.n	80050c0 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80050ba:	68bb      	ldr	r3, [r7, #8]
 80050bc:	3b01      	subs	r3, #1
 80050be:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80050c0:	68bb      	ldr	r3, [r7, #8]
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d1f9      	bne.n	80050ba <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	2200      	movs	r2, #0
 80050ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80050ce:	2300      	movs	r3, #0
}
 80050d0:	4618      	mov	r0, r3
 80050d2:	3714      	adds	r7, #20
 80050d4:	46bd      	mov	sp, r7
 80050d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050da:	4770      	bx	lr
 80050dc:	40012300 	.word	0x40012300
 80050e0:	40012000 	.word	0x40012000
 80050e4:	10000012 	.word	0x10000012
 80050e8:	20000000 	.word	0x20000000
 80050ec:	431bde83 	.word	0x431bde83

080050f0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 80050f0:	b480      	push	{r7}
 80050f2:	b085      	sub	sp, #20
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80050f8:	4b79      	ldr	r3, [pc, #484]	@ (80052e0 <ADC_Init+0x1f0>)
 80050fa:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	685b      	ldr	r3, [r3, #4]
 8005100:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	685a      	ldr	r2, [r3, #4]
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	685b      	ldr	r3, [r3, #4]
 8005110:	431a      	orrs	r2, r3
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	685a      	ldr	r2, [r3, #4]
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005124:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	6859      	ldr	r1, [r3, #4]
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	691b      	ldr	r3, [r3, #16]
 8005130:	021a      	lsls	r2, r3, #8
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	430a      	orrs	r2, r1
 8005138:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	685a      	ldr	r2, [r3, #4]
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8005148:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	6859      	ldr	r1, [r3, #4]
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	689a      	ldr	r2, [r3, #8]
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	430a      	orrs	r2, r1
 800515a:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	689a      	ldr	r2, [r3, #8]
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800516a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	6899      	ldr	r1, [r3, #8]
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	68da      	ldr	r2, [r3, #12]
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	430a      	orrs	r2, r1
 800517c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005182:	4a58      	ldr	r2, [pc, #352]	@ (80052e4 <ADC_Init+0x1f4>)
 8005184:	4293      	cmp	r3, r2
 8005186:	d022      	beq.n	80051ce <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	689a      	ldr	r2, [r3, #8]
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8005196:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	6899      	ldr	r1, [r3, #8]
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	430a      	orrs	r2, r1
 80051a8:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	689a      	ldr	r2, [r3, #8]
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80051b8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	6899      	ldr	r1, [r3, #8]
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	430a      	orrs	r2, r1
 80051ca:	609a      	str	r2, [r3, #8]
 80051cc:	e00f      	b.n	80051ee <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	689a      	ldr	r2, [r3, #8]
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80051dc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	689a      	ldr	r2, [r3, #8]
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80051ec:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	689a      	ldr	r2, [r3, #8]
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	f022 0202 	bic.w	r2, r2, #2
 80051fc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	6899      	ldr	r1, [r3, #8]
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	7e1b      	ldrb	r3, [r3, #24]
 8005208:	005a      	lsls	r2, r3, #1
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	430a      	orrs	r2, r1
 8005210:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005218:	2b00      	cmp	r3, #0
 800521a:	d01b      	beq.n	8005254 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	685a      	ldr	r2, [r3, #4]
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800522a:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	685a      	ldr	r2, [r3, #4]
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800523a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	6859      	ldr	r1, [r3, #4]
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005246:	3b01      	subs	r3, #1
 8005248:	035a      	lsls	r2, r3, #13
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	430a      	orrs	r2, r1
 8005250:	605a      	str	r2, [r3, #4]
 8005252:	e007      	b.n	8005264 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	685a      	ldr	r2, [r3, #4]
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005262:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8005272:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	69db      	ldr	r3, [r3, #28]
 800527e:	3b01      	subs	r3, #1
 8005280:	051a      	lsls	r2, r3, #20
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	430a      	orrs	r2, r1
 8005288:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	689a      	ldr	r2, [r3, #8]
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8005298:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	6899      	ldr	r1, [r3, #8]
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80052a6:	025a      	lsls	r2, r3, #9
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	430a      	orrs	r2, r1
 80052ae:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	689a      	ldr	r2, [r3, #8]
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80052be:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	6899      	ldr	r1, [r3, #8]
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	695b      	ldr	r3, [r3, #20]
 80052ca:	029a      	lsls	r2, r3, #10
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	430a      	orrs	r2, r1
 80052d2:	609a      	str	r2, [r3, #8]
}
 80052d4:	bf00      	nop
 80052d6:	3714      	adds	r7, #20
 80052d8:	46bd      	mov	sp, r7
 80052da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052de:	4770      	bx	lr
 80052e0:	40012300 	.word	0x40012300
 80052e4:	0f000001 	.word	0x0f000001

080052e8 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80052e8:	b580      	push	{r7, lr}
 80052ea:	b084      	sub	sp, #16
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d101      	bne.n	80052fa <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80052f6:	2301      	movs	r3, #1
 80052f8:	e0ed      	b.n	80054d6 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005300:	b2db      	uxtb	r3, r3
 8005302:	2b00      	cmp	r3, #0
 8005304:	d102      	bne.n	800530c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8005306:	6878      	ldr	r0, [r7, #4]
 8005308:	f7fc f890 	bl	800142c <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	681a      	ldr	r2, [r3, #0]
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	f042 0201 	orr.w	r2, r2, #1
 800531a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800531c:	f7ff fba4 	bl	8004a68 <HAL_GetTick>
 8005320:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8005322:	e012      	b.n	800534a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8005324:	f7ff fba0 	bl	8004a68 <HAL_GetTick>
 8005328:	4602      	mov	r2, r0
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	1ad3      	subs	r3, r2, r3
 800532e:	2b0a      	cmp	r3, #10
 8005330:	d90b      	bls.n	800534a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005336:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	2205      	movs	r2, #5
 8005342:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8005346:	2301      	movs	r3, #1
 8005348:	e0c5      	b.n	80054d6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	685b      	ldr	r3, [r3, #4]
 8005350:	f003 0301 	and.w	r3, r3, #1
 8005354:	2b00      	cmp	r3, #0
 8005356:	d0e5      	beq.n	8005324 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	681a      	ldr	r2, [r3, #0]
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	f022 0202 	bic.w	r2, r2, #2
 8005366:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005368:	f7ff fb7e 	bl	8004a68 <HAL_GetTick>
 800536c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800536e:	e012      	b.n	8005396 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8005370:	f7ff fb7a 	bl	8004a68 <HAL_GetTick>
 8005374:	4602      	mov	r2, r0
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	1ad3      	subs	r3, r2, r3
 800537a:	2b0a      	cmp	r3, #10
 800537c:	d90b      	bls.n	8005396 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005382:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	2205      	movs	r2, #5
 800538e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8005392:	2301      	movs	r3, #1
 8005394:	e09f      	b.n	80054d6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	685b      	ldr	r3, [r3, #4]
 800539c:	f003 0302 	and.w	r3, r3, #2
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d1e5      	bne.n	8005370 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	7e1b      	ldrb	r3, [r3, #24]
 80053a8:	2b01      	cmp	r3, #1
 80053aa:	d108      	bne.n	80053be <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	681a      	ldr	r2, [r3, #0]
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80053ba:	601a      	str	r2, [r3, #0]
 80053bc:	e007      	b.n	80053ce <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	681a      	ldr	r2, [r3, #0]
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80053cc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	7e5b      	ldrb	r3, [r3, #25]
 80053d2:	2b01      	cmp	r3, #1
 80053d4:	d108      	bne.n	80053e8 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	681a      	ldr	r2, [r3, #0]
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80053e4:	601a      	str	r2, [r3, #0]
 80053e6:	e007      	b.n	80053f8 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	681a      	ldr	r2, [r3, #0]
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80053f6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	7e9b      	ldrb	r3, [r3, #26]
 80053fc:	2b01      	cmp	r3, #1
 80053fe:	d108      	bne.n	8005412 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	681a      	ldr	r2, [r3, #0]
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	f042 0220 	orr.w	r2, r2, #32
 800540e:	601a      	str	r2, [r3, #0]
 8005410:	e007      	b.n	8005422 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	681a      	ldr	r2, [r3, #0]
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	f022 0220 	bic.w	r2, r2, #32
 8005420:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	7edb      	ldrb	r3, [r3, #27]
 8005426:	2b01      	cmp	r3, #1
 8005428:	d108      	bne.n	800543c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	681a      	ldr	r2, [r3, #0]
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	f022 0210 	bic.w	r2, r2, #16
 8005438:	601a      	str	r2, [r3, #0]
 800543a:	e007      	b.n	800544c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	681a      	ldr	r2, [r3, #0]
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	f042 0210 	orr.w	r2, r2, #16
 800544a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	7f1b      	ldrb	r3, [r3, #28]
 8005450:	2b01      	cmp	r3, #1
 8005452:	d108      	bne.n	8005466 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	681a      	ldr	r2, [r3, #0]
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	f042 0208 	orr.w	r2, r2, #8
 8005462:	601a      	str	r2, [r3, #0]
 8005464:	e007      	b.n	8005476 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	681a      	ldr	r2, [r3, #0]
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	f022 0208 	bic.w	r2, r2, #8
 8005474:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	7f5b      	ldrb	r3, [r3, #29]
 800547a:	2b01      	cmp	r3, #1
 800547c:	d108      	bne.n	8005490 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	681a      	ldr	r2, [r3, #0]
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	f042 0204 	orr.w	r2, r2, #4
 800548c:	601a      	str	r2, [r3, #0]
 800548e:	e007      	b.n	80054a0 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	681a      	ldr	r2, [r3, #0]
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	f022 0204 	bic.w	r2, r2, #4
 800549e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	689a      	ldr	r2, [r3, #8]
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	68db      	ldr	r3, [r3, #12]
 80054a8:	431a      	orrs	r2, r3
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	691b      	ldr	r3, [r3, #16]
 80054ae:	431a      	orrs	r2, r3
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	695b      	ldr	r3, [r3, #20]
 80054b4:	ea42 0103 	orr.w	r1, r2, r3
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	685b      	ldr	r3, [r3, #4]
 80054bc:	1e5a      	subs	r2, r3, #1
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	430a      	orrs	r2, r1
 80054c4:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	2200      	movs	r2, #0
 80054ca:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	2201      	movs	r2, #1
 80054d0:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80054d4:	2300      	movs	r3, #0
}
 80054d6:	4618      	mov	r0, r3
 80054d8:	3710      	adds	r7, #16
 80054da:	46bd      	mov	sp, r7
 80054dc:	bd80      	pop	{r7, pc}
	...

080054e0 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 80054e0:	b480      	push	{r7}
 80054e2:	b087      	sub	sp, #28
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	6078      	str	r0, [r7, #4]
 80054e8:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80054f6:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80054f8:	7cfb      	ldrb	r3, [r7, #19]
 80054fa:	2b01      	cmp	r3, #1
 80054fc:	d003      	beq.n	8005506 <HAL_CAN_ConfigFilter+0x26>
 80054fe:	7cfb      	ldrb	r3, [r7, #19]
 8005500:	2b02      	cmp	r3, #2
 8005502:	f040 80be 	bne.w	8005682 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8005506:	4b65      	ldr	r3, [pc, #404]	@ (800569c <HAL_CAN_ConfigFilter+0x1bc>)
 8005508:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800550a:	697b      	ldr	r3, [r7, #20]
 800550c:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8005510:	f043 0201 	orr.w	r2, r3, #1
 8005514:	697b      	ldr	r3, [r7, #20]
 8005516:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 800551a:	697b      	ldr	r3, [r7, #20]
 800551c:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8005520:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 8005524:	697b      	ldr	r3, [r7, #20]
 8005526:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 800552a:	697b      	ldr	r3, [r7, #20]
 800552c:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8005530:	683b      	ldr	r3, [r7, #0]
 8005532:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005534:	021b      	lsls	r3, r3, #8
 8005536:	431a      	orrs	r2, r3
 8005538:	697b      	ldr	r3, [r7, #20]
 800553a:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800553e:	683b      	ldr	r3, [r7, #0]
 8005540:	695b      	ldr	r3, [r3, #20]
 8005542:	f003 031f 	and.w	r3, r3, #31
 8005546:	2201      	movs	r2, #1
 8005548:	fa02 f303 	lsl.w	r3, r2, r3
 800554c:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800554e:	697b      	ldr	r3, [r7, #20]
 8005550:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	43db      	mvns	r3, r3
 8005558:	401a      	ands	r2, r3
 800555a:	697b      	ldr	r3, [r7, #20]
 800555c:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8005560:	683b      	ldr	r3, [r7, #0]
 8005562:	69db      	ldr	r3, [r3, #28]
 8005564:	2b00      	cmp	r3, #0
 8005566:	d123      	bne.n	80055b0 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8005568:	697b      	ldr	r3, [r7, #20]
 800556a:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	43db      	mvns	r3, r3
 8005572:	401a      	ands	r2, r3
 8005574:	697b      	ldr	r3, [r7, #20]
 8005576:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800557a:	683b      	ldr	r3, [r7, #0]
 800557c:	68db      	ldr	r3, [r3, #12]
 800557e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8005580:	683b      	ldr	r3, [r7, #0]
 8005582:	685b      	ldr	r3, [r3, #4]
 8005584:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8005586:	683a      	ldr	r2, [r7, #0]
 8005588:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800558a:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800558c:	697b      	ldr	r3, [r7, #20]
 800558e:	3248      	adds	r2, #72	@ 0x48
 8005590:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8005594:	683b      	ldr	r3, [r7, #0]
 8005596:	689b      	ldr	r3, [r3, #8]
 8005598:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800559a:	683b      	ldr	r3, [r7, #0]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80055a0:	683b      	ldr	r3, [r7, #0]
 80055a2:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80055a4:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80055a6:	6979      	ldr	r1, [r7, #20]
 80055a8:	3348      	adds	r3, #72	@ 0x48
 80055aa:	00db      	lsls	r3, r3, #3
 80055ac:	440b      	add	r3, r1
 80055ae:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80055b0:	683b      	ldr	r3, [r7, #0]
 80055b2:	69db      	ldr	r3, [r3, #28]
 80055b4:	2b01      	cmp	r3, #1
 80055b6:	d122      	bne.n	80055fe <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80055b8:	697b      	ldr	r3, [r7, #20]
 80055ba:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	431a      	orrs	r2, r3
 80055c2:	697b      	ldr	r3, [r7, #20]
 80055c4:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80055c8:	683b      	ldr	r3, [r7, #0]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80055ce:	683b      	ldr	r3, [r7, #0]
 80055d0:	685b      	ldr	r3, [r3, #4]
 80055d2:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80055d4:	683a      	ldr	r2, [r7, #0]
 80055d6:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80055d8:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80055da:	697b      	ldr	r3, [r7, #20]
 80055dc:	3248      	adds	r2, #72	@ 0x48
 80055de:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80055e2:	683b      	ldr	r3, [r7, #0]
 80055e4:	689b      	ldr	r3, [r3, #8]
 80055e6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80055e8:	683b      	ldr	r3, [r7, #0]
 80055ea:	68db      	ldr	r3, [r3, #12]
 80055ec:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80055ee:	683b      	ldr	r3, [r7, #0]
 80055f0:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80055f2:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80055f4:	6979      	ldr	r1, [r7, #20]
 80055f6:	3348      	adds	r3, #72	@ 0x48
 80055f8:	00db      	lsls	r3, r3, #3
 80055fa:	440b      	add	r3, r1
 80055fc:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80055fe:	683b      	ldr	r3, [r7, #0]
 8005600:	699b      	ldr	r3, [r3, #24]
 8005602:	2b00      	cmp	r3, #0
 8005604:	d109      	bne.n	800561a <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8005606:	697b      	ldr	r3, [r7, #20]
 8005608:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	43db      	mvns	r3, r3
 8005610:	401a      	ands	r2, r3
 8005612:	697b      	ldr	r3, [r7, #20]
 8005614:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8005618:	e007      	b.n	800562a <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800561a:	697b      	ldr	r3, [r7, #20]
 800561c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	431a      	orrs	r2, r3
 8005624:	697b      	ldr	r3, [r7, #20]
 8005626:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800562a:	683b      	ldr	r3, [r7, #0]
 800562c:	691b      	ldr	r3, [r3, #16]
 800562e:	2b00      	cmp	r3, #0
 8005630:	d109      	bne.n	8005646 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8005632:	697b      	ldr	r3, [r7, #20]
 8005634:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	43db      	mvns	r3, r3
 800563c:	401a      	ands	r2, r3
 800563e:	697b      	ldr	r3, [r7, #20]
 8005640:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8005644:	e007      	b.n	8005656 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8005646:	697b      	ldr	r3, [r7, #20]
 8005648:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	431a      	orrs	r2, r3
 8005650:	697b      	ldr	r3, [r7, #20]
 8005652:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8005656:	683b      	ldr	r3, [r7, #0]
 8005658:	6a1b      	ldr	r3, [r3, #32]
 800565a:	2b01      	cmp	r3, #1
 800565c:	d107      	bne.n	800566e <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800565e:	697b      	ldr	r3, [r7, #20]
 8005660:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	431a      	orrs	r2, r3
 8005668:	697b      	ldr	r3, [r7, #20]
 800566a:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800566e:	697b      	ldr	r3, [r7, #20]
 8005670:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8005674:	f023 0201 	bic.w	r2, r3, #1
 8005678:	697b      	ldr	r3, [r7, #20]
 800567a:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 800567e:	2300      	movs	r3, #0
 8005680:	e006      	b.n	8005690 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005686:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800568e:	2301      	movs	r3, #1
  }
}
 8005690:	4618      	mov	r0, r3
 8005692:	371c      	adds	r7, #28
 8005694:	46bd      	mov	sp, r7
 8005696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800569a:	4770      	bx	lr
 800569c:	40006400 	.word	0x40006400

080056a0 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80056a0:	b580      	push	{r7, lr}
 80056a2:	b084      	sub	sp, #16
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	f893 3020 	ldrb.w	r3, [r3, #32]
 80056ae:	b2db      	uxtb	r3, r3
 80056b0:	2b01      	cmp	r3, #1
 80056b2:	d12e      	bne.n	8005712 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	2202      	movs	r2, #2
 80056b8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	681a      	ldr	r2, [r3, #0]
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	f022 0201 	bic.w	r2, r2, #1
 80056ca:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80056cc:	f7ff f9cc 	bl	8004a68 <HAL_GetTick>
 80056d0:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80056d2:	e012      	b.n	80056fa <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80056d4:	f7ff f9c8 	bl	8004a68 <HAL_GetTick>
 80056d8:	4602      	mov	r2, r0
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	1ad3      	subs	r3, r2, r3
 80056de:	2b0a      	cmp	r3, #10
 80056e0:	d90b      	bls.n	80056fa <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056e6:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	2205      	movs	r2, #5
 80056f2:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80056f6:	2301      	movs	r3, #1
 80056f8:	e012      	b.n	8005720 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	685b      	ldr	r3, [r3, #4]
 8005700:	f003 0301 	and.w	r3, r3, #1
 8005704:	2b00      	cmp	r3, #0
 8005706:	d1e5      	bne.n	80056d4 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	2200      	movs	r2, #0
 800570c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 800570e:	2300      	movs	r3, #0
 8005710:	e006      	b.n	8005720 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005716:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800571e:	2301      	movs	r3, #1
  }
}
 8005720:	4618      	mov	r0, r3
 8005722:	3710      	adds	r7, #16
 8005724:	46bd      	mov	sp, r7
 8005726:	bd80      	pop	{r7, pc}

08005728 <HAL_CAN_Stop>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Stop(CAN_HandleTypeDef *hcan)
{
 8005728:	b580      	push	{r7, lr}
 800572a:	b084      	sub	sp, #16
 800572c:	af00      	add	r7, sp, #0
 800572e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_LISTENING)
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005736:	b2db      	uxtb	r3, r3
 8005738:	2b02      	cmp	r3, #2
 800573a:	d133      	bne.n	80057a4 <HAL_CAN_Stop+0x7c>
  {
    /* Request initialisation */
    SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	681a      	ldr	r2, [r3, #0]
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	f042 0201 	orr.w	r2, r2, #1
 800574a:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800574c:	f7ff f98c 	bl	8004a68 <HAL_GetTick>
 8005750:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8005752:	e012      	b.n	800577a <HAL_CAN_Stop+0x52>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8005754:	f7ff f988 	bl	8004a68 <HAL_GetTick>
 8005758:	4602      	mov	r2, r0
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	1ad3      	subs	r3, r2, r3
 800575e:	2b0a      	cmp	r3, #10
 8005760:	d90b      	bls.n	800577a <HAL_CAN_Stop+0x52>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005766:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	2205      	movs	r2, #5
 8005772:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8005776:	2301      	movs	r3, #1
 8005778:	e01b      	b.n	80057b2 <HAL_CAN_Stop+0x8a>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	685b      	ldr	r3, [r3, #4]
 8005780:	f003 0301 	and.w	r3, r3, #1
 8005784:	2b00      	cmp	r3, #0
 8005786:	d0e5      	beq.n	8005754 <HAL_CAN_Stop+0x2c>
      }
    }

    /* Exit from sleep mode */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	681a      	ldr	r2, [r3, #0]
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	f022 0202 	bic.w	r2, r2, #2
 8005796:	601a      	str	r2, [r3, #0]

    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_READY;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	2201      	movs	r2, #1
 800579c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Return function status */
    return HAL_OK;
 80057a0:	2300      	movs	r3, #0
 80057a2:	e006      	b.n	80057b2 <HAL_CAN_Stop+0x8a>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_STARTED;
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057a8:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80057b0:	2301      	movs	r3, #1
  }
}
 80057b2:	4618      	mov	r0, r3
 80057b4:	3710      	adds	r7, #16
 80057b6:	46bd      	mov	sp, r7
 80057b8:	bd80      	pop	{r7, pc}

080057ba <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 80057ba:	b480      	push	{r7}
 80057bc:	b089      	sub	sp, #36	@ 0x24
 80057be:	af00      	add	r7, sp, #0
 80057c0:	60f8      	str	r0, [r7, #12]
 80057c2:	60b9      	str	r1, [r7, #8]
 80057c4:	607a      	str	r2, [r7, #4]
 80057c6:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	f893 3020 	ldrb.w	r3, [r3, #32]
 80057ce:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	689b      	ldr	r3, [r3, #8]
 80057d6:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80057d8:	7ffb      	ldrb	r3, [r7, #31]
 80057da:	2b01      	cmp	r3, #1
 80057dc:	d003      	beq.n	80057e6 <HAL_CAN_AddTxMessage+0x2c>
 80057de:	7ffb      	ldrb	r3, [r7, #31]
 80057e0:	2b02      	cmp	r3, #2
 80057e2:	f040 80ad 	bne.w	8005940 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80057e6:	69bb      	ldr	r3, [r7, #24]
 80057e8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d10a      	bne.n	8005806 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80057f0:	69bb      	ldr	r3, [r7, #24]
 80057f2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d105      	bne.n	8005806 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80057fa:	69bb      	ldr	r3, [r7, #24]
 80057fc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8005800:	2b00      	cmp	r3, #0
 8005802:	f000 8095 	beq.w	8005930 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8005806:	69bb      	ldr	r3, [r7, #24]
 8005808:	0e1b      	lsrs	r3, r3, #24
 800580a:	f003 0303 	and.w	r3, r3, #3
 800580e:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8005810:	2201      	movs	r2, #1
 8005812:	697b      	ldr	r3, [r7, #20]
 8005814:	409a      	lsls	r2, r3
 8005816:	683b      	ldr	r3, [r7, #0]
 8005818:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 800581a:	68bb      	ldr	r3, [r7, #8]
 800581c:	689b      	ldr	r3, [r3, #8]
 800581e:	2b00      	cmp	r3, #0
 8005820:	d10d      	bne.n	800583e <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8005822:	68bb      	ldr	r3, [r7, #8]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8005828:	68bb      	ldr	r3, [r7, #8]
 800582a:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800582c:	68f9      	ldr	r1, [r7, #12]
 800582e:	6809      	ldr	r1, [r1, #0]
 8005830:	431a      	orrs	r2, r3
 8005832:	697b      	ldr	r3, [r7, #20]
 8005834:	3318      	adds	r3, #24
 8005836:	011b      	lsls	r3, r3, #4
 8005838:	440b      	add	r3, r1
 800583a:	601a      	str	r2, [r3, #0]
 800583c:	e00f      	b.n	800585e <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800583e:	68bb      	ldr	r3, [r7, #8]
 8005840:	685b      	ldr	r3, [r3, #4]
 8005842:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8005844:	68bb      	ldr	r3, [r7, #8]
 8005846:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8005848:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 800584a:	68bb      	ldr	r3, [r7, #8]
 800584c:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800584e:	68f9      	ldr	r1, [r7, #12]
 8005850:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8005852:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8005854:	697b      	ldr	r3, [r7, #20]
 8005856:	3318      	adds	r3, #24
 8005858:	011b      	lsls	r3, r3, #4
 800585a:	440b      	add	r3, r1
 800585c:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	6819      	ldr	r1, [r3, #0]
 8005862:	68bb      	ldr	r3, [r7, #8]
 8005864:	691a      	ldr	r2, [r3, #16]
 8005866:	697b      	ldr	r3, [r7, #20]
 8005868:	3318      	adds	r3, #24
 800586a:	011b      	lsls	r3, r3, #4
 800586c:	440b      	add	r3, r1
 800586e:	3304      	adds	r3, #4
 8005870:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8005872:	68bb      	ldr	r3, [r7, #8]
 8005874:	7d1b      	ldrb	r3, [r3, #20]
 8005876:	2b01      	cmp	r3, #1
 8005878:	d111      	bne.n	800589e <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	681a      	ldr	r2, [r3, #0]
 800587e:	697b      	ldr	r3, [r7, #20]
 8005880:	3318      	adds	r3, #24
 8005882:	011b      	lsls	r3, r3, #4
 8005884:	4413      	add	r3, r2
 8005886:	3304      	adds	r3, #4
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	68fa      	ldr	r2, [r7, #12]
 800588c:	6811      	ldr	r1, [r2, #0]
 800588e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8005892:	697b      	ldr	r3, [r7, #20]
 8005894:	3318      	adds	r3, #24
 8005896:	011b      	lsls	r3, r3, #4
 8005898:	440b      	add	r3, r1
 800589a:	3304      	adds	r3, #4
 800589c:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	3307      	adds	r3, #7
 80058a2:	781b      	ldrb	r3, [r3, #0]
 80058a4:	061a      	lsls	r2, r3, #24
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	3306      	adds	r3, #6
 80058aa:	781b      	ldrb	r3, [r3, #0]
 80058ac:	041b      	lsls	r3, r3, #16
 80058ae:	431a      	orrs	r2, r3
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	3305      	adds	r3, #5
 80058b4:	781b      	ldrb	r3, [r3, #0]
 80058b6:	021b      	lsls	r3, r3, #8
 80058b8:	4313      	orrs	r3, r2
 80058ba:	687a      	ldr	r2, [r7, #4]
 80058bc:	3204      	adds	r2, #4
 80058be:	7812      	ldrb	r2, [r2, #0]
 80058c0:	4610      	mov	r0, r2
 80058c2:	68fa      	ldr	r2, [r7, #12]
 80058c4:	6811      	ldr	r1, [r2, #0]
 80058c6:	ea43 0200 	orr.w	r2, r3, r0
 80058ca:	697b      	ldr	r3, [r7, #20]
 80058cc:	011b      	lsls	r3, r3, #4
 80058ce:	440b      	add	r3, r1
 80058d0:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 80058d4:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	3303      	adds	r3, #3
 80058da:	781b      	ldrb	r3, [r3, #0]
 80058dc:	061a      	lsls	r2, r3, #24
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	3302      	adds	r3, #2
 80058e2:	781b      	ldrb	r3, [r3, #0]
 80058e4:	041b      	lsls	r3, r3, #16
 80058e6:	431a      	orrs	r2, r3
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	3301      	adds	r3, #1
 80058ec:	781b      	ldrb	r3, [r3, #0]
 80058ee:	021b      	lsls	r3, r3, #8
 80058f0:	4313      	orrs	r3, r2
 80058f2:	687a      	ldr	r2, [r7, #4]
 80058f4:	7812      	ldrb	r2, [r2, #0]
 80058f6:	4610      	mov	r0, r2
 80058f8:	68fa      	ldr	r2, [r7, #12]
 80058fa:	6811      	ldr	r1, [r2, #0]
 80058fc:	ea43 0200 	orr.w	r2, r3, r0
 8005900:	697b      	ldr	r3, [r7, #20]
 8005902:	011b      	lsls	r3, r3, #4
 8005904:	440b      	add	r3, r1
 8005906:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 800590a:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	681a      	ldr	r2, [r3, #0]
 8005910:	697b      	ldr	r3, [r7, #20]
 8005912:	3318      	adds	r3, #24
 8005914:	011b      	lsls	r3, r3, #4
 8005916:	4413      	add	r3, r2
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	68fa      	ldr	r2, [r7, #12]
 800591c:	6811      	ldr	r1, [r2, #0]
 800591e:	f043 0201 	orr.w	r2, r3, #1
 8005922:	697b      	ldr	r3, [r7, #20]
 8005924:	3318      	adds	r3, #24
 8005926:	011b      	lsls	r3, r3, #4
 8005928:	440b      	add	r3, r1
 800592a:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 800592c:	2300      	movs	r3, #0
 800592e:	e00e      	b.n	800594e <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005934:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 800593c:	2301      	movs	r3, #1
 800593e:	e006      	b.n	800594e <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005944:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800594c:	2301      	movs	r3, #1
  }
}
 800594e:	4618      	mov	r0, r3
 8005950:	3724      	adds	r7, #36	@ 0x24
 8005952:	46bd      	mov	sp, r7
 8005954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005958:	4770      	bx	lr

0800595a <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800595a:	b480      	push	{r7}
 800595c:	b087      	sub	sp, #28
 800595e:	af00      	add	r7, sp, #0
 8005960:	60f8      	str	r0, [r7, #12]
 8005962:	60b9      	str	r1, [r7, #8]
 8005964:	607a      	str	r2, [r7, #4]
 8005966:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800596e:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8005970:	7dfb      	ldrb	r3, [r7, #23]
 8005972:	2b01      	cmp	r3, #1
 8005974:	d003      	beq.n	800597e <HAL_CAN_GetRxMessage+0x24>
 8005976:	7dfb      	ldrb	r3, [r7, #23]
 8005978:	2b02      	cmp	r3, #2
 800597a:	f040 8103 	bne.w	8005b84 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800597e:	68bb      	ldr	r3, [r7, #8]
 8005980:	2b00      	cmp	r3, #0
 8005982:	d10e      	bne.n	80059a2 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	68db      	ldr	r3, [r3, #12]
 800598a:	f003 0303 	and.w	r3, r3, #3
 800598e:	2b00      	cmp	r3, #0
 8005990:	d116      	bne.n	80059c0 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005996:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 800599e:	2301      	movs	r3, #1
 80059a0:	e0f7      	b.n	8005b92 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	691b      	ldr	r3, [r3, #16]
 80059a8:	f003 0303 	and.w	r3, r3, #3
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d107      	bne.n	80059c0 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059b4:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 80059bc:	2301      	movs	r3, #1
 80059be:	e0e8      	b.n	8005b92 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	681a      	ldr	r2, [r3, #0]
 80059c4:	68bb      	ldr	r3, [r7, #8]
 80059c6:	331b      	adds	r3, #27
 80059c8:	011b      	lsls	r3, r3, #4
 80059ca:	4413      	add	r3, r2
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	f003 0204 	and.w	r2, r3, #4
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	689b      	ldr	r3, [r3, #8]
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d10c      	bne.n	80059f8 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	681a      	ldr	r2, [r3, #0]
 80059e2:	68bb      	ldr	r3, [r7, #8]
 80059e4:	331b      	adds	r3, #27
 80059e6:	011b      	lsls	r3, r3, #4
 80059e8:	4413      	add	r3, r2
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	0d5b      	lsrs	r3, r3, #21
 80059ee:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	601a      	str	r2, [r3, #0]
 80059f6:	e00b      	b.n	8005a10 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	681a      	ldr	r2, [r3, #0]
 80059fc:	68bb      	ldr	r3, [r7, #8]
 80059fe:	331b      	adds	r3, #27
 8005a00:	011b      	lsls	r3, r3, #4
 8005a02:	4413      	add	r3, r2
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	08db      	lsrs	r3, r3, #3
 8005a08:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	681a      	ldr	r2, [r3, #0]
 8005a14:	68bb      	ldr	r3, [r7, #8]
 8005a16:	331b      	adds	r3, #27
 8005a18:	011b      	lsls	r3, r3, #4
 8005a1a:	4413      	add	r3, r2
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	f003 0202 	and.w	r2, r3, #2
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	681a      	ldr	r2, [r3, #0]
 8005a2a:	68bb      	ldr	r3, [r7, #8]
 8005a2c:	331b      	adds	r3, #27
 8005a2e:	011b      	lsls	r3, r3, #4
 8005a30:	4413      	add	r3, r2
 8005a32:	3304      	adds	r3, #4
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	f003 0308 	and.w	r3, r3, #8
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d003      	beq.n	8005a46 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	2208      	movs	r2, #8
 8005a42:	611a      	str	r2, [r3, #16]
 8005a44:	e00b      	b.n	8005a5e <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	681a      	ldr	r2, [r3, #0]
 8005a4a:	68bb      	ldr	r3, [r7, #8]
 8005a4c:	331b      	adds	r3, #27
 8005a4e:	011b      	lsls	r3, r3, #4
 8005a50:	4413      	add	r3, r2
 8005a52:	3304      	adds	r3, #4
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	f003 020f 	and.w	r2, r3, #15
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	681a      	ldr	r2, [r3, #0]
 8005a62:	68bb      	ldr	r3, [r7, #8]
 8005a64:	331b      	adds	r3, #27
 8005a66:	011b      	lsls	r3, r3, #4
 8005a68:	4413      	add	r3, r2
 8005a6a:	3304      	adds	r3, #4
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	0a1b      	lsrs	r3, r3, #8
 8005a70:	b2da      	uxtb	r2, r3
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	681a      	ldr	r2, [r3, #0]
 8005a7a:	68bb      	ldr	r3, [r7, #8]
 8005a7c:	331b      	adds	r3, #27
 8005a7e:	011b      	lsls	r3, r3, #4
 8005a80:	4413      	add	r3, r2
 8005a82:	3304      	adds	r3, #4
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	0c1b      	lsrs	r3, r3, #16
 8005a88:	b29a      	uxth	r2, r3
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	681a      	ldr	r2, [r3, #0]
 8005a92:	68bb      	ldr	r3, [r7, #8]
 8005a94:	011b      	lsls	r3, r3, #4
 8005a96:	4413      	add	r3, r2
 8005a98:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	b2da      	uxtb	r2, r3
 8005aa0:	683b      	ldr	r3, [r7, #0]
 8005aa2:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	681a      	ldr	r2, [r3, #0]
 8005aa8:	68bb      	ldr	r3, [r7, #8]
 8005aaa:	011b      	lsls	r3, r3, #4
 8005aac:	4413      	add	r3, r2
 8005aae:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	0a1a      	lsrs	r2, r3, #8
 8005ab6:	683b      	ldr	r3, [r7, #0]
 8005ab8:	3301      	adds	r3, #1
 8005aba:	b2d2      	uxtb	r2, r2
 8005abc:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	681a      	ldr	r2, [r3, #0]
 8005ac2:	68bb      	ldr	r3, [r7, #8]
 8005ac4:	011b      	lsls	r3, r3, #4
 8005ac6:	4413      	add	r3, r2
 8005ac8:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	0c1a      	lsrs	r2, r3, #16
 8005ad0:	683b      	ldr	r3, [r7, #0]
 8005ad2:	3302      	adds	r3, #2
 8005ad4:	b2d2      	uxtb	r2, r2
 8005ad6:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	681a      	ldr	r2, [r3, #0]
 8005adc:	68bb      	ldr	r3, [r7, #8]
 8005ade:	011b      	lsls	r3, r3, #4
 8005ae0:	4413      	add	r3, r2
 8005ae2:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	0e1a      	lsrs	r2, r3, #24
 8005aea:	683b      	ldr	r3, [r7, #0]
 8005aec:	3303      	adds	r3, #3
 8005aee:	b2d2      	uxtb	r2, r2
 8005af0:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	681a      	ldr	r2, [r3, #0]
 8005af6:	68bb      	ldr	r3, [r7, #8]
 8005af8:	011b      	lsls	r3, r3, #4
 8005afa:	4413      	add	r3, r2
 8005afc:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8005b00:	681a      	ldr	r2, [r3, #0]
 8005b02:	683b      	ldr	r3, [r7, #0]
 8005b04:	3304      	adds	r3, #4
 8005b06:	b2d2      	uxtb	r2, r2
 8005b08:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	681a      	ldr	r2, [r3, #0]
 8005b0e:	68bb      	ldr	r3, [r7, #8]
 8005b10:	011b      	lsls	r3, r3, #4
 8005b12:	4413      	add	r3, r2
 8005b14:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	0a1a      	lsrs	r2, r3, #8
 8005b1c:	683b      	ldr	r3, [r7, #0]
 8005b1e:	3305      	adds	r3, #5
 8005b20:	b2d2      	uxtb	r2, r2
 8005b22:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	681a      	ldr	r2, [r3, #0]
 8005b28:	68bb      	ldr	r3, [r7, #8]
 8005b2a:	011b      	lsls	r3, r3, #4
 8005b2c:	4413      	add	r3, r2
 8005b2e:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	0c1a      	lsrs	r2, r3, #16
 8005b36:	683b      	ldr	r3, [r7, #0]
 8005b38:	3306      	adds	r3, #6
 8005b3a:	b2d2      	uxtb	r2, r2
 8005b3c:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	681a      	ldr	r2, [r3, #0]
 8005b42:	68bb      	ldr	r3, [r7, #8]
 8005b44:	011b      	lsls	r3, r3, #4
 8005b46:	4413      	add	r3, r2
 8005b48:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	0e1a      	lsrs	r2, r3, #24
 8005b50:	683b      	ldr	r3, [r7, #0]
 8005b52:	3307      	adds	r3, #7
 8005b54:	b2d2      	uxtb	r2, r2
 8005b56:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8005b58:	68bb      	ldr	r3, [r7, #8]
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d108      	bne.n	8005b70 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	68da      	ldr	r2, [r3, #12]
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	f042 0220 	orr.w	r2, r2, #32
 8005b6c:	60da      	str	r2, [r3, #12]
 8005b6e:	e007      	b.n	8005b80 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	691a      	ldr	r2, [r3, #16]
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	f042 0220 	orr.w	r2, r2, #32
 8005b7e:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8005b80:	2300      	movs	r3, #0
 8005b82:	e006      	b.n	8005b92 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b88:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8005b90:	2301      	movs	r3, #1
  }
}
 8005b92:	4618      	mov	r0, r3
 8005b94:	371c      	adds	r7, #28
 8005b96:	46bd      	mov	sp, r7
 8005b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b9c:	4770      	bx	lr

08005b9e <HAL_CAN_GetRxFifoFillLevel>:
  * @param  RxFifo Rx FIFO.
  *         This parameter can be a value of @arg CAN_receive_FIFO_number.
  * @retval Number of messages available in Rx FIFO.
  */
uint32_t HAL_CAN_GetRxFifoFillLevel(const CAN_HandleTypeDef *hcan, uint32_t RxFifo)
{
 8005b9e:	b480      	push	{r7}
 8005ba0:	b085      	sub	sp, #20
 8005ba2:	af00      	add	r7, sp, #0
 8005ba4:	6078      	str	r0, [r7, #4]
 8005ba6:	6039      	str	r1, [r7, #0]
  uint32_t filllevel = 0U;
 8005ba8:	2300      	movs	r3, #0
 8005baa:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005bb2:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8005bb4:	7afb      	ldrb	r3, [r7, #11]
 8005bb6:	2b01      	cmp	r3, #1
 8005bb8:	d002      	beq.n	8005bc0 <HAL_CAN_GetRxFifoFillLevel+0x22>
 8005bba:	7afb      	ldrb	r3, [r7, #11]
 8005bbc:	2b02      	cmp	r3, #2
 8005bbe:	d10f      	bne.n	8005be0 <HAL_CAN_GetRxFifoFillLevel+0x42>
      (state == HAL_CAN_STATE_LISTENING))
  {
    if (RxFifo == CAN_RX_FIFO0)
 8005bc0:	683b      	ldr	r3, [r7, #0]
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d106      	bne.n	8005bd4 <HAL_CAN_GetRxFifoFillLevel+0x36>
    {
      filllevel = hcan->Instance->RF0R & CAN_RF0R_FMP0;
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	68db      	ldr	r3, [r3, #12]
 8005bcc:	f003 0303 	and.w	r3, r3, #3
 8005bd0:	60fb      	str	r3, [r7, #12]
 8005bd2:	e005      	b.n	8005be0 <HAL_CAN_GetRxFifoFillLevel+0x42>
    }
    else /* RxFifo == CAN_RX_FIFO1 */
    {
      filllevel = hcan->Instance->RF1R & CAN_RF1R_FMP1;
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	691b      	ldr	r3, [r3, #16]
 8005bda:	f003 0303 	and.w	r3, r3, #3
 8005bde:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Rx FIFO fill level */
  return filllevel;
 8005be0:	68fb      	ldr	r3, [r7, #12]
}
 8005be2:	4618      	mov	r0, r3
 8005be4:	3714      	adds	r7, #20
 8005be6:	46bd      	mov	sp, r7
 8005be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bec:	4770      	bx	lr

08005bee <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8005bee:	b580      	push	{r7, lr}
 8005bf0:	b08a      	sub	sp, #40	@ 0x28
 8005bf2:	af00      	add	r7, sp, #0
 8005bf4:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8005bf6:	2300      	movs	r3, #0
 8005bf8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	695b      	ldr	r3, [r3, #20]
 8005c00:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	685b      	ldr	r3, [r3, #4]
 8005c08:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	689b      	ldr	r3, [r3, #8]
 8005c10:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	68db      	ldr	r3, [r3, #12]
 8005c18:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	691b      	ldr	r3, [r3, #16]
 8005c20:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	699b      	ldr	r3, [r3, #24]
 8005c28:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8005c2a:	6a3b      	ldr	r3, [r7, #32]
 8005c2c:	f003 0301 	and.w	r3, r3, #1
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d07c      	beq.n	8005d2e <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8005c34:	69bb      	ldr	r3, [r7, #24]
 8005c36:	f003 0301 	and.w	r3, r3, #1
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d023      	beq.n	8005c86 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	2201      	movs	r2, #1
 8005c44:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8005c46:	69bb      	ldr	r3, [r7, #24]
 8005c48:	f003 0302 	and.w	r3, r3, #2
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d003      	beq.n	8005c58 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8005c50:	6878      	ldr	r0, [r7, #4]
 8005c52:	f000 f983 	bl	8005f5c <HAL_CAN_TxMailbox0CompleteCallback>
 8005c56:	e016      	b.n	8005c86 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8005c58:	69bb      	ldr	r3, [r7, #24]
 8005c5a:	f003 0304 	and.w	r3, r3, #4
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d004      	beq.n	8005c6c <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8005c62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c64:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8005c68:	627b      	str	r3, [r7, #36]	@ 0x24
 8005c6a:	e00c      	b.n	8005c86 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8005c6c:	69bb      	ldr	r3, [r7, #24]
 8005c6e:	f003 0308 	and.w	r3, r3, #8
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d004      	beq.n	8005c80 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8005c76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c78:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8005c7c:	627b      	str	r3, [r7, #36]	@ 0x24
 8005c7e:	e002      	b.n	8005c86 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8005c80:	6878      	ldr	r0, [r7, #4]
 8005c82:	f000 f989 	bl	8005f98 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8005c86:	69bb      	ldr	r3, [r7, #24]
 8005c88:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d024      	beq.n	8005cda <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005c98:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8005c9a:	69bb      	ldr	r3, [r7, #24]
 8005c9c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d003      	beq.n	8005cac <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8005ca4:	6878      	ldr	r0, [r7, #4]
 8005ca6:	f000 f963 	bl	8005f70 <HAL_CAN_TxMailbox1CompleteCallback>
 8005caa:	e016      	b.n	8005cda <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8005cac:	69bb      	ldr	r3, [r7, #24]
 8005cae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d004      	beq.n	8005cc0 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8005cb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cb8:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8005cbc:	627b      	str	r3, [r7, #36]	@ 0x24
 8005cbe:	e00c      	b.n	8005cda <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8005cc0:	69bb      	ldr	r3, [r7, #24]
 8005cc2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d004      	beq.n	8005cd4 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8005cca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ccc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005cd0:	627b      	str	r3, [r7, #36]	@ 0x24
 8005cd2:	e002      	b.n	8005cda <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8005cd4:	6878      	ldr	r0, [r7, #4]
 8005cd6:	f000 f969 	bl	8005fac <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8005cda:	69bb      	ldr	r3, [r7, #24]
 8005cdc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d024      	beq.n	8005d2e <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8005cec:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8005cee:	69bb      	ldr	r3, [r7, #24]
 8005cf0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d003      	beq.n	8005d00 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8005cf8:	6878      	ldr	r0, [r7, #4]
 8005cfa:	f000 f943 	bl	8005f84 <HAL_CAN_TxMailbox2CompleteCallback>
 8005cfe:	e016      	b.n	8005d2e <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8005d00:	69bb      	ldr	r3, [r7, #24]
 8005d02:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d004      	beq.n	8005d14 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8005d0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d0c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005d10:	627b      	str	r3, [r7, #36]	@ 0x24
 8005d12:	e00c      	b.n	8005d2e <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8005d14:	69bb      	ldr	r3, [r7, #24]
 8005d16:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d004      	beq.n	8005d28 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8005d1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d20:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005d24:	627b      	str	r3, [r7, #36]	@ 0x24
 8005d26:	e002      	b.n	8005d2e <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8005d28:	6878      	ldr	r0, [r7, #4]
 8005d2a:	f000 f949 	bl	8005fc0 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8005d2e:	6a3b      	ldr	r3, [r7, #32]
 8005d30:	f003 0308 	and.w	r3, r3, #8
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d00c      	beq.n	8005d52 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8005d38:	697b      	ldr	r3, [r7, #20]
 8005d3a:	f003 0310 	and.w	r3, r3, #16
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d007      	beq.n	8005d52 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8005d42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d44:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005d48:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	2210      	movs	r2, #16
 8005d50:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8005d52:	6a3b      	ldr	r3, [r7, #32]
 8005d54:	f003 0304 	and.w	r3, r3, #4
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d00b      	beq.n	8005d74 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8005d5c:	697b      	ldr	r3, [r7, #20]
 8005d5e:	f003 0308 	and.w	r3, r3, #8
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d006      	beq.n	8005d74 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	2208      	movs	r2, #8
 8005d6c:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8005d6e:	6878      	ldr	r0, [r7, #4]
 8005d70:	f000 f93a 	bl	8005fe8 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8005d74:	6a3b      	ldr	r3, [r7, #32]
 8005d76:	f003 0302 	and.w	r3, r3, #2
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d009      	beq.n	8005d92 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	68db      	ldr	r3, [r3, #12]
 8005d84:	f003 0303 	and.w	r3, r3, #3
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d002      	beq.n	8005d92 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8005d8c:	6878      	ldr	r0, [r7, #4]
 8005d8e:	f000 f921 	bl	8005fd4 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8005d92:	6a3b      	ldr	r3, [r7, #32]
 8005d94:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d00c      	beq.n	8005db6 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8005d9c:	693b      	ldr	r3, [r7, #16]
 8005d9e:	f003 0310 	and.w	r3, r3, #16
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d007      	beq.n	8005db6 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8005da6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005da8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005dac:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	2210      	movs	r2, #16
 8005db4:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8005db6:	6a3b      	ldr	r3, [r7, #32]
 8005db8:	f003 0320 	and.w	r3, r3, #32
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d00b      	beq.n	8005dd8 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8005dc0:	693b      	ldr	r3, [r7, #16]
 8005dc2:	f003 0308 	and.w	r3, r3, #8
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d006      	beq.n	8005dd8 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	2208      	movs	r2, #8
 8005dd0:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8005dd2:	6878      	ldr	r0, [r7, #4]
 8005dd4:	f000 f91c 	bl	8006010 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8005dd8:	6a3b      	ldr	r3, [r7, #32]
 8005dda:	f003 0310 	and.w	r3, r3, #16
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d009      	beq.n	8005df6 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	691b      	ldr	r3, [r3, #16]
 8005de8:	f003 0303 	and.w	r3, r3, #3
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d002      	beq.n	8005df6 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8005df0:	6878      	ldr	r0, [r7, #4]
 8005df2:	f000 f903 	bl	8005ffc <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8005df6:	6a3b      	ldr	r3, [r7, #32]
 8005df8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d00b      	beq.n	8005e18 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8005e00:	69fb      	ldr	r3, [r7, #28]
 8005e02:	f003 0310 	and.w	r3, r3, #16
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d006      	beq.n	8005e18 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	2210      	movs	r2, #16
 8005e10:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8005e12:	6878      	ldr	r0, [r7, #4]
 8005e14:	f000 f906 	bl	8006024 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8005e18:	6a3b      	ldr	r3, [r7, #32]
 8005e1a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d00b      	beq.n	8005e3a <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8005e22:	69fb      	ldr	r3, [r7, #28]
 8005e24:	f003 0308 	and.w	r3, r3, #8
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d006      	beq.n	8005e3a <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	2208      	movs	r2, #8
 8005e32:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8005e34:	6878      	ldr	r0, [r7, #4]
 8005e36:	f000 f8ff 	bl	8006038 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8005e3a:	6a3b      	ldr	r3, [r7, #32]
 8005e3c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d07b      	beq.n	8005f3c <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8005e44:	69fb      	ldr	r3, [r7, #28]
 8005e46:	f003 0304 	and.w	r3, r3, #4
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d072      	beq.n	8005f34 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8005e4e:	6a3b      	ldr	r3, [r7, #32]
 8005e50:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d008      	beq.n	8005e6a <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d003      	beq.n	8005e6a <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8005e62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e64:	f043 0301 	orr.w	r3, r3, #1
 8005e68:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8005e6a:	6a3b      	ldr	r3, [r7, #32]
 8005e6c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d008      	beq.n	8005e86 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d003      	beq.n	8005e86 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8005e7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e80:	f043 0302 	orr.w	r3, r3, #2
 8005e84:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8005e86:	6a3b      	ldr	r3, [r7, #32]
 8005e88:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d008      	beq.n	8005ea2 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d003      	beq.n	8005ea2 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8005e9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e9c:	f043 0304 	orr.w	r3, r3, #4
 8005ea0:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8005ea2:	6a3b      	ldr	r3, [r7, #32]
 8005ea4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d043      	beq.n	8005f34 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d03e      	beq.n	8005f34 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005ebc:	2b60      	cmp	r3, #96	@ 0x60
 8005ebe:	d02b      	beq.n	8005f18 <HAL_CAN_IRQHandler+0x32a>
 8005ec0:	2b60      	cmp	r3, #96	@ 0x60
 8005ec2:	d82e      	bhi.n	8005f22 <HAL_CAN_IRQHandler+0x334>
 8005ec4:	2b50      	cmp	r3, #80	@ 0x50
 8005ec6:	d022      	beq.n	8005f0e <HAL_CAN_IRQHandler+0x320>
 8005ec8:	2b50      	cmp	r3, #80	@ 0x50
 8005eca:	d82a      	bhi.n	8005f22 <HAL_CAN_IRQHandler+0x334>
 8005ecc:	2b40      	cmp	r3, #64	@ 0x40
 8005ece:	d019      	beq.n	8005f04 <HAL_CAN_IRQHandler+0x316>
 8005ed0:	2b40      	cmp	r3, #64	@ 0x40
 8005ed2:	d826      	bhi.n	8005f22 <HAL_CAN_IRQHandler+0x334>
 8005ed4:	2b30      	cmp	r3, #48	@ 0x30
 8005ed6:	d010      	beq.n	8005efa <HAL_CAN_IRQHandler+0x30c>
 8005ed8:	2b30      	cmp	r3, #48	@ 0x30
 8005eda:	d822      	bhi.n	8005f22 <HAL_CAN_IRQHandler+0x334>
 8005edc:	2b10      	cmp	r3, #16
 8005ede:	d002      	beq.n	8005ee6 <HAL_CAN_IRQHandler+0x2f8>
 8005ee0:	2b20      	cmp	r3, #32
 8005ee2:	d005      	beq.n	8005ef0 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8005ee4:	e01d      	b.n	8005f22 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8005ee6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ee8:	f043 0308 	orr.w	r3, r3, #8
 8005eec:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8005eee:	e019      	b.n	8005f24 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8005ef0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ef2:	f043 0310 	orr.w	r3, r3, #16
 8005ef6:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8005ef8:	e014      	b.n	8005f24 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8005efa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005efc:	f043 0320 	orr.w	r3, r3, #32
 8005f00:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8005f02:	e00f      	b.n	8005f24 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8005f04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f06:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005f0a:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8005f0c:	e00a      	b.n	8005f24 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8005f0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f10:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005f14:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8005f16:	e005      	b.n	8005f24 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8005f18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f1a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005f1e:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8005f20:	e000      	b.n	8005f24 <HAL_CAN_IRQHandler+0x336>
            break;
 8005f22:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	699a      	ldr	r2, [r3, #24]
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8005f32:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	2204      	movs	r2, #4
 8005f3a:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8005f3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d008      	beq.n	8005f54 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005f46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f48:	431a      	orrs	r2, r3
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8005f4e:	6878      	ldr	r0, [r7, #4]
 8005f50:	f000 f87c 	bl	800604c <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8005f54:	bf00      	nop
 8005f56:	3728      	adds	r7, #40	@ 0x28
 8005f58:	46bd      	mov	sp, r7
 8005f5a:	bd80      	pop	{r7, pc}

08005f5c <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8005f5c:	b480      	push	{r7}
 8005f5e:	b083      	sub	sp, #12
 8005f60:	af00      	add	r7, sp, #0
 8005f62:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8005f64:	bf00      	nop
 8005f66:	370c      	adds	r7, #12
 8005f68:	46bd      	mov	sp, r7
 8005f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f6e:	4770      	bx	lr

08005f70 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8005f70:	b480      	push	{r7}
 8005f72:	b083      	sub	sp, #12
 8005f74:	af00      	add	r7, sp, #0
 8005f76:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8005f78:	bf00      	nop
 8005f7a:	370c      	adds	r7, #12
 8005f7c:	46bd      	mov	sp, r7
 8005f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f82:	4770      	bx	lr

08005f84 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8005f84:	b480      	push	{r7}
 8005f86:	b083      	sub	sp, #12
 8005f88:	af00      	add	r7, sp, #0
 8005f8a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8005f8c:	bf00      	nop
 8005f8e:	370c      	adds	r7, #12
 8005f90:	46bd      	mov	sp, r7
 8005f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f96:	4770      	bx	lr

08005f98 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8005f98:	b480      	push	{r7}
 8005f9a:	b083      	sub	sp, #12
 8005f9c:	af00      	add	r7, sp, #0
 8005f9e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8005fa0:	bf00      	nop
 8005fa2:	370c      	adds	r7, #12
 8005fa4:	46bd      	mov	sp, r7
 8005fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005faa:	4770      	bx	lr

08005fac <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8005fac:	b480      	push	{r7}
 8005fae:	b083      	sub	sp, #12
 8005fb0:	af00      	add	r7, sp, #0
 8005fb2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8005fb4:	bf00      	nop
 8005fb6:	370c      	adds	r7, #12
 8005fb8:	46bd      	mov	sp, r7
 8005fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fbe:	4770      	bx	lr

08005fc0 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8005fc0:	b480      	push	{r7}
 8005fc2:	b083      	sub	sp, #12
 8005fc4:	af00      	add	r7, sp, #0
 8005fc6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8005fc8:	bf00      	nop
 8005fca:	370c      	adds	r7, #12
 8005fcc:	46bd      	mov	sp, r7
 8005fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd2:	4770      	bx	lr

08005fd4 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8005fd4:	b480      	push	{r7}
 8005fd6:	b083      	sub	sp, #12
 8005fd8:	af00      	add	r7, sp, #0
 8005fda:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8005fdc:	bf00      	nop
 8005fde:	370c      	adds	r7, #12
 8005fe0:	46bd      	mov	sp, r7
 8005fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe6:	4770      	bx	lr

08005fe8 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8005fe8:	b480      	push	{r7}
 8005fea:	b083      	sub	sp, #12
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8005ff0:	bf00      	nop
 8005ff2:	370c      	adds	r7, #12
 8005ff4:	46bd      	mov	sp, r7
 8005ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ffa:	4770      	bx	lr

08005ffc <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8005ffc:	b480      	push	{r7}
 8005ffe:	b083      	sub	sp, #12
 8006000:	af00      	add	r7, sp, #0
 8006002:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8006004:	bf00      	nop
 8006006:	370c      	adds	r7, #12
 8006008:	46bd      	mov	sp, r7
 800600a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800600e:	4770      	bx	lr

08006010 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8006010:	b480      	push	{r7}
 8006012:	b083      	sub	sp, #12
 8006014:	af00      	add	r7, sp, #0
 8006016:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8006018:	bf00      	nop
 800601a:	370c      	adds	r7, #12
 800601c:	46bd      	mov	sp, r7
 800601e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006022:	4770      	bx	lr

08006024 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8006024:	b480      	push	{r7}
 8006026:	b083      	sub	sp, #12
 8006028:	af00      	add	r7, sp, #0
 800602a:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800602c:	bf00      	nop
 800602e:	370c      	adds	r7, #12
 8006030:	46bd      	mov	sp, r7
 8006032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006036:	4770      	bx	lr

08006038 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8006038:	b480      	push	{r7}
 800603a:	b083      	sub	sp, #12
 800603c:	af00      	add	r7, sp, #0
 800603e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8006040:	bf00      	nop
 8006042:	370c      	adds	r7, #12
 8006044:	46bd      	mov	sp, r7
 8006046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800604a:	4770      	bx	lr

0800604c <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800604c:	b480      	push	{r7}
 800604e:	b083      	sub	sp, #12
 8006050:	af00      	add	r7, sp, #0
 8006052:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8006054:	bf00      	nop
 8006056:	370c      	adds	r7, #12
 8006058:	46bd      	mov	sp, r7
 800605a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800605e:	4770      	bx	lr

08006060 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006060:	b480      	push	{r7}
 8006062:	b085      	sub	sp, #20
 8006064:	af00      	add	r7, sp, #0
 8006066:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	f003 0307 	and.w	r3, r3, #7
 800606e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006070:	4b0c      	ldr	r3, [pc, #48]	@ (80060a4 <__NVIC_SetPriorityGrouping+0x44>)
 8006072:	68db      	ldr	r3, [r3, #12]
 8006074:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006076:	68ba      	ldr	r2, [r7, #8]
 8006078:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800607c:	4013      	ands	r3, r2
 800607e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006084:	68bb      	ldr	r3, [r7, #8]
 8006086:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006088:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800608c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006090:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006092:	4a04      	ldr	r2, [pc, #16]	@ (80060a4 <__NVIC_SetPriorityGrouping+0x44>)
 8006094:	68bb      	ldr	r3, [r7, #8]
 8006096:	60d3      	str	r3, [r2, #12]
}
 8006098:	bf00      	nop
 800609a:	3714      	adds	r7, #20
 800609c:	46bd      	mov	sp, r7
 800609e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a2:	4770      	bx	lr
 80060a4:	e000ed00 	.word	0xe000ed00

080060a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80060a8:	b480      	push	{r7}
 80060aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80060ac:	4b04      	ldr	r3, [pc, #16]	@ (80060c0 <__NVIC_GetPriorityGrouping+0x18>)
 80060ae:	68db      	ldr	r3, [r3, #12]
 80060b0:	0a1b      	lsrs	r3, r3, #8
 80060b2:	f003 0307 	and.w	r3, r3, #7
}
 80060b6:	4618      	mov	r0, r3
 80060b8:	46bd      	mov	sp, r7
 80060ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060be:	4770      	bx	lr
 80060c0:	e000ed00 	.word	0xe000ed00

080060c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80060c4:	b480      	push	{r7}
 80060c6:	b083      	sub	sp, #12
 80060c8:	af00      	add	r7, sp, #0
 80060ca:	4603      	mov	r3, r0
 80060cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80060ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	db0b      	blt.n	80060ee <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80060d6:	79fb      	ldrb	r3, [r7, #7]
 80060d8:	f003 021f 	and.w	r2, r3, #31
 80060dc:	4907      	ldr	r1, [pc, #28]	@ (80060fc <__NVIC_EnableIRQ+0x38>)
 80060de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80060e2:	095b      	lsrs	r3, r3, #5
 80060e4:	2001      	movs	r0, #1
 80060e6:	fa00 f202 	lsl.w	r2, r0, r2
 80060ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80060ee:	bf00      	nop
 80060f0:	370c      	adds	r7, #12
 80060f2:	46bd      	mov	sp, r7
 80060f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f8:	4770      	bx	lr
 80060fa:	bf00      	nop
 80060fc:	e000e100 	.word	0xe000e100

08006100 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006100:	b480      	push	{r7}
 8006102:	b083      	sub	sp, #12
 8006104:	af00      	add	r7, sp, #0
 8006106:	4603      	mov	r3, r0
 8006108:	6039      	str	r1, [r7, #0]
 800610a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800610c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006110:	2b00      	cmp	r3, #0
 8006112:	db0a      	blt.n	800612a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006114:	683b      	ldr	r3, [r7, #0]
 8006116:	b2da      	uxtb	r2, r3
 8006118:	490c      	ldr	r1, [pc, #48]	@ (800614c <__NVIC_SetPriority+0x4c>)
 800611a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800611e:	0112      	lsls	r2, r2, #4
 8006120:	b2d2      	uxtb	r2, r2
 8006122:	440b      	add	r3, r1
 8006124:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006128:	e00a      	b.n	8006140 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800612a:	683b      	ldr	r3, [r7, #0]
 800612c:	b2da      	uxtb	r2, r3
 800612e:	4908      	ldr	r1, [pc, #32]	@ (8006150 <__NVIC_SetPriority+0x50>)
 8006130:	79fb      	ldrb	r3, [r7, #7]
 8006132:	f003 030f 	and.w	r3, r3, #15
 8006136:	3b04      	subs	r3, #4
 8006138:	0112      	lsls	r2, r2, #4
 800613a:	b2d2      	uxtb	r2, r2
 800613c:	440b      	add	r3, r1
 800613e:	761a      	strb	r2, [r3, #24]
}
 8006140:	bf00      	nop
 8006142:	370c      	adds	r7, #12
 8006144:	46bd      	mov	sp, r7
 8006146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800614a:	4770      	bx	lr
 800614c:	e000e100 	.word	0xe000e100
 8006150:	e000ed00 	.word	0xe000ed00

08006154 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006154:	b480      	push	{r7}
 8006156:	b089      	sub	sp, #36	@ 0x24
 8006158:	af00      	add	r7, sp, #0
 800615a:	60f8      	str	r0, [r7, #12]
 800615c:	60b9      	str	r1, [r7, #8]
 800615e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	f003 0307 	and.w	r3, r3, #7
 8006166:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006168:	69fb      	ldr	r3, [r7, #28]
 800616a:	f1c3 0307 	rsb	r3, r3, #7
 800616e:	2b04      	cmp	r3, #4
 8006170:	bf28      	it	cs
 8006172:	2304      	movcs	r3, #4
 8006174:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006176:	69fb      	ldr	r3, [r7, #28]
 8006178:	3304      	adds	r3, #4
 800617a:	2b06      	cmp	r3, #6
 800617c:	d902      	bls.n	8006184 <NVIC_EncodePriority+0x30>
 800617e:	69fb      	ldr	r3, [r7, #28]
 8006180:	3b03      	subs	r3, #3
 8006182:	e000      	b.n	8006186 <NVIC_EncodePriority+0x32>
 8006184:	2300      	movs	r3, #0
 8006186:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006188:	f04f 32ff 	mov.w	r2, #4294967295
 800618c:	69bb      	ldr	r3, [r7, #24]
 800618e:	fa02 f303 	lsl.w	r3, r2, r3
 8006192:	43da      	mvns	r2, r3
 8006194:	68bb      	ldr	r3, [r7, #8]
 8006196:	401a      	ands	r2, r3
 8006198:	697b      	ldr	r3, [r7, #20]
 800619a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800619c:	f04f 31ff 	mov.w	r1, #4294967295
 80061a0:	697b      	ldr	r3, [r7, #20]
 80061a2:	fa01 f303 	lsl.w	r3, r1, r3
 80061a6:	43d9      	mvns	r1, r3
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80061ac:	4313      	orrs	r3, r2
         );
}
 80061ae:	4618      	mov	r0, r3
 80061b0:	3724      	adds	r7, #36	@ 0x24
 80061b2:	46bd      	mov	sp, r7
 80061b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b8:	4770      	bx	lr
	...

080061bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80061bc:	b580      	push	{r7, lr}
 80061be:	b082      	sub	sp, #8
 80061c0:	af00      	add	r7, sp, #0
 80061c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	3b01      	subs	r3, #1
 80061c8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80061cc:	d301      	bcc.n	80061d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80061ce:	2301      	movs	r3, #1
 80061d0:	e00f      	b.n	80061f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80061d2:	4a0a      	ldr	r2, [pc, #40]	@ (80061fc <SysTick_Config+0x40>)
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	3b01      	subs	r3, #1
 80061d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80061da:	210f      	movs	r1, #15
 80061dc:	f04f 30ff 	mov.w	r0, #4294967295
 80061e0:	f7ff ff8e 	bl	8006100 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80061e4:	4b05      	ldr	r3, [pc, #20]	@ (80061fc <SysTick_Config+0x40>)
 80061e6:	2200      	movs	r2, #0
 80061e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80061ea:	4b04      	ldr	r3, [pc, #16]	@ (80061fc <SysTick_Config+0x40>)
 80061ec:	2207      	movs	r2, #7
 80061ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80061f0:	2300      	movs	r3, #0
}
 80061f2:	4618      	mov	r0, r3
 80061f4:	3708      	adds	r7, #8
 80061f6:	46bd      	mov	sp, r7
 80061f8:	bd80      	pop	{r7, pc}
 80061fa:	bf00      	nop
 80061fc:	e000e010 	.word	0xe000e010

08006200 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006200:	b580      	push	{r7, lr}
 8006202:	b082      	sub	sp, #8
 8006204:	af00      	add	r7, sp, #0
 8006206:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006208:	6878      	ldr	r0, [r7, #4]
 800620a:	f7ff ff29 	bl	8006060 <__NVIC_SetPriorityGrouping>
}
 800620e:	bf00      	nop
 8006210:	3708      	adds	r7, #8
 8006212:	46bd      	mov	sp, r7
 8006214:	bd80      	pop	{r7, pc}

08006216 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8006216:	b580      	push	{r7, lr}
 8006218:	b086      	sub	sp, #24
 800621a:	af00      	add	r7, sp, #0
 800621c:	4603      	mov	r3, r0
 800621e:	60b9      	str	r1, [r7, #8]
 8006220:	607a      	str	r2, [r7, #4]
 8006222:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8006224:	2300      	movs	r3, #0
 8006226:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8006228:	f7ff ff3e 	bl	80060a8 <__NVIC_GetPriorityGrouping>
 800622c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800622e:	687a      	ldr	r2, [r7, #4]
 8006230:	68b9      	ldr	r1, [r7, #8]
 8006232:	6978      	ldr	r0, [r7, #20]
 8006234:	f7ff ff8e 	bl	8006154 <NVIC_EncodePriority>
 8006238:	4602      	mov	r2, r0
 800623a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800623e:	4611      	mov	r1, r2
 8006240:	4618      	mov	r0, r3
 8006242:	f7ff ff5d 	bl	8006100 <__NVIC_SetPriority>
}
 8006246:	bf00      	nop
 8006248:	3718      	adds	r7, #24
 800624a:	46bd      	mov	sp, r7
 800624c:	bd80      	pop	{r7, pc}

0800624e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800624e:	b580      	push	{r7, lr}
 8006250:	b082      	sub	sp, #8
 8006252:	af00      	add	r7, sp, #0
 8006254:	4603      	mov	r3, r0
 8006256:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006258:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800625c:	4618      	mov	r0, r3
 800625e:	f7ff ff31 	bl	80060c4 <__NVIC_EnableIRQ>
}
 8006262:	bf00      	nop
 8006264:	3708      	adds	r7, #8
 8006266:	46bd      	mov	sp, r7
 8006268:	bd80      	pop	{r7, pc}

0800626a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800626a:	b580      	push	{r7, lr}
 800626c:	b082      	sub	sp, #8
 800626e:	af00      	add	r7, sp, #0
 8006270:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006272:	6878      	ldr	r0, [r7, #4]
 8006274:	f7ff ffa2 	bl	80061bc <SysTick_Config>
 8006278:	4603      	mov	r3, r0
}
 800627a:	4618      	mov	r0, r3
 800627c:	3708      	adds	r7, #8
 800627e:	46bd      	mov	sp, r7
 8006280:	bd80      	pop	{r7, pc}
	...

08006284 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006284:	b480      	push	{r7}
 8006286:	b089      	sub	sp, #36	@ 0x24
 8006288:	af00      	add	r7, sp, #0
 800628a:	6078      	str	r0, [r7, #4]
 800628c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800628e:	2300      	movs	r3, #0
 8006290:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8006292:	2300      	movs	r3, #0
 8006294:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8006296:	2300      	movs	r3, #0
 8006298:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800629a:	2300      	movs	r3, #0
 800629c:	61fb      	str	r3, [r7, #28]
 800629e:	e165      	b.n	800656c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80062a0:	2201      	movs	r2, #1
 80062a2:	69fb      	ldr	r3, [r7, #28]
 80062a4:	fa02 f303 	lsl.w	r3, r2, r3
 80062a8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80062aa:	683b      	ldr	r3, [r7, #0]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	697a      	ldr	r2, [r7, #20]
 80062b0:	4013      	ands	r3, r2
 80062b2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80062b4:	693a      	ldr	r2, [r7, #16]
 80062b6:	697b      	ldr	r3, [r7, #20]
 80062b8:	429a      	cmp	r2, r3
 80062ba:	f040 8154 	bne.w	8006566 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80062be:	683b      	ldr	r3, [r7, #0]
 80062c0:	685b      	ldr	r3, [r3, #4]
 80062c2:	f003 0303 	and.w	r3, r3, #3
 80062c6:	2b01      	cmp	r3, #1
 80062c8:	d005      	beq.n	80062d6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80062ca:	683b      	ldr	r3, [r7, #0]
 80062cc:	685b      	ldr	r3, [r3, #4]
 80062ce:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80062d2:	2b02      	cmp	r3, #2
 80062d4:	d130      	bne.n	8006338 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	689b      	ldr	r3, [r3, #8]
 80062da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80062dc:	69fb      	ldr	r3, [r7, #28]
 80062de:	005b      	lsls	r3, r3, #1
 80062e0:	2203      	movs	r2, #3
 80062e2:	fa02 f303 	lsl.w	r3, r2, r3
 80062e6:	43db      	mvns	r3, r3
 80062e8:	69ba      	ldr	r2, [r7, #24]
 80062ea:	4013      	ands	r3, r2
 80062ec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80062ee:	683b      	ldr	r3, [r7, #0]
 80062f0:	68da      	ldr	r2, [r3, #12]
 80062f2:	69fb      	ldr	r3, [r7, #28]
 80062f4:	005b      	lsls	r3, r3, #1
 80062f6:	fa02 f303 	lsl.w	r3, r2, r3
 80062fa:	69ba      	ldr	r2, [r7, #24]
 80062fc:	4313      	orrs	r3, r2
 80062fe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	69ba      	ldr	r2, [r7, #24]
 8006304:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	685b      	ldr	r3, [r3, #4]
 800630a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800630c:	2201      	movs	r2, #1
 800630e:	69fb      	ldr	r3, [r7, #28]
 8006310:	fa02 f303 	lsl.w	r3, r2, r3
 8006314:	43db      	mvns	r3, r3
 8006316:	69ba      	ldr	r2, [r7, #24]
 8006318:	4013      	ands	r3, r2
 800631a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800631c:	683b      	ldr	r3, [r7, #0]
 800631e:	685b      	ldr	r3, [r3, #4]
 8006320:	091b      	lsrs	r3, r3, #4
 8006322:	f003 0201 	and.w	r2, r3, #1
 8006326:	69fb      	ldr	r3, [r7, #28]
 8006328:	fa02 f303 	lsl.w	r3, r2, r3
 800632c:	69ba      	ldr	r2, [r7, #24]
 800632e:	4313      	orrs	r3, r2
 8006330:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	69ba      	ldr	r2, [r7, #24]
 8006336:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006338:	683b      	ldr	r3, [r7, #0]
 800633a:	685b      	ldr	r3, [r3, #4]
 800633c:	f003 0303 	and.w	r3, r3, #3
 8006340:	2b03      	cmp	r3, #3
 8006342:	d017      	beq.n	8006374 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	68db      	ldr	r3, [r3, #12]
 8006348:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800634a:	69fb      	ldr	r3, [r7, #28]
 800634c:	005b      	lsls	r3, r3, #1
 800634e:	2203      	movs	r2, #3
 8006350:	fa02 f303 	lsl.w	r3, r2, r3
 8006354:	43db      	mvns	r3, r3
 8006356:	69ba      	ldr	r2, [r7, #24]
 8006358:	4013      	ands	r3, r2
 800635a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800635c:	683b      	ldr	r3, [r7, #0]
 800635e:	689a      	ldr	r2, [r3, #8]
 8006360:	69fb      	ldr	r3, [r7, #28]
 8006362:	005b      	lsls	r3, r3, #1
 8006364:	fa02 f303 	lsl.w	r3, r2, r3
 8006368:	69ba      	ldr	r2, [r7, #24]
 800636a:	4313      	orrs	r3, r2
 800636c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	69ba      	ldr	r2, [r7, #24]
 8006372:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006374:	683b      	ldr	r3, [r7, #0]
 8006376:	685b      	ldr	r3, [r3, #4]
 8006378:	f003 0303 	and.w	r3, r3, #3
 800637c:	2b02      	cmp	r3, #2
 800637e:	d123      	bne.n	80063c8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006380:	69fb      	ldr	r3, [r7, #28]
 8006382:	08da      	lsrs	r2, r3, #3
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	3208      	adds	r2, #8
 8006388:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800638c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800638e:	69fb      	ldr	r3, [r7, #28]
 8006390:	f003 0307 	and.w	r3, r3, #7
 8006394:	009b      	lsls	r3, r3, #2
 8006396:	220f      	movs	r2, #15
 8006398:	fa02 f303 	lsl.w	r3, r2, r3
 800639c:	43db      	mvns	r3, r3
 800639e:	69ba      	ldr	r2, [r7, #24]
 80063a0:	4013      	ands	r3, r2
 80063a2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80063a4:	683b      	ldr	r3, [r7, #0]
 80063a6:	691a      	ldr	r2, [r3, #16]
 80063a8:	69fb      	ldr	r3, [r7, #28]
 80063aa:	f003 0307 	and.w	r3, r3, #7
 80063ae:	009b      	lsls	r3, r3, #2
 80063b0:	fa02 f303 	lsl.w	r3, r2, r3
 80063b4:	69ba      	ldr	r2, [r7, #24]
 80063b6:	4313      	orrs	r3, r2
 80063b8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80063ba:	69fb      	ldr	r3, [r7, #28]
 80063bc:	08da      	lsrs	r2, r3, #3
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	3208      	adds	r2, #8
 80063c2:	69b9      	ldr	r1, [r7, #24]
 80063c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80063ce:	69fb      	ldr	r3, [r7, #28]
 80063d0:	005b      	lsls	r3, r3, #1
 80063d2:	2203      	movs	r2, #3
 80063d4:	fa02 f303 	lsl.w	r3, r2, r3
 80063d8:	43db      	mvns	r3, r3
 80063da:	69ba      	ldr	r2, [r7, #24]
 80063dc:	4013      	ands	r3, r2
 80063de:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80063e0:	683b      	ldr	r3, [r7, #0]
 80063e2:	685b      	ldr	r3, [r3, #4]
 80063e4:	f003 0203 	and.w	r2, r3, #3
 80063e8:	69fb      	ldr	r3, [r7, #28]
 80063ea:	005b      	lsls	r3, r3, #1
 80063ec:	fa02 f303 	lsl.w	r3, r2, r3
 80063f0:	69ba      	ldr	r2, [r7, #24]
 80063f2:	4313      	orrs	r3, r2
 80063f4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	69ba      	ldr	r2, [r7, #24]
 80063fa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80063fc:	683b      	ldr	r3, [r7, #0]
 80063fe:	685b      	ldr	r3, [r3, #4]
 8006400:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006404:	2b00      	cmp	r3, #0
 8006406:	f000 80ae 	beq.w	8006566 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800640a:	2300      	movs	r3, #0
 800640c:	60fb      	str	r3, [r7, #12]
 800640e:	4b5d      	ldr	r3, [pc, #372]	@ (8006584 <HAL_GPIO_Init+0x300>)
 8006410:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006412:	4a5c      	ldr	r2, [pc, #368]	@ (8006584 <HAL_GPIO_Init+0x300>)
 8006414:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006418:	6453      	str	r3, [r2, #68]	@ 0x44
 800641a:	4b5a      	ldr	r3, [pc, #360]	@ (8006584 <HAL_GPIO_Init+0x300>)
 800641c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800641e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006422:	60fb      	str	r3, [r7, #12]
 8006424:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006426:	4a58      	ldr	r2, [pc, #352]	@ (8006588 <HAL_GPIO_Init+0x304>)
 8006428:	69fb      	ldr	r3, [r7, #28]
 800642a:	089b      	lsrs	r3, r3, #2
 800642c:	3302      	adds	r3, #2
 800642e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006432:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8006434:	69fb      	ldr	r3, [r7, #28]
 8006436:	f003 0303 	and.w	r3, r3, #3
 800643a:	009b      	lsls	r3, r3, #2
 800643c:	220f      	movs	r2, #15
 800643e:	fa02 f303 	lsl.w	r3, r2, r3
 8006442:	43db      	mvns	r3, r3
 8006444:	69ba      	ldr	r2, [r7, #24]
 8006446:	4013      	ands	r3, r2
 8006448:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	4a4f      	ldr	r2, [pc, #316]	@ (800658c <HAL_GPIO_Init+0x308>)
 800644e:	4293      	cmp	r3, r2
 8006450:	d025      	beq.n	800649e <HAL_GPIO_Init+0x21a>
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	4a4e      	ldr	r2, [pc, #312]	@ (8006590 <HAL_GPIO_Init+0x30c>)
 8006456:	4293      	cmp	r3, r2
 8006458:	d01f      	beq.n	800649a <HAL_GPIO_Init+0x216>
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	4a4d      	ldr	r2, [pc, #308]	@ (8006594 <HAL_GPIO_Init+0x310>)
 800645e:	4293      	cmp	r3, r2
 8006460:	d019      	beq.n	8006496 <HAL_GPIO_Init+0x212>
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	4a4c      	ldr	r2, [pc, #304]	@ (8006598 <HAL_GPIO_Init+0x314>)
 8006466:	4293      	cmp	r3, r2
 8006468:	d013      	beq.n	8006492 <HAL_GPIO_Init+0x20e>
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	4a4b      	ldr	r2, [pc, #300]	@ (800659c <HAL_GPIO_Init+0x318>)
 800646e:	4293      	cmp	r3, r2
 8006470:	d00d      	beq.n	800648e <HAL_GPIO_Init+0x20a>
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	4a4a      	ldr	r2, [pc, #296]	@ (80065a0 <HAL_GPIO_Init+0x31c>)
 8006476:	4293      	cmp	r3, r2
 8006478:	d007      	beq.n	800648a <HAL_GPIO_Init+0x206>
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	4a49      	ldr	r2, [pc, #292]	@ (80065a4 <HAL_GPIO_Init+0x320>)
 800647e:	4293      	cmp	r3, r2
 8006480:	d101      	bne.n	8006486 <HAL_GPIO_Init+0x202>
 8006482:	2306      	movs	r3, #6
 8006484:	e00c      	b.n	80064a0 <HAL_GPIO_Init+0x21c>
 8006486:	2307      	movs	r3, #7
 8006488:	e00a      	b.n	80064a0 <HAL_GPIO_Init+0x21c>
 800648a:	2305      	movs	r3, #5
 800648c:	e008      	b.n	80064a0 <HAL_GPIO_Init+0x21c>
 800648e:	2304      	movs	r3, #4
 8006490:	e006      	b.n	80064a0 <HAL_GPIO_Init+0x21c>
 8006492:	2303      	movs	r3, #3
 8006494:	e004      	b.n	80064a0 <HAL_GPIO_Init+0x21c>
 8006496:	2302      	movs	r3, #2
 8006498:	e002      	b.n	80064a0 <HAL_GPIO_Init+0x21c>
 800649a:	2301      	movs	r3, #1
 800649c:	e000      	b.n	80064a0 <HAL_GPIO_Init+0x21c>
 800649e:	2300      	movs	r3, #0
 80064a0:	69fa      	ldr	r2, [r7, #28]
 80064a2:	f002 0203 	and.w	r2, r2, #3
 80064a6:	0092      	lsls	r2, r2, #2
 80064a8:	4093      	lsls	r3, r2
 80064aa:	69ba      	ldr	r2, [r7, #24]
 80064ac:	4313      	orrs	r3, r2
 80064ae:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80064b0:	4935      	ldr	r1, [pc, #212]	@ (8006588 <HAL_GPIO_Init+0x304>)
 80064b2:	69fb      	ldr	r3, [r7, #28]
 80064b4:	089b      	lsrs	r3, r3, #2
 80064b6:	3302      	adds	r3, #2
 80064b8:	69ba      	ldr	r2, [r7, #24]
 80064ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80064be:	4b3a      	ldr	r3, [pc, #232]	@ (80065a8 <HAL_GPIO_Init+0x324>)
 80064c0:	689b      	ldr	r3, [r3, #8]
 80064c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80064c4:	693b      	ldr	r3, [r7, #16]
 80064c6:	43db      	mvns	r3, r3
 80064c8:	69ba      	ldr	r2, [r7, #24]
 80064ca:	4013      	ands	r3, r2
 80064cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80064ce:	683b      	ldr	r3, [r7, #0]
 80064d0:	685b      	ldr	r3, [r3, #4]
 80064d2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d003      	beq.n	80064e2 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80064da:	69ba      	ldr	r2, [r7, #24]
 80064dc:	693b      	ldr	r3, [r7, #16]
 80064de:	4313      	orrs	r3, r2
 80064e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80064e2:	4a31      	ldr	r2, [pc, #196]	@ (80065a8 <HAL_GPIO_Init+0x324>)
 80064e4:	69bb      	ldr	r3, [r7, #24]
 80064e6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80064e8:	4b2f      	ldr	r3, [pc, #188]	@ (80065a8 <HAL_GPIO_Init+0x324>)
 80064ea:	68db      	ldr	r3, [r3, #12]
 80064ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80064ee:	693b      	ldr	r3, [r7, #16]
 80064f0:	43db      	mvns	r3, r3
 80064f2:	69ba      	ldr	r2, [r7, #24]
 80064f4:	4013      	ands	r3, r2
 80064f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80064f8:	683b      	ldr	r3, [r7, #0]
 80064fa:	685b      	ldr	r3, [r3, #4]
 80064fc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006500:	2b00      	cmp	r3, #0
 8006502:	d003      	beq.n	800650c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8006504:	69ba      	ldr	r2, [r7, #24]
 8006506:	693b      	ldr	r3, [r7, #16]
 8006508:	4313      	orrs	r3, r2
 800650a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800650c:	4a26      	ldr	r2, [pc, #152]	@ (80065a8 <HAL_GPIO_Init+0x324>)
 800650e:	69bb      	ldr	r3, [r7, #24]
 8006510:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8006512:	4b25      	ldr	r3, [pc, #148]	@ (80065a8 <HAL_GPIO_Init+0x324>)
 8006514:	685b      	ldr	r3, [r3, #4]
 8006516:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006518:	693b      	ldr	r3, [r7, #16]
 800651a:	43db      	mvns	r3, r3
 800651c:	69ba      	ldr	r2, [r7, #24]
 800651e:	4013      	ands	r3, r2
 8006520:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006522:	683b      	ldr	r3, [r7, #0]
 8006524:	685b      	ldr	r3, [r3, #4]
 8006526:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800652a:	2b00      	cmp	r3, #0
 800652c:	d003      	beq.n	8006536 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800652e:	69ba      	ldr	r2, [r7, #24]
 8006530:	693b      	ldr	r3, [r7, #16]
 8006532:	4313      	orrs	r3, r2
 8006534:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8006536:	4a1c      	ldr	r2, [pc, #112]	@ (80065a8 <HAL_GPIO_Init+0x324>)
 8006538:	69bb      	ldr	r3, [r7, #24]
 800653a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800653c:	4b1a      	ldr	r3, [pc, #104]	@ (80065a8 <HAL_GPIO_Init+0x324>)
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006542:	693b      	ldr	r3, [r7, #16]
 8006544:	43db      	mvns	r3, r3
 8006546:	69ba      	ldr	r2, [r7, #24]
 8006548:	4013      	ands	r3, r2
 800654a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800654c:	683b      	ldr	r3, [r7, #0]
 800654e:	685b      	ldr	r3, [r3, #4]
 8006550:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006554:	2b00      	cmp	r3, #0
 8006556:	d003      	beq.n	8006560 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8006558:	69ba      	ldr	r2, [r7, #24]
 800655a:	693b      	ldr	r3, [r7, #16]
 800655c:	4313      	orrs	r3, r2
 800655e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006560:	4a11      	ldr	r2, [pc, #68]	@ (80065a8 <HAL_GPIO_Init+0x324>)
 8006562:	69bb      	ldr	r3, [r7, #24]
 8006564:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006566:	69fb      	ldr	r3, [r7, #28]
 8006568:	3301      	adds	r3, #1
 800656a:	61fb      	str	r3, [r7, #28]
 800656c:	69fb      	ldr	r3, [r7, #28]
 800656e:	2b0f      	cmp	r3, #15
 8006570:	f67f ae96 	bls.w	80062a0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8006574:	bf00      	nop
 8006576:	bf00      	nop
 8006578:	3724      	adds	r7, #36	@ 0x24
 800657a:	46bd      	mov	sp, r7
 800657c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006580:	4770      	bx	lr
 8006582:	bf00      	nop
 8006584:	40023800 	.word	0x40023800
 8006588:	40013800 	.word	0x40013800
 800658c:	40020000 	.word	0x40020000
 8006590:	40020400 	.word	0x40020400
 8006594:	40020800 	.word	0x40020800
 8006598:	40020c00 	.word	0x40020c00
 800659c:	40021000 	.word	0x40021000
 80065a0:	40021400 	.word	0x40021400
 80065a4:	40021800 	.word	0x40021800
 80065a8:	40013c00 	.word	0x40013c00

080065ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80065ac:	b480      	push	{r7}
 80065ae:	b083      	sub	sp, #12
 80065b0:	af00      	add	r7, sp, #0
 80065b2:	6078      	str	r0, [r7, #4]
 80065b4:	460b      	mov	r3, r1
 80065b6:	807b      	strh	r3, [r7, #2]
 80065b8:	4613      	mov	r3, r2
 80065ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80065bc:	787b      	ldrb	r3, [r7, #1]
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d003      	beq.n	80065ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80065c2:	887a      	ldrh	r2, [r7, #2]
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80065c8:	e003      	b.n	80065d2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80065ca:	887b      	ldrh	r3, [r7, #2]
 80065cc:	041a      	lsls	r2, r3, #16
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	619a      	str	r2, [r3, #24]
}
 80065d2:	bf00      	nop
 80065d4:	370c      	adds	r7, #12
 80065d6:	46bd      	mov	sp, r7
 80065d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065dc:	4770      	bx	lr
	...

080065e0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80065e0:	b580      	push	{r7, lr}
 80065e2:	b084      	sub	sp, #16
 80065e4:	af00      	add	r7, sp, #0
 80065e6:	6078      	str	r0, [r7, #4]
 80065e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d101      	bne.n	80065f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80065f0:	2301      	movs	r3, #1
 80065f2:	e0cc      	b.n	800678e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80065f4:	4b68      	ldr	r3, [pc, #416]	@ (8006798 <HAL_RCC_ClockConfig+0x1b8>)
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	f003 030f 	and.w	r3, r3, #15
 80065fc:	683a      	ldr	r2, [r7, #0]
 80065fe:	429a      	cmp	r2, r3
 8006600:	d90c      	bls.n	800661c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006602:	4b65      	ldr	r3, [pc, #404]	@ (8006798 <HAL_RCC_ClockConfig+0x1b8>)
 8006604:	683a      	ldr	r2, [r7, #0]
 8006606:	b2d2      	uxtb	r2, r2
 8006608:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800660a:	4b63      	ldr	r3, [pc, #396]	@ (8006798 <HAL_RCC_ClockConfig+0x1b8>)
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	f003 030f 	and.w	r3, r3, #15
 8006612:	683a      	ldr	r2, [r7, #0]
 8006614:	429a      	cmp	r2, r3
 8006616:	d001      	beq.n	800661c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006618:	2301      	movs	r3, #1
 800661a:	e0b8      	b.n	800678e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	f003 0302 	and.w	r3, r3, #2
 8006624:	2b00      	cmp	r3, #0
 8006626:	d020      	beq.n	800666a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	f003 0304 	and.w	r3, r3, #4
 8006630:	2b00      	cmp	r3, #0
 8006632:	d005      	beq.n	8006640 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006634:	4b59      	ldr	r3, [pc, #356]	@ (800679c <HAL_RCC_ClockConfig+0x1bc>)
 8006636:	689b      	ldr	r3, [r3, #8]
 8006638:	4a58      	ldr	r2, [pc, #352]	@ (800679c <HAL_RCC_ClockConfig+0x1bc>)
 800663a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800663e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	f003 0308 	and.w	r3, r3, #8
 8006648:	2b00      	cmp	r3, #0
 800664a:	d005      	beq.n	8006658 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800664c:	4b53      	ldr	r3, [pc, #332]	@ (800679c <HAL_RCC_ClockConfig+0x1bc>)
 800664e:	689b      	ldr	r3, [r3, #8]
 8006650:	4a52      	ldr	r2, [pc, #328]	@ (800679c <HAL_RCC_ClockConfig+0x1bc>)
 8006652:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8006656:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006658:	4b50      	ldr	r3, [pc, #320]	@ (800679c <HAL_RCC_ClockConfig+0x1bc>)
 800665a:	689b      	ldr	r3, [r3, #8]
 800665c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	689b      	ldr	r3, [r3, #8]
 8006664:	494d      	ldr	r1, [pc, #308]	@ (800679c <HAL_RCC_ClockConfig+0x1bc>)
 8006666:	4313      	orrs	r3, r2
 8006668:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	f003 0301 	and.w	r3, r3, #1
 8006672:	2b00      	cmp	r3, #0
 8006674:	d044      	beq.n	8006700 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	685b      	ldr	r3, [r3, #4]
 800667a:	2b01      	cmp	r3, #1
 800667c:	d107      	bne.n	800668e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800667e:	4b47      	ldr	r3, [pc, #284]	@ (800679c <HAL_RCC_ClockConfig+0x1bc>)
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006686:	2b00      	cmp	r3, #0
 8006688:	d119      	bne.n	80066be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800668a:	2301      	movs	r3, #1
 800668c:	e07f      	b.n	800678e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	685b      	ldr	r3, [r3, #4]
 8006692:	2b02      	cmp	r3, #2
 8006694:	d003      	beq.n	800669e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800669a:	2b03      	cmp	r3, #3
 800669c:	d107      	bne.n	80066ae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800669e:	4b3f      	ldr	r3, [pc, #252]	@ (800679c <HAL_RCC_ClockConfig+0x1bc>)
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d109      	bne.n	80066be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80066aa:	2301      	movs	r3, #1
 80066ac:	e06f      	b.n	800678e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80066ae:	4b3b      	ldr	r3, [pc, #236]	@ (800679c <HAL_RCC_ClockConfig+0x1bc>)
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	f003 0302 	and.w	r3, r3, #2
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d101      	bne.n	80066be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80066ba:	2301      	movs	r3, #1
 80066bc:	e067      	b.n	800678e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80066be:	4b37      	ldr	r3, [pc, #220]	@ (800679c <HAL_RCC_ClockConfig+0x1bc>)
 80066c0:	689b      	ldr	r3, [r3, #8]
 80066c2:	f023 0203 	bic.w	r2, r3, #3
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	685b      	ldr	r3, [r3, #4]
 80066ca:	4934      	ldr	r1, [pc, #208]	@ (800679c <HAL_RCC_ClockConfig+0x1bc>)
 80066cc:	4313      	orrs	r3, r2
 80066ce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80066d0:	f7fe f9ca 	bl	8004a68 <HAL_GetTick>
 80066d4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80066d6:	e00a      	b.n	80066ee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80066d8:	f7fe f9c6 	bl	8004a68 <HAL_GetTick>
 80066dc:	4602      	mov	r2, r0
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	1ad3      	subs	r3, r2, r3
 80066e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80066e6:	4293      	cmp	r3, r2
 80066e8:	d901      	bls.n	80066ee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80066ea:	2303      	movs	r3, #3
 80066ec:	e04f      	b.n	800678e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80066ee:	4b2b      	ldr	r3, [pc, #172]	@ (800679c <HAL_RCC_ClockConfig+0x1bc>)
 80066f0:	689b      	ldr	r3, [r3, #8]
 80066f2:	f003 020c 	and.w	r2, r3, #12
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	685b      	ldr	r3, [r3, #4]
 80066fa:	009b      	lsls	r3, r3, #2
 80066fc:	429a      	cmp	r2, r3
 80066fe:	d1eb      	bne.n	80066d8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006700:	4b25      	ldr	r3, [pc, #148]	@ (8006798 <HAL_RCC_ClockConfig+0x1b8>)
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	f003 030f 	and.w	r3, r3, #15
 8006708:	683a      	ldr	r2, [r7, #0]
 800670a:	429a      	cmp	r2, r3
 800670c:	d20c      	bcs.n	8006728 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800670e:	4b22      	ldr	r3, [pc, #136]	@ (8006798 <HAL_RCC_ClockConfig+0x1b8>)
 8006710:	683a      	ldr	r2, [r7, #0]
 8006712:	b2d2      	uxtb	r2, r2
 8006714:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006716:	4b20      	ldr	r3, [pc, #128]	@ (8006798 <HAL_RCC_ClockConfig+0x1b8>)
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	f003 030f 	and.w	r3, r3, #15
 800671e:	683a      	ldr	r2, [r7, #0]
 8006720:	429a      	cmp	r2, r3
 8006722:	d001      	beq.n	8006728 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006724:	2301      	movs	r3, #1
 8006726:	e032      	b.n	800678e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	f003 0304 	and.w	r3, r3, #4
 8006730:	2b00      	cmp	r3, #0
 8006732:	d008      	beq.n	8006746 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006734:	4b19      	ldr	r3, [pc, #100]	@ (800679c <HAL_RCC_ClockConfig+0x1bc>)
 8006736:	689b      	ldr	r3, [r3, #8]
 8006738:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	68db      	ldr	r3, [r3, #12]
 8006740:	4916      	ldr	r1, [pc, #88]	@ (800679c <HAL_RCC_ClockConfig+0x1bc>)
 8006742:	4313      	orrs	r3, r2
 8006744:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	f003 0308 	and.w	r3, r3, #8
 800674e:	2b00      	cmp	r3, #0
 8006750:	d009      	beq.n	8006766 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006752:	4b12      	ldr	r3, [pc, #72]	@ (800679c <HAL_RCC_ClockConfig+0x1bc>)
 8006754:	689b      	ldr	r3, [r3, #8]
 8006756:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	691b      	ldr	r3, [r3, #16]
 800675e:	00db      	lsls	r3, r3, #3
 8006760:	490e      	ldr	r1, [pc, #56]	@ (800679c <HAL_RCC_ClockConfig+0x1bc>)
 8006762:	4313      	orrs	r3, r2
 8006764:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006766:	f000 f821 	bl	80067ac <HAL_RCC_GetSysClockFreq>
 800676a:	4602      	mov	r2, r0
 800676c:	4b0b      	ldr	r3, [pc, #44]	@ (800679c <HAL_RCC_ClockConfig+0x1bc>)
 800676e:	689b      	ldr	r3, [r3, #8]
 8006770:	091b      	lsrs	r3, r3, #4
 8006772:	f003 030f 	and.w	r3, r3, #15
 8006776:	490a      	ldr	r1, [pc, #40]	@ (80067a0 <HAL_RCC_ClockConfig+0x1c0>)
 8006778:	5ccb      	ldrb	r3, [r1, r3]
 800677a:	fa22 f303 	lsr.w	r3, r2, r3
 800677e:	4a09      	ldr	r2, [pc, #36]	@ (80067a4 <HAL_RCC_ClockConfig+0x1c4>)
 8006780:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8006782:	4b09      	ldr	r3, [pc, #36]	@ (80067a8 <HAL_RCC_ClockConfig+0x1c8>)
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	4618      	mov	r0, r3
 8006788:	f7fe f92a 	bl	80049e0 <HAL_InitTick>

  return HAL_OK;
 800678c:	2300      	movs	r3, #0
}
 800678e:	4618      	mov	r0, r3
 8006790:	3710      	adds	r7, #16
 8006792:	46bd      	mov	sp, r7
 8006794:	bd80      	pop	{r7, pc}
 8006796:	bf00      	nop
 8006798:	40023c00 	.word	0x40023c00
 800679c:	40023800 	.word	0x40023800
 80067a0:	08008d90 	.word	0x08008d90
 80067a4:	20000000 	.word	0x20000000
 80067a8:	20000008 	.word	0x20000008

080067ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80067ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80067b0:	b0ae      	sub	sp, #184	@ 0xb8
 80067b2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80067b4:	2300      	movs	r3, #0
 80067b6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 80067ba:	2300      	movs	r3, #0
 80067bc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 80067c0:	2300      	movs	r3, #0
 80067c2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 80067c6:	2300      	movs	r3, #0
 80067c8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 80067cc:	2300      	movs	r3, #0
 80067ce:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80067d2:	4bcb      	ldr	r3, [pc, #812]	@ (8006b00 <HAL_RCC_GetSysClockFreq+0x354>)
 80067d4:	689b      	ldr	r3, [r3, #8]
 80067d6:	f003 030c 	and.w	r3, r3, #12
 80067da:	2b0c      	cmp	r3, #12
 80067dc:	f200 8204 	bhi.w	8006be8 <HAL_RCC_GetSysClockFreq+0x43c>
 80067e0:	a201      	add	r2, pc, #4	@ (adr r2, 80067e8 <HAL_RCC_GetSysClockFreq+0x3c>)
 80067e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067e6:	bf00      	nop
 80067e8:	0800681d 	.word	0x0800681d
 80067ec:	08006be9 	.word	0x08006be9
 80067f0:	08006be9 	.word	0x08006be9
 80067f4:	08006be9 	.word	0x08006be9
 80067f8:	08006825 	.word	0x08006825
 80067fc:	08006be9 	.word	0x08006be9
 8006800:	08006be9 	.word	0x08006be9
 8006804:	08006be9 	.word	0x08006be9
 8006808:	0800682d 	.word	0x0800682d
 800680c:	08006be9 	.word	0x08006be9
 8006810:	08006be9 	.word	0x08006be9
 8006814:	08006be9 	.word	0x08006be9
 8006818:	08006a1d 	.word	0x08006a1d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800681c:	4bb9      	ldr	r3, [pc, #740]	@ (8006b04 <HAL_RCC_GetSysClockFreq+0x358>)
 800681e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8006822:	e1e5      	b.n	8006bf0 <HAL_RCC_GetSysClockFreq+0x444>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006824:	4bb7      	ldr	r3, [pc, #732]	@ (8006b04 <HAL_RCC_GetSysClockFreq+0x358>)
 8006826:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800682a:	e1e1      	b.n	8006bf0 <HAL_RCC_GetSysClockFreq+0x444>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800682c:	4bb4      	ldr	r3, [pc, #720]	@ (8006b00 <HAL_RCC_GetSysClockFreq+0x354>)
 800682e:	685b      	ldr	r3, [r3, #4]
 8006830:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006834:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006838:	4bb1      	ldr	r3, [pc, #708]	@ (8006b00 <HAL_RCC_GetSysClockFreq+0x354>)
 800683a:	685b      	ldr	r3, [r3, #4]
 800683c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006840:	2b00      	cmp	r3, #0
 8006842:	d071      	beq.n	8006928 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006844:	4bae      	ldr	r3, [pc, #696]	@ (8006b00 <HAL_RCC_GetSysClockFreq+0x354>)
 8006846:	685b      	ldr	r3, [r3, #4]
 8006848:	099b      	lsrs	r3, r3, #6
 800684a:	2200      	movs	r2, #0
 800684c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006850:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8006854:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006858:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800685c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006860:	2300      	movs	r3, #0
 8006862:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006866:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800686a:	4622      	mov	r2, r4
 800686c:	462b      	mov	r3, r5
 800686e:	f04f 0000 	mov.w	r0, #0
 8006872:	f04f 0100 	mov.w	r1, #0
 8006876:	0159      	lsls	r1, r3, #5
 8006878:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800687c:	0150      	lsls	r0, r2, #5
 800687e:	4602      	mov	r2, r0
 8006880:	460b      	mov	r3, r1
 8006882:	4621      	mov	r1, r4
 8006884:	1a51      	subs	r1, r2, r1
 8006886:	6439      	str	r1, [r7, #64]	@ 0x40
 8006888:	4629      	mov	r1, r5
 800688a:	eb63 0301 	sbc.w	r3, r3, r1
 800688e:	647b      	str	r3, [r7, #68]	@ 0x44
 8006890:	f04f 0200 	mov.w	r2, #0
 8006894:	f04f 0300 	mov.w	r3, #0
 8006898:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 800689c:	4649      	mov	r1, r9
 800689e:	018b      	lsls	r3, r1, #6
 80068a0:	4641      	mov	r1, r8
 80068a2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80068a6:	4641      	mov	r1, r8
 80068a8:	018a      	lsls	r2, r1, #6
 80068aa:	4641      	mov	r1, r8
 80068ac:	1a51      	subs	r1, r2, r1
 80068ae:	63b9      	str	r1, [r7, #56]	@ 0x38
 80068b0:	4649      	mov	r1, r9
 80068b2:	eb63 0301 	sbc.w	r3, r3, r1
 80068b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80068b8:	f04f 0200 	mov.w	r2, #0
 80068bc:	f04f 0300 	mov.w	r3, #0
 80068c0:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 80068c4:	4649      	mov	r1, r9
 80068c6:	00cb      	lsls	r3, r1, #3
 80068c8:	4641      	mov	r1, r8
 80068ca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80068ce:	4641      	mov	r1, r8
 80068d0:	00ca      	lsls	r2, r1, #3
 80068d2:	4610      	mov	r0, r2
 80068d4:	4619      	mov	r1, r3
 80068d6:	4603      	mov	r3, r0
 80068d8:	4622      	mov	r2, r4
 80068da:	189b      	adds	r3, r3, r2
 80068dc:	633b      	str	r3, [r7, #48]	@ 0x30
 80068de:	462b      	mov	r3, r5
 80068e0:	460a      	mov	r2, r1
 80068e2:	eb42 0303 	adc.w	r3, r2, r3
 80068e6:	637b      	str	r3, [r7, #52]	@ 0x34
 80068e8:	f04f 0200 	mov.w	r2, #0
 80068ec:	f04f 0300 	mov.w	r3, #0
 80068f0:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80068f4:	4629      	mov	r1, r5
 80068f6:	028b      	lsls	r3, r1, #10
 80068f8:	4621      	mov	r1, r4
 80068fa:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80068fe:	4621      	mov	r1, r4
 8006900:	028a      	lsls	r2, r1, #10
 8006902:	4610      	mov	r0, r2
 8006904:	4619      	mov	r1, r3
 8006906:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800690a:	2200      	movs	r2, #0
 800690c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006910:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8006914:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8006918:	f7fa f894 	bl	8000a44 <__aeabi_uldivmod>
 800691c:	4602      	mov	r2, r0
 800691e:	460b      	mov	r3, r1
 8006920:	4613      	mov	r3, r2
 8006922:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006926:	e067      	b.n	80069f8 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006928:	4b75      	ldr	r3, [pc, #468]	@ (8006b00 <HAL_RCC_GetSysClockFreq+0x354>)
 800692a:	685b      	ldr	r3, [r3, #4]
 800692c:	099b      	lsrs	r3, r3, #6
 800692e:	2200      	movs	r2, #0
 8006930:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006934:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8006938:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800693c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006940:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006942:	2300      	movs	r3, #0
 8006944:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006946:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 800694a:	4622      	mov	r2, r4
 800694c:	462b      	mov	r3, r5
 800694e:	f04f 0000 	mov.w	r0, #0
 8006952:	f04f 0100 	mov.w	r1, #0
 8006956:	0159      	lsls	r1, r3, #5
 8006958:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800695c:	0150      	lsls	r0, r2, #5
 800695e:	4602      	mov	r2, r0
 8006960:	460b      	mov	r3, r1
 8006962:	4621      	mov	r1, r4
 8006964:	1a51      	subs	r1, r2, r1
 8006966:	62b9      	str	r1, [r7, #40]	@ 0x28
 8006968:	4629      	mov	r1, r5
 800696a:	eb63 0301 	sbc.w	r3, r3, r1
 800696e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006970:	f04f 0200 	mov.w	r2, #0
 8006974:	f04f 0300 	mov.w	r3, #0
 8006978:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 800697c:	4649      	mov	r1, r9
 800697e:	018b      	lsls	r3, r1, #6
 8006980:	4641      	mov	r1, r8
 8006982:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006986:	4641      	mov	r1, r8
 8006988:	018a      	lsls	r2, r1, #6
 800698a:	4641      	mov	r1, r8
 800698c:	ebb2 0a01 	subs.w	sl, r2, r1
 8006990:	4649      	mov	r1, r9
 8006992:	eb63 0b01 	sbc.w	fp, r3, r1
 8006996:	f04f 0200 	mov.w	r2, #0
 800699a:	f04f 0300 	mov.w	r3, #0
 800699e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80069a2:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80069a6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80069aa:	4692      	mov	sl, r2
 80069ac:	469b      	mov	fp, r3
 80069ae:	4623      	mov	r3, r4
 80069b0:	eb1a 0303 	adds.w	r3, sl, r3
 80069b4:	623b      	str	r3, [r7, #32]
 80069b6:	462b      	mov	r3, r5
 80069b8:	eb4b 0303 	adc.w	r3, fp, r3
 80069bc:	627b      	str	r3, [r7, #36]	@ 0x24
 80069be:	f04f 0200 	mov.w	r2, #0
 80069c2:	f04f 0300 	mov.w	r3, #0
 80069c6:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80069ca:	4629      	mov	r1, r5
 80069cc:	028b      	lsls	r3, r1, #10
 80069ce:	4621      	mov	r1, r4
 80069d0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80069d4:	4621      	mov	r1, r4
 80069d6:	028a      	lsls	r2, r1, #10
 80069d8:	4610      	mov	r0, r2
 80069da:	4619      	mov	r1, r3
 80069dc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80069e0:	2200      	movs	r2, #0
 80069e2:	673b      	str	r3, [r7, #112]	@ 0x70
 80069e4:	677a      	str	r2, [r7, #116]	@ 0x74
 80069e6:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 80069ea:	f7fa f82b 	bl	8000a44 <__aeabi_uldivmod>
 80069ee:	4602      	mov	r2, r0
 80069f0:	460b      	mov	r3, r1
 80069f2:	4613      	mov	r3, r2
 80069f4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80069f8:	4b41      	ldr	r3, [pc, #260]	@ (8006b00 <HAL_RCC_GetSysClockFreq+0x354>)
 80069fa:	685b      	ldr	r3, [r3, #4]
 80069fc:	0c1b      	lsrs	r3, r3, #16
 80069fe:	f003 0303 	and.w	r3, r3, #3
 8006a02:	3301      	adds	r3, #1
 8006a04:	005b      	lsls	r3, r3, #1
 8006a06:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8006a0a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006a0e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006a12:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a16:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8006a1a:	e0e9      	b.n	8006bf0 <HAL_RCC_GetSysClockFreq+0x444>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006a1c:	4b38      	ldr	r3, [pc, #224]	@ (8006b00 <HAL_RCC_GetSysClockFreq+0x354>)
 8006a1e:	685b      	ldr	r3, [r3, #4]
 8006a20:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006a24:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006a28:	4b35      	ldr	r3, [pc, #212]	@ (8006b00 <HAL_RCC_GetSysClockFreq+0x354>)
 8006a2a:	685b      	ldr	r3, [r3, #4]
 8006a2c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d069      	beq.n	8006b08 <HAL_RCC_GetSysClockFreq+0x35c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006a34:	4b32      	ldr	r3, [pc, #200]	@ (8006b00 <HAL_RCC_GetSysClockFreq+0x354>)
 8006a36:	685b      	ldr	r3, [r3, #4]
 8006a38:	099b      	lsrs	r3, r3, #6
 8006a3a:	2200      	movs	r2, #0
 8006a3c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006a3e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006a40:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006a42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a46:	663b      	str	r3, [r7, #96]	@ 0x60
 8006a48:	2300      	movs	r3, #0
 8006a4a:	667b      	str	r3, [r7, #100]	@ 0x64
 8006a4c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8006a50:	4622      	mov	r2, r4
 8006a52:	462b      	mov	r3, r5
 8006a54:	f04f 0000 	mov.w	r0, #0
 8006a58:	f04f 0100 	mov.w	r1, #0
 8006a5c:	0159      	lsls	r1, r3, #5
 8006a5e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006a62:	0150      	lsls	r0, r2, #5
 8006a64:	4602      	mov	r2, r0
 8006a66:	460b      	mov	r3, r1
 8006a68:	4621      	mov	r1, r4
 8006a6a:	1a51      	subs	r1, r2, r1
 8006a6c:	61b9      	str	r1, [r7, #24]
 8006a6e:	4629      	mov	r1, r5
 8006a70:	eb63 0301 	sbc.w	r3, r3, r1
 8006a74:	61fb      	str	r3, [r7, #28]
 8006a76:	f04f 0200 	mov.w	r2, #0
 8006a7a:	f04f 0300 	mov.w	r3, #0
 8006a7e:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8006a82:	4659      	mov	r1, fp
 8006a84:	018b      	lsls	r3, r1, #6
 8006a86:	4651      	mov	r1, sl
 8006a88:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006a8c:	4651      	mov	r1, sl
 8006a8e:	018a      	lsls	r2, r1, #6
 8006a90:	4651      	mov	r1, sl
 8006a92:	ebb2 0801 	subs.w	r8, r2, r1
 8006a96:	4659      	mov	r1, fp
 8006a98:	eb63 0901 	sbc.w	r9, r3, r1
 8006a9c:	f04f 0200 	mov.w	r2, #0
 8006aa0:	f04f 0300 	mov.w	r3, #0
 8006aa4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006aa8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006aac:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006ab0:	4690      	mov	r8, r2
 8006ab2:	4699      	mov	r9, r3
 8006ab4:	4623      	mov	r3, r4
 8006ab6:	eb18 0303 	adds.w	r3, r8, r3
 8006aba:	613b      	str	r3, [r7, #16]
 8006abc:	462b      	mov	r3, r5
 8006abe:	eb49 0303 	adc.w	r3, r9, r3
 8006ac2:	617b      	str	r3, [r7, #20]
 8006ac4:	f04f 0200 	mov.w	r2, #0
 8006ac8:	f04f 0300 	mov.w	r3, #0
 8006acc:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8006ad0:	4629      	mov	r1, r5
 8006ad2:	028b      	lsls	r3, r1, #10
 8006ad4:	4621      	mov	r1, r4
 8006ad6:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006ada:	4621      	mov	r1, r4
 8006adc:	028a      	lsls	r2, r1, #10
 8006ade:	4610      	mov	r0, r2
 8006ae0:	4619      	mov	r1, r3
 8006ae2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006ae6:	2200      	movs	r2, #0
 8006ae8:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006aea:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8006aec:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8006af0:	f7f9 ffa8 	bl	8000a44 <__aeabi_uldivmod>
 8006af4:	4602      	mov	r2, r0
 8006af6:	460b      	mov	r3, r1
 8006af8:	4613      	mov	r3, r2
 8006afa:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006afe:	e063      	b.n	8006bc8 <HAL_RCC_GetSysClockFreq+0x41c>
 8006b00:	40023800 	.word	0x40023800
 8006b04:	00f42400 	.word	0x00f42400
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006b08:	4b3d      	ldr	r3, [pc, #244]	@ (8006c00 <HAL_RCC_GetSysClockFreq+0x454>)
 8006b0a:	685b      	ldr	r3, [r3, #4]
 8006b0c:	099b      	lsrs	r3, r3, #6
 8006b0e:	2200      	movs	r2, #0
 8006b10:	4618      	mov	r0, r3
 8006b12:	4611      	mov	r1, r2
 8006b14:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006b18:	653b      	str	r3, [r7, #80]	@ 0x50
 8006b1a:	2300      	movs	r3, #0
 8006b1c:	657b      	str	r3, [r7, #84]	@ 0x54
 8006b1e:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8006b22:	4642      	mov	r2, r8
 8006b24:	464b      	mov	r3, r9
 8006b26:	f04f 0000 	mov.w	r0, #0
 8006b2a:	f04f 0100 	mov.w	r1, #0
 8006b2e:	0159      	lsls	r1, r3, #5
 8006b30:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006b34:	0150      	lsls	r0, r2, #5
 8006b36:	4602      	mov	r2, r0
 8006b38:	460b      	mov	r3, r1
 8006b3a:	4641      	mov	r1, r8
 8006b3c:	1a51      	subs	r1, r2, r1
 8006b3e:	60b9      	str	r1, [r7, #8]
 8006b40:	4649      	mov	r1, r9
 8006b42:	eb63 0301 	sbc.w	r3, r3, r1
 8006b46:	60fb      	str	r3, [r7, #12]
 8006b48:	f04f 0200 	mov.w	r2, #0
 8006b4c:	f04f 0300 	mov.w	r3, #0
 8006b50:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8006b54:	4659      	mov	r1, fp
 8006b56:	018b      	lsls	r3, r1, #6
 8006b58:	4651      	mov	r1, sl
 8006b5a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006b5e:	4651      	mov	r1, sl
 8006b60:	018a      	lsls	r2, r1, #6
 8006b62:	4651      	mov	r1, sl
 8006b64:	1a54      	subs	r4, r2, r1
 8006b66:	4659      	mov	r1, fp
 8006b68:	eb63 0501 	sbc.w	r5, r3, r1
 8006b6c:	f04f 0200 	mov.w	r2, #0
 8006b70:	f04f 0300 	mov.w	r3, #0
 8006b74:	00eb      	lsls	r3, r5, #3
 8006b76:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006b7a:	00e2      	lsls	r2, r4, #3
 8006b7c:	4614      	mov	r4, r2
 8006b7e:	461d      	mov	r5, r3
 8006b80:	4643      	mov	r3, r8
 8006b82:	18e3      	adds	r3, r4, r3
 8006b84:	603b      	str	r3, [r7, #0]
 8006b86:	464b      	mov	r3, r9
 8006b88:	eb45 0303 	adc.w	r3, r5, r3
 8006b8c:	607b      	str	r3, [r7, #4]
 8006b8e:	f04f 0200 	mov.w	r2, #0
 8006b92:	f04f 0300 	mov.w	r3, #0
 8006b96:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006b9a:	4629      	mov	r1, r5
 8006b9c:	028b      	lsls	r3, r1, #10
 8006b9e:	4621      	mov	r1, r4
 8006ba0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006ba4:	4621      	mov	r1, r4
 8006ba6:	028a      	lsls	r2, r1, #10
 8006ba8:	4610      	mov	r0, r2
 8006baa:	4619      	mov	r1, r3
 8006bac:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006bb0:	2200      	movs	r2, #0
 8006bb2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006bb4:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8006bb6:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8006bba:	f7f9 ff43 	bl	8000a44 <__aeabi_uldivmod>
 8006bbe:	4602      	mov	r2, r0
 8006bc0:	460b      	mov	r3, r1
 8006bc2:	4613      	mov	r3, r2
 8006bc4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8006bc8:	4b0d      	ldr	r3, [pc, #52]	@ (8006c00 <HAL_RCC_GetSysClockFreq+0x454>)
 8006bca:	685b      	ldr	r3, [r3, #4]
 8006bcc:	0f1b      	lsrs	r3, r3, #28
 8006bce:	f003 0307 	and.w	r3, r3, #7
 8006bd2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8006bd6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006bda:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8006bde:	fbb2 f3f3 	udiv	r3, r2, r3
 8006be2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8006be6:	e003      	b.n	8006bf0 <HAL_RCC_GetSysClockFreq+0x444>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006be8:	4b06      	ldr	r3, [pc, #24]	@ (8006c04 <HAL_RCC_GetSysClockFreq+0x458>)
 8006bea:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8006bee:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006bf0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8006bf4:	4618      	mov	r0, r3
 8006bf6:	37b8      	adds	r7, #184	@ 0xb8
 8006bf8:	46bd      	mov	sp, r7
 8006bfa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006bfe:	bf00      	nop
 8006c00:	40023800 	.word	0x40023800
 8006c04:	00f42400 	.word	0x00f42400

08006c08 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006c08:	b580      	push	{r7, lr}
 8006c0a:	b086      	sub	sp, #24
 8006c0c:	af00      	add	r7, sp, #0
 8006c0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d101      	bne.n	8006c1a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006c16:	2301      	movs	r3, #1
 8006c18:	e28d      	b.n	8007136 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	f003 0301 	and.w	r3, r3, #1
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	f000 8083 	beq.w	8006d2e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8006c28:	4b94      	ldr	r3, [pc, #592]	@ (8006e7c <HAL_RCC_OscConfig+0x274>)
 8006c2a:	689b      	ldr	r3, [r3, #8]
 8006c2c:	f003 030c 	and.w	r3, r3, #12
 8006c30:	2b04      	cmp	r3, #4
 8006c32:	d019      	beq.n	8006c68 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8006c34:	4b91      	ldr	r3, [pc, #580]	@ (8006e7c <HAL_RCC_OscConfig+0x274>)
 8006c36:	689b      	ldr	r3, [r3, #8]
 8006c38:	f003 030c 	and.w	r3, r3, #12
        || \
 8006c3c:	2b08      	cmp	r3, #8
 8006c3e:	d106      	bne.n	8006c4e <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8006c40:	4b8e      	ldr	r3, [pc, #568]	@ (8006e7c <HAL_RCC_OscConfig+0x274>)
 8006c42:	685b      	ldr	r3, [r3, #4]
 8006c44:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006c48:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006c4c:	d00c      	beq.n	8006c68 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006c4e:	4b8b      	ldr	r3, [pc, #556]	@ (8006e7c <HAL_RCC_OscConfig+0x274>)
 8006c50:	689b      	ldr	r3, [r3, #8]
 8006c52:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8006c56:	2b0c      	cmp	r3, #12
 8006c58:	d112      	bne.n	8006c80 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006c5a:	4b88      	ldr	r3, [pc, #544]	@ (8006e7c <HAL_RCC_OscConfig+0x274>)
 8006c5c:	685b      	ldr	r3, [r3, #4]
 8006c5e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006c62:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006c66:	d10b      	bne.n	8006c80 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006c68:	4b84      	ldr	r3, [pc, #528]	@ (8006e7c <HAL_RCC_OscConfig+0x274>)
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d05b      	beq.n	8006d2c <HAL_RCC_OscConfig+0x124>
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	685b      	ldr	r3, [r3, #4]
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d157      	bne.n	8006d2c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8006c7c:	2301      	movs	r3, #1
 8006c7e:	e25a      	b.n	8007136 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	685b      	ldr	r3, [r3, #4]
 8006c84:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006c88:	d106      	bne.n	8006c98 <HAL_RCC_OscConfig+0x90>
 8006c8a:	4b7c      	ldr	r3, [pc, #496]	@ (8006e7c <HAL_RCC_OscConfig+0x274>)
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	4a7b      	ldr	r2, [pc, #492]	@ (8006e7c <HAL_RCC_OscConfig+0x274>)
 8006c90:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006c94:	6013      	str	r3, [r2, #0]
 8006c96:	e01d      	b.n	8006cd4 <HAL_RCC_OscConfig+0xcc>
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	685b      	ldr	r3, [r3, #4]
 8006c9c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006ca0:	d10c      	bne.n	8006cbc <HAL_RCC_OscConfig+0xb4>
 8006ca2:	4b76      	ldr	r3, [pc, #472]	@ (8006e7c <HAL_RCC_OscConfig+0x274>)
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	4a75      	ldr	r2, [pc, #468]	@ (8006e7c <HAL_RCC_OscConfig+0x274>)
 8006ca8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006cac:	6013      	str	r3, [r2, #0]
 8006cae:	4b73      	ldr	r3, [pc, #460]	@ (8006e7c <HAL_RCC_OscConfig+0x274>)
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	4a72      	ldr	r2, [pc, #456]	@ (8006e7c <HAL_RCC_OscConfig+0x274>)
 8006cb4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006cb8:	6013      	str	r3, [r2, #0]
 8006cba:	e00b      	b.n	8006cd4 <HAL_RCC_OscConfig+0xcc>
 8006cbc:	4b6f      	ldr	r3, [pc, #444]	@ (8006e7c <HAL_RCC_OscConfig+0x274>)
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	4a6e      	ldr	r2, [pc, #440]	@ (8006e7c <HAL_RCC_OscConfig+0x274>)
 8006cc2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006cc6:	6013      	str	r3, [r2, #0]
 8006cc8:	4b6c      	ldr	r3, [pc, #432]	@ (8006e7c <HAL_RCC_OscConfig+0x274>)
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	4a6b      	ldr	r2, [pc, #428]	@ (8006e7c <HAL_RCC_OscConfig+0x274>)
 8006cce:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006cd2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	685b      	ldr	r3, [r3, #4]
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d013      	beq.n	8006d04 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006cdc:	f7fd fec4 	bl	8004a68 <HAL_GetTick>
 8006ce0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006ce2:	e008      	b.n	8006cf6 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006ce4:	f7fd fec0 	bl	8004a68 <HAL_GetTick>
 8006ce8:	4602      	mov	r2, r0
 8006cea:	693b      	ldr	r3, [r7, #16]
 8006cec:	1ad3      	subs	r3, r2, r3
 8006cee:	2b64      	cmp	r3, #100	@ 0x64
 8006cf0:	d901      	bls.n	8006cf6 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8006cf2:	2303      	movs	r3, #3
 8006cf4:	e21f      	b.n	8007136 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006cf6:	4b61      	ldr	r3, [pc, #388]	@ (8006e7c <HAL_RCC_OscConfig+0x274>)
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d0f0      	beq.n	8006ce4 <HAL_RCC_OscConfig+0xdc>
 8006d02:	e014      	b.n	8006d2e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d04:	f7fd feb0 	bl	8004a68 <HAL_GetTick>
 8006d08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006d0a:	e008      	b.n	8006d1e <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006d0c:	f7fd feac 	bl	8004a68 <HAL_GetTick>
 8006d10:	4602      	mov	r2, r0
 8006d12:	693b      	ldr	r3, [r7, #16]
 8006d14:	1ad3      	subs	r3, r2, r3
 8006d16:	2b64      	cmp	r3, #100	@ 0x64
 8006d18:	d901      	bls.n	8006d1e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8006d1a:	2303      	movs	r3, #3
 8006d1c:	e20b      	b.n	8007136 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006d1e:	4b57      	ldr	r3, [pc, #348]	@ (8006e7c <HAL_RCC_OscConfig+0x274>)
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d1f0      	bne.n	8006d0c <HAL_RCC_OscConfig+0x104>
 8006d2a:	e000      	b.n	8006d2e <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006d2c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	f003 0302 	and.w	r3, r3, #2
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d06f      	beq.n	8006e1a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8006d3a:	4b50      	ldr	r3, [pc, #320]	@ (8006e7c <HAL_RCC_OscConfig+0x274>)
 8006d3c:	689b      	ldr	r3, [r3, #8]
 8006d3e:	f003 030c 	and.w	r3, r3, #12
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d017      	beq.n	8006d76 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8006d46:	4b4d      	ldr	r3, [pc, #308]	@ (8006e7c <HAL_RCC_OscConfig+0x274>)
 8006d48:	689b      	ldr	r3, [r3, #8]
 8006d4a:	f003 030c 	and.w	r3, r3, #12
        || \
 8006d4e:	2b08      	cmp	r3, #8
 8006d50:	d105      	bne.n	8006d5e <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8006d52:	4b4a      	ldr	r3, [pc, #296]	@ (8006e7c <HAL_RCC_OscConfig+0x274>)
 8006d54:	685b      	ldr	r3, [r3, #4]
 8006d56:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d00b      	beq.n	8006d76 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006d5e:	4b47      	ldr	r3, [pc, #284]	@ (8006e7c <HAL_RCC_OscConfig+0x274>)
 8006d60:	689b      	ldr	r3, [r3, #8]
 8006d62:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8006d66:	2b0c      	cmp	r3, #12
 8006d68:	d11c      	bne.n	8006da4 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006d6a:	4b44      	ldr	r3, [pc, #272]	@ (8006e7c <HAL_RCC_OscConfig+0x274>)
 8006d6c:	685b      	ldr	r3, [r3, #4]
 8006d6e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d116      	bne.n	8006da4 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006d76:	4b41      	ldr	r3, [pc, #260]	@ (8006e7c <HAL_RCC_OscConfig+0x274>)
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	f003 0302 	and.w	r3, r3, #2
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d005      	beq.n	8006d8e <HAL_RCC_OscConfig+0x186>
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	68db      	ldr	r3, [r3, #12]
 8006d86:	2b01      	cmp	r3, #1
 8006d88:	d001      	beq.n	8006d8e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8006d8a:	2301      	movs	r3, #1
 8006d8c:	e1d3      	b.n	8007136 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006d8e:	4b3b      	ldr	r3, [pc, #236]	@ (8006e7c <HAL_RCC_OscConfig+0x274>)
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	691b      	ldr	r3, [r3, #16]
 8006d9a:	00db      	lsls	r3, r3, #3
 8006d9c:	4937      	ldr	r1, [pc, #220]	@ (8006e7c <HAL_RCC_OscConfig+0x274>)
 8006d9e:	4313      	orrs	r3, r2
 8006da0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006da2:	e03a      	b.n	8006e1a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	68db      	ldr	r3, [r3, #12]
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d020      	beq.n	8006dee <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006dac:	4b34      	ldr	r3, [pc, #208]	@ (8006e80 <HAL_RCC_OscConfig+0x278>)
 8006dae:	2201      	movs	r2, #1
 8006db0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006db2:	f7fd fe59 	bl	8004a68 <HAL_GetTick>
 8006db6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006db8:	e008      	b.n	8006dcc <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006dba:	f7fd fe55 	bl	8004a68 <HAL_GetTick>
 8006dbe:	4602      	mov	r2, r0
 8006dc0:	693b      	ldr	r3, [r7, #16]
 8006dc2:	1ad3      	subs	r3, r2, r3
 8006dc4:	2b02      	cmp	r3, #2
 8006dc6:	d901      	bls.n	8006dcc <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8006dc8:	2303      	movs	r3, #3
 8006dca:	e1b4      	b.n	8007136 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006dcc:	4b2b      	ldr	r3, [pc, #172]	@ (8006e7c <HAL_RCC_OscConfig+0x274>)
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	f003 0302 	and.w	r3, r3, #2
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d0f0      	beq.n	8006dba <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006dd8:	4b28      	ldr	r3, [pc, #160]	@ (8006e7c <HAL_RCC_OscConfig+0x274>)
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	691b      	ldr	r3, [r3, #16]
 8006de4:	00db      	lsls	r3, r3, #3
 8006de6:	4925      	ldr	r1, [pc, #148]	@ (8006e7c <HAL_RCC_OscConfig+0x274>)
 8006de8:	4313      	orrs	r3, r2
 8006dea:	600b      	str	r3, [r1, #0]
 8006dec:	e015      	b.n	8006e1a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006dee:	4b24      	ldr	r3, [pc, #144]	@ (8006e80 <HAL_RCC_OscConfig+0x278>)
 8006df0:	2200      	movs	r2, #0
 8006df2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006df4:	f7fd fe38 	bl	8004a68 <HAL_GetTick>
 8006df8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006dfa:	e008      	b.n	8006e0e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006dfc:	f7fd fe34 	bl	8004a68 <HAL_GetTick>
 8006e00:	4602      	mov	r2, r0
 8006e02:	693b      	ldr	r3, [r7, #16]
 8006e04:	1ad3      	subs	r3, r2, r3
 8006e06:	2b02      	cmp	r3, #2
 8006e08:	d901      	bls.n	8006e0e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8006e0a:	2303      	movs	r3, #3
 8006e0c:	e193      	b.n	8007136 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006e0e:	4b1b      	ldr	r3, [pc, #108]	@ (8006e7c <HAL_RCC_OscConfig+0x274>)
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	f003 0302 	and.w	r3, r3, #2
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d1f0      	bne.n	8006dfc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	f003 0308 	and.w	r3, r3, #8
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d036      	beq.n	8006e94 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	695b      	ldr	r3, [r3, #20]
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d016      	beq.n	8006e5c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006e2e:	4b15      	ldr	r3, [pc, #84]	@ (8006e84 <HAL_RCC_OscConfig+0x27c>)
 8006e30:	2201      	movs	r2, #1
 8006e32:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006e34:	f7fd fe18 	bl	8004a68 <HAL_GetTick>
 8006e38:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006e3a:	e008      	b.n	8006e4e <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006e3c:	f7fd fe14 	bl	8004a68 <HAL_GetTick>
 8006e40:	4602      	mov	r2, r0
 8006e42:	693b      	ldr	r3, [r7, #16]
 8006e44:	1ad3      	subs	r3, r2, r3
 8006e46:	2b02      	cmp	r3, #2
 8006e48:	d901      	bls.n	8006e4e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8006e4a:	2303      	movs	r3, #3
 8006e4c:	e173      	b.n	8007136 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006e4e:	4b0b      	ldr	r3, [pc, #44]	@ (8006e7c <HAL_RCC_OscConfig+0x274>)
 8006e50:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006e52:	f003 0302 	and.w	r3, r3, #2
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d0f0      	beq.n	8006e3c <HAL_RCC_OscConfig+0x234>
 8006e5a:	e01b      	b.n	8006e94 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006e5c:	4b09      	ldr	r3, [pc, #36]	@ (8006e84 <HAL_RCC_OscConfig+0x27c>)
 8006e5e:	2200      	movs	r2, #0
 8006e60:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006e62:	f7fd fe01 	bl	8004a68 <HAL_GetTick>
 8006e66:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006e68:	e00e      	b.n	8006e88 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006e6a:	f7fd fdfd 	bl	8004a68 <HAL_GetTick>
 8006e6e:	4602      	mov	r2, r0
 8006e70:	693b      	ldr	r3, [r7, #16]
 8006e72:	1ad3      	subs	r3, r2, r3
 8006e74:	2b02      	cmp	r3, #2
 8006e76:	d907      	bls.n	8006e88 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8006e78:	2303      	movs	r3, #3
 8006e7a:	e15c      	b.n	8007136 <HAL_RCC_OscConfig+0x52e>
 8006e7c:	40023800 	.word	0x40023800
 8006e80:	42470000 	.word	0x42470000
 8006e84:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006e88:	4b8a      	ldr	r3, [pc, #552]	@ (80070b4 <HAL_RCC_OscConfig+0x4ac>)
 8006e8a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006e8c:	f003 0302 	and.w	r3, r3, #2
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d1ea      	bne.n	8006e6a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	f003 0304 	and.w	r3, r3, #4
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	f000 8097 	beq.w	8006fd0 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006ea2:	2300      	movs	r3, #0
 8006ea4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006ea6:	4b83      	ldr	r3, [pc, #524]	@ (80070b4 <HAL_RCC_OscConfig+0x4ac>)
 8006ea8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006eaa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d10f      	bne.n	8006ed2 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006eb2:	2300      	movs	r3, #0
 8006eb4:	60bb      	str	r3, [r7, #8]
 8006eb6:	4b7f      	ldr	r3, [pc, #508]	@ (80070b4 <HAL_RCC_OscConfig+0x4ac>)
 8006eb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006eba:	4a7e      	ldr	r2, [pc, #504]	@ (80070b4 <HAL_RCC_OscConfig+0x4ac>)
 8006ebc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006ec0:	6413      	str	r3, [r2, #64]	@ 0x40
 8006ec2:	4b7c      	ldr	r3, [pc, #496]	@ (80070b4 <HAL_RCC_OscConfig+0x4ac>)
 8006ec4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ec6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006eca:	60bb      	str	r3, [r7, #8]
 8006ecc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006ece:	2301      	movs	r3, #1
 8006ed0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006ed2:	4b79      	ldr	r3, [pc, #484]	@ (80070b8 <HAL_RCC_OscConfig+0x4b0>)
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d118      	bne.n	8006f10 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006ede:	4b76      	ldr	r3, [pc, #472]	@ (80070b8 <HAL_RCC_OscConfig+0x4b0>)
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	4a75      	ldr	r2, [pc, #468]	@ (80070b8 <HAL_RCC_OscConfig+0x4b0>)
 8006ee4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006ee8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006eea:	f7fd fdbd 	bl	8004a68 <HAL_GetTick>
 8006eee:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006ef0:	e008      	b.n	8006f04 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006ef2:	f7fd fdb9 	bl	8004a68 <HAL_GetTick>
 8006ef6:	4602      	mov	r2, r0
 8006ef8:	693b      	ldr	r3, [r7, #16]
 8006efa:	1ad3      	subs	r3, r2, r3
 8006efc:	2b02      	cmp	r3, #2
 8006efe:	d901      	bls.n	8006f04 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8006f00:	2303      	movs	r3, #3
 8006f02:	e118      	b.n	8007136 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006f04:	4b6c      	ldr	r3, [pc, #432]	@ (80070b8 <HAL_RCC_OscConfig+0x4b0>)
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d0f0      	beq.n	8006ef2 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	689b      	ldr	r3, [r3, #8]
 8006f14:	2b01      	cmp	r3, #1
 8006f16:	d106      	bne.n	8006f26 <HAL_RCC_OscConfig+0x31e>
 8006f18:	4b66      	ldr	r3, [pc, #408]	@ (80070b4 <HAL_RCC_OscConfig+0x4ac>)
 8006f1a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006f1c:	4a65      	ldr	r2, [pc, #404]	@ (80070b4 <HAL_RCC_OscConfig+0x4ac>)
 8006f1e:	f043 0301 	orr.w	r3, r3, #1
 8006f22:	6713      	str	r3, [r2, #112]	@ 0x70
 8006f24:	e01c      	b.n	8006f60 <HAL_RCC_OscConfig+0x358>
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	689b      	ldr	r3, [r3, #8]
 8006f2a:	2b05      	cmp	r3, #5
 8006f2c:	d10c      	bne.n	8006f48 <HAL_RCC_OscConfig+0x340>
 8006f2e:	4b61      	ldr	r3, [pc, #388]	@ (80070b4 <HAL_RCC_OscConfig+0x4ac>)
 8006f30:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006f32:	4a60      	ldr	r2, [pc, #384]	@ (80070b4 <HAL_RCC_OscConfig+0x4ac>)
 8006f34:	f043 0304 	orr.w	r3, r3, #4
 8006f38:	6713      	str	r3, [r2, #112]	@ 0x70
 8006f3a:	4b5e      	ldr	r3, [pc, #376]	@ (80070b4 <HAL_RCC_OscConfig+0x4ac>)
 8006f3c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006f3e:	4a5d      	ldr	r2, [pc, #372]	@ (80070b4 <HAL_RCC_OscConfig+0x4ac>)
 8006f40:	f043 0301 	orr.w	r3, r3, #1
 8006f44:	6713      	str	r3, [r2, #112]	@ 0x70
 8006f46:	e00b      	b.n	8006f60 <HAL_RCC_OscConfig+0x358>
 8006f48:	4b5a      	ldr	r3, [pc, #360]	@ (80070b4 <HAL_RCC_OscConfig+0x4ac>)
 8006f4a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006f4c:	4a59      	ldr	r2, [pc, #356]	@ (80070b4 <HAL_RCC_OscConfig+0x4ac>)
 8006f4e:	f023 0301 	bic.w	r3, r3, #1
 8006f52:	6713      	str	r3, [r2, #112]	@ 0x70
 8006f54:	4b57      	ldr	r3, [pc, #348]	@ (80070b4 <HAL_RCC_OscConfig+0x4ac>)
 8006f56:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006f58:	4a56      	ldr	r2, [pc, #344]	@ (80070b4 <HAL_RCC_OscConfig+0x4ac>)
 8006f5a:	f023 0304 	bic.w	r3, r3, #4
 8006f5e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	689b      	ldr	r3, [r3, #8]
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d015      	beq.n	8006f94 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006f68:	f7fd fd7e 	bl	8004a68 <HAL_GetTick>
 8006f6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006f6e:	e00a      	b.n	8006f86 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006f70:	f7fd fd7a 	bl	8004a68 <HAL_GetTick>
 8006f74:	4602      	mov	r2, r0
 8006f76:	693b      	ldr	r3, [r7, #16]
 8006f78:	1ad3      	subs	r3, r2, r3
 8006f7a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006f7e:	4293      	cmp	r3, r2
 8006f80:	d901      	bls.n	8006f86 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8006f82:	2303      	movs	r3, #3
 8006f84:	e0d7      	b.n	8007136 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006f86:	4b4b      	ldr	r3, [pc, #300]	@ (80070b4 <HAL_RCC_OscConfig+0x4ac>)
 8006f88:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006f8a:	f003 0302 	and.w	r3, r3, #2
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d0ee      	beq.n	8006f70 <HAL_RCC_OscConfig+0x368>
 8006f92:	e014      	b.n	8006fbe <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006f94:	f7fd fd68 	bl	8004a68 <HAL_GetTick>
 8006f98:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006f9a:	e00a      	b.n	8006fb2 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006f9c:	f7fd fd64 	bl	8004a68 <HAL_GetTick>
 8006fa0:	4602      	mov	r2, r0
 8006fa2:	693b      	ldr	r3, [r7, #16]
 8006fa4:	1ad3      	subs	r3, r2, r3
 8006fa6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006faa:	4293      	cmp	r3, r2
 8006fac:	d901      	bls.n	8006fb2 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8006fae:	2303      	movs	r3, #3
 8006fb0:	e0c1      	b.n	8007136 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006fb2:	4b40      	ldr	r3, [pc, #256]	@ (80070b4 <HAL_RCC_OscConfig+0x4ac>)
 8006fb4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006fb6:	f003 0302 	and.w	r3, r3, #2
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d1ee      	bne.n	8006f9c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006fbe:	7dfb      	ldrb	r3, [r7, #23]
 8006fc0:	2b01      	cmp	r3, #1
 8006fc2:	d105      	bne.n	8006fd0 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006fc4:	4b3b      	ldr	r3, [pc, #236]	@ (80070b4 <HAL_RCC_OscConfig+0x4ac>)
 8006fc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006fc8:	4a3a      	ldr	r2, [pc, #232]	@ (80070b4 <HAL_RCC_OscConfig+0x4ac>)
 8006fca:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006fce:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	699b      	ldr	r3, [r3, #24]
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	f000 80ad 	beq.w	8007134 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006fda:	4b36      	ldr	r3, [pc, #216]	@ (80070b4 <HAL_RCC_OscConfig+0x4ac>)
 8006fdc:	689b      	ldr	r3, [r3, #8]
 8006fde:	f003 030c 	and.w	r3, r3, #12
 8006fe2:	2b08      	cmp	r3, #8
 8006fe4:	d060      	beq.n	80070a8 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	699b      	ldr	r3, [r3, #24]
 8006fea:	2b02      	cmp	r3, #2
 8006fec:	d145      	bne.n	800707a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006fee:	4b33      	ldr	r3, [pc, #204]	@ (80070bc <HAL_RCC_OscConfig+0x4b4>)
 8006ff0:	2200      	movs	r2, #0
 8006ff2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ff4:	f7fd fd38 	bl	8004a68 <HAL_GetTick>
 8006ff8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006ffa:	e008      	b.n	800700e <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006ffc:	f7fd fd34 	bl	8004a68 <HAL_GetTick>
 8007000:	4602      	mov	r2, r0
 8007002:	693b      	ldr	r3, [r7, #16]
 8007004:	1ad3      	subs	r3, r2, r3
 8007006:	2b02      	cmp	r3, #2
 8007008:	d901      	bls.n	800700e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800700a:	2303      	movs	r3, #3
 800700c:	e093      	b.n	8007136 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800700e:	4b29      	ldr	r3, [pc, #164]	@ (80070b4 <HAL_RCC_OscConfig+0x4ac>)
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007016:	2b00      	cmp	r3, #0
 8007018:	d1f0      	bne.n	8006ffc <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	69da      	ldr	r2, [r3, #28]
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	6a1b      	ldr	r3, [r3, #32]
 8007022:	431a      	orrs	r2, r3
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007028:	019b      	lsls	r3, r3, #6
 800702a:	431a      	orrs	r2, r3
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007030:	085b      	lsrs	r3, r3, #1
 8007032:	3b01      	subs	r3, #1
 8007034:	041b      	lsls	r3, r3, #16
 8007036:	431a      	orrs	r2, r3
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800703c:	061b      	lsls	r3, r3, #24
 800703e:	431a      	orrs	r2, r3
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007044:	071b      	lsls	r3, r3, #28
 8007046:	491b      	ldr	r1, [pc, #108]	@ (80070b4 <HAL_RCC_OscConfig+0x4ac>)
 8007048:	4313      	orrs	r3, r2
 800704a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800704c:	4b1b      	ldr	r3, [pc, #108]	@ (80070bc <HAL_RCC_OscConfig+0x4b4>)
 800704e:	2201      	movs	r2, #1
 8007050:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007052:	f7fd fd09 	bl	8004a68 <HAL_GetTick>
 8007056:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007058:	e008      	b.n	800706c <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800705a:	f7fd fd05 	bl	8004a68 <HAL_GetTick>
 800705e:	4602      	mov	r2, r0
 8007060:	693b      	ldr	r3, [r7, #16]
 8007062:	1ad3      	subs	r3, r2, r3
 8007064:	2b02      	cmp	r3, #2
 8007066:	d901      	bls.n	800706c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8007068:	2303      	movs	r3, #3
 800706a:	e064      	b.n	8007136 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800706c:	4b11      	ldr	r3, [pc, #68]	@ (80070b4 <HAL_RCC_OscConfig+0x4ac>)
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007074:	2b00      	cmp	r3, #0
 8007076:	d0f0      	beq.n	800705a <HAL_RCC_OscConfig+0x452>
 8007078:	e05c      	b.n	8007134 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800707a:	4b10      	ldr	r3, [pc, #64]	@ (80070bc <HAL_RCC_OscConfig+0x4b4>)
 800707c:	2200      	movs	r2, #0
 800707e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007080:	f7fd fcf2 	bl	8004a68 <HAL_GetTick>
 8007084:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007086:	e008      	b.n	800709a <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007088:	f7fd fcee 	bl	8004a68 <HAL_GetTick>
 800708c:	4602      	mov	r2, r0
 800708e:	693b      	ldr	r3, [r7, #16]
 8007090:	1ad3      	subs	r3, r2, r3
 8007092:	2b02      	cmp	r3, #2
 8007094:	d901      	bls.n	800709a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8007096:	2303      	movs	r3, #3
 8007098:	e04d      	b.n	8007136 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800709a:	4b06      	ldr	r3, [pc, #24]	@ (80070b4 <HAL_RCC_OscConfig+0x4ac>)
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d1f0      	bne.n	8007088 <HAL_RCC_OscConfig+0x480>
 80070a6:	e045      	b.n	8007134 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	699b      	ldr	r3, [r3, #24]
 80070ac:	2b01      	cmp	r3, #1
 80070ae:	d107      	bne.n	80070c0 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80070b0:	2301      	movs	r3, #1
 80070b2:	e040      	b.n	8007136 <HAL_RCC_OscConfig+0x52e>
 80070b4:	40023800 	.word	0x40023800
 80070b8:	40007000 	.word	0x40007000
 80070bc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80070c0:	4b1f      	ldr	r3, [pc, #124]	@ (8007140 <HAL_RCC_OscConfig+0x538>)
 80070c2:	685b      	ldr	r3, [r3, #4]
 80070c4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	699b      	ldr	r3, [r3, #24]
 80070ca:	2b01      	cmp	r3, #1
 80070cc:	d030      	beq.n	8007130 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80070d8:	429a      	cmp	r2, r3
 80070da:	d129      	bne.n	8007130 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80070e6:	429a      	cmp	r2, r3
 80070e8:	d122      	bne.n	8007130 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80070ea:	68fa      	ldr	r2, [r7, #12]
 80070ec:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80070f0:	4013      	ands	r3, r2
 80070f2:	687a      	ldr	r2, [r7, #4]
 80070f4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80070f6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80070f8:	4293      	cmp	r3, r2
 80070fa:	d119      	bne.n	8007130 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007106:	085b      	lsrs	r3, r3, #1
 8007108:	3b01      	subs	r3, #1
 800710a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800710c:	429a      	cmp	r2, r3
 800710e:	d10f      	bne.n	8007130 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800711a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800711c:	429a      	cmp	r2, r3
 800711e:	d107      	bne.n	8007130 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800712a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800712c:	429a      	cmp	r2, r3
 800712e:	d001      	beq.n	8007134 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8007130:	2301      	movs	r3, #1
 8007132:	e000      	b.n	8007136 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8007134:	2300      	movs	r3, #0
}
 8007136:	4618      	mov	r0, r3
 8007138:	3718      	adds	r7, #24
 800713a:	46bd      	mov	sp, r7
 800713c:	bd80      	pop	{r7, pc}
 800713e:	bf00      	nop
 8007140:	40023800 	.word	0x40023800

08007144 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007144:	b580      	push	{r7, lr}
 8007146:	b082      	sub	sp, #8
 8007148:	af00      	add	r7, sp, #0
 800714a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	2b00      	cmp	r3, #0
 8007150:	d101      	bne.n	8007156 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007152:	2301      	movs	r3, #1
 8007154:	e07b      	b.n	800724e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800715a:	2b00      	cmp	r3, #0
 800715c:	d108      	bne.n	8007170 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	685b      	ldr	r3, [r3, #4]
 8007162:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007166:	d009      	beq.n	800717c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	2200      	movs	r2, #0
 800716c:	61da      	str	r2, [r3, #28]
 800716e:	e005      	b.n	800717c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	2200      	movs	r2, #0
 8007174:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	2200      	movs	r2, #0
 800717a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	2200      	movs	r2, #0
 8007180:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007188:	b2db      	uxtb	r3, r3
 800718a:	2b00      	cmp	r3, #0
 800718c:	d106      	bne.n	800719c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	2200      	movs	r2, #0
 8007192:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007196:	6878      	ldr	r0, [r7, #4]
 8007198:	f7fa f9a0 	bl	80014dc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	2202      	movs	r2, #2
 80071a0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	681a      	ldr	r2, [r3, #0]
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80071b2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	685b      	ldr	r3, [r3, #4]
 80071b8:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	689b      	ldr	r3, [r3, #8]
 80071c0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80071c4:	431a      	orrs	r2, r3
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	68db      	ldr	r3, [r3, #12]
 80071ca:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80071ce:	431a      	orrs	r2, r3
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	691b      	ldr	r3, [r3, #16]
 80071d4:	f003 0302 	and.w	r3, r3, #2
 80071d8:	431a      	orrs	r2, r3
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	695b      	ldr	r3, [r3, #20]
 80071de:	f003 0301 	and.w	r3, r3, #1
 80071e2:	431a      	orrs	r2, r3
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	699b      	ldr	r3, [r3, #24]
 80071e8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80071ec:	431a      	orrs	r2, r3
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	69db      	ldr	r3, [r3, #28]
 80071f2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80071f6:	431a      	orrs	r2, r3
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	6a1b      	ldr	r3, [r3, #32]
 80071fc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007200:	ea42 0103 	orr.w	r1, r2, r3
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007208:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	430a      	orrs	r2, r1
 8007212:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	699b      	ldr	r3, [r3, #24]
 8007218:	0c1b      	lsrs	r3, r3, #16
 800721a:	f003 0104 	and.w	r1, r3, #4
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007222:	f003 0210 	and.w	r2, r3, #16
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	430a      	orrs	r2, r1
 800722c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	69da      	ldr	r2, [r3, #28]
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800723c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	2200      	movs	r2, #0
 8007242:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	2201      	movs	r2, #1
 8007248:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800724c:	2300      	movs	r3, #0
}
 800724e:	4618      	mov	r0, r3
 8007250:	3708      	adds	r7, #8
 8007252:	46bd      	mov	sp, r7
 8007254:	bd80      	pop	{r7, pc}

08007256 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007256:	b580      	push	{r7, lr}
 8007258:	b088      	sub	sp, #32
 800725a:	af00      	add	r7, sp, #0
 800725c:	60f8      	str	r0, [r7, #12]
 800725e:	60b9      	str	r1, [r7, #8]
 8007260:	603b      	str	r3, [r7, #0]
 8007262:	4613      	mov	r3, r2
 8007264:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007266:	f7fd fbff 	bl	8004a68 <HAL_GetTick>
 800726a:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 800726c:	88fb      	ldrh	r3, [r7, #6]
 800726e:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007276:	b2db      	uxtb	r3, r3
 8007278:	2b01      	cmp	r3, #1
 800727a:	d001      	beq.n	8007280 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 800727c:	2302      	movs	r3, #2
 800727e:	e12a      	b.n	80074d6 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8007280:	68bb      	ldr	r3, [r7, #8]
 8007282:	2b00      	cmp	r3, #0
 8007284:	d002      	beq.n	800728c <HAL_SPI_Transmit+0x36>
 8007286:	88fb      	ldrh	r3, [r7, #6]
 8007288:	2b00      	cmp	r3, #0
 800728a:	d101      	bne.n	8007290 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 800728c:	2301      	movs	r3, #1
 800728e:	e122      	b.n	80074d6 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8007296:	2b01      	cmp	r3, #1
 8007298:	d101      	bne.n	800729e <HAL_SPI_Transmit+0x48>
 800729a:	2302      	movs	r3, #2
 800729c:	e11b      	b.n	80074d6 <HAL_SPI_Transmit+0x280>
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	2201      	movs	r2, #1
 80072a2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	2203      	movs	r2, #3
 80072aa:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	2200      	movs	r2, #0
 80072b2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	68ba      	ldr	r2, [r7, #8]
 80072b8:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	88fa      	ldrh	r2, [r7, #6]
 80072be:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	88fa      	ldrh	r2, [r7, #6]
 80072c4:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	2200      	movs	r2, #0
 80072ca:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	2200      	movs	r2, #0
 80072d0:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	2200      	movs	r2, #0
 80072d6:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	2200      	movs	r2, #0
 80072dc:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	2200      	movs	r2, #0
 80072e2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	689b      	ldr	r3, [r3, #8]
 80072e8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80072ec:	d10f      	bne.n	800730e <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	681a      	ldr	r2, [r3, #0]
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80072fc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	681a      	ldr	r2, [r3, #0]
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800730c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007318:	2b40      	cmp	r3, #64	@ 0x40
 800731a:	d007      	beq.n	800732c <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	681a      	ldr	r2, [r3, #0]
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800732a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	68db      	ldr	r3, [r3, #12]
 8007330:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007334:	d152      	bne.n	80073dc <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	685b      	ldr	r3, [r3, #4]
 800733a:	2b00      	cmp	r3, #0
 800733c:	d002      	beq.n	8007344 <HAL_SPI_Transmit+0xee>
 800733e:	8b7b      	ldrh	r3, [r7, #26]
 8007340:	2b01      	cmp	r3, #1
 8007342:	d145      	bne.n	80073d0 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007348:	881a      	ldrh	r2, [r3, #0]
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007354:	1c9a      	adds	r2, r3, #2
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800735e:	b29b      	uxth	r3, r3
 8007360:	3b01      	subs	r3, #1
 8007362:	b29a      	uxth	r2, r3
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8007368:	e032      	b.n	80073d0 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	689b      	ldr	r3, [r3, #8]
 8007370:	f003 0302 	and.w	r3, r3, #2
 8007374:	2b02      	cmp	r3, #2
 8007376:	d112      	bne.n	800739e <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800737c:	881a      	ldrh	r2, [r3, #0]
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007388:	1c9a      	adds	r2, r3, #2
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007392:	b29b      	uxth	r3, r3
 8007394:	3b01      	subs	r3, #1
 8007396:	b29a      	uxth	r2, r3
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	86da      	strh	r2, [r3, #54]	@ 0x36
 800739c:	e018      	b.n	80073d0 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800739e:	f7fd fb63 	bl	8004a68 <HAL_GetTick>
 80073a2:	4602      	mov	r2, r0
 80073a4:	69fb      	ldr	r3, [r7, #28]
 80073a6:	1ad3      	subs	r3, r2, r3
 80073a8:	683a      	ldr	r2, [r7, #0]
 80073aa:	429a      	cmp	r2, r3
 80073ac:	d803      	bhi.n	80073b6 <HAL_SPI_Transmit+0x160>
 80073ae:	683b      	ldr	r3, [r7, #0]
 80073b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073b4:	d102      	bne.n	80073bc <HAL_SPI_Transmit+0x166>
 80073b6:	683b      	ldr	r3, [r7, #0]
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d109      	bne.n	80073d0 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	2201      	movs	r2, #1
 80073c0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	2200      	movs	r2, #0
 80073c8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80073cc:	2303      	movs	r3, #3
 80073ce:	e082      	b.n	80074d6 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80073d4:	b29b      	uxth	r3, r3
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d1c7      	bne.n	800736a <HAL_SPI_Transmit+0x114>
 80073da:	e053      	b.n	8007484 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	685b      	ldr	r3, [r3, #4]
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d002      	beq.n	80073ea <HAL_SPI_Transmit+0x194>
 80073e4:	8b7b      	ldrh	r3, [r7, #26]
 80073e6:	2b01      	cmp	r3, #1
 80073e8:	d147      	bne.n	800747a <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	330c      	adds	r3, #12
 80073f4:	7812      	ldrb	r2, [r2, #0]
 80073f6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80073fc:	1c5a      	adds	r2, r3, #1
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007406:	b29b      	uxth	r3, r3
 8007408:	3b01      	subs	r3, #1
 800740a:	b29a      	uxth	r2, r3
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8007410:	e033      	b.n	800747a <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	689b      	ldr	r3, [r3, #8]
 8007418:	f003 0302 	and.w	r3, r3, #2
 800741c:	2b02      	cmp	r3, #2
 800741e:	d113      	bne.n	8007448 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	330c      	adds	r3, #12
 800742a:	7812      	ldrb	r2, [r2, #0]
 800742c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007432:	1c5a      	adds	r2, r3, #1
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800743c:	b29b      	uxth	r3, r3
 800743e:	3b01      	subs	r3, #1
 8007440:	b29a      	uxth	r2, r3
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	86da      	strh	r2, [r3, #54]	@ 0x36
 8007446:	e018      	b.n	800747a <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007448:	f7fd fb0e 	bl	8004a68 <HAL_GetTick>
 800744c:	4602      	mov	r2, r0
 800744e:	69fb      	ldr	r3, [r7, #28]
 8007450:	1ad3      	subs	r3, r2, r3
 8007452:	683a      	ldr	r2, [r7, #0]
 8007454:	429a      	cmp	r2, r3
 8007456:	d803      	bhi.n	8007460 <HAL_SPI_Transmit+0x20a>
 8007458:	683b      	ldr	r3, [r7, #0]
 800745a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800745e:	d102      	bne.n	8007466 <HAL_SPI_Transmit+0x210>
 8007460:	683b      	ldr	r3, [r7, #0]
 8007462:	2b00      	cmp	r3, #0
 8007464:	d109      	bne.n	800747a <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	2201      	movs	r2, #1
 800746a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	2200      	movs	r2, #0
 8007472:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8007476:	2303      	movs	r3, #3
 8007478:	e02d      	b.n	80074d6 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800747e:	b29b      	uxth	r3, r3
 8007480:	2b00      	cmp	r3, #0
 8007482:	d1c6      	bne.n	8007412 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007484:	69fa      	ldr	r2, [r7, #28]
 8007486:	6839      	ldr	r1, [r7, #0]
 8007488:	68f8      	ldr	r0, [r7, #12]
 800748a:	f000 fa59 	bl	8007940 <SPI_EndRxTxTransaction>
 800748e:	4603      	mov	r3, r0
 8007490:	2b00      	cmp	r3, #0
 8007492:	d002      	beq.n	800749a <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	2220      	movs	r2, #32
 8007498:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	689b      	ldr	r3, [r3, #8]
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d10a      	bne.n	80074b8 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80074a2:	2300      	movs	r3, #0
 80074a4:	617b      	str	r3, [r7, #20]
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	68db      	ldr	r3, [r3, #12]
 80074ac:	617b      	str	r3, [r7, #20]
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	689b      	ldr	r3, [r3, #8]
 80074b4:	617b      	str	r3, [r7, #20]
 80074b6:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	2201      	movs	r2, #1
 80074bc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	2200      	movs	r2, #0
 80074c4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d001      	beq.n	80074d4 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 80074d0:	2301      	movs	r3, #1
 80074d2:	e000      	b.n	80074d6 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 80074d4:	2300      	movs	r3, #0
  }
}
 80074d6:	4618      	mov	r0, r3
 80074d8:	3720      	adds	r7, #32
 80074da:	46bd      	mov	sp, r7
 80074dc:	bd80      	pop	{r7, pc}

080074de <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 80074de:	b580      	push	{r7, lr}
 80074e0:	b08a      	sub	sp, #40	@ 0x28
 80074e2:	af00      	add	r7, sp, #0
 80074e4:	60f8      	str	r0, [r7, #12]
 80074e6:	60b9      	str	r1, [r7, #8]
 80074e8:	607a      	str	r2, [r7, #4]
 80074ea:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80074ec:	2301      	movs	r3, #1
 80074ee:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80074f0:	f7fd faba 	bl	8004a68 <HAL_GetTick>
 80074f4:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80074fc:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	685b      	ldr	r3, [r3, #4]
 8007502:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8007504:	887b      	ldrh	r3, [r7, #2]
 8007506:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007508:	7ffb      	ldrb	r3, [r7, #31]
 800750a:	2b01      	cmp	r3, #1
 800750c:	d00c      	beq.n	8007528 <HAL_SPI_TransmitReceive+0x4a>
 800750e:	69bb      	ldr	r3, [r7, #24]
 8007510:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007514:	d106      	bne.n	8007524 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	689b      	ldr	r3, [r3, #8]
 800751a:	2b00      	cmp	r3, #0
 800751c:	d102      	bne.n	8007524 <HAL_SPI_TransmitReceive+0x46>
 800751e:	7ffb      	ldrb	r3, [r7, #31]
 8007520:	2b04      	cmp	r3, #4
 8007522:	d001      	beq.n	8007528 <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 8007524:	2302      	movs	r3, #2
 8007526:	e17f      	b.n	8007828 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007528:	68bb      	ldr	r3, [r7, #8]
 800752a:	2b00      	cmp	r3, #0
 800752c:	d005      	beq.n	800753a <HAL_SPI_TransmitReceive+0x5c>
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	2b00      	cmp	r3, #0
 8007532:	d002      	beq.n	800753a <HAL_SPI_TransmitReceive+0x5c>
 8007534:	887b      	ldrh	r3, [r7, #2]
 8007536:	2b00      	cmp	r3, #0
 8007538:	d101      	bne.n	800753e <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 800753a:	2301      	movs	r3, #1
 800753c:	e174      	b.n	8007828 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8007544:	2b01      	cmp	r3, #1
 8007546:	d101      	bne.n	800754c <HAL_SPI_TransmitReceive+0x6e>
 8007548:	2302      	movs	r3, #2
 800754a:	e16d      	b.n	8007828 <HAL_SPI_TransmitReceive+0x34a>
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	2201      	movs	r2, #1
 8007550:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800755a:	b2db      	uxtb	r3, r3
 800755c:	2b04      	cmp	r3, #4
 800755e:	d003      	beq.n	8007568 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	2205      	movs	r2, #5
 8007564:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	2200      	movs	r2, #0
 800756c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	687a      	ldr	r2, [r7, #4]
 8007572:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	887a      	ldrh	r2, [r7, #2]
 8007578:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	887a      	ldrh	r2, [r7, #2]
 800757e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	68ba      	ldr	r2, [r7, #8]
 8007584:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	887a      	ldrh	r2, [r7, #2]
 800758a:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	887a      	ldrh	r2, [r7, #2]
 8007590:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	2200      	movs	r2, #0
 8007596:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	2200      	movs	r2, #0
 800759c:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80075a8:	2b40      	cmp	r3, #64	@ 0x40
 80075aa:	d007      	beq.n	80075bc <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	681a      	ldr	r2, [r3, #0]
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80075ba:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	68db      	ldr	r3, [r3, #12]
 80075c0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80075c4:	d17e      	bne.n	80076c4 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	685b      	ldr	r3, [r3, #4]
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d002      	beq.n	80075d4 <HAL_SPI_TransmitReceive+0xf6>
 80075ce:	8afb      	ldrh	r3, [r7, #22]
 80075d0:	2b01      	cmp	r3, #1
 80075d2:	d16c      	bne.n	80076ae <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80075d8:	881a      	ldrh	r2, [r3, #0]
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80075e4:	1c9a      	adds	r2, r3, #2
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80075ee:	b29b      	uxth	r3, r3
 80075f0:	3b01      	subs	r3, #1
 80075f2:	b29a      	uxth	r2, r3
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80075f8:	e059      	b.n	80076ae <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	689b      	ldr	r3, [r3, #8]
 8007600:	f003 0302 	and.w	r3, r3, #2
 8007604:	2b02      	cmp	r3, #2
 8007606:	d11b      	bne.n	8007640 <HAL_SPI_TransmitReceive+0x162>
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800760c:	b29b      	uxth	r3, r3
 800760e:	2b00      	cmp	r3, #0
 8007610:	d016      	beq.n	8007640 <HAL_SPI_TransmitReceive+0x162>
 8007612:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007614:	2b01      	cmp	r3, #1
 8007616:	d113      	bne.n	8007640 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800761c:	881a      	ldrh	r2, [r3, #0]
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007628:	1c9a      	adds	r2, r3, #2
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007632:	b29b      	uxth	r3, r3
 8007634:	3b01      	subs	r3, #1
 8007636:	b29a      	uxth	r2, r3
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800763c:	2300      	movs	r3, #0
 800763e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	689b      	ldr	r3, [r3, #8]
 8007646:	f003 0301 	and.w	r3, r3, #1
 800764a:	2b01      	cmp	r3, #1
 800764c:	d119      	bne.n	8007682 <HAL_SPI_TransmitReceive+0x1a4>
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007652:	b29b      	uxth	r3, r3
 8007654:	2b00      	cmp	r3, #0
 8007656:	d014      	beq.n	8007682 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	68da      	ldr	r2, [r3, #12]
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007662:	b292      	uxth	r2, r2
 8007664:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800766a:	1c9a      	adds	r2, r3, #2
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007674:	b29b      	uxth	r3, r3
 8007676:	3b01      	subs	r3, #1
 8007678:	b29a      	uxth	r2, r3
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800767e:	2301      	movs	r3, #1
 8007680:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007682:	f7fd f9f1 	bl	8004a68 <HAL_GetTick>
 8007686:	4602      	mov	r2, r0
 8007688:	6a3b      	ldr	r3, [r7, #32]
 800768a:	1ad3      	subs	r3, r2, r3
 800768c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800768e:	429a      	cmp	r2, r3
 8007690:	d80d      	bhi.n	80076ae <HAL_SPI_TransmitReceive+0x1d0>
 8007692:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007694:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007698:	d009      	beq.n	80076ae <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	2201      	movs	r2, #1
 800769e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	2200      	movs	r2, #0
 80076a6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80076aa:	2303      	movs	r3, #3
 80076ac:	e0bc      	b.n	8007828 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80076b2:	b29b      	uxth	r3, r3
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d1a0      	bne.n	80075fa <HAL_SPI_TransmitReceive+0x11c>
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80076bc:	b29b      	uxth	r3, r3
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d19b      	bne.n	80075fa <HAL_SPI_TransmitReceive+0x11c>
 80076c2:	e082      	b.n	80077ca <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	685b      	ldr	r3, [r3, #4]
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d002      	beq.n	80076d2 <HAL_SPI_TransmitReceive+0x1f4>
 80076cc:	8afb      	ldrh	r3, [r7, #22]
 80076ce:	2b01      	cmp	r3, #1
 80076d0:	d171      	bne.n	80077b6 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	330c      	adds	r3, #12
 80076dc:	7812      	ldrb	r2, [r2, #0]
 80076de:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80076e4:	1c5a      	adds	r2, r3, #1
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80076ee:	b29b      	uxth	r3, r3
 80076f0:	3b01      	subs	r3, #1
 80076f2:	b29a      	uxth	r2, r3
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80076f8:	e05d      	b.n	80077b6 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	689b      	ldr	r3, [r3, #8]
 8007700:	f003 0302 	and.w	r3, r3, #2
 8007704:	2b02      	cmp	r3, #2
 8007706:	d11c      	bne.n	8007742 <HAL_SPI_TransmitReceive+0x264>
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800770c:	b29b      	uxth	r3, r3
 800770e:	2b00      	cmp	r3, #0
 8007710:	d017      	beq.n	8007742 <HAL_SPI_TransmitReceive+0x264>
 8007712:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007714:	2b01      	cmp	r3, #1
 8007716:	d114      	bne.n	8007742 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	330c      	adds	r3, #12
 8007722:	7812      	ldrb	r2, [r2, #0]
 8007724:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800772a:	1c5a      	adds	r2, r3, #1
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007734:	b29b      	uxth	r3, r3
 8007736:	3b01      	subs	r3, #1
 8007738:	b29a      	uxth	r2, r3
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800773e:	2300      	movs	r3, #0
 8007740:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	689b      	ldr	r3, [r3, #8]
 8007748:	f003 0301 	and.w	r3, r3, #1
 800774c:	2b01      	cmp	r3, #1
 800774e:	d119      	bne.n	8007784 <HAL_SPI_TransmitReceive+0x2a6>
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007754:	b29b      	uxth	r3, r3
 8007756:	2b00      	cmp	r3, #0
 8007758:	d014      	beq.n	8007784 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	68da      	ldr	r2, [r3, #12]
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007764:	b2d2      	uxtb	r2, r2
 8007766:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800776c:	1c5a      	adds	r2, r3, #1
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007776:	b29b      	uxth	r3, r3
 8007778:	3b01      	subs	r3, #1
 800777a:	b29a      	uxth	r2, r3
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007780:	2301      	movs	r3, #1
 8007782:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007784:	f7fd f970 	bl	8004a68 <HAL_GetTick>
 8007788:	4602      	mov	r2, r0
 800778a:	6a3b      	ldr	r3, [r7, #32]
 800778c:	1ad3      	subs	r3, r2, r3
 800778e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007790:	429a      	cmp	r2, r3
 8007792:	d803      	bhi.n	800779c <HAL_SPI_TransmitReceive+0x2be>
 8007794:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007796:	f1b3 3fff 	cmp.w	r3, #4294967295
 800779a:	d102      	bne.n	80077a2 <HAL_SPI_TransmitReceive+0x2c4>
 800779c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d109      	bne.n	80077b6 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	2201      	movs	r2, #1
 80077a6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	2200      	movs	r2, #0
 80077ae:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80077b2:	2303      	movs	r3, #3
 80077b4:	e038      	b.n	8007828 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80077ba:	b29b      	uxth	r3, r3
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d19c      	bne.n	80076fa <HAL_SPI_TransmitReceive+0x21c>
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80077c4:	b29b      	uxth	r3, r3
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d197      	bne.n	80076fa <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80077ca:	6a3a      	ldr	r2, [r7, #32]
 80077cc:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80077ce:	68f8      	ldr	r0, [r7, #12]
 80077d0:	f000 f8b6 	bl	8007940 <SPI_EndRxTxTransaction>
 80077d4:	4603      	mov	r3, r0
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d008      	beq.n	80077ec <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	2220      	movs	r2, #32
 80077de:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	2200      	movs	r2, #0
 80077e4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 80077e8:	2301      	movs	r3, #1
 80077ea:	e01d      	b.n	8007828 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	689b      	ldr	r3, [r3, #8]
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d10a      	bne.n	800780a <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80077f4:	2300      	movs	r3, #0
 80077f6:	613b      	str	r3, [r7, #16]
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	68db      	ldr	r3, [r3, #12]
 80077fe:	613b      	str	r3, [r7, #16]
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	689b      	ldr	r3, [r3, #8]
 8007806:	613b      	str	r3, [r7, #16]
 8007808:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	2201      	movs	r2, #1
 800780e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	2200      	movs	r2, #0
 8007816:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800781e:	2b00      	cmp	r3, #0
 8007820:	d001      	beq.n	8007826 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8007822:	2301      	movs	r3, #1
 8007824:	e000      	b.n	8007828 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8007826:	2300      	movs	r3, #0
  }
}
 8007828:	4618      	mov	r0, r3
 800782a:	3728      	adds	r7, #40	@ 0x28
 800782c:	46bd      	mov	sp, r7
 800782e:	bd80      	pop	{r7, pc}

08007830 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007830:	b580      	push	{r7, lr}
 8007832:	b088      	sub	sp, #32
 8007834:	af00      	add	r7, sp, #0
 8007836:	60f8      	str	r0, [r7, #12]
 8007838:	60b9      	str	r1, [r7, #8]
 800783a:	603b      	str	r3, [r7, #0]
 800783c:	4613      	mov	r3, r2
 800783e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007840:	f7fd f912 	bl	8004a68 <HAL_GetTick>
 8007844:	4602      	mov	r2, r0
 8007846:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007848:	1a9b      	subs	r3, r3, r2
 800784a:	683a      	ldr	r2, [r7, #0]
 800784c:	4413      	add	r3, r2
 800784e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007850:	f7fd f90a 	bl	8004a68 <HAL_GetTick>
 8007854:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007856:	4b39      	ldr	r3, [pc, #228]	@ (800793c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	015b      	lsls	r3, r3, #5
 800785c:	0d1b      	lsrs	r3, r3, #20
 800785e:	69fa      	ldr	r2, [r7, #28]
 8007860:	fb02 f303 	mul.w	r3, r2, r3
 8007864:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007866:	e054      	b.n	8007912 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007868:	683b      	ldr	r3, [r7, #0]
 800786a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800786e:	d050      	beq.n	8007912 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007870:	f7fd f8fa 	bl	8004a68 <HAL_GetTick>
 8007874:	4602      	mov	r2, r0
 8007876:	69bb      	ldr	r3, [r7, #24]
 8007878:	1ad3      	subs	r3, r2, r3
 800787a:	69fa      	ldr	r2, [r7, #28]
 800787c:	429a      	cmp	r2, r3
 800787e:	d902      	bls.n	8007886 <SPI_WaitFlagStateUntilTimeout+0x56>
 8007880:	69fb      	ldr	r3, [r7, #28]
 8007882:	2b00      	cmp	r3, #0
 8007884:	d13d      	bne.n	8007902 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	685a      	ldr	r2, [r3, #4]
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8007894:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	685b      	ldr	r3, [r3, #4]
 800789a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800789e:	d111      	bne.n	80078c4 <SPI_WaitFlagStateUntilTimeout+0x94>
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	689b      	ldr	r3, [r3, #8]
 80078a4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80078a8:	d004      	beq.n	80078b4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	689b      	ldr	r3, [r3, #8]
 80078ae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80078b2:	d107      	bne.n	80078c4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	681a      	ldr	r2, [r3, #0]
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80078c2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80078c8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80078cc:	d10f      	bne.n	80078ee <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	681a      	ldr	r2, [r3, #0]
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80078dc:	601a      	str	r2, [r3, #0]
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	681a      	ldr	r2, [r3, #0]
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80078ec:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	2201      	movs	r2, #1
 80078f2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	2200      	movs	r2, #0
 80078fa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80078fe:	2303      	movs	r3, #3
 8007900:	e017      	b.n	8007932 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007902:	697b      	ldr	r3, [r7, #20]
 8007904:	2b00      	cmp	r3, #0
 8007906:	d101      	bne.n	800790c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007908:	2300      	movs	r3, #0
 800790a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800790c:	697b      	ldr	r3, [r7, #20]
 800790e:	3b01      	subs	r3, #1
 8007910:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	689a      	ldr	r2, [r3, #8]
 8007918:	68bb      	ldr	r3, [r7, #8]
 800791a:	4013      	ands	r3, r2
 800791c:	68ba      	ldr	r2, [r7, #8]
 800791e:	429a      	cmp	r2, r3
 8007920:	bf0c      	ite	eq
 8007922:	2301      	moveq	r3, #1
 8007924:	2300      	movne	r3, #0
 8007926:	b2db      	uxtb	r3, r3
 8007928:	461a      	mov	r2, r3
 800792a:	79fb      	ldrb	r3, [r7, #7]
 800792c:	429a      	cmp	r2, r3
 800792e:	d19b      	bne.n	8007868 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007930:	2300      	movs	r3, #0
}
 8007932:	4618      	mov	r0, r3
 8007934:	3720      	adds	r7, #32
 8007936:	46bd      	mov	sp, r7
 8007938:	bd80      	pop	{r7, pc}
 800793a:	bf00      	nop
 800793c:	20000000 	.word	0x20000000

08007940 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007940:	b580      	push	{r7, lr}
 8007942:	b088      	sub	sp, #32
 8007944:	af02      	add	r7, sp, #8
 8007946:	60f8      	str	r0, [r7, #12]
 8007948:	60b9      	str	r1, [r7, #8]
 800794a:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	9300      	str	r3, [sp, #0]
 8007950:	68bb      	ldr	r3, [r7, #8]
 8007952:	2201      	movs	r2, #1
 8007954:	2102      	movs	r1, #2
 8007956:	68f8      	ldr	r0, [r7, #12]
 8007958:	f7ff ff6a 	bl	8007830 <SPI_WaitFlagStateUntilTimeout>
 800795c:	4603      	mov	r3, r0
 800795e:	2b00      	cmp	r3, #0
 8007960:	d007      	beq.n	8007972 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007966:	f043 0220 	orr.w	r2, r3, #32
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800796e:	2303      	movs	r3, #3
 8007970:	e032      	b.n	80079d8 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8007972:	4b1b      	ldr	r3, [pc, #108]	@ (80079e0 <SPI_EndRxTxTransaction+0xa0>)
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	4a1b      	ldr	r2, [pc, #108]	@ (80079e4 <SPI_EndRxTxTransaction+0xa4>)
 8007978:	fba2 2303 	umull	r2, r3, r2, r3
 800797c:	0d5b      	lsrs	r3, r3, #21
 800797e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8007982:	fb02 f303 	mul.w	r3, r2, r3
 8007986:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	685b      	ldr	r3, [r3, #4]
 800798c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007990:	d112      	bne.n	80079b8 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	9300      	str	r3, [sp, #0]
 8007996:	68bb      	ldr	r3, [r7, #8]
 8007998:	2200      	movs	r2, #0
 800799a:	2180      	movs	r1, #128	@ 0x80
 800799c:	68f8      	ldr	r0, [r7, #12]
 800799e:	f7ff ff47 	bl	8007830 <SPI_WaitFlagStateUntilTimeout>
 80079a2:	4603      	mov	r3, r0
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d016      	beq.n	80079d6 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80079ac:	f043 0220 	orr.w	r2, r3, #32
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80079b4:	2303      	movs	r3, #3
 80079b6:	e00f      	b.n	80079d8 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80079b8:	697b      	ldr	r3, [r7, #20]
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d00a      	beq.n	80079d4 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 80079be:	697b      	ldr	r3, [r7, #20]
 80079c0:	3b01      	subs	r3, #1
 80079c2:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	689b      	ldr	r3, [r3, #8]
 80079ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80079ce:	2b80      	cmp	r3, #128	@ 0x80
 80079d0:	d0f2      	beq.n	80079b8 <SPI_EndRxTxTransaction+0x78>
 80079d2:	e000      	b.n	80079d6 <SPI_EndRxTxTransaction+0x96>
        break;
 80079d4:	bf00      	nop
  }

  return HAL_OK;
 80079d6:	2300      	movs	r3, #0
}
 80079d8:	4618      	mov	r0, r3
 80079da:	3718      	adds	r7, #24
 80079dc:	46bd      	mov	sp, r7
 80079de:	bd80      	pop	{r7, pc}
 80079e0:	20000000 	.word	0x20000000
 80079e4:	165e9f81 	.word	0x165e9f81

080079e8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80079e8:	b580      	push	{r7, lr}
 80079ea:	b082      	sub	sp, #8
 80079ec:	af00      	add	r7, sp, #0
 80079ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d101      	bne.n	80079fa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80079f6:	2301      	movs	r3, #1
 80079f8:	e041      	b.n	8007a7e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007a00:	b2db      	uxtb	r3, r3
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d106      	bne.n	8007a14 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	2200      	movs	r2, #0
 8007a0a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007a0e:	6878      	ldr	r0, [r7, #4]
 8007a10:	f7f9 fde2 	bl	80015d8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	2202      	movs	r2, #2
 8007a18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	681a      	ldr	r2, [r3, #0]
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	3304      	adds	r3, #4
 8007a24:	4619      	mov	r1, r3
 8007a26:	4610      	mov	r0, r2
 8007a28:	f000 faac 	bl	8007f84 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	2201      	movs	r2, #1
 8007a30:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	2201      	movs	r2, #1
 8007a38:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	2201      	movs	r2, #1
 8007a40:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	2201      	movs	r2, #1
 8007a48:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	2201      	movs	r2, #1
 8007a50:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	2201      	movs	r2, #1
 8007a58:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	2201      	movs	r2, #1
 8007a60:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	2201      	movs	r2, #1
 8007a68:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	2201      	movs	r2, #1
 8007a70:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	2201      	movs	r2, #1
 8007a78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007a7c:	2300      	movs	r3, #0
}
 8007a7e:	4618      	mov	r0, r3
 8007a80:	3708      	adds	r7, #8
 8007a82:	46bd      	mov	sp, r7
 8007a84:	bd80      	pop	{r7, pc}
	...

08007a88 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007a88:	b480      	push	{r7}
 8007a8a:	b085      	sub	sp, #20
 8007a8c:	af00      	add	r7, sp, #0
 8007a8e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007a96:	b2db      	uxtb	r3, r3
 8007a98:	2b01      	cmp	r3, #1
 8007a9a:	d001      	beq.n	8007aa0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007a9c:	2301      	movs	r3, #1
 8007a9e:	e04e      	b.n	8007b3e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	2202      	movs	r2, #2
 8007aa4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	68da      	ldr	r2, [r3, #12]
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	f042 0201 	orr.w	r2, r2, #1
 8007ab6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	4a23      	ldr	r2, [pc, #140]	@ (8007b4c <HAL_TIM_Base_Start_IT+0xc4>)
 8007abe:	4293      	cmp	r3, r2
 8007ac0:	d022      	beq.n	8007b08 <HAL_TIM_Base_Start_IT+0x80>
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007aca:	d01d      	beq.n	8007b08 <HAL_TIM_Base_Start_IT+0x80>
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	4a1f      	ldr	r2, [pc, #124]	@ (8007b50 <HAL_TIM_Base_Start_IT+0xc8>)
 8007ad2:	4293      	cmp	r3, r2
 8007ad4:	d018      	beq.n	8007b08 <HAL_TIM_Base_Start_IT+0x80>
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	4a1e      	ldr	r2, [pc, #120]	@ (8007b54 <HAL_TIM_Base_Start_IT+0xcc>)
 8007adc:	4293      	cmp	r3, r2
 8007ade:	d013      	beq.n	8007b08 <HAL_TIM_Base_Start_IT+0x80>
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	4a1c      	ldr	r2, [pc, #112]	@ (8007b58 <HAL_TIM_Base_Start_IT+0xd0>)
 8007ae6:	4293      	cmp	r3, r2
 8007ae8:	d00e      	beq.n	8007b08 <HAL_TIM_Base_Start_IT+0x80>
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	4a1b      	ldr	r2, [pc, #108]	@ (8007b5c <HAL_TIM_Base_Start_IT+0xd4>)
 8007af0:	4293      	cmp	r3, r2
 8007af2:	d009      	beq.n	8007b08 <HAL_TIM_Base_Start_IT+0x80>
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	4a19      	ldr	r2, [pc, #100]	@ (8007b60 <HAL_TIM_Base_Start_IT+0xd8>)
 8007afa:	4293      	cmp	r3, r2
 8007afc:	d004      	beq.n	8007b08 <HAL_TIM_Base_Start_IT+0x80>
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	4a18      	ldr	r2, [pc, #96]	@ (8007b64 <HAL_TIM_Base_Start_IT+0xdc>)
 8007b04:	4293      	cmp	r3, r2
 8007b06:	d111      	bne.n	8007b2c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	689b      	ldr	r3, [r3, #8]
 8007b0e:	f003 0307 	and.w	r3, r3, #7
 8007b12:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	2b06      	cmp	r3, #6
 8007b18:	d010      	beq.n	8007b3c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	681a      	ldr	r2, [r3, #0]
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	f042 0201 	orr.w	r2, r2, #1
 8007b28:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007b2a:	e007      	b.n	8007b3c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	681a      	ldr	r2, [r3, #0]
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	f042 0201 	orr.w	r2, r2, #1
 8007b3a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007b3c:	2300      	movs	r3, #0
}
 8007b3e:	4618      	mov	r0, r3
 8007b40:	3714      	adds	r7, #20
 8007b42:	46bd      	mov	sp, r7
 8007b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b48:	4770      	bx	lr
 8007b4a:	bf00      	nop
 8007b4c:	40010000 	.word	0x40010000
 8007b50:	40000400 	.word	0x40000400
 8007b54:	40000800 	.word	0x40000800
 8007b58:	40000c00 	.word	0x40000c00
 8007b5c:	40010400 	.word	0x40010400
 8007b60:	40014000 	.word	0x40014000
 8007b64:	40001800 	.word	0x40001800

08007b68 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8007b68:	b480      	push	{r7}
 8007b6a:	b083      	sub	sp, #12
 8007b6c:	af00      	add	r7, sp, #0
 8007b6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	68da      	ldr	r2, [r3, #12]
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	f022 0201 	bic.w	r2, r2, #1
 8007b7e:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	6a1a      	ldr	r2, [r3, #32]
 8007b86:	f241 1311 	movw	r3, #4369	@ 0x1111
 8007b8a:	4013      	ands	r3, r2
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d10f      	bne.n	8007bb0 <HAL_TIM_Base_Stop_IT+0x48>
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	6a1a      	ldr	r2, [r3, #32]
 8007b96:	f240 4344 	movw	r3, #1092	@ 0x444
 8007b9a:	4013      	ands	r3, r2
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d107      	bne.n	8007bb0 <HAL_TIM_Base_Stop_IT+0x48>
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	681a      	ldr	r2, [r3, #0]
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	f022 0201 	bic.w	r2, r2, #1
 8007bae:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	2201      	movs	r2, #1
 8007bb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8007bb8:	2300      	movs	r3, #0
}
 8007bba:	4618      	mov	r0, r3
 8007bbc:	370c      	adds	r7, #12
 8007bbe:	46bd      	mov	sp, r7
 8007bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bc4:	4770      	bx	lr

08007bc6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007bc6:	b580      	push	{r7, lr}
 8007bc8:	b084      	sub	sp, #16
 8007bca:	af00      	add	r7, sp, #0
 8007bcc:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	68db      	ldr	r3, [r3, #12]
 8007bd4:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	691b      	ldr	r3, [r3, #16]
 8007bdc:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8007bde:	68bb      	ldr	r3, [r7, #8]
 8007be0:	f003 0302 	and.w	r3, r3, #2
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d020      	beq.n	8007c2a <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	f003 0302 	and.w	r3, r3, #2
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d01b      	beq.n	8007c2a <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	f06f 0202 	mvn.w	r2, #2
 8007bfa:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	2201      	movs	r2, #1
 8007c00:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	699b      	ldr	r3, [r3, #24]
 8007c08:	f003 0303 	and.w	r3, r3, #3
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d003      	beq.n	8007c18 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007c10:	6878      	ldr	r0, [r7, #4]
 8007c12:	f000 f999 	bl	8007f48 <HAL_TIM_IC_CaptureCallback>
 8007c16:	e005      	b.n	8007c24 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007c18:	6878      	ldr	r0, [r7, #4]
 8007c1a:	f000 f98b 	bl	8007f34 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007c1e:	6878      	ldr	r0, [r7, #4]
 8007c20:	f000 f99c 	bl	8007f5c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	2200      	movs	r2, #0
 8007c28:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8007c2a:	68bb      	ldr	r3, [r7, #8]
 8007c2c:	f003 0304 	and.w	r3, r3, #4
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d020      	beq.n	8007c76 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	f003 0304 	and.w	r3, r3, #4
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d01b      	beq.n	8007c76 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	f06f 0204 	mvn.w	r2, #4
 8007c46:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	2202      	movs	r2, #2
 8007c4c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	699b      	ldr	r3, [r3, #24]
 8007c54:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d003      	beq.n	8007c64 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007c5c:	6878      	ldr	r0, [r7, #4]
 8007c5e:	f000 f973 	bl	8007f48 <HAL_TIM_IC_CaptureCallback>
 8007c62:	e005      	b.n	8007c70 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007c64:	6878      	ldr	r0, [r7, #4]
 8007c66:	f000 f965 	bl	8007f34 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007c6a:	6878      	ldr	r0, [r7, #4]
 8007c6c:	f000 f976 	bl	8007f5c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	2200      	movs	r2, #0
 8007c74:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8007c76:	68bb      	ldr	r3, [r7, #8]
 8007c78:	f003 0308 	and.w	r3, r3, #8
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d020      	beq.n	8007cc2 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	f003 0308 	and.w	r3, r3, #8
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d01b      	beq.n	8007cc2 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	f06f 0208 	mvn.w	r2, #8
 8007c92:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	2204      	movs	r2, #4
 8007c98:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	69db      	ldr	r3, [r3, #28]
 8007ca0:	f003 0303 	and.w	r3, r3, #3
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d003      	beq.n	8007cb0 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007ca8:	6878      	ldr	r0, [r7, #4]
 8007caa:	f000 f94d 	bl	8007f48 <HAL_TIM_IC_CaptureCallback>
 8007cae:	e005      	b.n	8007cbc <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007cb0:	6878      	ldr	r0, [r7, #4]
 8007cb2:	f000 f93f 	bl	8007f34 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007cb6:	6878      	ldr	r0, [r7, #4]
 8007cb8:	f000 f950 	bl	8007f5c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	2200      	movs	r2, #0
 8007cc0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8007cc2:	68bb      	ldr	r3, [r7, #8]
 8007cc4:	f003 0310 	and.w	r3, r3, #16
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d020      	beq.n	8007d0e <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	f003 0310 	and.w	r3, r3, #16
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d01b      	beq.n	8007d0e <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	f06f 0210 	mvn.w	r2, #16
 8007cde:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	2208      	movs	r2, #8
 8007ce4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	69db      	ldr	r3, [r3, #28]
 8007cec:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d003      	beq.n	8007cfc <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007cf4:	6878      	ldr	r0, [r7, #4]
 8007cf6:	f000 f927 	bl	8007f48 <HAL_TIM_IC_CaptureCallback>
 8007cfa:	e005      	b.n	8007d08 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007cfc:	6878      	ldr	r0, [r7, #4]
 8007cfe:	f000 f919 	bl	8007f34 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007d02:	6878      	ldr	r0, [r7, #4]
 8007d04:	f000 f92a 	bl	8007f5c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	2200      	movs	r2, #0
 8007d0c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8007d0e:	68bb      	ldr	r3, [r7, #8]
 8007d10:	f003 0301 	and.w	r3, r3, #1
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d00c      	beq.n	8007d32 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	f003 0301 	and.w	r3, r3, #1
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d007      	beq.n	8007d32 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	f06f 0201 	mvn.w	r2, #1
 8007d2a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007d2c:	6878      	ldr	r0, [r7, #4]
 8007d2e:	f7f9 fae7 	bl	8001300 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8007d32:	68bb      	ldr	r3, [r7, #8]
 8007d34:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d00c      	beq.n	8007d56 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d007      	beq.n	8007d56 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8007d4e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007d50:	6878      	ldr	r0, [r7, #4]
 8007d52:	f000 fae3 	bl	800831c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8007d56:	68bb      	ldr	r3, [r7, #8]
 8007d58:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d00c      	beq.n	8007d7a <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d007      	beq.n	8007d7a <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8007d72:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007d74:	6878      	ldr	r0, [r7, #4]
 8007d76:	f000 f8fb 	bl	8007f70 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8007d7a:	68bb      	ldr	r3, [r7, #8]
 8007d7c:	f003 0320 	and.w	r3, r3, #32
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d00c      	beq.n	8007d9e <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	f003 0320 	and.w	r3, r3, #32
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d007      	beq.n	8007d9e <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	f06f 0220 	mvn.w	r2, #32
 8007d96:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007d98:	6878      	ldr	r0, [r7, #4]
 8007d9a:	f000 fab5 	bl	8008308 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007d9e:	bf00      	nop
 8007da0:	3710      	adds	r7, #16
 8007da2:	46bd      	mov	sp, r7
 8007da4:	bd80      	pop	{r7, pc}

08007da6 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007da6:	b580      	push	{r7, lr}
 8007da8:	b084      	sub	sp, #16
 8007daa:	af00      	add	r7, sp, #0
 8007dac:	6078      	str	r0, [r7, #4]
 8007dae:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007db0:	2300      	movs	r3, #0
 8007db2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007dba:	2b01      	cmp	r3, #1
 8007dbc:	d101      	bne.n	8007dc2 <HAL_TIM_ConfigClockSource+0x1c>
 8007dbe:	2302      	movs	r3, #2
 8007dc0:	e0b4      	b.n	8007f2c <HAL_TIM_ConfigClockSource+0x186>
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	2201      	movs	r2, #1
 8007dc6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	2202      	movs	r2, #2
 8007dce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	689b      	ldr	r3, [r3, #8]
 8007dd8:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007dda:	68bb      	ldr	r3, [r7, #8]
 8007ddc:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8007de0:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007de2:	68bb      	ldr	r3, [r7, #8]
 8007de4:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007de8:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	68ba      	ldr	r2, [r7, #8]
 8007df0:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007df2:	683b      	ldr	r3, [r7, #0]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007dfa:	d03e      	beq.n	8007e7a <HAL_TIM_ConfigClockSource+0xd4>
 8007dfc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007e00:	f200 8087 	bhi.w	8007f12 <HAL_TIM_ConfigClockSource+0x16c>
 8007e04:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007e08:	f000 8086 	beq.w	8007f18 <HAL_TIM_ConfigClockSource+0x172>
 8007e0c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007e10:	d87f      	bhi.n	8007f12 <HAL_TIM_ConfigClockSource+0x16c>
 8007e12:	2b70      	cmp	r3, #112	@ 0x70
 8007e14:	d01a      	beq.n	8007e4c <HAL_TIM_ConfigClockSource+0xa6>
 8007e16:	2b70      	cmp	r3, #112	@ 0x70
 8007e18:	d87b      	bhi.n	8007f12 <HAL_TIM_ConfigClockSource+0x16c>
 8007e1a:	2b60      	cmp	r3, #96	@ 0x60
 8007e1c:	d050      	beq.n	8007ec0 <HAL_TIM_ConfigClockSource+0x11a>
 8007e1e:	2b60      	cmp	r3, #96	@ 0x60
 8007e20:	d877      	bhi.n	8007f12 <HAL_TIM_ConfigClockSource+0x16c>
 8007e22:	2b50      	cmp	r3, #80	@ 0x50
 8007e24:	d03c      	beq.n	8007ea0 <HAL_TIM_ConfigClockSource+0xfa>
 8007e26:	2b50      	cmp	r3, #80	@ 0x50
 8007e28:	d873      	bhi.n	8007f12 <HAL_TIM_ConfigClockSource+0x16c>
 8007e2a:	2b40      	cmp	r3, #64	@ 0x40
 8007e2c:	d058      	beq.n	8007ee0 <HAL_TIM_ConfigClockSource+0x13a>
 8007e2e:	2b40      	cmp	r3, #64	@ 0x40
 8007e30:	d86f      	bhi.n	8007f12 <HAL_TIM_ConfigClockSource+0x16c>
 8007e32:	2b30      	cmp	r3, #48	@ 0x30
 8007e34:	d064      	beq.n	8007f00 <HAL_TIM_ConfigClockSource+0x15a>
 8007e36:	2b30      	cmp	r3, #48	@ 0x30
 8007e38:	d86b      	bhi.n	8007f12 <HAL_TIM_ConfigClockSource+0x16c>
 8007e3a:	2b20      	cmp	r3, #32
 8007e3c:	d060      	beq.n	8007f00 <HAL_TIM_ConfigClockSource+0x15a>
 8007e3e:	2b20      	cmp	r3, #32
 8007e40:	d867      	bhi.n	8007f12 <HAL_TIM_ConfigClockSource+0x16c>
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d05c      	beq.n	8007f00 <HAL_TIM_ConfigClockSource+0x15a>
 8007e46:	2b10      	cmp	r3, #16
 8007e48:	d05a      	beq.n	8007f00 <HAL_TIM_ConfigClockSource+0x15a>
 8007e4a:	e062      	b.n	8007f12 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007e50:	683b      	ldr	r3, [r7, #0]
 8007e52:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007e54:	683b      	ldr	r3, [r7, #0]
 8007e56:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007e58:	683b      	ldr	r3, [r7, #0]
 8007e5a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007e5c:	f000 f9b8 	bl	80081d0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	689b      	ldr	r3, [r3, #8]
 8007e66:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007e68:	68bb      	ldr	r3, [r7, #8]
 8007e6a:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8007e6e:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	68ba      	ldr	r2, [r7, #8]
 8007e76:	609a      	str	r2, [r3, #8]
      break;
 8007e78:	e04f      	b.n	8007f1a <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007e7e:	683b      	ldr	r3, [r7, #0]
 8007e80:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007e82:	683b      	ldr	r3, [r7, #0]
 8007e84:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007e86:	683b      	ldr	r3, [r7, #0]
 8007e88:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007e8a:	f000 f9a1 	bl	80081d0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	689a      	ldr	r2, [r3, #8]
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007e9c:	609a      	str	r2, [r3, #8]
      break;
 8007e9e:	e03c      	b.n	8007f1a <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007ea4:	683b      	ldr	r3, [r7, #0]
 8007ea6:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007ea8:	683b      	ldr	r3, [r7, #0]
 8007eaa:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007eac:	461a      	mov	r2, r3
 8007eae:	f000 f915 	bl	80080dc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	2150      	movs	r1, #80	@ 0x50
 8007eb8:	4618      	mov	r0, r3
 8007eba:	f000 f96e 	bl	800819a <TIM_ITRx_SetConfig>
      break;
 8007ebe:	e02c      	b.n	8007f1a <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007ec4:	683b      	ldr	r3, [r7, #0]
 8007ec6:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007ec8:	683b      	ldr	r3, [r7, #0]
 8007eca:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007ecc:	461a      	mov	r2, r3
 8007ece:	f000 f934 	bl	800813a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	2160      	movs	r1, #96	@ 0x60
 8007ed8:	4618      	mov	r0, r3
 8007eda:	f000 f95e 	bl	800819a <TIM_ITRx_SetConfig>
      break;
 8007ede:	e01c      	b.n	8007f1a <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007ee4:	683b      	ldr	r3, [r7, #0]
 8007ee6:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007ee8:	683b      	ldr	r3, [r7, #0]
 8007eea:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007eec:	461a      	mov	r2, r3
 8007eee:	f000 f8f5 	bl	80080dc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	2140      	movs	r1, #64	@ 0x40
 8007ef8:	4618      	mov	r0, r3
 8007efa:	f000 f94e 	bl	800819a <TIM_ITRx_SetConfig>
      break;
 8007efe:	e00c      	b.n	8007f1a <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	681a      	ldr	r2, [r3, #0]
 8007f04:	683b      	ldr	r3, [r7, #0]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	4619      	mov	r1, r3
 8007f0a:	4610      	mov	r0, r2
 8007f0c:	f000 f945 	bl	800819a <TIM_ITRx_SetConfig>
      break;
 8007f10:	e003      	b.n	8007f1a <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007f12:	2301      	movs	r3, #1
 8007f14:	73fb      	strb	r3, [r7, #15]
      break;
 8007f16:	e000      	b.n	8007f1a <HAL_TIM_ConfigClockSource+0x174>
      break;
 8007f18:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	2201      	movs	r2, #1
 8007f1e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	2200      	movs	r2, #0
 8007f26:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007f2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f2c:	4618      	mov	r0, r3
 8007f2e:	3710      	adds	r7, #16
 8007f30:	46bd      	mov	sp, r7
 8007f32:	bd80      	pop	{r7, pc}

08007f34 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007f34:	b480      	push	{r7}
 8007f36:	b083      	sub	sp, #12
 8007f38:	af00      	add	r7, sp, #0
 8007f3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007f3c:	bf00      	nop
 8007f3e:	370c      	adds	r7, #12
 8007f40:	46bd      	mov	sp, r7
 8007f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f46:	4770      	bx	lr

08007f48 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007f48:	b480      	push	{r7}
 8007f4a:	b083      	sub	sp, #12
 8007f4c:	af00      	add	r7, sp, #0
 8007f4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007f50:	bf00      	nop
 8007f52:	370c      	adds	r7, #12
 8007f54:	46bd      	mov	sp, r7
 8007f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f5a:	4770      	bx	lr

08007f5c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007f5c:	b480      	push	{r7}
 8007f5e:	b083      	sub	sp, #12
 8007f60:	af00      	add	r7, sp, #0
 8007f62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007f64:	bf00      	nop
 8007f66:	370c      	adds	r7, #12
 8007f68:	46bd      	mov	sp, r7
 8007f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f6e:	4770      	bx	lr

08007f70 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007f70:	b480      	push	{r7}
 8007f72:	b083      	sub	sp, #12
 8007f74:	af00      	add	r7, sp, #0
 8007f76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007f78:	bf00      	nop
 8007f7a:	370c      	adds	r7, #12
 8007f7c:	46bd      	mov	sp, r7
 8007f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f82:	4770      	bx	lr

08007f84 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007f84:	b480      	push	{r7}
 8007f86:	b085      	sub	sp, #20
 8007f88:	af00      	add	r7, sp, #0
 8007f8a:	6078      	str	r0, [r7, #4]
 8007f8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	4a46      	ldr	r2, [pc, #280]	@ (80080b0 <TIM_Base_SetConfig+0x12c>)
 8007f98:	4293      	cmp	r3, r2
 8007f9a:	d013      	beq.n	8007fc4 <TIM_Base_SetConfig+0x40>
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007fa2:	d00f      	beq.n	8007fc4 <TIM_Base_SetConfig+0x40>
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	4a43      	ldr	r2, [pc, #268]	@ (80080b4 <TIM_Base_SetConfig+0x130>)
 8007fa8:	4293      	cmp	r3, r2
 8007faa:	d00b      	beq.n	8007fc4 <TIM_Base_SetConfig+0x40>
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	4a42      	ldr	r2, [pc, #264]	@ (80080b8 <TIM_Base_SetConfig+0x134>)
 8007fb0:	4293      	cmp	r3, r2
 8007fb2:	d007      	beq.n	8007fc4 <TIM_Base_SetConfig+0x40>
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	4a41      	ldr	r2, [pc, #260]	@ (80080bc <TIM_Base_SetConfig+0x138>)
 8007fb8:	4293      	cmp	r3, r2
 8007fba:	d003      	beq.n	8007fc4 <TIM_Base_SetConfig+0x40>
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	4a40      	ldr	r2, [pc, #256]	@ (80080c0 <TIM_Base_SetConfig+0x13c>)
 8007fc0:	4293      	cmp	r3, r2
 8007fc2:	d108      	bne.n	8007fd6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007fca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007fcc:	683b      	ldr	r3, [r7, #0]
 8007fce:	685b      	ldr	r3, [r3, #4]
 8007fd0:	68fa      	ldr	r2, [r7, #12]
 8007fd2:	4313      	orrs	r3, r2
 8007fd4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	4a35      	ldr	r2, [pc, #212]	@ (80080b0 <TIM_Base_SetConfig+0x12c>)
 8007fda:	4293      	cmp	r3, r2
 8007fdc:	d02b      	beq.n	8008036 <TIM_Base_SetConfig+0xb2>
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007fe4:	d027      	beq.n	8008036 <TIM_Base_SetConfig+0xb2>
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	4a32      	ldr	r2, [pc, #200]	@ (80080b4 <TIM_Base_SetConfig+0x130>)
 8007fea:	4293      	cmp	r3, r2
 8007fec:	d023      	beq.n	8008036 <TIM_Base_SetConfig+0xb2>
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	4a31      	ldr	r2, [pc, #196]	@ (80080b8 <TIM_Base_SetConfig+0x134>)
 8007ff2:	4293      	cmp	r3, r2
 8007ff4:	d01f      	beq.n	8008036 <TIM_Base_SetConfig+0xb2>
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	4a30      	ldr	r2, [pc, #192]	@ (80080bc <TIM_Base_SetConfig+0x138>)
 8007ffa:	4293      	cmp	r3, r2
 8007ffc:	d01b      	beq.n	8008036 <TIM_Base_SetConfig+0xb2>
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	4a2f      	ldr	r2, [pc, #188]	@ (80080c0 <TIM_Base_SetConfig+0x13c>)
 8008002:	4293      	cmp	r3, r2
 8008004:	d017      	beq.n	8008036 <TIM_Base_SetConfig+0xb2>
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	4a2e      	ldr	r2, [pc, #184]	@ (80080c4 <TIM_Base_SetConfig+0x140>)
 800800a:	4293      	cmp	r3, r2
 800800c:	d013      	beq.n	8008036 <TIM_Base_SetConfig+0xb2>
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	4a2d      	ldr	r2, [pc, #180]	@ (80080c8 <TIM_Base_SetConfig+0x144>)
 8008012:	4293      	cmp	r3, r2
 8008014:	d00f      	beq.n	8008036 <TIM_Base_SetConfig+0xb2>
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	4a2c      	ldr	r2, [pc, #176]	@ (80080cc <TIM_Base_SetConfig+0x148>)
 800801a:	4293      	cmp	r3, r2
 800801c:	d00b      	beq.n	8008036 <TIM_Base_SetConfig+0xb2>
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	4a2b      	ldr	r2, [pc, #172]	@ (80080d0 <TIM_Base_SetConfig+0x14c>)
 8008022:	4293      	cmp	r3, r2
 8008024:	d007      	beq.n	8008036 <TIM_Base_SetConfig+0xb2>
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	4a2a      	ldr	r2, [pc, #168]	@ (80080d4 <TIM_Base_SetConfig+0x150>)
 800802a:	4293      	cmp	r3, r2
 800802c:	d003      	beq.n	8008036 <TIM_Base_SetConfig+0xb2>
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	4a29      	ldr	r2, [pc, #164]	@ (80080d8 <TIM_Base_SetConfig+0x154>)
 8008032:	4293      	cmp	r3, r2
 8008034:	d108      	bne.n	8008048 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800803c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800803e:	683b      	ldr	r3, [r7, #0]
 8008040:	68db      	ldr	r3, [r3, #12]
 8008042:	68fa      	ldr	r2, [r7, #12]
 8008044:	4313      	orrs	r3, r2
 8008046:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800804e:	683b      	ldr	r3, [r7, #0]
 8008050:	695b      	ldr	r3, [r3, #20]
 8008052:	4313      	orrs	r3, r2
 8008054:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	68fa      	ldr	r2, [r7, #12]
 800805a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800805c:	683b      	ldr	r3, [r7, #0]
 800805e:	689a      	ldr	r2, [r3, #8]
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008064:	683b      	ldr	r3, [r7, #0]
 8008066:	681a      	ldr	r2, [r3, #0]
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	4a10      	ldr	r2, [pc, #64]	@ (80080b0 <TIM_Base_SetConfig+0x12c>)
 8008070:	4293      	cmp	r3, r2
 8008072:	d003      	beq.n	800807c <TIM_Base_SetConfig+0xf8>
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	4a12      	ldr	r2, [pc, #72]	@ (80080c0 <TIM_Base_SetConfig+0x13c>)
 8008078:	4293      	cmp	r3, r2
 800807a:	d103      	bne.n	8008084 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800807c:	683b      	ldr	r3, [r7, #0]
 800807e:	691a      	ldr	r2, [r3, #16]
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	2201      	movs	r2, #1
 8008088:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	691b      	ldr	r3, [r3, #16]
 800808e:	f003 0301 	and.w	r3, r3, #1
 8008092:	2b01      	cmp	r3, #1
 8008094:	d105      	bne.n	80080a2 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	691b      	ldr	r3, [r3, #16]
 800809a:	f023 0201 	bic.w	r2, r3, #1
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	611a      	str	r2, [r3, #16]
  }
}
 80080a2:	bf00      	nop
 80080a4:	3714      	adds	r7, #20
 80080a6:	46bd      	mov	sp, r7
 80080a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ac:	4770      	bx	lr
 80080ae:	bf00      	nop
 80080b0:	40010000 	.word	0x40010000
 80080b4:	40000400 	.word	0x40000400
 80080b8:	40000800 	.word	0x40000800
 80080bc:	40000c00 	.word	0x40000c00
 80080c0:	40010400 	.word	0x40010400
 80080c4:	40014000 	.word	0x40014000
 80080c8:	40014400 	.word	0x40014400
 80080cc:	40014800 	.word	0x40014800
 80080d0:	40001800 	.word	0x40001800
 80080d4:	40001c00 	.word	0x40001c00
 80080d8:	40002000 	.word	0x40002000

080080dc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80080dc:	b480      	push	{r7}
 80080de:	b087      	sub	sp, #28
 80080e0:	af00      	add	r7, sp, #0
 80080e2:	60f8      	str	r0, [r7, #12]
 80080e4:	60b9      	str	r1, [r7, #8]
 80080e6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	6a1b      	ldr	r3, [r3, #32]
 80080ec:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	6a1b      	ldr	r3, [r3, #32]
 80080f2:	f023 0201 	bic.w	r2, r3, #1
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	699b      	ldr	r3, [r3, #24]
 80080fe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008100:	693b      	ldr	r3, [r7, #16]
 8008102:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008106:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	011b      	lsls	r3, r3, #4
 800810c:	693a      	ldr	r2, [r7, #16]
 800810e:	4313      	orrs	r3, r2
 8008110:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008112:	697b      	ldr	r3, [r7, #20]
 8008114:	f023 030a 	bic.w	r3, r3, #10
 8008118:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800811a:	697a      	ldr	r2, [r7, #20]
 800811c:	68bb      	ldr	r3, [r7, #8]
 800811e:	4313      	orrs	r3, r2
 8008120:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	693a      	ldr	r2, [r7, #16]
 8008126:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	697a      	ldr	r2, [r7, #20]
 800812c:	621a      	str	r2, [r3, #32]
}
 800812e:	bf00      	nop
 8008130:	371c      	adds	r7, #28
 8008132:	46bd      	mov	sp, r7
 8008134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008138:	4770      	bx	lr

0800813a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800813a:	b480      	push	{r7}
 800813c:	b087      	sub	sp, #28
 800813e:	af00      	add	r7, sp, #0
 8008140:	60f8      	str	r0, [r7, #12]
 8008142:	60b9      	str	r1, [r7, #8]
 8008144:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	6a1b      	ldr	r3, [r3, #32]
 800814a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	6a1b      	ldr	r3, [r3, #32]
 8008150:	f023 0210 	bic.w	r2, r3, #16
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	699b      	ldr	r3, [r3, #24]
 800815c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800815e:	693b      	ldr	r3, [r7, #16]
 8008160:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008164:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	031b      	lsls	r3, r3, #12
 800816a:	693a      	ldr	r2, [r7, #16]
 800816c:	4313      	orrs	r3, r2
 800816e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008170:	697b      	ldr	r3, [r7, #20]
 8008172:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8008176:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008178:	68bb      	ldr	r3, [r7, #8]
 800817a:	011b      	lsls	r3, r3, #4
 800817c:	697a      	ldr	r2, [r7, #20]
 800817e:	4313      	orrs	r3, r2
 8008180:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	693a      	ldr	r2, [r7, #16]
 8008186:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	697a      	ldr	r2, [r7, #20]
 800818c:	621a      	str	r2, [r3, #32]
}
 800818e:	bf00      	nop
 8008190:	371c      	adds	r7, #28
 8008192:	46bd      	mov	sp, r7
 8008194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008198:	4770      	bx	lr

0800819a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800819a:	b480      	push	{r7}
 800819c:	b085      	sub	sp, #20
 800819e:	af00      	add	r7, sp, #0
 80081a0:	6078      	str	r0, [r7, #4]
 80081a2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	689b      	ldr	r3, [r3, #8]
 80081a8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80081b0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80081b2:	683a      	ldr	r2, [r7, #0]
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	4313      	orrs	r3, r2
 80081b8:	f043 0307 	orr.w	r3, r3, #7
 80081bc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	68fa      	ldr	r2, [r7, #12]
 80081c2:	609a      	str	r2, [r3, #8]
}
 80081c4:	bf00      	nop
 80081c6:	3714      	adds	r7, #20
 80081c8:	46bd      	mov	sp, r7
 80081ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ce:	4770      	bx	lr

080081d0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80081d0:	b480      	push	{r7}
 80081d2:	b087      	sub	sp, #28
 80081d4:	af00      	add	r7, sp, #0
 80081d6:	60f8      	str	r0, [r7, #12]
 80081d8:	60b9      	str	r1, [r7, #8]
 80081da:	607a      	str	r2, [r7, #4]
 80081dc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	689b      	ldr	r3, [r3, #8]
 80081e2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80081e4:	697b      	ldr	r3, [r7, #20]
 80081e6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80081ea:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80081ec:	683b      	ldr	r3, [r7, #0]
 80081ee:	021a      	lsls	r2, r3, #8
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	431a      	orrs	r2, r3
 80081f4:	68bb      	ldr	r3, [r7, #8]
 80081f6:	4313      	orrs	r3, r2
 80081f8:	697a      	ldr	r2, [r7, #20]
 80081fa:	4313      	orrs	r3, r2
 80081fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	697a      	ldr	r2, [r7, #20]
 8008202:	609a      	str	r2, [r3, #8]
}
 8008204:	bf00      	nop
 8008206:	371c      	adds	r7, #28
 8008208:	46bd      	mov	sp, r7
 800820a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800820e:	4770      	bx	lr

08008210 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008210:	b480      	push	{r7}
 8008212:	b085      	sub	sp, #20
 8008214:	af00      	add	r7, sp, #0
 8008216:	6078      	str	r0, [r7, #4]
 8008218:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008220:	2b01      	cmp	r3, #1
 8008222:	d101      	bne.n	8008228 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008224:	2302      	movs	r3, #2
 8008226:	e05a      	b.n	80082de <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	2201      	movs	r2, #1
 800822c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	2202      	movs	r2, #2
 8008234:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	685b      	ldr	r3, [r3, #4]
 800823e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	689b      	ldr	r3, [r3, #8]
 8008246:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800824e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008250:	683b      	ldr	r3, [r7, #0]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	68fa      	ldr	r2, [r7, #12]
 8008256:	4313      	orrs	r3, r2
 8008258:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	68fa      	ldr	r2, [r7, #12]
 8008260:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	4a21      	ldr	r2, [pc, #132]	@ (80082ec <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8008268:	4293      	cmp	r3, r2
 800826a:	d022      	beq.n	80082b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008274:	d01d      	beq.n	80082b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	4a1d      	ldr	r2, [pc, #116]	@ (80082f0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800827c:	4293      	cmp	r3, r2
 800827e:	d018      	beq.n	80082b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	4a1b      	ldr	r2, [pc, #108]	@ (80082f4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8008286:	4293      	cmp	r3, r2
 8008288:	d013      	beq.n	80082b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	4a1a      	ldr	r2, [pc, #104]	@ (80082f8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8008290:	4293      	cmp	r3, r2
 8008292:	d00e      	beq.n	80082b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	4a18      	ldr	r2, [pc, #96]	@ (80082fc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800829a:	4293      	cmp	r3, r2
 800829c:	d009      	beq.n	80082b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	4a17      	ldr	r2, [pc, #92]	@ (8008300 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80082a4:	4293      	cmp	r3, r2
 80082a6:	d004      	beq.n	80082b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	4a15      	ldr	r2, [pc, #84]	@ (8008304 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80082ae:	4293      	cmp	r3, r2
 80082b0:	d10c      	bne.n	80082cc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80082b2:	68bb      	ldr	r3, [r7, #8]
 80082b4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80082b8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80082ba:	683b      	ldr	r3, [r7, #0]
 80082bc:	685b      	ldr	r3, [r3, #4]
 80082be:	68ba      	ldr	r2, [r7, #8]
 80082c0:	4313      	orrs	r3, r2
 80082c2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	68ba      	ldr	r2, [r7, #8]
 80082ca:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	2201      	movs	r2, #1
 80082d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	2200      	movs	r2, #0
 80082d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80082dc:	2300      	movs	r3, #0
}
 80082de:	4618      	mov	r0, r3
 80082e0:	3714      	adds	r7, #20
 80082e2:	46bd      	mov	sp, r7
 80082e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082e8:	4770      	bx	lr
 80082ea:	bf00      	nop
 80082ec:	40010000 	.word	0x40010000
 80082f0:	40000400 	.word	0x40000400
 80082f4:	40000800 	.word	0x40000800
 80082f8:	40000c00 	.word	0x40000c00
 80082fc:	40010400 	.word	0x40010400
 8008300:	40014000 	.word	0x40014000
 8008304:	40001800 	.word	0x40001800

08008308 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008308:	b480      	push	{r7}
 800830a:	b083      	sub	sp, #12
 800830c:	af00      	add	r7, sp, #0
 800830e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008310:	bf00      	nop
 8008312:	370c      	adds	r7, #12
 8008314:	46bd      	mov	sp, r7
 8008316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800831a:	4770      	bx	lr

0800831c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800831c:	b480      	push	{r7}
 800831e:	b083      	sub	sp, #12
 8008320:	af00      	add	r7, sp, #0
 8008322:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008324:	bf00      	nop
 8008326:	370c      	adds	r7, #12
 8008328:	46bd      	mov	sp, r7
 800832a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800832e:	4770      	bx	lr

08008330 <memset>:
 8008330:	4402      	add	r2, r0
 8008332:	4603      	mov	r3, r0
 8008334:	4293      	cmp	r3, r2
 8008336:	d100      	bne.n	800833a <memset+0xa>
 8008338:	4770      	bx	lr
 800833a:	f803 1b01 	strb.w	r1, [r3], #1
 800833e:	e7f9      	b.n	8008334 <memset+0x4>

08008340 <__errno>:
 8008340:	4b01      	ldr	r3, [pc, #4]	@ (8008348 <__errno+0x8>)
 8008342:	6818      	ldr	r0, [r3, #0]
 8008344:	4770      	bx	lr
 8008346:	bf00      	nop
 8008348:	20000010 	.word	0x20000010

0800834c <__libc_init_array>:
 800834c:	b570      	push	{r4, r5, r6, lr}
 800834e:	4d0d      	ldr	r5, [pc, #52]	@ (8008384 <__libc_init_array+0x38>)
 8008350:	4c0d      	ldr	r4, [pc, #52]	@ (8008388 <__libc_init_array+0x3c>)
 8008352:	1b64      	subs	r4, r4, r5
 8008354:	10a4      	asrs	r4, r4, #2
 8008356:	2600      	movs	r6, #0
 8008358:	42a6      	cmp	r6, r4
 800835a:	d109      	bne.n	8008370 <__libc_init_array+0x24>
 800835c:	4d0b      	ldr	r5, [pc, #44]	@ (800838c <__libc_init_array+0x40>)
 800835e:	4c0c      	ldr	r4, [pc, #48]	@ (8008390 <__libc_init_array+0x44>)
 8008360:	f000 fd06 	bl	8008d70 <_init>
 8008364:	1b64      	subs	r4, r4, r5
 8008366:	10a4      	asrs	r4, r4, #2
 8008368:	2600      	movs	r6, #0
 800836a:	42a6      	cmp	r6, r4
 800836c:	d105      	bne.n	800837a <__libc_init_array+0x2e>
 800836e:	bd70      	pop	{r4, r5, r6, pc}
 8008370:	f855 3b04 	ldr.w	r3, [r5], #4
 8008374:	4798      	blx	r3
 8008376:	3601      	adds	r6, #1
 8008378:	e7ee      	b.n	8008358 <__libc_init_array+0xc>
 800837a:	f855 3b04 	ldr.w	r3, [r5], #4
 800837e:	4798      	blx	r3
 8008380:	3601      	adds	r6, #1
 8008382:	e7f2      	b.n	800836a <__libc_init_array+0x1e>
 8008384:	08008dc4 	.word	0x08008dc4
 8008388:	08008dc4 	.word	0x08008dc4
 800838c:	08008dc4 	.word	0x08008dc4
 8008390:	08008dc8 	.word	0x08008dc8

08008394 <logf>:
 8008394:	b508      	push	{r3, lr}
 8008396:	ed2d 8b02 	vpush	{d8}
 800839a:	eeb0 8a40 	vmov.f32	s16, s0
 800839e:	f000 f88f 	bl	80084c0 <__ieee754_logf>
 80083a2:	eeb4 8a48 	vcmp.f32	s16, s16
 80083a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80083aa:	d60f      	bvs.n	80083cc <logf+0x38>
 80083ac:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 80083b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80083b4:	dc0a      	bgt.n	80083cc <logf+0x38>
 80083b6:	eeb5 8a40 	vcmp.f32	s16, #0.0
 80083ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80083be:	d108      	bne.n	80083d2 <logf+0x3e>
 80083c0:	f7ff ffbe 	bl	8008340 <__errno>
 80083c4:	2322      	movs	r3, #34	@ 0x22
 80083c6:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 80083e8 <logf+0x54>
 80083ca:	6003      	str	r3, [r0, #0]
 80083cc:	ecbd 8b02 	vpop	{d8}
 80083d0:	bd08      	pop	{r3, pc}
 80083d2:	f7ff ffb5 	bl	8008340 <__errno>
 80083d6:	ecbd 8b02 	vpop	{d8}
 80083da:	2321      	movs	r3, #33	@ 0x21
 80083dc:	6003      	str	r3, [r0, #0]
 80083de:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80083e2:	4802      	ldr	r0, [pc, #8]	@ (80083ec <logf+0x58>)
 80083e4:	f000 b866 	b.w	80084b4 <nanf>
 80083e8:	ff800000 	.word	0xff800000
 80083ec:	08008da1 	.word	0x08008da1

080083f0 <powf>:
 80083f0:	b508      	push	{r3, lr}
 80083f2:	ed2d 8b04 	vpush	{d8-d9}
 80083f6:	eeb0 8a60 	vmov.f32	s16, s1
 80083fa:	eeb0 9a40 	vmov.f32	s18, s0
 80083fe:	f000 f951 	bl	80086a4 <__ieee754_powf>
 8008402:	eeb4 8a48 	vcmp.f32	s16, s16
 8008406:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800840a:	eef0 8a40 	vmov.f32	s17, s0
 800840e:	d63e      	bvs.n	800848e <powf+0x9e>
 8008410:	eeb5 9a40 	vcmp.f32	s18, #0.0
 8008414:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008418:	d112      	bne.n	8008440 <powf+0x50>
 800841a:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800841e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008422:	d039      	beq.n	8008498 <powf+0xa8>
 8008424:	eeb0 0a48 	vmov.f32	s0, s16
 8008428:	f000 f839 	bl	800849e <finitef>
 800842c:	b378      	cbz	r0, 800848e <powf+0x9e>
 800842e:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8008432:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008436:	d52a      	bpl.n	800848e <powf+0x9e>
 8008438:	f7ff ff82 	bl	8008340 <__errno>
 800843c:	2322      	movs	r3, #34	@ 0x22
 800843e:	e014      	b.n	800846a <powf+0x7a>
 8008440:	f000 f82d 	bl	800849e <finitef>
 8008444:	b998      	cbnz	r0, 800846e <powf+0x7e>
 8008446:	eeb0 0a49 	vmov.f32	s0, s18
 800844a:	f000 f828 	bl	800849e <finitef>
 800844e:	b170      	cbz	r0, 800846e <powf+0x7e>
 8008450:	eeb0 0a48 	vmov.f32	s0, s16
 8008454:	f000 f823 	bl	800849e <finitef>
 8008458:	b148      	cbz	r0, 800846e <powf+0x7e>
 800845a:	eef4 8a68 	vcmp.f32	s17, s17
 800845e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008462:	d7e9      	bvc.n	8008438 <powf+0x48>
 8008464:	f7ff ff6c 	bl	8008340 <__errno>
 8008468:	2321      	movs	r3, #33	@ 0x21
 800846a:	6003      	str	r3, [r0, #0]
 800846c:	e00f      	b.n	800848e <powf+0x9e>
 800846e:	eef5 8a40 	vcmp.f32	s17, #0.0
 8008472:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008476:	d10a      	bne.n	800848e <powf+0x9e>
 8008478:	eeb0 0a49 	vmov.f32	s0, s18
 800847c:	f000 f80f 	bl	800849e <finitef>
 8008480:	b128      	cbz	r0, 800848e <powf+0x9e>
 8008482:	eeb0 0a48 	vmov.f32	s0, s16
 8008486:	f000 f80a 	bl	800849e <finitef>
 800848a:	2800      	cmp	r0, #0
 800848c:	d1d4      	bne.n	8008438 <powf+0x48>
 800848e:	eeb0 0a68 	vmov.f32	s0, s17
 8008492:	ecbd 8b04 	vpop	{d8-d9}
 8008496:	bd08      	pop	{r3, pc}
 8008498:	eef7 8a00 	vmov.f32	s17, #112	@ 0x3f800000  1.0
 800849c:	e7f7      	b.n	800848e <powf+0x9e>

0800849e <finitef>:
 800849e:	ee10 3a10 	vmov	r3, s0
 80084a2:	f023 4000 	bic.w	r0, r3, #2147483648	@ 0x80000000
 80084a6:	f1b0 4fff 	cmp.w	r0, #2139095040	@ 0x7f800000
 80084aa:	bfac      	ite	ge
 80084ac:	2000      	movge	r0, #0
 80084ae:	2001      	movlt	r0, #1
 80084b0:	4770      	bx	lr
	...

080084b4 <nanf>:
 80084b4:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 80084bc <nanf+0x8>
 80084b8:	4770      	bx	lr
 80084ba:	bf00      	nop
 80084bc:	7fc00000 	.word	0x7fc00000

080084c0 <__ieee754_logf>:
 80084c0:	ee10 3a10 	vmov	r3, s0
 80084c4:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 80084c8:	d106      	bne.n	80084d8 <__ieee754_logf+0x18>
 80084ca:	ed9f 7a66 	vldr	s14, [pc, #408]	@ 8008664 <__ieee754_logf+0x1a4>
 80084ce:	eddf 7a66 	vldr	s15, [pc, #408]	@ 8008668 <__ieee754_logf+0x1a8>
 80084d2:	ee87 0a27 	vdiv.f32	s0, s14, s15
 80084d6:	4770      	bx	lr
 80084d8:	2b00      	cmp	r3, #0
 80084da:	461a      	mov	r2, r3
 80084dc:	da02      	bge.n	80084e4 <__ieee754_logf+0x24>
 80084de:	ee30 7a40 	vsub.f32	s14, s0, s0
 80084e2:	e7f4      	b.n	80084ce <__ieee754_logf+0xe>
 80084e4:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 80084e8:	db02      	blt.n	80084f0 <__ieee754_logf+0x30>
 80084ea:	ee30 0a00 	vadd.f32	s0, s0, s0
 80084ee:	4770      	bx	lr
 80084f0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80084f4:	bfb8      	it	lt
 80084f6:	eddf 7a5d 	vldrlt	s15, [pc, #372]	@ 800866c <__ieee754_logf+0x1ac>
 80084fa:	485d      	ldr	r0, [pc, #372]	@ (8008670 <__ieee754_logf+0x1b0>)
 80084fc:	bfbe      	ittt	lt
 80084fe:	ee60 7a27 	vmullt.f32	s15, s0, s15
 8008502:	f06f 0118 	mvnlt.w	r1, #24
 8008506:	ee17 2a90 	vmovlt	r2, s15
 800850a:	ea4f 53e2 	mov.w	r3, r2, asr #23
 800850e:	f3c2 0216 	ubfx	r2, r2, #0, #23
 8008512:	4410      	add	r0, r2
 8008514:	bfa8      	it	ge
 8008516:	2100      	movge	r1, #0
 8008518:	3b7f      	subs	r3, #127	@ 0x7f
 800851a:	440b      	add	r3, r1
 800851c:	f400 0100 	and.w	r1, r0, #8388608	@ 0x800000
 8008520:	f081 517e 	eor.w	r1, r1, #1065353216	@ 0x3f800000
 8008524:	4311      	orrs	r1, r2
 8008526:	ee00 1a10 	vmov	s0, r1
 800852a:	4952      	ldr	r1, [pc, #328]	@ (8008674 <__ieee754_logf+0x1b4>)
 800852c:	eb03 53d0 	add.w	r3, r3, r0, lsr #23
 8008530:	f102 000f 	add.w	r0, r2, #15
 8008534:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8008538:	4001      	ands	r1, r0
 800853a:	ee30 0a67 	vsub.f32	s0, s0, s15
 800853e:	bb89      	cbnz	r1, 80085a4 <__ieee754_logf+0xe4>
 8008540:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8008544:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008548:	d10f      	bne.n	800856a <__ieee754_logf+0xaa>
 800854a:	2b00      	cmp	r3, #0
 800854c:	f000 8087 	beq.w	800865e <__ieee754_logf+0x19e>
 8008550:	ee07 3a90 	vmov	s15, r3
 8008554:	ed9f 0a48 	vldr	s0, [pc, #288]	@ 8008678 <__ieee754_logf+0x1b8>
 8008558:	ed9f 7a48 	vldr	s14, [pc, #288]	@ 800867c <__ieee754_logf+0x1bc>
 800855c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008560:	ee27 0a80 	vmul.f32	s0, s15, s0
 8008564:	eea7 0a87 	vfma.f32	s0, s15, s14
 8008568:	4770      	bx	lr
 800856a:	eddf 6a45 	vldr	s13, [pc, #276]	@ 8008680 <__ieee754_logf+0x1c0>
 800856e:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8008572:	eee0 7a66 	vfms.f32	s15, s0, s13
 8008576:	ee20 7a00 	vmul.f32	s14, s0, s0
 800857a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800857e:	b913      	cbnz	r3, 8008586 <__ieee754_logf+0xc6>
 8008580:	ee30 0a47 	vsub.f32	s0, s0, s14
 8008584:	4770      	bx	lr
 8008586:	ee07 3a90 	vmov	s15, r3
 800858a:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 8008678 <__ieee754_logf+0x1b8>
 800858e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008592:	eea7 7ae6 	vfms.f32	s14, s15, s13
 8008596:	ee37 0a40 	vsub.f32	s0, s14, s0
 800859a:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 800867c <__ieee754_logf+0x1bc>
 800859e:	ee97 0a87 	vfnms.f32	s0, s15, s14
 80085a2:	4770      	bx	lr
 80085a4:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 80085a8:	ee70 7a27 	vadd.f32	s15, s0, s15
 80085ac:	eddf 5a35 	vldr	s11, [pc, #212]	@ 8008684 <__ieee754_logf+0x1c4>
 80085b0:	eddf 4a35 	vldr	s9, [pc, #212]	@ 8008688 <__ieee754_logf+0x1c8>
 80085b4:	4935      	ldr	r1, [pc, #212]	@ (800868c <__ieee754_logf+0x1cc>)
 80085b6:	ee80 6a27 	vdiv.f32	s12, s0, s15
 80085ba:	4411      	add	r1, r2
 80085bc:	f5c2 1257 	rsb	r2, r2, #3522560	@ 0x35c000
 80085c0:	f502 7222 	add.w	r2, r2, #648	@ 0x288
 80085c4:	430a      	orrs	r2, r1
 80085c6:	2a00      	cmp	r2, #0
 80085c8:	ee07 3a90 	vmov	s15, r3
 80085cc:	ee26 5a06 	vmul.f32	s10, s12, s12
 80085d0:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80085d4:	ee25 7a05 	vmul.f32	s14, s10, s10
 80085d8:	eddf 7a2d 	vldr	s15, [pc, #180]	@ 8008690 <__ieee754_logf+0x1d0>
 80085dc:	eee7 7a25 	vfma.f32	s15, s14, s11
 80085e0:	eddf 5a2c 	vldr	s11, [pc, #176]	@ 8008694 <__ieee754_logf+0x1d4>
 80085e4:	eee7 5a87 	vfma.f32	s11, s15, s14
 80085e8:	eddf 7a2b 	vldr	s15, [pc, #172]	@ 8008698 <__ieee754_logf+0x1d8>
 80085ec:	eee7 7a24 	vfma.f32	s15, s14, s9
 80085f0:	eddf 4a2a 	vldr	s9, [pc, #168]	@ 800869c <__ieee754_logf+0x1dc>
 80085f4:	eee7 4a87 	vfma.f32	s9, s15, s14
 80085f8:	eddf 7a29 	vldr	s15, [pc, #164]	@ 80086a0 <__ieee754_logf+0x1e0>
 80085fc:	eee4 7a87 	vfma.f32	s15, s9, s14
 8008600:	ee67 7a85 	vmul.f32	s15, s15, s10
 8008604:	eee5 7a87 	vfma.f32	s15, s11, s14
 8008608:	dd1a      	ble.n	8008640 <__ieee754_logf+0x180>
 800860a:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800860e:	ee20 7a07 	vmul.f32	s14, s0, s14
 8008612:	ee27 7a00 	vmul.f32	s14, s14, s0
 8008616:	ee77 7a87 	vadd.f32	s15, s15, s14
 800861a:	ee67 7a86 	vmul.f32	s15, s15, s12
 800861e:	b913      	cbnz	r3, 8008626 <__ieee754_logf+0x166>
 8008620:	ee37 7a67 	vsub.f32	s14, s14, s15
 8008624:	e7ac      	b.n	8008580 <__ieee754_logf+0xc0>
 8008626:	ed9f 6a14 	vldr	s12, [pc, #80]	@ 8008678 <__ieee754_logf+0x1b8>
 800862a:	eee6 7a86 	vfma.f32	s15, s13, s12
 800862e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8008632:	ee37 0a40 	vsub.f32	s0, s14, s0
 8008636:	eddf 7a11 	vldr	s15, [pc, #68]	@ 800867c <__ieee754_logf+0x1bc>
 800863a:	ee96 0aa7 	vfnms.f32	s0, s13, s15
 800863e:	4770      	bx	lr
 8008640:	ee70 7a67 	vsub.f32	s15, s0, s15
 8008644:	ee67 7a86 	vmul.f32	s15, s15, s12
 8008648:	b913      	cbnz	r3, 8008650 <__ieee754_logf+0x190>
 800864a:	ee30 0a67 	vsub.f32	s0, s0, s15
 800864e:	4770      	bx	lr
 8008650:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 8008678 <__ieee754_logf+0x1b8>
 8008654:	eee6 7ac7 	vfms.f32	s15, s13, s14
 8008658:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800865c:	e7eb      	b.n	8008636 <__ieee754_logf+0x176>
 800865e:	ed9f 0a02 	vldr	s0, [pc, #8]	@ 8008668 <__ieee754_logf+0x1a8>
 8008662:	4770      	bx	lr
 8008664:	cc000000 	.word	0xcc000000
 8008668:	00000000 	.word	0x00000000
 800866c:	4c000000 	.word	0x4c000000
 8008670:	004afb20 	.word	0x004afb20
 8008674:	007ffff0 	.word	0x007ffff0
 8008678:	3717f7d1 	.word	0x3717f7d1
 800867c:	3f317180 	.word	0x3f317180
 8008680:	3eaaaaab 	.word	0x3eaaaaab
 8008684:	3e1cd04f 	.word	0x3e1cd04f
 8008688:	3e178897 	.word	0x3e178897
 800868c:	ffcf5c30 	.word	0xffcf5c30
 8008690:	3e638e29 	.word	0x3e638e29
 8008694:	3ecccccd 	.word	0x3ecccccd
 8008698:	3e3a3325 	.word	0x3e3a3325
 800869c:	3e924925 	.word	0x3e924925
 80086a0:	3f2aaaab 	.word	0x3f2aaaab

080086a4 <__ieee754_powf>:
 80086a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80086a8:	ee10 4a90 	vmov	r4, s1
 80086ac:	f034 4900 	bics.w	r9, r4, #2147483648	@ 0x80000000
 80086b0:	ed2d 8b02 	vpush	{d8}
 80086b4:	ee10 6a10 	vmov	r6, s0
 80086b8:	eeb0 8a40 	vmov.f32	s16, s0
 80086bc:	eef0 8a60 	vmov.f32	s17, s1
 80086c0:	d10c      	bne.n	80086dc <__ieee754_powf+0x38>
 80086c2:	f486 0680 	eor.w	r6, r6, #4194304	@ 0x400000
 80086c6:	0076      	lsls	r6, r6, #1
 80086c8:	f516 0f00 	cmn.w	r6, #8388608	@ 0x800000
 80086cc:	f240 8274 	bls.w	8008bb8 <__ieee754_powf+0x514>
 80086d0:	ee38 0a28 	vadd.f32	s0, s16, s17
 80086d4:	ecbd 8b02 	vpop	{d8}
 80086d8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80086dc:	f026 4800 	bic.w	r8, r6, #2147483648	@ 0x80000000
 80086e0:	f1b8 4fff 	cmp.w	r8, #2139095040	@ 0x7f800000
 80086e4:	d802      	bhi.n	80086ec <__ieee754_powf+0x48>
 80086e6:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 80086ea:	d908      	bls.n	80086fe <__ieee754_powf+0x5a>
 80086ec:	f1b6 5f7e 	cmp.w	r6, #1065353216	@ 0x3f800000
 80086f0:	d1ee      	bne.n	80086d0 <__ieee754_powf+0x2c>
 80086f2:	f484 0480 	eor.w	r4, r4, #4194304	@ 0x400000
 80086f6:	0064      	lsls	r4, r4, #1
 80086f8:	f514 0f00 	cmn.w	r4, #8388608	@ 0x800000
 80086fc:	e7e6      	b.n	80086cc <__ieee754_powf+0x28>
 80086fe:	2e00      	cmp	r6, #0
 8008700:	da1f      	bge.n	8008742 <__ieee754_powf+0x9e>
 8008702:	f1b9 4f97 	cmp.w	r9, #1266679808	@ 0x4b800000
 8008706:	f080 8260 	bcs.w	8008bca <__ieee754_powf+0x526>
 800870a:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 800870e:	d32f      	bcc.n	8008770 <__ieee754_powf+0xcc>
 8008710:	ea4f 53e9 	mov.w	r3, r9, asr #23
 8008714:	f1c3 0396 	rsb	r3, r3, #150	@ 0x96
 8008718:	fa49 f503 	asr.w	r5, r9, r3
 800871c:	fa05 f303 	lsl.w	r3, r5, r3
 8008720:	454b      	cmp	r3, r9
 8008722:	d123      	bne.n	800876c <__ieee754_powf+0xc8>
 8008724:	f005 0501 	and.w	r5, r5, #1
 8008728:	f1c5 0502 	rsb	r5, r5, #2
 800872c:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 8008730:	d11f      	bne.n	8008772 <__ieee754_powf+0xce>
 8008732:	2c00      	cmp	r4, #0
 8008734:	f280 8246 	bge.w	8008bc4 <__ieee754_powf+0x520>
 8008738:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800873c:	ee87 0a88 	vdiv.f32	s0, s15, s16
 8008740:	e7c8      	b.n	80086d4 <__ieee754_powf+0x30>
 8008742:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 8008746:	d111      	bne.n	800876c <__ieee754_powf+0xc8>
 8008748:	f1b8 5f7e 	cmp.w	r8, #1065353216	@ 0x3f800000
 800874c:	f000 8234 	beq.w	8008bb8 <__ieee754_powf+0x514>
 8008750:	d906      	bls.n	8008760 <__ieee754_powf+0xbc>
 8008752:	ed9f 0ac5 	vldr	s0, [pc, #788]	@ 8008a68 <__ieee754_powf+0x3c4>
 8008756:	2c00      	cmp	r4, #0
 8008758:	bfa8      	it	ge
 800875a:	eeb0 0a68 	vmovge.f32	s0, s17
 800875e:	e7b9      	b.n	80086d4 <__ieee754_powf+0x30>
 8008760:	2c00      	cmp	r4, #0
 8008762:	f280 822c 	bge.w	8008bbe <__ieee754_powf+0x51a>
 8008766:	eeb1 0a68 	vneg.f32	s0, s17
 800876a:	e7b3      	b.n	80086d4 <__ieee754_powf+0x30>
 800876c:	2500      	movs	r5, #0
 800876e:	e7dd      	b.n	800872c <__ieee754_powf+0x88>
 8008770:	2500      	movs	r5, #0
 8008772:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 8008776:	d102      	bne.n	800877e <__ieee754_powf+0xda>
 8008778:	ee28 0a08 	vmul.f32	s0, s16, s16
 800877c:	e7aa      	b.n	80086d4 <__ieee754_powf+0x30>
 800877e:	f1b4 5f7c 	cmp.w	r4, #1056964608	@ 0x3f000000
 8008782:	f040 8227 	bne.w	8008bd4 <__ieee754_powf+0x530>
 8008786:	2e00      	cmp	r6, #0
 8008788:	f2c0 8224 	blt.w	8008bd4 <__ieee754_powf+0x530>
 800878c:	eeb0 0a48 	vmov.f32	s0, s16
 8008790:	ecbd 8b02 	vpop	{d8}
 8008794:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008798:	f000 bae6 	b.w	8008d68 <__ieee754_sqrtf>
 800879c:	2d01      	cmp	r5, #1
 800879e:	d199      	bne.n	80086d4 <__ieee754_powf+0x30>
 80087a0:	eeb1 0a40 	vneg.f32	s0, s0
 80087a4:	e796      	b.n	80086d4 <__ieee754_powf+0x30>
 80087a6:	0ff0      	lsrs	r0, r6, #31
 80087a8:	3801      	subs	r0, #1
 80087aa:	ea55 0300 	orrs.w	r3, r5, r0
 80087ae:	d104      	bne.n	80087ba <__ieee754_powf+0x116>
 80087b0:	ee38 8a48 	vsub.f32	s16, s16, s16
 80087b4:	ee88 0a08 	vdiv.f32	s0, s16, s16
 80087b8:	e78c      	b.n	80086d4 <__ieee754_powf+0x30>
 80087ba:	f1b9 4f9a 	cmp.w	r9, #1291845632	@ 0x4d000000
 80087be:	d96d      	bls.n	800889c <__ieee754_powf+0x1f8>
 80087c0:	4baa      	ldr	r3, [pc, #680]	@ (8008a6c <__ieee754_powf+0x3c8>)
 80087c2:	4598      	cmp	r8, r3
 80087c4:	d808      	bhi.n	80087d8 <__ieee754_powf+0x134>
 80087c6:	2c00      	cmp	r4, #0
 80087c8:	da0b      	bge.n	80087e2 <__ieee754_powf+0x13e>
 80087ca:	2000      	movs	r0, #0
 80087cc:	ecbd 8b02 	vpop	{d8}
 80087d0:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80087d4:	f000 bac2 	b.w	8008d5c <__math_oflowf>
 80087d8:	4ba5      	ldr	r3, [pc, #660]	@ (8008a70 <__ieee754_powf+0x3cc>)
 80087da:	4598      	cmp	r8, r3
 80087dc:	d908      	bls.n	80087f0 <__ieee754_powf+0x14c>
 80087de:	2c00      	cmp	r4, #0
 80087e0:	dcf3      	bgt.n	80087ca <__ieee754_powf+0x126>
 80087e2:	2000      	movs	r0, #0
 80087e4:	ecbd 8b02 	vpop	{d8}
 80087e8:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80087ec:	f000 bab0 	b.w	8008d50 <__math_uflowf>
 80087f0:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 80087f4:	ee30 0a67 	vsub.f32	s0, s0, s15
 80087f8:	eddf 6a9e 	vldr	s13, [pc, #632]	@ 8008a74 <__ieee754_powf+0x3d0>
 80087fc:	eef5 7a00 	vmov.f32	s15, #80	@ 0x3e800000  0.250
 8008800:	eee0 6a67 	vfms.f32	s13, s0, s15
 8008804:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8008808:	eee6 7ac0 	vfms.f32	s15, s13, s0
 800880c:	ee20 7a00 	vmul.f32	s14, s0, s0
 8008810:	eddf 6a99 	vldr	s13, [pc, #612]	@ 8008a78 <__ieee754_powf+0x3d4>
 8008814:	ee27 7a27 	vmul.f32	s14, s14, s15
 8008818:	eddf 7a98 	vldr	s15, [pc, #608]	@ 8008a7c <__ieee754_powf+0x3d8>
 800881c:	ee67 7ac7 	vnmul.f32	s15, s15, s14
 8008820:	ed9f 7a97 	vldr	s14, [pc, #604]	@ 8008a80 <__ieee754_powf+0x3dc>
 8008824:	eee0 7a07 	vfma.f32	s15, s0, s14
 8008828:	eeb0 7a67 	vmov.f32	s14, s15
 800882c:	eea0 7a26 	vfma.f32	s14, s0, s13
 8008830:	ee17 3a10 	vmov	r3, s14
 8008834:	f36f 030b 	bfc	r3, #0, #12
 8008838:	ee07 3a10 	vmov	s14, r3
 800883c:	eeb0 6a47 	vmov.f32	s12, s14
 8008840:	eea0 6a66 	vfms.f32	s12, s0, s13
 8008844:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8008848:	3d01      	subs	r5, #1
 800884a:	4305      	orrs	r5, r0
 800884c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008850:	eebf 8a00 	vmov.f32	s16, #240	@ 0xbf800000 -1.0
 8008854:	f36f 040b 	bfc	r4, #0, #12
 8008858:	bf18      	it	ne
 800885a:	eeb0 8a66 	vmovne.f32	s16, s13
 800885e:	ee06 4a90 	vmov	s13, r4
 8008862:	ee67 0aa8 	vmul.f32	s1, s15, s17
 8008866:	ee38 6ae6 	vsub.f32	s12, s17, s13
 800886a:	ee67 7a26 	vmul.f32	s15, s14, s13
 800886e:	eee6 0a07 	vfma.f32	s1, s12, s14
 8008872:	ee30 7aa7 	vadd.f32	s14, s1, s15
 8008876:	ee17 1a10 	vmov	r1, s14
 800887a:	2900      	cmp	r1, #0
 800887c:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8008880:	f340 80dd 	ble.w	8008a3e <__ieee754_powf+0x39a>
 8008884:	f1b3 4f86 	cmp.w	r3, #1124073472	@ 0x43000000
 8008888:	f240 80ca 	bls.w	8008a20 <__ieee754_powf+0x37c>
 800888c:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8008890:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008894:	bf4c      	ite	mi
 8008896:	2001      	movmi	r0, #1
 8008898:	2000      	movpl	r0, #0
 800889a:	e797      	b.n	80087cc <__ieee754_powf+0x128>
 800889c:	f016 4fff 	tst.w	r6, #2139095040	@ 0x7f800000
 80088a0:	bf01      	itttt	eq
 80088a2:	eddf 7a78 	vldreq	s15, [pc, #480]	@ 8008a84 <__ieee754_powf+0x3e0>
 80088a6:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 80088aa:	f06f 0317 	mvneq.w	r3, #23
 80088ae:	ee17 7a90 	vmoveq	r7, s15
 80088b2:	ea4f 52e7 	mov.w	r2, r7, asr #23
 80088b6:	bf18      	it	ne
 80088b8:	2300      	movne	r3, #0
 80088ba:	3a7f      	subs	r2, #127	@ 0x7f
 80088bc:	441a      	add	r2, r3
 80088be:	4b72      	ldr	r3, [pc, #456]	@ (8008a88 <__ieee754_powf+0x3e4>)
 80088c0:	f3c7 0716 	ubfx	r7, r7, #0, #23
 80088c4:	429f      	cmp	r7, r3
 80088c6:	f047 517e 	orr.w	r1, r7, #1065353216	@ 0x3f800000
 80088ca:	dd06      	ble.n	80088da <__ieee754_powf+0x236>
 80088cc:	4b6f      	ldr	r3, [pc, #444]	@ (8008a8c <__ieee754_powf+0x3e8>)
 80088ce:	429f      	cmp	r7, r3
 80088d0:	f340 80a4 	ble.w	8008a1c <__ieee754_powf+0x378>
 80088d4:	3201      	adds	r2, #1
 80088d6:	f5a1 0100 	sub.w	r1, r1, #8388608	@ 0x800000
 80088da:	2600      	movs	r6, #0
 80088dc:	4b6c      	ldr	r3, [pc, #432]	@ (8008a90 <__ieee754_powf+0x3ec>)
 80088de:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 80088e2:	ee07 1a10 	vmov	s14, r1
 80088e6:	edd3 5a00 	vldr	s11, [r3]
 80088ea:	4b6a      	ldr	r3, [pc, #424]	@ (8008a94 <__ieee754_powf+0x3f0>)
 80088ec:	ee75 7a87 	vadd.f32	s15, s11, s14
 80088f0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80088f4:	eec6 4aa7 	vdiv.f32	s9, s13, s15
 80088f8:	1049      	asrs	r1, r1, #1
 80088fa:	f041 5100 	orr.w	r1, r1, #536870912	@ 0x20000000
 80088fe:	f501 2180 	add.w	r1, r1, #262144	@ 0x40000
 8008902:	eb01 5146 	add.w	r1, r1, r6, lsl #21
 8008906:	ee37 6a65 	vsub.f32	s12, s14, s11
 800890a:	ee07 1a90 	vmov	s15, r1
 800890e:	ee26 5a24 	vmul.f32	s10, s12, s9
 8008912:	ee77 5ae5 	vsub.f32	s11, s15, s11
 8008916:	ee15 7a10 	vmov	r7, s10
 800891a:	401f      	ands	r7, r3
 800891c:	ee06 7a90 	vmov	s13, r7
 8008920:	eea6 6ae7 	vfms.f32	s12, s13, s15
 8008924:	ee37 7a65 	vsub.f32	s14, s14, s11
 8008928:	ee65 7a05 	vmul.f32	s15, s10, s10
 800892c:	eea6 6ac7 	vfms.f32	s12, s13, s14
 8008930:	eddf 5a59 	vldr	s11, [pc, #356]	@ 8008a98 <__ieee754_powf+0x3f4>
 8008934:	ed9f 7a59 	vldr	s14, [pc, #356]	@ 8008a9c <__ieee754_powf+0x3f8>
 8008938:	eee7 5a87 	vfma.f32	s11, s15, s14
 800893c:	ed9f 7a58 	vldr	s14, [pc, #352]	@ 8008aa0 <__ieee754_powf+0x3fc>
 8008940:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8008944:	eddf 5a4b 	vldr	s11, [pc, #300]	@ 8008a74 <__ieee754_powf+0x3d0>
 8008948:	eee7 5a27 	vfma.f32	s11, s14, s15
 800894c:	ed9f 7a55 	vldr	s14, [pc, #340]	@ 8008aa4 <__ieee754_powf+0x400>
 8008950:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8008954:	eddf 5a54 	vldr	s11, [pc, #336]	@ 8008aa8 <__ieee754_powf+0x404>
 8008958:	ee26 6a24 	vmul.f32	s12, s12, s9
 800895c:	eee7 5a27 	vfma.f32	s11, s14, s15
 8008960:	ee35 7a26 	vadd.f32	s14, s10, s13
 8008964:	ee67 4aa7 	vmul.f32	s9, s15, s15
 8008968:	ee27 7a06 	vmul.f32	s14, s14, s12
 800896c:	eef0 7a08 	vmov.f32	s15, #8	@ 0x40400000  3.0
 8008970:	eea4 7aa5 	vfma.f32	s14, s9, s11
 8008974:	eef0 5a67 	vmov.f32	s11, s15
 8008978:	eee6 5aa6 	vfma.f32	s11, s13, s13
 800897c:	ee75 5a87 	vadd.f32	s11, s11, s14
 8008980:	ee15 1a90 	vmov	r1, s11
 8008984:	4019      	ands	r1, r3
 8008986:	ee05 1a90 	vmov	s11, r1
 800898a:	ee75 7ae7 	vsub.f32	s15, s11, s15
 800898e:	eee6 7ae6 	vfms.f32	s15, s13, s13
 8008992:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008996:	ee67 7a85 	vmul.f32	s15, s15, s10
 800899a:	eee6 7a25 	vfma.f32	s15, s12, s11
 800899e:	eeb0 6a67 	vmov.f32	s12, s15
 80089a2:	eea6 6aa5 	vfma.f32	s12, s13, s11
 80089a6:	ee16 1a10 	vmov	r1, s12
 80089aa:	4019      	ands	r1, r3
 80089ac:	ee06 1a10 	vmov	s12, r1
 80089b0:	eeb0 7a46 	vmov.f32	s14, s12
 80089b4:	eea6 7ae5 	vfms.f32	s14, s13, s11
 80089b8:	493c      	ldr	r1, [pc, #240]	@ (8008aac <__ieee754_powf+0x408>)
 80089ba:	eb01 0186 	add.w	r1, r1, r6, lsl #2
 80089be:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80089c2:	ed9f 7a3b 	vldr	s14, [pc, #236]	@ 8008ab0 <__ieee754_powf+0x40c>
 80089c6:	eddf 5a3b 	vldr	s11, [pc, #236]	@ 8008ab4 <__ieee754_powf+0x410>
 80089ca:	ee67 7a87 	vmul.f32	s15, s15, s14
 80089ce:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 8008ab8 <__ieee754_powf+0x414>
 80089d2:	eee6 7a07 	vfma.f32	s15, s12, s14
 80089d6:	ed91 7a00 	vldr	s14, [r1]
 80089da:	ee77 7a87 	vadd.f32	s15, s15, s14
 80089de:	ee07 2a10 	vmov	s14, r2
 80089e2:	4a36      	ldr	r2, [pc, #216]	@ (8008abc <__ieee754_powf+0x418>)
 80089e4:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80089e8:	eeb0 7a67 	vmov.f32	s14, s15
 80089ec:	eea6 7a25 	vfma.f32	s14, s12, s11
 80089f0:	eb02 0286 	add.w	r2, r2, r6, lsl #2
 80089f4:	ed92 5a00 	vldr	s10, [r2]
 80089f8:	ee37 7a05 	vadd.f32	s14, s14, s10
 80089fc:	ee37 7a26 	vadd.f32	s14, s14, s13
 8008a00:	ee17 2a10 	vmov	r2, s14
 8008a04:	401a      	ands	r2, r3
 8008a06:	ee07 2a10 	vmov	s14, r2
 8008a0a:	ee77 6a66 	vsub.f32	s13, s14, s13
 8008a0e:	ee76 6ac5 	vsub.f32	s13, s13, s10
 8008a12:	eee6 6a65 	vfms.f32	s13, s12, s11
 8008a16:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8008a1a:	e715      	b.n	8008848 <__ieee754_powf+0x1a4>
 8008a1c:	2601      	movs	r6, #1
 8008a1e:	e75d      	b.n	80088dc <__ieee754_powf+0x238>
 8008a20:	d152      	bne.n	8008ac8 <__ieee754_powf+0x424>
 8008a22:	eddf 6a27 	vldr	s13, [pc, #156]	@ 8008ac0 <__ieee754_powf+0x41c>
 8008a26:	ee37 7a67 	vsub.f32	s14, s14, s15
 8008a2a:	ee70 6aa6 	vadd.f32	s13, s1, s13
 8008a2e:	eef4 6ac7 	vcmpe.f32	s13, s14
 8008a32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008a36:	f73f af29 	bgt.w	800888c <__ieee754_powf+0x1e8>
 8008a3a:	2386      	movs	r3, #134	@ 0x86
 8008a3c:	e048      	b.n	8008ad0 <__ieee754_powf+0x42c>
 8008a3e:	4a21      	ldr	r2, [pc, #132]	@ (8008ac4 <__ieee754_powf+0x420>)
 8008a40:	4293      	cmp	r3, r2
 8008a42:	d907      	bls.n	8008a54 <__ieee754_powf+0x3b0>
 8008a44:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8008a48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008a4c:	bf4c      	ite	mi
 8008a4e:	2001      	movmi	r0, #1
 8008a50:	2000      	movpl	r0, #0
 8008a52:	e6c7      	b.n	80087e4 <__ieee754_powf+0x140>
 8008a54:	d138      	bne.n	8008ac8 <__ieee754_powf+0x424>
 8008a56:	ee37 7a67 	vsub.f32	s14, s14, s15
 8008a5a:	eeb4 7ae0 	vcmpe.f32	s14, s1
 8008a5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008a62:	dbea      	blt.n	8008a3a <__ieee754_powf+0x396>
 8008a64:	e7ee      	b.n	8008a44 <__ieee754_powf+0x3a0>
 8008a66:	bf00      	nop
 8008a68:	00000000 	.word	0x00000000
 8008a6c:	3f7ffff3 	.word	0x3f7ffff3
 8008a70:	3f800007 	.word	0x3f800007
 8008a74:	3eaaaaab 	.word	0x3eaaaaab
 8008a78:	3fb8aa00 	.word	0x3fb8aa00
 8008a7c:	3fb8aa3b 	.word	0x3fb8aa3b
 8008a80:	36eca570 	.word	0x36eca570
 8008a84:	4b800000 	.word	0x4b800000
 8008a88:	001cc471 	.word	0x001cc471
 8008a8c:	005db3d6 	.word	0x005db3d6
 8008a90:	08008db4 	.word	0x08008db4
 8008a94:	fffff000 	.word	0xfffff000
 8008a98:	3e6c3255 	.word	0x3e6c3255
 8008a9c:	3e53f142 	.word	0x3e53f142
 8008aa0:	3e8ba305 	.word	0x3e8ba305
 8008aa4:	3edb6db7 	.word	0x3edb6db7
 8008aa8:	3f19999a 	.word	0x3f19999a
 8008aac:	08008da4 	.word	0x08008da4
 8008ab0:	3f76384f 	.word	0x3f76384f
 8008ab4:	3f763800 	.word	0x3f763800
 8008ab8:	369dc3a0 	.word	0x369dc3a0
 8008abc:	08008dac 	.word	0x08008dac
 8008ac0:	3338aa3c 	.word	0x3338aa3c
 8008ac4:	43160000 	.word	0x43160000
 8008ac8:	f1b3 5f7c 	cmp.w	r3, #1056964608	@ 0x3f000000
 8008acc:	d96f      	bls.n	8008bae <__ieee754_powf+0x50a>
 8008ace:	15db      	asrs	r3, r3, #23
 8008ad0:	3b7e      	subs	r3, #126	@ 0x7e
 8008ad2:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 8008ad6:	4118      	asrs	r0, r3
 8008ad8:	4408      	add	r0, r1
 8008ada:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8008ade:	4a4e      	ldr	r2, [pc, #312]	@ (8008c18 <__ieee754_powf+0x574>)
 8008ae0:	3b7f      	subs	r3, #127	@ 0x7f
 8008ae2:	411a      	asrs	r2, r3
 8008ae4:	4002      	ands	r2, r0
 8008ae6:	ee07 2a10 	vmov	s14, r2
 8008aea:	f3c0 0016 	ubfx	r0, r0, #0, #23
 8008aee:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8008af2:	f1c3 0317 	rsb	r3, r3, #23
 8008af6:	4118      	asrs	r0, r3
 8008af8:	2900      	cmp	r1, #0
 8008afa:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008afe:	bfb8      	it	lt
 8008b00:	4240      	neglt	r0, r0
 8008b02:	ee77 6aa0 	vadd.f32	s13, s15, s1
 8008b06:	ed9f 7a45 	vldr	s14, [pc, #276]	@ 8008c1c <__ieee754_powf+0x578>
 8008b0a:	ed9f 6a45 	vldr	s12, [pc, #276]	@ 8008c20 <__ieee754_powf+0x57c>
 8008b0e:	ee16 3a90 	vmov	r3, s13
 8008b12:	f36f 030b 	bfc	r3, #0, #12
 8008b16:	ee06 3a90 	vmov	s13, r3
 8008b1a:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8008b1e:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8008b22:	ee70 0ae7 	vsub.f32	s1, s1, s15
 8008b26:	eddf 7a3f 	vldr	s15, [pc, #252]	@ 8008c24 <__ieee754_powf+0x580>
 8008b2a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008b2e:	eee0 7a87 	vfma.f32	s15, s1, s14
 8008b32:	eeb0 7a67 	vmov.f32	s14, s15
 8008b36:	eea6 7a86 	vfma.f32	s14, s13, s12
 8008b3a:	eef0 5a47 	vmov.f32	s11, s14
 8008b3e:	eee6 5ac6 	vfms.f32	s11, s13, s12
 8008b42:	ee67 6a07 	vmul.f32	s13, s14, s14
 8008b46:	ee77 7ae5 	vsub.f32	s15, s15, s11
 8008b4a:	ed9f 6a37 	vldr	s12, [pc, #220]	@ 8008c28 <__ieee754_powf+0x584>
 8008b4e:	eddf 5a37 	vldr	s11, [pc, #220]	@ 8008c2c <__ieee754_powf+0x588>
 8008b52:	eea6 6aa5 	vfma.f32	s12, s13, s11
 8008b56:	eddf 5a36 	vldr	s11, [pc, #216]	@ 8008c30 <__ieee754_powf+0x58c>
 8008b5a:	eee6 5a26 	vfma.f32	s11, s12, s13
 8008b5e:	ed9f 6a35 	vldr	s12, [pc, #212]	@ 8008c34 <__ieee754_powf+0x590>
 8008b62:	eea5 6aa6 	vfma.f32	s12, s11, s13
 8008b66:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8008c38 <__ieee754_powf+0x594>
 8008b6a:	eee6 5a26 	vfma.f32	s11, s12, s13
 8008b6e:	eeb0 6a47 	vmov.f32	s12, s14
 8008b72:	eea5 6ae6 	vfms.f32	s12, s11, s13
 8008b76:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8008b7a:	ee67 5a06 	vmul.f32	s11, s14, s12
 8008b7e:	ee36 6a66 	vsub.f32	s12, s12, s13
 8008b82:	eee7 7a27 	vfma.f32	s15, s14, s15
 8008b86:	eec5 6a86 	vdiv.f32	s13, s11, s12
 8008b8a:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8008b8e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008b92:	ee30 0a67 	vsub.f32	s0, s0, s15
 8008b96:	ee10 3a10 	vmov	r3, s0
 8008b9a:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 8008b9e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8008ba2:	da06      	bge.n	8008bb2 <__ieee754_powf+0x50e>
 8008ba4:	f000 f854 	bl	8008c50 <scalbnf>
 8008ba8:	ee20 0a08 	vmul.f32	s0, s0, s16
 8008bac:	e592      	b.n	80086d4 <__ieee754_powf+0x30>
 8008bae:	2000      	movs	r0, #0
 8008bb0:	e7a7      	b.n	8008b02 <__ieee754_powf+0x45e>
 8008bb2:	ee00 3a10 	vmov	s0, r3
 8008bb6:	e7f7      	b.n	8008ba8 <__ieee754_powf+0x504>
 8008bb8:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8008bbc:	e58a      	b.n	80086d4 <__ieee754_powf+0x30>
 8008bbe:	ed9f 0a1f 	vldr	s0, [pc, #124]	@ 8008c3c <__ieee754_powf+0x598>
 8008bc2:	e587      	b.n	80086d4 <__ieee754_powf+0x30>
 8008bc4:	eeb0 0a48 	vmov.f32	s0, s16
 8008bc8:	e584      	b.n	80086d4 <__ieee754_powf+0x30>
 8008bca:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 8008bce:	f43f adbb 	beq.w	8008748 <__ieee754_powf+0xa4>
 8008bd2:	2502      	movs	r5, #2
 8008bd4:	eeb0 0a48 	vmov.f32	s0, s16
 8008bd8:	f000 f832 	bl	8008c40 <fabsf>
 8008bdc:	f026 4340 	bic.w	r3, r6, #3221225472	@ 0xc0000000
 8008be0:	f1b3 5f7e 	cmp.w	r3, #1065353216	@ 0x3f800000
 8008be4:	4647      	mov	r7, r8
 8008be6:	d003      	beq.n	8008bf0 <__ieee754_powf+0x54c>
 8008be8:	f1b8 0f00 	cmp.w	r8, #0
 8008bec:	f47f addb 	bne.w	80087a6 <__ieee754_powf+0x102>
 8008bf0:	2c00      	cmp	r4, #0
 8008bf2:	bfbc      	itt	lt
 8008bf4:	eef7 7a00 	vmovlt.f32	s15, #112	@ 0x3f800000  1.0
 8008bf8:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 8008bfc:	2e00      	cmp	r6, #0
 8008bfe:	f6bf ad69 	bge.w	80086d4 <__ieee754_powf+0x30>
 8008c02:	f1a8 587e 	sub.w	r8, r8, #1065353216	@ 0x3f800000
 8008c06:	ea58 0805 	orrs.w	r8, r8, r5
 8008c0a:	f47f adc7 	bne.w	800879c <__ieee754_powf+0xf8>
 8008c0e:	ee70 7a40 	vsub.f32	s15, s0, s0
 8008c12:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8008c16:	e55d      	b.n	80086d4 <__ieee754_powf+0x30>
 8008c18:	ff800000 	.word	0xff800000
 8008c1c:	3f317218 	.word	0x3f317218
 8008c20:	3f317200 	.word	0x3f317200
 8008c24:	35bfbe8c 	.word	0x35bfbe8c
 8008c28:	b5ddea0e 	.word	0xb5ddea0e
 8008c2c:	3331bb4c 	.word	0x3331bb4c
 8008c30:	388ab355 	.word	0x388ab355
 8008c34:	bb360b61 	.word	0xbb360b61
 8008c38:	3e2aaaab 	.word	0x3e2aaaab
 8008c3c:	00000000 	.word	0x00000000

08008c40 <fabsf>:
 8008c40:	ee10 3a10 	vmov	r3, s0
 8008c44:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008c48:	ee00 3a10 	vmov	s0, r3
 8008c4c:	4770      	bx	lr
	...

08008c50 <scalbnf>:
 8008c50:	ee10 3a10 	vmov	r3, s0
 8008c54:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 8008c58:	d02b      	beq.n	8008cb2 <scalbnf+0x62>
 8008c5a:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 8008c5e:	d302      	bcc.n	8008c66 <scalbnf+0x16>
 8008c60:	ee30 0a00 	vadd.f32	s0, s0, s0
 8008c64:	4770      	bx	lr
 8008c66:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 8008c6a:	d123      	bne.n	8008cb4 <scalbnf+0x64>
 8008c6c:	4b24      	ldr	r3, [pc, #144]	@ (8008d00 <scalbnf+0xb0>)
 8008c6e:	eddf 7a25 	vldr	s15, [pc, #148]	@ 8008d04 <scalbnf+0xb4>
 8008c72:	4298      	cmp	r0, r3
 8008c74:	ee20 0a27 	vmul.f32	s0, s0, s15
 8008c78:	db17      	blt.n	8008caa <scalbnf+0x5a>
 8008c7a:	ee10 3a10 	vmov	r3, s0
 8008c7e:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8008c82:	3a19      	subs	r2, #25
 8008c84:	f24c 3150 	movw	r1, #50000	@ 0xc350
 8008c88:	4288      	cmp	r0, r1
 8008c8a:	dd15      	ble.n	8008cb8 <scalbnf+0x68>
 8008c8c:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 8008d08 <scalbnf+0xb8>
 8008c90:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 8008d0c <scalbnf+0xbc>
 8008c94:	ee10 3a10 	vmov	r3, s0
 8008c98:	eeb0 7a67 	vmov.f32	s14, s15
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	bfb8      	it	lt
 8008ca0:	eef0 7a66 	vmovlt.f32	s15, s13
 8008ca4:	ee27 0a87 	vmul.f32	s0, s15, s14
 8008ca8:	4770      	bx	lr
 8008caa:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8008d10 <scalbnf+0xc0>
 8008cae:	ee27 0a80 	vmul.f32	s0, s15, s0
 8008cb2:	4770      	bx	lr
 8008cb4:	0dd2      	lsrs	r2, r2, #23
 8008cb6:	e7e5      	b.n	8008c84 <scalbnf+0x34>
 8008cb8:	4410      	add	r0, r2
 8008cba:	28fe      	cmp	r0, #254	@ 0xfe
 8008cbc:	dce6      	bgt.n	8008c8c <scalbnf+0x3c>
 8008cbe:	2800      	cmp	r0, #0
 8008cc0:	dd06      	ble.n	8008cd0 <scalbnf+0x80>
 8008cc2:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8008cc6:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8008cca:	ee00 3a10 	vmov	s0, r3
 8008cce:	4770      	bx	lr
 8008cd0:	f110 0f16 	cmn.w	r0, #22
 8008cd4:	da09      	bge.n	8008cea <scalbnf+0x9a>
 8008cd6:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 8008d10 <scalbnf+0xc0>
 8008cda:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 8008d14 <scalbnf+0xc4>
 8008cde:	ee10 3a10 	vmov	r3, s0
 8008ce2:	eeb0 7a67 	vmov.f32	s14, s15
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	e7d9      	b.n	8008c9e <scalbnf+0x4e>
 8008cea:	3019      	adds	r0, #25
 8008cec:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8008cf0:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8008cf4:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 8008d18 <scalbnf+0xc8>
 8008cf8:	ee07 3a90 	vmov	s15, r3
 8008cfc:	e7d7      	b.n	8008cae <scalbnf+0x5e>
 8008cfe:	bf00      	nop
 8008d00:	ffff3cb0 	.word	0xffff3cb0
 8008d04:	4c000000 	.word	0x4c000000
 8008d08:	7149f2ca 	.word	0x7149f2ca
 8008d0c:	f149f2ca 	.word	0xf149f2ca
 8008d10:	0da24260 	.word	0x0da24260
 8008d14:	8da24260 	.word	0x8da24260
 8008d18:	33000000 	.word	0x33000000

08008d1c <with_errnof>:
 8008d1c:	b510      	push	{r4, lr}
 8008d1e:	ed2d 8b02 	vpush	{d8}
 8008d22:	eeb0 8a40 	vmov.f32	s16, s0
 8008d26:	4604      	mov	r4, r0
 8008d28:	f7ff fb0a 	bl	8008340 <__errno>
 8008d2c:	eeb0 0a48 	vmov.f32	s0, s16
 8008d30:	ecbd 8b02 	vpop	{d8}
 8008d34:	6004      	str	r4, [r0, #0]
 8008d36:	bd10      	pop	{r4, pc}

08008d38 <xflowf>:
 8008d38:	b130      	cbz	r0, 8008d48 <xflowf+0x10>
 8008d3a:	eef1 7a40 	vneg.f32	s15, s0
 8008d3e:	ee27 0a80 	vmul.f32	s0, s15, s0
 8008d42:	2022      	movs	r0, #34	@ 0x22
 8008d44:	f7ff bfea 	b.w	8008d1c <with_errnof>
 8008d48:	eef0 7a40 	vmov.f32	s15, s0
 8008d4c:	e7f7      	b.n	8008d3e <xflowf+0x6>
	...

08008d50 <__math_uflowf>:
 8008d50:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8008d58 <__math_uflowf+0x8>
 8008d54:	f7ff bff0 	b.w	8008d38 <xflowf>
 8008d58:	10000000 	.word	0x10000000

08008d5c <__math_oflowf>:
 8008d5c:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8008d64 <__math_oflowf+0x8>
 8008d60:	f7ff bfea 	b.w	8008d38 <xflowf>
 8008d64:	70000000 	.word	0x70000000

08008d68 <__ieee754_sqrtf>:
 8008d68:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8008d6c:	4770      	bx	lr
	...

08008d70 <_init>:
 8008d70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d72:	bf00      	nop
 8008d74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008d76:	bc08      	pop	{r3}
 8008d78:	469e      	mov	lr, r3
 8008d7a:	4770      	bx	lr

08008d7c <_fini>:
 8008d7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d7e:	bf00      	nop
 8008d80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008d82:	bc08      	pop	{r3}
 8008d84:	469e      	mov	lr, r3
 8008d86:	4770      	bx	lr
