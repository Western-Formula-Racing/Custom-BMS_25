
wfr25_torch_bms.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008828  080001c8  080001c8  000011c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000034  080089f0  080089f0  000099f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008a24  08008a24  0000a060  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08008a24  08008a24  00009a24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008a2c  08008a2c  0000a060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008a2c  08008a2c  00009a2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008a30  08008a30  00009a30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08008a34  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004d8  20000060  08008a94  0000a060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000538  08008a94  0000a538  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a060  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013835  00000000  00000000  0000a090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002f41  00000000  00000000  0001d8c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001118  00000000  00000000  00020808  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d24  00000000  00000000  00021920  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023eb7  00000000  00000000  00022644  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015a61  00000000  00000000  000464fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e083a  00000000  00000000  0005bf5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0013c796  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004c3c  00000000  00000000  0013c7dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  00141418  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	@ (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	@ (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	20000060 	.word	0x20000060
 80001e4:	00000000 	.word	0x00000000
 80001e8:	080089d8 	.word	0x080089d8

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	@ (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	@ (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	@ (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000064 	.word	0x20000064
 8000204:	080089d8 	.word	0x080089d8

08000208 <__aeabi_drsub>:
 8000208:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800020c:	e002      	b.n	8000214 <__adddf3>
 800020e:	bf00      	nop

08000210 <__aeabi_dsub>:
 8000210:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000214 <__adddf3>:
 8000214:	b530      	push	{r4, r5, lr}
 8000216:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800021a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800021e:	ea94 0f05 	teq	r4, r5
 8000222:	bf08      	it	eq
 8000224:	ea90 0f02 	teqeq	r0, r2
 8000228:	bf1f      	itttt	ne
 800022a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800022e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000232:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000236:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800023a:	f000 80e2 	beq.w	8000402 <__adddf3+0x1ee>
 800023e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000242:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000246:	bfb8      	it	lt
 8000248:	426d      	neglt	r5, r5
 800024a:	dd0c      	ble.n	8000266 <__adddf3+0x52>
 800024c:	442c      	add	r4, r5
 800024e:	ea80 0202 	eor.w	r2, r0, r2
 8000252:	ea81 0303 	eor.w	r3, r1, r3
 8000256:	ea82 0000 	eor.w	r0, r2, r0
 800025a:	ea83 0101 	eor.w	r1, r3, r1
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	2d36      	cmp	r5, #54	@ 0x36
 8000268:	bf88      	it	hi
 800026a:	bd30      	pophi	{r4, r5, pc}
 800026c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000270:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000274:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000278:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800027c:	d002      	beq.n	8000284 <__adddf3+0x70>
 800027e:	4240      	negs	r0, r0
 8000280:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000284:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000288:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800028c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000290:	d002      	beq.n	8000298 <__adddf3+0x84>
 8000292:	4252      	negs	r2, r2
 8000294:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000298:	ea94 0f05 	teq	r4, r5
 800029c:	f000 80a7 	beq.w	80003ee <__adddf3+0x1da>
 80002a0:	f1a4 0401 	sub.w	r4, r4, #1
 80002a4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a8:	db0d      	blt.n	80002c6 <__adddf3+0xb2>
 80002aa:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ae:	fa22 f205 	lsr.w	r2, r2, r5
 80002b2:	1880      	adds	r0, r0, r2
 80002b4:	f141 0100 	adc.w	r1, r1, #0
 80002b8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002bc:	1880      	adds	r0, r0, r2
 80002be:	fa43 f305 	asr.w	r3, r3, r5
 80002c2:	4159      	adcs	r1, r3
 80002c4:	e00e      	b.n	80002e4 <__adddf3+0xd0>
 80002c6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ca:	f10e 0e20 	add.w	lr, lr, #32
 80002ce:	2a01      	cmp	r2, #1
 80002d0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002d4:	bf28      	it	cs
 80002d6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002da:	fa43 f305 	asr.w	r3, r3, r5
 80002de:	18c0      	adds	r0, r0, r3
 80002e0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002e4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002e8:	d507      	bpl.n	80002fa <__adddf3+0xe6>
 80002ea:	f04f 0e00 	mov.w	lr, #0
 80002ee:	f1dc 0c00 	rsbs	ip, ip, #0
 80002f2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002f6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002fa:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002fe:	d31b      	bcc.n	8000338 <__adddf3+0x124>
 8000300:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000304:	d30c      	bcc.n	8000320 <__adddf3+0x10c>
 8000306:	0849      	lsrs	r1, r1, #1
 8000308:	ea5f 0030 	movs.w	r0, r0, rrx
 800030c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000310:	f104 0401 	add.w	r4, r4, #1
 8000314:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000318:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800031c:	f080 809a 	bcs.w	8000454 <__adddf3+0x240>
 8000320:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	ea41 0105 	orr.w	r1, r1, r5
 8000336:	bd30      	pop	{r4, r5, pc}
 8000338:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800033c:	4140      	adcs	r0, r0
 800033e:	eb41 0101 	adc.w	r1, r1, r1
 8000342:	3c01      	subs	r4, #1
 8000344:	bf28      	it	cs
 8000346:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800034a:	d2e9      	bcs.n	8000320 <__adddf3+0x10c>
 800034c:	f091 0f00 	teq	r1, #0
 8000350:	bf04      	itt	eq
 8000352:	4601      	moveq	r1, r0
 8000354:	2000      	moveq	r0, #0
 8000356:	fab1 f381 	clz	r3, r1
 800035a:	bf08      	it	eq
 800035c:	3320      	addeq	r3, #32
 800035e:	f1a3 030b 	sub.w	r3, r3, #11
 8000362:	f1b3 0220 	subs.w	r2, r3, #32
 8000366:	da0c      	bge.n	8000382 <__adddf3+0x16e>
 8000368:	320c      	adds	r2, #12
 800036a:	dd08      	ble.n	800037e <__adddf3+0x16a>
 800036c:	f102 0c14 	add.w	ip, r2, #20
 8000370:	f1c2 020c 	rsb	r2, r2, #12
 8000374:	fa01 f00c 	lsl.w	r0, r1, ip
 8000378:	fa21 f102 	lsr.w	r1, r1, r2
 800037c:	e00c      	b.n	8000398 <__adddf3+0x184>
 800037e:	f102 0214 	add.w	r2, r2, #20
 8000382:	bfd8      	it	le
 8000384:	f1c2 0c20 	rsble	ip, r2, #32
 8000388:	fa01 f102 	lsl.w	r1, r1, r2
 800038c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000390:	bfdc      	itt	le
 8000392:	ea41 010c 	orrle.w	r1, r1, ip
 8000396:	4090      	lslle	r0, r2
 8000398:	1ae4      	subs	r4, r4, r3
 800039a:	bfa2      	ittt	ge
 800039c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003a0:	4329      	orrge	r1, r5
 80003a2:	bd30      	popge	{r4, r5, pc}
 80003a4:	ea6f 0404 	mvn.w	r4, r4
 80003a8:	3c1f      	subs	r4, #31
 80003aa:	da1c      	bge.n	80003e6 <__adddf3+0x1d2>
 80003ac:	340c      	adds	r4, #12
 80003ae:	dc0e      	bgt.n	80003ce <__adddf3+0x1ba>
 80003b0:	f104 0414 	add.w	r4, r4, #20
 80003b4:	f1c4 0220 	rsb	r2, r4, #32
 80003b8:	fa20 f004 	lsr.w	r0, r0, r4
 80003bc:	fa01 f302 	lsl.w	r3, r1, r2
 80003c0:	ea40 0003 	orr.w	r0, r0, r3
 80003c4:	fa21 f304 	lsr.w	r3, r1, r4
 80003c8:	ea45 0103 	orr.w	r1, r5, r3
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	f1c4 040c 	rsb	r4, r4, #12
 80003d2:	f1c4 0220 	rsb	r2, r4, #32
 80003d6:	fa20 f002 	lsr.w	r0, r0, r2
 80003da:	fa01 f304 	lsl.w	r3, r1, r4
 80003de:	ea40 0003 	orr.w	r0, r0, r3
 80003e2:	4629      	mov	r1, r5
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ea:	4629      	mov	r1, r5
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f094 0f00 	teq	r4, #0
 80003f2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003f6:	bf06      	itte	eq
 80003f8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003fc:	3401      	addeq	r4, #1
 80003fe:	3d01      	subne	r5, #1
 8000400:	e74e      	b.n	80002a0 <__adddf3+0x8c>
 8000402:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000406:	bf18      	it	ne
 8000408:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800040c:	d029      	beq.n	8000462 <__adddf3+0x24e>
 800040e:	ea94 0f05 	teq	r4, r5
 8000412:	bf08      	it	eq
 8000414:	ea90 0f02 	teqeq	r0, r2
 8000418:	d005      	beq.n	8000426 <__adddf3+0x212>
 800041a:	ea54 0c00 	orrs.w	ip, r4, r0
 800041e:	bf04      	itt	eq
 8000420:	4619      	moveq	r1, r3
 8000422:	4610      	moveq	r0, r2
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	ea91 0f03 	teq	r1, r3
 800042a:	bf1e      	ittt	ne
 800042c:	2100      	movne	r1, #0
 800042e:	2000      	movne	r0, #0
 8000430:	bd30      	popne	{r4, r5, pc}
 8000432:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000436:	d105      	bne.n	8000444 <__adddf3+0x230>
 8000438:	0040      	lsls	r0, r0, #1
 800043a:	4149      	adcs	r1, r1
 800043c:	bf28      	it	cs
 800043e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000442:	bd30      	pop	{r4, r5, pc}
 8000444:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000448:	bf3c      	itt	cc
 800044a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800044e:	bd30      	popcc	{r4, r5, pc}
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000454:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000458:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800045c:	f04f 0000 	mov.w	r0, #0
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000466:	bf1a      	itte	ne
 8000468:	4619      	movne	r1, r3
 800046a:	4610      	movne	r0, r2
 800046c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000470:	bf1c      	itt	ne
 8000472:	460b      	movne	r3, r1
 8000474:	4602      	movne	r2, r0
 8000476:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800047a:	bf06      	itte	eq
 800047c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000480:	ea91 0f03 	teqeq	r1, r3
 8000484:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	bf00      	nop

0800048c <__aeabi_ui2d>:
 800048c:	f090 0f00 	teq	r0, #0
 8000490:	bf04      	itt	eq
 8000492:	2100      	moveq	r1, #0
 8000494:	4770      	bxeq	lr
 8000496:	b530      	push	{r4, r5, lr}
 8000498:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800049c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004a0:	f04f 0500 	mov.w	r5, #0
 80004a4:	f04f 0100 	mov.w	r1, #0
 80004a8:	e750      	b.n	800034c <__adddf3+0x138>
 80004aa:	bf00      	nop

080004ac <__aeabi_i2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004c0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004c4:	bf48      	it	mi
 80004c6:	4240      	negmi	r0, r0
 80004c8:	f04f 0100 	mov.w	r1, #0
 80004cc:	e73e      	b.n	800034c <__adddf3+0x138>
 80004ce:	bf00      	nop

080004d0 <__aeabi_f2d>:
 80004d0:	0042      	lsls	r2, r0, #1
 80004d2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004d6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004da:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004de:	bf1f      	itttt	ne
 80004e0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004e4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004e8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004ec:	4770      	bxne	lr
 80004ee:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004f2:	bf08      	it	eq
 80004f4:	4770      	bxeq	lr
 80004f6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004fa:	bf04      	itt	eq
 80004fc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000500:	4770      	bxeq	lr
 8000502:	b530      	push	{r4, r5, lr}
 8000504:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000510:	e71c      	b.n	800034c <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_ul2d>:
 8000514:	ea50 0201 	orrs.w	r2, r0, r1
 8000518:	bf08      	it	eq
 800051a:	4770      	bxeq	lr
 800051c:	b530      	push	{r4, r5, lr}
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	e00a      	b.n	800053a <__aeabi_l2d+0x16>

08000524 <__aeabi_l2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000532:	d502      	bpl.n	800053a <__aeabi_l2d+0x16>
 8000534:	4240      	negs	r0, r0
 8000536:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800053a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800053e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000542:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000546:	f43f aed8 	beq.w	80002fa <__adddf3+0xe6>
 800054a:	f04f 0203 	mov.w	r2, #3
 800054e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000552:	bf18      	it	ne
 8000554:	3203      	addne	r2, #3
 8000556:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800055a:	bf18      	it	ne
 800055c:	3203      	addne	r2, #3
 800055e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000562:	f1c2 0320 	rsb	r3, r2, #32
 8000566:	fa00 fc03 	lsl.w	ip, r0, r3
 800056a:	fa20 f002 	lsr.w	r0, r0, r2
 800056e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000572:	ea40 000e 	orr.w	r0, r0, lr
 8000576:	fa21 f102 	lsr.w	r1, r1, r2
 800057a:	4414      	add	r4, r2
 800057c:	e6bd      	b.n	80002fa <__adddf3+0xe6>
 800057e:	bf00      	nop

08000580 <__aeabi_dmul>:
 8000580:	b570      	push	{r4, r5, r6, lr}
 8000582:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000586:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800058a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800058e:	bf1d      	ittte	ne
 8000590:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000594:	ea94 0f0c 	teqne	r4, ip
 8000598:	ea95 0f0c 	teqne	r5, ip
 800059c:	f000 f8de 	bleq	800075c <__aeabi_dmul+0x1dc>
 80005a0:	442c      	add	r4, r5
 80005a2:	ea81 0603 	eor.w	r6, r1, r3
 80005a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005b2:	bf18      	it	ne
 80005b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005bc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005c0:	d038      	beq.n	8000634 <__aeabi_dmul+0xb4>
 80005c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ce:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005d6:	f04f 0600 	mov.w	r6, #0
 80005da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005de:	f09c 0f00 	teq	ip, #0
 80005e2:	bf18      	it	ne
 80005e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005e8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005ec:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005f0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005f4:	d204      	bcs.n	8000600 <__aeabi_dmul+0x80>
 80005f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005fa:	416d      	adcs	r5, r5
 80005fc:	eb46 0606 	adc.w	r6, r6, r6
 8000600:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000604:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000608:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800060c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000610:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000614:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000618:	bf88      	it	hi
 800061a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800061e:	d81e      	bhi.n	800065e <__aeabi_dmul+0xde>
 8000620:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000624:	bf08      	it	eq
 8000626:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800062a:	f150 0000 	adcs.w	r0, r0, #0
 800062e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000632:	bd70      	pop	{r4, r5, r6, pc}
 8000634:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000638:	ea46 0101 	orr.w	r1, r6, r1
 800063c:	ea40 0002 	orr.w	r0, r0, r2
 8000640:	ea81 0103 	eor.w	r1, r1, r3
 8000644:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000648:	bfc2      	ittt	gt
 800064a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800064e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000652:	bd70      	popgt	{r4, r5, r6, pc}
 8000654:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000658:	f04f 0e00 	mov.w	lr, #0
 800065c:	3c01      	subs	r4, #1
 800065e:	f300 80ab 	bgt.w	80007b8 <__aeabi_dmul+0x238>
 8000662:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000666:	bfde      	ittt	le
 8000668:	2000      	movle	r0, #0
 800066a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800066e:	bd70      	pople	{r4, r5, r6, pc}
 8000670:	f1c4 0400 	rsb	r4, r4, #0
 8000674:	3c20      	subs	r4, #32
 8000676:	da35      	bge.n	80006e4 <__aeabi_dmul+0x164>
 8000678:	340c      	adds	r4, #12
 800067a:	dc1b      	bgt.n	80006b4 <__aeabi_dmul+0x134>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f305 	lsl.w	r3, r0, r5
 8000688:	fa20 f004 	lsr.w	r0, r0, r4
 800068c:	fa01 f205 	lsl.w	r2, r1, r5
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000698:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800069c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a0:	fa21 f604 	lsr.w	r6, r1, r4
 80006a4:	eb42 0106 	adc.w	r1, r2, r6
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 040c 	rsb	r4, r4, #12
 80006b8:	f1c4 0520 	rsb	r5, r4, #32
 80006bc:	fa00 f304 	lsl.w	r3, r0, r4
 80006c0:	fa20 f005 	lsr.w	r0, r0, r5
 80006c4:	fa01 f204 	lsl.w	r2, r1, r4
 80006c8:	ea40 0002 	orr.w	r0, r0, r2
 80006cc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d4:	f141 0100 	adc.w	r1, r1, #0
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 0520 	rsb	r5, r4, #32
 80006e8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80006f0:	fa20 f304 	lsr.w	r3, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea43 0302 	orr.w	r3, r3, r2
 80006fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000704:	fa21 f204 	lsr.w	r2, r1, r4
 8000708:	ea20 0002 	bic.w	r0, r0, r2
 800070c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f094 0f00 	teq	r4, #0
 8000720:	d10f      	bne.n	8000742 <__aeabi_dmul+0x1c2>
 8000722:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000726:	0040      	lsls	r0, r0, #1
 8000728:	eb41 0101 	adc.w	r1, r1, r1
 800072c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000730:	bf08      	it	eq
 8000732:	3c01      	subeq	r4, #1
 8000734:	d0f7      	beq.n	8000726 <__aeabi_dmul+0x1a6>
 8000736:	ea41 0106 	orr.w	r1, r1, r6
 800073a:	f095 0f00 	teq	r5, #0
 800073e:	bf18      	it	ne
 8000740:	4770      	bxne	lr
 8000742:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000746:	0052      	lsls	r2, r2, #1
 8000748:	eb43 0303 	adc.w	r3, r3, r3
 800074c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000750:	bf08      	it	eq
 8000752:	3d01      	subeq	r5, #1
 8000754:	d0f7      	beq.n	8000746 <__aeabi_dmul+0x1c6>
 8000756:	ea43 0306 	orr.w	r3, r3, r6
 800075a:	4770      	bx	lr
 800075c:	ea94 0f0c 	teq	r4, ip
 8000760:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000764:	bf18      	it	ne
 8000766:	ea95 0f0c 	teqne	r5, ip
 800076a:	d00c      	beq.n	8000786 <__aeabi_dmul+0x206>
 800076c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000770:	bf18      	it	ne
 8000772:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000776:	d1d1      	bne.n	800071c <__aeabi_dmul+0x19c>
 8000778:	ea81 0103 	eor.w	r1, r1, r3
 800077c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000780:	f04f 0000 	mov.w	r0, #0
 8000784:	bd70      	pop	{r4, r5, r6, pc}
 8000786:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800078a:	bf06      	itte	eq
 800078c:	4610      	moveq	r0, r2
 800078e:	4619      	moveq	r1, r3
 8000790:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000794:	d019      	beq.n	80007ca <__aeabi_dmul+0x24a>
 8000796:	ea94 0f0c 	teq	r4, ip
 800079a:	d102      	bne.n	80007a2 <__aeabi_dmul+0x222>
 800079c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007a0:	d113      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007a2:	ea95 0f0c 	teq	r5, ip
 80007a6:	d105      	bne.n	80007b4 <__aeabi_dmul+0x234>
 80007a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007ac:	bf1c      	itt	ne
 80007ae:	4610      	movne	r0, r2
 80007b0:	4619      	movne	r1, r3
 80007b2:	d10a      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007b4:	ea81 0103 	eor.w	r1, r1, r3
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007c0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007c4:	f04f 0000 	mov.w	r0, #0
 80007c8:	bd70      	pop	{r4, r5, r6, pc}
 80007ca:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007ce:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007d2:	bd70      	pop	{r4, r5, r6, pc}

080007d4 <__aeabi_ddiv>:
 80007d4:	b570      	push	{r4, r5, r6, lr}
 80007d6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007da:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007de:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007e2:	bf1d      	ittte	ne
 80007e4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007e8:	ea94 0f0c 	teqne	r4, ip
 80007ec:	ea95 0f0c 	teqne	r5, ip
 80007f0:	f000 f8a7 	bleq	8000942 <__aeabi_ddiv+0x16e>
 80007f4:	eba4 0405 	sub.w	r4, r4, r5
 80007f8:	ea81 0e03 	eor.w	lr, r1, r3
 80007fc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000800:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000804:	f000 8088 	beq.w	8000918 <__aeabi_ddiv+0x144>
 8000808:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800080c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000810:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000814:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000818:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800081c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000820:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000824:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000828:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800082c:	429d      	cmp	r5, r3
 800082e:	bf08      	it	eq
 8000830:	4296      	cmpeq	r6, r2
 8000832:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000836:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800083a:	d202      	bcs.n	8000842 <__aeabi_ddiv+0x6e>
 800083c:	085b      	lsrs	r3, r3, #1
 800083e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000842:	1ab6      	subs	r6, r6, r2
 8000844:	eb65 0503 	sbc.w	r5, r5, r3
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000852:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 000c 	orrcs.w	r0, r0, ip
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008b0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008b4:	d018      	beq.n	80008e8 <__aeabi_ddiv+0x114>
 80008b6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ba:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008be:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008c2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008c6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ca:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ce:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008d2:	d1c0      	bne.n	8000856 <__aeabi_ddiv+0x82>
 80008d4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008d8:	d10b      	bne.n	80008f2 <__aeabi_ddiv+0x11e>
 80008da:	ea41 0100 	orr.w	r1, r1, r0
 80008de:	f04f 0000 	mov.w	r0, #0
 80008e2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008e6:	e7b6      	b.n	8000856 <__aeabi_ddiv+0x82>
 80008e8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008ec:	bf04      	itt	eq
 80008ee:	4301      	orreq	r1, r0
 80008f0:	2000      	moveq	r0, #0
 80008f2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008f6:	bf88      	it	hi
 80008f8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008fc:	f63f aeaf 	bhi.w	800065e <__aeabi_dmul+0xde>
 8000900:	ebb5 0c03 	subs.w	ip, r5, r3
 8000904:	bf04      	itt	eq
 8000906:	ebb6 0c02 	subseq.w	ip, r6, r2
 800090a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800090e:	f150 0000 	adcs.w	r0, r0, #0
 8000912:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000916:	bd70      	pop	{r4, r5, r6, pc}
 8000918:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800091c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000920:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000924:	bfc2      	ittt	gt
 8000926:	ebd4 050c 	rsbsgt	r5, r4, ip
 800092a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800092e:	bd70      	popgt	{r4, r5, r6, pc}
 8000930:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000934:	f04f 0e00 	mov.w	lr, #0
 8000938:	3c01      	subs	r4, #1
 800093a:	e690      	b.n	800065e <__aeabi_dmul+0xde>
 800093c:	ea45 0e06 	orr.w	lr, r5, r6
 8000940:	e68d      	b.n	800065e <__aeabi_dmul+0xde>
 8000942:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000946:	ea94 0f0c 	teq	r4, ip
 800094a:	bf08      	it	eq
 800094c:	ea95 0f0c 	teqeq	r5, ip
 8000950:	f43f af3b 	beq.w	80007ca <__aeabi_dmul+0x24a>
 8000954:	ea94 0f0c 	teq	r4, ip
 8000958:	d10a      	bne.n	8000970 <__aeabi_ddiv+0x19c>
 800095a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800095e:	f47f af34 	bne.w	80007ca <__aeabi_dmul+0x24a>
 8000962:	ea95 0f0c 	teq	r5, ip
 8000966:	f47f af25 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800096a:	4610      	mov	r0, r2
 800096c:	4619      	mov	r1, r3
 800096e:	e72c      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000970:	ea95 0f0c 	teq	r5, ip
 8000974:	d106      	bne.n	8000984 <__aeabi_ddiv+0x1b0>
 8000976:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800097a:	f43f aefd 	beq.w	8000778 <__aeabi_dmul+0x1f8>
 800097e:	4610      	mov	r0, r2
 8000980:	4619      	mov	r1, r3
 8000982:	e722      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000984:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800098e:	f47f aec5 	bne.w	800071c <__aeabi_dmul+0x19c>
 8000992:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000996:	f47f af0d 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800099a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800099e:	f47f aeeb 	bne.w	8000778 <__aeabi_dmul+0x1f8>
 80009a2:	e712      	b.n	80007ca <__aeabi_dmul+0x24a>

080009a4 <__aeabi_d2f>:
 80009a4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009a8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 80009ac:	bf24      	itt	cs
 80009ae:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 80009b2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 80009b6:	d90d      	bls.n	80009d4 <__aeabi_d2f+0x30>
 80009b8:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80009bc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80009c0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80009c4:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 80009c8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80009cc:	bf08      	it	eq
 80009ce:	f020 0001 	biceq.w	r0, r0, #1
 80009d2:	4770      	bx	lr
 80009d4:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 80009d8:	d121      	bne.n	8000a1e <__aeabi_d2f+0x7a>
 80009da:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 80009de:	bfbc      	itt	lt
 80009e0:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 80009e4:	4770      	bxlt	lr
 80009e6:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ea:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009ee:	f1c2 0218 	rsb	r2, r2, #24
 80009f2:	f1c2 0c20 	rsb	ip, r2, #32
 80009f6:	fa10 f30c 	lsls.w	r3, r0, ip
 80009fa:	fa20 f002 	lsr.w	r0, r0, r2
 80009fe:	bf18      	it	ne
 8000a00:	f040 0001 	orrne.w	r0, r0, #1
 8000a04:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a08:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a0c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a10:	ea40 000c 	orr.w	r0, r0, ip
 8000a14:	fa23 f302 	lsr.w	r3, r3, r2
 8000a18:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a1c:	e7cc      	b.n	80009b8 <__aeabi_d2f+0x14>
 8000a1e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a22:	d107      	bne.n	8000a34 <__aeabi_d2f+0x90>
 8000a24:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a28:	bf1e      	ittt	ne
 8000a2a:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000a2e:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000a32:	4770      	bxne	lr
 8000a34:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000a38:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000a3c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000a40:	4770      	bx	lr
 8000a42:	bf00      	nop

08000a44 <__aeabi_uldivmod>:
 8000a44:	b953      	cbnz	r3, 8000a5c <__aeabi_uldivmod+0x18>
 8000a46:	b94a      	cbnz	r2, 8000a5c <__aeabi_uldivmod+0x18>
 8000a48:	2900      	cmp	r1, #0
 8000a4a:	bf08      	it	eq
 8000a4c:	2800      	cmpeq	r0, #0
 8000a4e:	bf1c      	itt	ne
 8000a50:	f04f 31ff 	movne.w	r1, #4294967295
 8000a54:	f04f 30ff 	movne.w	r0, #4294967295
 8000a58:	f000 b988 	b.w	8000d6c <__aeabi_idiv0>
 8000a5c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a60:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a64:	f000 f806 	bl	8000a74 <__udivmoddi4>
 8000a68:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a6c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a70:	b004      	add	sp, #16
 8000a72:	4770      	bx	lr

08000a74 <__udivmoddi4>:
 8000a74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a78:	9d08      	ldr	r5, [sp, #32]
 8000a7a:	468e      	mov	lr, r1
 8000a7c:	4604      	mov	r4, r0
 8000a7e:	4688      	mov	r8, r1
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d14a      	bne.n	8000b1a <__udivmoddi4+0xa6>
 8000a84:	428a      	cmp	r2, r1
 8000a86:	4617      	mov	r7, r2
 8000a88:	d962      	bls.n	8000b50 <__udivmoddi4+0xdc>
 8000a8a:	fab2 f682 	clz	r6, r2
 8000a8e:	b14e      	cbz	r6, 8000aa4 <__udivmoddi4+0x30>
 8000a90:	f1c6 0320 	rsb	r3, r6, #32
 8000a94:	fa01 f806 	lsl.w	r8, r1, r6
 8000a98:	fa20 f303 	lsr.w	r3, r0, r3
 8000a9c:	40b7      	lsls	r7, r6
 8000a9e:	ea43 0808 	orr.w	r8, r3, r8
 8000aa2:	40b4      	lsls	r4, r6
 8000aa4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000aa8:	fa1f fc87 	uxth.w	ip, r7
 8000aac:	fbb8 f1fe 	udiv	r1, r8, lr
 8000ab0:	0c23      	lsrs	r3, r4, #16
 8000ab2:	fb0e 8811 	mls	r8, lr, r1, r8
 8000ab6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000aba:	fb01 f20c 	mul.w	r2, r1, ip
 8000abe:	429a      	cmp	r2, r3
 8000ac0:	d909      	bls.n	8000ad6 <__udivmoddi4+0x62>
 8000ac2:	18fb      	adds	r3, r7, r3
 8000ac4:	f101 30ff 	add.w	r0, r1, #4294967295
 8000ac8:	f080 80ea 	bcs.w	8000ca0 <__udivmoddi4+0x22c>
 8000acc:	429a      	cmp	r2, r3
 8000ace:	f240 80e7 	bls.w	8000ca0 <__udivmoddi4+0x22c>
 8000ad2:	3902      	subs	r1, #2
 8000ad4:	443b      	add	r3, r7
 8000ad6:	1a9a      	subs	r2, r3, r2
 8000ad8:	b2a3      	uxth	r3, r4
 8000ada:	fbb2 f0fe 	udiv	r0, r2, lr
 8000ade:	fb0e 2210 	mls	r2, lr, r0, r2
 8000ae2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000ae6:	fb00 fc0c 	mul.w	ip, r0, ip
 8000aea:	459c      	cmp	ip, r3
 8000aec:	d909      	bls.n	8000b02 <__udivmoddi4+0x8e>
 8000aee:	18fb      	adds	r3, r7, r3
 8000af0:	f100 32ff 	add.w	r2, r0, #4294967295
 8000af4:	f080 80d6 	bcs.w	8000ca4 <__udivmoddi4+0x230>
 8000af8:	459c      	cmp	ip, r3
 8000afa:	f240 80d3 	bls.w	8000ca4 <__udivmoddi4+0x230>
 8000afe:	443b      	add	r3, r7
 8000b00:	3802      	subs	r0, #2
 8000b02:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000b06:	eba3 030c 	sub.w	r3, r3, ip
 8000b0a:	2100      	movs	r1, #0
 8000b0c:	b11d      	cbz	r5, 8000b16 <__udivmoddi4+0xa2>
 8000b0e:	40f3      	lsrs	r3, r6
 8000b10:	2200      	movs	r2, #0
 8000b12:	e9c5 3200 	strd	r3, r2, [r5]
 8000b16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b1a:	428b      	cmp	r3, r1
 8000b1c:	d905      	bls.n	8000b2a <__udivmoddi4+0xb6>
 8000b1e:	b10d      	cbz	r5, 8000b24 <__udivmoddi4+0xb0>
 8000b20:	e9c5 0100 	strd	r0, r1, [r5]
 8000b24:	2100      	movs	r1, #0
 8000b26:	4608      	mov	r0, r1
 8000b28:	e7f5      	b.n	8000b16 <__udivmoddi4+0xa2>
 8000b2a:	fab3 f183 	clz	r1, r3
 8000b2e:	2900      	cmp	r1, #0
 8000b30:	d146      	bne.n	8000bc0 <__udivmoddi4+0x14c>
 8000b32:	4573      	cmp	r3, lr
 8000b34:	d302      	bcc.n	8000b3c <__udivmoddi4+0xc8>
 8000b36:	4282      	cmp	r2, r0
 8000b38:	f200 8105 	bhi.w	8000d46 <__udivmoddi4+0x2d2>
 8000b3c:	1a84      	subs	r4, r0, r2
 8000b3e:	eb6e 0203 	sbc.w	r2, lr, r3
 8000b42:	2001      	movs	r0, #1
 8000b44:	4690      	mov	r8, r2
 8000b46:	2d00      	cmp	r5, #0
 8000b48:	d0e5      	beq.n	8000b16 <__udivmoddi4+0xa2>
 8000b4a:	e9c5 4800 	strd	r4, r8, [r5]
 8000b4e:	e7e2      	b.n	8000b16 <__udivmoddi4+0xa2>
 8000b50:	2a00      	cmp	r2, #0
 8000b52:	f000 8090 	beq.w	8000c76 <__udivmoddi4+0x202>
 8000b56:	fab2 f682 	clz	r6, r2
 8000b5a:	2e00      	cmp	r6, #0
 8000b5c:	f040 80a4 	bne.w	8000ca8 <__udivmoddi4+0x234>
 8000b60:	1a8a      	subs	r2, r1, r2
 8000b62:	0c03      	lsrs	r3, r0, #16
 8000b64:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000b68:	b280      	uxth	r0, r0
 8000b6a:	b2bc      	uxth	r4, r7
 8000b6c:	2101      	movs	r1, #1
 8000b6e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000b72:	fb0e 221c 	mls	r2, lr, ip, r2
 8000b76:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000b7a:	fb04 f20c 	mul.w	r2, r4, ip
 8000b7e:	429a      	cmp	r2, r3
 8000b80:	d907      	bls.n	8000b92 <__udivmoddi4+0x11e>
 8000b82:	18fb      	adds	r3, r7, r3
 8000b84:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000b88:	d202      	bcs.n	8000b90 <__udivmoddi4+0x11c>
 8000b8a:	429a      	cmp	r2, r3
 8000b8c:	f200 80e0 	bhi.w	8000d50 <__udivmoddi4+0x2dc>
 8000b90:	46c4      	mov	ip, r8
 8000b92:	1a9b      	subs	r3, r3, r2
 8000b94:	fbb3 f2fe 	udiv	r2, r3, lr
 8000b98:	fb0e 3312 	mls	r3, lr, r2, r3
 8000b9c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000ba0:	fb02 f404 	mul.w	r4, r2, r4
 8000ba4:	429c      	cmp	r4, r3
 8000ba6:	d907      	bls.n	8000bb8 <__udivmoddi4+0x144>
 8000ba8:	18fb      	adds	r3, r7, r3
 8000baa:	f102 30ff 	add.w	r0, r2, #4294967295
 8000bae:	d202      	bcs.n	8000bb6 <__udivmoddi4+0x142>
 8000bb0:	429c      	cmp	r4, r3
 8000bb2:	f200 80ca 	bhi.w	8000d4a <__udivmoddi4+0x2d6>
 8000bb6:	4602      	mov	r2, r0
 8000bb8:	1b1b      	subs	r3, r3, r4
 8000bba:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000bbe:	e7a5      	b.n	8000b0c <__udivmoddi4+0x98>
 8000bc0:	f1c1 0620 	rsb	r6, r1, #32
 8000bc4:	408b      	lsls	r3, r1
 8000bc6:	fa22 f706 	lsr.w	r7, r2, r6
 8000bca:	431f      	orrs	r7, r3
 8000bcc:	fa0e f401 	lsl.w	r4, lr, r1
 8000bd0:	fa20 f306 	lsr.w	r3, r0, r6
 8000bd4:	fa2e fe06 	lsr.w	lr, lr, r6
 8000bd8:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000bdc:	4323      	orrs	r3, r4
 8000bde:	fa00 f801 	lsl.w	r8, r0, r1
 8000be2:	fa1f fc87 	uxth.w	ip, r7
 8000be6:	fbbe f0f9 	udiv	r0, lr, r9
 8000bea:	0c1c      	lsrs	r4, r3, #16
 8000bec:	fb09 ee10 	mls	lr, r9, r0, lr
 8000bf0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000bf4:	fb00 fe0c 	mul.w	lr, r0, ip
 8000bf8:	45a6      	cmp	lr, r4
 8000bfa:	fa02 f201 	lsl.w	r2, r2, r1
 8000bfe:	d909      	bls.n	8000c14 <__udivmoddi4+0x1a0>
 8000c00:	193c      	adds	r4, r7, r4
 8000c02:	f100 3aff 	add.w	sl, r0, #4294967295
 8000c06:	f080 809c 	bcs.w	8000d42 <__udivmoddi4+0x2ce>
 8000c0a:	45a6      	cmp	lr, r4
 8000c0c:	f240 8099 	bls.w	8000d42 <__udivmoddi4+0x2ce>
 8000c10:	3802      	subs	r0, #2
 8000c12:	443c      	add	r4, r7
 8000c14:	eba4 040e 	sub.w	r4, r4, lr
 8000c18:	fa1f fe83 	uxth.w	lr, r3
 8000c1c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000c20:	fb09 4413 	mls	r4, r9, r3, r4
 8000c24:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000c28:	fb03 fc0c 	mul.w	ip, r3, ip
 8000c2c:	45a4      	cmp	ip, r4
 8000c2e:	d908      	bls.n	8000c42 <__udivmoddi4+0x1ce>
 8000c30:	193c      	adds	r4, r7, r4
 8000c32:	f103 3eff 	add.w	lr, r3, #4294967295
 8000c36:	f080 8082 	bcs.w	8000d3e <__udivmoddi4+0x2ca>
 8000c3a:	45a4      	cmp	ip, r4
 8000c3c:	d97f      	bls.n	8000d3e <__udivmoddi4+0x2ca>
 8000c3e:	3b02      	subs	r3, #2
 8000c40:	443c      	add	r4, r7
 8000c42:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000c46:	eba4 040c 	sub.w	r4, r4, ip
 8000c4a:	fba0 ec02 	umull	lr, ip, r0, r2
 8000c4e:	4564      	cmp	r4, ip
 8000c50:	4673      	mov	r3, lr
 8000c52:	46e1      	mov	r9, ip
 8000c54:	d362      	bcc.n	8000d1c <__udivmoddi4+0x2a8>
 8000c56:	d05f      	beq.n	8000d18 <__udivmoddi4+0x2a4>
 8000c58:	b15d      	cbz	r5, 8000c72 <__udivmoddi4+0x1fe>
 8000c5a:	ebb8 0203 	subs.w	r2, r8, r3
 8000c5e:	eb64 0409 	sbc.w	r4, r4, r9
 8000c62:	fa04 f606 	lsl.w	r6, r4, r6
 8000c66:	fa22 f301 	lsr.w	r3, r2, r1
 8000c6a:	431e      	orrs	r6, r3
 8000c6c:	40cc      	lsrs	r4, r1
 8000c6e:	e9c5 6400 	strd	r6, r4, [r5]
 8000c72:	2100      	movs	r1, #0
 8000c74:	e74f      	b.n	8000b16 <__udivmoddi4+0xa2>
 8000c76:	fbb1 fcf2 	udiv	ip, r1, r2
 8000c7a:	0c01      	lsrs	r1, r0, #16
 8000c7c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000c80:	b280      	uxth	r0, r0
 8000c82:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000c86:	463b      	mov	r3, r7
 8000c88:	4638      	mov	r0, r7
 8000c8a:	463c      	mov	r4, r7
 8000c8c:	46b8      	mov	r8, r7
 8000c8e:	46be      	mov	lr, r7
 8000c90:	2620      	movs	r6, #32
 8000c92:	fbb1 f1f7 	udiv	r1, r1, r7
 8000c96:	eba2 0208 	sub.w	r2, r2, r8
 8000c9a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000c9e:	e766      	b.n	8000b6e <__udivmoddi4+0xfa>
 8000ca0:	4601      	mov	r1, r0
 8000ca2:	e718      	b.n	8000ad6 <__udivmoddi4+0x62>
 8000ca4:	4610      	mov	r0, r2
 8000ca6:	e72c      	b.n	8000b02 <__udivmoddi4+0x8e>
 8000ca8:	f1c6 0220 	rsb	r2, r6, #32
 8000cac:	fa2e f302 	lsr.w	r3, lr, r2
 8000cb0:	40b7      	lsls	r7, r6
 8000cb2:	40b1      	lsls	r1, r6
 8000cb4:	fa20 f202 	lsr.w	r2, r0, r2
 8000cb8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cbc:	430a      	orrs	r2, r1
 8000cbe:	fbb3 f8fe 	udiv	r8, r3, lr
 8000cc2:	b2bc      	uxth	r4, r7
 8000cc4:	fb0e 3318 	mls	r3, lr, r8, r3
 8000cc8:	0c11      	lsrs	r1, r2, #16
 8000cca:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cce:	fb08 f904 	mul.w	r9, r8, r4
 8000cd2:	40b0      	lsls	r0, r6
 8000cd4:	4589      	cmp	r9, r1
 8000cd6:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000cda:	b280      	uxth	r0, r0
 8000cdc:	d93e      	bls.n	8000d5c <__udivmoddi4+0x2e8>
 8000cde:	1879      	adds	r1, r7, r1
 8000ce0:	f108 3cff 	add.w	ip, r8, #4294967295
 8000ce4:	d201      	bcs.n	8000cea <__udivmoddi4+0x276>
 8000ce6:	4589      	cmp	r9, r1
 8000ce8:	d81f      	bhi.n	8000d2a <__udivmoddi4+0x2b6>
 8000cea:	eba1 0109 	sub.w	r1, r1, r9
 8000cee:	fbb1 f9fe 	udiv	r9, r1, lr
 8000cf2:	fb09 f804 	mul.w	r8, r9, r4
 8000cf6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000cfa:	b292      	uxth	r2, r2
 8000cfc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000d00:	4542      	cmp	r2, r8
 8000d02:	d229      	bcs.n	8000d58 <__udivmoddi4+0x2e4>
 8000d04:	18ba      	adds	r2, r7, r2
 8000d06:	f109 31ff 	add.w	r1, r9, #4294967295
 8000d0a:	d2c4      	bcs.n	8000c96 <__udivmoddi4+0x222>
 8000d0c:	4542      	cmp	r2, r8
 8000d0e:	d2c2      	bcs.n	8000c96 <__udivmoddi4+0x222>
 8000d10:	f1a9 0102 	sub.w	r1, r9, #2
 8000d14:	443a      	add	r2, r7
 8000d16:	e7be      	b.n	8000c96 <__udivmoddi4+0x222>
 8000d18:	45f0      	cmp	r8, lr
 8000d1a:	d29d      	bcs.n	8000c58 <__udivmoddi4+0x1e4>
 8000d1c:	ebbe 0302 	subs.w	r3, lr, r2
 8000d20:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000d24:	3801      	subs	r0, #1
 8000d26:	46e1      	mov	r9, ip
 8000d28:	e796      	b.n	8000c58 <__udivmoddi4+0x1e4>
 8000d2a:	eba7 0909 	sub.w	r9, r7, r9
 8000d2e:	4449      	add	r1, r9
 8000d30:	f1a8 0c02 	sub.w	ip, r8, #2
 8000d34:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d38:	fb09 f804 	mul.w	r8, r9, r4
 8000d3c:	e7db      	b.n	8000cf6 <__udivmoddi4+0x282>
 8000d3e:	4673      	mov	r3, lr
 8000d40:	e77f      	b.n	8000c42 <__udivmoddi4+0x1ce>
 8000d42:	4650      	mov	r0, sl
 8000d44:	e766      	b.n	8000c14 <__udivmoddi4+0x1a0>
 8000d46:	4608      	mov	r0, r1
 8000d48:	e6fd      	b.n	8000b46 <__udivmoddi4+0xd2>
 8000d4a:	443b      	add	r3, r7
 8000d4c:	3a02      	subs	r2, #2
 8000d4e:	e733      	b.n	8000bb8 <__udivmoddi4+0x144>
 8000d50:	f1ac 0c02 	sub.w	ip, ip, #2
 8000d54:	443b      	add	r3, r7
 8000d56:	e71c      	b.n	8000b92 <__udivmoddi4+0x11e>
 8000d58:	4649      	mov	r1, r9
 8000d5a:	e79c      	b.n	8000c96 <__udivmoddi4+0x222>
 8000d5c:	eba1 0109 	sub.w	r1, r1, r9
 8000d60:	46c4      	mov	ip, r8
 8000d62:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d66:	fb09 f804 	mul.w	r8, r9, r4
 8000d6a:	e7c4      	b.n	8000cf6 <__udivmoddi4+0x282>

08000d6c <__aeabi_idiv0>:
 8000d6c:	4770      	bx	lr
 8000d6e:	bf00      	nop

08000d70 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d74:	f003 fc46 	bl	8004604 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d78:	f000 f812 	bl	8000da0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d7c:	f000 fa04 	bl	8001188 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000d80:	f000 f942 	bl	8001008 <MX_SPI1_Init>
  MX_SPI3_Init();
 8000d84:	f000 f976 	bl	8001074 <MX_SPI3_Init>
  MX_ADC1_Init();
 8000d88:	f000 f878 	bl	8000e7c <MX_ADC1_Init>
  MX_TIM2_Init();
 8000d8c:	f000 f9a8 	bl	80010e0 <MX_TIM2_Init>
  MX_CAN1_Init(1);
 8000d90:	2001      	movs	r0, #1
 8000d92:	f000 f8c5 	bl	8000f20 <MX_CAN1_Init>
  /* USER CODE BEGIN 2 */
  torch_main();
 8000d96:	f001 fdd3 	bl	8002940 <torch_main>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000d9a:	bf00      	nop
 8000d9c:	e7fd      	b.n	8000d9a <main+0x2a>
	...

08000da0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b094      	sub	sp, #80	@ 0x50
 8000da4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000da6:	f107 031c 	add.w	r3, r7, #28
 8000daa:	2234      	movs	r2, #52	@ 0x34
 8000dac:	2100      	movs	r1, #0
 8000dae:	4618      	mov	r0, r3
 8000db0:	f007 f8f2 	bl	8007f98 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000db4:	f107 0308 	add.w	r3, r7, #8
 8000db8:	2200      	movs	r2, #0
 8000dba:	601a      	str	r2, [r3, #0]
 8000dbc:	605a      	str	r2, [r3, #4]
 8000dbe:	609a      	str	r2, [r3, #8]
 8000dc0:	60da      	str	r2, [r3, #12]
 8000dc2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	607b      	str	r3, [r7, #4]
 8000dc8:	4b2a      	ldr	r3, [pc, #168]	@ (8000e74 <SystemClock_Config+0xd4>)
 8000dca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dcc:	4a29      	ldr	r2, [pc, #164]	@ (8000e74 <SystemClock_Config+0xd4>)
 8000dce:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000dd2:	6413      	str	r3, [r2, #64]	@ 0x40
 8000dd4:	4b27      	ldr	r3, [pc, #156]	@ (8000e74 <SystemClock_Config+0xd4>)
 8000dd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dd8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ddc:	607b      	str	r3, [r7, #4]
 8000dde:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000de0:	2300      	movs	r3, #0
 8000de2:	603b      	str	r3, [r7, #0]
 8000de4:	4b24      	ldr	r3, [pc, #144]	@ (8000e78 <SystemClock_Config+0xd8>)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000dec:	4a22      	ldr	r2, [pc, #136]	@ (8000e78 <SystemClock_Config+0xd8>)
 8000dee:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000df2:	6013      	str	r3, [r2, #0]
 8000df4:	4b20      	ldr	r3, [pc, #128]	@ (8000e78 <SystemClock_Config+0xd8>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000dfc:	603b      	str	r3, [r7, #0]
 8000dfe:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000e00:	2301      	movs	r3, #1
 8000e02:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000e04:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000e08:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e0a:	2302      	movs	r3, #2
 8000e0c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e0e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000e12:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000e14:	2310      	movs	r3, #16
 8000e16:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000e18:	23c0      	movs	r3, #192	@ 0xc0
 8000e1a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000e1c:	2302      	movs	r3, #2
 8000e1e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000e20:	2302      	movs	r3, #2
 8000e22:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000e24:	2302      	movs	r3, #2
 8000e26:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e28:	f107 031c 	add.w	r3, r7, #28
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	f005 fd1f 	bl	8006870 <HAL_RCC_OscConfig>
 8000e32:	4603      	mov	r3, r0
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d001      	beq.n	8000e3c <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000e38:	f000 fa94 	bl	8001364 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e3c:	230f      	movs	r3, #15
 8000e3e:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e40:	2302      	movs	r3, #2
 8000e42:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e44:	2300      	movs	r3, #0
 8000e46:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000e48:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000e4c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8000e4e:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000e52:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000e54:	f107 0308 	add.w	r3, r7, #8
 8000e58:	2103      	movs	r1, #3
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	f005 f9f4 	bl	8006248 <HAL_RCC_ClockConfig>
 8000e60:	4603      	mov	r3, r0
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d001      	beq.n	8000e6a <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000e66:	f000 fa7d 	bl	8001364 <Error_Handler>
  }
}
 8000e6a:	bf00      	nop
 8000e6c:	3750      	adds	r7, #80	@ 0x50
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bd80      	pop	{r7, pc}
 8000e72:	bf00      	nop
 8000e74:	40023800 	.word	0x40023800
 8000e78:	40007000 	.word	0x40007000

08000e7c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b084      	sub	sp, #16
 8000e80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000e82:	463b      	mov	r3, r7
 8000e84:	2200      	movs	r2, #0
 8000e86:	601a      	str	r2, [r3, #0]
 8000e88:	605a      	str	r2, [r3, #4]
 8000e8a:	609a      	str	r2, [r3, #8]
 8000e8c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000e8e:	4b21      	ldr	r3, [pc, #132]	@ (8000f14 <MX_ADC1_Init+0x98>)
 8000e90:	4a21      	ldr	r2, [pc, #132]	@ (8000f18 <MX_ADC1_Init+0x9c>)
 8000e92:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000e94:	4b1f      	ldr	r3, [pc, #124]	@ (8000f14 <MX_ADC1_Init+0x98>)
 8000e96:	2200      	movs	r2, #0
 8000e98:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000e9a:	4b1e      	ldr	r3, [pc, #120]	@ (8000f14 <MX_ADC1_Init+0x98>)
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000ea0:	4b1c      	ldr	r3, [pc, #112]	@ (8000f14 <MX_ADC1_Init+0x98>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000ea6:	4b1b      	ldr	r3, [pc, #108]	@ (8000f14 <MX_ADC1_Init+0x98>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000eac:	4b19      	ldr	r3, [pc, #100]	@ (8000f14 <MX_ADC1_Init+0x98>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000eb4:	4b17      	ldr	r3, [pc, #92]	@ (8000f14 <MX_ADC1_Init+0x98>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000eba:	4b16      	ldr	r3, [pc, #88]	@ (8000f14 <MX_ADC1_Init+0x98>)
 8000ebc:	4a17      	ldr	r2, [pc, #92]	@ (8000f1c <MX_ADC1_Init+0xa0>)
 8000ebe:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ec0:	4b14      	ldr	r3, [pc, #80]	@ (8000f14 <MX_ADC1_Init+0x98>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000ec6:	4b13      	ldr	r3, [pc, #76]	@ (8000f14 <MX_ADC1_Init+0x98>)
 8000ec8:	2201      	movs	r2, #1
 8000eca:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000ecc:	4b11      	ldr	r3, [pc, #68]	@ (8000f14 <MX_ADC1_Init+0x98>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ed4:	4b0f      	ldr	r3, [pc, #60]	@ (8000f14 <MX_ADC1_Init+0x98>)
 8000ed6:	2201      	movs	r2, #1
 8000ed8:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000eda:	480e      	ldr	r0, [pc, #56]	@ (8000f14 <MX_ADC1_Init+0x98>)
 8000edc:	f003 fc28 	bl	8004730 <HAL_ADC_Init>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d001      	beq.n	8000eea <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000ee6:	f000 fa3d 	bl	8001364 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8000eea:	230f      	movs	r3, #15
 8000eec:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000eee:	2301      	movs	r3, #1
 8000ef0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ef6:	463b      	mov	r3, r7
 8000ef8:	4619      	mov	r1, r3
 8000efa:	4806      	ldr	r0, [pc, #24]	@ (8000f14 <MX_ADC1_Init+0x98>)
 8000efc:	f003 fdfa 	bl	8004af4 <HAL_ADC_ConfigChannel>
 8000f00:	4603      	mov	r3, r0
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d001      	beq.n	8000f0a <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000f06:	f000 fa2d 	bl	8001364 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000f0a:	bf00      	nop
 8000f0c:	3710      	adds	r7, #16
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bd80      	pop	{r7, pc}
 8000f12:	bf00      	nop
 8000f14:	2000007c 	.word	0x2000007c
 8000f18:	40012000 	.word	0x40012000
 8000f1c:	0f000001 	.word	0x0f000001

08000f20 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
void MX_CAN1_Init(uint8_t mode)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b08c      	sub	sp, #48	@ 0x30
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	4603      	mov	r3, r0
 8000f28:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN CAN1_Init 0 */

  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */
  if(mode == 1) { hcan1.Init.Prescaler = 3; }	// 500 kHz
 8000f2a:	79fb      	ldrb	r3, [r7, #7]
 8000f2c:	2b01      	cmp	r3, #1
 8000f2e:	d103      	bne.n	8000f38 <MX_CAN1_Init+0x18>
 8000f30:	4b33      	ldr	r3, [pc, #204]	@ (8001000 <MX_CAN1_Init+0xe0>)
 8000f32:	2203      	movs	r2, #3
 8000f34:	605a      	str	r2, [r3, #4]
 8000f36:	e002      	b.n	8000f3e <MX_CAN1_Init+0x1e>
  else { hcan1.Init.Prescaler = 6; }			// 250 kHz
 8000f38:	4b31      	ldr	r3, [pc, #196]	@ (8001000 <MX_CAN1_Init+0xe0>)
 8000f3a:	2206      	movs	r2, #6
 8000f3c:	605a      	str	r2, [r3, #4]
  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000f3e:	4b30      	ldr	r3, [pc, #192]	@ (8001000 <MX_CAN1_Init+0xe0>)
 8000f40:	4a30      	ldr	r2, [pc, #192]	@ (8001004 <MX_CAN1_Init+0xe4>)
 8000f42:	601a      	str	r2, [r3, #0]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000f44:	4b2e      	ldr	r3, [pc, #184]	@ (8001000 <MX_CAN1_Init+0xe0>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000f4a:	4b2d      	ldr	r3, [pc, #180]	@ (8001000 <MX_CAN1_Init+0xe0>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_11TQ;
 8000f50:	4b2b      	ldr	r3, [pc, #172]	@ (8001000 <MX_CAN1_Init+0xe0>)
 8000f52:	f44f 2220 	mov.w	r2, #655360	@ 0xa0000
 8000f56:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_4TQ;
 8000f58:	4b29      	ldr	r3, [pc, #164]	@ (8001000 <MX_CAN1_Init+0xe0>)
 8000f5a:	f44f 1240 	mov.w	r2, #3145728	@ 0x300000
 8000f5e:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000f60:	4b27      	ldr	r3, [pc, #156]	@ (8001000 <MX_CAN1_Init+0xe0>)
 8000f62:	2200      	movs	r2, #0
 8000f64:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000f66:	4b26      	ldr	r3, [pc, #152]	@ (8001000 <MX_CAN1_Init+0xe0>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000f6c:	4b24      	ldr	r3, [pc, #144]	@ (8001000 <MX_CAN1_Init+0xe0>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000f72:	4b23      	ldr	r3, [pc, #140]	@ (8001000 <MX_CAN1_Init+0xe0>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000f78:	4b21      	ldr	r3, [pc, #132]	@ (8001000 <MX_CAN1_Init+0xe0>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000f7e:	4b20      	ldr	r3, [pc, #128]	@ (8001000 <MX_CAN1_Init+0xe0>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000f84:	481e      	ldr	r0, [pc, #120]	@ (8001000 <MX_CAN1_Init+0xe0>)
 8000f86:	f003 ffe3 	bl	8004f50 <HAL_CAN_Init>
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d001      	beq.n	8000f94 <MX_CAN1_Init+0x74>
  {
    Error_Handler();
 8000f90:	f000 f9e8 	bl	8001364 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  CAN_FilterTypeDef canFilter;

  canFilter.FilterActivation = CAN_FILTER_ENABLE;
 8000f94:	2301      	movs	r3, #1
 8000f96:	62bb      	str	r3, [r7, #40]	@ 0x28
  canFilter.FilterBank = 1;
 8000f98:	2301      	movs	r3, #1
 8000f9a:	61fb      	str	r3, [r7, #28]
  canFilter.FilterFIFOAssignment = CAN_RX_FIFO0;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	61bb      	str	r3, [r7, #24]
  canFilter.FilterIdHigh = CAN_FAULT_ID << 5;
 8000fa0:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8000fa4:	60bb      	str	r3, [r7, #8]
  canFilter.FilterIdLow = 0x0000;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	60fb      	str	r3, [r7, #12]
  canFilter.FilterMaskIdHigh = 0xFFE0;
 8000faa:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8000fae:	613b      	str	r3, [r7, #16]
  canFilter.FilterMaskIdLow = 0x0000;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	617b      	str	r3, [r7, #20]
  canFilter.FilterMode = CAN_FILTERMODE_IDMASK;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	623b      	str	r3, [r7, #32]
  canFilter.FilterScale = CAN_FILTERSCALE_32BIT;
 8000fb8:	2301      	movs	r3, #1
 8000fba:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_CAN_ConfigFilter(&hcan1, &canFilter);
 8000fbc:	f107 0308 	add.w	r3, r7, #8
 8000fc0:	4619      	mov	r1, r3
 8000fc2:	480f      	ldr	r0, [pc, #60]	@ (8001000 <MX_CAN1_Init+0xe0>)
 8000fc4:	f004 f8c0 	bl	8005148 <HAL_CAN_ConfigFilter>

  canFilter.FilterBank = 2;
 8000fc8:	2302      	movs	r3, #2
 8000fca:	61fb      	str	r3, [r7, #28]
  canFilter.FilterIdHigh = CAN_MIN_VCELL_ID << 5;
 8000fcc:	f647 43e0 	movw	r3, #31968	@ 0x7ce0
 8000fd0:	60bb      	str	r3, [r7, #8]
  HAL_CAN_ConfigFilter(&hcan1, &canFilter);
 8000fd2:	f107 0308 	add.w	r3, r7, #8
 8000fd6:	4619      	mov	r1, r3
 8000fd8:	4809      	ldr	r0, [pc, #36]	@ (8001000 <MX_CAN1_Init+0xe0>)
 8000fda:	f004 f8b5 	bl	8005148 <HAL_CAN_ConfigFilter>

  canFilter.FilterBank = 3;
 8000fde:	2303      	movs	r3, #3
 8000fe0:	61fb      	str	r3, [r7, #28]
  canFilter.FilterFIFOAssignment = CAN_RX_FIFO1;
 8000fe2:	2301      	movs	r3, #1
 8000fe4:	61bb      	str	r3, [r7, #24]
  canFilter.FilterIdHigh = CAN_PACK_STAT_ID << 5;
 8000fe6:	f44f 4304 	mov.w	r3, #33792	@ 0x8400
 8000fea:	60bb      	str	r3, [r7, #8]
  HAL_CAN_ConfigFilter(&hcan1, &canFilter);
 8000fec:	f107 0308 	add.w	r3, r7, #8
 8000ff0:	4619      	mov	r1, r3
 8000ff2:	4803      	ldr	r0, [pc, #12]	@ (8001000 <MX_CAN1_Init+0xe0>)
 8000ff4:	f004 f8a8 	bl	8005148 <HAL_CAN_ConfigFilter>

  /* USER CODE END CAN1_Init 2 */

}
 8000ff8:	bf00      	nop
 8000ffa:	3730      	adds	r7, #48	@ 0x30
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	bd80      	pop	{r7, pc}
 8001000:	200000c4 	.word	0x200000c4
 8001004:	40006400 	.word	0x40006400

08001008 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800100c:	4b17      	ldr	r3, [pc, #92]	@ (800106c <MX_SPI1_Init+0x64>)
 800100e:	4a18      	ldr	r2, [pc, #96]	@ (8001070 <MX_SPI1_Init+0x68>)
 8001010:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001012:	4b16      	ldr	r3, [pc, #88]	@ (800106c <MX_SPI1_Init+0x64>)
 8001014:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001018:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800101a:	4b14      	ldr	r3, [pc, #80]	@ (800106c <MX_SPI1_Init+0x64>)
 800101c:	2200      	movs	r2, #0
 800101e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001020:	4b12      	ldr	r3, [pc, #72]	@ (800106c <MX_SPI1_Init+0x64>)
 8001022:	2200      	movs	r2, #0
 8001024:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001026:	4b11      	ldr	r3, [pc, #68]	@ (800106c <MX_SPI1_Init+0x64>)
 8001028:	2200      	movs	r2, #0
 800102a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800102c:	4b0f      	ldr	r3, [pc, #60]	@ (800106c <MX_SPI1_Init+0x64>)
 800102e:	2200      	movs	r2, #0
 8001030:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001032:	4b0e      	ldr	r3, [pc, #56]	@ (800106c <MX_SPI1_Init+0x64>)
 8001034:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001038:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 800103a:	4b0c      	ldr	r3, [pc, #48]	@ (800106c <MX_SPI1_Init+0x64>)
 800103c:	2220      	movs	r2, #32
 800103e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001040:	4b0a      	ldr	r3, [pc, #40]	@ (800106c <MX_SPI1_Init+0x64>)
 8001042:	2200      	movs	r2, #0
 8001044:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001046:	4b09      	ldr	r3, [pc, #36]	@ (800106c <MX_SPI1_Init+0x64>)
 8001048:	2200      	movs	r2, #0
 800104a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800104c:	4b07      	ldr	r3, [pc, #28]	@ (800106c <MX_SPI1_Init+0x64>)
 800104e:	2200      	movs	r2, #0
 8001050:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001052:	4b06      	ldr	r3, [pc, #24]	@ (800106c <MX_SPI1_Init+0x64>)
 8001054:	220a      	movs	r2, #10
 8001056:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001058:	4804      	ldr	r0, [pc, #16]	@ (800106c <MX_SPI1_Init+0x64>)
 800105a:	f005 fea7 	bl	8006dac <HAL_SPI_Init>
 800105e:	4603      	mov	r3, r0
 8001060:	2b00      	cmp	r3, #0
 8001062:	d001      	beq.n	8001068 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001064:	f000 f97e 	bl	8001364 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001068:	bf00      	nop
 800106a:	bd80      	pop	{r7, pc}
 800106c:	200000ec 	.word	0x200000ec
 8001070:	40013000 	.word	0x40013000

08001074 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8001078:	4b17      	ldr	r3, [pc, #92]	@ (80010d8 <MX_SPI3_Init+0x64>)
 800107a:	4a18      	ldr	r2, [pc, #96]	@ (80010dc <MX_SPI3_Init+0x68>)
 800107c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800107e:	4b16      	ldr	r3, [pc, #88]	@ (80010d8 <MX_SPI3_Init+0x64>)
 8001080:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001084:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001086:	4b14      	ldr	r3, [pc, #80]	@ (80010d8 <MX_SPI3_Init+0x64>)
 8001088:	2200      	movs	r2, #0
 800108a:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 800108c:	4b12      	ldr	r3, [pc, #72]	@ (80010d8 <MX_SPI3_Init+0x64>)
 800108e:	2200      	movs	r2, #0
 8001090:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001092:	4b11      	ldr	r3, [pc, #68]	@ (80010d8 <MX_SPI3_Init+0x64>)
 8001094:	2200      	movs	r2, #0
 8001096:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001098:	4b0f      	ldr	r3, [pc, #60]	@ (80010d8 <MX_SPI3_Init+0x64>)
 800109a:	2200      	movs	r2, #0
 800109c:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800109e:	4b0e      	ldr	r3, [pc, #56]	@ (80010d8 <MX_SPI3_Init+0x64>)
 80010a0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80010a4:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80010a6:	4b0c      	ldr	r3, [pc, #48]	@ (80010d8 <MX_SPI3_Init+0x64>)
 80010a8:	2220      	movs	r2, #32
 80010aa:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80010ac:	4b0a      	ldr	r3, [pc, #40]	@ (80010d8 <MX_SPI3_Init+0x64>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80010b2:	4b09      	ldr	r3, [pc, #36]	@ (80010d8 <MX_SPI3_Init+0x64>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80010b8:	4b07      	ldr	r3, [pc, #28]	@ (80010d8 <MX_SPI3_Init+0x64>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 10;
 80010be:	4b06      	ldr	r3, [pc, #24]	@ (80010d8 <MX_SPI3_Init+0x64>)
 80010c0:	220a      	movs	r2, #10
 80010c2:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80010c4:	4804      	ldr	r0, [pc, #16]	@ (80010d8 <MX_SPI3_Init+0x64>)
 80010c6:	f005 fe71 	bl	8006dac <HAL_SPI_Init>
 80010ca:	4603      	mov	r3, r0
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d001      	beq.n	80010d4 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 80010d0:	f000 f948 	bl	8001364 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80010d4:	bf00      	nop
 80010d6:	bd80      	pop	{r7, pc}
 80010d8:	20000144 	.word	0x20000144
 80010dc:	40003c00 	.word	0x40003c00

080010e0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b086      	sub	sp, #24
 80010e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80010e6:	f107 0308 	add.w	r3, r7, #8
 80010ea:	2200      	movs	r2, #0
 80010ec:	601a      	str	r2, [r3, #0]
 80010ee:	605a      	str	r2, [r3, #4]
 80010f0:	609a      	str	r2, [r3, #8]
 80010f2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010f4:	463b      	mov	r3, r7
 80010f6:	2200      	movs	r2, #0
 80010f8:	601a      	str	r2, [r3, #0]
 80010fa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80010fc:	4b21      	ldr	r3, [pc, #132]	@ (8001184 <MX_TIM2_Init+0xa4>)
 80010fe:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001102:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 187;
 8001104:	4b1f      	ldr	r3, [pc, #124]	@ (8001184 <MX_TIM2_Init+0xa4>)
 8001106:	22bb      	movs	r2, #187	@ 0xbb
 8001108:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800110a:	4b1e      	ldr	r3, [pc, #120]	@ (8001184 <MX_TIM2_Init+0xa4>)
 800110c:	2200      	movs	r2, #0
 800110e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 255;
 8001110:	4b1c      	ldr	r3, [pc, #112]	@ (8001184 <MX_TIM2_Init+0xa4>)
 8001112:	22ff      	movs	r2, #255	@ 0xff
 8001114:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001116:	4b1b      	ldr	r3, [pc, #108]	@ (8001184 <MX_TIM2_Init+0xa4>)
 8001118:	2200      	movs	r2, #0
 800111a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800111c:	4b19      	ldr	r3, [pc, #100]	@ (8001184 <MX_TIM2_Init+0xa4>)
 800111e:	2200      	movs	r2, #0
 8001120:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001122:	4818      	ldr	r0, [pc, #96]	@ (8001184 <MX_TIM2_Init+0xa4>)
 8001124:	f006 fa94 	bl	8007650 <HAL_TIM_Base_Init>
 8001128:	4603      	mov	r3, r0
 800112a:	2b00      	cmp	r3, #0
 800112c:	d001      	beq.n	8001132 <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 800112e:	f000 f919 	bl	8001364 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001132:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001136:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001138:	f107 0308 	add.w	r3, r7, #8
 800113c:	4619      	mov	r1, r3
 800113e:	4811      	ldr	r0, [pc, #68]	@ (8001184 <MX_TIM2_Init+0xa4>)
 8001140:	f006 fc65 	bl	8007a0e <HAL_TIM_ConfigClockSource>
 8001144:	4603      	mov	r3, r0
 8001146:	2b00      	cmp	r3, #0
 8001148:	d001      	beq.n	800114e <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 800114a:	f000 f90b 	bl	8001364 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800114e:	2300      	movs	r3, #0
 8001150:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001152:	2300      	movs	r3, #0
 8001154:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001156:	463b      	mov	r3, r7
 8001158:	4619      	mov	r1, r3
 800115a:	480a      	ldr	r0, [pc, #40]	@ (8001184 <MX_TIM2_Init+0xa4>)
 800115c:	f006 fe8c 	bl	8007e78 <HAL_TIMEx_MasterConfigSynchronization>
 8001160:	4603      	mov	r3, r0
 8001162:	2b00      	cmp	r3, #0
 8001164:	d001      	beq.n	800116a <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 8001166:	f000 f8fd 	bl	8001364 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */
  HAL_NVIC_EnableIRQ(TIM2_IRQn);  // Enable TIM2 Interrupt in NVIC
 800116a:	201c      	movs	r0, #28
 800116c:	f004 fea3 	bl	8005eb6 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);  // Set Priority
 8001170:	2200      	movs	r2, #0
 8001172:	2101      	movs	r1, #1
 8001174:	201c      	movs	r0, #28
 8001176:	f004 fe82 	bl	8005e7e <HAL_NVIC_SetPriority>
  /* USER CODE END TIM2_Init 2 */

}
 800117a:	bf00      	nop
 800117c:	3718      	adds	r7, #24
 800117e:	46bd      	mov	sp, r7
 8001180:	bd80      	pop	{r7, pc}
 8001182:	bf00      	nop
 8001184:	2000019c 	.word	0x2000019c

08001188 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b08a      	sub	sp, #40	@ 0x28
 800118c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800118e:	f107 0314 	add.w	r3, r7, #20
 8001192:	2200      	movs	r2, #0
 8001194:	601a      	str	r2, [r3, #0]
 8001196:	605a      	str	r2, [r3, #4]
 8001198:	609a      	str	r2, [r3, #8]
 800119a:	60da      	str	r2, [r3, #12]
 800119c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800119e:	2300      	movs	r3, #0
 80011a0:	613b      	str	r3, [r7, #16]
 80011a2:	4b4d      	ldr	r3, [pc, #308]	@ (80012d8 <MX_GPIO_Init+0x150>)
 80011a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011a6:	4a4c      	ldr	r2, [pc, #304]	@ (80012d8 <MX_GPIO_Init+0x150>)
 80011a8:	f043 0304 	orr.w	r3, r3, #4
 80011ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80011ae:	4b4a      	ldr	r3, [pc, #296]	@ (80012d8 <MX_GPIO_Init+0x150>)
 80011b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011b2:	f003 0304 	and.w	r3, r3, #4
 80011b6:	613b      	str	r3, [r7, #16]
 80011b8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80011ba:	2300      	movs	r3, #0
 80011bc:	60fb      	str	r3, [r7, #12]
 80011be:	4b46      	ldr	r3, [pc, #280]	@ (80012d8 <MX_GPIO_Init+0x150>)
 80011c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011c2:	4a45      	ldr	r2, [pc, #276]	@ (80012d8 <MX_GPIO_Init+0x150>)
 80011c4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80011c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80011ca:	4b43      	ldr	r3, [pc, #268]	@ (80012d8 <MX_GPIO_Init+0x150>)
 80011cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80011d2:	60fb      	str	r3, [r7, #12]
 80011d4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011d6:	2300      	movs	r3, #0
 80011d8:	60bb      	str	r3, [r7, #8]
 80011da:	4b3f      	ldr	r3, [pc, #252]	@ (80012d8 <MX_GPIO_Init+0x150>)
 80011dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011de:	4a3e      	ldr	r2, [pc, #248]	@ (80012d8 <MX_GPIO_Init+0x150>)
 80011e0:	f043 0301 	orr.w	r3, r3, #1
 80011e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80011e6:	4b3c      	ldr	r3, [pc, #240]	@ (80012d8 <MX_GPIO_Init+0x150>)
 80011e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011ea:	f003 0301 	and.w	r3, r3, #1
 80011ee:	60bb      	str	r3, [r7, #8]
 80011f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011f2:	2300      	movs	r3, #0
 80011f4:	607b      	str	r3, [r7, #4]
 80011f6:	4b38      	ldr	r3, [pc, #224]	@ (80012d8 <MX_GPIO_Init+0x150>)
 80011f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011fa:	4a37      	ldr	r2, [pc, #220]	@ (80012d8 <MX_GPIO_Init+0x150>)
 80011fc:	f043 0302 	orr.w	r3, r3, #2
 8001200:	6313      	str	r3, [r2, #48]	@ 0x30
 8001202:	4b35      	ldr	r3, [pc, #212]	@ (80012d8 <MX_GPIO_Init+0x150>)
 8001204:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001206:	f003 0302 	and.w	r3, r3, #2
 800120a:	607b      	str	r3, [r7, #4]
 800120c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800120e:	2300      	movs	r3, #0
 8001210:	603b      	str	r3, [r7, #0]
 8001212:	4b31      	ldr	r3, [pc, #196]	@ (80012d8 <MX_GPIO_Init+0x150>)
 8001214:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001216:	4a30      	ldr	r2, [pc, #192]	@ (80012d8 <MX_GPIO_Init+0x150>)
 8001218:	f043 0308 	orr.w	r3, r3, #8
 800121c:	6313      	str	r3, [r2, #48]	@ 0x30
 800121e:	4b2e      	ldr	r3, [pc, #184]	@ (80012d8 <MX_GPIO_Init+0x150>)
 8001220:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001222:	f003 0308 	and.w	r3, r3, #8
 8001226:	603b      	str	r3, [r7, #0]
 8001228:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_4|GPIO_PIN_7
 800122a:	2200      	movs	r2, #0
 800122c:	f246 3190 	movw	r1, #25488	@ 0x6390
 8001230:	482a      	ldr	r0, [pc, #168]	@ (80012dc <MX_GPIO_Init+0x154>)
 8001232:	f004 ffef 	bl	8006214 <HAL_GPIO_WritePin>
                          |GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_8
 8001236:	2200      	movs	r2, #0
 8001238:	f248 111c 	movw	r1, #33052	@ 0x811c
 800123c:	4828      	ldr	r0, [pc, #160]	@ (80012e0 <MX_GPIO_Init+0x158>)
 800123e:	f004 ffe9 	bl	8006214 <HAL_GPIO_WritePin>
                          |GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 8001242:	2200      	movs	r2, #0
 8001244:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001248:	4826      	ldr	r0, [pc, #152]	@ (80012e4 <MX_GPIO_Init+0x15c>)
 800124a:	f004 ffe3 	bl	8006214 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 800124e:	2200      	movs	r2, #0
 8001250:	2104      	movs	r1, #4
 8001252:	4825      	ldr	r0, [pc, #148]	@ (80012e8 <MX_GPIO_Init+0x160>)
 8001254:	f004 ffde 	bl	8006214 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 PC4 PC7
                           PC8 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_4|GPIO_PIN_7
 8001258:	f246 3390 	movw	r3, #25488	@ 0x6390
 800125c:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800125e:	2301      	movs	r3, #1
 8001260:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001262:	2300      	movs	r3, #0
 8001264:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001266:	2300      	movs	r3, #0
 8001268:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800126a:	f107 0314 	add.w	r3, r7, #20
 800126e:	4619      	mov	r1, r3
 8001270:	481a      	ldr	r0, [pc, #104]	@ (80012dc <MX_GPIO_Init+0x154>)
 8001272:	f004 fe3b 	bl	8005eec <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 PA3 PA4 PA8
                           PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_8
 8001276:	f248 131c 	movw	r3, #33052	@ 0x811c
 800127a:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800127c:	2301      	movs	r3, #1
 800127e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001280:	2300      	movs	r3, #0
 8001282:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001284:	2300      	movs	r3, #0
 8001286:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001288:	f107 0314 	add.w	r3, r7, #20
 800128c:	4619      	mov	r1, r3
 800128e:	4814      	ldr	r0, [pc, #80]	@ (80012e0 <MX_GPIO_Init+0x158>)
 8001290:	f004 fe2c 	bl	8005eec <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001294:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001298:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800129a:	2301      	movs	r3, #1
 800129c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800129e:	2300      	movs	r3, #0
 80012a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012a2:	2300      	movs	r3, #0
 80012a4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012a6:	f107 0314 	add.w	r3, r7, #20
 80012aa:	4619      	mov	r1, r3
 80012ac:	480d      	ldr	r0, [pc, #52]	@ (80012e4 <MX_GPIO_Init+0x15c>)
 80012ae:	f004 fe1d 	bl	8005eec <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80012b2:	2304      	movs	r3, #4
 80012b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012b6:	2301      	movs	r3, #1
 80012b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ba:	2300      	movs	r3, #0
 80012bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012be:	2300      	movs	r3, #0
 80012c0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80012c2:	f107 0314 	add.w	r3, r7, #20
 80012c6:	4619      	mov	r1, r3
 80012c8:	4807      	ldr	r0, [pc, #28]	@ (80012e8 <MX_GPIO_Init+0x160>)
 80012ca:	f004 fe0f 	bl	8005eec <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80012ce:	bf00      	nop
 80012d0:	3728      	adds	r7, #40	@ 0x28
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	bf00      	nop
 80012d8:	40023800 	.word	0x40023800
 80012dc:	40020800 	.word	0x40020800
 80012e0:	40020000 	.word	0x40020000
 80012e4:	40020400 	.word	0x40020400
 80012e8:	40020c00 	.word	0x40020c00

080012ec <TIM2_IRQHandler>:

/* USER CODE BEGIN 4 */
void TIM2_IRQHandler(void)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	af00      	add	r7, sp, #0
    HAL_TIM_IRQHandler(&htim2);  // Call HAL's IRQ handler
 80012f0:	4802      	ldr	r0, [pc, #8]	@ (80012fc <TIM2_IRQHandler+0x10>)
 80012f2:	f006 fa9c 	bl	800782e <HAL_TIM_IRQHandler>
}
 80012f6:	bf00      	nop
 80012f8:	bd80      	pop	{r7, pc}
 80012fa:	bf00      	nop
 80012fc:	2000019c 	.word	0x2000019c

08001300 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001300:	b480      	push	{r7}
 8001302:	b083      	sub	sp, #12
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM2) {
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001310:	d118      	bne.n	8001344 <HAL_TIM_PeriodElapsedCallback+0x44>
        Counter++;
 8001312:	4b0f      	ldr	r3, [pc, #60]	@ (8001350 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	3301      	adds	r3, #1
 8001318:	4a0d      	ldr	r2, [pc, #52]	@ (8001350 <HAL_TIM_PeriodElapsedCallback+0x50>)
 800131a:	6013      	str	r3, [r2, #0]
        transmitCounter++;
 800131c:	4b0d      	ldr	r3, [pc, #52]	@ (8001354 <HAL_TIM_PeriodElapsedCallback+0x54>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	3301      	adds	r3, #1
 8001322:	4a0c      	ldr	r2, [pc, #48]	@ (8001354 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8001324:	6013      	str	r3, [r2, #0]
        measureCounter++;
 8001326:	4b0c      	ldr	r3, [pc, #48]	@ (8001358 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	3301      	adds	r3, #1
 800132c:	4a0a      	ldr	r2, [pc, #40]	@ (8001358 <HAL_TIM_PeriodElapsedCallback+0x58>)
 800132e:	6013      	str	r3, [r2, #0]
        balanceCounter++;
 8001330:	4b0a      	ldr	r3, [pc, #40]	@ (800135c <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	3301      	adds	r3, #1
 8001336:	4a09      	ldr	r2, [pc, #36]	@ (800135c <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8001338:	6013      	str	r3, [r2, #0]
        muteCounter++;
 800133a:	4b09      	ldr	r3, [pc, #36]	@ (8001360 <HAL_TIM_PeriodElapsedCallback+0x60>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	3301      	adds	r3, #1
 8001340:	4a07      	ldr	r2, [pc, #28]	@ (8001360 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8001342:	6013      	str	r3, [r2, #0]
        //canTimeoutCounter++;
    }
}
 8001344:	bf00      	nop
 8001346:	370c      	adds	r7, #12
 8001348:	46bd      	mov	sp, r7
 800134a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134e:	4770      	bx	lr
 8001350:	200003f8 	.word	0x200003f8
 8001354:	200003e4 	.word	0x200003e4
 8001358:	200003e8 	.word	0x200003e8
 800135c:	200003ec 	.word	0x200003ec
 8001360:	200003f0 	.word	0x200003f0

08001364 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001364:	b480      	push	{r7}
 8001366:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001368:	b672      	cpsid	i
}
 800136a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800136c:	bf00      	nop
 800136e:	e7fd      	b.n	800136c <Error_Handler+0x8>

08001370 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001370:	b480      	push	{r7}
 8001372:	b083      	sub	sp, #12
 8001374:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001376:	2300      	movs	r3, #0
 8001378:	607b      	str	r3, [r7, #4]
 800137a:	4b10      	ldr	r3, [pc, #64]	@ (80013bc <HAL_MspInit+0x4c>)
 800137c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800137e:	4a0f      	ldr	r2, [pc, #60]	@ (80013bc <HAL_MspInit+0x4c>)
 8001380:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001384:	6453      	str	r3, [r2, #68]	@ 0x44
 8001386:	4b0d      	ldr	r3, [pc, #52]	@ (80013bc <HAL_MspInit+0x4c>)
 8001388:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800138a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800138e:	607b      	str	r3, [r7, #4]
 8001390:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001392:	2300      	movs	r3, #0
 8001394:	603b      	str	r3, [r7, #0]
 8001396:	4b09      	ldr	r3, [pc, #36]	@ (80013bc <HAL_MspInit+0x4c>)
 8001398:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800139a:	4a08      	ldr	r2, [pc, #32]	@ (80013bc <HAL_MspInit+0x4c>)
 800139c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80013a0:	6413      	str	r3, [r2, #64]	@ 0x40
 80013a2:	4b06      	ldr	r3, [pc, #24]	@ (80013bc <HAL_MspInit+0x4c>)
 80013a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80013aa:	603b      	str	r3, [r7, #0]
 80013ac:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013ae:	bf00      	nop
 80013b0:	370c      	adds	r7, #12
 80013b2:	46bd      	mov	sp, r7
 80013b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b8:	4770      	bx	lr
 80013ba:	bf00      	nop
 80013bc:	40023800 	.word	0x40023800

080013c0 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b08a      	sub	sp, #40	@ 0x28
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013c8:	f107 0314 	add.w	r3, r7, #20
 80013cc:	2200      	movs	r2, #0
 80013ce:	601a      	str	r2, [r3, #0]
 80013d0:	605a      	str	r2, [r3, #4]
 80013d2:	609a      	str	r2, [r3, #8]
 80013d4:	60da      	str	r2, [r3, #12]
 80013d6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	4a17      	ldr	r2, [pc, #92]	@ (800143c <HAL_ADC_MspInit+0x7c>)
 80013de:	4293      	cmp	r3, r2
 80013e0:	d127      	bne.n	8001432 <HAL_ADC_MspInit+0x72>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80013e2:	2300      	movs	r3, #0
 80013e4:	613b      	str	r3, [r7, #16]
 80013e6:	4b16      	ldr	r3, [pc, #88]	@ (8001440 <HAL_ADC_MspInit+0x80>)
 80013e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013ea:	4a15      	ldr	r2, [pc, #84]	@ (8001440 <HAL_ADC_MspInit+0x80>)
 80013ec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80013f0:	6453      	str	r3, [r2, #68]	@ 0x44
 80013f2:	4b13      	ldr	r3, [pc, #76]	@ (8001440 <HAL_ADC_MspInit+0x80>)
 80013f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80013fa:	613b      	str	r3, [r7, #16]
 80013fc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80013fe:	2300      	movs	r3, #0
 8001400:	60fb      	str	r3, [r7, #12]
 8001402:	4b0f      	ldr	r3, [pc, #60]	@ (8001440 <HAL_ADC_MspInit+0x80>)
 8001404:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001406:	4a0e      	ldr	r2, [pc, #56]	@ (8001440 <HAL_ADC_MspInit+0x80>)
 8001408:	f043 0304 	orr.w	r3, r3, #4
 800140c:	6313      	str	r3, [r2, #48]	@ 0x30
 800140e:	4b0c      	ldr	r3, [pc, #48]	@ (8001440 <HAL_ADC_MspInit+0x80>)
 8001410:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001412:	f003 0304 	and.w	r3, r3, #4
 8001416:	60fb      	str	r3, [r7, #12]
 8001418:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC5     ------> ADC1_IN15
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800141a:	2320      	movs	r3, #32
 800141c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800141e:	2303      	movs	r3, #3
 8001420:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001422:	2300      	movs	r3, #0
 8001424:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001426:	f107 0314 	add.w	r3, r7, #20
 800142a:	4619      	mov	r1, r3
 800142c:	4805      	ldr	r0, [pc, #20]	@ (8001444 <HAL_ADC_MspInit+0x84>)
 800142e:	f004 fd5d 	bl	8005eec <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001432:	bf00      	nop
 8001434:	3728      	adds	r7, #40	@ 0x28
 8001436:	46bd      	mov	sp, r7
 8001438:	bd80      	pop	{r7, pc}
 800143a:	bf00      	nop
 800143c:	40012000 	.word	0x40012000
 8001440:	40023800 	.word	0x40023800
 8001444:	40020800 	.word	0x40020800

08001448 <HAL_CAN_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcan: CAN handle pointer
  * @retval None
  */
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b08a      	sub	sp, #40	@ 0x28
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001450:	f107 0314 	add.w	r3, r7, #20
 8001454:	2200      	movs	r2, #0
 8001456:	601a      	str	r2, [r3, #0]
 8001458:	605a      	str	r2, [r3, #4]
 800145a:	609a      	str	r2, [r3, #8]
 800145c:	60da      	str	r2, [r3, #12]
 800145e:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	4a21      	ldr	r2, [pc, #132]	@ (80014ec <HAL_CAN_MspInit+0xa4>)
 8001466:	4293      	cmp	r3, r2
 8001468:	d13c      	bne.n	80014e4 <HAL_CAN_MspInit+0x9c>
  {
    /* USER CODE BEGIN CAN1_MspInit 0 */

    /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800146a:	2300      	movs	r3, #0
 800146c:	613b      	str	r3, [r7, #16]
 800146e:	4b20      	ldr	r3, [pc, #128]	@ (80014f0 <HAL_CAN_MspInit+0xa8>)
 8001470:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001472:	4a1f      	ldr	r2, [pc, #124]	@ (80014f0 <HAL_CAN_MspInit+0xa8>)
 8001474:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001478:	6413      	str	r3, [r2, #64]	@ 0x40
 800147a:	4b1d      	ldr	r3, [pc, #116]	@ (80014f0 <HAL_CAN_MspInit+0xa8>)
 800147c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800147e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001482:	613b      	str	r3, [r7, #16]
 8001484:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001486:	2300      	movs	r3, #0
 8001488:	60fb      	str	r3, [r7, #12]
 800148a:	4b19      	ldr	r3, [pc, #100]	@ (80014f0 <HAL_CAN_MspInit+0xa8>)
 800148c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800148e:	4a18      	ldr	r2, [pc, #96]	@ (80014f0 <HAL_CAN_MspInit+0xa8>)
 8001490:	f043 0301 	orr.w	r3, r3, #1
 8001494:	6313      	str	r3, [r2, #48]	@ 0x30
 8001496:	4b16      	ldr	r3, [pc, #88]	@ (80014f0 <HAL_CAN_MspInit+0xa8>)
 8001498:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800149a:	f003 0301 	and.w	r3, r3, #1
 800149e:	60fb      	str	r3, [r7, #12]
 80014a0:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80014a2:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80014a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014a8:	2302      	movs	r3, #2
 80014aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ac:	2300      	movs	r3, #0
 80014ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014b0:	2303      	movs	r3, #3
 80014b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80014b4:	2309      	movs	r3, #9
 80014b6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014b8:	f107 0314 	add.w	r3, r7, #20
 80014bc:	4619      	mov	r1, r3
 80014be:	480d      	ldr	r0, [pc, #52]	@ (80014f4 <HAL_CAN_MspInit+0xac>)
 80014c0:	f004 fd14 	bl	8005eec <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 80014c4:	2200      	movs	r2, #0
 80014c6:	2100      	movs	r1, #0
 80014c8:	2014      	movs	r0, #20
 80014ca:	f004 fcd8 	bl	8005e7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80014ce:	2014      	movs	r0, #20
 80014d0:	f004 fcf1 	bl	8005eb6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 80014d4:	2200      	movs	r2, #0
 80014d6:	2100      	movs	r1, #0
 80014d8:	2015      	movs	r0, #21
 80014da:	f004 fcd0 	bl	8005e7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 80014de:	2015      	movs	r0, #21
 80014e0:	f004 fce9 	bl	8005eb6 <HAL_NVIC_EnableIRQ>

    /* USER CODE END CAN1_MspInit 1 */

  }

}
 80014e4:	bf00      	nop
 80014e6:	3728      	adds	r7, #40	@ 0x28
 80014e8:	46bd      	mov	sp, r7
 80014ea:	bd80      	pop	{r7, pc}
 80014ec:	40006400 	.word	0x40006400
 80014f0:	40023800 	.word	0x40023800
 80014f4:	40020000 	.word	0x40020000

080014f8 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b08c      	sub	sp, #48	@ 0x30
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001500:	f107 031c 	add.w	r3, r7, #28
 8001504:	2200      	movs	r2, #0
 8001506:	601a      	str	r2, [r3, #0]
 8001508:	605a      	str	r2, [r3, #4]
 800150a:	609a      	str	r2, [r3, #8]
 800150c:	60da      	str	r2, [r3, #12]
 800150e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	4a32      	ldr	r2, [pc, #200]	@ (80015e0 <HAL_SPI_MspInit+0xe8>)
 8001516:	4293      	cmp	r3, r2
 8001518:	d12c      	bne.n	8001574 <HAL_SPI_MspInit+0x7c>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800151a:	2300      	movs	r3, #0
 800151c:	61bb      	str	r3, [r7, #24]
 800151e:	4b31      	ldr	r3, [pc, #196]	@ (80015e4 <HAL_SPI_MspInit+0xec>)
 8001520:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001522:	4a30      	ldr	r2, [pc, #192]	@ (80015e4 <HAL_SPI_MspInit+0xec>)
 8001524:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001528:	6453      	str	r3, [r2, #68]	@ 0x44
 800152a:	4b2e      	ldr	r3, [pc, #184]	@ (80015e4 <HAL_SPI_MspInit+0xec>)
 800152c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800152e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001532:	61bb      	str	r3, [r7, #24]
 8001534:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001536:	2300      	movs	r3, #0
 8001538:	617b      	str	r3, [r7, #20]
 800153a:	4b2a      	ldr	r3, [pc, #168]	@ (80015e4 <HAL_SPI_MspInit+0xec>)
 800153c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800153e:	4a29      	ldr	r2, [pc, #164]	@ (80015e4 <HAL_SPI_MspInit+0xec>)
 8001540:	f043 0301 	orr.w	r3, r3, #1
 8001544:	6313      	str	r3, [r2, #48]	@ 0x30
 8001546:	4b27      	ldr	r3, [pc, #156]	@ (80015e4 <HAL_SPI_MspInit+0xec>)
 8001548:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800154a:	f003 0301 	and.w	r3, r3, #1
 800154e:	617b      	str	r3, [r7, #20]
 8001550:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001552:	23e0      	movs	r3, #224	@ 0xe0
 8001554:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001556:	2302      	movs	r3, #2
 8001558:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800155a:	2300      	movs	r3, #0
 800155c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800155e:	2303      	movs	r3, #3
 8001560:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001562:	2305      	movs	r3, #5
 8001564:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001566:	f107 031c 	add.w	r3, r7, #28
 800156a:	4619      	mov	r1, r3
 800156c:	481e      	ldr	r0, [pc, #120]	@ (80015e8 <HAL_SPI_MspInit+0xf0>)
 800156e:	f004 fcbd 	bl	8005eec <HAL_GPIO_Init>
    /* USER CODE BEGIN SPI3_MspInit 1 */

    /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001572:	e031      	b.n	80015d8 <HAL_SPI_MspInit+0xe0>
  else if(hspi->Instance==SPI3)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	4a1c      	ldr	r2, [pc, #112]	@ (80015ec <HAL_SPI_MspInit+0xf4>)
 800157a:	4293      	cmp	r3, r2
 800157c:	d12c      	bne.n	80015d8 <HAL_SPI_MspInit+0xe0>
    __HAL_RCC_SPI3_CLK_ENABLE();
 800157e:	2300      	movs	r3, #0
 8001580:	613b      	str	r3, [r7, #16]
 8001582:	4b18      	ldr	r3, [pc, #96]	@ (80015e4 <HAL_SPI_MspInit+0xec>)
 8001584:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001586:	4a17      	ldr	r2, [pc, #92]	@ (80015e4 <HAL_SPI_MspInit+0xec>)
 8001588:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800158c:	6413      	str	r3, [r2, #64]	@ 0x40
 800158e:	4b15      	ldr	r3, [pc, #84]	@ (80015e4 <HAL_SPI_MspInit+0xec>)
 8001590:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001592:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001596:	613b      	str	r3, [r7, #16]
 8001598:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800159a:	2300      	movs	r3, #0
 800159c:	60fb      	str	r3, [r7, #12]
 800159e:	4b11      	ldr	r3, [pc, #68]	@ (80015e4 <HAL_SPI_MspInit+0xec>)
 80015a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015a2:	4a10      	ldr	r2, [pc, #64]	@ (80015e4 <HAL_SPI_MspInit+0xec>)
 80015a4:	f043 0304 	orr.w	r3, r3, #4
 80015a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80015aa:	4b0e      	ldr	r3, [pc, #56]	@ (80015e4 <HAL_SPI_MspInit+0xec>)
 80015ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015ae:	f003 0304 	and.w	r3, r3, #4
 80015b2:	60fb      	str	r3, [r7, #12]
 80015b4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80015b6:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 80015ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015bc:	2302      	movs	r3, #2
 80015be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c0:	2300      	movs	r3, #0
 80015c2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015c4:	2303      	movs	r3, #3
 80015c6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80015c8:	2306      	movs	r3, #6
 80015ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015cc:	f107 031c 	add.w	r3, r7, #28
 80015d0:	4619      	mov	r1, r3
 80015d2:	4807      	ldr	r0, [pc, #28]	@ (80015f0 <HAL_SPI_MspInit+0xf8>)
 80015d4:	f004 fc8a 	bl	8005eec <HAL_GPIO_Init>
}
 80015d8:	bf00      	nop
 80015da:	3730      	adds	r7, #48	@ 0x30
 80015dc:	46bd      	mov	sp, r7
 80015de:	bd80      	pop	{r7, pc}
 80015e0:	40013000 	.word	0x40013000
 80015e4:	40023800 	.word	0x40023800
 80015e8:	40020000 	.word	0x40020000
 80015ec:	40003c00 	.word	0x40003c00
 80015f0:	40020800 	.word	0x40020800

080015f4 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80015f4:	b480      	push	{r7}
 80015f6:	b085      	sub	sp, #20
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001604:	d10d      	bne.n	8001622 <HAL_TIM_Base_MspInit+0x2e>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001606:	2300      	movs	r3, #0
 8001608:	60fb      	str	r3, [r7, #12]
 800160a:	4b09      	ldr	r3, [pc, #36]	@ (8001630 <HAL_TIM_Base_MspInit+0x3c>)
 800160c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800160e:	4a08      	ldr	r2, [pc, #32]	@ (8001630 <HAL_TIM_Base_MspInit+0x3c>)
 8001610:	f043 0301 	orr.w	r3, r3, #1
 8001614:	6413      	str	r3, [r2, #64]	@ 0x40
 8001616:	4b06      	ldr	r3, [pc, #24]	@ (8001630 <HAL_TIM_Base_MspInit+0x3c>)
 8001618:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800161a:	f003 0301 	and.w	r3, r3, #1
 800161e:	60fb      	str	r3, [r7, #12]
 8001620:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 8001622:	bf00      	nop
 8001624:	3714      	adds	r7, #20
 8001626:	46bd      	mov	sp, r7
 8001628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162c:	4770      	bx	lr
 800162e:	bf00      	nop
 8001630:	40023800 	.word	0x40023800

08001634 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001634:	b480      	push	{r7}
 8001636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001638:	bf00      	nop
 800163a:	e7fd      	b.n	8001638 <NMI_Handler+0x4>

0800163c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800163c:	b480      	push	{r7}
 800163e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001640:	bf00      	nop
 8001642:	e7fd      	b.n	8001640 <HardFault_Handler+0x4>

08001644 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001644:	b480      	push	{r7}
 8001646:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001648:	bf00      	nop
 800164a:	e7fd      	b.n	8001648 <MemManage_Handler+0x4>

0800164c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800164c:	b480      	push	{r7}
 800164e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001650:	bf00      	nop
 8001652:	e7fd      	b.n	8001650 <BusFault_Handler+0x4>

08001654 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001654:	b480      	push	{r7}
 8001656:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001658:	bf00      	nop
 800165a:	e7fd      	b.n	8001658 <UsageFault_Handler+0x4>

0800165c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800165c:	b480      	push	{r7}
 800165e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001660:	bf00      	nop
 8001662:	46bd      	mov	sp, r7
 8001664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001668:	4770      	bx	lr

0800166a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800166a:	b480      	push	{r7}
 800166c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800166e:	bf00      	nop
 8001670:	46bd      	mov	sp, r7
 8001672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001676:	4770      	bx	lr

08001678 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001678:	b480      	push	{r7}
 800167a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800167c:	bf00      	nop
 800167e:	46bd      	mov	sp, r7
 8001680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001684:	4770      	bx	lr

08001686 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001686:	b580      	push	{r7, lr}
 8001688:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800168a:	f003 f80d 	bl	80046a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800168e:	bf00      	nop
 8001690:	bd80      	pop	{r7, pc}
	...

08001694 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001698:	4802      	ldr	r0, [pc, #8]	@ (80016a4 <CAN1_RX0_IRQHandler+0x10>)
 800169a:	f004 f8dc 	bl	8005856 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 800169e:	bf00      	nop
 80016a0:	bd80      	pop	{r7, pc}
 80016a2:	bf00      	nop
 80016a4:	200000c4 	.word	0x200000c4

080016a8 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80016ac:	4802      	ldr	r0, [pc, #8]	@ (80016b8 <CAN1_RX1_IRQHandler+0x10>)
 80016ae:	f004 f8d2 	bl	8005856 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 80016b2:	bf00      	nop
 80016b4:	bd80      	pop	{r7, pc}
 80016b6:	bf00      	nop
 80016b8:	200000c4 	.word	0x200000c4

080016bc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80016bc:	b480      	push	{r7}
 80016be:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80016c0:	4b06      	ldr	r3, [pc, #24]	@ (80016dc <SystemInit+0x20>)
 80016c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80016c6:	4a05      	ldr	r2, [pc, #20]	@ (80016dc <SystemInit+0x20>)
 80016c8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80016cc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80016d0:	bf00      	nop
 80016d2:	46bd      	mov	sp, r7
 80016d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d8:	4770      	bx	lr
 80016da:	bf00      	nop
 80016dc:	e000ed00 	.word	0xe000ed00

080016e0 <cell_sorter>:
	}
}


uint8_t cell_sorter(uint8_t *cellsToBalance, uint16_t *cellVoltages, uint16_t *minVcell)
{
 80016e0:	b480      	push	{r7}
 80016e2:	b089      	sub	sp, #36	@ 0x24
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	60f8      	str	r0, [r7, #12]
 80016e8:	60b9      	str	r1, [r7, #8]
 80016ea:	607a      	str	r2, [r7, #4]
	uint16_t minCellVoltage = *cellVoltages;
 80016ec:	68bb      	ldr	r3, [r7, #8]
 80016ee:	881b      	ldrh	r3, [r3, #0]
 80016f0:	83fb      	strh	r3, [r7, #30]
	uint8_t minCellVoltageIndex = 0;
 80016f2:	2300      	movs	r3, #0
 80016f4:	763b      	strb	r3, [r7, #24]
	uint8_t cellsToBalanceQty = 0;
 80016f6:	2300      	movs	r3, #0
 80016f8:	777b      	strb	r3, [r7, #29]

	// For loop below finds the minimum cell voltage & its index
	for(uint8_t i = 1; i < CELL_QTY; i++) {
 80016fa:	2301      	movs	r3, #1
 80016fc:	773b      	strb	r3, [r7, #28]
 80016fe:	e012      	b.n	8001726 <cell_sorter+0x46>
		if(*(cellVoltages + i) < minCellVoltage) {
 8001700:	7f3b      	ldrb	r3, [r7, #28]
 8001702:	005b      	lsls	r3, r3, #1
 8001704:	68ba      	ldr	r2, [r7, #8]
 8001706:	4413      	add	r3, r2
 8001708:	881b      	ldrh	r3, [r3, #0]
 800170a:	8bfa      	ldrh	r2, [r7, #30]
 800170c:	429a      	cmp	r2, r3
 800170e:	d907      	bls.n	8001720 <cell_sorter+0x40>
			minCellVoltage = *(cellVoltages + i);
 8001710:	7f3b      	ldrb	r3, [r7, #28]
 8001712:	005b      	lsls	r3, r3, #1
 8001714:	68ba      	ldr	r2, [r7, #8]
 8001716:	4413      	add	r3, r2
 8001718:	881b      	ldrh	r3, [r3, #0]
 800171a:	83fb      	strh	r3, [r7, #30]
			minCellVoltageIndex = i;
 800171c:	7f3b      	ldrb	r3, [r7, #28]
 800171e:	763b      	strb	r3, [r7, #24]
	for(uint8_t i = 1; i < CELL_QTY; i++) {
 8001720:	7f3b      	ldrb	r3, [r7, #28]
 8001722:	3301      	adds	r3, #1
 8001724:	773b      	strb	r3, [r7, #28]
 8001726:	7f3b      	ldrb	r3, [r7, #28]
 8001728:	2b13      	cmp	r3, #19
 800172a:	d9e9      	bls.n	8001700 <cell_sorter+0x20>
		}
	}
	*minVcell = minCellVoltage;
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	8bfa      	ldrh	r2, [r7, #30]
 8001730:	801a      	strh	r2, [r3, #0]

	// For loop below finds all cells that have a delta greater than the maximum delta
	for(uint8_t i = 0; i < CELL_QTY; i++) {
 8001732:	2300      	movs	r3, #0
 8001734:	76fb      	strb	r3, [r7, #27]
 8001736:	e016      	b.n	8001766 <cell_sorter+0x86>
		if(*(cellVoltages + i) > minCellVoltage + MAX_DELTA) {
 8001738:	7efb      	ldrb	r3, [r7, #27]
 800173a:	005b      	lsls	r3, r3, #1
 800173c:	68ba      	ldr	r2, [r7, #8]
 800173e:	4413      	add	r3, r2
 8001740:	881b      	ldrh	r3, [r3, #0]
 8001742:	461a      	mov	r2, r3
 8001744:	8bfb      	ldrh	r3, [r7, #30]
 8001746:	3364      	adds	r3, #100	@ 0x64
 8001748:	429a      	cmp	r2, r3
 800174a:	dd09      	ble.n	8001760 <cell_sorter+0x80>
			*(cellsToBalance + cellsToBalanceQty) = i + 1;
 800174c:	7f7b      	ldrb	r3, [r7, #29]
 800174e:	68fa      	ldr	r2, [r7, #12]
 8001750:	4413      	add	r3, r2
 8001752:	7efa      	ldrb	r2, [r7, #27]
 8001754:	3201      	adds	r2, #1
 8001756:	b2d2      	uxtb	r2, r2
 8001758:	701a      	strb	r2, [r3, #0]
			cellsToBalanceQty++;
 800175a:	7f7b      	ldrb	r3, [r7, #29]
 800175c:	3301      	adds	r3, #1
 800175e:	777b      	strb	r3, [r7, #29]
	for(uint8_t i = 0; i < CELL_QTY; i++) {
 8001760:	7efb      	ldrb	r3, [r7, #27]
 8001762:	3301      	adds	r3, #1
 8001764:	76fb      	strb	r3, [r7, #27]
 8001766:	7efb      	ldrb	r3, [r7, #27]
 8001768:	2b13      	cmp	r3, #19
 800176a:	d9e5      	bls.n	8001738 <cell_sorter+0x58>
		}
	}

	// For loop below sorts the cells that need to balanced (cellsToBalance array) in descending order
    for (uint8_t i = 0; i < cellsToBalanceQty - 1; i++) {
 800176c:	2300      	movs	r3, #0
 800176e:	76bb      	strb	r3, [r7, #26]
 8001770:	e02e      	b.n	80017d0 <cell_sorter+0xf0>
        for (uint8_t j = 0; j < cellsToBalanceQty - i - 1; j++) {
 8001772:	2300      	movs	r3, #0
 8001774:	767b      	strb	r3, [r7, #25]
 8001776:	e021      	b.n	80017bc <cell_sorter+0xdc>
            if (*(cellsToBalance + j) < *(cellsToBalance + j + 1)) {
 8001778:	7e7b      	ldrb	r3, [r7, #25]
 800177a:	68fa      	ldr	r2, [r7, #12]
 800177c:	4413      	add	r3, r2
 800177e:	781a      	ldrb	r2, [r3, #0]
 8001780:	7e7b      	ldrb	r3, [r7, #25]
 8001782:	3301      	adds	r3, #1
 8001784:	68f9      	ldr	r1, [r7, #12]
 8001786:	440b      	add	r3, r1
 8001788:	781b      	ldrb	r3, [r3, #0]
 800178a:	429a      	cmp	r2, r3
 800178c:	d213      	bcs.n	80017b6 <cell_sorter+0xd6>
                uint8_t dummy = *(cellsToBalance + j);
 800178e:	7e7b      	ldrb	r3, [r7, #25]
 8001790:	68fa      	ldr	r2, [r7, #12]
 8001792:	4413      	add	r3, r2
 8001794:	781b      	ldrb	r3, [r3, #0]
 8001796:	75fb      	strb	r3, [r7, #23]
                *(cellsToBalance + j) = *(cellsToBalance + j + 1);
 8001798:	7e7b      	ldrb	r3, [r7, #25]
 800179a:	3301      	adds	r3, #1
 800179c:	68fa      	ldr	r2, [r7, #12]
 800179e:	441a      	add	r2, r3
 80017a0:	7e7b      	ldrb	r3, [r7, #25]
 80017a2:	68f9      	ldr	r1, [r7, #12]
 80017a4:	440b      	add	r3, r1
 80017a6:	7812      	ldrb	r2, [r2, #0]
 80017a8:	701a      	strb	r2, [r3, #0]
                *(cellsToBalance + j + 1) = dummy;
 80017aa:	7e7b      	ldrb	r3, [r7, #25]
 80017ac:	3301      	adds	r3, #1
 80017ae:	68fa      	ldr	r2, [r7, #12]
 80017b0:	4413      	add	r3, r2
 80017b2:	7dfa      	ldrb	r2, [r7, #23]
 80017b4:	701a      	strb	r2, [r3, #0]
        for (uint8_t j = 0; j < cellsToBalanceQty - i - 1; j++) {
 80017b6:	7e7b      	ldrb	r3, [r7, #25]
 80017b8:	3301      	adds	r3, #1
 80017ba:	767b      	strb	r3, [r7, #25]
 80017bc:	7e7a      	ldrb	r2, [r7, #25]
 80017be:	7f79      	ldrb	r1, [r7, #29]
 80017c0:	7ebb      	ldrb	r3, [r7, #26]
 80017c2:	1acb      	subs	r3, r1, r3
 80017c4:	3b01      	subs	r3, #1
 80017c6:	429a      	cmp	r2, r3
 80017c8:	dbd6      	blt.n	8001778 <cell_sorter+0x98>
    for (uint8_t i = 0; i < cellsToBalanceQty - 1; i++) {
 80017ca:	7ebb      	ldrb	r3, [r7, #26]
 80017cc:	3301      	adds	r3, #1
 80017ce:	76bb      	strb	r3, [r7, #26]
 80017d0:	7eba      	ldrb	r2, [r7, #26]
 80017d2:	7f7b      	ldrb	r3, [r7, #29]
 80017d4:	3b01      	subs	r3, #1
 80017d6:	429a      	cmp	r2, r3
 80017d8:	dbcb      	blt.n	8001772 <cell_sorter+0x92>
            }
        }
    }
    return cellsToBalanceQty;
 80017da:	7f7b      	ldrb	r3, [r7, #29]
}
 80017dc:	4618      	mov	r0, r3
 80017de:	3724      	adds	r7, #36	@ 0x24
 80017e0:	46bd      	mov	sp, r7
 80017e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e6:	4770      	bx	lr

080017e8 <manual_balance>:
	*(payloadRegisterA + 5) = (DCTO << 4) | (DCC10 << 1) | (DCC9 << 0);
}


void manual_balance(void)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b098      	sub	sp, #96	@ 0x60
 80017ec:	af00      	add	r7, sp, #0
	float temperatures[THERM_QTY];

	uint8_t sideA_payloadRegisterA[8];
	uint8_t sideB_payloadRegisterA[8];

	sideA_payloadRegisterA[0] = 0xFE;
 80017ee:	23fe      	movs	r3, #254	@ 0xfe
 80017f0:	733b      	strb	r3, [r7, #12]
	sideA_payloadRegisterA[1] = 0x00;
 80017f2:	2300      	movs	r3, #0
 80017f4:	737b      	strb	r3, [r7, #13]
	sideA_payloadRegisterA[2] = 0x00;
 80017f6:	2300      	movs	r3, #0
 80017f8:	73bb      	strb	r3, [r7, #14]
	sideA_payloadRegisterA[3] = 0x00;
 80017fa:	2300      	movs	r3, #0
 80017fc:	73fb      	strb	r3, [r7, #15]

	sideB_payloadRegisterA[0] = 0xFE;
 80017fe:	23fe      	movs	r3, #254	@ 0xfe
 8001800:	713b      	strb	r3, [r7, #4]
	sideB_payloadRegisterA[1] = 0x00;
 8001802:	2300      	movs	r3, #0
 8001804:	717b      	strb	r3, [r7, #5]
	sideB_payloadRegisterA[2] = 0x00;
 8001806:	2300      	movs	r3, #0
 8001808:	71bb      	strb	r3, [r7, #6]
	sideB_payloadRegisterA[3] = 0x00;
 800180a:	2300      	movs	r3, #0
 800180c:	71fb      	strb	r3, [r7, #7]

	// Tune 4 lines below for DCC & DCTO (DCTO should be 2 minutes, hence the 0x30)
	sideA_payloadRegisterA[4] = 0x00;
 800180e:	2300      	movs	r3, #0
 8001810:	743b      	strb	r3, [r7, #16]
	sideA_payloadRegisterA[5] = 0x00;			// 0x30
 8001812:	2300      	movs	r3, #0
 8001814:	747b      	strb	r3, [r7, #17]
	sideB_payloadRegisterA[4] = 0x00;
 8001816:	2300      	movs	r3, #0
 8001818:	723b      	strb	r3, [r7, #8]
	sideB_payloadRegisterA[5] = 0x00;			// 0x30
 800181a:	2300      	movs	r3, #0
 800181c:	727b      	strb	r3, [r7, #9]

	pull_high(GPIOC, GPIO_PIN_8);		// BALANCE LED
 800181e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001822:	4822      	ldr	r0, [pc, #136]	@ (80018ac <manual_balance+0xc4>)
 8001824:	f001 fd20 	bl	8003268 <pull_high>

	WRCFGA(sideA_payloadRegisterA, SIDE_A);
 8001828:	f107 030c 	add.w	r3, r7, #12
 800182c:	2101      	movs	r1, #1
 800182e:	4618      	mov	r0, r3
 8001830:	f000 fe36 	bl	80024a0 <WRCFGA>
	WRCFGA(sideB_payloadRegisterA, SIDE_B);
 8001834:	1d3b      	adds	r3, r7, #4
 8001836:	2100      	movs	r1, #0
 8001838:	4618      	mov	r0, r3
 800183a:	f000 fe31 	bl	80024a0 <WRCFGA>
	wait(1);
 800183e:	2001      	movs	r0, #1
 8001840:	f001 fd22 	bl	8003288 <wait>

	balanceCounter = 0;
 8001844:	4b1a      	ldr	r3, [pc, #104]	@ (80018b0 <manual_balance+0xc8>)
 8001846:	2200      	movs	r2, #0
 8001848:	601a      	str	r2, [r3, #0]
	while(balanceCounter < 120000) {
 800184a:	e025      	b.n	8001898 <manual_balance+0xb0>
		//resistor_temp_sense();

		temperature_sense(temperatures);
 800184c:	f107 0314 	add.w	r3, r7, #20
 8001850:	4618      	mov	r0, r3
 8001852:	f001 ff35 	bl	80036c0 <temperature_sense>

		for(uint8_t i = 0; i < THERM_QTY; i++) {
 8001856:	2300      	movs	r3, #0
 8001858:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800185c:	e015      	b.n	800188a <manual_balance+0xa2>
			if(temperatures[i] > 60) {
 800185e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8001862:	009b      	lsls	r3, r3, #2
 8001864:	3360      	adds	r3, #96	@ 0x60
 8001866:	443b      	add	r3, r7
 8001868:	3b4c      	subs	r3, #76	@ 0x4c
 800186a:	edd3 7a00 	vldr	s15, [r3]
 800186e:	ed9f 7a11 	vldr	s14, [pc, #68]	@ 80018b4 <manual_balance+0xcc>
 8001872:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001876:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800187a:	dd01      	ble.n	8001880 <manual_balance+0x98>
				manual_emergency_mute();
 800187c:	f000 f81e 	bl	80018bc <manual_emergency_mute>
		for(uint8_t i = 0; i < THERM_QTY; i++) {
 8001880:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8001884:	3301      	adds	r3, #1
 8001886:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800188a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800188e:	2b11      	cmp	r3, #17
 8001890:	d9e5      	bls.n	800185e <manual_balance+0x76>
			}
		}
		wait(2);
 8001892:	2002      	movs	r0, #2
 8001894:	f001 fcf8 	bl	8003288 <wait>
	while(balanceCounter < 120000) {
 8001898:	4b05      	ldr	r3, [pc, #20]	@ (80018b0 <manual_balance+0xc8>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	4a06      	ldr	r2, [pc, #24]	@ (80018b8 <manual_balance+0xd0>)
 800189e:	4293      	cmp	r3, r2
 80018a0:	d9d4      	bls.n	800184c <manual_balance+0x64>
	}

}
 80018a2:	bf00      	nop
 80018a4:	bf00      	nop
 80018a6:	3760      	adds	r7, #96	@ 0x60
 80018a8:	46bd      	mov	sp, r7
 80018aa:	bd80      	pop	{r7, pc}
 80018ac:	40020800 	.word	0x40020800
 80018b0:	200003ec 	.word	0x200003ec
 80018b4:	42700000 	.word	0x42700000
 80018b8:	0001d4bf 	.word	0x0001d4bf

080018bc <manual_emergency_mute>:


void manual_emergency_mute(void)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	af00      	add	r7, sp, #0
	MUTE(SIDE_A);
 80018c0:	2001      	movs	r0, #1
 80018c2:	f000 ff2d 	bl	8002720 <MUTE>
	MUTE(SIDE_B);
 80018c6:	2000      	movs	r0, #0
 80018c8:	f000 ff2a 	bl	8002720 <MUTE>
	wait(1);
 80018cc:	2001      	movs	r0, #1
 80018ce:	f001 fcdb 	bl	8003288 <wait>
	MUTE(SIDE_A);
 80018d2:	2001      	movs	r0, #1
 80018d4:	f000 ff24 	bl	8002720 <MUTE>
	MUTE(SIDE_B);
 80018d8:	2000      	movs	r0, #0
 80018da:	f000 ff21 	bl	8002720 <MUTE>
	while(1) {
		pull_low(GPIOC, GPIO_PIN_7);		// HOT LED
 80018de:	2180      	movs	r1, #128	@ 0x80
 80018e0:	4807      	ldr	r0, [pc, #28]	@ (8001900 <manual_emergency_mute+0x44>)
 80018e2:	f001 fcb1 	bl	8003248 <pull_low>
		wait(250);
 80018e6:	20fa      	movs	r0, #250	@ 0xfa
 80018e8:	f001 fcce 	bl	8003288 <wait>
		pull_high(GPIOC, GPIO_PIN_7);		// HOT LED
 80018ec:	2180      	movs	r1, #128	@ 0x80
 80018ee:	4804      	ldr	r0, [pc, #16]	@ (8001900 <manual_emergency_mute+0x44>)
 80018f0:	f001 fcba 	bl	8003268 <pull_high>
		wait(250);
 80018f4:	20fa      	movs	r0, #250	@ 0xfa
 80018f6:	f001 fcc7 	bl	8003288 <wait>
		pull_low(GPIOC, GPIO_PIN_7);		// HOT LED
 80018fa:	bf00      	nop
 80018fc:	e7ef      	b.n	80018de <manual_emergency_mute+0x22>
 80018fe:	bf00      	nop
 8001900:	40020800 	.word	0x40020800

08001904 <can_transmit>:

}*/


void can_transmit(uint16_t canMsgID, uint8_t *payload)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b08a      	sub	sp, #40	@ 0x28
 8001908:	af00      	add	r7, sp, #0
 800190a:	4603      	mov	r3, r0
 800190c:	6039      	str	r1, [r7, #0]
 800190e:	80fb      	strh	r3, [r7, #6]
	CAN_TxHeaderTypeDef TxHeader;
	uint32_t TxMailbox;

	TxHeader.DLC = 8;
 8001910:	2308      	movs	r3, #8
 8001912:	623b      	str	r3, [r7, #32]
	TxHeader.ExtId = 0;
 8001914:	2300      	movs	r3, #0
 8001916:	617b      	str	r3, [r7, #20]
	TxHeader.IDE = CAN_ID_STD;
 8001918:	2300      	movs	r3, #0
 800191a:	61bb      	str	r3, [r7, #24]
	TxHeader.RTR = CAN_RTR_DATA;
 800191c:	2300      	movs	r3, #0
 800191e:	61fb      	str	r3, [r7, #28]
	TxHeader.StdId = canMsgID;
 8001920:	88fb      	ldrh	r3, [r7, #6]
 8001922:	613b      	str	r3, [r7, #16]
	TxHeader.TransmitGlobalTime = DISABLE;
 8001924:	2300      	movs	r3, #0
 8001926:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24

	HAL_CAN_AddTxMessage(&hcan1, &TxHeader, payload, &TxMailbox);
 800192a:	f107 030c 	add.w	r3, r7, #12
 800192e:	f107 0110 	add.w	r1, r7, #16
 8001932:	683a      	ldr	r2, [r7, #0]
 8001934:	4804      	ldr	r0, [pc, #16]	@ (8001948 <can_transmit+0x44>)
 8001936:	f003 fd74 	bl	8005422 <HAL_CAN_AddTxMessage>
	wait(10);
 800193a:	200a      	movs	r0, #10
 800193c:	f001 fca4 	bl	8003288 <wait>
}
 8001940:	bf00      	nop
 8001942:	3728      	adds	r7, #40	@ 0x28
 8001944:	46bd      	mov	sp, r7
 8001946:	bd80      	pop	{r7, pc}
 8001948:	200000c4 	.word	0x200000c4

0800194c <silent_error_loop>:


void silent_error_loop(void)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	af00      	add	r7, sp, #0
	pull_high(GPIOA, GPIO_PIN_8);		// ACTIVE LED
 8001950:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001954:	4808      	ldr	r0, [pc, #32]	@ (8001978 <silent_error_loop+0x2c>)
 8001956:	f001 fc87 	bl	8003268 <pull_high>
	pull_high(GPIOC, GPIO_PIN_9);		// CHARGE LED
 800195a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800195e:	4807      	ldr	r0, [pc, #28]	@ (800197c <silent_error_loop+0x30>)
 8001960:	f001 fc82 	bl	8003268 <pull_high>
	stop_timer(&htim2);
 8001964:	4806      	ldr	r0, [pc, #24]	@ (8001980 <silent_error_loop+0x34>)
 8001966:	f001 fcf5 	bl	8003354 <stop_timer>
	HAL_CAN_Stop(&hcan1);
 800196a:	4806      	ldr	r0, [pc, #24]	@ (8001984 <silent_error_loop+0x38>)
 800196c:	f003 fd10 	bl	8005390 <HAL_CAN_Stop>
	while(1) {
		wait(10);
 8001970:	200a      	movs	r0, #10
 8001972:	f001 fc89 	bl	8003288 <wait>
 8001976:	e7fb      	b.n	8001970 <silent_error_loop+0x24>
 8001978:	40020000 	.word	0x40020000
 800197c:	40020800 	.word	0x40020800
 8001980:	2000019c 	.word	0x2000019c
 8001984:	200000c4 	.word	0x200000c4

08001988 <error_loop>:
	}
}


void error_loop(uint8_t errorCode, uint16_t faultValue, uint8_t faultIndex)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b084      	sub	sp, #16
 800198c:	af00      	add	r7, sp, #0
 800198e:	4603      	mov	r3, r0
 8001990:	71fb      	strb	r3, [r7, #7]
 8001992:	460b      	mov	r3, r1
 8001994:	80bb      	strh	r3, [r7, #4]
 8001996:	4613      	mov	r3, r2
 8001998:	71bb      	strb	r3, [r7, #6]
	uint8_t msgFault[8];

	msgFault[0] = moduleID;
 800199a:	4b34      	ldr	r3, [pc, #208]	@ (8001a6c <error_loop+0xe4>)
 800199c:	781b      	ldrb	r3, [r3, #0]
 800199e:	723b      	strb	r3, [r7, #8]
	msgFault[1] = errorCode;
 80019a0:	79fb      	ldrb	r3, [r7, #7]
 80019a2:	727b      	strb	r3, [r7, #9]

	switch(errorCode) {
 80019a4:	79fb      	ldrb	r3, [r7, #7]
 80019a6:	2b47      	cmp	r3, #71	@ 0x47
 80019a8:	d028      	beq.n	80019fc <error_loop+0x74>
 80019aa:	2b47      	cmp	r3, #71	@ 0x47
 80019ac:	dc37      	bgt.n	8001a1e <error_loop+0x96>
 80019ae:	2b45      	cmp	r3, #69	@ 0x45
 80019b0:	d002      	beq.n	80019b8 <error_loop+0x30>
 80019b2:	2b46      	cmp	r3, #70	@ 0x46
 80019b4:	d011      	beq.n	80019da <error_loop+0x52>
 80019b6:	e032      	b.n	8001a1e <error_loop+0x96>
		case ERROR_OVERHEAT:
			// Setting cell voltage portions of fault message to zero
			msgFault[2] = 0;
 80019b8:	2300      	movs	r3, #0
 80019ba:	72bb      	strb	r3, [r7, #10]
			msgFault[3] = 0;
 80019bc:	2300      	movs	r3, #0
 80019be:	72fb      	strb	r3, [r7, #11]
			msgFault[4] = 0;
 80019c0:	2300      	movs	r3, #0
 80019c2:	733b      	strb	r3, [r7, #12]

			msgFault[5] = (uint8_t)(faultValue & 0xFF);
 80019c4:	88bb      	ldrh	r3, [r7, #4]
 80019c6:	b2db      	uxtb	r3, r3
 80019c8:	737b      	strb	r3, [r7, #13]
			msgFault[6] = (uint8_t)((faultValue >> 8) & 0xFF);
 80019ca:	88bb      	ldrh	r3, [r7, #4]
 80019cc:	0a1b      	lsrs	r3, r3, #8
 80019ce:	b29b      	uxth	r3, r3
 80019d0:	b2db      	uxtb	r3, r3
 80019d2:	73bb      	strb	r3, [r7, #14]
			msgFault[7] = faultIndex;
 80019d4:	79bb      	ldrb	r3, [r7, #6]
 80019d6:	73fb      	strb	r3, [r7, #15]
			break;
 80019d8:	e02e      	b.n	8001a38 <error_loop+0xb0>
		case ERROR_UNDERVOLT:
			msgFault[2] = (uint8_t)(faultValue & 0xFF);
 80019da:	88bb      	ldrh	r3, [r7, #4]
 80019dc:	b2db      	uxtb	r3, r3
 80019de:	72bb      	strb	r3, [r7, #10]
			msgFault[3] = (uint8_t)((faultValue >> 8) & 0xFF);
 80019e0:	88bb      	ldrh	r3, [r7, #4]
 80019e2:	0a1b      	lsrs	r3, r3, #8
 80019e4:	b29b      	uxth	r3, r3
 80019e6:	b2db      	uxtb	r3, r3
 80019e8:	72fb      	strb	r3, [r7, #11]
			msgFault[4] = faultIndex;
 80019ea:	79bb      	ldrb	r3, [r7, #6]
 80019ec:	733b      	strb	r3, [r7, #12]

			// Setting temperature portions of fault message to zero
			msgFault[5] = 0;
 80019ee:	2300      	movs	r3, #0
 80019f0:	737b      	strb	r3, [r7, #13]
			msgFault[6] = 0;
 80019f2:	2300      	movs	r3, #0
 80019f4:	73bb      	strb	r3, [r7, #14]
			msgFault[7] = 0;
 80019f6:	2300      	movs	r3, #0
 80019f8:	73fb      	strb	r3, [r7, #15]
			break;
 80019fa:	e01d      	b.n	8001a38 <error_loop+0xb0>
		case ERROR_OVERVOLT:
			msgFault[2] = (uint8_t)(faultValue & 0xFF);
 80019fc:	88bb      	ldrh	r3, [r7, #4]
 80019fe:	b2db      	uxtb	r3, r3
 8001a00:	72bb      	strb	r3, [r7, #10]
			msgFault[3] = (uint8_t)((faultValue >> 8) & 0xFF);
 8001a02:	88bb      	ldrh	r3, [r7, #4]
 8001a04:	0a1b      	lsrs	r3, r3, #8
 8001a06:	b29b      	uxth	r3, r3
 8001a08:	b2db      	uxtb	r3, r3
 8001a0a:	72fb      	strb	r3, [r7, #11]
			msgFault[4] = faultIndex;
 8001a0c:	79bb      	ldrb	r3, [r7, #6]
 8001a0e:	733b      	strb	r3, [r7, #12]

			// Setting temperature portions of fault message to zero
			msgFault[5] = 0;
 8001a10:	2300      	movs	r3, #0
 8001a12:	737b      	strb	r3, [r7, #13]
			msgFault[6] = 0;
 8001a14:	2300      	movs	r3, #0
 8001a16:	73bb      	strb	r3, [r7, #14]
			msgFault[7] = 0;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	73fb      	strb	r3, [r7, #15]
			break;
 8001a1c:	e00c      	b.n	8001a38 <error_loop+0xb0>
		default:
			msgFault[2] = 0;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	72bb      	strb	r3, [r7, #10]
			msgFault[3] = 0;
 8001a22:	2300      	movs	r3, #0
 8001a24:	72fb      	strb	r3, [r7, #11]
			msgFault[4] = 0;
 8001a26:	2300      	movs	r3, #0
 8001a28:	733b      	strb	r3, [r7, #12]
			msgFault[5] = 0;
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	737b      	strb	r3, [r7, #13]
			msgFault[6] = 0;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	73bb      	strb	r3, [r7, #14]
			msgFault[7] = 0;
 8001a32:	2300      	movs	r3, #0
 8001a34:	73fb      	strb	r3, [r7, #15]
			break;
 8001a36:	bf00      	nop
	}
	pull_high(GPIOA, GPIO_PIN_8);		// ACTIVE LED
 8001a38:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001a3c:	480c      	ldr	r0, [pc, #48]	@ (8001a70 <error_loop+0xe8>)
 8001a3e:	f001 fc13 	bl	8003268 <pull_high>
	pull_high(GPIOC, GPIO_PIN_9);		// CHARGE LED
 8001a42:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001a46:	480b      	ldr	r0, [pc, #44]	@ (8001a74 <error_loop+0xec>)
 8001a48:	f001 fc0e 	bl	8003268 <pull_high>
	stop_timer(&htim2);
 8001a4c:	480a      	ldr	r0, [pc, #40]	@ (8001a78 <error_loop+0xf0>)
 8001a4e:	f001 fc81 	bl	8003354 <stop_timer>
	while(1) {
		can_transmit(CAN_FAULT_ID, msgFault);
 8001a52:	f107 0308 	add.w	r3, r7, #8
 8001a56:	4619      	mov	r1, r3
 8001a58:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001a5c:	f7ff ff52 	bl	8001904 <can_transmit>
		wait(1000);
 8001a60:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001a64:	f001 fc10 	bl	8003288 <wait>
		can_transmit(CAN_FAULT_ID, msgFault);
 8001a68:	bf00      	nop
 8001a6a:	e7f2      	b.n	8001a52 <error_loop+0xca>
 8001a6c:	08008a08 	.word	0x08008a08
 8001a70:	40020000 	.word	0x40020000
 8001a74:	40020800 	.word	0x40020800
 8001a78:	2000019c 	.word	0x2000019c

08001a7c <transmit_voltages>:
	}
}


void transmit_voltages(uint16_t *cellVoltages)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b08c      	sub	sp, #48	@ 0x30
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
	uint8_t msgV2[8];
	uint8_t msgV3[8];
	uint8_t msgV4[8];
	uint8_t msgV5[8];

	msgV1[0] = (uint8_t)(*cellVoltages & 0xFF);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	881b      	ldrh	r3, [r3, #0]
 8001a88:	b2db      	uxtb	r3, r3
 8001a8a:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
	msgV1[1] = (uint8_t)((*cellVoltages >> 8) & 0xFF);
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	881b      	ldrh	r3, [r3, #0]
 8001a92:	0a1b      	lsrs	r3, r3, #8
 8001a94:	b29b      	uxth	r3, r3
 8001a96:	b2db      	uxtb	r3, r3
 8001a98:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
	msgV1[2] = (uint8_t)(*(cellVoltages + 1) & 0xFF);
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	3302      	adds	r3, #2
 8001aa0:	881b      	ldrh	r3, [r3, #0]
 8001aa2:	b2db      	uxtb	r3, r3
 8001aa4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
	msgV1[3] = (uint8_t)((*(cellVoltages + 1) >> 8) & 0xFF);
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	3302      	adds	r3, #2
 8001aac:	881b      	ldrh	r3, [r3, #0]
 8001aae:	0a1b      	lsrs	r3, r3, #8
 8001ab0:	b29b      	uxth	r3, r3
 8001ab2:	b2db      	uxtb	r3, r3
 8001ab4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
	msgV1[4] = (uint8_t)(*(cellVoltages + 2) & 0xFF);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	3304      	adds	r3, #4
 8001abc:	881b      	ldrh	r3, [r3, #0]
 8001abe:	b2db      	uxtb	r3, r3
 8001ac0:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
	msgV1[5] = (uint8_t)((*(cellVoltages + 2) >> 8) & 0xFF);
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	3304      	adds	r3, #4
 8001ac8:	881b      	ldrh	r3, [r3, #0]
 8001aca:	0a1b      	lsrs	r3, r3, #8
 8001acc:	b29b      	uxth	r3, r3
 8001ace:	b2db      	uxtb	r3, r3
 8001ad0:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
	msgV1[6] = (uint8_t)(*(cellVoltages + 3) & 0xFF);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	3306      	adds	r3, #6
 8001ad8:	881b      	ldrh	r3, [r3, #0]
 8001ada:	b2db      	uxtb	r3, r3
 8001adc:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
	msgV1[7] = (uint8_t)((*(cellVoltages + 3) >> 8) & 0xFF);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	3306      	adds	r3, #6
 8001ae4:	881b      	ldrh	r3, [r3, #0]
 8001ae6:	0a1b      	lsrs	r3, r3, #8
 8001ae8:	b29b      	uxth	r3, r3
 8001aea:	b2db      	uxtb	r3, r3
 8001aec:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

	msgV2[0] = (uint8_t)(*(cellVoltages + 4) & 0xFF);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	3308      	adds	r3, #8
 8001af4:	881b      	ldrh	r3, [r3, #0]
 8001af6:	b2db      	uxtb	r3, r3
 8001af8:	f887 3020 	strb.w	r3, [r7, #32]
	msgV2[1] = (uint8_t)((*(cellVoltages + 4) >> 8) & 0xFF);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	3308      	adds	r3, #8
 8001b00:	881b      	ldrh	r3, [r3, #0]
 8001b02:	0a1b      	lsrs	r3, r3, #8
 8001b04:	b29b      	uxth	r3, r3
 8001b06:	b2db      	uxtb	r3, r3
 8001b08:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
	msgV2[2] = (uint8_t)(*(cellVoltages + 5) & 0xFF);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	330a      	adds	r3, #10
 8001b10:	881b      	ldrh	r3, [r3, #0]
 8001b12:	b2db      	uxtb	r3, r3
 8001b14:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
	msgV2[3] = (uint8_t)((*(cellVoltages + 5) >> 8) & 0xFF);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	330a      	adds	r3, #10
 8001b1c:	881b      	ldrh	r3, [r3, #0]
 8001b1e:	0a1b      	lsrs	r3, r3, #8
 8001b20:	b29b      	uxth	r3, r3
 8001b22:	b2db      	uxtb	r3, r3
 8001b24:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
	msgV2[4] = (uint8_t)(*(cellVoltages + 6) & 0xFF);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	330c      	adds	r3, #12
 8001b2c:	881b      	ldrh	r3, [r3, #0]
 8001b2e:	b2db      	uxtb	r3, r3
 8001b30:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
	msgV2[5] = (uint8_t)((*(cellVoltages + 6) >> 8) & 0xFF);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	330c      	adds	r3, #12
 8001b38:	881b      	ldrh	r3, [r3, #0]
 8001b3a:	0a1b      	lsrs	r3, r3, #8
 8001b3c:	b29b      	uxth	r3, r3
 8001b3e:	b2db      	uxtb	r3, r3
 8001b40:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
	msgV2[6] = (uint8_t)(*(cellVoltages + 7) & 0xFF);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	330e      	adds	r3, #14
 8001b48:	881b      	ldrh	r3, [r3, #0]
 8001b4a:	b2db      	uxtb	r3, r3
 8001b4c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	msgV2[7] = (uint8_t)((*(cellVoltages + 7) >> 8) & 0xFF);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	330e      	adds	r3, #14
 8001b54:	881b      	ldrh	r3, [r3, #0]
 8001b56:	0a1b      	lsrs	r3, r3, #8
 8001b58:	b29b      	uxth	r3, r3
 8001b5a:	b2db      	uxtb	r3, r3
 8001b5c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

	msgV3[0] = (uint8_t)(*(cellVoltages + 8) & 0xFF);
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	3310      	adds	r3, #16
 8001b64:	881b      	ldrh	r3, [r3, #0]
 8001b66:	b2db      	uxtb	r3, r3
 8001b68:	763b      	strb	r3, [r7, #24]
	msgV3[1] = (uint8_t)((*(cellVoltages + 8) >> 8) & 0xFF);
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	3310      	adds	r3, #16
 8001b6e:	881b      	ldrh	r3, [r3, #0]
 8001b70:	0a1b      	lsrs	r3, r3, #8
 8001b72:	b29b      	uxth	r3, r3
 8001b74:	b2db      	uxtb	r3, r3
 8001b76:	767b      	strb	r3, [r7, #25]
	msgV3[2] = (uint8_t)(*(cellVoltages + 9) & 0xFF);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	3312      	adds	r3, #18
 8001b7c:	881b      	ldrh	r3, [r3, #0]
 8001b7e:	b2db      	uxtb	r3, r3
 8001b80:	76bb      	strb	r3, [r7, #26]
	msgV3[3] = (uint8_t)((*(cellVoltages + 9) >> 8) & 0xFF);
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	3312      	adds	r3, #18
 8001b86:	881b      	ldrh	r3, [r3, #0]
 8001b88:	0a1b      	lsrs	r3, r3, #8
 8001b8a:	b29b      	uxth	r3, r3
 8001b8c:	b2db      	uxtb	r3, r3
 8001b8e:	76fb      	strb	r3, [r7, #27]
	msgV3[4] = (uint8_t)(*(cellVoltages + 10) & 0xFF);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	3314      	adds	r3, #20
 8001b94:	881b      	ldrh	r3, [r3, #0]
 8001b96:	b2db      	uxtb	r3, r3
 8001b98:	773b      	strb	r3, [r7, #28]
	msgV3[5] = (uint8_t)((*(cellVoltages + 10) >> 8) & 0xFF);
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	3314      	adds	r3, #20
 8001b9e:	881b      	ldrh	r3, [r3, #0]
 8001ba0:	0a1b      	lsrs	r3, r3, #8
 8001ba2:	b29b      	uxth	r3, r3
 8001ba4:	b2db      	uxtb	r3, r3
 8001ba6:	777b      	strb	r3, [r7, #29]
	msgV3[6] = (uint8_t)(*(cellVoltages + 11) & 0xFF);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	3316      	adds	r3, #22
 8001bac:	881b      	ldrh	r3, [r3, #0]
 8001bae:	b2db      	uxtb	r3, r3
 8001bb0:	77bb      	strb	r3, [r7, #30]
	msgV3[7] = (uint8_t)((*(cellVoltages + 11) >> 8) & 0xFF);
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	3316      	adds	r3, #22
 8001bb6:	881b      	ldrh	r3, [r3, #0]
 8001bb8:	0a1b      	lsrs	r3, r3, #8
 8001bba:	b29b      	uxth	r3, r3
 8001bbc:	b2db      	uxtb	r3, r3
 8001bbe:	77fb      	strb	r3, [r7, #31]

	msgV4[0] = (uint8_t)(*(cellVoltages + 12) & 0xFF);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	3318      	adds	r3, #24
 8001bc4:	881b      	ldrh	r3, [r3, #0]
 8001bc6:	b2db      	uxtb	r3, r3
 8001bc8:	743b      	strb	r3, [r7, #16]
	msgV4[1] = (uint8_t)((*(cellVoltages + 12) >> 8) & 0xFF);
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	3318      	adds	r3, #24
 8001bce:	881b      	ldrh	r3, [r3, #0]
 8001bd0:	0a1b      	lsrs	r3, r3, #8
 8001bd2:	b29b      	uxth	r3, r3
 8001bd4:	b2db      	uxtb	r3, r3
 8001bd6:	747b      	strb	r3, [r7, #17]
	msgV4[2] = (uint8_t)(*(cellVoltages + 13) & 0xFF);
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	331a      	adds	r3, #26
 8001bdc:	881b      	ldrh	r3, [r3, #0]
 8001bde:	b2db      	uxtb	r3, r3
 8001be0:	74bb      	strb	r3, [r7, #18]
	msgV4[3] = (uint8_t)((*(cellVoltages + 13) >> 8) & 0xFF);
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	331a      	adds	r3, #26
 8001be6:	881b      	ldrh	r3, [r3, #0]
 8001be8:	0a1b      	lsrs	r3, r3, #8
 8001bea:	b29b      	uxth	r3, r3
 8001bec:	b2db      	uxtb	r3, r3
 8001bee:	74fb      	strb	r3, [r7, #19]
	msgV4[4] = (uint8_t)(*(cellVoltages + 14) & 0xFF);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	331c      	adds	r3, #28
 8001bf4:	881b      	ldrh	r3, [r3, #0]
 8001bf6:	b2db      	uxtb	r3, r3
 8001bf8:	753b      	strb	r3, [r7, #20]
	msgV4[5] = (uint8_t)((*(cellVoltages + 14) >> 8) & 0xFF);
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	331c      	adds	r3, #28
 8001bfe:	881b      	ldrh	r3, [r3, #0]
 8001c00:	0a1b      	lsrs	r3, r3, #8
 8001c02:	b29b      	uxth	r3, r3
 8001c04:	b2db      	uxtb	r3, r3
 8001c06:	757b      	strb	r3, [r7, #21]
	msgV4[6] = (uint8_t)(*(cellVoltages + 15) & 0xFF);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	331e      	adds	r3, #30
 8001c0c:	881b      	ldrh	r3, [r3, #0]
 8001c0e:	b2db      	uxtb	r3, r3
 8001c10:	75bb      	strb	r3, [r7, #22]
	msgV4[7] = (uint8_t)((*(cellVoltages + 15) >> 8) & 0xFF);
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	331e      	adds	r3, #30
 8001c16:	881b      	ldrh	r3, [r3, #0]
 8001c18:	0a1b      	lsrs	r3, r3, #8
 8001c1a:	b29b      	uxth	r3, r3
 8001c1c:	b2db      	uxtb	r3, r3
 8001c1e:	75fb      	strb	r3, [r7, #23]

	msgV5[0] = (uint8_t)(*(cellVoltages + 16) & 0xFF);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	3320      	adds	r3, #32
 8001c24:	881b      	ldrh	r3, [r3, #0]
 8001c26:	b2db      	uxtb	r3, r3
 8001c28:	723b      	strb	r3, [r7, #8]
	msgV5[1] = (uint8_t)((*(cellVoltages + 16) >> 8) & 0xFF);
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	3320      	adds	r3, #32
 8001c2e:	881b      	ldrh	r3, [r3, #0]
 8001c30:	0a1b      	lsrs	r3, r3, #8
 8001c32:	b29b      	uxth	r3, r3
 8001c34:	b2db      	uxtb	r3, r3
 8001c36:	727b      	strb	r3, [r7, #9]
	msgV5[2] = (uint8_t)(*(cellVoltages + 17) & 0xFF);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	3322      	adds	r3, #34	@ 0x22
 8001c3c:	881b      	ldrh	r3, [r3, #0]
 8001c3e:	b2db      	uxtb	r3, r3
 8001c40:	72bb      	strb	r3, [r7, #10]
	msgV5[3] = (uint8_t)((*(cellVoltages + 17) >> 8) & 0xFF);
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	3322      	adds	r3, #34	@ 0x22
 8001c46:	881b      	ldrh	r3, [r3, #0]
 8001c48:	0a1b      	lsrs	r3, r3, #8
 8001c4a:	b29b      	uxth	r3, r3
 8001c4c:	b2db      	uxtb	r3, r3
 8001c4e:	72fb      	strb	r3, [r7, #11]
	msgV5[4] = (uint8_t)(*(cellVoltages + 18) & 0xFF);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	3324      	adds	r3, #36	@ 0x24
 8001c54:	881b      	ldrh	r3, [r3, #0]
 8001c56:	b2db      	uxtb	r3, r3
 8001c58:	733b      	strb	r3, [r7, #12]
	msgV5[5] = (uint8_t)((*(cellVoltages + 18) >> 8) & 0xFF);
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	3324      	adds	r3, #36	@ 0x24
 8001c5e:	881b      	ldrh	r3, [r3, #0]
 8001c60:	0a1b      	lsrs	r3, r3, #8
 8001c62:	b29b      	uxth	r3, r3
 8001c64:	b2db      	uxtb	r3, r3
 8001c66:	737b      	strb	r3, [r7, #13]
	msgV5[6] = (uint8_t)(*(cellVoltages + 19) & 0xFF);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	3326      	adds	r3, #38	@ 0x26
 8001c6c:	881b      	ldrh	r3, [r3, #0]
 8001c6e:	b2db      	uxtb	r3, r3
 8001c70:	73bb      	strb	r3, [r7, #14]
	msgV5[7] = (uint8_t)((*(cellVoltages + 19) >> 8) & 0xFF);
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	3326      	adds	r3, #38	@ 0x26
 8001c76:	881b      	ldrh	r3, [r3, #0]
 8001c78:	0a1b      	lsrs	r3, r3, #8
 8001c7a:	b29b      	uxth	r3, r3
 8001c7c:	b2db      	uxtb	r3, r3
 8001c7e:	73fb      	strb	r3, [r7, #15]

	switch(moduleID) {
 8001c80:	4b65      	ldr	r3, [pc, #404]	@ (8001e18 <transmit_voltages+0x39c>)
 8001c82:	781b      	ldrb	r3, [r3, #0]
 8001c84:	3b01      	subs	r3, #1
 8001c86:	2b04      	cmp	r3, #4
 8001c88:	f200 80c2 	bhi.w	8001e10 <transmit_voltages+0x394>
 8001c8c:	a201      	add	r2, pc, #4	@ (adr r2, 8001c94 <transmit_voltages+0x218>)
 8001c8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c92:	bf00      	nop
 8001c94:	08001ca9 	.word	0x08001ca9
 8001c98:	08001cf1 	.word	0x08001cf1
 8001c9c:	08001d39 	.word	0x08001d39
 8001ca0:	08001d81 	.word	0x08001d81
 8001ca4:	08001dc9 	.word	0x08001dc9
		case 1:
			can_transmit(CAN_M1_V1_ID, msgV1);
 8001ca8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001cac:	4619      	mov	r1, r3
 8001cae:	f240 30ee 	movw	r0, #1006	@ 0x3ee
 8001cb2:	f7ff fe27 	bl	8001904 <can_transmit>
			can_transmit(CAN_M1_V2_ID, msgV2);
 8001cb6:	f107 0320 	add.w	r3, r7, #32
 8001cba:	4619      	mov	r1, r3
 8001cbc:	f240 30ef 	movw	r0, #1007	@ 0x3ef
 8001cc0:	f7ff fe20 	bl	8001904 <can_transmit>
			can_transmit(CAN_M1_V3_ID, msgV3);
 8001cc4:	f107 0318 	add.w	r3, r7, #24
 8001cc8:	4619      	mov	r1, r3
 8001cca:	f44f 707c 	mov.w	r0, #1008	@ 0x3f0
 8001cce:	f7ff fe19 	bl	8001904 <can_transmit>
			can_transmit(CAN_M1_V4_ID, msgV4);
 8001cd2:	f107 0310 	add.w	r3, r7, #16
 8001cd6:	4619      	mov	r1, r3
 8001cd8:	f240 30f1 	movw	r0, #1009	@ 0x3f1
 8001cdc:	f7ff fe12 	bl	8001904 <can_transmit>
			can_transmit(CAN_M1_V5_ID, msgV5);
 8001ce0:	f107 0308 	add.w	r3, r7, #8
 8001ce4:	4619      	mov	r1, r3
 8001ce6:	f240 30f2 	movw	r0, #1010	@ 0x3f2
 8001cea:	f7ff fe0b 	bl	8001904 <can_transmit>
			break;
 8001cee:	e08f      	b.n	8001e10 <transmit_voltages+0x394>
		case 2:
			can_transmit(CAN_M2_V1_ID, msgV1);
 8001cf0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001cf4:	4619      	mov	r1, r3
 8001cf6:	f240 30f3 	movw	r0, #1011	@ 0x3f3
 8001cfa:	f7ff fe03 	bl	8001904 <can_transmit>
			can_transmit(CAN_M2_V2_ID, msgV2);
 8001cfe:	f107 0320 	add.w	r3, r7, #32
 8001d02:	4619      	mov	r1, r3
 8001d04:	f44f 707d 	mov.w	r0, #1012	@ 0x3f4
 8001d08:	f7ff fdfc 	bl	8001904 <can_transmit>
			can_transmit(CAN_M2_V3_ID, msgV3);
 8001d0c:	f107 0318 	add.w	r3, r7, #24
 8001d10:	4619      	mov	r1, r3
 8001d12:	f240 30f5 	movw	r0, #1013	@ 0x3f5
 8001d16:	f7ff fdf5 	bl	8001904 <can_transmit>
			can_transmit(CAN_M2_V4_ID, msgV4);
 8001d1a:	f107 0310 	add.w	r3, r7, #16
 8001d1e:	4619      	mov	r1, r3
 8001d20:	f240 30f6 	movw	r0, #1014	@ 0x3f6
 8001d24:	f7ff fdee 	bl	8001904 <can_transmit>
			can_transmit(CAN_M2_V5_ID, msgV5);
 8001d28:	f107 0308 	add.w	r3, r7, #8
 8001d2c:	4619      	mov	r1, r3
 8001d2e:	f240 30f7 	movw	r0, #1015	@ 0x3f7
 8001d32:	f7ff fde7 	bl	8001904 <can_transmit>
			break;
 8001d36:	e06b      	b.n	8001e10 <transmit_voltages+0x394>
		case 3:
			can_transmit(CAN_M3_V1_ID, msgV1);
 8001d38:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001d3c:	4619      	mov	r1, r3
 8001d3e:	f44f 707e 	mov.w	r0, #1016	@ 0x3f8
 8001d42:	f7ff fddf 	bl	8001904 <can_transmit>
			can_transmit(CAN_M3_V2_ID, msgV2);
 8001d46:	f107 0320 	add.w	r3, r7, #32
 8001d4a:	4619      	mov	r1, r3
 8001d4c:	f240 30f9 	movw	r0, #1017	@ 0x3f9
 8001d50:	f7ff fdd8 	bl	8001904 <can_transmit>
			can_transmit(CAN_M3_V3_ID, msgV3);
 8001d54:	f107 0318 	add.w	r3, r7, #24
 8001d58:	4619      	mov	r1, r3
 8001d5a:	f240 30fa 	movw	r0, #1018	@ 0x3fa
 8001d5e:	f7ff fdd1 	bl	8001904 <can_transmit>
			can_transmit(CAN_M3_V4_ID, msgV4);
 8001d62:	f107 0310 	add.w	r3, r7, #16
 8001d66:	4619      	mov	r1, r3
 8001d68:	f240 30fb 	movw	r0, #1019	@ 0x3fb
 8001d6c:	f7ff fdca 	bl	8001904 <can_transmit>
			can_transmit(CAN_M3_V5_ID, msgV5);
 8001d70:	f107 0308 	add.w	r3, r7, #8
 8001d74:	4619      	mov	r1, r3
 8001d76:	f44f 707f 	mov.w	r0, #1020	@ 0x3fc
 8001d7a:	f7ff fdc3 	bl	8001904 <can_transmit>
			break;
 8001d7e:	e047      	b.n	8001e10 <transmit_voltages+0x394>
		case 4:
			can_transmit(CAN_M4_V1_ID, msgV1);
 8001d80:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001d84:	4619      	mov	r1, r3
 8001d86:	f240 30fd 	movw	r0, #1021	@ 0x3fd
 8001d8a:	f7ff fdbb 	bl	8001904 <can_transmit>
			can_transmit(CAN_M4_V2_ID, msgV2);
 8001d8e:	f107 0320 	add.w	r3, r7, #32
 8001d92:	4619      	mov	r1, r3
 8001d94:	f240 30fe 	movw	r0, #1022	@ 0x3fe
 8001d98:	f7ff fdb4 	bl	8001904 <can_transmit>
			can_transmit(CAN_M4_V3_ID, msgV3);
 8001d9c:	f107 0318 	add.w	r3, r7, #24
 8001da0:	4619      	mov	r1, r3
 8001da2:	f240 30ff 	movw	r0, #1023	@ 0x3ff
 8001da6:	f7ff fdad 	bl	8001904 <can_transmit>
			can_transmit(CAN_M4_V4_ID, msgV4);
 8001daa:	f107 0310 	add.w	r3, r7, #16
 8001dae:	4619      	mov	r1, r3
 8001db0:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8001db4:	f7ff fda6 	bl	8001904 <can_transmit>
			can_transmit(CAN_M4_V5_ID, msgV5);
 8001db8:	f107 0308 	add.w	r3, r7, #8
 8001dbc:	4619      	mov	r1, r3
 8001dbe:	f240 4001 	movw	r0, #1025	@ 0x401
 8001dc2:	f7ff fd9f 	bl	8001904 <can_transmit>
			break;
 8001dc6:	e023      	b.n	8001e10 <transmit_voltages+0x394>
		case 5:
			can_transmit(CAN_M5_V1_ID, msgV1);
 8001dc8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001dcc:	4619      	mov	r1, r3
 8001dce:	f240 4002 	movw	r0, #1026	@ 0x402
 8001dd2:	f7ff fd97 	bl	8001904 <can_transmit>
			can_transmit(CAN_M5_V2_ID, msgV2);
 8001dd6:	f107 0320 	add.w	r3, r7, #32
 8001dda:	4619      	mov	r1, r3
 8001ddc:	f240 4003 	movw	r0, #1027	@ 0x403
 8001de0:	f7ff fd90 	bl	8001904 <can_transmit>
			can_transmit(CAN_M5_V3_ID, msgV3);
 8001de4:	f107 0318 	add.w	r3, r7, #24
 8001de8:	4619      	mov	r1, r3
 8001dea:	f240 4004 	movw	r0, #1028	@ 0x404
 8001dee:	f7ff fd89 	bl	8001904 <can_transmit>
			can_transmit(CAN_M5_V4_ID, msgV4);
 8001df2:	f107 0310 	add.w	r3, r7, #16
 8001df6:	4619      	mov	r1, r3
 8001df8:	f240 4005 	movw	r0, #1029	@ 0x405
 8001dfc:	f7ff fd82 	bl	8001904 <can_transmit>
			can_transmit(CAN_M5_V5_ID, msgV5);
 8001e00:	f107 0308 	add.w	r3, r7, #8
 8001e04:	4619      	mov	r1, r3
 8001e06:	f240 4006 	movw	r0, #1030	@ 0x406
 8001e0a:	f7ff fd7b 	bl	8001904 <can_transmit>
			break;
 8001e0e:	bf00      	nop
	}
}
 8001e10:	bf00      	nop
 8001e12:	3730      	adds	r7, #48	@ 0x30
 8001e14:	46bd      	mov	sp, r7
 8001e16:	bd80      	pop	{r7, pc}
 8001e18:	08008a08 	.word	0x08008a08

08001e1c <transmit_temperatures>:


void transmit_temperatures(float *temperatures)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b098      	sub	sp, #96	@ 0x60
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
	uint8_t msgT1[8];
	uint8_t msgT2[8];
	uint8_t msgT3[8];
	uint8_t msgT4[8];
	uint8_t msgT5[8];
	float tempScale = 1000.0f;
 8001e24:	4bc4      	ldr	r3, [pc, #784]	@ (8002138 <transmit_temperatures+0x31c>)
 8001e26:	65bb      	str	r3, [r7, #88]	@ 0x58
	uint16_t intTemps[THERM_QTY];

	for(uint8_t i = 0; i < THERM_QTY; i++) {
 8001e28:	2300      	movs	r3, #0
 8001e2a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8001e2e:	e01b      	b.n	8001e68 <transmit_temperatures+0x4c>
		intTemps[i] = (uint16_t)(*(temperatures + i) * tempScale);
 8001e30:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8001e34:	009b      	lsls	r3, r3, #2
 8001e36:	687a      	ldr	r2, [r7, #4]
 8001e38:	4413      	add	r3, r2
 8001e3a:	ed93 7a00 	vldr	s14, [r3]
 8001e3e:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 8001e42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e46:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8001e4a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001e4e:	ee17 2a90 	vmov	r2, s15
 8001e52:	b292      	uxth	r2, r2
 8001e54:	005b      	lsls	r3, r3, #1
 8001e56:	3360      	adds	r3, #96	@ 0x60
 8001e58:	443b      	add	r3, r7
 8001e5a:	f823 2c54 	strh.w	r2, [r3, #-84]
	for(uint8_t i = 0; i < THERM_QTY; i++) {
 8001e5e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8001e62:	3301      	adds	r3, #1
 8001e64:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8001e68:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8001e6c:	2b11      	cmp	r3, #17
 8001e6e:	d9df      	bls.n	8001e30 <transmit_temperatures+0x14>
	}

	msgT1[0] = (uint8_t)(intTemps[0] & 0xFF);
 8001e70:	89bb      	ldrh	r3, [r7, #12]
 8001e72:	b2db      	uxtb	r3, r3
 8001e74:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
	msgT1[1] = (uint8_t)((intTemps[0] >> 8) & 0xFF);
 8001e78:	89bb      	ldrh	r3, [r7, #12]
 8001e7a:	0a1b      	lsrs	r3, r3, #8
 8001e7c:	b29b      	uxth	r3, r3
 8001e7e:	b2db      	uxtb	r3, r3
 8001e80:	f887 3051 	strb.w	r3, [r7, #81]	@ 0x51
	msgT1[2] = (uint8_t)(intTemps[1] & 0xFF);
 8001e84:	89fb      	ldrh	r3, [r7, #14]
 8001e86:	b2db      	uxtb	r3, r3
 8001e88:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
	msgT1[3] = (uint8_t)((intTemps[1] >> 8) & 0xFF);
 8001e8c:	89fb      	ldrh	r3, [r7, #14]
 8001e8e:	0a1b      	lsrs	r3, r3, #8
 8001e90:	b29b      	uxth	r3, r3
 8001e92:	b2db      	uxtb	r3, r3
 8001e94:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
	msgT1[4] = (uint8_t)(intTemps[2] & 0xFF);
 8001e98:	8a3b      	ldrh	r3, [r7, #16]
 8001e9a:	b2db      	uxtb	r3, r3
 8001e9c:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
	msgT1[5] = (uint8_t)((intTemps[2] >> 8) & 0xFF);
 8001ea0:	8a3b      	ldrh	r3, [r7, #16]
 8001ea2:	0a1b      	lsrs	r3, r3, #8
 8001ea4:	b29b      	uxth	r3, r3
 8001ea6:	b2db      	uxtb	r3, r3
 8001ea8:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
	msgT1[6] = (uint8_t)(intTemps[3] & 0xFF);
 8001eac:	8a7b      	ldrh	r3, [r7, #18]
 8001eae:	b2db      	uxtb	r3, r3
 8001eb0:	f887 3056 	strb.w	r3, [r7, #86]	@ 0x56
	msgT1[7] = (uint8_t)((intTemps[3] >> 8) & 0xFF);
 8001eb4:	8a7b      	ldrh	r3, [r7, #18]
 8001eb6:	0a1b      	lsrs	r3, r3, #8
 8001eb8:	b29b      	uxth	r3, r3
 8001eba:	b2db      	uxtb	r3, r3
 8001ebc:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

	msgT2[0] = (uint8_t)(intTemps[4] & 0xFF);
 8001ec0:	8abb      	ldrh	r3, [r7, #20]
 8001ec2:	b2db      	uxtb	r3, r3
 8001ec4:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
	msgT2[1] = (uint8_t)((intTemps[4] >> 8) & 0xFF);
 8001ec8:	8abb      	ldrh	r3, [r7, #20]
 8001eca:	0a1b      	lsrs	r3, r3, #8
 8001ecc:	b29b      	uxth	r3, r3
 8001ece:	b2db      	uxtb	r3, r3
 8001ed0:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
	msgT2[2] = (uint8_t)(intTemps[5] & 0xFF);
 8001ed4:	8afb      	ldrh	r3, [r7, #22]
 8001ed6:	b2db      	uxtb	r3, r3
 8001ed8:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
	msgT2[3] = (uint8_t)((intTemps[5] >> 8) & 0xFF);
 8001edc:	8afb      	ldrh	r3, [r7, #22]
 8001ede:	0a1b      	lsrs	r3, r3, #8
 8001ee0:	b29b      	uxth	r3, r3
 8001ee2:	b2db      	uxtb	r3, r3
 8001ee4:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
	msgT2[4] = (uint8_t)(intTemps[6] & 0xFF);
 8001ee8:	8b3b      	ldrh	r3, [r7, #24]
 8001eea:	b2db      	uxtb	r3, r3
 8001eec:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
	msgT2[5] = (uint8_t)((intTemps[6] >> 8) & 0xFF);
 8001ef0:	8b3b      	ldrh	r3, [r7, #24]
 8001ef2:	0a1b      	lsrs	r3, r3, #8
 8001ef4:	b29b      	uxth	r3, r3
 8001ef6:	b2db      	uxtb	r3, r3
 8001ef8:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d
	msgT2[6] = (uint8_t)(intTemps[7] & 0xFF);
 8001efc:	8b7b      	ldrh	r3, [r7, #26]
 8001efe:	b2db      	uxtb	r3, r3
 8001f00:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
	msgT2[7] = (uint8_t)((intTemps[7] >> 8) & 0xFF);
 8001f04:	8b7b      	ldrh	r3, [r7, #26]
 8001f06:	0a1b      	lsrs	r3, r3, #8
 8001f08:	b29b      	uxth	r3, r3
 8001f0a:	b2db      	uxtb	r3, r3
 8001f0c:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

	msgT3[0] = (uint8_t)(intTemps[8] & 0xFF);
 8001f10:	8bbb      	ldrh	r3, [r7, #28]
 8001f12:	b2db      	uxtb	r3, r3
 8001f14:	f887 3040 	strb.w	r3, [r7, #64]	@ 0x40
	msgT3[1] = (uint8_t)((intTemps[8] >> 8) & 0xFF);
 8001f18:	8bbb      	ldrh	r3, [r7, #28]
 8001f1a:	0a1b      	lsrs	r3, r3, #8
 8001f1c:	b29b      	uxth	r3, r3
 8001f1e:	b2db      	uxtb	r3, r3
 8001f20:	f887 3041 	strb.w	r3, [r7, #65]	@ 0x41
	msgT3[2] = (uint8_t)(intTemps[9] & 0xFF);
 8001f24:	8bfb      	ldrh	r3, [r7, #30]
 8001f26:	b2db      	uxtb	r3, r3
 8001f28:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
	msgT3[3] = (uint8_t)((intTemps[9] >> 8) & 0xFF);
 8001f2c:	8bfb      	ldrh	r3, [r7, #30]
 8001f2e:	0a1b      	lsrs	r3, r3, #8
 8001f30:	b29b      	uxth	r3, r3
 8001f32:	b2db      	uxtb	r3, r3
 8001f34:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
	msgT3[4] = (uint8_t)(intTemps[10] & 0xFF);
 8001f38:	8c3b      	ldrh	r3, [r7, #32]
 8001f3a:	b2db      	uxtb	r3, r3
 8001f3c:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
	msgT3[5] = (uint8_t)((intTemps[10] >> 8) & 0xFF);
 8001f40:	8c3b      	ldrh	r3, [r7, #32]
 8001f42:	0a1b      	lsrs	r3, r3, #8
 8001f44:	b29b      	uxth	r3, r3
 8001f46:	b2db      	uxtb	r3, r3
 8001f48:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
	msgT3[6] = (uint8_t)(intTemps[11] & 0xFF);
 8001f4c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8001f4e:	b2db      	uxtb	r3, r3
 8001f50:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
	msgT3[7] = (uint8_t)((intTemps[11] >> 8) & 0xFF);
 8001f54:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8001f56:	0a1b      	lsrs	r3, r3, #8
 8001f58:	b29b      	uxth	r3, r3
 8001f5a:	b2db      	uxtb	r3, r3
 8001f5c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47

	msgT4[0] = (uint8_t)(intTemps[12] & 0xFF);
 8001f60:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001f62:	b2db      	uxtb	r3, r3
 8001f64:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
	msgT4[1] = (uint8_t)((intTemps[12] >> 8) & 0xFF);
 8001f68:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001f6a:	0a1b      	lsrs	r3, r3, #8
 8001f6c:	b29b      	uxth	r3, r3
 8001f6e:	b2db      	uxtb	r3, r3
 8001f70:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
	msgT4[2] = (uint8_t)(intTemps[13] & 0xFF);
 8001f74:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001f76:	b2db      	uxtb	r3, r3
 8001f78:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
	msgT4[3] = (uint8_t)((intTemps[13] >> 8) & 0xFF);
 8001f7c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001f7e:	0a1b      	lsrs	r3, r3, #8
 8001f80:	b29b      	uxth	r3, r3
 8001f82:	b2db      	uxtb	r3, r3
 8001f84:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
	msgT4[4] = (uint8_t)(intTemps[14] & 0xFF);
 8001f88:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8001f8a:	b2db      	uxtb	r3, r3
 8001f8c:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
	msgT4[5] = (uint8_t)((intTemps[14] >> 8) & 0xFF);
 8001f90:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8001f92:	0a1b      	lsrs	r3, r3, #8
 8001f94:	b29b      	uxth	r3, r3
 8001f96:	b2db      	uxtb	r3, r3
 8001f98:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
	msgT4[6] = (uint8_t)(intTemps[15] & 0xFF);
 8001f9c:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8001f9e:	b2db      	uxtb	r3, r3
 8001fa0:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
	msgT4[7] = (uint8_t)((intTemps[15] >> 8) & 0xFF);
 8001fa4:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8001fa6:	0a1b      	lsrs	r3, r3, #8
 8001fa8:	b29b      	uxth	r3, r3
 8001faa:	b2db      	uxtb	r3, r3
 8001fac:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f

	msgT5[0] = (uint8_t)(intTemps[16] & 0xFF);
 8001fb0:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8001fb2:	b2db      	uxtb	r3, r3
 8001fb4:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
	msgT5[1] = (uint8_t)((intTemps[16] >> 8) & 0xFF);
 8001fb8:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8001fba:	0a1b      	lsrs	r3, r3, #8
 8001fbc:	b29b      	uxth	r3, r3
 8001fbe:	b2db      	uxtb	r3, r3
 8001fc0:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
	msgT5[2] = (uint8_t)(intTemps[17] & 0xFF);
 8001fc4:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8001fc6:	b2db      	uxtb	r3, r3
 8001fc8:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
	msgT5[3] = (uint8_t)((intTemps[17] >> 8) & 0xFF);
 8001fcc:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8001fce:	0a1b      	lsrs	r3, r3, #8
 8001fd0:	b29b      	uxth	r3, r3
 8001fd2:	b2db      	uxtb	r3, r3
 8001fd4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
	msgT5[4] = 0;
 8001fd8:	2300      	movs	r3, #0
 8001fda:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
	msgT5[5] = 0;
 8001fde:	2300      	movs	r3, #0
 8001fe0:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
	msgT5[6] = 0;
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
	msgT5[7] = 0;
 8001fea:	2300      	movs	r3, #0
 8001fec:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

	switch(moduleID) {
 8001ff0:	4b52      	ldr	r3, [pc, #328]	@ (800213c <transmit_temperatures+0x320>)
 8001ff2:	781b      	ldrb	r3, [r3, #0]
 8001ff4:	3b01      	subs	r3, #1
 8001ff6:	2b04      	cmp	r3, #4
 8001ff8:	f200 80c6 	bhi.w	8002188 <transmit_temperatures+0x36c>
 8001ffc:	a201      	add	r2, pc, #4	@ (adr r2, 8002004 <transmit_temperatures+0x1e8>)
 8001ffe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002002:	bf00      	nop
 8002004:	08002019 	.word	0x08002019
 8002008:	08002061 	.word	0x08002061
 800200c:	080020a9 	.word	0x080020a9
 8002010:	080020f1 	.word	0x080020f1
 8002014:	08002141 	.word	0x08002141
		case 1:
			can_transmit(CAN_M1_T1_ID, msgT1);
 8002018:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800201c:	4619      	mov	r1, r3
 800201e:	f240 4007 	movw	r0, #1031	@ 0x407
 8002022:	f7ff fc6f 	bl	8001904 <can_transmit>
			can_transmit(CAN_M1_T2_ID, msgT2);
 8002026:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800202a:	4619      	mov	r1, r3
 800202c:	f44f 6081 	mov.w	r0, #1032	@ 0x408
 8002030:	f7ff fc68 	bl	8001904 <can_transmit>
			can_transmit(CAN_M1_T3_ID, msgT3);
 8002034:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8002038:	4619      	mov	r1, r3
 800203a:	f240 4009 	movw	r0, #1033	@ 0x409
 800203e:	f7ff fc61 	bl	8001904 <can_transmit>
			can_transmit(CAN_M1_T4_ID, msgT4);
 8002042:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002046:	4619      	mov	r1, r3
 8002048:	f240 400a 	movw	r0, #1034	@ 0x40a
 800204c:	f7ff fc5a 	bl	8001904 <can_transmit>
			can_transmit(CAN_M1_T5_ID, msgT5);
 8002050:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002054:	4619      	mov	r1, r3
 8002056:	f240 400b 	movw	r0, #1035	@ 0x40b
 800205a:	f7ff fc53 	bl	8001904 <can_transmit>
			break;
 800205e:	e093      	b.n	8002188 <transmit_temperatures+0x36c>
		case 2:
			can_transmit(CAN_M2_T1_ID, msgT1);
 8002060:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8002064:	4619      	mov	r1, r3
 8002066:	f240 400c 	movw	r0, #1036	@ 0x40c
 800206a:	f7ff fc4b 	bl	8001904 <can_transmit>
			can_transmit(CAN_M2_T2_ID, msgT2);
 800206e:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8002072:	4619      	mov	r1, r3
 8002074:	f240 400d 	movw	r0, #1037	@ 0x40d
 8002078:	f7ff fc44 	bl	8001904 <can_transmit>
			can_transmit(CAN_M2_T3_ID, msgT3);
 800207c:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8002080:	4619      	mov	r1, r3
 8002082:	f240 400e 	movw	r0, #1038	@ 0x40e
 8002086:	f7ff fc3d 	bl	8001904 <can_transmit>
			can_transmit(CAN_M2_T4_ID, msgT4);
 800208a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800208e:	4619      	mov	r1, r3
 8002090:	f240 400f 	movw	r0, #1039	@ 0x40f
 8002094:	f7ff fc36 	bl	8001904 <can_transmit>
			can_transmit(CAN_M2_T5_ID, msgT5);
 8002098:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800209c:	4619      	mov	r1, r3
 800209e:	f44f 6082 	mov.w	r0, #1040	@ 0x410
 80020a2:	f7ff fc2f 	bl	8001904 <can_transmit>
			break;
 80020a6:	e06f      	b.n	8002188 <transmit_temperatures+0x36c>
		case 3:
			can_transmit(CAN_M3_T1_ID, msgT1);
 80020a8:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80020ac:	4619      	mov	r1, r3
 80020ae:	f240 4011 	movw	r0, #1041	@ 0x411
 80020b2:	f7ff fc27 	bl	8001904 <can_transmit>
			can_transmit(CAN_M3_T2_ID, msgT2);
 80020b6:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80020ba:	4619      	mov	r1, r3
 80020bc:	f240 4012 	movw	r0, #1042	@ 0x412
 80020c0:	f7ff fc20 	bl	8001904 <can_transmit>
			can_transmit(CAN_M3_T3_ID, msgT3);
 80020c4:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80020c8:	4619      	mov	r1, r3
 80020ca:	f240 4013 	movw	r0, #1043	@ 0x413
 80020ce:	f7ff fc19 	bl	8001904 <can_transmit>
			can_transmit(CAN_M3_T4_ID, msgT4);
 80020d2:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80020d6:	4619      	mov	r1, r3
 80020d8:	f240 4014 	movw	r0, #1044	@ 0x414
 80020dc:	f7ff fc12 	bl	8001904 <can_transmit>
			can_transmit(CAN_M3_T5_ID, msgT5);
 80020e0:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80020e4:	4619      	mov	r1, r3
 80020e6:	f240 4015 	movw	r0, #1045	@ 0x415
 80020ea:	f7ff fc0b 	bl	8001904 <can_transmit>
			break;
 80020ee:	e04b      	b.n	8002188 <transmit_temperatures+0x36c>
		case 4:
			can_transmit(CAN_M4_T1_ID, msgT1);
 80020f0:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80020f4:	4619      	mov	r1, r3
 80020f6:	f240 4016 	movw	r0, #1046	@ 0x416
 80020fa:	f7ff fc03 	bl	8001904 <can_transmit>
			can_transmit(CAN_M4_T2_ID, msgT2);
 80020fe:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8002102:	4619      	mov	r1, r3
 8002104:	f240 4017 	movw	r0, #1047	@ 0x417
 8002108:	f7ff fbfc 	bl	8001904 <can_transmit>
			can_transmit(CAN_M4_T3_ID, msgT3);
 800210c:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8002110:	4619      	mov	r1, r3
 8002112:	f44f 6083 	mov.w	r0, #1048	@ 0x418
 8002116:	f7ff fbf5 	bl	8001904 <can_transmit>
			can_transmit(CAN_M4_T4_ID, msgT4);
 800211a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800211e:	4619      	mov	r1, r3
 8002120:	f240 4019 	movw	r0, #1049	@ 0x419
 8002124:	f7ff fbee 	bl	8001904 <can_transmit>
			can_transmit(CAN_M4_T5_ID, msgT5);
 8002128:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800212c:	4619      	mov	r1, r3
 800212e:	f240 401a 	movw	r0, #1050	@ 0x41a
 8002132:	f7ff fbe7 	bl	8001904 <can_transmit>
			break;
 8002136:	e027      	b.n	8002188 <transmit_temperatures+0x36c>
 8002138:	447a0000 	.word	0x447a0000
 800213c:	08008a08 	.word	0x08008a08
		case 5:
			can_transmit(CAN_M5_T1_ID, msgT1);
 8002140:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8002144:	4619      	mov	r1, r3
 8002146:	f240 401b 	movw	r0, #1051	@ 0x41b
 800214a:	f7ff fbdb 	bl	8001904 <can_transmit>
			can_transmit(CAN_M5_T2_ID, msgT2);
 800214e:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8002152:	4619      	mov	r1, r3
 8002154:	f240 401c 	movw	r0, #1052	@ 0x41c
 8002158:	f7ff fbd4 	bl	8001904 <can_transmit>
			can_transmit(CAN_M5_T3_ID, msgT3);
 800215c:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8002160:	4619      	mov	r1, r3
 8002162:	f240 401d 	movw	r0, #1053	@ 0x41d
 8002166:	f7ff fbcd 	bl	8001904 <can_transmit>
			can_transmit(CAN_M5_T4_ID, msgT4);
 800216a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800216e:	4619      	mov	r1, r3
 8002170:	f240 401e 	movw	r0, #1054	@ 0x41e
 8002174:	f7ff fbc6 	bl	8001904 <can_transmit>
			can_transmit(CAN_M5_T5_ID, msgT5);
 8002178:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800217c:	4619      	mov	r1, r3
 800217e:	f240 401f 	movw	r0, #1055	@ 0x41f
 8002182:	f7ff fbbf 	bl	8001904 <can_transmit>
			break;
 8002186:	bf00      	nop
	}
}
 8002188:	bf00      	nop
 800218a:	3760      	adds	r7, #96	@ 0x60
 800218c:	46bd      	mov	sp, r7
 800218e:	bd80      	pop	{r7, pc}

08002190 <setup_PEC15>:
uint16_t PEC15_table[256];
uint16_t CRC15_Poly = 0x4599;


void setup_PEC15(void)
{
 8002190:	b480      	push	{r7}
 8002192:	b083      	sub	sp, #12
 8002194:	af00      	add	r7, sp, #0
  uint16_t PEC15_seed = 16;
 8002196:	2310      	movs	r3, #16
 8002198:	80fb      	strh	r3, [r7, #6]

  for (uint16_t i = 0; i < 256; i++) {
 800219a:	2300      	movs	r3, #0
 800219c:	80bb      	strh	r3, [r7, #4]
 800219e:	e024      	b.n	80021ea <setup_PEC15+0x5a>
    PEC15_seed = i << 7;
 80021a0:	88bb      	ldrh	r3, [r7, #4]
 80021a2:	01db      	lsls	r3, r3, #7
 80021a4:	80fb      	strh	r3, [r7, #6]

    for (uint8_t bit = 8; bit > 0; bit--){
 80021a6:	2308      	movs	r3, #8
 80021a8:	70fb      	strb	r3, [r7, #3]
 80021aa:	e013      	b.n	80021d4 <setup_PEC15+0x44>
      if (PEC15_seed & 0x4000) {
 80021ac:	88fb      	ldrh	r3, [r7, #6]
 80021ae:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d008      	beq.n	80021c8 <setup_PEC15+0x38>
        PEC15_seed = ((PEC15_seed << 1));
 80021b6:	88fb      	ldrh	r3, [r7, #6]
 80021b8:	005b      	lsls	r3, r3, #1
 80021ba:	80fb      	strh	r3, [r7, #6]
        PEC15_seed = (PEC15_seed ^ CRC15_Poly);
 80021bc:	4b10      	ldr	r3, [pc, #64]	@ (8002200 <setup_PEC15+0x70>)
 80021be:	881a      	ldrh	r2, [r3, #0]
 80021c0:	88fb      	ldrh	r3, [r7, #6]
 80021c2:	4053      	eors	r3, r2
 80021c4:	80fb      	strh	r3, [r7, #6]
 80021c6:	e002      	b.n	80021ce <setup_PEC15+0x3e>
      }
      else {
        PEC15_seed = ((PEC15_seed << 1));
 80021c8:	88fb      	ldrh	r3, [r7, #6]
 80021ca:	005b      	lsls	r3, r3, #1
 80021cc:	80fb      	strh	r3, [r7, #6]
    for (uint8_t bit = 8; bit > 0; bit--){
 80021ce:	78fb      	ldrb	r3, [r7, #3]
 80021d0:	3b01      	subs	r3, #1
 80021d2:	70fb      	strb	r3, [r7, #3]
 80021d4:	78fb      	ldrb	r3, [r7, #3]
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d1e8      	bne.n	80021ac <setup_PEC15+0x1c>
      }
    }
    PEC15_table[i] = PEC15_seed & 0xFFFF;
 80021da:	88bb      	ldrh	r3, [r7, #4]
 80021dc:	4909      	ldr	r1, [pc, #36]	@ (8002204 <setup_PEC15+0x74>)
 80021de:	88fa      	ldrh	r2, [r7, #6]
 80021e0:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
  for (uint16_t i = 0; i < 256; i++) {
 80021e4:	88bb      	ldrh	r3, [r7, #4]
 80021e6:	3301      	adds	r3, #1
 80021e8:	80bb      	strh	r3, [r7, #4]
 80021ea:	88bb      	ldrh	r3, [r7, #4]
 80021ec:	2bff      	cmp	r3, #255	@ 0xff
 80021ee:	d9d7      	bls.n	80021a0 <setup_PEC15+0x10>
  }
}
 80021f0:	bf00      	nop
 80021f2:	bf00      	nop
 80021f4:	370c      	adds	r7, #12
 80021f6:	46bd      	mov	sp, r7
 80021f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fc:	4770      	bx	lr
 80021fe:	bf00      	nop
 8002200:	20000004 	.word	0x20000004
 8002204:	200001e4 	.word	0x200001e4

08002208 <compute_PEC15>:


uint16_t compute_PEC15(uint8_t *data_ptr, uint8_t len)
{
 8002208:	b480      	push	{r7}
 800220a:	b085      	sub	sp, #20
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
 8002210:	460b      	mov	r3, r1
 8002212:	70fb      	strb	r3, [r7, #3]
  uint16_t PEC15_seed = 16;
 8002214:	2310      	movs	r3, #16
 8002216:	81fb      	strh	r3, [r7, #14]
  uint16_t address;

  for (uint16_t i = 0; i < len; i++) {
 8002218:	2300      	movs	r3, #0
 800221a:	81bb      	strh	r3, [r7, #12]
 800221c:	e019      	b.n	8002252 <compute_PEC15+0x4a>
    address = ((PEC15_seed >> 7) ^ data_ptr[i]) & 0xFF;
 800221e:	89fb      	ldrh	r3, [r7, #14]
 8002220:	09db      	lsrs	r3, r3, #7
 8002222:	b29b      	uxth	r3, r3
 8002224:	89ba      	ldrh	r2, [r7, #12]
 8002226:	6879      	ldr	r1, [r7, #4]
 8002228:	440a      	add	r2, r1
 800222a:	7812      	ldrb	r2, [r2, #0]
 800222c:	4053      	eors	r3, r2
 800222e:	b29b      	uxth	r3, r3
 8002230:	b2db      	uxtb	r3, r3
 8002232:	817b      	strh	r3, [r7, #10]
    PEC15_seed = (PEC15_seed << 8 ) ^ PEC15_table[address];
 8002234:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002238:	021b      	lsls	r3, r3, #8
 800223a:	b21a      	sxth	r2, r3
 800223c:	897b      	ldrh	r3, [r7, #10]
 800223e:	490c      	ldr	r1, [pc, #48]	@ (8002270 <compute_PEC15+0x68>)
 8002240:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8002244:	b21b      	sxth	r3, r3
 8002246:	4053      	eors	r3, r2
 8002248:	b21b      	sxth	r3, r3
 800224a:	81fb      	strh	r3, [r7, #14]
  for (uint16_t i = 0; i < len; i++) {
 800224c:	89bb      	ldrh	r3, [r7, #12]
 800224e:	3301      	adds	r3, #1
 8002250:	81bb      	strh	r3, [r7, #12]
 8002252:	78fb      	ldrb	r3, [r7, #3]
 8002254:	b29b      	uxth	r3, r3
 8002256:	89ba      	ldrh	r2, [r7, #12]
 8002258:	429a      	cmp	r2, r3
 800225a:	d3e0      	bcc.n	800221e <compute_PEC15+0x16>
  }
  return (PEC15_seed * 2);
 800225c:	89fb      	ldrh	r3, [r7, #14]
 800225e:	005b      	lsls	r3, r3, #1
 8002260:	b29b      	uxth	r3, r3
}
 8002262:	4618      	mov	r0, r3
 8002264:	3714      	adds	r7, #20
 8002266:	46bd      	mov	sp, r7
 8002268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226c:	4770      	bx	lr
 800226e:	bf00      	nop
 8002270:	200001e4 	.word	0x200001e4

08002274 <append_PEC>:


void append_PEC(uint8_t *data_ptr, uint8_t len, uint16_t PEC)
{
 8002274:	b480      	push	{r7}
 8002276:	b083      	sub	sp, #12
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
 800227c:	460b      	mov	r3, r1
 800227e:	70fb      	strb	r3, [r7, #3]
 8002280:	4613      	mov	r3, r2
 8002282:	803b      	strh	r3, [r7, #0]
  data_ptr[len] = (PEC >> 8) & 0xFF;
 8002284:	883b      	ldrh	r3, [r7, #0]
 8002286:	0a1b      	lsrs	r3, r3, #8
 8002288:	b299      	uxth	r1, r3
 800228a:	78fb      	ldrb	r3, [r7, #3]
 800228c:	687a      	ldr	r2, [r7, #4]
 800228e:	4413      	add	r3, r2
 8002290:	b2ca      	uxtb	r2, r1
 8002292:	701a      	strb	r2, [r3, #0]
  data_ptr[len + 1] = PEC & 0xFF;
 8002294:	78fb      	ldrb	r3, [r7, #3]
 8002296:	3301      	adds	r3, #1
 8002298:	687a      	ldr	r2, [r7, #4]
 800229a:	4413      	add	r3, r2
 800229c:	883a      	ldrh	r2, [r7, #0]
 800229e:	b2d2      	uxtb	r2, r2
 80022a0:	701a      	strb	r2, [r3, #0]
}
 80022a2:	bf00      	nop
 80022a4:	370c      	adds	r7, #12
 80022a6:	46bd      	mov	sp, r7
 80022a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ac:	4770      	bx	lr

080022ae <verify_PEC15>:


uint8_t verify_PEC15(uint8_t *receivedData_ptr)
{
 80022ae:	b580      	push	{r7, lr}
 80022b0:	b084      	sub	sp, #16
 80022b2:	af00      	add	r7, sp, #0
 80022b4:	6078      	str	r0, [r7, #4]
	uint16_t receivedPEC = (receivedData_ptr[PAYLOAD_LEN - 2] << 8) | receivedData_ptr[PAYLOAD_LEN - 1];
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	3306      	adds	r3, #6
 80022ba:	781b      	ldrb	r3, [r3, #0]
 80022bc:	b21b      	sxth	r3, r3
 80022be:	021b      	lsls	r3, r3, #8
 80022c0:	b21a      	sxth	r2, r3
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	3307      	adds	r3, #7
 80022c6:	781b      	ldrb	r3, [r3, #0]
 80022c8:	b21b      	sxth	r3, r3
 80022ca:	4313      	orrs	r3, r2
 80022cc:	b21b      	sxth	r3, r3
 80022ce:	81fb      	strh	r3, [r7, #14]

	uint16_t calculatedPEC = compute_PEC15(receivedData_ptr, PAYLOAD_LEN - 2);
 80022d0:	2106      	movs	r1, #6
 80022d2:	6878      	ldr	r0, [r7, #4]
 80022d4:	f7ff ff98 	bl	8002208 <compute_PEC15>
 80022d8:	4603      	mov	r3, r0
 80022da:	81bb      	strh	r3, [r7, #12]

	if (receivedPEC == calculatedPEC) { return 2; }
 80022dc:	89fa      	ldrh	r2, [r7, #14]
 80022de:	89bb      	ldrh	r3, [r7, #12]
 80022e0:	429a      	cmp	r2, r3
 80022e2:	d101      	bne.n	80022e8 <verify_PEC15+0x3a>
 80022e4:	2302      	movs	r3, #2
 80022e6:	e000      	b.n	80022ea <verify_PEC15+0x3c>

	else { return 1; }
 80022e8:	2301      	movs	r3, #1
}
 80022ea:	4618      	mov	r0, r3
 80022ec:	3710      	adds	r7, #16
 80022ee:	46bd      	mov	sp, r7
 80022f0:	bd80      	pop	{r7, pc}
	...

080022f4 <action_cmd>:


void action_cmd(uint8_t *cmd_ptr, uint8_t sideA)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b082      	sub	sp, #8
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
 80022fc:	460b      	mov	r3, r1
 80022fe:	70fb      	strb	r3, [r7, #3]
	// TO LTC SIDE A (CELL 1 to 10)
	if (sideA) {
 8002300:	78fb      	ldrb	r3, [r7, #3]
 8002302:	2b00      	cmp	r3, #0
 8002304:	d011      	beq.n	800232a <action_cmd+0x36>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);		// MAKE THIS GENERIC
 8002306:	2200      	movs	r2, #0
 8002308:	2110      	movs	r1, #16
 800230a:	4813      	ldr	r0, [pc, #76]	@ (8002358 <action_cmd+0x64>)
 800230c:	f003 ff82 	bl	8006214 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi1, cmd_ptr, CMD_LEN, HAL_MAX_DELAY);
 8002310:	f04f 33ff 	mov.w	r3, #4294967295
 8002314:	2204      	movs	r2, #4
 8002316:	6879      	ldr	r1, [r7, #4]
 8002318:	4810      	ldr	r0, [pc, #64]	@ (800235c <action_cmd+0x68>)
 800231a:	f004 fdd0 	bl	8006ebe <HAL_SPI_Transmit>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);		// MAKE THIS GENERIC
 800231e:	2201      	movs	r2, #1
 8002320:	2110      	movs	r1, #16
 8002322:	480d      	ldr	r0, [pc, #52]	@ (8002358 <action_cmd+0x64>)
 8002324:	f003 ff76 	bl	8006214 <HAL_GPIO_WritePin>
	else {
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);		// MAKE THIS GENERIC
		HAL_SPI_Transmit(&hspi3, cmd_ptr, CMD_LEN, HAL_MAX_DELAY);
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET);		// MAKE THIS GENERIC
	}
}
 8002328:	e012      	b.n	8002350 <action_cmd+0x5c>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);		// MAKE THIS GENERIC
 800232a:	2200      	movs	r2, #0
 800232c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002330:	4809      	ldr	r0, [pc, #36]	@ (8002358 <action_cmd+0x64>)
 8002332:	f003 ff6f 	bl	8006214 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi3, cmd_ptr, CMD_LEN, HAL_MAX_DELAY);
 8002336:	f04f 33ff 	mov.w	r3, #4294967295
 800233a:	2204      	movs	r2, #4
 800233c:	6879      	ldr	r1, [r7, #4]
 800233e:	4808      	ldr	r0, [pc, #32]	@ (8002360 <action_cmd+0x6c>)
 8002340:	f004 fdbd 	bl	8006ebe <HAL_SPI_Transmit>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET);		// MAKE THIS GENERIC
 8002344:	2201      	movs	r2, #1
 8002346:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800234a:	4803      	ldr	r0, [pc, #12]	@ (8002358 <action_cmd+0x64>)
 800234c:	f003 ff62 	bl	8006214 <HAL_GPIO_WritePin>
}
 8002350:	bf00      	nop
 8002352:	3708      	adds	r7, #8
 8002354:	46bd      	mov	sp, r7
 8002356:	bd80      	pop	{r7, pc}
 8002358:	40020000 	.word	0x40020000
 800235c:	200000ec 	.word	0x200000ec
 8002360:	20000144 	.word	0x20000144

08002364 <write_cmd>:


void write_cmd(uint8_t *cmd_ptr, uint8_t *payload_ptr, uint8_t sideA)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b084      	sub	sp, #16
 8002368:	af00      	add	r7, sp, #0
 800236a:	60f8      	str	r0, [r7, #12]
 800236c:	60b9      	str	r1, [r7, #8]
 800236e:	4613      	mov	r3, r2
 8002370:	71fb      	strb	r3, [r7, #7]
	// TO LTC SIDE A (CELL 1 to 10)
	if (sideA) {
 8002372:	79fb      	ldrb	r3, [r7, #7]
 8002374:	2b00      	cmp	r3, #0
 8002376:	d018      	beq.n	80023aa <write_cmd+0x46>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);		// MAKE THIS GENERIC
 8002378:	2200      	movs	r2, #0
 800237a:	2110      	movs	r1, #16
 800237c:	481a      	ldr	r0, [pc, #104]	@ (80023e8 <write_cmd+0x84>)
 800237e:	f003 ff49 	bl	8006214 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi1, cmd_ptr, CMD_LEN, HAL_MAX_DELAY);
 8002382:	f04f 33ff 	mov.w	r3, #4294967295
 8002386:	2204      	movs	r2, #4
 8002388:	68f9      	ldr	r1, [r7, #12]
 800238a:	4818      	ldr	r0, [pc, #96]	@ (80023ec <write_cmd+0x88>)
 800238c:	f004 fd97 	bl	8006ebe <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi1, payload_ptr, PAYLOAD_LEN, HAL_MAX_DELAY);
 8002390:	f04f 33ff 	mov.w	r3, #4294967295
 8002394:	2208      	movs	r2, #8
 8002396:	68b9      	ldr	r1, [r7, #8]
 8002398:	4814      	ldr	r0, [pc, #80]	@ (80023ec <write_cmd+0x88>)
 800239a:	f004 fd90 	bl	8006ebe <HAL_SPI_Transmit>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);		// MAKE THIS GENERIC
 800239e:	2201      	movs	r2, #1
 80023a0:	2110      	movs	r1, #16
 80023a2:	4811      	ldr	r0, [pc, #68]	@ (80023e8 <write_cmd+0x84>)
 80023a4:	f003 ff36 	bl	8006214 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);		// MAKE THIS GENERIC
		HAL_SPI_Transmit(&hspi3, cmd_ptr, CMD_LEN, HAL_MAX_DELAY);
		HAL_SPI_Transmit(&hspi3, payload_ptr, PAYLOAD_LEN, HAL_MAX_DELAY);
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET);		// MAKE THIS GENERIC
	}
}
 80023a8:	e019      	b.n	80023de <write_cmd+0x7a>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);		// MAKE THIS GENERIC
 80023aa:	2200      	movs	r2, #0
 80023ac:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80023b0:	480d      	ldr	r0, [pc, #52]	@ (80023e8 <write_cmd+0x84>)
 80023b2:	f003 ff2f 	bl	8006214 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi3, cmd_ptr, CMD_LEN, HAL_MAX_DELAY);
 80023b6:	f04f 33ff 	mov.w	r3, #4294967295
 80023ba:	2204      	movs	r2, #4
 80023bc:	68f9      	ldr	r1, [r7, #12]
 80023be:	480c      	ldr	r0, [pc, #48]	@ (80023f0 <write_cmd+0x8c>)
 80023c0:	f004 fd7d 	bl	8006ebe <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi3, payload_ptr, PAYLOAD_LEN, HAL_MAX_DELAY);
 80023c4:	f04f 33ff 	mov.w	r3, #4294967295
 80023c8:	2208      	movs	r2, #8
 80023ca:	68b9      	ldr	r1, [r7, #8]
 80023cc:	4808      	ldr	r0, [pc, #32]	@ (80023f0 <write_cmd+0x8c>)
 80023ce:	f004 fd76 	bl	8006ebe <HAL_SPI_Transmit>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET);		// MAKE THIS GENERIC
 80023d2:	2201      	movs	r2, #1
 80023d4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80023d8:	4803      	ldr	r0, [pc, #12]	@ (80023e8 <write_cmd+0x84>)
 80023da:	f003 ff1b 	bl	8006214 <HAL_GPIO_WritePin>
}
 80023de:	bf00      	nop
 80023e0:	3710      	adds	r7, #16
 80023e2:	46bd      	mov	sp, r7
 80023e4:	bd80      	pop	{r7, pc}
 80023e6:	bf00      	nop
 80023e8:	40020000 	.word	0x40020000
 80023ec:	200000ec 	.word	0x200000ec
 80023f0:	20000144 	.word	0x20000144

080023f4 <read_cmd>:

void read_cmd(uint8_t *cmd_ptr, uint8_t *receivedPayload_ptr, uint8_t sideA)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b088      	sub	sp, #32
 80023f8:	af02      	add	r7, sp, #8
 80023fa:	60f8      	str	r0, [r7, #12]
 80023fc:	60b9      	str	r1, [r7, #8]
 80023fe:	4613      	mov	r3, r2
 8002400:	71fb      	strb	r3, [r7, #7]
	uint8_t dummies[8] = {0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF};
 8002402:	4a23      	ldr	r2, [pc, #140]	@ (8002490 <read_cmd+0x9c>)
 8002404:	f107 0310 	add.w	r3, r7, #16
 8002408:	e892 0003 	ldmia.w	r2, {r0, r1}
 800240c:	e883 0003 	stmia.w	r3, {r0, r1}

	// TO LTC SIDE A (CELL 1 to 10)
	if (sideA) {
 8002410:	79fb      	ldrb	r3, [r7, #7]
 8002412:	2b00      	cmp	r3, #0
 8002414:	d01b      	beq.n	800244e <read_cmd+0x5a>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);		// MAKE THIS GENERIC
 8002416:	2200      	movs	r2, #0
 8002418:	2110      	movs	r1, #16
 800241a:	481e      	ldr	r0, [pc, #120]	@ (8002494 <read_cmd+0xa0>)
 800241c:	f003 fefa 	bl	8006214 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi1, cmd_ptr, CMD_LEN, HAL_MAX_DELAY);
 8002420:	f04f 33ff 	mov.w	r3, #4294967295
 8002424:	2204      	movs	r2, #4
 8002426:	68f9      	ldr	r1, [r7, #12]
 8002428:	481b      	ldr	r0, [pc, #108]	@ (8002498 <read_cmd+0xa4>)
 800242a:	f004 fd48 	bl	8006ebe <HAL_SPI_Transmit>
		HAL_SPI_TransmitReceive(&hspi1, dummies, receivedPayload_ptr, PAYLOAD_LEN, HAL_MAX_DELAY);
 800242e:	f107 0110 	add.w	r1, r7, #16
 8002432:	f04f 33ff 	mov.w	r3, #4294967295
 8002436:	9300      	str	r3, [sp, #0]
 8002438:	2308      	movs	r3, #8
 800243a:	68ba      	ldr	r2, [r7, #8]
 800243c:	4816      	ldr	r0, [pc, #88]	@ (8002498 <read_cmd+0xa4>)
 800243e:	f004 fe82 	bl	8007146 <HAL_SPI_TransmitReceive>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);		// MAKE THIS GENERIC
 8002442:	2201      	movs	r2, #1
 8002444:	2110      	movs	r1, #16
 8002446:	4813      	ldr	r0, [pc, #76]	@ (8002494 <read_cmd+0xa0>)
 8002448:	f003 fee4 	bl	8006214 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);		// MAKE THIS GENERIC
		HAL_SPI_Transmit(&hspi3, cmd_ptr, CMD_LEN, HAL_MAX_DELAY);
		HAL_SPI_TransmitReceive(&hspi3, dummies, receivedPayload_ptr, PAYLOAD_LEN, HAL_MAX_DELAY);
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET);		// MAKE THIS GENERIC
	}
}
 800244c:	e01c      	b.n	8002488 <read_cmd+0x94>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);		// MAKE THIS GENERIC
 800244e:	2200      	movs	r2, #0
 8002450:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002454:	480f      	ldr	r0, [pc, #60]	@ (8002494 <read_cmd+0xa0>)
 8002456:	f003 fedd 	bl	8006214 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi3, cmd_ptr, CMD_LEN, HAL_MAX_DELAY);
 800245a:	f04f 33ff 	mov.w	r3, #4294967295
 800245e:	2204      	movs	r2, #4
 8002460:	68f9      	ldr	r1, [r7, #12]
 8002462:	480e      	ldr	r0, [pc, #56]	@ (800249c <read_cmd+0xa8>)
 8002464:	f004 fd2b 	bl	8006ebe <HAL_SPI_Transmit>
		HAL_SPI_TransmitReceive(&hspi3, dummies, receivedPayload_ptr, PAYLOAD_LEN, HAL_MAX_DELAY);
 8002468:	f107 0110 	add.w	r1, r7, #16
 800246c:	f04f 33ff 	mov.w	r3, #4294967295
 8002470:	9300      	str	r3, [sp, #0]
 8002472:	2308      	movs	r3, #8
 8002474:	68ba      	ldr	r2, [r7, #8]
 8002476:	4809      	ldr	r0, [pc, #36]	@ (800249c <read_cmd+0xa8>)
 8002478:	f004 fe65 	bl	8007146 <HAL_SPI_TransmitReceive>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET);		// MAKE THIS GENERIC
 800247c:	2201      	movs	r2, #1
 800247e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002482:	4804      	ldr	r0, [pc, #16]	@ (8002494 <read_cmd+0xa0>)
 8002484:	f003 fec6 	bl	8006214 <HAL_GPIO_WritePin>
}
 8002488:	bf00      	nop
 800248a:	3718      	adds	r7, #24
 800248c:	46bd      	mov	sp, r7
 800248e:	bd80      	pop	{r7, pc}
 8002490:	080089f0 	.word	0x080089f0
 8002494:	40020000 	.word	0x40020000
 8002498:	200000ec 	.word	0x200000ec
 800249c:	20000144 	.word	0x20000144

080024a0 <WRCFGA>:

// *** WRITE COMMANDS ***
void WRCFGA(uint8_t *payload_ptr, uint8_t side)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b088      	sub	sp, #32
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
 80024a8:	460b      	mov	r3, r1
 80024aa:	70fb      	strb	r3, [r7, #3]
	uint8_t cmd[4];
	uint16_t cmd_PEC;
	uint8_t configRegisterGroupA[8];
	uint16_t configRegisterGroupA_PEC;

	cmd[0] = 0x00;
 80024ac:	2300      	movs	r3, #0
 80024ae:	753b      	strb	r3, [r7, #20]
	cmd[1] = 0x01;
 80024b0:	2301      	movs	r3, #1
 80024b2:	757b      	strb	r3, [r7, #21]
	cmd_PEC = compute_PEC15(cmd, 2);
 80024b4:	f107 0314 	add.w	r3, r7, #20
 80024b8:	2102      	movs	r1, #2
 80024ba:	4618      	mov	r0, r3
 80024bc:	f7ff fea4 	bl	8002208 <compute_PEC15>
 80024c0:	4603      	mov	r3, r0
 80024c2:	83bb      	strh	r3, [r7, #28]
	append_PEC(cmd, 2, cmd_PEC);
 80024c4:	8bba      	ldrh	r2, [r7, #28]
 80024c6:	f107 0314 	add.w	r3, r7, #20
 80024ca:	2102      	movs	r1, #2
 80024cc:	4618      	mov	r0, r3
 80024ce:	f7ff fed1 	bl	8002274 <append_PEC>

	for(uint8_t i = 0; i < 6; i ++) {
 80024d2:	2300      	movs	r3, #0
 80024d4:	77fb      	strb	r3, [r7, #31]
 80024d6:	e00b      	b.n	80024f0 <WRCFGA+0x50>
		configRegisterGroupA[i] = *(payload_ptr + i);
 80024d8:	7ffb      	ldrb	r3, [r7, #31]
 80024da:	687a      	ldr	r2, [r7, #4]
 80024dc:	441a      	add	r2, r3
 80024de:	7ffb      	ldrb	r3, [r7, #31]
 80024e0:	7812      	ldrb	r2, [r2, #0]
 80024e2:	3320      	adds	r3, #32
 80024e4:	443b      	add	r3, r7
 80024e6:	f803 2c14 	strb.w	r2, [r3, #-20]
	for(uint8_t i = 0; i < 6; i ++) {
 80024ea:	7ffb      	ldrb	r3, [r7, #31]
 80024ec:	3301      	adds	r3, #1
 80024ee:	77fb      	strb	r3, [r7, #31]
 80024f0:	7ffb      	ldrb	r3, [r7, #31]
 80024f2:	2b05      	cmp	r3, #5
 80024f4:	d9f0      	bls.n	80024d8 <WRCFGA+0x38>
	}
	configRegisterGroupA_PEC = compute_PEC15(configRegisterGroupA, 6);
 80024f6:	f107 030c 	add.w	r3, r7, #12
 80024fa:	2106      	movs	r1, #6
 80024fc:	4618      	mov	r0, r3
 80024fe:	f7ff fe83 	bl	8002208 <compute_PEC15>
 8002502:	4603      	mov	r3, r0
 8002504:	837b      	strh	r3, [r7, #26]
	append_PEC(configRegisterGroupA, 6, configRegisterGroupA_PEC);
 8002506:	8b7a      	ldrh	r2, [r7, #26]
 8002508:	f107 030c 	add.w	r3, r7, #12
 800250c:	2106      	movs	r1, #6
 800250e:	4618      	mov	r0, r3
 8002510:	f7ff feb0 	bl	8002274 <append_PEC>

	write_cmd(cmd, configRegisterGroupA, side);
 8002514:	78fa      	ldrb	r2, [r7, #3]
 8002516:	f107 010c 	add.w	r1, r7, #12
 800251a:	f107 0314 	add.w	r3, r7, #20
 800251e:	4618      	mov	r0, r3
 8002520:	f7ff ff20 	bl	8002364 <write_cmd>
}
 8002524:	bf00      	nop
 8002526:	3720      	adds	r7, #32
 8002528:	46bd      	mov	sp, r7
 800252a:	bd80      	pop	{r7, pc}

0800252c <RDCFGA>:
// *** END WRITE COMMANDS ***


// *** READ COMMANDS ***
void RDCFGA(uint8_t *configRegisterGroupA_ptr, uint8_t side)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	b084      	sub	sp, #16
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
 8002534:	460b      	mov	r3, r1
 8002536:	70fb      	strb	r3, [r7, #3]
	uint8_t cmd[4];
	uint16_t cmd_PEC;

	cmd[0] = 0x00;
 8002538:	2300      	movs	r3, #0
 800253a:	723b      	strb	r3, [r7, #8]
	cmd[1] = 0x02;
 800253c:	2302      	movs	r3, #2
 800253e:	727b      	strb	r3, [r7, #9]
	cmd_PEC = compute_PEC15(cmd, 2);
 8002540:	f107 0308 	add.w	r3, r7, #8
 8002544:	2102      	movs	r1, #2
 8002546:	4618      	mov	r0, r3
 8002548:	f7ff fe5e 	bl	8002208 <compute_PEC15>
 800254c:	4603      	mov	r3, r0
 800254e:	81fb      	strh	r3, [r7, #14]
	append_PEC(cmd, 2, cmd_PEC);
 8002550:	89fa      	ldrh	r2, [r7, #14]
 8002552:	f107 0308 	add.w	r3, r7, #8
 8002556:	2102      	movs	r1, #2
 8002558:	4618      	mov	r0, r3
 800255a:	f7ff fe8b 	bl	8002274 <append_PEC>

	read_cmd(cmd, configRegisterGroupA_ptr, side);
 800255e:	78fa      	ldrb	r2, [r7, #3]
 8002560:	f107 0308 	add.w	r3, r7, #8
 8002564:	6879      	ldr	r1, [r7, #4]
 8002566:	4618      	mov	r0, r3
 8002568:	f7ff ff44 	bl	80023f4 <read_cmd>
}
 800256c:	bf00      	nop
 800256e:	3710      	adds	r7, #16
 8002570:	46bd      	mov	sp, r7
 8002572:	bd80      	pop	{r7, pc}

08002574 <RDCVA>:
	read_cmd(cmd, configRegisterGroupB_ptr, side);
}


void RDCVA(uint8_t *cellVoltageRegisterGroupA_ptr, uint8_t side)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	b084      	sub	sp, #16
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
 800257c:	460b      	mov	r3, r1
 800257e:	70fb      	strb	r3, [r7, #3]
	uint8_t cmd[4];
	uint16_t cmd_PEC;

	cmd[0] = 0x00;
 8002580:	2300      	movs	r3, #0
 8002582:	723b      	strb	r3, [r7, #8]
	cmd[1] = 0x04;
 8002584:	2304      	movs	r3, #4
 8002586:	727b      	strb	r3, [r7, #9]
	cmd_PEC = compute_PEC15(cmd, 2);
 8002588:	f107 0308 	add.w	r3, r7, #8
 800258c:	2102      	movs	r1, #2
 800258e:	4618      	mov	r0, r3
 8002590:	f7ff fe3a 	bl	8002208 <compute_PEC15>
 8002594:	4603      	mov	r3, r0
 8002596:	81fb      	strh	r3, [r7, #14]
	append_PEC(cmd, 2, cmd_PEC);
 8002598:	89fa      	ldrh	r2, [r7, #14]
 800259a:	f107 0308 	add.w	r3, r7, #8
 800259e:	2102      	movs	r1, #2
 80025a0:	4618      	mov	r0, r3
 80025a2:	f7ff fe67 	bl	8002274 <append_PEC>

	read_cmd(cmd, cellVoltageRegisterGroupA_ptr, side);
 80025a6:	78fa      	ldrb	r2, [r7, #3]
 80025a8:	f107 0308 	add.w	r3, r7, #8
 80025ac:	6879      	ldr	r1, [r7, #4]
 80025ae:	4618      	mov	r0, r3
 80025b0:	f7ff ff20 	bl	80023f4 <read_cmd>
}
 80025b4:	bf00      	nop
 80025b6:	3710      	adds	r7, #16
 80025b8:	46bd      	mov	sp, r7
 80025ba:	bd80      	pop	{r7, pc}

080025bc <RDCVB>:


void RDCVB(uint8_t *cellVoltageRegisterGroupB_ptr, uint8_t side)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b084      	sub	sp, #16
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
 80025c4:	460b      	mov	r3, r1
 80025c6:	70fb      	strb	r3, [r7, #3]
	uint8_t cmd[4];
	uint16_t cmd_PEC;

	cmd[0] = 0x00;
 80025c8:	2300      	movs	r3, #0
 80025ca:	723b      	strb	r3, [r7, #8]
	cmd[1] = 0x06;
 80025cc:	2306      	movs	r3, #6
 80025ce:	727b      	strb	r3, [r7, #9]
	cmd_PEC = compute_PEC15(cmd, 2);
 80025d0:	f107 0308 	add.w	r3, r7, #8
 80025d4:	2102      	movs	r1, #2
 80025d6:	4618      	mov	r0, r3
 80025d8:	f7ff fe16 	bl	8002208 <compute_PEC15>
 80025dc:	4603      	mov	r3, r0
 80025de:	81fb      	strh	r3, [r7, #14]
	append_PEC(cmd, 2, cmd_PEC);
 80025e0:	89fa      	ldrh	r2, [r7, #14]
 80025e2:	f107 0308 	add.w	r3, r7, #8
 80025e6:	2102      	movs	r1, #2
 80025e8:	4618      	mov	r0, r3
 80025ea:	f7ff fe43 	bl	8002274 <append_PEC>

	read_cmd(cmd, cellVoltageRegisterGroupB_ptr, side);
 80025ee:	78fa      	ldrb	r2, [r7, #3]
 80025f0:	f107 0308 	add.w	r3, r7, #8
 80025f4:	6879      	ldr	r1, [r7, #4]
 80025f6:	4618      	mov	r0, r3
 80025f8:	f7ff fefc 	bl	80023f4 <read_cmd>
}
 80025fc:	bf00      	nop
 80025fe:	3710      	adds	r7, #16
 8002600:	46bd      	mov	sp, r7
 8002602:	bd80      	pop	{r7, pc}

08002604 <RDCVC>:


void RDCVC(uint8_t *cellVoltageRegisterGroupC_ptr, uint8_t side)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	b084      	sub	sp, #16
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
 800260c:	460b      	mov	r3, r1
 800260e:	70fb      	strb	r3, [r7, #3]
	uint8_t cmd[4];
	uint16_t cmd_PEC;

	cmd[0] = 0x00;
 8002610:	2300      	movs	r3, #0
 8002612:	723b      	strb	r3, [r7, #8]
	cmd[1] = 0x08;
 8002614:	2308      	movs	r3, #8
 8002616:	727b      	strb	r3, [r7, #9]
	cmd_PEC = compute_PEC15(cmd, 2);
 8002618:	f107 0308 	add.w	r3, r7, #8
 800261c:	2102      	movs	r1, #2
 800261e:	4618      	mov	r0, r3
 8002620:	f7ff fdf2 	bl	8002208 <compute_PEC15>
 8002624:	4603      	mov	r3, r0
 8002626:	81fb      	strh	r3, [r7, #14]
	append_PEC(cmd, 2, cmd_PEC);
 8002628:	89fa      	ldrh	r2, [r7, #14]
 800262a:	f107 0308 	add.w	r3, r7, #8
 800262e:	2102      	movs	r1, #2
 8002630:	4618      	mov	r0, r3
 8002632:	f7ff fe1f 	bl	8002274 <append_PEC>

	read_cmd(cmd, cellVoltageRegisterGroupC_ptr, side);
 8002636:	78fa      	ldrb	r2, [r7, #3]
 8002638:	f107 0308 	add.w	r3, r7, #8
 800263c:	6879      	ldr	r1, [r7, #4]
 800263e:	4618      	mov	r0, r3
 8002640:	f7ff fed8 	bl	80023f4 <read_cmd>
}
 8002644:	bf00      	nop
 8002646:	3710      	adds	r7, #16
 8002648:	46bd      	mov	sp, r7
 800264a:	bd80      	pop	{r7, pc}

0800264c <RDCVD>:


void RDCVD(uint8_t *cellVoltageRegisterGroupD_ptr, uint8_t side)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b084      	sub	sp, #16
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
 8002654:	460b      	mov	r3, r1
 8002656:	70fb      	strb	r3, [r7, #3]
	uint8_t cmd[4];
	uint16_t cmd_PEC;

	cmd[0] = 0x00;
 8002658:	2300      	movs	r3, #0
 800265a:	723b      	strb	r3, [r7, #8]
	cmd[1] = 0x0A;
 800265c:	230a      	movs	r3, #10
 800265e:	727b      	strb	r3, [r7, #9]
	cmd_PEC = compute_PEC15(cmd, 2);
 8002660:	f107 0308 	add.w	r3, r7, #8
 8002664:	2102      	movs	r1, #2
 8002666:	4618      	mov	r0, r3
 8002668:	f7ff fdce 	bl	8002208 <compute_PEC15>
 800266c:	4603      	mov	r3, r0
 800266e:	81fb      	strh	r3, [r7, #14]
	append_PEC(cmd, 2, cmd_PEC);
 8002670:	89fa      	ldrh	r2, [r7, #14]
 8002672:	f107 0308 	add.w	r3, r7, #8
 8002676:	2102      	movs	r1, #2
 8002678:	4618      	mov	r0, r3
 800267a:	f7ff fdfb 	bl	8002274 <append_PEC>

	read_cmd(cmd, cellVoltageRegisterGroupD_ptr, side);
 800267e:	78fa      	ldrb	r2, [r7, #3]
 8002680:	f107 0308 	add.w	r3, r7, #8
 8002684:	6879      	ldr	r1, [r7, #4]
 8002686:	4618      	mov	r0, r3
 8002688:	f7ff feb4 	bl	80023f4 <read_cmd>
}
 800268c:	bf00      	nop
 800268e:	3710      	adds	r7, #16
 8002690:	46bd      	mov	sp, r7
 8002692:	bd80      	pop	{r7, pc}

08002694 <ADCV>:
	action_cmd(cmd, side);
}


void ADCV(uint8_t side)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	b084      	sub	sp, #16
 8002698:	af00      	add	r7, sp, #0
 800269a:	4603      	mov	r3, r0
 800269c:	71fb      	strb	r3, [r7, #7]
	uint8_t cmd[4];
	uint16_t cmd_PEC;

	cmd[0] = 0x03;
 800269e:	2303      	movs	r3, #3
 80026a0:	723b      	strb	r3, [r7, #8]
	cmd[1] = 0x70;
 80026a2:	2370      	movs	r3, #112	@ 0x70
 80026a4:	727b      	strb	r3, [r7, #9]
	cmd_PEC = compute_PEC15(cmd, 2);
 80026a6:	f107 0308 	add.w	r3, r7, #8
 80026aa:	2102      	movs	r1, #2
 80026ac:	4618      	mov	r0, r3
 80026ae:	f7ff fdab 	bl	8002208 <compute_PEC15>
 80026b2:	4603      	mov	r3, r0
 80026b4:	81fb      	strh	r3, [r7, #14]
	append_PEC(cmd, 2, cmd_PEC);
 80026b6:	89fa      	ldrh	r2, [r7, #14]
 80026b8:	f107 0308 	add.w	r3, r7, #8
 80026bc:	2102      	movs	r1, #2
 80026be:	4618      	mov	r0, r3
 80026c0:	f7ff fdd8 	bl	8002274 <append_PEC>

	action_cmd(cmd, side);
 80026c4:	79fa      	ldrb	r2, [r7, #7]
 80026c6:	f107 0308 	add.w	r3, r7, #8
 80026ca:	4611      	mov	r1, r2
 80026cc:	4618      	mov	r0, r3
 80026ce:	f7ff fe11 	bl	80022f4 <action_cmd>
}
 80026d2:	bf00      	nop
 80026d4:	3710      	adds	r7, #16
 80026d6:	46bd      	mov	sp, r7
 80026d8:	bd80      	pop	{r7, pc}

080026da <CLRCELL>:


void CLRCELL(uint8_t side)
{
 80026da:	b580      	push	{r7, lr}
 80026dc:	b084      	sub	sp, #16
 80026de:	af00      	add	r7, sp, #0
 80026e0:	4603      	mov	r3, r0
 80026e2:	71fb      	strb	r3, [r7, #7]
	uint8_t cmd[4];
	uint16_t cmd_PEC;

	cmd[0] = 0x07;
 80026e4:	2307      	movs	r3, #7
 80026e6:	723b      	strb	r3, [r7, #8]
	cmd[1] = 0x11;
 80026e8:	2311      	movs	r3, #17
 80026ea:	727b      	strb	r3, [r7, #9]
	cmd_PEC = compute_PEC15(cmd, 2);
 80026ec:	f107 0308 	add.w	r3, r7, #8
 80026f0:	2102      	movs	r1, #2
 80026f2:	4618      	mov	r0, r3
 80026f4:	f7ff fd88 	bl	8002208 <compute_PEC15>
 80026f8:	4603      	mov	r3, r0
 80026fa:	81fb      	strh	r3, [r7, #14]
	append_PEC(cmd, 2, cmd_PEC);
 80026fc:	89fa      	ldrh	r2, [r7, #14]
 80026fe:	f107 0308 	add.w	r3, r7, #8
 8002702:	2102      	movs	r1, #2
 8002704:	4618      	mov	r0, r3
 8002706:	f7ff fdb5 	bl	8002274 <append_PEC>

	action_cmd(cmd, side);
 800270a:	79fa      	ldrb	r2, [r7, #7]
 800270c:	f107 0308 	add.w	r3, r7, #8
 8002710:	4611      	mov	r1, r2
 8002712:	4618      	mov	r0, r3
 8002714:	f7ff fdee 	bl	80022f4 <action_cmd>
}
 8002718:	bf00      	nop
 800271a:	3710      	adds	r7, #16
 800271c:	46bd      	mov	sp, r7
 800271e:	bd80      	pop	{r7, pc}

08002720 <MUTE>:
	action_cmd(cmd, side);
}


void MUTE(uint8_t side)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	b084      	sub	sp, #16
 8002724:	af00      	add	r7, sp, #0
 8002726:	4603      	mov	r3, r0
 8002728:	71fb      	strb	r3, [r7, #7]
	uint8_t cmd[4];
	uint16_t cmd_PEC;

	cmd[0] = 0x00;
 800272a:	2300      	movs	r3, #0
 800272c:	723b      	strb	r3, [r7, #8]
	cmd[1] = 0x28;
 800272e:	2328      	movs	r3, #40	@ 0x28
 8002730:	727b      	strb	r3, [r7, #9]
	cmd_PEC = compute_PEC15(cmd, 2);
 8002732:	f107 0308 	add.w	r3, r7, #8
 8002736:	2102      	movs	r1, #2
 8002738:	4618      	mov	r0, r3
 800273a:	f7ff fd65 	bl	8002208 <compute_PEC15>
 800273e:	4603      	mov	r3, r0
 8002740:	81fb      	strh	r3, [r7, #14]
	append_PEC(cmd, 2, cmd_PEC);
 8002742:	89fa      	ldrh	r2, [r7, #14]
 8002744:	f107 0308 	add.w	r3, r7, #8
 8002748:	2102      	movs	r1, #2
 800274a:	4618      	mov	r0, r3
 800274c:	f7ff fd92 	bl	8002274 <append_PEC>

	action_cmd(cmd, side);
 8002750:	79fa      	ldrb	r2, [r7, #7]
 8002752:	f107 0308 	add.w	r3, r7, #8
 8002756:	4611      	mov	r1, r2
 8002758:	4618      	mov	r0, r3
 800275a:	f7ff fdcb 	bl	80022f4 <action_cmd>
}
 800275e:	bf00      	nop
 8002760:	3710      	adds	r7, #16
 8002762:	46bd      	mov	sp, r7
 8002764:	bd80      	pop	{r7, pc}
	...

08002768 <force_refup>:
	action_cmd(cmd, side);
}
// *** END ACTION COMMANDS ***

void force_refup(void)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	b084      	sub	sp, #16
 800276c:	af00      	add	r7, sp, #0
	uint8_t attempts = 0;
 800276e:	2300      	movs	r3, #0
 8002770:	73fb      	strb	r3, [r7, #15]

	uint8_t payloadRegisterA[8];

	payloadRegisterA[0] = 0xFE;
 8002772:	23fe      	movs	r3, #254	@ 0xfe
 8002774:	713b      	strb	r3, [r7, #4]
	payloadRegisterA[1] = 0x00;
 8002776:	2300      	movs	r3, #0
 8002778:	717b      	strb	r3, [r7, #5]
	payloadRegisterA[2] = 0x00;
 800277a:	2300      	movs	r3, #0
 800277c:	71bb      	strb	r3, [r7, #6]
	payloadRegisterA[3] = 0x00;
 800277e:	2300      	movs	r3, #0
 8002780:	71fb      	strb	r3, [r7, #7]
	payloadRegisterA[4] = 0x00;
 8002782:	2300      	movs	r3, #0
 8002784:	723b      	strb	r3, [r7, #8]
	payloadRegisterA[5] = 0x00;
 8002786:	2300      	movs	r3, #0
 8002788:	727b      	strb	r3, [r7, #9]

	while(attempts < ATTEMPT_LIMIT) {
 800278a:	e01a      	b.n	80027c2 <force_refup+0x5a>
		WRCFGA(payloadRegisterA, SIDE_A);
 800278c:	1d3b      	adds	r3, r7, #4
 800278e:	2101      	movs	r1, #1
 8002790:	4618      	mov	r0, r3
 8002792:	f7ff fe85 	bl	80024a0 <WRCFGA>
		WRCFGA(payloadRegisterA, SIDE_B);
 8002796:	1d3b      	adds	r3, r7, #4
 8002798:	2100      	movs	r1, #0
 800279a:	4618      	mov	r0, r3
 800279c:	f7ff fe80 	bl	80024a0 <WRCFGA>
		wait(1);
 80027a0:	2001      	movs	r0, #1
 80027a2:	f000 fd71 	bl	8003288 <wait>

		if(refup_check()) { attempts = 13; }
 80027a6:	f000 f849 	bl	800283c <refup_check>
 80027aa:	4603      	mov	r3, r0
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d002      	beq.n	80027b6 <force_refup+0x4e>
 80027b0:	230d      	movs	r3, #13
 80027b2:	73fb      	strb	r3, [r7, #15]
 80027b4:	e005      	b.n	80027c2 <force_refup+0x5a>

		else {
			attempts++;
 80027b6:	7bfb      	ldrb	r3, [r7, #15]
 80027b8:	3301      	adds	r3, #1
 80027ba:	73fb      	strb	r3, [r7, #15]
			wait(1);
 80027bc:	2001      	movs	r0, #1
 80027be:	f000 fd63 	bl	8003288 <wait>
	while(attempts < ATTEMPT_LIMIT) {
 80027c2:	7bfb      	ldrb	r3, [r7, #15]
 80027c4:	2b09      	cmp	r3, #9
 80027c6:	d9e1      	bls.n	800278c <force_refup+0x24>
		}
	}
	if(attempts != 13) {
 80027c8:	7bfb      	ldrb	r3, [r7, #15]
 80027ca:	2b0d      	cmp	r3, #13
 80027cc:	d02d      	beq.n	800282a <force_refup+0xc2>
		//fault nigga
		while(1) {
			pull_high(GPIOA, GPIO_PIN_8);
 80027ce:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80027d2:	4818      	ldr	r0, [pc, #96]	@ (8002834 <force_refup+0xcc>)
 80027d4:	f000 fd48 	bl	8003268 <pull_high>
			pull_high(GPIOC, GPIO_PIN_9);
 80027d8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80027dc:	4816      	ldr	r0, [pc, #88]	@ (8002838 <force_refup+0xd0>)
 80027de:	f000 fd43 	bl	8003268 <pull_high>
			pull_high(GPIOC, GPIO_PIN_8);
 80027e2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80027e6:	4814      	ldr	r0, [pc, #80]	@ (8002838 <force_refup+0xd0>)
 80027e8:	f000 fd3e 	bl	8003268 <pull_high>
			pull_high(GPIOC, GPIO_PIN_7);
 80027ec:	2180      	movs	r1, #128	@ 0x80
 80027ee:	4812      	ldr	r0, [pc, #72]	@ (8002838 <force_refup+0xd0>)
 80027f0:	f000 fd3a 	bl	8003268 <pull_high>
			wait(250);
 80027f4:	20fa      	movs	r0, #250	@ 0xfa
 80027f6:	f000 fd47 	bl	8003288 <wait>
			pull_low(GPIOA, GPIO_PIN_8);
 80027fa:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80027fe:	480d      	ldr	r0, [pc, #52]	@ (8002834 <force_refup+0xcc>)
 8002800:	f000 fd22 	bl	8003248 <pull_low>
			pull_low(GPIOC, GPIO_PIN_9);
 8002804:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002808:	480b      	ldr	r0, [pc, #44]	@ (8002838 <force_refup+0xd0>)
 800280a:	f000 fd1d 	bl	8003248 <pull_low>
			pull_low(GPIOC, GPIO_PIN_8);
 800280e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002812:	4809      	ldr	r0, [pc, #36]	@ (8002838 <force_refup+0xd0>)
 8002814:	f000 fd18 	bl	8003248 <pull_low>
			pull_low(GPIOC, GPIO_PIN_7);
 8002818:	2180      	movs	r1, #128	@ 0x80
 800281a:	4807      	ldr	r0, [pc, #28]	@ (8002838 <force_refup+0xd0>)
 800281c:	f000 fd14 	bl	8003248 <pull_low>
			wait(250);
 8002820:	20fa      	movs	r0, #250	@ 0xfa
 8002822:	f000 fd31 	bl	8003288 <wait>
			pull_high(GPIOA, GPIO_PIN_8);
 8002826:	bf00      	nop
 8002828:	e7d1      	b.n	80027ce <force_refup+0x66>
		}
	}
}
 800282a:	bf00      	nop
 800282c:	3710      	adds	r7, #16
 800282e:	46bd      	mov	sp, r7
 8002830:	bd80      	pop	{r7, pc}
 8002832:	bf00      	nop
 8002834:	40020000 	.word	0x40020000
 8002838:	40020800 	.word	0x40020800

0800283c <refup_check>:


uint8_t refup_check(void)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	b086      	sub	sp, #24
 8002840:	af00      	add	r7, sp, #0
	uint8_t attempts = 0;
 8002842:	2300      	movs	r3, #0
 8002844:	75fb      	strb	r3, [r7, #23]

	uint8_t sideA_configRegisterA[8];
	uint8_t sideB_configRegisterA[8];

	uint8_t sideA_configRegisterA_PECflag = 0;
 8002846:	2300      	movs	r3, #0
 8002848:	753b      	strb	r3, [r7, #20]
	uint8_t sideB_configRegisterA_PECflag = 0;
 800284a:	2300      	movs	r3, #0
 800284c:	74fb      	strb	r3, [r7, #19]

	uint8_t sideA_refonBit;
	uint8_t sideB_refonBit;

	while(attempts < ATTEMPT_LIMIT) {
 800284e:	e032      	b.n	80028b6 <refup_check+0x7a>
		RDCFGA(sideA_configRegisterA, SIDE_A);
 8002850:	f107 0308 	add.w	r3, r7, #8
 8002854:	2101      	movs	r1, #1
 8002856:	4618      	mov	r0, r3
 8002858:	f7ff fe68 	bl	800252c <RDCFGA>
		RDCFGA(sideB_configRegisterA, SIDE_B);
 800285c:	463b      	mov	r3, r7
 800285e:	2100      	movs	r1, #0
 8002860:	4618      	mov	r0, r3
 8002862:	f7ff fe63 	bl	800252c <RDCFGA>

		sideA_configRegisterA_PECflag = verify_PEC15(sideA_configRegisterA);
 8002866:	f107 0308 	add.w	r3, r7, #8
 800286a:	4618      	mov	r0, r3
 800286c:	f7ff fd1f 	bl	80022ae <verify_PEC15>
 8002870:	4603      	mov	r3, r0
 8002872:	753b      	strb	r3, [r7, #20]
		sideB_configRegisterA_PECflag = verify_PEC15(sideB_configRegisterA);
 8002874:	463b      	mov	r3, r7
 8002876:	4618      	mov	r0, r3
 8002878:	f7ff fd19 	bl	80022ae <verify_PEC15>
 800287c:	4603      	mov	r3, r0
 800287e:	74fb      	strb	r3, [r7, #19]

		sideA_refonBit = (sideA_configRegisterA[0] >> 2) & 0x01;
 8002880:	7a3b      	ldrb	r3, [r7, #8]
 8002882:	089b      	lsrs	r3, r3, #2
 8002884:	b2db      	uxtb	r3, r3
 8002886:	f003 0301 	and.w	r3, r3, #1
 800288a:	75bb      	strb	r3, [r7, #22]
		sideB_refonBit = (sideB_configRegisterA[0] >> 2) & 0x01;
 800288c:	783b      	ldrb	r3, [r7, #0]
 800288e:	089b      	lsrs	r3, r3, #2
 8002890:	b2db      	uxtb	r3, r3
 8002892:	f003 0301 	and.w	r3, r3, #1
 8002896:	757b      	strb	r3, [r7, #21]

		if(sideA_configRegisterA_PECflag == 2 && sideB_configRegisterA_PECflag == 2) {
 8002898:	7d3b      	ldrb	r3, [r7, #20]
 800289a:	2b02      	cmp	r3, #2
 800289c:	d105      	bne.n	80028aa <refup_check+0x6e>
 800289e:	7cfb      	ldrb	r3, [r7, #19]
 80028a0:	2b02      	cmp	r3, #2
 80028a2:	d102      	bne.n	80028aa <refup_check+0x6e>
			attempts = 13;
 80028a4:	230d      	movs	r3, #13
 80028a6:	75fb      	strb	r3, [r7, #23]
 80028a8:	e005      	b.n	80028b6 <refup_check+0x7a>
		}
		else {
			attempts++;
 80028aa:	7dfb      	ldrb	r3, [r7, #23]
 80028ac:	3301      	adds	r3, #1
 80028ae:	75fb      	strb	r3, [r7, #23]
			wait(1);
 80028b0:	2001      	movs	r0, #1
 80028b2:	f000 fce9 	bl	8003288 <wait>
	while(attempts < ATTEMPT_LIMIT) {
 80028b6:	7dfb      	ldrb	r3, [r7, #23]
 80028b8:	2b09      	cmp	r3, #9
 80028ba:	d9c9      	bls.n	8002850 <refup_check+0x14>
		}
	}
	if(attempts != 13) {
 80028bc:	7dfb      	ldrb	r3, [r7, #23]
 80028be:	2b0d      	cmp	r3, #13
 80028c0:	d02d      	beq.n	800291e <refup_check+0xe2>
		//fault nigga
		while(1) {
			pull_high(GPIOA, GPIO_PIN_8);
 80028c2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80028c6:	481c      	ldr	r0, [pc, #112]	@ (8002938 <refup_check+0xfc>)
 80028c8:	f000 fcce 	bl	8003268 <pull_high>
			pull_high(GPIOC, GPIO_PIN_9);
 80028cc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80028d0:	481a      	ldr	r0, [pc, #104]	@ (800293c <refup_check+0x100>)
 80028d2:	f000 fcc9 	bl	8003268 <pull_high>
			pull_high(GPIOC, GPIO_PIN_8);
 80028d6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80028da:	4818      	ldr	r0, [pc, #96]	@ (800293c <refup_check+0x100>)
 80028dc:	f000 fcc4 	bl	8003268 <pull_high>
			pull_high(GPIOC, GPIO_PIN_7);
 80028e0:	2180      	movs	r1, #128	@ 0x80
 80028e2:	4816      	ldr	r0, [pc, #88]	@ (800293c <refup_check+0x100>)
 80028e4:	f000 fcc0 	bl	8003268 <pull_high>
			wait(250);
 80028e8:	20fa      	movs	r0, #250	@ 0xfa
 80028ea:	f000 fccd 	bl	8003288 <wait>
			pull_low(GPIOA, GPIO_PIN_8);
 80028ee:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80028f2:	4811      	ldr	r0, [pc, #68]	@ (8002938 <refup_check+0xfc>)
 80028f4:	f000 fca8 	bl	8003248 <pull_low>
			pull_low(GPIOC, GPIO_PIN_9);
 80028f8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80028fc:	480f      	ldr	r0, [pc, #60]	@ (800293c <refup_check+0x100>)
 80028fe:	f000 fca3 	bl	8003248 <pull_low>
			pull_low(GPIOC, GPIO_PIN_8);
 8002902:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002906:	480d      	ldr	r0, [pc, #52]	@ (800293c <refup_check+0x100>)
 8002908:	f000 fc9e 	bl	8003248 <pull_low>
			pull_low(GPIOC, GPIO_PIN_7);
 800290c:	2180      	movs	r1, #128	@ 0x80
 800290e:	480b      	ldr	r0, [pc, #44]	@ (800293c <refup_check+0x100>)
 8002910:	f000 fc9a 	bl	8003248 <pull_low>
			wait(250);
 8002914:	20fa      	movs	r0, #250	@ 0xfa
 8002916:	f000 fcb7 	bl	8003288 <wait>
			pull_high(GPIOA, GPIO_PIN_8);
 800291a:	bf00      	nop
 800291c:	e7d1      	b.n	80028c2 <refup_check+0x86>
		}
	}
	if(sideA_refonBit == 1 && sideB_refonBit == 1) { return 1; }
 800291e:	7dbb      	ldrb	r3, [r7, #22]
 8002920:	2b01      	cmp	r3, #1
 8002922:	d104      	bne.n	800292e <refup_check+0xf2>
 8002924:	7d7b      	ldrb	r3, [r7, #21]
 8002926:	2b01      	cmp	r3, #1
 8002928:	d101      	bne.n	800292e <refup_check+0xf2>
 800292a:	2301      	movs	r3, #1
 800292c:	e000      	b.n	8002930 <refup_check+0xf4>

	else { return 0; }
 800292e:	2300      	movs	r3, #0
}
 8002930:	4618      	mov	r0, r3
 8002932:	3718      	adds	r7, #24
 8002934:	46bd      	mov	sp, r7
 8002936:	bd80      	pop	{r7, pc}
 8002938:	40020000 	.word	0x40020000
 800293c:	40020800 	.word	0x40020800

08002940 <torch_main>:
uint8_t mode;
uint8_t state;


void torch_main(void)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	b0b8      	sub	sp, #224	@ 0xe0
 8002944:	af00      	add	r7, sp, #0
	mode = 3;
 8002946:	4bd0      	ldr	r3, [pc, #832]	@ (8002c88 <torch_main+0x348>)
 8002948:	2203      	movs	r2, #3
 800294a:	701a      	strb	r2, [r3, #0]
	uint8_t RxData[8];

	uint16_t cellVoltages[CELL_QTY];		// Holds all cell voltages within a module
	float temperatures[THERM_QTY];			// Holds all module thermistor temperatures

	uint8_t cellsToBalance[CELL_QTY] = {0};
 800294c:	f107 0308 	add.w	r3, r7, #8
 8002950:	2200      	movs	r2, #0
 8002952:	601a      	str	r2, [r3, #0]
 8002954:	605a      	str	r2, [r3, #4]
 8002956:	609a      	str	r2, [r3, #8]
 8002958:	60da      	str	r2, [r3, #12]
 800295a:	611a      	str	r2, [r3, #16]
	uint8_t cellsToBalanceQty = 0;
 800295c:	2300      	movs	r3, #0
 800295e:	f887 30c7 	strb.w	r3, [r7, #199]	@ 0xc7

	uint16_t packCurrent;
	uint16_t globalMinCellVoltage = 0;			// Holds the minimum cell voltage in the entire pack
 8002962:	2300      	movs	r3, #0
 8002964:	f8a7 30c4 	strh.w	r3, [r7, #196]	@ 0xc4
	uint16_t localMinCellVoltage = 0;
 8002968:	2300      	movs	r3, #0
 800296a:	80fb      	strh	r3, [r7, #6]

	uint8_t overheats = 0;
 800296c:	2300      	movs	r3, #0
 800296e:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
	uint8_t overheatFlag = 0;
 8002972:	2300      	movs	r3, #0
 8002974:	f887 30de 	strb.w	r3, [r7, #222]	@ 0xde

	uint8_t overvolts = 0;
 8002978:	2300      	movs	r3, #0
 800297a:	f887 30dd 	strb.w	r3, [r7, #221]	@ 0xdd
	uint8_t overvoltFlag = 0;
 800297e:	2300      	movs	r3, #0
 8002980:	f887 30dc 	strb.w	r3, [r7, #220]	@ 0xdc

	uint8_t undervolts = 0;
 8002984:	2300      	movs	r3, #0
 8002986:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
	uint8_t undervoltFlag = 0;
 800298a:	2300      	movs	r3, #0
 800298c:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda

	uint8_t doneChargingFlag = 0;		// Status flag that defines how CHARGE state came to an end
 8002990:	2300      	movs	r3, #0
 8002992:	f887 30c3 	strb.w	r3, [r7, #195]	@ 0xc3
	float faultingTemperature;
	uint8_t faultingCellIndex;
	uint16_t faultingCellVoltage;


	pull_low(GPIOA, GPIO_PIN_4);		// LTC6820 side A !SS
 8002996:	2110      	movs	r1, #16
 8002998:	48bc      	ldr	r0, [pc, #752]	@ (8002c8c <torch_main+0x34c>)
 800299a:	f000 fc55 	bl	8003248 <pull_low>
	pull_low(GPIOA, GPIO_PIN_15);		// LTC6820 side B !SS
 800299e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80029a2:	48ba      	ldr	r0, [pc, #744]	@ (8002c8c <torch_main+0x34c>)
 80029a4:	f000 fc50 	bl	8003248 <pull_low>
	pull_high(GPIOC, GPIO_PIN_4);		// LTC6820 side A force EN
 80029a8:	2110      	movs	r1, #16
 80029aa:	48b9      	ldr	r0, [pc, #740]	@ (8002c90 <torch_main+0x350>)
 80029ac:	f000 fc5c 	bl	8003268 <pull_high>
	pull_high(GPIOD, GPIO_PIN_2);		// LTC6820 side B force EN
 80029b0:	2104      	movs	r1, #4
 80029b2:	48b8      	ldr	r0, [pc, #736]	@ (8002c94 <torch_main+0x354>)
 80029b4:	f000 fc58 	bl	8003268 <pull_high>

	// 2 SECOND BUFFER
	start_timer(&htim2);
 80029b8:	48b7      	ldr	r0, [pc, #732]	@ (8002c98 <torch_main+0x358>)
 80029ba:	f000 fc71 	bl	80032a0 <start_timer>
	while(Counter <= 2000) {
 80029be:	e002      	b.n	80029c6 <torch_main+0x86>
		wait(1);
 80029c0:	2001      	movs	r0, #1
 80029c2:	f000 fc61 	bl	8003288 <wait>
	while(Counter <= 2000) {
 80029c6:	4bb5      	ldr	r3, [pc, #724]	@ (8002c9c <torch_main+0x35c>)
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 80029ce:	d9f7      	bls.n	80029c0 <torch_main+0x80>
	}
	stop_timer(&htim2);
 80029d0:	48b1      	ldr	r0, [pc, #708]	@ (8002c98 <torch_main+0x358>)
 80029d2:	f000 fcbf 	bl	8003354 <stop_timer>

	setup_PEC15();
 80029d6:	f7ff fbdb 	bl	8002190 <setup_PEC15>

	// !! MODE = 3 IS STANDALONE ACTIVE !!
	if(mode == 3) {
 80029da:	4bab      	ldr	r3, [pc, #684]	@ (8002c88 <torch_main+0x348>)
 80029dc:	781b      	ldrb	r3, [r3, #0]
 80029de:	2b03      	cmp	r3, #3
 80029e0:	f040 83bb 	bne.w	800315a <torch_main+0x81a>
		transmitCounter = 0;
 80029e4:	4bae      	ldr	r3, [pc, #696]	@ (8002ca0 <torch_main+0x360>)
 80029e6:	2200      	movs	r2, #0
 80029e8:	601a      	str	r2, [r3, #0]
		measureCounter = 0;
 80029ea:	4bae      	ldr	r3, [pc, #696]	@ (8002ca4 <torch_main+0x364>)
 80029ec:	2200      	movs	r2, #0
 80029ee:	601a      	str	r2, [r3, #0]
		state = ACTIVE;						// Change this to CHARGE if you wanna force it to start CHARGE
 80029f0:	4bad      	ldr	r3, [pc, #692]	@ (8002ca8 <torch_main+0x368>)
 80029f2:	2201      	movs	r2, #1
 80029f4:	701a      	strb	r2, [r3, #0]
		pull_high(GPIOA, GPIO_PIN_8);		// TURN ON ACTIVE LED
 80029f6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80029fa:	48a4      	ldr	r0, [pc, #656]	@ (8002c8c <torch_main+0x34c>)
 80029fc:	f000 fc34 	bl	8003268 <pull_high>
		HAL_CAN_Start(&hcan1);
 8002a00:	48aa      	ldr	r0, [pc, #680]	@ (8002cac <torch_main+0x36c>)
 8002a02:	f002 fc81 	bl	8005308 <HAL_CAN_Start>
		start_timer(&htim2);
 8002a06:	48a4      	ldr	r0, [pc, #656]	@ (8002c98 <torch_main+0x358>)
 8002a08:	f000 fc4a 	bl	80032a0 <start_timer>
		force_refup();
 8002a0c:	f7ff feac 	bl	8002768 <force_refup>
	}
	while(mode == 3) {
 8002a10:	e3a3      	b.n	800315a <torch_main+0x81a>
		while(state == ACTIVE) {

			if(measureCounter > 100) {
 8002a12:	4ba4      	ldr	r3, [pc, #656]	@ (8002ca4 <torch_main+0x364>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	2b64      	cmp	r3, #100	@ 0x64
 8002a18:	f240 8102 	bls.w	8002c20 <torch_main+0x2e0>
				if(!refup_check()) {
 8002a1c:	f7ff ff0e 	bl	800283c <refup_check>
 8002a20:	4603      	mov	r3, r0
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d104      	bne.n	8002a30 <torch_main+0xf0>
					force_refup();
 8002a26:	f7ff fe9f 	bl	8002768 <force_refup>
					wait(1);
 8002a2a:	2001      	movs	r0, #1
 8002a2c:	f000 fc2c 	bl	8003288 <wait>
				}

				temperature_sense(temperatures);
 8002a30:	f107 031c 	add.w	r3, r7, #28
 8002a34:	4618      	mov	r0, r3
 8002a36:	f000 fe43 	bl	80036c0 <temperature_sense>
				voltage_sense(cellVoltages);
 8002a3a:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8002a3e:	4618      	mov	r0, r3
 8002a40:	f001 fb82 	bl	8004148 <voltage_sense>

				for(uint8_t i = 0; i < THERM_QTY; i++) {
 8002a44:	2300      	movs	r3, #0
 8002a46:	f887 30cf 	strb.w	r3, [r7, #207]	@ 0xcf
 8002a4a:	e024      	b.n	8002a96 <torch_main+0x156>
					if(temperatures[i] > MAX_TEMPERATURE) {
 8002a4c:	f897 30cf 	ldrb.w	r3, [r7, #207]	@ 0xcf
 8002a50:	009b      	lsls	r3, r3, #2
 8002a52:	33e0      	adds	r3, #224	@ 0xe0
 8002a54:	443b      	add	r3, r7
 8002a56:	3bc4      	subs	r3, #196	@ 0xc4
 8002a58:	edd3 7a00 	vldr	s15, [r3]
 8002a5c:	ed9f 7a94 	vldr	s14, [pc, #592]	@ 8002cb0 <torch_main+0x370>
 8002a60:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002a64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a68:	dd10      	ble.n	8002a8c <torch_main+0x14c>
						overheatFlag = 1;
 8002a6a:	2301      	movs	r3, #1
 8002a6c:	f887 30de 	strb.w	r3, [r7, #222]	@ 0xde
						faultingThermistorIndex = i + 1;
 8002a70:	f897 30cf 	ldrb.w	r3, [r7, #207]	@ 0xcf
 8002a74:	3301      	adds	r3, #1
 8002a76:	f887 30d9 	strb.w	r3, [r7, #217]	@ 0xd9
						faultingTemperature = temperatures[i];
 8002a7a:	f897 30cf 	ldrb.w	r3, [r7, #207]	@ 0xcf
 8002a7e:	009b      	lsls	r3, r3, #2
 8002a80:	33e0      	adds	r3, #224	@ 0xe0
 8002a82:	443b      	add	r3, r7
 8002a84:	3bc4      	subs	r3, #196	@ 0xc4
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
				for(uint8_t i = 0; i < THERM_QTY; i++) {
 8002a8c:	f897 30cf 	ldrb.w	r3, [r7, #207]	@ 0xcf
 8002a90:	3301      	adds	r3, #1
 8002a92:	f887 30cf 	strb.w	r3, [r7, #207]	@ 0xcf
 8002a96:	f897 30cf 	ldrb.w	r3, [r7, #207]	@ 0xcf
 8002a9a:	2b11      	cmp	r3, #17
 8002a9c:	d9d6      	bls.n	8002a4c <torch_main+0x10c>
					}
				}
				if(overheatFlag) { overheats++; }
 8002a9e:	f897 30de 	ldrb.w	r3, [r7, #222]	@ 0xde
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d005      	beq.n	8002ab2 <torch_main+0x172>
 8002aa6:	f897 30df 	ldrb.w	r3, [r7, #223]	@ 0xdf
 8002aaa:	3301      	adds	r3, #1
 8002aac:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
 8002ab0:	e008      	b.n	8002ac4 <torch_main+0x184>

				else {
					if(overheats > 0) { overheats--; }
 8002ab2:	f897 30df 	ldrb.w	r3, [r7, #223]	@ 0xdf
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d004      	beq.n	8002ac4 <torch_main+0x184>
 8002aba:	f897 30df 	ldrb.w	r3, [r7, #223]	@ 0xdf
 8002abe:	3b01      	subs	r3, #1
 8002ac0:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
				}
				// MODULE OVERHEAT FAULT
				if(overheats > ATTEMPT_LIMIT) {
 8002ac4:	f897 30df 	ldrb.w	r3, [r7, #223]	@ 0xdf
 8002ac8:	2b0a      	cmp	r3, #10
 8002aca:	d916      	bls.n	8002afa <torch_main+0x1ba>
					float tempScale = 1000.0f;
 8002acc:	4b79      	ldr	r3, [pc, #484]	@ (8002cb4 <torch_main+0x374>)
 8002ace:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
					uint16_t intFaultingTemperature = (uint16_t)(faultingTemperature * tempScale);
 8002ad2:	ed97 7a35 	vldr	s14, [r7, #212]	@ 0xd4
 8002ad6:	edd7 7a2d 	vldr	s15, [r7, #180]	@ 0xb4
 8002ada:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ade:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002ae2:	ee17 3a90 	vmov	r3, s15
 8002ae6:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2

					error_loop(ERROR_OVERHEAT, intFaultingTemperature, faultingThermistorIndex);
 8002aea:	f897 20d9 	ldrb.w	r2, [r7, #217]	@ 0xd9
 8002aee:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 8002af2:	4619      	mov	r1, r3
 8002af4:	2045      	movs	r0, #69	@ 0x45
 8002af6:	f7fe ff47 	bl	8001988 <error_loop>
				}

				for(uint8_t i = 0; i < CELL_QTY; i++) {
 8002afa:	2300      	movs	r3, #0
 8002afc:	f887 30ce 	strb.w	r3, [r7, #206]	@ 0xce
 8002b00:	e03d      	b.n	8002b7e <torch_main+0x23e>
					if(cellVoltages[i] > MAX_CELL_VOLTAGE) {
 8002b02:	f897 30ce 	ldrb.w	r3, [r7, #206]	@ 0xce
 8002b06:	005b      	lsls	r3, r3, #1
 8002b08:	33e0      	adds	r3, #224	@ 0xe0
 8002b0a:	443b      	add	r3, r7
 8002b0c:	f833 3c7c 	ldrh.w	r3, [r3, #-124]
 8002b10:	f24a 4210 	movw	r2, #42000	@ 0xa410
 8002b14:	4293      	cmp	r3, r2
 8002b16:	d911      	bls.n	8002b3c <torch_main+0x1fc>
						overvoltFlag = 1;
 8002b18:	2301      	movs	r3, #1
 8002b1a:	f887 30dc 	strb.w	r3, [r7, #220]	@ 0xdc
						faultingCellIndex = i + 1;
 8002b1e:	f897 30ce 	ldrb.w	r3, [r7, #206]	@ 0xce
 8002b22:	3301      	adds	r3, #1
 8002b24:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
						faultingCellVoltage = cellVoltages[i];
 8002b28:	f897 30ce 	ldrb.w	r3, [r7, #206]	@ 0xce
 8002b2c:	005b      	lsls	r3, r3, #1
 8002b2e:	33e0      	adds	r3, #224	@ 0xe0
 8002b30:	443b      	add	r3, r7
 8002b32:	f833 3c7c 	ldrh.w	r3, [r3, #-124]
 8002b36:	f8a7 30d0 	strh.w	r3, [r7, #208]	@ 0xd0
 8002b3a:	e01b      	b.n	8002b74 <torch_main+0x234>
					}
					else if(cellVoltages[i] < MIN_CELL_VOLTAGE) {
 8002b3c:	f897 30ce 	ldrb.w	r3, [r7, #206]	@ 0xce
 8002b40:	005b      	lsls	r3, r3, #1
 8002b42:	33e0      	adds	r3, #224	@ 0xe0
 8002b44:	443b      	add	r3, r7
 8002b46:	f833 3c7c 	ldrh.w	r3, [r3, #-124]
 8002b4a:	f246 12a7 	movw	r2, #24999	@ 0x61a7
 8002b4e:	4293      	cmp	r3, r2
 8002b50:	d810      	bhi.n	8002b74 <torch_main+0x234>
						undervoltFlag = 1;
 8002b52:	2301      	movs	r3, #1
 8002b54:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
						faultingCellIndex = i + 1;
 8002b58:	f897 30ce 	ldrb.w	r3, [r7, #206]	@ 0xce
 8002b5c:	3301      	adds	r3, #1
 8002b5e:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
						faultingCellVoltage = cellVoltages[i];
 8002b62:	f897 30ce 	ldrb.w	r3, [r7, #206]	@ 0xce
 8002b66:	005b      	lsls	r3, r3, #1
 8002b68:	33e0      	adds	r3, #224	@ 0xe0
 8002b6a:	443b      	add	r3, r7
 8002b6c:	f833 3c7c 	ldrh.w	r3, [r3, #-124]
 8002b70:	f8a7 30d0 	strh.w	r3, [r7, #208]	@ 0xd0
				for(uint8_t i = 0; i < CELL_QTY; i++) {
 8002b74:	f897 30ce 	ldrb.w	r3, [r7, #206]	@ 0xce
 8002b78:	3301      	adds	r3, #1
 8002b7a:	f887 30ce 	strb.w	r3, [r7, #206]	@ 0xce
 8002b7e:	f897 30ce 	ldrb.w	r3, [r7, #206]	@ 0xce
 8002b82:	2b13      	cmp	r3, #19
 8002b84:	d9bd      	bls.n	8002b02 <torch_main+0x1c2>
					}
				}
				if(overvoltFlag) { overvolts++; }
 8002b86:	f897 30dc 	ldrb.w	r3, [r7, #220]	@ 0xdc
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d004      	beq.n	8002b98 <torch_main+0x258>
 8002b8e:	f897 30dd 	ldrb.w	r3, [r7, #221]	@ 0xdd
 8002b92:	3301      	adds	r3, #1
 8002b94:	f887 30dd 	strb.w	r3, [r7, #221]	@ 0xdd

				if(undervoltFlag) { undervolts++; }
 8002b98:	f897 30da 	ldrb.w	r3, [r7, #218]	@ 0xda
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d004      	beq.n	8002baa <torch_main+0x26a>
 8002ba0:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8002ba4:	3301      	adds	r3, #1
 8002ba6:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb

				if(overvoltFlag == 0 && undervoltFlag == 0) {
 8002baa:	f897 30dc 	ldrb.w	r3, [r7, #220]	@ 0xdc
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d115      	bne.n	8002bde <torch_main+0x29e>
 8002bb2:	f897 30da 	ldrb.w	r3, [r7, #218]	@ 0xda
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d111      	bne.n	8002bde <torch_main+0x29e>
					if(overvolts > 0) { overvolts--; }
 8002bba:	f897 30dd 	ldrb.w	r3, [r7, #221]	@ 0xdd
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d004      	beq.n	8002bcc <torch_main+0x28c>
 8002bc2:	f897 30dd 	ldrb.w	r3, [r7, #221]	@ 0xdd
 8002bc6:	3b01      	subs	r3, #1
 8002bc8:	f887 30dd 	strb.w	r3, [r7, #221]	@ 0xdd

					if(undervolts > 0) { undervolts--; }
 8002bcc:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d004      	beq.n	8002bde <torch_main+0x29e>
 8002bd4:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8002bd8:	3b01      	subs	r3, #1
 8002bda:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
				}
				// OVERVOLT/UNDERVOLT FAULTS
				if(overvolts > ATTEMPT_LIMIT) {
 8002bde:	f897 30dd 	ldrb.w	r3, [r7, #221]	@ 0xdd
 8002be2:	2b0a      	cmp	r3, #10
 8002be4:	d907      	bls.n	8002bf6 <torch_main+0x2b6>
					error_loop(ERROR_OVERVOLT, faultingCellVoltage, faultingCellIndex);
 8002be6:	f897 20d3 	ldrb.w	r2, [r7, #211]	@ 0xd3
 8002bea:	f8b7 30d0 	ldrh.w	r3, [r7, #208]	@ 0xd0
 8002bee:	4619      	mov	r1, r3
 8002bf0:	2047      	movs	r0, #71	@ 0x47
 8002bf2:	f7fe fec9 	bl	8001988 <error_loop>
				}
				if(undervolts > ATTEMPT_LIMIT) {
 8002bf6:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8002bfa:	2b0a      	cmp	r3, #10
 8002bfc:	d907      	bls.n	8002c0e <torch_main+0x2ce>
					error_loop(ERROR_UNDERVOLT, faultingCellVoltage, faultingCellIndex);
 8002bfe:	f897 20d3 	ldrb.w	r2, [r7, #211]	@ 0xd3
 8002c02:	f8b7 30d0 	ldrh.w	r3, [r7, #208]	@ 0xd0
 8002c06:	4619      	mov	r1, r3
 8002c08:	2046      	movs	r0, #70	@ 0x46
 8002c0a:	f7fe febd 	bl	8001988 <error_loop>
				}

				overvoltFlag = 0;
 8002c0e:	2300      	movs	r3, #0
 8002c10:	f887 30dc 	strb.w	r3, [r7, #220]	@ 0xdc
				undervoltFlag = 0;
 8002c14:	2300      	movs	r3, #0
 8002c16:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
				measureCounter = 0;
 8002c1a:	4b22      	ldr	r3, [pc, #136]	@ (8002ca4 <torch_main+0x364>)
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	601a      	str	r2, [r3, #0]
			}

			if(transmitCounter > 1000) {
 8002c20:	4b1f      	ldr	r3, [pc, #124]	@ (8002ca0 <torch_main+0x360>)
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002c28:	d90c      	bls.n	8002c44 <torch_main+0x304>
				transmit_voltages(cellVoltages);
 8002c2a:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8002c2e:	4618      	mov	r0, r3
 8002c30:	f7fe ff24 	bl	8001a7c <transmit_voltages>
				transmit_temperatures(temperatures);
 8002c34:	f107 031c 	add.w	r3, r7, #28
 8002c38:	4618      	mov	r0, r3
 8002c3a:	f7ff f8ef 	bl	8001e1c <transmit_temperatures>
				transmitCounter = 0;
 8002c3e:	4b18      	ldr	r3, [pc, #96]	@ (8002ca0 <torch_main+0x360>)
 8002c40:	2200      	movs	r2, #0
 8002c42:	601a      	str	r2, [r3, #0]
			}

			if(HAL_CAN_GetRxFifoFillLevel(&hcan1, CAN_RX_FIFO0) > 0) {
 8002c44:	2100      	movs	r1, #0
 8002c46:	4819      	ldr	r0, [pc, #100]	@ (8002cac <torch_main+0x36c>)
 8002c48:	f002 fddd 	bl	8005806 <HAL_CAN_GetRxFifoFillLevel>
 8002c4c:	4603      	mov	r3, r0
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d047      	beq.n	8002ce2 <torch_main+0x3a2>
				uint8_t attempts = 0;
 8002c52:	2300      	movs	r3, #0
 8002c54:	f887 30cd 	strb.w	r3, [r7, #205]	@ 0xcd

				while(attempts < ATTEMPT_LIMIT) {
 8002c58:	e036      	b.n	8002cc8 <torch_main+0x388>
					if(HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &RxHeader, RxData) == HAL_OK) {
 8002c5a:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8002c5e:	f107 0294 	add.w	r2, r7, #148	@ 0x94
 8002c62:	2100      	movs	r1, #0
 8002c64:	4811      	ldr	r0, [pc, #68]	@ (8002cac <torch_main+0x36c>)
 8002c66:	f002 fcac 	bl	80055c2 <HAL_CAN_GetRxMessage>
 8002c6a:	4603      	mov	r3, r0
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d123      	bne.n	8002cb8 <torch_main+0x378>

						if(RxHeader.StdId == CAN_FAULT_ID) { silent_error_loop(); }
 8002c70:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002c74:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002c78:	d101      	bne.n	8002c7e <torch_main+0x33e>
 8002c7a:	f7fe fe67 	bl	800194c <silent_error_loop>

						attempts = 13;
 8002c7e:	230d      	movs	r3, #13
 8002c80:	f887 30cd 	strb.w	r3, [r7, #205]	@ 0xcd
 8002c84:	e020      	b.n	8002cc8 <torch_main+0x388>
 8002c86:	bf00      	nop
 8002c88:	200003f4 	.word	0x200003f4
 8002c8c:	40020000 	.word	0x40020000
 8002c90:	40020800 	.word	0x40020800
 8002c94:	40020c00 	.word	0x40020c00
 8002c98:	2000019c 	.word	0x2000019c
 8002c9c:	200003f8 	.word	0x200003f8
 8002ca0:	200003e4 	.word	0x200003e4
 8002ca4:	200003e8 	.word	0x200003e8
 8002ca8:	200003f5 	.word	0x200003f5
 8002cac:	200000c4 	.word	0x200000c4
 8002cb0:	42700000 	.word	0x42700000
 8002cb4:	447a0000 	.word	0x447a0000
					}
					else {
						attempts++;
 8002cb8:	f897 30cd 	ldrb.w	r3, [r7, #205]	@ 0xcd
 8002cbc:	3301      	adds	r3, #1
 8002cbe:	f887 30cd 	strb.w	r3, [r7, #205]	@ 0xcd
						wait(5);
 8002cc2:	2005      	movs	r0, #5
 8002cc4:	f000 fae0 	bl	8003288 <wait>
				while(attempts < ATTEMPT_LIMIT) {
 8002cc8:	f897 30cd 	ldrb.w	r3, [r7, #205]	@ 0xcd
 8002ccc:	2b09      	cmp	r3, #9
 8002cce:	d9c4      	bls.n	8002c5a <torch_main+0x31a>
					}
				}

				if(attempts != 13) { error_loop(ERROR_CAN_READ, 0, 0); }
 8002cd0:	f897 30cd 	ldrb.w	r3, [r7, #205]	@ 0xcd
 8002cd4:	2b0d      	cmp	r3, #13
 8002cd6:	d004      	beq.n	8002ce2 <torch_main+0x3a2>
 8002cd8:	2200      	movs	r2, #0
 8002cda:	2100      	movs	r1, #0
 8002cdc:	2053      	movs	r0, #83	@ 0x53
 8002cde:	f7fe fe53 	bl	8001988 <error_loop>
			}
			if(HAL_CAN_GetRxFifoFillLevel(&hcan1, CAN_RX_FIFO1) > 0) {
 8002ce2:	2101      	movs	r1, #1
 8002ce4:	48c9      	ldr	r0, [pc, #804]	@ (800300c <torch_main+0x6cc>)
 8002ce6:	f002 fd8e 	bl	8005806 <HAL_CAN_GetRxFifoFillLevel>
 8002cea:	4603      	mov	r3, r0
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d04a      	beq.n	8002d86 <torch_main+0x446>
				uint8_t attempts = 0;
 8002cf0:	2300      	movs	r3, #0
 8002cf2:	f887 30cc 	strb.w	r3, [r7, #204]	@ 0xcc

				while(attempts < ATTEMPT_LIMIT) {
 8002cf6:	e039      	b.n	8002d6c <torch_main+0x42c>
					if(HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO1, &RxHeader, RxData) == HAL_OK) {
 8002cf8:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8002cfc:	f107 0294 	add.w	r2, r7, #148	@ 0x94
 8002d00:	2101      	movs	r1, #1
 8002d02:	48c2      	ldr	r0, [pc, #776]	@ (800300c <torch_main+0x6cc>)
 8002d04:	f002 fc5d 	bl	80055c2 <HAL_CAN_GetRxMessage>
 8002d08:	4603      	mov	r3, r0
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d126      	bne.n	8002d5c <torch_main+0x41c>
						if(RxHeader.StdId == CAN_PACK_STAT_ID) {
 8002d0e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002d12:	f5b3 6f84 	cmp.w	r3, #1056	@ 0x420
 8002d16:	d11d      	bne.n	8002d54 <torch_main+0x414>
							packCurrent = (uint16_t)RxData[0] | ((uint16_t)RxData[1] << 8);
 8002d18:	f897 308c 	ldrb.w	r3, [r7, #140]	@ 0x8c
 8002d1c:	b21a      	sxth	r2, r3
 8002d1e:	f897 308d 	ldrb.w	r3, [r7, #141]	@ 0x8d
 8002d22:	b21b      	sxth	r3, r3
 8002d24:	021b      	lsls	r3, r3, #8
 8002d26:	b21b      	sxth	r3, r3
 8002d28:	4313      	orrs	r3, r2
 8002d2a:	b21b      	sxth	r3, r3
 8002d2c:	f8a7 30b8 	strh.w	r3, [r7, #184]	@ 0xb8
							switch(RxData[5]) {
 8002d30:	f897 3091 	ldrb.w	r3, [r7, #145]	@ 0x91
 8002d34:	2b03      	cmp	r3, #3
 8002d36:	d002      	beq.n	8002d3e <torch_main+0x3fe>
 8002d38:	2b04      	cmp	r3, #4
 8002d3a:	d004      	beq.n	8002d46 <torch_main+0x406>
 8002d3c:	e006      	b.n	8002d4c <torch_main+0x40c>
								case 3:					// CHARGE
									state = CHARGE;
 8002d3e:	4bb4      	ldr	r3, [pc, #720]	@ (8003010 <torch_main+0x6d0>)
 8002d40:	2202      	movs	r2, #2
 8002d42:	701a      	strb	r2, [r3, #0]
									break;
 8002d44:	e006      	b.n	8002d54 <torch_main+0x414>
								case 4:					// Fault
									silent_error_loop();
 8002d46:	f7fe fe01 	bl	800194c <silent_error_loop>
									break;
 8002d4a:	e003      	b.n	8002d54 <torch_main+0x414>
								default:				// ACTIVE
									state = ACTIVE;
 8002d4c:	4bb0      	ldr	r3, [pc, #704]	@ (8003010 <torch_main+0x6d0>)
 8002d4e:	2201      	movs	r2, #1
 8002d50:	701a      	strb	r2, [r3, #0]
									break;
 8002d52:	bf00      	nop
							}
						}
						attempts = 13;
 8002d54:	230d      	movs	r3, #13
 8002d56:	f887 30cc 	strb.w	r3, [r7, #204]	@ 0xcc
 8002d5a:	e007      	b.n	8002d6c <torch_main+0x42c>
					}
					else {
						attempts++;
 8002d5c:	f897 30cc 	ldrb.w	r3, [r7, #204]	@ 0xcc
 8002d60:	3301      	adds	r3, #1
 8002d62:	f887 30cc 	strb.w	r3, [r7, #204]	@ 0xcc
						wait(5);
 8002d66:	2005      	movs	r0, #5
 8002d68:	f000 fa8e 	bl	8003288 <wait>
				while(attempts < ATTEMPT_LIMIT) {
 8002d6c:	f897 30cc 	ldrb.w	r3, [r7, #204]	@ 0xcc
 8002d70:	2b09      	cmp	r3, #9
 8002d72:	d9c1      	bls.n	8002cf8 <torch_main+0x3b8>
					}
				}
				if(attempts != 13) { error_loop(ERROR_CAN_READ, 0, 0); }
 8002d74:	f897 30cc 	ldrb.w	r3, [r7, #204]	@ 0xcc
 8002d78:	2b0d      	cmp	r3, #13
 8002d7a:	d004      	beq.n	8002d86 <torch_main+0x446>
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	2100      	movs	r1, #0
 8002d80:	2053      	movs	r0, #83	@ 0x53
 8002d82:	f7fe fe01 	bl	8001988 <error_loop>
			}

			wait(1);
 8002d86:	2001      	movs	r0, #1
 8002d88:	f000 fa7e 	bl	8003288 <wait>
		while(state == ACTIVE) {
 8002d8c:	4ba0      	ldr	r3, [pc, #640]	@ (8003010 <torch_main+0x6d0>)
 8002d8e:	781b      	ldrb	r3, [r3, #0]
 8002d90:	2b01      	cmp	r3, #1
 8002d92:	f43f ae3e 	beq.w	8002a12 <torch_main+0xd2>
		}
		if(state == CHARGE) {
 8002d96:	4b9e      	ldr	r3, [pc, #632]	@ (8003010 <torch_main+0x6d0>)
 8002d98:	781b      	ldrb	r3, [r3, #0]
 8002d9a:	2b02      	cmp	r3, #2
 8002d9c:	f040 81d8 	bne.w	8003150 <torch_main+0x810>
			pull_low(GPIOA, GPIO_PIN_8);		// TURN OFF ACTIVE LED
 8002da0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002da4:	489b      	ldr	r0, [pc, #620]	@ (8003014 <torch_main+0x6d4>)
 8002da6:	f000 fa4f 	bl	8003248 <pull_low>
			pull_high(GPIOC, GPIO_PIN_9);		// TURN ON CHARGE LED
 8002daa:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002dae:	489a      	ldr	r0, [pc, #616]	@ (8003018 <torch_main+0x6d8>)
 8002db0:	f000 fa5a 	bl	8003268 <pull_high>

			transmitCounter = 0;
 8002db4:	4b99      	ldr	r3, [pc, #612]	@ (800301c <torch_main+0x6dc>)
 8002db6:	2200      	movs	r2, #0
 8002db8:	601a      	str	r2, [r3, #0]
			measureCounter = 0;
 8002dba:	4b99      	ldr	r3, [pc, #612]	@ (8003020 <torch_main+0x6e0>)
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	601a      	str	r2, [r3, #0]
		}
		// *** BEGIN CHARGE LOOP ***
		while(state == CHARGE) {
 8002dc0:	e1c6      	b.n	8003150 <torch_main+0x810>
			if(measureCounter > 100) {
 8002dc2:	4b97      	ldr	r3, [pc, #604]	@ (8003020 <torch_main+0x6e0>)
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	2b64      	cmp	r3, #100	@ 0x64
 8002dc8:	f240 8102 	bls.w	8002fd0 <torch_main+0x690>
				if(!refup_check()) {
 8002dcc:	f7ff fd36 	bl	800283c <refup_check>
 8002dd0:	4603      	mov	r3, r0
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d104      	bne.n	8002de0 <torch_main+0x4a0>
					force_refup();
 8002dd6:	f7ff fcc7 	bl	8002768 <force_refup>
					wait(1);
 8002dda:	2001      	movs	r0, #1
 8002ddc:	f000 fa54 	bl	8003288 <wait>
				}

				temperature_sense(temperatures);
 8002de0:	f107 031c 	add.w	r3, r7, #28
 8002de4:	4618      	mov	r0, r3
 8002de6:	f000 fc6b 	bl	80036c0 <temperature_sense>
				voltage_sense(cellVoltages);
 8002dea:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8002dee:	4618      	mov	r0, r3
 8002df0:	f001 f9aa 	bl	8004148 <voltage_sense>

				for(uint8_t i = 0; i < THERM_QTY; i++) {
 8002df4:	2300      	movs	r3, #0
 8002df6:	f887 30cb 	strb.w	r3, [r7, #203]	@ 0xcb
 8002dfa:	e024      	b.n	8002e46 <torch_main+0x506>
					if(temperatures[i] > MAX_TEMPERATURE) {
 8002dfc:	f897 30cb 	ldrb.w	r3, [r7, #203]	@ 0xcb
 8002e00:	009b      	lsls	r3, r3, #2
 8002e02:	33e0      	adds	r3, #224	@ 0xe0
 8002e04:	443b      	add	r3, r7
 8002e06:	3bc4      	subs	r3, #196	@ 0xc4
 8002e08:	edd3 7a00 	vldr	s15, [r3]
 8002e0c:	ed9f 7a85 	vldr	s14, [pc, #532]	@ 8003024 <torch_main+0x6e4>
 8002e10:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002e14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e18:	dd10      	ble.n	8002e3c <torch_main+0x4fc>
						overheatFlag = 1;
 8002e1a:	2301      	movs	r3, #1
 8002e1c:	f887 30de 	strb.w	r3, [r7, #222]	@ 0xde
						faultingThermistorIndex = i + 1;
 8002e20:	f897 30cb 	ldrb.w	r3, [r7, #203]	@ 0xcb
 8002e24:	3301      	adds	r3, #1
 8002e26:	f887 30d9 	strb.w	r3, [r7, #217]	@ 0xd9
						faultingTemperature = temperatures[i];
 8002e2a:	f897 30cb 	ldrb.w	r3, [r7, #203]	@ 0xcb
 8002e2e:	009b      	lsls	r3, r3, #2
 8002e30:	33e0      	adds	r3, #224	@ 0xe0
 8002e32:	443b      	add	r3, r7
 8002e34:	3bc4      	subs	r3, #196	@ 0xc4
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
				for(uint8_t i = 0; i < THERM_QTY; i++) {
 8002e3c:	f897 30cb 	ldrb.w	r3, [r7, #203]	@ 0xcb
 8002e40:	3301      	adds	r3, #1
 8002e42:	f887 30cb 	strb.w	r3, [r7, #203]	@ 0xcb
 8002e46:	f897 30cb 	ldrb.w	r3, [r7, #203]	@ 0xcb
 8002e4a:	2b11      	cmp	r3, #17
 8002e4c:	d9d6      	bls.n	8002dfc <torch_main+0x4bc>
					}
				}
				if(overheatFlag) { overheats++; }
 8002e4e:	f897 30de 	ldrb.w	r3, [r7, #222]	@ 0xde
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d005      	beq.n	8002e62 <torch_main+0x522>
 8002e56:	f897 30df 	ldrb.w	r3, [r7, #223]	@ 0xdf
 8002e5a:	3301      	adds	r3, #1
 8002e5c:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
 8002e60:	e008      	b.n	8002e74 <torch_main+0x534>

				else {
					if(overheats > 0) { overheats--; }
 8002e62:	f897 30df 	ldrb.w	r3, [r7, #223]	@ 0xdf
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d004      	beq.n	8002e74 <torch_main+0x534>
 8002e6a:	f897 30df 	ldrb.w	r3, [r7, #223]	@ 0xdf
 8002e6e:	3b01      	subs	r3, #1
 8002e70:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
				}
				// MODULE OVERHEAT FAULT
				if(overheats > ATTEMPT_LIMIT) {
 8002e74:	f897 30df 	ldrb.w	r3, [r7, #223]	@ 0xdf
 8002e78:	2b0a      	cmp	r3, #10
 8002e7a:	d916      	bls.n	8002eaa <torch_main+0x56a>
					float tempScale = 1000.0f;
 8002e7c:	4b6a      	ldr	r3, [pc, #424]	@ (8003028 <torch_main+0x6e8>)
 8002e7e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
					uint16_t intFaultingTemperature = (uint16_t)(faultingTemperature * tempScale);
 8002e82:	ed97 7a35 	vldr	s14, [r7, #212]	@ 0xd4
 8002e86:	edd7 7a2f 	vldr	s15, [r7, #188]	@ 0xbc
 8002e8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e8e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002e92:	ee17 3a90 	vmov	r3, s15
 8002e96:	f8a7 30ba 	strh.w	r3, [r7, #186]	@ 0xba

					error_loop(ERROR_OVERHEAT, intFaultingTemperature, faultingThermistorIndex);
 8002e9a:	f897 20d9 	ldrb.w	r2, [r7, #217]	@ 0xd9
 8002e9e:	f8b7 30ba 	ldrh.w	r3, [r7, #186]	@ 0xba
 8002ea2:	4619      	mov	r1, r3
 8002ea4:	2045      	movs	r0, #69	@ 0x45
 8002ea6:	f7fe fd6f 	bl	8001988 <error_loop>
				}

				for(uint8_t i = 0; i < CELL_QTY; i++) {
 8002eaa:	2300      	movs	r3, #0
 8002eac:	f887 30ca 	strb.w	r3, [r7, #202]	@ 0xca
 8002eb0:	e03d      	b.n	8002f2e <torch_main+0x5ee>
					if(cellVoltages[i] > MAX_CELL_VOLTAGE) {
 8002eb2:	f897 30ca 	ldrb.w	r3, [r7, #202]	@ 0xca
 8002eb6:	005b      	lsls	r3, r3, #1
 8002eb8:	33e0      	adds	r3, #224	@ 0xe0
 8002eba:	443b      	add	r3, r7
 8002ebc:	f833 3c7c 	ldrh.w	r3, [r3, #-124]
 8002ec0:	f24a 4210 	movw	r2, #42000	@ 0xa410
 8002ec4:	4293      	cmp	r3, r2
 8002ec6:	d911      	bls.n	8002eec <torch_main+0x5ac>
						overvoltFlag = 1;
 8002ec8:	2301      	movs	r3, #1
 8002eca:	f887 30dc 	strb.w	r3, [r7, #220]	@ 0xdc
						faultingCellIndex = i + 1;
 8002ece:	f897 30ca 	ldrb.w	r3, [r7, #202]	@ 0xca
 8002ed2:	3301      	adds	r3, #1
 8002ed4:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
						faultingCellVoltage = cellVoltages[i];
 8002ed8:	f897 30ca 	ldrb.w	r3, [r7, #202]	@ 0xca
 8002edc:	005b      	lsls	r3, r3, #1
 8002ede:	33e0      	adds	r3, #224	@ 0xe0
 8002ee0:	443b      	add	r3, r7
 8002ee2:	f833 3c7c 	ldrh.w	r3, [r3, #-124]
 8002ee6:	f8a7 30d0 	strh.w	r3, [r7, #208]	@ 0xd0
 8002eea:	e01b      	b.n	8002f24 <torch_main+0x5e4>
					}
					else if(cellVoltages[i] < MIN_CELL_VOLTAGE) {
 8002eec:	f897 30ca 	ldrb.w	r3, [r7, #202]	@ 0xca
 8002ef0:	005b      	lsls	r3, r3, #1
 8002ef2:	33e0      	adds	r3, #224	@ 0xe0
 8002ef4:	443b      	add	r3, r7
 8002ef6:	f833 3c7c 	ldrh.w	r3, [r3, #-124]
 8002efa:	f246 12a7 	movw	r2, #24999	@ 0x61a7
 8002efe:	4293      	cmp	r3, r2
 8002f00:	d810      	bhi.n	8002f24 <torch_main+0x5e4>
						undervoltFlag = 1;
 8002f02:	2301      	movs	r3, #1
 8002f04:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
						faultingCellIndex = i + 1;
 8002f08:	f897 30ca 	ldrb.w	r3, [r7, #202]	@ 0xca
 8002f0c:	3301      	adds	r3, #1
 8002f0e:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
						faultingCellVoltage = cellVoltages[i];
 8002f12:	f897 30ca 	ldrb.w	r3, [r7, #202]	@ 0xca
 8002f16:	005b      	lsls	r3, r3, #1
 8002f18:	33e0      	adds	r3, #224	@ 0xe0
 8002f1a:	443b      	add	r3, r7
 8002f1c:	f833 3c7c 	ldrh.w	r3, [r3, #-124]
 8002f20:	f8a7 30d0 	strh.w	r3, [r7, #208]	@ 0xd0
				for(uint8_t i = 0; i < CELL_QTY; i++) {
 8002f24:	f897 30ca 	ldrb.w	r3, [r7, #202]	@ 0xca
 8002f28:	3301      	adds	r3, #1
 8002f2a:	f887 30ca 	strb.w	r3, [r7, #202]	@ 0xca
 8002f2e:	f897 30ca 	ldrb.w	r3, [r7, #202]	@ 0xca
 8002f32:	2b13      	cmp	r3, #19
 8002f34:	d9bd      	bls.n	8002eb2 <torch_main+0x572>
					}
				}
				if(overvoltFlag) { overvolts++; }
 8002f36:	f897 30dc 	ldrb.w	r3, [r7, #220]	@ 0xdc
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d004      	beq.n	8002f48 <torch_main+0x608>
 8002f3e:	f897 30dd 	ldrb.w	r3, [r7, #221]	@ 0xdd
 8002f42:	3301      	adds	r3, #1
 8002f44:	f887 30dd 	strb.w	r3, [r7, #221]	@ 0xdd

				if(undervoltFlag) { undervolts++; }
 8002f48:	f897 30da 	ldrb.w	r3, [r7, #218]	@ 0xda
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d004      	beq.n	8002f5a <torch_main+0x61a>
 8002f50:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8002f54:	3301      	adds	r3, #1
 8002f56:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb

				if(overvoltFlag == 0 && undervoltFlag == 0) {
 8002f5a:	f897 30dc 	ldrb.w	r3, [r7, #220]	@ 0xdc
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d115      	bne.n	8002f8e <torch_main+0x64e>
 8002f62:	f897 30da 	ldrb.w	r3, [r7, #218]	@ 0xda
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d111      	bne.n	8002f8e <torch_main+0x64e>
					if(overvolts > 0) { overvolts--; }
 8002f6a:	f897 30dd 	ldrb.w	r3, [r7, #221]	@ 0xdd
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d004      	beq.n	8002f7c <torch_main+0x63c>
 8002f72:	f897 30dd 	ldrb.w	r3, [r7, #221]	@ 0xdd
 8002f76:	3b01      	subs	r3, #1
 8002f78:	f887 30dd 	strb.w	r3, [r7, #221]	@ 0xdd

					if(undervolts > 0) { undervolts--; }
 8002f7c:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d004      	beq.n	8002f8e <torch_main+0x64e>
 8002f84:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8002f88:	3b01      	subs	r3, #1
 8002f8a:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
				}
				// UNDERVOLT FAULTS

				if(undervolts > ATTEMPT_LIMIT) {
 8002f8e:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8002f92:	2b0a      	cmp	r3, #10
 8002f94:	d907      	bls.n	8002fa6 <torch_main+0x666>
					error_loop(ERROR_UNDERVOLT, faultingCellVoltage, faultingCellIndex);
 8002f96:	f897 20d3 	ldrb.w	r2, [r7, #211]	@ 0xd3
 8002f9a:	f8b7 30d0 	ldrh.w	r3, [r7, #208]	@ 0xd0
 8002f9e:	4619      	mov	r1, r3
 8002fa0:	2046      	movs	r0, #70	@ 0x46
 8002fa2:	f7fe fcf1 	bl	8001988 <error_loop>
				}

				// Overvolt means charging's done
				if(overvolts > ATTEMPT_LIMIT) {
 8002fa6:	f897 30dd 	ldrb.w	r3, [r7, #221]	@ 0xdd
 8002faa:	2b0a      	cmp	r3, #10
 8002fac:	d907      	bls.n	8002fbe <torch_main+0x67e>
					error_loop(ERROR_OVERVOLT, faultingCellVoltage, faultingCellIndex);
 8002fae:	f897 20d3 	ldrb.w	r2, [r7, #211]	@ 0xd3
 8002fb2:	f8b7 30d0 	ldrh.w	r3, [r7, #208]	@ 0xd0
 8002fb6:	4619      	mov	r1, r3
 8002fb8:	2047      	movs	r0, #71	@ 0x47
 8002fba:	f7fe fce5 	bl	8001988 <error_loop>
				}

				overvoltFlag = 0;
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	f887 30dc 	strb.w	r3, [r7, #220]	@ 0xdc
				undervoltFlag = 0;
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
				measureCounter = 0;
 8002fca:	4b15      	ldr	r3, [pc, #84]	@ (8003020 <torch_main+0x6e0>)
 8002fcc:	2200      	movs	r2, #0
 8002fce:	601a      	str	r2, [r3, #0]
			}

			if(transmitCounter > 1000) {
 8002fd0:	4b12      	ldr	r3, [pc, #72]	@ (800301c <torch_main+0x6dc>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002fd8:	d90c      	bls.n	8002ff4 <torch_main+0x6b4>
				transmit_voltages(cellVoltages);
 8002fda:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8002fde:	4618      	mov	r0, r3
 8002fe0:	f7fe fd4c 	bl	8001a7c <transmit_voltages>
				transmit_temperatures(temperatures);
 8002fe4:	f107 031c 	add.w	r3, r7, #28
 8002fe8:	4618      	mov	r0, r3
 8002fea:	f7fe ff17 	bl	8001e1c <transmit_temperatures>
				transmitCounter = 0;
 8002fee:	4b0b      	ldr	r3, [pc, #44]	@ (800301c <torch_main+0x6dc>)
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	601a      	str	r2, [r3, #0]
			}

			if(HAL_CAN_GetRxFifoFillLevel(&hcan1, CAN_RX_FIFO0) > 0) {
 8002ff4:	2100      	movs	r1, #0
 8002ff6:	4805      	ldr	r0, [pc, #20]	@ (800300c <torch_main+0x6cc>)
 8002ff8:	f002 fc05 	bl	8005806 <HAL_CAN_GetRxFifoFillLevel>
 8002ffc:	4603      	mov	r3, r0
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d051      	beq.n	80030a6 <torch_main+0x766>
				uint8_t attempts = 0;
 8003002:	2300      	movs	r3, #0
 8003004:	f887 30c9 	strb.w	r3, [r7, #201]	@ 0xc9

				while(attempts < ATTEMPT_LIMIT) {
 8003008:	e040      	b.n	800308c <torch_main+0x74c>
 800300a:	bf00      	nop
 800300c:	200000c4 	.word	0x200000c4
 8003010:	200003f5 	.word	0x200003f5
 8003014:	40020000 	.word	0x40020000
 8003018:	40020800 	.word	0x40020800
 800301c:	200003e4 	.word	0x200003e4
 8003020:	200003e8 	.word	0x200003e8
 8003024:	42700000 	.word	0x42700000
 8003028:	447a0000 	.word	0x447a0000
					if(HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &RxHeader, RxData) == HAL_OK) {
 800302c:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8003030:	f107 0294 	add.w	r2, r7, #148	@ 0x94
 8003034:	2100      	movs	r1, #0
 8003036:	487e      	ldr	r0, [pc, #504]	@ (8003230 <torch_main+0x8f0>)
 8003038:	f002 fac3 	bl	80055c2 <HAL_CAN_GetRxMessage>
 800303c:	4603      	mov	r3, r0
 800303e:	2b00      	cmp	r3, #0
 8003040:	d11c      	bne.n	800307c <torch_main+0x73c>

						if(RxHeader.StdId == CAN_FAULT_ID) { silent_error_loop(); }
 8003042:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003046:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800304a:	d101      	bne.n	8003050 <torch_main+0x710>
 800304c:	f7fe fc7e 	bl	800194c <silent_error_loop>

						if(RxHeader.StdId == CAN_MIN_VCELL_ID) { globalMinCellVoltage = (uint16_t)RxData[0] | ((uint16_t)RxData[1] << 8); }
 8003050:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003054:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8003058:	4293      	cmp	r3, r2
 800305a:	d10b      	bne.n	8003074 <torch_main+0x734>
 800305c:	f897 308c 	ldrb.w	r3, [r7, #140]	@ 0x8c
 8003060:	b21a      	sxth	r2, r3
 8003062:	f897 308d 	ldrb.w	r3, [r7, #141]	@ 0x8d
 8003066:	b21b      	sxth	r3, r3
 8003068:	021b      	lsls	r3, r3, #8
 800306a:	b21b      	sxth	r3, r3
 800306c:	4313      	orrs	r3, r2
 800306e:	b21b      	sxth	r3, r3
 8003070:	f8a7 30c4 	strh.w	r3, [r7, #196]	@ 0xc4

						attempts = 13;
 8003074:	230d      	movs	r3, #13
 8003076:	f887 30c9 	strb.w	r3, [r7, #201]	@ 0xc9
 800307a:	e007      	b.n	800308c <torch_main+0x74c>
					}
					else {
						attempts++;
 800307c:	f897 30c9 	ldrb.w	r3, [r7, #201]	@ 0xc9
 8003080:	3301      	adds	r3, #1
 8003082:	f887 30c9 	strb.w	r3, [r7, #201]	@ 0xc9
						wait(5);
 8003086:	2005      	movs	r0, #5
 8003088:	f000 f8fe 	bl	8003288 <wait>
				while(attempts < ATTEMPT_LIMIT) {
 800308c:	f897 30c9 	ldrb.w	r3, [r7, #201]	@ 0xc9
 8003090:	2b09      	cmp	r3, #9
 8003092:	d9cb      	bls.n	800302c <torch_main+0x6ec>
					}
				}
				if(attempts != 13) { error_loop(ERROR_CAN_READ, 0, 0); }
 8003094:	f897 30c9 	ldrb.w	r3, [r7, #201]	@ 0xc9
 8003098:	2b0d      	cmp	r3, #13
 800309a:	d004      	beq.n	80030a6 <torch_main+0x766>
 800309c:	2200      	movs	r2, #0
 800309e:	2100      	movs	r1, #0
 80030a0:	2053      	movs	r0, #83	@ 0x53
 80030a2:	f7fe fc71 	bl	8001988 <error_loop>
			}
			if(HAL_CAN_GetRxFifoFillLevel(&hcan1, CAN_RX_FIFO1) > 0) {
 80030a6:	2101      	movs	r1, #1
 80030a8:	4861      	ldr	r0, [pc, #388]	@ (8003230 <torch_main+0x8f0>)
 80030aa:	f002 fbac 	bl	8005806 <HAL_CAN_GetRxFifoFillLevel>
 80030ae:	4603      	mov	r3, r0
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d04a      	beq.n	800314a <torch_main+0x80a>
				uint8_t attempts = 0;
 80030b4:	2300      	movs	r3, #0
 80030b6:	f887 30c8 	strb.w	r3, [r7, #200]	@ 0xc8

				while(attempts < ATTEMPT_LIMIT) {
 80030ba:	e039      	b.n	8003130 <torch_main+0x7f0>
					if(HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO1, &RxHeader, RxData) == HAL_OK) {
 80030bc:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 80030c0:	f107 0294 	add.w	r2, r7, #148	@ 0x94
 80030c4:	2101      	movs	r1, #1
 80030c6:	485a      	ldr	r0, [pc, #360]	@ (8003230 <torch_main+0x8f0>)
 80030c8:	f002 fa7b 	bl	80055c2 <HAL_CAN_GetRxMessage>
 80030cc:	4603      	mov	r3, r0
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d126      	bne.n	8003120 <torch_main+0x7e0>
						if(RxHeader.StdId == CAN_PACK_STAT_ID) {
 80030d2:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80030d6:	f5b3 6f84 	cmp.w	r3, #1056	@ 0x420
 80030da:	d11d      	bne.n	8003118 <torch_main+0x7d8>
							packCurrent = (uint16_t)RxData[0] | ((uint16_t)RxData[1] << 8);
 80030dc:	f897 308c 	ldrb.w	r3, [r7, #140]	@ 0x8c
 80030e0:	b21a      	sxth	r2, r3
 80030e2:	f897 308d 	ldrb.w	r3, [r7, #141]	@ 0x8d
 80030e6:	b21b      	sxth	r3, r3
 80030e8:	021b      	lsls	r3, r3, #8
 80030ea:	b21b      	sxth	r3, r3
 80030ec:	4313      	orrs	r3, r2
 80030ee:	b21b      	sxth	r3, r3
 80030f0:	f8a7 30b8 	strh.w	r3, [r7, #184]	@ 0xb8
							switch(RxData[5]) {
 80030f4:	f897 3091 	ldrb.w	r3, [r7, #145]	@ 0x91
 80030f8:	2b03      	cmp	r3, #3
 80030fa:	d002      	beq.n	8003102 <torch_main+0x7c2>
 80030fc:	2b04      	cmp	r3, #4
 80030fe:	d004      	beq.n	800310a <torch_main+0x7ca>
 8003100:	e006      	b.n	8003110 <torch_main+0x7d0>
								case 3:					// CHARGE
									state = CHARGE;
 8003102:	4b4c      	ldr	r3, [pc, #304]	@ (8003234 <torch_main+0x8f4>)
 8003104:	2202      	movs	r2, #2
 8003106:	701a      	strb	r2, [r3, #0]
									break;
 8003108:	e006      	b.n	8003118 <torch_main+0x7d8>
								case 4:					// Fault
									silent_error_loop();
 800310a:	f7fe fc1f 	bl	800194c <silent_error_loop>
									break;
 800310e:	e003      	b.n	8003118 <torch_main+0x7d8>
								default:				// ACTIVE
									//state = ACTIVE;
									doneChargingFlag = 1;
 8003110:	2301      	movs	r3, #1
 8003112:	f887 30c3 	strb.w	r3, [r7, #195]	@ 0xc3
									break;
 8003116:	bf00      	nop
							}
						}
						attempts = 13;
 8003118:	230d      	movs	r3, #13
 800311a:	f887 30c8 	strb.w	r3, [r7, #200]	@ 0xc8
 800311e:	e007      	b.n	8003130 <torch_main+0x7f0>
					}
					else {
						attempts++;
 8003120:	f897 30c8 	ldrb.w	r3, [r7, #200]	@ 0xc8
 8003124:	3301      	adds	r3, #1
 8003126:	f887 30c8 	strb.w	r3, [r7, #200]	@ 0xc8
						wait(5);
 800312a:	2005      	movs	r0, #5
 800312c:	f000 f8ac 	bl	8003288 <wait>
				while(attempts < ATTEMPT_LIMIT) {
 8003130:	f897 30c8 	ldrb.w	r3, [r7, #200]	@ 0xc8
 8003134:	2b09      	cmp	r3, #9
 8003136:	d9c1      	bls.n	80030bc <torch_main+0x77c>
					}
				}
				if(attempts != 13) { error_loop(ERROR_CAN_READ, 0, 0); }
 8003138:	f897 30c8 	ldrb.w	r3, [r7, #200]	@ 0xc8
 800313c:	2b0d      	cmp	r3, #13
 800313e:	d004      	beq.n	800314a <torch_main+0x80a>
 8003140:	2200      	movs	r2, #0
 8003142:	2100      	movs	r1, #0
 8003144:	2053      	movs	r0, #83	@ 0x53
 8003146:	f7fe fc1f 	bl	8001988 <error_loop>
			}

			wait(1);
 800314a:	2001      	movs	r0, #1
 800314c:	f000 f89c 	bl	8003288 <wait>
		while(state == CHARGE) {
 8003150:	4b38      	ldr	r3, [pc, #224]	@ (8003234 <torch_main+0x8f4>)
 8003152:	781b      	ldrb	r3, [r3, #0]
 8003154:	2b02      	cmp	r3, #2
 8003156:	f43f ae34 	beq.w	8002dc2 <torch_main+0x482>
	while(mode == 3) {
 800315a:	4b37      	ldr	r3, [pc, #220]	@ (8003238 <torch_main+0x8f8>)
 800315c:	781b      	ldrb	r3, [r3, #0]
 800315e:	2b03      	cmp	r3, #3
 8003160:	f43f ae14 	beq.w	8002d8c <torch_main+0x44c>
		}
		// *** END CHARGE LOOP ***
	}

	// !! MODE = 4 IS BALANCE TEST CODE !!
	if(mode == 4) {
 8003164:	4b34      	ldr	r3, [pc, #208]	@ (8003238 <torch_main+0x8f8>)
 8003166:	781b      	ldrb	r3, [r3, #0]
 8003168:	2b04      	cmp	r3, #4
 800316a:	d123      	bne.n	80031b4 <torch_main+0x874>
		start_timer(&htim2);
 800316c:	4833      	ldr	r0, [pc, #204]	@ (800323c <torch_main+0x8fc>)
 800316e:	f000 f897 	bl	80032a0 <start_timer>
		force_refup();
 8003172:	f7ff faf9 	bl	8002768 <force_refup>
		wait(1);
 8003176:	2001      	movs	r0, #1
 8003178:	f000 f886 	bl	8003288 <wait>
		pull_low(GPIOA, GPIO_PIN_8);		// TURN OFF ACTIVE LED
 800317c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003180:	482f      	ldr	r0, [pc, #188]	@ (8003240 <torch_main+0x900>)
 8003182:	f000 f861 	bl	8003248 <pull_low>
		pull_high(GPIOC, GPIO_PIN_9);		// TURN ON CHARGE LED
 8003186:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800318a:	482e      	ldr	r0, [pc, #184]	@ (8003244 <torch_main+0x904>)
 800318c:	f000 f86c 	bl	8003268 <pull_high>

		voltage_sense(cellVoltages);
 8003190:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8003194:	4618      	mov	r0, r3
 8003196:	f000 ffd7 	bl	8004148 <voltage_sense>

		cellsToBalanceQty = cell_sorter(cellsToBalance, cellVoltages, &localMinCellVoltage);
 800319a:	1dba      	adds	r2, r7, #6
 800319c:	f107 0164 	add.w	r1, r7, #100	@ 0x64
 80031a0:	f107 0308 	add.w	r3, r7, #8
 80031a4:	4618      	mov	r0, r3
 80031a6:	f7fe fa9b 	bl	80016e0 <cell_sorter>
 80031aa:	4603      	mov	r3, r0
 80031ac:	f887 30c7 	strb.w	r3, [r7, #199]	@ 0xc7

		manual_balance();
 80031b0:	f7fe fb1a 	bl	80017e8 <manual_balance>
		//manual_overheat_recover();
	}
	stop_timer(&htim2);
 80031b4:	4821      	ldr	r0, [pc, #132]	@ (800323c <torch_main+0x8fc>)
 80031b6:	f000 f8cd 	bl	8003354 <stop_timer>
	mode = 0;
 80031ba:	4b1f      	ldr	r3, [pc, #124]	@ (8003238 <torch_main+0x8f8>)
 80031bc:	2200      	movs	r2, #0
 80031be:	701a      	strb	r2, [r3, #0]
	    sideB_ITMP = (sideB_statusRegisterGroupA[3] << 8) | sideB_statusRegisterGroupA[2];
	    sideB_VA = (sideB_statusRegisterGroupA[5] << 8) | sideB_statusRegisterGroupA[4];*/
		// end test


	while(mode == 0) {
 80031c0:	e02d      	b.n	800321e <torch_main+0x8de>
		  pull_high(GPIOA, GPIO_PIN_8);		// ACTIVE LED
 80031c2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80031c6:	481e      	ldr	r0, [pc, #120]	@ (8003240 <torch_main+0x900>)
 80031c8:	f000 f84e 	bl	8003268 <pull_high>
		  pull_high(GPIOC, GPIO_PIN_9);		// CHARGE LED
 80031cc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80031d0:	481c      	ldr	r0, [pc, #112]	@ (8003244 <torch_main+0x904>)
 80031d2:	f000 f849 	bl	8003268 <pull_high>
		  pull_high(GPIOC, GPIO_PIN_8);		// BALANCE LED
 80031d6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80031da:	481a      	ldr	r0, [pc, #104]	@ (8003244 <torch_main+0x904>)
 80031dc:	f000 f844 	bl	8003268 <pull_high>
		  pull_high(GPIOC, GPIO_PIN_7);		// HOT LED
 80031e0:	2180      	movs	r1, #128	@ 0x80
 80031e2:	4818      	ldr	r0, [pc, #96]	@ (8003244 <torch_main+0x904>)
 80031e4:	f000 f840 	bl	8003268 <pull_high>
		  wait(1000);
 80031e8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80031ec:	f000 f84c 	bl	8003288 <wait>
		  pull_low(GPIOA, GPIO_PIN_8);
 80031f0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80031f4:	4812      	ldr	r0, [pc, #72]	@ (8003240 <torch_main+0x900>)
 80031f6:	f000 f827 	bl	8003248 <pull_low>
		  pull_low(GPIOC, GPIO_PIN_9);
 80031fa:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80031fe:	4811      	ldr	r0, [pc, #68]	@ (8003244 <torch_main+0x904>)
 8003200:	f000 f822 	bl	8003248 <pull_low>
		  pull_low(GPIOC, GPIO_PIN_8);
 8003204:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003208:	480e      	ldr	r0, [pc, #56]	@ (8003244 <torch_main+0x904>)
 800320a:	f000 f81d 	bl	8003248 <pull_low>
		  pull_low(GPIOC, GPIO_PIN_7);
 800320e:	2180      	movs	r1, #128	@ 0x80
 8003210:	480c      	ldr	r0, [pc, #48]	@ (8003244 <torch_main+0x904>)
 8003212:	f000 f819 	bl	8003248 <pull_low>
		  wait(1000);
 8003216:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800321a:	f000 f835 	bl	8003288 <wait>
	while(mode == 0) {
 800321e:	4b06      	ldr	r3, [pc, #24]	@ (8003238 <torch_main+0x8f8>)
 8003220:	781b      	ldrb	r3, [r3, #0]
 8003222:	2b00      	cmp	r3, #0
 8003224:	d0cd      	beq.n	80031c2 <torch_main+0x882>
	}
}
 8003226:	bf00      	nop
 8003228:	bf00      	nop
 800322a:	37e0      	adds	r7, #224	@ 0xe0
 800322c:	46bd      	mov	sp, r7
 800322e:	bd80      	pop	{r7, pc}
 8003230:	200000c4 	.word	0x200000c4
 8003234:	200003f5 	.word	0x200003f5
 8003238:	200003f4 	.word	0x200003f4
 800323c:	2000019c 	.word	0x2000019c
 8003240:	40020000 	.word	0x40020000
 8003244:	40020800 	.word	0x40020800

08003248 <pull_low>:
#include "torch_stm32.h"

volatile uint32_t Counter = 0;

void pull_low(GPIO_TypeDef *port, uint16_t pin)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	b082      	sub	sp, #8
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
 8003250:	460b      	mov	r3, r1
 8003252:	807b      	strh	r3, [r7, #2]
	HAL_GPIO_WritePin(port, pin, GPIO_PIN_RESET);
 8003254:	887b      	ldrh	r3, [r7, #2]
 8003256:	2200      	movs	r2, #0
 8003258:	4619      	mov	r1, r3
 800325a:	6878      	ldr	r0, [r7, #4]
 800325c:	f002 ffda 	bl	8006214 <HAL_GPIO_WritePin>
}
 8003260:	bf00      	nop
 8003262:	3708      	adds	r7, #8
 8003264:	46bd      	mov	sp, r7
 8003266:	bd80      	pop	{r7, pc}

08003268 <pull_high>:


void pull_high(GPIO_TypeDef *port, uint16_t pin)
{
 8003268:	b580      	push	{r7, lr}
 800326a:	b082      	sub	sp, #8
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
 8003270:	460b      	mov	r3, r1
 8003272:	807b      	strh	r3, [r7, #2]
	HAL_GPIO_WritePin(port, pin, GPIO_PIN_SET);
 8003274:	887b      	ldrh	r3, [r7, #2]
 8003276:	2201      	movs	r2, #1
 8003278:	4619      	mov	r1, r3
 800327a:	6878      	ldr	r0, [r7, #4]
 800327c:	f002 ffca 	bl	8006214 <HAL_GPIO_WritePin>
}
 8003280:	bf00      	nop
 8003282:	3708      	adds	r7, #8
 8003284:	46bd      	mov	sp, r7
 8003286:	bd80      	pop	{r7, pc}

08003288 <wait>:


void wait(uint32_t msDelay)
{
 8003288:	b580      	push	{r7, lr}
 800328a:	b082      	sub	sp, #8
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]
	HAL_Delay(msDelay);
 8003290:	6878      	ldr	r0, [r7, #4]
 8003292:	f001 fa29 	bl	80046e8 <HAL_Delay>
}
 8003296:	bf00      	nop
 8003298:	3708      	adds	r7, #8
 800329a:	46bd      	mov	sp, r7
 800329c:	bd80      	pop	{r7, pc}
	...

080032a0 <start_timer>:
	else { return 1; }
}


void start_timer(TIM_HandleTypeDef *htim)
{
 80032a0:	b580      	push	{r7, lr}
 80032a2:	b084      	sub	sp, #16
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef status;										// status indicates whether the reception was successful or not
	uint8_t attempts = 0;											// 5 attempts
 80032a8:	2300      	movs	r3, #0
 80032aa:	73fb      	strb	r3, [r7, #15]

	Counter = 0;
 80032ac:	4b26      	ldr	r3, [pc, #152]	@ (8003348 <start_timer+0xa8>)
 80032ae:	2200      	movs	r2, #0
 80032b0:	601a      	str	r2, [r3, #0]

	while(attempts < 5) {
 80032b2:	e010      	b.n	80032d6 <start_timer+0x36>
		status = HAL_TIM_Base_Start_IT(htim);
 80032b4:	6878      	ldr	r0, [r7, #4]
 80032b6:	f004 fa1b 	bl	80076f0 <HAL_TIM_Base_Start_IT>
 80032ba:	4603      	mov	r3, r0
 80032bc:	73bb      	strb	r3, [r7, #14]

		if(status == HAL_OK) { attempts = 10; }
 80032be:	7bbb      	ldrb	r3, [r7, #14]
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d102      	bne.n	80032ca <start_timer+0x2a>
 80032c4:	230a      	movs	r3, #10
 80032c6:	73fb      	strb	r3, [r7, #15]
 80032c8:	e005      	b.n	80032d6 <start_timer+0x36>

		else {
			attempts++;
 80032ca:	7bfb      	ldrb	r3, [r7, #15]
 80032cc:	3301      	adds	r3, #1
 80032ce:	73fb      	strb	r3, [r7, #15]
			wait(1);
 80032d0:	2001      	movs	r0, #1
 80032d2:	f7ff ffd9 	bl	8003288 <wait>
	while(attempts < 5) {
 80032d6:	7bfb      	ldrb	r3, [r7, #15]
 80032d8:	2b04      	cmp	r3, #4
 80032da:	d9eb      	bls.n	80032b4 <start_timer+0x14>
		}
	}
	if(attempts != 10) {
 80032dc:	7bfb      	ldrb	r3, [r7, #15]
 80032de:	2b0a      	cmp	r3, #10
 80032e0:	d02d      	beq.n	800333e <start_timer+0x9e>
		// STM ERROR (INTERNAL)
		while(1) {
			  pull_high(GPIOA, GPIO_PIN_8);
 80032e2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80032e6:	4819      	ldr	r0, [pc, #100]	@ (800334c <start_timer+0xac>)
 80032e8:	f7ff ffbe 	bl	8003268 <pull_high>
			  pull_high(GPIOC, GPIO_PIN_9);
 80032ec:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80032f0:	4817      	ldr	r0, [pc, #92]	@ (8003350 <start_timer+0xb0>)
 80032f2:	f7ff ffb9 	bl	8003268 <pull_high>
			  pull_high(GPIOC, GPIO_PIN_8);
 80032f6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80032fa:	4815      	ldr	r0, [pc, #84]	@ (8003350 <start_timer+0xb0>)
 80032fc:	f7ff ffb4 	bl	8003268 <pull_high>
			  pull_high(GPIOC, GPIO_PIN_7);
 8003300:	2180      	movs	r1, #128	@ 0x80
 8003302:	4813      	ldr	r0, [pc, #76]	@ (8003350 <start_timer+0xb0>)
 8003304:	f7ff ffb0 	bl	8003268 <pull_high>
			  wait(250);
 8003308:	20fa      	movs	r0, #250	@ 0xfa
 800330a:	f7ff ffbd 	bl	8003288 <wait>
			  pull_low(GPIOA, GPIO_PIN_8);
 800330e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003312:	480e      	ldr	r0, [pc, #56]	@ (800334c <start_timer+0xac>)
 8003314:	f7ff ff98 	bl	8003248 <pull_low>
			  pull_low(GPIOC, GPIO_PIN_9);
 8003318:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800331c:	480c      	ldr	r0, [pc, #48]	@ (8003350 <start_timer+0xb0>)
 800331e:	f7ff ff93 	bl	8003248 <pull_low>
			  pull_low(GPIOC, GPIO_PIN_8);
 8003322:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003326:	480a      	ldr	r0, [pc, #40]	@ (8003350 <start_timer+0xb0>)
 8003328:	f7ff ff8e 	bl	8003248 <pull_low>
			  pull_low(GPIOC, GPIO_PIN_7);
 800332c:	2180      	movs	r1, #128	@ 0x80
 800332e:	4808      	ldr	r0, [pc, #32]	@ (8003350 <start_timer+0xb0>)
 8003330:	f7ff ff8a 	bl	8003248 <pull_low>
			  wait(250);
 8003334:	20fa      	movs	r0, #250	@ 0xfa
 8003336:	f7ff ffa7 	bl	8003288 <wait>
			  pull_high(GPIOA, GPIO_PIN_8);
 800333a:	bf00      	nop
 800333c:	e7d1      	b.n	80032e2 <start_timer+0x42>
			  // ADD CAN MESSAGE SPAM
		}
	}
}
 800333e:	bf00      	nop
 8003340:	3710      	adds	r7, #16
 8003342:	46bd      	mov	sp, r7
 8003344:	bd80      	pop	{r7, pc}
 8003346:	bf00      	nop
 8003348:	200003f8 	.word	0x200003f8
 800334c:	40020000 	.word	0x40020000
 8003350:	40020800 	.word	0x40020800

08003354 <stop_timer>:


void stop_timer(TIM_HandleTypeDef *htim)
{
 8003354:	b580      	push	{r7, lr}
 8003356:	b084      	sub	sp, #16
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef status;										// status indicates whether the reception was successful or not
	uint8_t attempts = 0;											// 5 attempts
 800335c:	2300      	movs	r3, #0
 800335e:	73fb      	strb	r3, [r7, #15]

	while(attempts < 5) {
 8003360:	e010      	b.n	8003384 <stop_timer+0x30>
		status = HAL_TIM_Base_Stop_IT(htim);
 8003362:	6878      	ldr	r0, [r7, #4]
 8003364:	f004 fa34 	bl	80077d0 <HAL_TIM_Base_Stop_IT>
 8003368:	4603      	mov	r3, r0
 800336a:	73bb      	strb	r3, [r7, #14]

		if(status == HAL_OK) { attempts = 10; }
 800336c:	7bbb      	ldrb	r3, [r7, #14]
 800336e:	2b00      	cmp	r3, #0
 8003370:	d102      	bne.n	8003378 <stop_timer+0x24>
 8003372:	230a      	movs	r3, #10
 8003374:	73fb      	strb	r3, [r7, #15]
 8003376:	e005      	b.n	8003384 <stop_timer+0x30>

		else {
			attempts++;
 8003378:	7bfb      	ldrb	r3, [r7, #15]
 800337a:	3301      	adds	r3, #1
 800337c:	73fb      	strb	r3, [r7, #15]
			wait(1);
 800337e:	2001      	movs	r0, #1
 8003380:	f7ff ff82 	bl	8003288 <wait>
	while(attempts < 5) {
 8003384:	7bfb      	ldrb	r3, [r7, #15]
 8003386:	2b04      	cmp	r3, #4
 8003388:	d9eb      	bls.n	8003362 <stop_timer+0xe>
		}
	}
	if(attempts == 10) {
 800338a:	7bfb      	ldrb	r3, [r7, #15]
 800338c:	2b0a      	cmp	r3, #10
 800338e:	d107      	bne.n	80033a0 <stop_timer+0x4c>
		__HAL_TIM_SET_COUNTER(htim, 0);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	2200      	movs	r2, #0
 8003396:	625a      	str	r2, [r3, #36]	@ 0x24
		Counter = 0;
 8003398:	4b19      	ldr	r3, [pc, #100]	@ (8003400 <stop_timer+0xac>)
 800339a:	2200      	movs	r2, #0
 800339c:	601a      	str	r2, [r3, #0]
			  pull_low(GPIOC, GPIO_PIN_7);
			  wait(250);
			  // ADD CAN MESSAGE SPAM
		}
	}
}
 800339e:	e02c      	b.n	80033fa <stop_timer+0xa6>
			  pull_high(GPIOA, GPIO_PIN_8);
 80033a0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80033a4:	4817      	ldr	r0, [pc, #92]	@ (8003404 <stop_timer+0xb0>)
 80033a6:	f7ff ff5f 	bl	8003268 <pull_high>
			  pull_high(GPIOC, GPIO_PIN_9);
 80033aa:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80033ae:	4816      	ldr	r0, [pc, #88]	@ (8003408 <stop_timer+0xb4>)
 80033b0:	f7ff ff5a 	bl	8003268 <pull_high>
			  pull_high(GPIOC, GPIO_PIN_8);
 80033b4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80033b8:	4813      	ldr	r0, [pc, #76]	@ (8003408 <stop_timer+0xb4>)
 80033ba:	f7ff ff55 	bl	8003268 <pull_high>
			  pull_high(GPIOC, GPIO_PIN_7);
 80033be:	2180      	movs	r1, #128	@ 0x80
 80033c0:	4811      	ldr	r0, [pc, #68]	@ (8003408 <stop_timer+0xb4>)
 80033c2:	f7ff ff51 	bl	8003268 <pull_high>
			  wait(250);
 80033c6:	20fa      	movs	r0, #250	@ 0xfa
 80033c8:	f7ff ff5e 	bl	8003288 <wait>
			  pull_low(GPIOA, GPIO_PIN_8);
 80033cc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80033d0:	480c      	ldr	r0, [pc, #48]	@ (8003404 <stop_timer+0xb0>)
 80033d2:	f7ff ff39 	bl	8003248 <pull_low>
			  pull_low(GPIOC, GPIO_PIN_9);
 80033d6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80033da:	480b      	ldr	r0, [pc, #44]	@ (8003408 <stop_timer+0xb4>)
 80033dc:	f7ff ff34 	bl	8003248 <pull_low>
			  pull_low(GPIOC, GPIO_PIN_8);
 80033e0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80033e4:	4808      	ldr	r0, [pc, #32]	@ (8003408 <stop_timer+0xb4>)
 80033e6:	f7ff ff2f 	bl	8003248 <pull_low>
			  pull_low(GPIOC, GPIO_PIN_7);
 80033ea:	2180      	movs	r1, #128	@ 0x80
 80033ec:	4806      	ldr	r0, [pc, #24]	@ (8003408 <stop_timer+0xb4>)
 80033ee:	f7ff ff2b 	bl	8003248 <pull_low>
			  wait(250);
 80033f2:	20fa      	movs	r0, #250	@ 0xfa
 80033f4:	f7ff ff48 	bl	8003288 <wait>
			  pull_high(GPIOA, GPIO_PIN_8);
 80033f8:	e7d2      	b.n	80033a0 <stop_timer+0x4c>
}
 80033fa:	3710      	adds	r7, #16
 80033fc:	46bd      	mov	sp, r7
 80033fe:	bd80      	pop	{r7, pc}
 8003400:	200003f8 	.word	0x200003f8
 8003404:	40020000 	.word	0x40020000
 8003408:	40020800 	.word	0x40020800
 800340c:	00000000 	.word	0x00000000

08003410 <compute_resistance>:
#include "torch_stm32.h"
#include <math.h>


void compute_resistance(float *thermistorVoltage_ptr)
{
 8003410:	b5b0      	push	{r4, r5, r7, lr}
 8003412:	b09a      	sub	sp, #104	@ 0x68
 8003414:	af00      	add	r7, sp, #0
 8003416:	6078      	str	r0, [r7, #4]
	float thermistorResistance[THERM_QTY];
	uint16_t Rpu = 10000;			// Thermistor pull up resistor
 8003418:	f242 7310 	movw	r3, #10000	@ 0x2710
 800341c:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
	float Rmw = 0;					// Trace resistance on module board (UPDATE; different for each thermistor)
 8003420:	f04f 0300 	mov.w	r3, #0
 8003424:	663b      	str	r3, [r7, #96]	@ 0x60
	float Rmc = 0.03;				// Module board connector resistance
 8003426:	4b3e      	ldr	r3, [pc, #248]	@ (8003520 <compute_resistance+0x110>)
 8003428:	65fb      	str	r3, [r7, #92]	@ 0x5c
	float Rec = 0.03;				// Embedded board connector resistance
 800342a:	4b3d      	ldr	r3, [pc, #244]	@ (8003520 <compute_resistance+0x110>)
 800342c:	65bb      	str	r3, [r7, #88]	@ 0x58
	float Rew = 0;					// Trace resistance on embedded board (UPDATE; different for each thermistor)
 800342e:	f04f 0300 	mov.w	r3, #0
 8003432:	657b      	str	r3, [r7, #84]	@ 0x54
	float Req = Rpu + Rmc + Rec;	// Equivalent resistance (UPDATE; different for each thermistor)
 8003434:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8003438:	ee07 3a90 	vmov	s15, r3
 800343c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003440:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 8003444:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003448:	ed97 7a16 	vldr	s14, [r7, #88]	@ 0x58
 800344c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003450:	edc7 7a14 	vstr	s15, [r7, #80]	@ 0x50

	// MAKE i < THERM_QTY instead of i < 16 on final board
	for(uint8_t i = 0; i < 18; i++) { thermistorResistance[i] = (*(thermistorVoltage_ptr + i)*Req)/(3.3 - *(thermistorVoltage_ptr + i)); }
 8003454:	2300      	movs	r3, #0
 8003456:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800345a:	e039      	b.n	80034d0 <compute_resistance+0xc0>
 800345c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8003460:	009b      	lsls	r3, r3, #2
 8003462:	687a      	ldr	r2, [r7, #4]
 8003464:	4413      	add	r3, r2
 8003466:	ed93 7a00 	vldr	s14, [r3]
 800346a:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 800346e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003472:	ee17 0a90 	vmov	r0, s15
 8003476:	f7fd f82b 	bl	80004d0 <__aeabi_f2d>
 800347a:	4604      	mov	r4, r0
 800347c:	460d      	mov	r5, r1
 800347e:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8003482:	009b      	lsls	r3, r3, #2
 8003484:	687a      	ldr	r2, [r7, #4]
 8003486:	4413      	add	r3, r2
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	4618      	mov	r0, r3
 800348c:	f7fd f820 	bl	80004d0 <__aeabi_f2d>
 8003490:	4602      	mov	r2, r0
 8003492:	460b      	mov	r3, r1
 8003494:	a120      	add	r1, pc, #128	@ (adr r1, 8003518 <compute_resistance+0x108>)
 8003496:	e9d1 0100 	ldrd	r0, r1, [r1]
 800349a:	f7fc feb9 	bl	8000210 <__aeabi_dsub>
 800349e:	4602      	mov	r2, r0
 80034a0:	460b      	mov	r3, r1
 80034a2:	4620      	mov	r0, r4
 80034a4:	4629      	mov	r1, r5
 80034a6:	f7fd f995 	bl	80007d4 <__aeabi_ddiv>
 80034aa:	4602      	mov	r2, r0
 80034ac:	460b      	mov	r3, r1
 80034ae:	f897 4067 	ldrb.w	r4, [r7, #103]	@ 0x67
 80034b2:	4610      	mov	r0, r2
 80034b4:	4619      	mov	r1, r3
 80034b6:	f7fd fa75 	bl	80009a4 <__aeabi_d2f>
 80034ba:	4602      	mov	r2, r0
 80034bc:	00a3      	lsls	r3, r4, #2
 80034be:	3368      	adds	r3, #104	@ 0x68
 80034c0:	443b      	add	r3, r7
 80034c2:	3b60      	subs	r3, #96	@ 0x60
 80034c4:	601a      	str	r2, [r3, #0]
 80034c6:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80034ca:	3301      	adds	r3, #1
 80034cc:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 80034d0:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80034d4:	2b11      	cmp	r3, #17
 80034d6:	d9c1      	bls.n	800345c <compute_resistance+0x4c>

	// MAKE i < THERM_QTY instead of i < 16 on final board
	for(uint8_t i = 0; i < 18; i++) { *(thermistorVoltage_ptr + i) = thermistorResistance[i]; }
 80034d8:	2300      	movs	r3, #0
 80034da:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
 80034de:	e011      	b.n	8003504 <compute_resistance+0xf4>
 80034e0:	f897 2066 	ldrb.w	r2, [r7, #102]	@ 0x66
 80034e4:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 80034e8:	009b      	lsls	r3, r3, #2
 80034ea:	6879      	ldr	r1, [r7, #4]
 80034ec:	440b      	add	r3, r1
 80034ee:	0092      	lsls	r2, r2, #2
 80034f0:	3268      	adds	r2, #104	@ 0x68
 80034f2:	443a      	add	r2, r7
 80034f4:	3a60      	subs	r2, #96	@ 0x60
 80034f6:	6812      	ldr	r2, [r2, #0]
 80034f8:	601a      	str	r2, [r3, #0]
 80034fa:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 80034fe:	3301      	adds	r3, #1
 8003500:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
 8003504:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 8003508:	2b11      	cmp	r3, #17
 800350a:	d9e9      	bls.n	80034e0 <compute_resistance+0xd0>
}
 800350c:	bf00      	nop
 800350e:	bf00      	nop
 8003510:	3768      	adds	r7, #104	@ 0x68
 8003512:	46bd      	mov	sp, r7
 8003514:	bdb0      	pop	{r4, r5, r7, pc}
 8003516:	bf00      	nop
 8003518:	66666666 	.word	0x66666666
 800351c:	400a6666 	.word	0x400a6666
 8003520:	3cf5c28f 	.word	0x3cf5c28f
 8003524:	00000000 	.word	0x00000000

08003528 <compute_temperature>:


void compute_temperature(float *thermistorResistance_ptr)
{
 8003528:	b590      	push	{r4, r7, lr}
 800352a:	ed2d 8b02 	vpush	{d8}
 800352e:	b09b      	sub	sp, #108	@ 0x6c
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
	float temperature[THERM_QTY];
	float A = 0.003354016;
 8003534:	4b5e      	ldr	r3, [pc, #376]	@ (80036b0 <compute_temperature+0x188>)
 8003536:	663b      	str	r3, [r7, #96]	@ 0x60
	float B = 0.000256985;
 8003538:	4b5e      	ldr	r3, [pc, #376]	@ (80036b4 <compute_temperature+0x18c>)
 800353a:	65fb      	str	r3, [r7, #92]	@ 0x5c
	float C = 0.000002620131;
 800353c:	4b5e      	ldr	r3, [pc, #376]	@ (80036b8 <compute_temperature+0x190>)
 800353e:	65bb      	str	r3, [r7, #88]	@ 0x58
	float D = 0.00000006383091;
 8003540:	4b5e      	ldr	r3, [pc, #376]	@ (80036bc <compute_temperature+0x194>)
 8003542:	657b      	str	r3, [r7, #84]	@ 0x54
	uint16_t R25 = 10000;
 8003544:	f242 7310 	movw	r3, #10000	@ 0x2710
 8003548:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52


	for(uint8_t i = 0; i < 18; i++) {
 800354c:	2300      	movs	r3, #0
 800354e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8003552:	e082      	b.n	800365a <compute_temperature+0x132>
		temperature[i] = (1/(A +
							 B*logf(*(thermistorResistance_ptr + i)/R25) +
 8003554:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8003558:	009b      	lsls	r3, r3, #2
 800355a:	687a      	ldr	r2, [r7, #4]
 800355c:	4413      	add	r3, r2
 800355e:	ed93 7a00 	vldr	s14, [r3]
 8003562:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 8003566:	ee07 3a90 	vmov	s15, r3
 800356a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800356e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003572:	eeb0 0a66 	vmov.f32	s0, s13
 8003576:	f004 fd41 	bl	8007ffc <logf>
 800357a:	eeb0 7a40 	vmov.f32	s14, s0
 800357e:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 8003582:	ee27 7a27 	vmul.f32	s14, s14, s15
		temperature[i] = (1/(A +
 8003586:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 800358a:	ee37 8a27 	vadd.f32	s16, s14, s15
							 C*powf(logf(*(thermistorResistance_ptr + i)/R25), 2) +
 800358e:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8003592:	009b      	lsls	r3, r3, #2
 8003594:	687a      	ldr	r2, [r7, #4]
 8003596:	4413      	add	r3, r2
 8003598:	ed93 7a00 	vldr	s14, [r3]
 800359c:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 80035a0:	ee07 3a90 	vmov	s15, r3
 80035a4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80035a8:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80035ac:	eeb0 0a66 	vmov.f32	s0, s13
 80035b0:	f004 fd24 	bl	8007ffc <logf>
 80035b4:	eef0 7a40 	vmov.f32	s15, s0
 80035b8:	eef0 0a00 	vmov.f32	s1, #0	@ 0x40000000  2.0
 80035bc:	eeb0 0a67 	vmov.f32	s0, s15
 80035c0:	f004 fd4a 	bl	8008058 <powf>
 80035c4:	eeb0 7a40 	vmov.f32	s14, s0
 80035c8:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 80035cc:	ee67 7a27 	vmul.f32	s15, s14, s15
							 B*logf(*(thermistorResistance_ptr + i)/R25) +
 80035d0:	ee38 8a27 	vadd.f32	s16, s16, s15
							 D*powf(logf(*(thermistorResistance_ptr + i)/R25), 3))) - 273.15;
 80035d4:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80035d8:	009b      	lsls	r3, r3, #2
 80035da:	687a      	ldr	r2, [r7, #4]
 80035dc:	4413      	add	r3, r2
 80035de:	ed93 7a00 	vldr	s14, [r3]
 80035e2:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 80035e6:	ee07 3a90 	vmov	s15, r3
 80035ea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80035ee:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80035f2:	eeb0 0a66 	vmov.f32	s0, s13
 80035f6:	f004 fd01 	bl	8007ffc <logf>
 80035fa:	eef0 7a40 	vmov.f32	s15, s0
 80035fe:	eef0 0a08 	vmov.f32	s1, #8	@ 0x40400000  3.0
 8003602:	eeb0 0a67 	vmov.f32	s0, s15
 8003606:	f004 fd27 	bl	8008058 <powf>
 800360a:	eeb0 7a40 	vmov.f32	s14, s0
 800360e:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 8003612:	ee67 7a27 	vmul.f32	s15, s14, s15
							 C*powf(logf(*(thermistorResistance_ptr + i)/R25), 2) +
 8003616:	ee78 7a27 	vadd.f32	s15, s16, s15
		temperature[i] = (1/(A +
 800361a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800361e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003622:	ee16 0a90 	vmov	r0, s13
 8003626:	f7fc ff53 	bl	80004d0 <__aeabi_f2d>
							 D*powf(logf(*(thermistorResistance_ptr + i)/R25), 3))) - 273.15;
 800362a:	a31f      	add	r3, pc, #124	@ (adr r3, 80036a8 <compute_temperature+0x180>)
 800362c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003630:	f7fc fdee 	bl	8000210 <__aeabi_dsub>
 8003634:	4602      	mov	r2, r0
 8003636:	460b      	mov	r3, r1
		temperature[i] = (1/(A +
 8003638:	f897 4067 	ldrb.w	r4, [r7, #103]	@ 0x67
							 D*powf(logf(*(thermistorResistance_ptr + i)/R25), 3))) - 273.15;
 800363c:	4610      	mov	r0, r2
 800363e:	4619      	mov	r1, r3
 8003640:	f7fd f9b0 	bl	80009a4 <__aeabi_d2f>
 8003644:	4602      	mov	r2, r0
		temperature[i] = (1/(A +
 8003646:	00a3      	lsls	r3, r4, #2
 8003648:	3368      	adds	r3, #104	@ 0x68
 800364a:	443b      	add	r3, r7
 800364c:	3b60      	subs	r3, #96	@ 0x60
 800364e:	601a      	str	r2, [r3, #0]
	for(uint8_t i = 0; i < 18; i++) {
 8003650:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8003654:	3301      	adds	r3, #1
 8003656:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800365a:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800365e:	2b11      	cmp	r3, #17
 8003660:	f67f af78 	bls.w	8003554 <compute_temperature+0x2c>
	}
	// MAKE i < THERM_QTY instead of i < 16 on final board
	for(uint8_t i = 0; i < 18; i++) { *(thermistorResistance_ptr + i) = temperature[i]; }
 8003664:	2300      	movs	r3, #0
 8003666:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
 800366a:	e011      	b.n	8003690 <compute_temperature+0x168>
 800366c:	f897 2066 	ldrb.w	r2, [r7, #102]	@ 0x66
 8003670:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 8003674:	009b      	lsls	r3, r3, #2
 8003676:	6879      	ldr	r1, [r7, #4]
 8003678:	440b      	add	r3, r1
 800367a:	0092      	lsls	r2, r2, #2
 800367c:	3268      	adds	r2, #104	@ 0x68
 800367e:	443a      	add	r2, r7
 8003680:	3a60      	subs	r2, #96	@ 0x60
 8003682:	6812      	ldr	r2, [r2, #0]
 8003684:	601a      	str	r2, [r3, #0]
 8003686:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 800368a:	3301      	adds	r3, #1
 800368c:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
 8003690:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 8003694:	2b11      	cmp	r3, #17
 8003696:	d9e9      	bls.n	800366c <compute_temperature+0x144>
}
 8003698:	bf00      	nop
 800369a:	bf00      	nop
 800369c:	376c      	adds	r7, #108	@ 0x6c
 800369e:	46bd      	mov	sp, r7
 80036a0:	ecbd 8b02 	vpop	{d8}
 80036a4:	bd90      	pop	{r4, r7, pc}
 80036a6:	bf00      	nop
 80036a8:	66666666 	.word	0x66666666
 80036ac:	40711266 	.word	0x40711266
 80036b0:	3b5bcf0d 	.word	0x3b5bcf0d
 80036b4:	3986bbf1 	.word	0x3986bbf1
 80036b8:	362fd582 	.word	0x362fd582
 80036bc:	3389136a 	.word	0x3389136a

080036c0 <temperature_sense>:


void temperature_sense(float *temperature_ptr)
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b096      	sub	sp, #88	@ 0x58
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
	float thermistorArray[THERM_QTY];

	read_thermistors(thermistorArray);
 80036c8:	f107 030c 	add.w	r3, r7, #12
 80036cc:	4618      	mov	r0, r3
 80036ce:	f000 f82b 	bl	8003728 <read_thermistors>

	compute_resistance(thermistorArray);
 80036d2:	f107 030c 	add.w	r3, r7, #12
 80036d6:	4618      	mov	r0, r3
 80036d8:	f7ff fe9a 	bl	8003410 <compute_resistance>

	compute_temperature(thermistorArray);
 80036dc:	f107 030c 	add.w	r3, r7, #12
 80036e0:	4618      	mov	r0, r3
 80036e2:	f7ff ff21 	bl	8003528 <compute_temperature>

	for(uint8_t i = 0; i < 18; i++) { *(temperature_ptr + i) = thermistorArray[i]; }
 80036e6:	2300      	movs	r3, #0
 80036e8:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
 80036ec:	e011      	b.n	8003712 <temperature_sense+0x52>
 80036ee:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 80036f2:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80036f6:	009b      	lsls	r3, r3, #2
 80036f8:	6879      	ldr	r1, [r7, #4]
 80036fa:	440b      	add	r3, r1
 80036fc:	0092      	lsls	r2, r2, #2
 80036fe:	3258      	adds	r2, #88	@ 0x58
 8003700:	443a      	add	r2, r7
 8003702:	3a4c      	subs	r2, #76	@ 0x4c
 8003704:	6812      	ldr	r2, [r2, #0]
 8003706:	601a      	str	r2, [r3, #0]
 8003708:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800370c:	3301      	adds	r3, #1
 800370e:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
 8003712:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8003716:	2b11      	cmp	r3, #17
 8003718:	d9e9      	bls.n	80036ee <temperature_sense+0x2e>
}
 800371a:	bf00      	nop
 800371c:	bf00      	nop
 800371e:	3758      	adds	r7, #88	@ 0x58
 8003720:	46bd      	mov	sp, r7
 8003722:	bd80      	pop	{r7, pc}
 8003724:	0000      	movs	r0, r0
	...

08003728 <read_thermistors>:
	}
}


void read_thermistors(float *thermistorArray_ptr)
{
 8003728:	b590      	push	{r4, r7, lr}
 800372a:	b0a3      	sub	sp, #140	@ 0x8c
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
	uint16_t ADCSum;

	//HAL_ADC_Start(&hadc1);
	// ADD MUX ENABLE ON FINAL BOARD

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
 8003730:	2200      	movs	r2, #0
 8003732:	2108      	movs	r1, #8
 8003734:	48c4      	ldr	r0, [pc, #784]	@ (8003a48 <read_thermistors+0x320>)
 8003736:	f002 fd6d 	bl	8006214 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
 800373a:	2200      	movs	r2, #0
 800373c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8003740:	48c2      	ldr	r0, [pc, #776]	@ (8003a4c <read_thermistors+0x324>)
 8003742:	f002 fd67 	bl	8006214 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 8003746:	2200      	movs	r2, #0
 8003748:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800374c:	48c0      	ldr	r0, [pc, #768]	@ (8003a50 <read_thermistors+0x328>)
 800374e:	f002 fd61 	bl	8006214 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 8003752:	2200      	movs	r2, #0
 8003754:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003758:	48bd      	ldr	r0, [pc, #756]	@ (8003a50 <read_thermistors+0x328>)
 800375a:	f002 fd5b 	bl	8006214 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 800375e:	2001      	movs	r0, #1
 8003760:	f000 ffc2 	bl	80046e8 <HAL_Delay>
	ADCSum = 0;
 8003764:	2300      	movs	r3, #0
 8003766:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
	for (uint8_t i = 0; i < FILTER_LEN; i++) {
 800376a:	2300      	movs	r3, #0
 800376c:	f887 3085 	strb.w	r3, [r7, #133]	@ 0x85
 8003770:	e019      	b.n	80037a6 <read_thermistors+0x7e>
		HAL_ADC_Start(&hadc1);
 8003772:	48b8      	ldr	r0, [pc, #736]	@ (8003a54 <read_thermistors+0x32c>)
 8003774:	f001 f820 	bl	80047b8 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8003778:	f04f 31ff 	mov.w	r1, #4294967295
 800377c:	48b5      	ldr	r0, [pc, #724]	@ (8003a54 <read_thermistors+0x32c>)
 800377e:	f001 f920 	bl	80049c2 <HAL_ADC_PollForConversion>
		ADCSum += HAL_ADC_GetValue(&hadc1);
 8003782:	48b4      	ldr	r0, [pc, #720]	@ (8003a54 <read_thermistors+0x32c>)
 8003784:	f001 f9a8 	bl	8004ad8 <HAL_ADC_GetValue>
 8003788:	4603      	mov	r3, r0
 800378a:	b29a      	uxth	r2, r3
 800378c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003790:	4413      	add	r3, r2
 8003792:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
		HAL_ADC_Stop(&hadc1);
 8003796:	48af      	ldr	r0, [pc, #700]	@ (8003a54 <read_thermistors+0x32c>)
 8003798:	f001 f8e0 	bl	800495c <HAL_ADC_Stop>
	for (uint8_t i = 0; i < FILTER_LEN; i++) {
 800379c:	f897 3085 	ldrb.w	r3, [r7, #133]	@ 0x85
 80037a0:	3301      	adds	r3, #1
 80037a2:	f887 3085 	strb.w	r3, [r7, #133]	@ 0x85
 80037a6:	f897 3085 	ldrb.w	r3, [r7, #133]	@ 0x85
 80037aa:	2b09      	cmp	r3, #9
 80037ac:	d9e1      	bls.n	8003772 <read_thermistors+0x4a>
	}
	thermistorRawADC[0] = ADCSum / FILTER_LEN;
 80037ae:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80037b2:	4aa9      	ldr	r2, [pc, #676]	@ (8003a58 <read_thermistors+0x330>)
 80037b4:	fba2 2303 	umull	r2, r3, r2, r3
 80037b8:	08db      	lsrs	r3, r3, #3
 80037ba:	b29b      	uxth	r3, r3
 80037bc:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_SET);
 80037c0:	2201      	movs	r2, #1
 80037c2:	2108      	movs	r1, #8
 80037c4:	48a0      	ldr	r0, [pc, #640]	@ (8003a48 <read_thermistors+0x320>)
 80037c6:	f002 fd25 	bl	8006214 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
 80037ca:	2200      	movs	r2, #0
 80037cc:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80037d0:	489e      	ldr	r0, [pc, #632]	@ (8003a4c <read_thermistors+0x324>)
 80037d2:	f002 fd1f 	bl	8006214 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 80037d6:	2200      	movs	r2, #0
 80037d8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80037dc:	489c      	ldr	r0, [pc, #624]	@ (8003a50 <read_thermistors+0x328>)
 80037de:	f002 fd19 	bl	8006214 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 80037e2:	2200      	movs	r2, #0
 80037e4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80037e8:	4899      	ldr	r0, [pc, #612]	@ (8003a50 <read_thermistors+0x328>)
 80037ea:	f002 fd13 	bl	8006214 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80037ee:	2001      	movs	r0, #1
 80037f0:	f000 ff7a 	bl	80046e8 <HAL_Delay>
	ADCSum = 0;
 80037f4:	2300      	movs	r3, #0
 80037f6:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
	for (uint8_t i = 0; i < FILTER_LEN; i++) {
 80037fa:	2300      	movs	r3, #0
 80037fc:	f887 3084 	strb.w	r3, [r7, #132]	@ 0x84
 8003800:	e019      	b.n	8003836 <read_thermistors+0x10e>
		HAL_ADC_Start(&hadc1);
 8003802:	4894      	ldr	r0, [pc, #592]	@ (8003a54 <read_thermistors+0x32c>)
 8003804:	f000 ffd8 	bl	80047b8 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8003808:	f04f 31ff 	mov.w	r1, #4294967295
 800380c:	4891      	ldr	r0, [pc, #580]	@ (8003a54 <read_thermistors+0x32c>)
 800380e:	f001 f8d8 	bl	80049c2 <HAL_ADC_PollForConversion>
		ADCSum += HAL_ADC_GetValue(&hadc1);
 8003812:	4890      	ldr	r0, [pc, #576]	@ (8003a54 <read_thermistors+0x32c>)
 8003814:	f001 f960 	bl	8004ad8 <HAL_ADC_GetValue>
 8003818:	4603      	mov	r3, r0
 800381a:	b29a      	uxth	r2, r3
 800381c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003820:	4413      	add	r3, r2
 8003822:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
		HAL_ADC_Stop(&hadc1);
 8003826:	488b      	ldr	r0, [pc, #556]	@ (8003a54 <read_thermistors+0x32c>)
 8003828:	f001 f898 	bl	800495c <HAL_ADC_Stop>
	for (uint8_t i = 0; i < FILTER_LEN; i++) {
 800382c:	f897 3084 	ldrb.w	r3, [r7, #132]	@ 0x84
 8003830:	3301      	adds	r3, #1
 8003832:	f887 3084 	strb.w	r3, [r7, #132]	@ 0x84
 8003836:	f897 3084 	ldrb.w	r3, [r7, #132]	@ 0x84
 800383a:	2b09      	cmp	r3, #9
 800383c:	d9e1      	bls.n	8003802 <read_thermistors+0xda>
	}
	thermistorRawADC[1] = ADCSum / FILTER_LEN;
 800383e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003842:	4a85      	ldr	r2, [pc, #532]	@ (8003a58 <read_thermistors+0x330>)
 8003844:	fba2 2303 	umull	r2, r3, r2, r3
 8003848:	08db      	lsrs	r3, r3, #3
 800384a:	b29b      	uxth	r3, r3
 800384c:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
 8003850:	2200      	movs	r2, #0
 8003852:	2108      	movs	r1, #8
 8003854:	487c      	ldr	r0, [pc, #496]	@ (8003a48 <read_thermistors+0x320>)
 8003856:	f002 fcdd 	bl	8006214 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_SET);
 800385a:	2201      	movs	r2, #1
 800385c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8003860:	487a      	ldr	r0, [pc, #488]	@ (8003a4c <read_thermistors+0x324>)
 8003862:	f002 fcd7 	bl	8006214 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 8003866:	2200      	movs	r2, #0
 8003868:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800386c:	4878      	ldr	r0, [pc, #480]	@ (8003a50 <read_thermistors+0x328>)
 800386e:	f002 fcd1 	bl	8006214 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 8003872:	2200      	movs	r2, #0
 8003874:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003878:	4875      	ldr	r0, [pc, #468]	@ (8003a50 <read_thermistors+0x328>)
 800387a:	f002 fccb 	bl	8006214 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 800387e:	2001      	movs	r0, #1
 8003880:	f000 ff32 	bl	80046e8 <HAL_Delay>
	ADCSum = 0;
 8003884:	2300      	movs	r3, #0
 8003886:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
	for (uint8_t i = 0; i < FILTER_LEN; i++) {
 800388a:	2300      	movs	r3, #0
 800388c:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
 8003890:	e019      	b.n	80038c6 <read_thermistors+0x19e>
		HAL_ADC_Start(&hadc1);
 8003892:	4870      	ldr	r0, [pc, #448]	@ (8003a54 <read_thermistors+0x32c>)
 8003894:	f000 ff90 	bl	80047b8 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8003898:	f04f 31ff 	mov.w	r1, #4294967295
 800389c:	486d      	ldr	r0, [pc, #436]	@ (8003a54 <read_thermistors+0x32c>)
 800389e:	f001 f890 	bl	80049c2 <HAL_ADC_PollForConversion>
		ADCSum += HAL_ADC_GetValue(&hadc1);
 80038a2:	486c      	ldr	r0, [pc, #432]	@ (8003a54 <read_thermistors+0x32c>)
 80038a4:	f001 f918 	bl	8004ad8 <HAL_ADC_GetValue>
 80038a8:	4603      	mov	r3, r0
 80038aa:	b29a      	uxth	r2, r3
 80038ac:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80038b0:	4413      	add	r3, r2
 80038b2:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
		HAL_ADC_Stop(&hadc1);
 80038b6:	4867      	ldr	r0, [pc, #412]	@ (8003a54 <read_thermistors+0x32c>)
 80038b8:	f001 f850 	bl	800495c <HAL_ADC_Stop>
	for (uint8_t i = 0; i < FILTER_LEN; i++) {
 80038bc:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 80038c0:	3301      	adds	r3, #1
 80038c2:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
 80038c6:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 80038ca:	2b09      	cmp	r3, #9
 80038cc:	d9e1      	bls.n	8003892 <read_thermistors+0x16a>
	}
	thermistorRawADC[2] = ADCSum / FILTER_LEN;
 80038ce:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80038d2:	4a61      	ldr	r2, [pc, #388]	@ (8003a58 <read_thermistors+0x330>)
 80038d4:	fba2 2303 	umull	r2, r3, r2, r3
 80038d8:	08db      	lsrs	r3, r3, #3
 80038da:	b29b      	uxth	r3, r3
 80038dc:	f8a7 3054 	strh.w	r3, [r7, #84]	@ 0x54

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_SET);
 80038e0:	2201      	movs	r2, #1
 80038e2:	2108      	movs	r1, #8
 80038e4:	4858      	ldr	r0, [pc, #352]	@ (8003a48 <read_thermistors+0x320>)
 80038e6:	f002 fc95 	bl	8006214 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_SET);
 80038ea:	2201      	movs	r2, #1
 80038ec:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80038f0:	4856      	ldr	r0, [pc, #344]	@ (8003a4c <read_thermistors+0x324>)
 80038f2:	f002 fc8f 	bl	8006214 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 80038f6:	2200      	movs	r2, #0
 80038f8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80038fc:	4854      	ldr	r0, [pc, #336]	@ (8003a50 <read_thermistors+0x328>)
 80038fe:	f002 fc89 	bl	8006214 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 8003902:	2200      	movs	r2, #0
 8003904:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003908:	4851      	ldr	r0, [pc, #324]	@ (8003a50 <read_thermistors+0x328>)
 800390a:	f002 fc83 	bl	8006214 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 800390e:	2001      	movs	r0, #1
 8003910:	f000 feea 	bl	80046e8 <HAL_Delay>
	ADCSum = 0;
 8003914:	2300      	movs	r3, #0
 8003916:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
	for (uint8_t i = 0; i < FILTER_LEN; i++) {
 800391a:	2300      	movs	r3, #0
 800391c:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
 8003920:	e019      	b.n	8003956 <read_thermistors+0x22e>
		HAL_ADC_Start(&hadc1);
 8003922:	484c      	ldr	r0, [pc, #304]	@ (8003a54 <read_thermistors+0x32c>)
 8003924:	f000 ff48 	bl	80047b8 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8003928:	f04f 31ff 	mov.w	r1, #4294967295
 800392c:	4849      	ldr	r0, [pc, #292]	@ (8003a54 <read_thermistors+0x32c>)
 800392e:	f001 f848 	bl	80049c2 <HAL_ADC_PollForConversion>
		ADCSum += HAL_ADC_GetValue(&hadc1);
 8003932:	4848      	ldr	r0, [pc, #288]	@ (8003a54 <read_thermistors+0x32c>)
 8003934:	f001 f8d0 	bl	8004ad8 <HAL_ADC_GetValue>
 8003938:	4603      	mov	r3, r0
 800393a:	b29a      	uxth	r2, r3
 800393c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003940:	4413      	add	r3, r2
 8003942:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
		HAL_ADC_Stop(&hadc1);
 8003946:	4843      	ldr	r0, [pc, #268]	@ (8003a54 <read_thermistors+0x32c>)
 8003948:	f001 f808 	bl	800495c <HAL_ADC_Stop>
	for (uint8_t i = 0; i < FILTER_LEN; i++) {
 800394c:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
 8003950:	3301      	adds	r3, #1
 8003952:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
 8003956:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
 800395a:	2b09      	cmp	r3, #9
 800395c:	d9e1      	bls.n	8003922 <read_thermistors+0x1fa>
	}
	thermistorRawADC[3] = ADCSum / FILTER_LEN;
 800395e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003962:	4a3d      	ldr	r2, [pc, #244]	@ (8003a58 <read_thermistors+0x330>)
 8003964:	fba2 2303 	umull	r2, r3, r2, r3
 8003968:	08db      	lsrs	r3, r3, #3
 800396a:	b29b      	uxth	r3, r3
 800396c:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
 8003970:	2200      	movs	r2, #0
 8003972:	2108      	movs	r1, #8
 8003974:	4834      	ldr	r0, [pc, #208]	@ (8003a48 <read_thermistors+0x320>)
 8003976:	f002 fc4d 	bl	8006214 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
 800397a:	2200      	movs	r2, #0
 800397c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8003980:	4832      	ldr	r0, [pc, #200]	@ (8003a4c <read_thermistors+0x324>)
 8003982:	f002 fc47 	bl	8006214 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 8003986:	2201      	movs	r2, #1
 8003988:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800398c:	4830      	ldr	r0, [pc, #192]	@ (8003a50 <read_thermistors+0x328>)
 800398e:	f002 fc41 	bl	8006214 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 8003992:	2200      	movs	r2, #0
 8003994:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003998:	482d      	ldr	r0, [pc, #180]	@ (8003a50 <read_thermistors+0x328>)
 800399a:	f002 fc3b 	bl	8006214 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 800399e:	2001      	movs	r0, #1
 80039a0:	f000 fea2 	bl	80046e8 <HAL_Delay>
	ADCSum = 0;
 80039a4:	2300      	movs	r3, #0
 80039a6:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
	for (uint8_t i = 0; i <= 10; i++) {
 80039aa:	2300      	movs	r3, #0
 80039ac:	f887 3081 	strb.w	r3, [r7, #129]	@ 0x81
 80039b0:	e019      	b.n	80039e6 <read_thermistors+0x2be>
		HAL_ADC_Start(&hadc1);
 80039b2:	4828      	ldr	r0, [pc, #160]	@ (8003a54 <read_thermistors+0x32c>)
 80039b4:	f000 ff00 	bl	80047b8 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 80039b8:	f04f 31ff 	mov.w	r1, #4294967295
 80039bc:	4825      	ldr	r0, [pc, #148]	@ (8003a54 <read_thermistors+0x32c>)
 80039be:	f001 f800 	bl	80049c2 <HAL_ADC_PollForConversion>
		ADCSum += HAL_ADC_GetValue(&hadc1);
 80039c2:	4824      	ldr	r0, [pc, #144]	@ (8003a54 <read_thermistors+0x32c>)
 80039c4:	f001 f888 	bl	8004ad8 <HAL_ADC_GetValue>
 80039c8:	4603      	mov	r3, r0
 80039ca:	b29a      	uxth	r2, r3
 80039cc:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80039d0:	4413      	add	r3, r2
 80039d2:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
		HAL_ADC_Stop(&hadc1);
 80039d6:	481f      	ldr	r0, [pc, #124]	@ (8003a54 <read_thermistors+0x32c>)
 80039d8:	f000 ffc0 	bl	800495c <HAL_ADC_Stop>
	for (uint8_t i = 0; i <= 10; i++) {
 80039dc:	f897 3081 	ldrb.w	r3, [r7, #129]	@ 0x81
 80039e0:	3301      	adds	r3, #1
 80039e2:	f887 3081 	strb.w	r3, [r7, #129]	@ 0x81
 80039e6:	f897 3081 	ldrb.w	r3, [r7, #129]	@ 0x81
 80039ea:	2b0a      	cmp	r3, #10
 80039ec:	d9e1      	bls.n	80039b2 <read_thermistors+0x28a>
	}
	thermistorRawADC[4] = (ADCSum / FILTER_LEN) - 200;
 80039ee:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80039f2:	4a19      	ldr	r2, [pc, #100]	@ (8003a58 <read_thermistors+0x330>)
 80039f4:	fba2 2303 	umull	r2, r3, r2, r3
 80039f8:	08db      	lsrs	r3, r3, #3
 80039fa:	b29b      	uxth	r3, r3
 80039fc:	3bc8      	subs	r3, #200	@ 0xc8
 80039fe:	b29b      	uxth	r3, r3
 8003a00:	f8a7 3058 	strh.w	r3, [r7, #88]	@ 0x58

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_SET);
 8003a04:	2201      	movs	r2, #1
 8003a06:	2108      	movs	r1, #8
 8003a08:	480f      	ldr	r0, [pc, #60]	@ (8003a48 <read_thermistors+0x320>)
 8003a0a:	f002 fc03 	bl	8006214 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
 8003a0e:	2200      	movs	r2, #0
 8003a10:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8003a14:	480d      	ldr	r0, [pc, #52]	@ (8003a4c <read_thermistors+0x324>)
 8003a16:	f002 fbfd 	bl	8006214 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 8003a1a:	2201      	movs	r2, #1
 8003a1c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8003a20:	480b      	ldr	r0, [pc, #44]	@ (8003a50 <read_thermistors+0x328>)
 8003a22:	f002 fbf7 	bl	8006214 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 8003a26:	2200      	movs	r2, #0
 8003a28:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003a2c:	4808      	ldr	r0, [pc, #32]	@ (8003a50 <read_thermistors+0x328>)
 8003a2e:	f002 fbf1 	bl	8006214 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8003a32:	2001      	movs	r0, #1
 8003a34:	f000 fe58 	bl	80046e8 <HAL_Delay>
	ADCSum = 0;
 8003a38:	2300      	movs	r3, #0
 8003a3a:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
	for (uint8_t i = 0; i < FILTER_LEN; i++) {
 8003a3e:	2300      	movs	r3, #0
 8003a40:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
 8003a44:	e024      	b.n	8003a90 <read_thermistors+0x368>
 8003a46:	bf00      	nop
 8003a48:	40020000 	.word	0x40020000
 8003a4c:	40020800 	.word	0x40020800
 8003a50:	40020400 	.word	0x40020400
 8003a54:	2000007c 	.word	0x2000007c
 8003a58:	cccccccd 	.word	0xcccccccd
		HAL_ADC_Start(&hadc1);
 8003a5c:	48b4      	ldr	r0, [pc, #720]	@ (8003d30 <read_thermistors+0x608>)
 8003a5e:	f000 feab 	bl	80047b8 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8003a62:	f04f 31ff 	mov.w	r1, #4294967295
 8003a66:	48b2      	ldr	r0, [pc, #712]	@ (8003d30 <read_thermistors+0x608>)
 8003a68:	f000 ffab 	bl	80049c2 <HAL_ADC_PollForConversion>
		ADCSum += HAL_ADC_GetValue(&hadc1);
 8003a6c:	48b0      	ldr	r0, [pc, #704]	@ (8003d30 <read_thermistors+0x608>)
 8003a6e:	f001 f833 	bl	8004ad8 <HAL_ADC_GetValue>
 8003a72:	4603      	mov	r3, r0
 8003a74:	b29a      	uxth	r2, r3
 8003a76:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003a7a:	4413      	add	r3, r2
 8003a7c:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
		HAL_ADC_Stop(&hadc1);
 8003a80:	48ab      	ldr	r0, [pc, #684]	@ (8003d30 <read_thermistors+0x608>)
 8003a82:	f000 ff6b 	bl	800495c <HAL_ADC_Stop>
	for (uint8_t i = 0; i < FILTER_LEN; i++) {
 8003a86:	f897 3080 	ldrb.w	r3, [r7, #128]	@ 0x80
 8003a8a:	3301      	adds	r3, #1
 8003a8c:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
 8003a90:	f897 3080 	ldrb.w	r3, [r7, #128]	@ 0x80
 8003a94:	2b09      	cmp	r3, #9
 8003a96:	d9e1      	bls.n	8003a5c <read_thermistors+0x334>
	}
	thermistorRawADC[5] = ADCSum / FILTER_LEN;
 8003a98:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003a9c:	4aa5      	ldr	r2, [pc, #660]	@ (8003d34 <read_thermistors+0x60c>)
 8003a9e:	fba2 2303 	umull	r2, r3, r2, r3
 8003aa2:	08db      	lsrs	r3, r3, #3
 8003aa4:	b29b      	uxth	r3, r3
 8003aa6:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
 8003aaa:	2200      	movs	r2, #0
 8003aac:	2108      	movs	r1, #8
 8003aae:	48a2      	ldr	r0, [pc, #648]	@ (8003d38 <read_thermistors+0x610>)
 8003ab0:	f002 fbb0 	bl	8006214 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_SET);
 8003ab4:	2201      	movs	r2, #1
 8003ab6:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8003aba:	48a0      	ldr	r0, [pc, #640]	@ (8003d3c <read_thermistors+0x614>)
 8003abc:	f002 fbaa 	bl	8006214 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 8003ac0:	2201      	movs	r2, #1
 8003ac2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8003ac6:	489e      	ldr	r0, [pc, #632]	@ (8003d40 <read_thermistors+0x618>)
 8003ac8:	f002 fba4 	bl	8006214 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 8003acc:	2200      	movs	r2, #0
 8003ace:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003ad2:	489b      	ldr	r0, [pc, #620]	@ (8003d40 <read_thermistors+0x618>)
 8003ad4:	f002 fb9e 	bl	8006214 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8003ad8:	2001      	movs	r0, #1
 8003ada:	f000 fe05 	bl	80046e8 <HAL_Delay>
	ADCSum = 0;
 8003ade:	2300      	movs	r3, #0
 8003ae0:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
	for (uint8_t i = 0; i <= 10; i++) {
 8003ae4:	2300      	movs	r3, #0
 8003ae6:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8003aea:	e019      	b.n	8003b20 <read_thermistors+0x3f8>
		HAL_ADC_Start(&hadc1);
 8003aec:	4890      	ldr	r0, [pc, #576]	@ (8003d30 <read_thermistors+0x608>)
 8003aee:	f000 fe63 	bl	80047b8 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8003af2:	f04f 31ff 	mov.w	r1, #4294967295
 8003af6:	488e      	ldr	r0, [pc, #568]	@ (8003d30 <read_thermistors+0x608>)
 8003af8:	f000 ff63 	bl	80049c2 <HAL_ADC_PollForConversion>
		ADCSum += HAL_ADC_GetValue(&hadc1);
 8003afc:	488c      	ldr	r0, [pc, #560]	@ (8003d30 <read_thermistors+0x608>)
 8003afe:	f000 ffeb 	bl	8004ad8 <HAL_ADC_GetValue>
 8003b02:	4603      	mov	r3, r0
 8003b04:	b29a      	uxth	r2, r3
 8003b06:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003b0a:	4413      	add	r3, r2
 8003b0c:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
		HAL_ADC_Stop(&hadc1);
 8003b10:	4887      	ldr	r0, [pc, #540]	@ (8003d30 <read_thermistors+0x608>)
 8003b12:	f000 ff23 	bl	800495c <HAL_ADC_Stop>
	for (uint8_t i = 0; i <= 10; i++) {
 8003b16:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8003b1a:	3301      	adds	r3, #1
 8003b1c:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8003b20:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8003b24:	2b0a      	cmp	r3, #10
 8003b26:	d9e1      	bls.n	8003aec <read_thermistors+0x3c4>
	}
	thermistorRawADC[6] = (ADCSum / FILTER_LEN) - 200;
 8003b28:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003b2c:	4a81      	ldr	r2, [pc, #516]	@ (8003d34 <read_thermistors+0x60c>)
 8003b2e:	fba2 2303 	umull	r2, r3, r2, r3
 8003b32:	08db      	lsrs	r3, r3, #3
 8003b34:	b29b      	uxth	r3, r3
 8003b36:	3bc8      	subs	r3, #200	@ 0xc8
 8003b38:	b29b      	uxth	r3, r3
 8003b3a:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_SET);
 8003b3e:	2201      	movs	r2, #1
 8003b40:	2108      	movs	r1, #8
 8003b42:	487d      	ldr	r0, [pc, #500]	@ (8003d38 <read_thermistors+0x610>)
 8003b44:	f002 fb66 	bl	8006214 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_SET);
 8003b48:	2201      	movs	r2, #1
 8003b4a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8003b4e:	487b      	ldr	r0, [pc, #492]	@ (8003d3c <read_thermistors+0x614>)
 8003b50:	f002 fb60 	bl	8006214 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 8003b54:	2201      	movs	r2, #1
 8003b56:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8003b5a:	4879      	ldr	r0, [pc, #484]	@ (8003d40 <read_thermistors+0x618>)
 8003b5c:	f002 fb5a 	bl	8006214 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 8003b60:	2200      	movs	r2, #0
 8003b62:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003b66:	4876      	ldr	r0, [pc, #472]	@ (8003d40 <read_thermistors+0x618>)
 8003b68:	f002 fb54 	bl	8006214 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8003b6c:	2001      	movs	r0, #1
 8003b6e:	f000 fdbb 	bl	80046e8 <HAL_Delay>
	ADCSum = 0;
 8003b72:	2300      	movs	r3, #0
 8003b74:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
	for (uint8_t i = 0; i < FILTER_LEN; i++) {
 8003b78:	2300      	movs	r3, #0
 8003b7a:	f887 307e 	strb.w	r3, [r7, #126]	@ 0x7e
 8003b7e:	e019      	b.n	8003bb4 <read_thermistors+0x48c>
		HAL_ADC_Start(&hadc1);
 8003b80:	486b      	ldr	r0, [pc, #428]	@ (8003d30 <read_thermistors+0x608>)
 8003b82:	f000 fe19 	bl	80047b8 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8003b86:	f04f 31ff 	mov.w	r1, #4294967295
 8003b8a:	4869      	ldr	r0, [pc, #420]	@ (8003d30 <read_thermistors+0x608>)
 8003b8c:	f000 ff19 	bl	80049c2 <HAL_ADC_PollForConversion>
		ADCSum += HAL_ADC_GetValue(&hadc1);
 8003b90:	4867      	ldr	r0, [pc, #412]	@ (8003d30 <read_thermistors+0x608>)
 8003b92:	f000 ffa1 	bl	8004ad8 <HAL_ADC_GetValue>
 8003b96:	4603      	mov	r3, r0
 8003b98:	b29a      	uxth	r2, r3
 8003b9a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003b9e:	4413      	add	r3, r2
 8003ba0:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
		HAL_ADC_Stop(&hadc1);
 8003ba4:	4862      	ldr	r0, [pc, #392]	@ (8003d30 <read_thermistors+0x608>)
 8003ba6:	f000 fed9 	bl	800495c <HAL_ADC_Stop>
	for (uint8_t i = 0; i < FILTER_LEN; i++) {
 8003baa:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 8003bae:	3301      	adds	r3, #1
 8003bb0:	f887 307e 	strb.w	r3, [r7, #126]	@ 0x7e
 8003bb4:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 8003bb8:	2b09      	cmp	r3, #9
 8003bba:	d9e1      	bls.n	8003b80 <read_thermistors+0x458>
	}
	thermistorRawADC[7] = ADCSum / FILTER_LEN;
 8003bbc:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003bc0:	4a5c      	ldr	r2, [pc, #368]	@ (8003d34 <read_thermistors+0x60c>)
 8003bc2:	fba2 2303 	umull	r2, r3, r2, r3
 8003bc6:	08db      	lsrs	r3, r3, #3
 8003bc8:	b29b      	uxth	r3, r3
 8003bca:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
 8003bce:	2200      	movs	r2, #0
 8003bd0:	2108      	movs	r1, #8
 8003bd2:	4859      	ldr	r0, [pc, #356]	@ (8003d38 <read_thermistors+0x610>)
 8003bd4:	f002 fb1e 	bl	8006214 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
 8003bd8:	2200      	movs	r2, #0
 8003bda:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8003bde:	4857      	ldr	r0, [pc, #348]	@ (8003d3c <read_thermistors+0x614>)
 8003be0:	f002 fb18 	bl	8006214 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 8003be4:	2200      	movs	r2, #0
 8003be6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8003bea:	4855      	ldr	r0, [pc, #340]	@ (8003d40 <read_thermistors+0x618>)
 8003bec:	f002 fb12 	bl	8006214 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 8003bf0:	2201      	movs	r2, #1
 8003bf2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003bf6:	4852      	ldr	r0, [pc, #328]	@ (8003d40 <read_thermistors+0x618>)
 8003bf8:	f002 fb0c 	bl	8006214 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8003bfc:	2001      	movs	r0, #1
 8003bfe:	f000 fd73 	bl	80046e8 <HAL_Delay>
	ADCSum = 0;
 8003c02:	2300      	movs	r3, #0
 8003c04:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
	for (uint8_t i = 0; i < FILTER_LEN; i++) {
 8003c08:	2300      	movs	r3, #0
 8003c0a:	f887 307d 	strb.w	r3, [r7, #125]	@ 0x7d
 8003c0e:	e019      	b.n	8003c44 <read_thermistors+0x51c>
		HAL_ADC_Start(&hadc1);
 8003c10:	4847      	ldr	r0, [pc, #284]	@ (8003d30 <read_thermistors+0x608>)
 8003c12:	f000 fdd1 	bl	80047b8 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8003c16:	f04f 31ff 	mov.w	r1, #4294967295
 8003c1a:	4845      	ldr	r0, [pc, #276]	@ (8003d30 <read_thermistors+0x608>)
 8003c1c:	f000 fed1 	bl	80049c2 <HAL_ADC_PollForConversion>
		ADCSum += HAL_ADC_GetValue(&hadc1);
 8003c20:	4843      	ldr	r0, [pc, #268]	@ (8003d30 <read_thermistors+0x608>)
 8003c22:	f000 ff59 	bl	8004ad8 <HAL_ADC_GetValue>
 8003c26:	4603      	mov	r3, r0
 8003c28:	b29a      	uxth	r2, r3
 8003c2a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003c2e:	4413      	add	r3, r2
 8003c30:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
		HAL_ADC_Stop(&hadc1);
 8003c34:	483e      	ldr	r0, [pc, #248]	@ (8003d30 <read_thermistors+0x608>)
 8003c36:	f000 fe91 	bl	800495c <HAL_ADC_Stop>
	for (uint8_t i = 0; i < FILTER_LEN; i++) {
 8003c3a:	f897 307d 	ldrb.w	r3, [r7, #125]	@ 0x7d
 8003c3e:	3301      	adds	r3, #1
 8003c40:	f887 307d 	strb.w	r3, [r7, #125]	@ 0x7d
 8003c44:	f897 307d 	ldrb.w	r3, [r7, #125]	@ 0x7d
 8003c48:	2b09      	cmp	r3, #9
 8003c4a:	d9e1      	bls.n	8003c10 <read_thermistors+0x4e8>
	}
	thermistorRawADC[8] = ADCSum / FILTER_LEN;
 8003c4c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003c50:	4a38      	ldr	r2, [pc, #224]	@ (8003d34 <read_thermistors+0x60c>)
 8003c52:	fba2 2303 	umull	r2, r3, r2, r3
 8003c56:	08db      	lsrs	r3, r3, #3
 8003c58:	b29b      	uxth	r3, r3
 8003c5a:	f8a7 3060 	strh.w	r3, [r7, #96]	@ 0x60

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_SET);
 8003c5e:	2201      	movs	r2, #1
 8003c60:	2108      	movs	r1, #8
 8003c62:	4835      	ldr	r0, [pc, #212]	@ (8003d38 <read_thermistors+0x610>)
 8003c64:	f002 fad6 	bl	8006214 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
 8003c68:	2200      	movs	r2, #0
 8003c6a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8003c6e:	4833      	ldr	r0, [pc, #204]	@ (8003d3c <read_thermistors+0x614>)
 8003c70:	f002 fad0 	bl	8006214 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 8003c74:	2200      	movs	r2, #0
 8003c76:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8003c7a:	4831      	ldr	r0, [pc, #196]	@ (8003d40 <read_thermistors+0x618>)
 8003c7c:	f002 faca 	bl	8006214 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 8003c80:	2201      	movs	r2, #1
 8003c82:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003c86:	482e      	ldr	r0, [pc, #184]	@ (8003d40 <read_thermistors+0x618>)
 8003c88:	f002 fac4 	bl	8006214 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8003c8c:	2001      	movs	r0, #1
 8003c8e:	f000 fd2b 	bl	80046e8 <HAL_Delay>
	ADCSum = 0;
 8003c92:	2300      	movs	r3, #0
 8003c94:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
	for (uint8_t i = 0; i < FILTER_LEN; i++) {
 8003c98:	2300      	movs	r3, #0
 8003c9a:	f887 307c 	strb.w	r3, [r7, #124]	@ 0x7c
 8003c9e:	e019      	b.n	8003cd4 <read_thermistors+0x5ac>
		HAL_ADC_Start(&hadc1);
 8003ca0:	4823      	ldr	r0, [pc, #140]	@ (8003d30 <read_thermistors+0x608>)
 8003ca2:	f000 fd89 	bl	80047b8 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8003ca6:	f04f 31ff 	mov.w	r1, #4294967295
 8003caa:	4821      	ldr	r0, [pc, #132]	@ (8003d30 <read_thermistors+0x608>)
 8003cac:	f000 fe89 	bl	80049c2 <HAL_ADC_PollForConversion>
		ADCSum += HAL_ADC_GetValue(&hadc1);
 8003cb0:	481f      	ldr	r0, [pc, #124]	@ (8003d30 <read_thermistors+0x608>)
 8003cb2:	f000 ff11 	bl	8004ad8 <HAL_ADC_GetValue>
 8003cb6:	4603      	mov	r3, r0
 8003cb8:	b29a      	uxth	r2, r3
 8003cba:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003cbe:	4413      	add	r3, r2
 8003cc0:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
		HAL_ADC_Stop(&hadc1);
 8003cc4:	481a      	ldr	r0, [pc, #104]	@ (8003d30 <read_thermistors+0x608>)
 8003cc6:	f000 fe49 	bl	800495c <HAL_ADC_Stop>
	for (uint8_t i = 0; i < FILTER_LEN; i++) {
 8003cca:	f897 307c 	ldrb.w	r3, [r7, #124]	@ 0x7c
 8003cce:	3301      	adds	r3, #1
 8003cd0:	f887 307c 	strb.w	r3, [r7, #124]	@ 0x7c
 8003cd4:	f897 307c 	ldrb.w	r3, [r7, #124]	@ 0x7c
 8003cd8:	2b09      	cmp	r3, #9
 8003cda:	d9e1      	bls.n	8003ca0 <read_thermistors+0x578>
	}
	thermistorRawADC[9] = ADCSum / FILTER_LEN;
 8003cdc:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003ce0:	4a14      	ldr	r2, [pc, #80]	@ (8003d34 <read_thermistors+0x60c>)
 8003ce2:	fba2 2303 	umull	r2, r3, r2, r3
 8003ce6:	08db      	lsrs	r3, r3, #3
 8003ce8:	b29b      	uxth	r3, r3
 8003cea:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
 8003cee:	2200      	movs	r2, #0
 8003cf0:	2108      	movs	r1, #8
 8003cf2:	4811      	ldr	r0, [pc, #68]	@ (8003d38 <read_thermistors+0x610>)
 8003cf4:	f002 fa8e 	bl	8006214 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_SET);
 8003cf8:	2201      	movs	r2, #1
 8003cfa:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8003cfe:	480f      	ldr	r0, [pc, #60]	@ (8003d3c <read_thermistors+0x614>)
 8003d00:	f002 fa88 	bl	8006214 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 8003d04:	2200      	movs	r2, #0
 8003d06:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8003d0a:	480d      	ldr	r0, [pc, #52]	@ (8003d40 <read_thermistors+0x618>)
 8003d0c:	f002 fa82 	bl	8006214 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 8003d10:	2201      	movs	r2, #1
 8003d12:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003d16:	480a      	ldr	r0, [pc, #40]	@ (8003d40 <read_thermistors+0x618>)
 8003d18:	f002 fa7c 	bl	8006214 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8003d1c:	2001      	movs	r0, #1
 8003d1e:	f000 fce3 	bl	80046e8 <HAL_Delay>
	ADCSum = 0;
 8003d22:	2300      	movs	r3, #0
 8003d24:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
	for (uint8_t i = 0; i < FILTER_LEN; i++) {
 8003d28:	2300      	movs	r3, #0
 8003d2a:	f887 307b 	strb.w	r3, [r7, #123]	@ 0x7b
 8003d2e:	e023      	b.n	8003d78 <read_thermistors+0x650>
 8003d30:	2000007c 	.word	0x2000007c
 8003d34:	cccccccd 	.word	0xcccccccd
 8003d38:	40020000 	.word	0x40020000
 8003d3c:	40020800 	.word	0x40020800
 8003d40:	40020400 	.word	0x40020400
		HAL_ADC_Start(&hadc1);
 8003d44:	48d0      	ldr	r0, [pc, #832]	@ (8004088 <read_thermistors+0x960>)
 8003d46:	f000 fd37 	bl	80047b8 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8003d4a:	f04f 31ff 	mov.w	r1, #4294967295
 8003d4e:	48ce      	ldr	r0, [pc, #824]	@ (8004088 <read_thermistors+0x960>)
 8003d50:	f000 fe37 	bl	80049c2 <HAL_ADC_PollForConversion>
		ADCSum += HAL_ADC_GetValue(&hadc1);
 8003d54:	48cc      	ldr	r0, [pc, #816]	@ (8004088 <read_thermistors+0x960>)
 8003d56:	f000 febf 	bl	8004ad8 <HAL_ADC_GetValue>
 8003d5a:	4603      	mov	r3, r0
 8003d5c:	b29a      	uxth	r2, r3
 8003d5e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003d62:	4413      	add	r3, r2
 8003d64:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
		HAL_ADC_Stop(&hadc1);
 8003d68:	48c7      	ldr	r0, [pc, #796]	@ (8004088 <read_thermistors+0x960>)
 8003d6a:	f000 fdf7 	bl	800495c <HAL_ADC_Stop>
	for (uint8_t i = 0; i < FILTER_LEN; i++) {
 8003d6e:	f897 307b 	ldrb.w	r3, [r7, #123]	@ 0x7b
 8003d72:	3301      	adds	r3, #1
 8003d74:	f887 307b 	strb.w	r3, [r7, #123]	@ 0x7b
 8003d78:	f897 307b 	ldrb.w	r3, [r7, #123]	@ 0x7b
 8003d7c:	2b09      	cmp	r3, #9
 8003d7e:	d9e1      	bls.n	8003d44 <read_thermistors+0x61c>
	}
	thermistorRawADC[10] = ADCSum / FILTER_LEN;
 8003d80:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003d84:	4ac1      	ldr	r2, [pc, #772]	@ (800408c <read_thermistors+0x964>)
 8003d86:	fba2 2303 	umull	r2, r3, r2, r3
 8003d8a:	08db      	lsrs	r3, r3, #3
 8003d8c:	b29b      	uxth	r3, r3
 8003d8e:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_SET);
 8003d92:	2201      	movs	r2, #1
 8003d94:	2108      	movs	r1, #8
 8003d96:	48be      	ldr	r0, [pc, #760]	@ (8004090 <read_thermistors+0x968>)
 8003d98:	f002 fa3c 	bl	8006214 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_SET);
 8003d9c:	2201      	movs	r2, #1
 8003d9e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8003da2:	48bc      	ldr	r0, [pc, #752]	@ (8004094 <read_thermistors+0x96c>)
 8003da4:	f002 fa36 	bl	8006214 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 8003da8:	2200      	movs	r2, #0
 8003daa:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8003dae:	48ba      	ldr	r0, [pc, #744]	@ (8004098 <read_thermistors+0x970>)
 8003db0:	f002 fa30 	bl	8006214 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 8003db4:	2201      	movs	r2, #1
 8003db6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003dba:	48b7      	ldr	r0, [pc, #732]	@ (8004098 <read_thermistors+0x970>)
 8003dbc:	f002 fa2a 	bl	8006214 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8003dc0:	2001      	movs	r0, #1
 8003dc2:	f000 fc91 	bl	80046e8 <HAL_Delay>
	ADCSum = 0;
 8003dc6:	2300      	movs	r3, #0
 8003dc8:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
	for (uint8_t i = 0; i < FILTER_LEN; i++) {
 8003dcc:	2300      	movs	r3, #0
 8003dce:	f887 307a 	strb.w	r3, [r7, #122]	@ 0x7a
 8003dd2:	e019      	b.n	8003e08 <read_thermistors+0x6e0>
		HAL_ADC_Start(&hadc1);
 8003dd4:	48ac      	ldr	r0, [pc, #688]	@ (8004088 <read_thermistors+0x960>)
 8003dd6:	f000 fcef 	bl	80047b8 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8003dda:	f04f 31ff 	mov.w	r1, #4294967295
 8003dde:	48aa      	ldr	r0, [pc, #680]	@ (8004088 <read_thermistors+0x960>)
 8003de0:	f000 fdef 	bl	80049c2 <HAL_ADC_PollForConversion>
		ADCSum += HAL_ADC_GetValue(&hadc1);
 8003de4:	48a8      	ldr	r0, [pc, #672]	@ (8004088 <read_thermistors+0x960>)
 8003de6:	f000 fe77 	bl	8004ad8 <HAL_ADC_GetValue>
 8003dea:	4603      	mov	r3, r0
 8003dec:	b29a      	uxth	r2, r3
 8003dee:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003df2:	4413      	add	r3, r2
 8003df4:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
		HAL_ADC_Stop(&hadc1);
 8003df8:	48a3      	ldr	r0, [pc, #652]	@ (8004088 <read_thermistors+0x960>)
 8003dfa:	f000 fdaf 	bl	800495c <HAL_ADC_Stop>
	for (uint8_t i = 0; i < FILTER_LEN; i++) {
 8003dfe:	f897 307a 	ldrb.w	r3, [r7, #122]	@ 0x7a
 8003e02:	3301      	adds	r3, #1
 8003e04:	f887 307a 	strb.w	r3, [r7, #122]	@ 0x7a
 8003e08:	f897 307a 	ldrb.w	r3, [r7, #122]	@ 0x7a
 8003e0c:	2b09      	cmp	r3, #9
 8003e0e:	d9e1      	bls.n	8003dd4 <read_thermistors+0x6ac>
	}
	thermistorRawADC[11] = ADCSum / FILTER_LEN;
 8003e10:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003e14:	4a9d      	ldr	r2, [pc, #628]	@ (800408c <read_thermistors+0x964>)
 8003e16:	fba2 2303 	umull	r2, r3, r2, r3
 8003e1a:	08db      	lsrs	r3, r3, #3
 8003e1c:	b29b      	uxth	r3, r3
 8003e1e:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
 8003e22:	2200      	movs	r2, #0
 8003e24:	2108      	movs	r1, #8
 8003e26:	489a      	ldr	r0, [pc, #616]	@ (8004090 <read_thermistors+0x968>)
 8003e28:	f002 f9f4 	bl	8006214 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
 8003e2c:	2200      	movs	r2, #0
 8003e2e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8003e32:	4898      	ldr	r0, [pc, #608]	@ (8004094 <read_thermistors+0x96c>)
 8003e34:	f002 f9ee 	bl	8006214 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 8003e38:	2201      	movs	r2, #1
 8003e3a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8003e3e:	4896      	ldr	r0, [pc, #600]	@ (8004098 <read_thermistors+0x970>)
 8003e40:	f002 f9e8 	bl	8006214 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 8003e44:	2201      	movs	r2, #1
 8003e46:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003e4a:	4893      	ldr	r0, [pc, #588]	@ (8004098 <read_thermistors+0x970>)
 8003e4c:	f002 f9e2 	bl	8006214 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8003e50:	2001      	movs	r0, #1
 8003e52:	f000 fc49 	bl	80046e8 <HAL_Delay>
	ADCSum = 0;
 8003e56:	2300      	movs	r3, #0
 8003e58:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
	for (uint8_t i = 0; i < FILTER_LEN; i++) {
 8003e5c:	2300      	movs	r3, #0
 8003e5e:	f887 3079 	strb.w	r3, [r7, #121]	@ 0x79
 8003e62:	e019      	b.n	8003e98 <read_thermistors+0x770>
		HAL_ADC_Start(&hadc1);
 8003e64:	4888      	ldr	r0, [pc, #544]	@ (8004088 <read_thermistors+0x960>)
 8003e66:	f000 fca7 	bl	80047b8 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8003e6a:	f04f 31ff 	mov.w	r1, #4294967295
 8003e6e:	4886      	ldr	r0, [pc, #536]	@ (8004088 <read_thermistors+0x960>)
 8003e70:	f000 fda7 	bl	80049c2 <HAL_ADC_PollForConversion>
		ADCSum += HAL_ADC_GetValue(&hadc1);
 8003e74:	4884      	ldr	r0, [pc, #528]	@ (8004088 <read_thermistors+0x960>)
 8003e76:	f000 fe2f 	bl	8004ad8 <HAL_ADC_GetValue>
 8003e7a:	4603      	mov	r3, r0
 8003e7c:	b29a      	uxth	r2, r3
 8003e7e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003e82:	4413      	add	r3, r2
 8003e84:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
		HAL_ADC_Stop(&hadc1);
 8003e88:	487f      	ldr	r0, [pc, #508]	@ (8004088 <read_thermistors+0x960>)
 8003e8a:	f000 fd67 	bl	800495c <HAL_ADC_Stop>
	for (uint8_t i = 0; i < FILTER_LEN; i++) {
 8003e8e:	f897 3079 	ldrb.w	r3, [r7, #121]	@ 0x79
 8003e92:	3301      	adds	r3, #1
 8003e94:	f887 3079 	strb.w	r3, [r7, #121]	@ 0x79
 8003e98:	f897 3079 	ldrb.w	r3, [r7, #121]	@ 0x79
 8003e9c:	2b09      	cmp	r3, #9
 8003e9e:	d9e1      	bls.n	8003e64 <read_thermistors+0x73c>
	}
	thermistorRawADC[12] = ADCSum / FILTER_LEN;
 8003ea0:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003ea4:	4a79      	ldr	r2, [pc, #484]	@ (800408c <read_thermistors+0x964>)
 8003ea6:	fba2 2303 	umull	r2, r3, r2, r3
 8003eaa:	08db      	lsrs	r3, r3, #3
 8003eac:	b29b      	uxth	r3, r3
 8003eae:	f8a7 3068 	strh.w	r3, [r7, #104]	@ 0x68

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_SET);
 8003eb2:	2201      	movs	r2, #1
 8003eb4:	2108      	movs	r1, #8
 8003eb6:	4876      	ldr	r0, [pc, #472]	@ (8004090 <read_thermistors+0x968>)
 8003eb8:	f002 f9ac 	bl	8006214 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8003ec2:	4874      	ldr	r0, [pc, #464]	@ (8004094 <read_thermistors+0x96c>)
 8003ec4:	f002 f9a6 	bl	8006214 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 8003ec8:	2201      	movs	r2, #1
 8003eca:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8003ece:	4872      	ldr	r0, [pc, #456]	@ (8004098 <read_thermistors+0x970>)
 8003ed0:	f002 f9a0 	bl	8006214 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 8003ed4:	2201      	movs	r2, #1
 8003ed6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003eda:	486f      	ldr	r0, [pc, #444]	@ (8004098 <read_thermistors+0x970>)
 8003edc:	f002 f99a 	bl	8006214 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8003ee0:	2001      	movs	r0, #1
 8003ee2:	f000 fc01 	bl	80046e8 <HAL_Delay>
	ADCSum = 0;
 8003ee6:	2300      	movs	r3, #0
 8003ee8:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
	for (uint8_t i = 0; i < FILTER_LEN; i++) {
 8003eec:	2300      	movs	r3, #0
 8003eee:	f887 3078 	strb.w	r3, [r7, #120]	@ 0x78
 8003ef2:	e019      	b.n	8003f28 <read_thermistors+0x800>
		HAL_ADC_Start(&hadc1);
 8003ef4:	4864      	ldr	r0, [pc, #400]	@ (8004088 <read_thermistors+0x960>)
 8003ef6:	f000 fc5f 	bl	80047b8 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8003efa:	f04f 31ff 	mov.w	r1, #4294967295
 8003efe:	4862      	ldr	r0, [pc, #392]	@ (8004088 <read_thermistors+0x960>)
 8003f00:	f000 fd5f 	bl	80049c2 <HAL_ADC_PollForConversion>
		ADCSum += HAL_ADC_GetValue(&hadc1);
 8003f04:	4860      	ldr	r0, [pc, #384]	@ (8004088 <read_thermistors+0x960>)
 8003f06:	f000 fde7 	bl	8004ad8 <HAL_ADC_GetValue>
 8003f0a:	4603      	mov	r3, r0
 8003f0c:	b29a      	uxth	r2, r3
 8003f0e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003f12:	4413      	add	r3, r2
 8003f14:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
		HAL_ADC_Stop(&hadc1);
 8003f18:	485b      	ldr	r0, [pc, #364]	@ (8004088 <read_thermistors+0x960>)
 8003f1a:	f000 fd1f 	bl	800495c <HAL_ADC_Stop>
	for (uint8_t i = 0; i < FILTER_LEN; i++) {
 8003f1e:	f897 3078 	ldrb.w	r3, [r7, #120]	@ 0x78
 8003f22:	3301      	adds	r3, #1
 8003f24:	f887 3078 	strb.w	r3, [r7, #120]	@ 0x78
 8003f28:	f897 3078 	ldrb.w	r3, [r7, #120]	@ 0x78
 8003f2c:	2b09      	cmp	r3, #9
 8003f2e:	d9e1      	bls.n	8003ef4 <read_thermistors+0x7cc>
	}
	thermistorRawADC[13] = ADCSum / FILTER_LEN;
 8003f30:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003f34:	4a55      	ldr	r2, [pc, #340]	@ (800408c <read_thermistors+0x964>)
 8003f36:	fba2 2303 	umull	r2, r3, r2, r3
 8003f3a:	08db      	lsrs	r3, r3, #3
 8003f3c:	b29b      	uxth	r3, r3
 8003f3e:	f8a7 306a 	strh.w	r3, [r7, #106]	@ 0x6a

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
 8003f42:	2200      	movs	r2, #0
 8003f44:	2108      	movs	r1, #8
 8003f46:	4852      	ldr	r0, [pc, #328]	@ (8004090 <read_thermistors+0x968>)
 8003f48:	f002 f964 	bl	8006214 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_SET);
 8003f4c:	2201      	movs	r2, #1
 8003f4e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8003f52:	4850      	ldr	r0, [pc, #320]	@ (8004094 <read_thermistors+0x96c>)
 8003f54:	f002 f95e 	bl	8006214 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 8003f58:	2201      	movs	r2, #1
 8003f5a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8003f5e:	484e      	ldr	r0, [pc, #312]	@ (8004098 <read_thermistors+0x970>)
 8003f60:	f002 f958 	bl	8006214 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 8003f64:	2201      	movs	r2, #1
 8003f66:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003f6a:	484b      	ldr	r0, [pc, #300]	@ (8004098 <read_thermistors+0x970>)
 8003f6c:	f002 f952 	bl	8006214 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8003f70:	2001      	movs	r0, #1
 8003f72:	f000 fbb9 	bl	80046e8 <HAL_Delay>
	ADCSum = 0;
 8003f76:	2300      	movs	r3, #0
 8003f78:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
	for (uint8_t i = 0; i <= 10; i++) {
 8003f7c:	2300      	movs	r3, #0
 8003f7e:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 8003f82:	e019      	b.n	8003fb8 <read_thermistors+0x890>
		HAL_ADC_Start(&hadc1);
 8003f84:	4840      	ldr	r0, [pc, #256]	@ (8004088 <read_thermistors+0x960>)
 8003f86:	f000 fc17 	bl	80047b8 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8003f8a:	f04f 31ff 	mov.w	r1, #4294967295
 8003f8e:	483e      	ldr	r0, [pc, #248]	@ (8004088 <read_thermistors+0x960>)
 8003f90:	f000 fd17 	bl	80049c2 <HAL_ADC_PollForConversion>
		ADCSum += HAL_ADC_GetValue(&hadc1);
 8003f94:	483c      	ldr	r0, [pc, #240]	@ (8004088 <read_thermistors+0x960>)
 8003f96:	f000 fd9f 	bl	8004ad8 <HAL_ADC_GetValue>
 8003f9a:	4603      	mov	r3, r0
 8003f9c:	b29a      	uxth	r2, r3
 8003f9e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003fa2:	4413      	add	r3, r2
 8003fa4:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
		HAL_ADC_Stop(&hadc1);
 8003fa8:	4837      	ldr	r0, [pc, #220]	@ (8004088 <read_thermistors+0x960>)
 8003faa:	f000 fcd7 	bl	800495c <HAL_ADC_Stop>
	for (uint8_t i = 0; i <= 10; i++) {
 8003fae:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8003fb2:	3301      	adds	r3, #1
 8003fb4:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 8003fb8:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8003fbc:	2b0a      	cmp	r3, #10
 8003fbe:	d9e1      	bls.n	8003f84 <read_thermistors+0x85c>
	}
	thermistorRawADC[14] = (ADCSum / FILTER_LEN) - 200;
 8003fc0:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003fc4:	4a31      	ldr	r2, [pc, #196]	@ (800408c <read_thermistors+0x964>)
 8003fc6:	fba2 2303 	umull	r2, r3, r2, r3
 8003fca:	08db      	lsrs	r3, r3, #3
 8003fcc:	b29b      	uxth	r3, r3
 8003fce:	3bc8      	subs	r3, #200	@ 0xc8
 8003fd0:	b29b      	uxth	r3, r3
 8003fd2:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
	thermistorRawADC[16] = thermistorRawADC[13] + 22;
 8003fd6:	f8b7 306a 	ldrh.w	r3, [r7, #106]	@ 0x6a
 8003fda:	3316      	adds	r3, #22
 8003fdc:	b29b      	uxth	r3, r3
 8003fde:	f8a7 3070 	strh.w	r3, [r7, #112]	@ 0x70
	thermistorRawADC[17] = thermistorRawADC[11] + 33;
 8003fe2:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8003fe6:	3321      	adds	r3, #33	@ 0x21
 8003fe8:	b29b      	uxth	r3, r3
 8003fea:	f8a7 3072 	strh.w	r3, [r7, #114]	@ 0x72
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_SET);
 8003fee:	2201      	movs	r2, #1
 8003ff0:	2108      	movs	r1, #8
 8003ff2:	4827      	ldr	r0, [pc, #156]	@ (8004090 <read_thermistors+0x968>)
 8003ff4:	f002 f90e 	bl	8006214 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_SET);
 8003ff8:	2201      	movs	r2, #1
 8003ffa:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8003ffe:	4825      	ldr	r0, [pc, #148]	@ (8004094 <read_thermistors+0x96c>)
 8004000:	f002 f908 	bl	8006214 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 8004004:	2201      	movs	r2, #1
 8004006:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800400a:	4823      	ldr	r0, [pc, #140]	@ (8004098 <read_thermistors+0x970>)
 800400c:	f002 f902 	bl	8006214 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 8004010:	2201      	movs	r2, #1
 8004012:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8004016:	4820      	ldr	r0, [pc, #128]	@ (8004098 <read_thermistors+0x970>)
 8004018:	f002 f8fc 	bl	8006214 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 800401c:	2001      	movs	r0, #1
 800401e:	f000 fb63 	bl	80046e8 <HAL_Delay>
	ADCSum = 0;
 8004022:	2300      	movs	r3, #0
 8004024:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
	for (uint8_t i = 0; i < FILTER_LEN; i++) {
 8004028:	2300      	movs	r3, #0
 800402a:	f887 3076 	strb.w	r3, [r7, #118]	@ 0x76
 800402e:	e019      	b.n	8004064 <read_thermistors+0x93c>
		HAL_ADC_Start(&hadc1);
 8004030:	4815      	ldr	r0, [pc, #84]	@ (8004088 <read_thermistors+0x960>)
 8004032:	f000 fbc1 	bl	80047b8 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8004036:	f04f 31ff 	mov.w	r1, #4294967295
 800403a:	4813      	ldr	r0, [pc, #76]	@ (8004088 <read_thermistors+0x960>)
 800403c:	f000 fcc1 	bl	80049c2 <HAL_ADC_PollForConversion>
		ADCSum += HAL_ADC_GetValue(&hadc1);
 8004040:	4811      	ldr	r0, [pc, #68]	@ (8004088 <read_thermistors+0x960>)
 8004042:	f000 fd49 	bl	8004ad8 <HAL_ADC_GetValue>
 8004046:	4603      	mov	r3, r0
 8004048:	b29a      	uxth	r2, r3
 800404a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800404e:	4413      	add	r3, r2
 8004050:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
		HAL_ADC_Stop(&hadc1);
 8004054:	480c      	ldr	r0, [pc, #48]	@ (8004088 <read_thermistors+0x960>)
 8004056:	f000 fc81 	bl	800495c <HAL_ADC_Stop>
	for (uint8_t i = 0; i < FILTER_LEN; i++) {
 800405a:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 800405e:	3301      	adds	r3, #1
 8004060:	f887 3076 	strb.w	r3, [r7, #118]	@ 0x76
 8004064:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 8004068:	2b09      	cmp	r3, #9
 800406a:	d9e1      	bls.n	8004030 <read_thermistors+0x908>
	}
	thermistorRawADC[15] = ADCSum / FILTER_LEN;
 800406c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004070:	4a06      	ldr	r2, [pc, #24]	@ (800408c <read_thermistors+0x964>)
 8004072:	fba2 2303 	umull	r2, r3, r2, r3
 8004076:	08db      	lsrs	r3, r3, #3
 8004078:	b29b      	uxth	r3, r3
 800407a:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e

	for(uint8_t i = 0; i < 18; i++) {
 800407e:	2300      	movs	r3, #0
 8004080:	f887 3075 	strb.w	r3, [r7, #117]	@ 0x75
 8004084:	e035      	b.n	80040f2 <read_thermistors+0x9ca>
 8004086:	bf00      	nop
 8004088:	2000007c 	.word	0x2000007c
 800408c:	cccccccd 	.word	0xcccccccd
 8004090:	40020000 	.word	0x40020000
 8004094:	40020800 	.word	0x40020800
 8004098:	40020400 	.word	0x40020400
		thermistorVoltage[i] = (thermistorRawADC[i] / 4095.0) * 3.3;
 800409c:	f897 3075 	ldrb.w	r3, [r7, #117]	@ 0x75
 80040a0:	005b      	lsls	r3, r3, #1
 80040a2:	3388      	adds	r3, #136	@ 0x88
 80040a4:	443b      	add	r3, r7
 80040a6:	f833 3c38 	ldrh.w	r3, [r3, #-56]
 80040aa:	4618      	mov	r0, r3
 80040ac:	f7fc f9fe 	bl	80004ac <__aeabi_i2d>
 80040b0:	a321      	add	r3, pc, #132	@ (adr r3, 8004138 <read_thermistors+0xa10>)
 80040b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040b6:	f7fc fb8d 	bl	80007d4 <__aeabi_ddiv>
 80040ba:	4602      	mov	r2, r0
 80040bc:	460b      	mov	r3, r1
 80040be:	4610      	mov	r0, r2
 80040c0:	4619      	mov	r1, r3
 80040c2:	a31f      	add	r3, pc, #124	@ (adr r3, 8004140 <read_thermistors+0xa18>)
 80040c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040c8:	f7fc fa5a 	bl	8000580 <__aeabi_dmul>
 80040cc:	4602      	mov	r2, r0
 80040ce:	460b      	mov	r3, r1
 80040d0:	f897 4075 	ldrb.w	r4, [r7, #117]	@ 0x75
 80040d4:	4610      	mov	r0, r2
 80040d6:	4619      	mov	r1, r3
 80040d8:	f7fc fc64 	bl	80009a4 <__aeabi_d2f>
 80040dc:	4602      	mov	r2, r0
 80040de:	00a3      	lsls	r3, r4, #2
 80040e0:	3388      	adds	r3, #136	@ 0x88
 80040e2:	443b      	add	r3, r7
 80040e4:	3b80      	subs	r3, #128	@ 0x80
 80040e6:	601a      	str	r2, [r3, #0]
	for(uint8_t i = 0; i < 18; i++) {
 80040e8:	f897 3075 	ldrb.w	r3, [r7, #117]	@ 0x75
 80040ec:	3301      	adds	r3, #1
 80040ee:	f887 3075 	strb.w	r3, [r7, #117]	@ 0x75
 80040f2:	f897 3075 	ldrb.w	r3, [r7, #117]	@ 0x75
 80040f6:	2b11      	cmp	r3, #17
 80040f8:	d9d0      	bls.n	800409c <read_thermistors+0x974>
	}
	for(uint8_t i = 0; i < 18; i++) {
 80040fa:	2300      	movs	r3, #0
 80040fc:	f887 3074 	strb.w	r3, [r7, #116]	@ 0x74
 8004100:	e011      	b.n	8004126 <read_thermistors+0x9fe>
		*(thermistorArray_ptr + i) = thermistorVoltage[i];
 8004102:	f897 2074 	ldrb.w	r2, [r7, #116]	@ 0x74
 8004106:	f897 3074 	ldrb.w	r3, [r7, #116]	@ 0x74
 800410a:	009b      	lsls	r3, r3, #2
 800410c:	6879      	ldr	r1, [r7, #4]
 800410e:	440b      	add	r3, r1
 8004110:	0092      	lsls	r2, r2, #2
 8004112:	3288      	adds	r2, #136	@ 0x88
 8004114:	443a      	add	r2, r7
 8004116:	3a80      	subs	r2, #128	@ 0x80
 8004118:	6812      	ldr	r2, [r2, #0]
 800411a:	601a      	str	r2, [r3, #0]
	for(uint8_t i = 0; i < 18; i++) {
 800411c:	f897 3074 	ldrb.w	r3, [r7, #116]	@ 0x74
 8004120:	3301      	adds	r3, #1
 8004122:	f887 3074 	strb.w	r3, [r7, #116]	@ 0x74
 8004126:	f897 3074 	ldrb.w	r3, [r7, #116]	@ 0x74
 800412a:	2b11      	cmp	r3, #17
 800412c:	d9e9      	bls.n	8004102 <read_thermistors+0x9da>
	}
}
 800412e:	bf00      	nop
 8004130:	bf00      	nop
 8004132:	378c      	adds	r7, #140	@ 0x8c
 8004134:	46bd      	mov	sp, r7
 8004136:	bd90      	pop	{r4, r7, pc}
 8004138:	00000000 	.word	0x00000000
 800413c:	40affe00 	.word	0x40affe00
 8004140:	66666666 	.word	0x66666666
 8004144:	400a6666 	.word	0x400a6666

08004148 <voltage_sense>:
#include "torch_voltage.h"
#include "torch_can.h"


void voltage_sense(uint16_t *cellVoltages)
{
 8004148:	b580      	push	{r7, lr}
 800414a:	b096      	sub	sp, #88	@ 0x58
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]
	uint8_t attempts = 0;
 8004150:	2300      	movs	r3, #0
 8004152:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	uint8_t sideB_cellVoltageA_PECflag;
	uint8_t sideB_cellVoltageB_PECflag;
	uint8_t sideB_cellVoltageC_PECflag;
	uint8_t sideB_cellVoltageD_PECflag;

	CLRCELL(SIDE_A);
 8004156:	2001      	movs	r0, #1
 8004158:	f7fe fabf 	bl	80026da <CLRCELL>
	CLRCELL(SIDE_B);
 800415c:	2000      	movs	r0, #0
 800415e:	f7fe fabc 	bl	80026da <CLRCELL>
	wait(3);
 8004162:	2003      	movs	r0, #3
 8004164:	f7ff f890 	bl	8003288 <wait>

	while(attempts < ATTEMPT_LIMIT) {
 8004168:	e105      	b.n	8004376 <voltage_sense+0x22e>
		ADCV(SIDE_A);
 800416a:	2001      	movs	r0, #1
 800416c:	f7fe fa92 	bl	8002694 <ADCV>
		ADCV(SIDE_B);
 8004170:	2000      	movs	r0, #0
 8004172:	f7fe fa8f 	bl	8002694 <ADCV>
		wait(3);
 8004176:	2003      	movs	r0, #3
 8004178:	f7ff f886 	bl	8003288 <wait>

		RDCVA(sideA_cellVoltageA, SIDE_A);
 800417c:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8004180:	2101      	movs	r1, #1
 8004182:	4618      	mov	r0, r3
 8004184:	f7fe f9f6 	bl	8002574 <RDCVA>
		RDCVA(sideB_cellVoltageA, SIDE_B);
 8004188:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800418c:	2100      	movs	r1, #0
 800418e:	4618      	mov	r0, r3
 8004190:	f7fe f9f0 	bl	8002574 <RDCVA>
		wait(1);
 8004194:	2001      	movs	r0, #1
 8004196:	f7ff f877 	bl	8003288 <wait>
		RDCVB(sideA_cellVoltageB, SIDE_A);
 800419a:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800419e:	2101      	movs	r1, #1
 80041a0:	4618      	mov	r0, r3
 80041a2:	f7fe fa0b 	bl	80025bc <RDCVB>
		RDCVB(sideB_cellVoltageB, SIDE_B);
 80041a6:	f107 031c 	add.w	r3, r7, #28
 80041aa:	2100      	movs	r1, #0
 80041ac:	4618      	mov	r0, r3
 80041ae:	f7fe fa05 	bl	80025bc <RDCVB>
		wait(1);
 80041b2:	2001      	movs	r0, #1
 80041b4:	f7ff f868 	bl	8003288 <wait>
		RDCVC(sideA_cellVoltageC, SIDE_A);
 80041b8:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80041bc:	2101      	movs	r1, #1
 80041be:	4618      	mov	r0, r3
 80041c0:	f7fe fa20 	bl	8002604 <RDCVC>
		RDCVC(sideB_cellVoltageC, SIDE_B);
 80041c4:	f107 0314 	add.w	r3, r7, #20
 80041c8:	2100      	movs	r1, #0
 80041ca:	4618      	mov	r0, r3
 80041cc:	f7fe fa1a 	bl	8002604 <RDCVC>
		wait(1);
 80041d0:	2001      	movs	r0, #1
 80041d2:	f7ff f859 	bl	8003288 <wait>
		RDCVD(sideA_cellVoltageD, SIDE_A);
 80041d6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80041da:	2101      	movs	r1, #1
 80041dc:	4618      	mov	r0, r3
 80041de:	f7fe fa35 	bl	800264c <RDCVD>
		RDCVD(sideB_cellVoltageD, SIDE_B);
 80041e2:	f107 030c 	add.w	r3, r7, #12
 80041e6:	2100      	movs	r1, #0
 80041e8:	4618      	mov	r0, r3
 80041ea:	f7fe fa2f 	bl	800264c <RDCVD>

		sideA_cellVoltageA_PECflag = verify_PEC15(sideA_cellVoltageA);
 80041ee:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80041f2:	4618      	mov	r0, r3
 80041f4:	f7fe f85b 	bl	80022ae <verify_PEC15>
 80041f8:	4603      	mov	r3, r0
 80041fa:	f887 3056 	strb.w	r3, [r7, #86]	@ 0x56
		sideA_cellVoltageB_PECflag = verify_PEC15(sideA_cellVoltageB);
 80041fe:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8004202:	4618      	mov	r0, r3
 8004204:	f7fe f853 	bl	80022ae <verify_PEC15>
 8004208:	4603      	mov	r3, r0
 800420a:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
		sideA_cellVoltageC_PECflag = verify_PEC15(sideA_cellVoltageC);
 800420e:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8004212:	4618      	mov	r0, r3
 8004214:	f7fe f84b 	bl	80022ae <verify_PEC15>
 8004218:	4603      	mov	r3, r0
 800421a:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
		sideA_cellVoltageD_PECflag = verify_PEC15(sideA_cellVoltageD);
 800421e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004222:	4618      	mov	r0, r3
 8004224:	f7fe f843 	bl	80022ae <verify_PEC15>
 8004228:	4603      	mov	r3, r0
 800422a:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53

		sideB_cellVoltageA_PECflag = verify_PEC15(sideB_cellVoltageA);
 800422e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004232:	4618      	mov	r0, r3
 8004234:	f7fe f83b 	bl	80022ae <verify_PEC15>
 8004238:	4603      	mov	r3, r0
 800423a:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
		sideB_cellVoltageB_PECflag = verify_PEC15(sideB_cellVoltageB);
 800423e:	f107 031c 	add.w	r3, r7, #28
 8004242:	4618      	mov	r0, r3
 8004244:	f7fe f833 	bl	80022ae <verify_PEC15>
 8004248:	4603      	mov	r3, r0
 800424a:	f887 3051 	strb.w	r3, [r7, #81]	@ 0x51
		sideB_cellVoltageC_PECflag = verify_PEC15(sideB_cellVoltageC);
 800424e:	f107 0314 	add.w	r3, r7, #20
 8004252:	4618      	mov	r0, r3
 8004254:	f7fe f82b 	bl	80022ae <verify_PEC15>
 8004258:	4603      	mov	r3, r0
 800425a:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
		sideB_cellVoltageD_PECflag = verify_PEC15(sideB_cellVoltageD);
 800425e:	f107 030c 	add.w	r3, r7, #12
 8004262:	4618      	mov	r0, r3
 8004264:	f7fe f823 	bl	80022ae <verify_PEC15>
 8004268:	4603      	mov	r3, r0
 800426a:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

		if(sideA_cellVoltageA_PECflag == 2 &&
 800426e:	f897 3056 	ldrb.w	r3, [r7, #86]	@ 0x56
 8004272:	2b02      	cmp	r3, #2
 8004274:	d177      	bne.n	8004366 <voltage_sense+0x21e>
 8004276:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 800427a:	2b02      	cmp	r3, #2
 800427c:	d173      	bne.n	8004366 <voltage_sense+0x21e>
		   sideA_cellVoltageB_PECflag == 2 &&
 800427e:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 8004282:	2b02      	cmp	r3, #2
 8004284:	d16f      	bne.n	8004366 <voltage_sense+0x21e>
		   sideA_cellVoltageC_PECflag == 2 &&
 8004286:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 800428a:	2b02      	cmp	r3, #2
 800428c:	d16b      	bne.n	8004366 <voltage_sense+0x21e>
		   sideA_cellVoltageD_PECflag == 2 &&
 800428e:	f897 3052 	ldrb.w	r3, [r7, #82]	@ 0x52
 8004292:	2b02      	cmp	r3, #2
 8004294:	d167      	bne.n	8004366 <voltage_sense+0x21e>
		   sideB_cellVoltageA_PECflag == 2 &&
 8004296:	f897 3051 	ldrb.w	r3, [r7, #81]	@ 0x51
 800429a:	2b02      	cmp	r3, #2
 800429c:	d163      	bne.n	8004366 <voltage_sense+0x21e>
		   sideB_cellVoltageB_PECflag == 2 &&
 800429e:	f897 3050 	ldrb.w	r3, [r7, #80]	@ 0x50
 80042a2:	2b02      	cmp	r3, #2
 80042a4:	d15f      	bne.n	8004366 <voltage_sense+0x21e>
		   sideB_cellVoltageC_PECflag == 2 &&
 80042a6:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80042aa:	2b02      	cmp	r3, #2
 80042ac:	d15b      	bne.n	8004366 <voltage_sense+0x21e>
		   sideB_cellVoltageD_PECflag == 2 &&
		   sideA_cellVoltageA[1] != 0xFF &&
 80042ae:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
		   sideB_cellVoltageD_PECflag == 2 &&
 80042b2:	2bff      	cmp	r3, #255	@ 0xff
 80042b4:	d057      	beq.n	8004366 <voltage_sense+0x21e>
		   sideA_cellVoltageA[3] != 0xFF &&
 80042b6:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
		   sideA_cellVoltageA[1] != 0xFF &&
 80042ba:	2bff      	cmp	r3, #255	@ 0xff
 80042bc:	d053      	beq.n	8004366 <voltage_sense+0x21e>
		   sideA_cellVoltageA[5] != 0xFF &&
 80042be:	f897 3049 	ldrb.w	r3, [r7, #73]	@ 0x49
		   sideA_cellVoltageA[3] != 0xFF &&
 80042c2:	2bff      	cmp	r3, #255	@ 0xff
 80042c4:	d04f      	beq.n	8004366 <voltage_sense+0x21e>
		   sideB_cellVoltageA[1] != 0xFF &&
 80042c6:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
		   sideA_cellVoltageA[5] != 0xFF &&
 80042ca:	2bff      	cmp	r3, #255	@ 0xff
 80042cc:	d04b      	beq.n	8004366 <voltage_sense+0x21e>
		   sideB_cellVoltageA[3] != 0xFF &&
 80042ce:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
		   sideB_cellVoltageA[1] != 0xFF &&
 80042d2:	2bff      	cmp	r3, #255	@ 0xff
 80042d4:	d047      	beq.n	8004366 <voltage_sense+0x21e>
		   sideB_cellVoltageA[5] != 0xFF &&
 80042d6:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
		   sideB_cellVoltageA[3] != 0xFF &&
 80042da:	2bff      	cmp	r3, #255	@ 0xff
 80042dc:	d043      	beq.n	8004366 <voltage_sense+0x21e>
		   sideA_cellVoltageB[1] != 0xFF &&
 80042de:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
		   sideB_cellVoltageA[5] != 0xFF &&
 80042e2:	2bff      	cmp	r3, #255	@ 0xff
 80042e4:	d03f      	beq.n	8004366 <voltage_sense+0x21e>
		   sideA_cellVoltageB[3] != 0xFF &&
 80042e6:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
		   sideA_cellVoltageB[1] != 0xFF &&
 80042ea:	2bff      	cmp	r3, #255	@ 0xff
 80042ec:	d03b      	beq.n	8004366 <voltage_sense+0x21e>
		   sideA_cellVoltageB[5] != 0xFF &&
 80042ee:	f897 3041 	ldrb.w	r3, [r7, #65]	@ 0x41
		   sideA_cellVoltageB[3] != 0xFF &&
 80042f2:	2bff      	cmp	r3, #255	@ 0xff
 80042f4:	d037      	beq.n	8004366 <voltage_sense+0x21e>
		   sideB_cellVoltageB[1] != 0xFF &&
 80042f6:	7f7b      	ldrb	r3, [r7, #29]
		   sideA_cellVoltageB[5] != 0xFF &&
 80042f8:	2bff      	cmp	r3, #255	@ 0xff
 80042fa:	d034      	beq.n	8004366 <voltage_sense+0x21e>
		   sideB_cellVoltageB[3] != 0xFF &&
 80042fc:	7ffb      	ldrb	r3, [r7, #31]
		   sideB_cellVoltageB[1] != 0xFF &&
 80042fe:	2bff      	cmp	r3, #255	@ 0xff
 8004300:	d031      	beq.n	8004366 <voltage_sense+0x21e>
		   sideB_cellVoltageB[5] != 0xFF &&
 8004302:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
		   sideB_cellVoltageB[3] != 0xFF &&
 8004306:	2bff      	cmp	r3, #255	@ 0xff
 8004308:	d02d      	beq.n	8004366 <voltage_sense+0x21e>
		   sideA_cellVoltageC[1] != 0xFF &&
 800430a:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
		   sideB_cellVoltageB[5] != 0xFF &&
 800430e:	2bff      	cmp	r3, #255	@ 0xff
 8004310:	d029      	beq.n	8004366 <voltage_sense+0x21e>
		   sideA_cellVoltageC[3] != 0xFF &&
 8004312:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
		   sideA_cellVoltageC[1] != 0xFF &&
 8004316:	2bff      	cmp	r3, #255	@ 0xff
 8004318:	d025      	beq.n	8004366 <voltage_sense+0x21e>
		   sideA_cellVoltageC[5] != 0xFF &&
 800431a:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
		   sideA_cellVoltageC[3] != 0xFF &&
 800431e:	2bff      	cmp	r3, #255	@ 0xff
 8004320:	d021      	beq.n	8004366 <voltage_sense+0x21e>
		   sideB_cellVoltageC[1] != 0xFF &&
 8004322:	7d7b      	ldrb	r3, [r7, #21]
		   sideA_cellVoltageC[5] != 0xFF &&
 8004324:	2bff      	cmp	r3, #255	@ 0xff
 8004326:	d01e      	beq.n	8004366 <voltage_sense+0x21e>
		   sideB_cellVoltageC[3] != 0xFF &&
 8004328:	7dfb      	ldrb	r3, [r7, #23]
		   sideB_cellVoltageC[1] != 0xFF &&
 800432a:	2bff      	cmp	r3, #255	@ 0xff
 800432c:	d01b      	beq.n	8004366 <voltage_sense+0x21e>
		   sideB_cellVoltageC[5] != 0xFF &&
 800432e:	7e7b      	ldrb	r3, [r7, #25]
		   sideB_cellVoltageC[3] != 0xFF &&
 8004330:	2bff      	cmp	r3, #255	@ 0xff
 8004332:	d018      	beq.n	8004366 <voltage_sense+0x21e>
		   sideA_cellVoltageD[1] != 0xFF &&
 8004334:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
		   sideB_cellVoltageC[5] != 0xFF &&
 8004338:	2bff      	cmp	r3, #255	@ 0xff
 800433a:	d014      	beq.n	8004366 <voltage_sense+0x21e>
		   sideA_cellVoltageD[3] != 0xFF &&
 800433c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
		   sideA_cellVoltageD[1] != 0xFF &&
 8004340:	2bff      	cmp	r3, #255	@ 0xff
 8004342:	d010      	beq.n	8004366 <voltage_sense+0x21e>
		   sideA_cellVoltageD[5] != 0xFF &&
 8004344:	f897 3031 	ldrb.w	r3, [r7, #49]	@ 0x31
		   sideA_cellVoltageD[3] != 0xFF &&
 8004348:	2bff      	cmp	r3, #255	@ 0xff
 800434a:	d00c      	beq.n	8004366 <voltage_sense+0x21e>
		   sideB_cellVoltageD[1] != 0xFF &&
 800434c:	7b7b      	ldrb	r3, [r7, #13]
		   sideA_cellVoltageD[5] != 0xFF &&
 800434e:	2bff      	cmp	r3, #255	@ 0xff
 8004350:	d009      	beq.n	8004366 <voltage_sense+0x21e>
		   sideB_cellVoltageD[3] != 0xFF &&
 8004352:	7bfb      	ldrb	r3, [r7, #15]
		   sideB_cellVoltageD[1] != 0xFF &&
 8004354:	2bff      	cmp	r3, #255	@ 0xff
 8004356:	d006      	beq.n	8004366 <voltage_sense+0x21e>
		   sideB_cellVoltageD[5] != 0xFF)
 8004358:	7c7b      	ldrb	r3, [r7, #17]
		   sideB_cellVoltageD[3] != 0xFF &&
 800435a:	2bff      	cmp	r3, #255	@ 0xff
 800435c:	d003      	beq.n	8004366 <voltage_sense+0x21e>
		{
			attempts = 13;
 800435e:	230d      	movs	r3, #13
 8004360:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
 8004364:	e007      	b.n	8004376 <voltage_sense+0x22e>
		}
		else {
			attempts++;
 8004366:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800436a:	3301      	adds	r3, #1
 800436c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			wait(1);
 8004370:	2001      	movs	r0, #1
 8004372:	f7fe ff89 	bl	8003288 <wait>
	while(attempts < ATTEMPT_LIMIT) {
 8004376:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800437a:	2b09      	cmp	r3, #9
 800437c:	f67f aef5 	bls.w	800416a <voltage_sense+0x22>
		}
	}
	if(attempts != 13) {
 8004380:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8004384:	2b0d      	cmp	r3, #13
 8004386:	d004      	beq.n	8004392 <voltage_sense+0x24a>
		error_loop(ERROR_PEC, 0, 0);
 8004388:	2200      	movs	r2, #0
 800438a:	2100      	movs	r1, #0
 800438c:	2052      	movs	r0, #82	@ 0x52
 800438e:	f7fd fafb 	bl	8001988 <error_loop>
	}

	*cellVoltages = (sideA_cellVoltageA[1] << 8) | sideA_cellVoltageA[0];
 8004392:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8004396:	b21b      	sxth	r3, r3
 8004398:	021b      	lsls	r3, r3, #8
 800439a:	b21a      	sxth	r2, r3
 800439c:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 80043a0:	b21b      	sxth	r3, r3
 80043a2:	4313      	orrs	r3, r2
 80043a4:	b21b      	sxth	r3, r3
 80043a6:	b29a      	uxth	r2, r3
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	801a      	strh	r2, [r3, #0]
	*(cellVoltages + 1) = (sideA_cellVoltageA[3] << 8) | sideA_cellVoltageA[2];
 80043ac:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80043b0:	b21b      	sxth	r3, r3
 80043b2:	021b      	lsls	r3, r3, #8
 80043b4:	b21a      	sxth	r2, r3
 80043b6:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 80043ba:	b21b      	sxth	r3, r3
 80043bc:	4313      	orrs	r3, r2
 80043be:	b21a      	sxth	r2, r3
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	3302      	adds	r3, #2
 80043c4:	b292      	uxth	r2, r2
 80043c6:	801a      	strh	r2, [r3, #0]
	*(cellVoltages + 2) = (sideA_cellVoltageA[5] << 8) | sideA_cellVoltageA[4];
 80043c8:	f897 3049 	ldrb.w	r3, [r7, #73]	@ 0x49
 80043cc:	b21b      	sxth	r3, r3
 80043ce:	021b      	lsls	r3, r3, #8
 80043d0:	b21a      	sxth	r2, r3
 80043d2:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 80043d6:	b21b      	sxth	r3, r3
 80043d8:	4313      	orrs	r3, r2
 80043da:	b21a      	sxth	r2, r3
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	3304      	adds	r3, #4
 80043e0:	b292      	uxth	r2, r2
 80043e2:	801a      	strh	r2, [r3, #0]
	*(cellVoltages + 3) = (sideA_cellVoltageB[1] << 8) | sideA_cellVoltageB[0];
 80043e4:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 80043e8:	b21b      	sxth	r3, r3
 80043ea:	021b      	lsls	r3, r3, #8
 80043ec:	b21a      	sxth	r2, r3
 80043ee:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 80043f2:	b21b      	sxth	r3, r3
 80043f4:	4313      	orrs	r3, r2
 80043f6:	b21a      	sxth	r2, r3
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	3306      	adds	r3, #6
 80043fc:	b292      	uxth	r2, r2
 80043fe:	801a      	strh	r2, [r3, #0]
	*(cellVoltages + 4) = (sideA_cellVoltageB[3] << 8) | sideA_cellVoltageB[2];
 8004400:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8004404:	b21b      	sxth	r3, r3
 8004406:	021b      	lsls	r3, r3, #8
 8004408:	b21a      	sxth	r2, r3
 800440a:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 800440e:	b21b      	sxth	r3, r3
 8004410:	4313      	orrs	r3, r2
 8004412:	b21a      	sxth	r2, r3
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	3308      	adds	r3, #8
 8004418:	b292      	uxth	r2, r2
 800441a:	801a      	strh	r2, [r3, #0]
	*(cellVoltages + 5) = (sideA_cellVoltageB[5] << 8) | sideA_cellVoltageB[4];
 800441c:	f897 3041 	ldrb.w	r3, [r7, #65]	@ 0x41
 8004420:	b21b      	sxth	r3, r3
 8004422:	021b      	lsls	r3, r3, #8
 8004424:	b21a      	sxth	r2, r3
 8004426:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 800442a:	b21b      	sxth	r3, r3
 800442c:	4313      	orrs	r3, r2
 800442e:	b21a      	sxth	r2, r3
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	330a      	adds	r3, #10
 8004434:	b292      	uxth	r2, r2
 8004436:	801a      	strh	r2, [r3, #0]
	*(cellVoltages + 6) = (sideA_cellVoltageC[1] << 8) | sideA_cellVoltageC[0];
 8004438:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 800443c:	b21b      	sxth	r3, r3
 800443e:	021b      	lsls	r3, r3, #8
 8004440:	b21a      	sxth	r2, r3
 8004442:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8004446:	b21b      	sxth	r3, r3
 8004448:	4313      	orrs	r3, r2
 800444a:	b21a      	sxth	r2, r3
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	330c      	adds	r3, #12
 8004450:	b292      	uxth	r2, r2
 8004452:	801a      	strh	r2, [r3, #0]
	*(cellVoltages + 7) = (sideA_cellVoltageC[3] << 8) | sideA_cellVoltageC[2];
 8004454:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8004458:	b21b      	sxth	r3, r3
 800445a:	021b      	lsls	r3, r3, #8
 800445c:	b21a      	sxth	r2, r3
 800445e:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8004462:	b21b      	sxth	r3, r3
 8004464:	4313      	orrs	r3, r2
 8004466:	b21a      	sxth	r2, r3
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	330e      	adds	r3, #14
 800446c:	b292      	uxth	r2, r2
 800446e:	801a      	strh	r2, [r3, #0]
	*(cellVoltages + 8) = (sideA_cellVoltageC[5] << 8) | sideA_cellVoltageC[4];
 8004470:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8004474:	b21b      	sxth	r3, r3
 8004476:	021b      	lsls	r3, r3, #8
 8004478:	b21a      	sxth	r2, r3
 800447a:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 800447e:	b21b      	sxth	r3, r3
 8004480:	4313      	orrs	r3, r2
 8004482:	b21a      	sxth	r2, r3
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	3310      	adds	r3, #16
 8004488:	b292      	uxth	r2, r2
 800448a:	801a      	strh	r2, [r3, #0]
	*(cellVoltages + 9) = (sideA_cellVoltageD[1] << 8) | sideA_cellVoltageD[0];
 800448c:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8004490:	b21b      	sxth	r3, r3
 8004492:	021b      	lsls	r3, r3, #8
 8004494:	b21a      	sxth	r2, r3
 8004496:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800449a:	b21b      	sxth	r3, r3
 800449c:	4313      	orrs	r3, r2
 800449e:	b21a      	sxth	r2, r3
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	3312      	adds	r3, #18
 80044a4:	b292      	uxth	r2, r2
 80044a6:	801a      	strh	r2, [r3, #0]

	*(cellVoltages + 10) = (sideB_cellVoltageA[1] << 8) | sideB_cellVoltageA[0];
 80044a8:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80044ac:	b21b      	sxth	r3, r3
 80044ae:	021b      	lsls	r3, r3, #8
 80044b0:	b21a      	sxth	r2, r3
 80044b2:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80044b6:	b21b      	sxth	r3, r3
 80044b8:	4313      	orrs	r3, r2
 80044ba:	b21a      	sxth	r2, r3
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	3314      	adds	r3, #20
 80044c0:	b292      	uxth	r2, r2
 80044c2:	801a      	strh	r2, [r3, #0]
	*(cellVoltages + 11) = (sideB_cellVoltageA[3] << 8) | sideB_cellVoltageA[2];
 80044c4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80044c8:	b21b      	sxth	r3, r3
 80044ca:	021b      	lsls	r3, r3, #8
 80044cc:	b21a      	sxth	r2, r3
 80044ce:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80044d2:	b21b      	sxth	r3, r3
 80044d4:	4313      	orrs	r3, r2
 80044d6:	b21a      	sxth	r2, r3
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	3316      	adds	r3, #22
 80044dc:	b292      	uxth	r2, r2
 80044de:	801a      	strh	r2, [r3, #0]
	*(cellVoltages + 12) = (sideB_cellVoltageA[5] << 8) | sideB_cellVoltageA[4];
 80044e0:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80044e4:	b21b      	sxth	r3, r3
 80044e6:	021b      	lsls	r3, r3, #8
 80044e8:	b21a      	sxth	r2, r3
 80044ea:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80044ee:	b21b      	sxth	r3, r3
 80044f0:	4313      	orrs	r3, r2
 80044f2:	b21a      	sxth	r2, r3
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	3318      	adds	r3, #24
 80044f8:	b292      	uxth	r2, r2
 80044fa:	801a      	strh	r2, [r3, #0]
	*(cellVoltages + 13) = (sideB_cellVoltageB[1] << 8) | sideB_cellVoltageB[0];
 80044fc:	7f7b      	ldrb	r3, [r7, #29]
 80044fe:	b21b      	sxth	r3, r3
 8004500:	021b      	lsls	r3, r3, #8
 8004502:	b21a      	sxth	r2, r3
 8004504:	7f3b      	ldrb	r3, [r7, #28]
 8004506:	b21b      	sxth	r3, r3
 8004508:	4313      	orrs	r3, r2
 800450a:	b21a      	sxth	r2, r3
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	331a      	adds	r3, #26
 8004510:	b292      	uxth	r2, r2
 8004512:	801a      	strh	r2, [r3, #0]
	*(cellVoltages + 14) = (sideB_cellVoltageB[3] << 8) | sideB_cellVoltageB[2];
 8004514:	7ffb      	ldrb	r3, [r7, #31]
 8004516:	b21b      	sxth	r3, r3
 8004518:	021b      	lsls	r3, r3, #8
 800451a:	b21a      	sxth	r2, r3
 800451c:	7fbb      	ldrb	r3, [r7, #30]
 800451e:	b21b      	sxth	r3, r3
 8004520:	4313      	orrs	r3, r2
 8004522:	b21a      	sxth	r2, r3
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	331c      	adds	r3, #28
 8004528:	b292      	uxth	r2, r2
 800452a:	801a      	strh	r2, [r3, #0]
	*(cellVoltages + 15) = (sideB_cellVoltageB[5] << 8) | sideB_cellVoltageB[4];
 800452c:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8004530:	b21b      	sxth	r3, r3
 8004532:	021b      	lsls	r3, r3, #8
 8004534:	b21a      	sxth	r2, r3
 8004536:	f897 3020 	ldrb.w	r3, [r7, #32]
 800453a:	b21b      	sxth	r3, r3
 800453c:	4313      	orrs	r3, r2
 800453e:	b21a      	sxth	r2, r3
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	331e      	adds	r3, #30
 8004544:	b292      	uxth	r2, r2
 8004546:	801a      	strh	r2, [r3, #0]
	*(cellVoltages + 16) = (sideB_cellVoltageC[1] << 8) | sideB_cellVoltageC[0];
 8004548:	7d7b      	ldrb	r3, [r7, #21]
 800454a:	b21b      	sxth	r3, r3
 800454c:	021b      	lsls	r3, r3, #8
 800454e:	b21a      	sxth	r2, r3
 8004550:	7d3b      	ldrb	r3, [r7, #20]
 8004552:	b21b      	sxth	r3, r3
 8004554:	4313      	orrs	r3, r2
 8004556:	b21a      	sxth	r2, r3
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	3320      	adds	r3, #32
 800455c:	b292      	uxth	r2, r2
 800455e:	801a      	strh	r2, [r3, #0]
	*(cellVoltages + 17) = (sideB_cellVoltageC[3] << 8) | sideB_cellVoltageC[2];
 8004560:	7dfb      	ldrb	r3, [r7, #23]
 8004562:	b21b      	sxth	r3, r3
 8004564:	021b      	lsls	r3, r3, #8
 8004566:	b21a      	sxth	r2, r3
 8004568:	7dbb      	ldrb	r3, [r7, #22]
 800456a:	b21b      	sxth	r3, r3
 800456c:	4313      	orrs	r3, r2
 800456e:	b21a      	sxth	r2, r3
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	3322      	adds	r3, #34	@ 0x22
 8004574:	b292      	uxth	r2, r2
 8004576:	801a      	strh	r2, [r3, #0]
	*(cellVoltages + 18) = (sideB_cellVoltageC[5] << 8) | sideB_cellVoltageC[4];
 8004578:	7e7b      	ldrb	r3, [r7, #25]
 800457a:	b21b      	sxth	r3, r3
 800457c:	021b      	lsls	r3, r3, #8
 800457e:	b21a      	sxth	r2, r3
 8004580:	7e3b      	ldrb	r3, [r7, #24]
 8004582:	b21b      	sxth	r3, r3
 8004584:	4313      	orrs	r3, r2
 8004586:	b21a      	sxth	r2, r3
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	3324      	adds	r3, #36	@ 0x24
 800458c:	b292      	uxth	r2, r2
 800458e:	801a      	strh	r2, [r3, #0]
	*(cellVoltages + 19) = (sideB_cellVoltageD[1] << 8) | sideB_cellVoltageD[0];
 8004590:	7b7b      	ldrb	r3, [r7, #13]
 8004592:	b21b      	sxth	r3, r3
 8004594:	021b      	lsls	r3, r3, #8
 8004596:	b21a      	sxth	r2, r3
 8004598:	7b3b      	ldrb	r3, [r7, #12]
 800459a:	b21b      	sxth	r3, r3
 800459c:	4313      	orrs	r3, r2
 800459e:	b21a      	sxth	r2, r3
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	3326      	adds	r3, #38	@ 0x26
 80045a4:	b292      	uxth	r2, r2
 80045a6:	801a      	strh	r2, [r3, #0]

}
 80045a8:	bf00      	nop
 80045aa:	3758      	adds	r7, #88	@ 0x58
 80045ac:	46bd      	mov	sp, r7
 80045ae:	bd80      	pop	{r7, pc}

080045b0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80045b0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80045e8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80045b4:	f7fd f882 	bl	80016bc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80045b8:	480c      	ldr	r0, [pc, #48]	@ (80045ec <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80045ba:	490d      	ldr	r1, [pc, #52]	@ (80045f0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80045bc:	4a0d      	ldr	r2, [pc, #52]	@ (80045f4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80045be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80045c0:	e002      	b.n	80045c8 <LoopCopyDataInit>

080045c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80045c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80045c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80045c6:	3304      	adds	r3, #4

080045c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80045c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80045ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80045cc:	d3f9      	bcc.n	80045c2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80045ce:	4a0a      	ldr	r2, [pc, #40]	@ (80045f8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80045d0:	4c0a      	ldr	r4, [pc, #40]	@ (80045fc <LoopFillZerobss+0x22>)
  movs r3, #0
 80045d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80045d4:	e001      	b.n	80045da <LoopFillZerobss>

080045d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80045d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80045d8:	3204      	adds	r2, #4

080045da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80045da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80045dc:	d3fb      	bcc.n	80045d6 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80045de:	f003 fce9 	bl	8007fb4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80045e2:	f7fc fbc5 	bl	8000d70 <main>
  bx  lr    
 80045e6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80045e8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80045ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80045f0:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 80045f4:	08008a34 	.word	0x08008a34
  ldr r2, =_sbss
 80045f8:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 80045fc:	20000538 	.word	0x20000538

08004600 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004600:	e7fe      	b.n	8004600 <ADC_IRQHandler>
	...

08004604 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004604:	b580      	push	{r7, lr}
 8004606:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004608:	4b0e      	ldr	r3, [pc, #56]	@ (8004644 <HAL_Init+0x40>)
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	4a0d      	ldr	r2, [pc, #52]	@ (8004644 <HAL_Init+0x40>)
 800460e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004612:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004614:	4b0b      	ldr	r3, [pc, #44]	@ (8004644 <HAL_Init+0x40>)
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	4a0a      	ldr	r2, [pc, #40]	@ (8004644 <HAL_Init+0x40>)
 800461a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800461e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004620:	4b08      	ldr	r3, [pc, #32]	@ (8004644 <HAL_Init+0x40>)
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	4a07      	ldr	r2, [pc, #28]	@ (8004644 <HAL_Init+0x40>)
 8004626:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800462a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800462c:	2003      	movs	r0, #3
 800462e:	f001 fc1b 	bl	8005e68 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004632:	200f      	movs	r0, #15
 8004634:	f000 f808 	bl	8004648 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004638:	f7fc fe9a 	bl	8001370 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800463c:	2300      	movs	r3, #0
}
 800463e:	4618      	mov	r0, r3
 8004640:	bd80      	pop	{r7, pc}
 8004642:	bf00      	nop
 8004644:	40023c00 	.word	0x40023c00

08004648 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004648:	b580      	push	{r7, lr}
 800464a:	b082      	sub	sp, #8
 800464c:	af00      	add	r7, sp, #0
 800464e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004650:	4b12      	ldr	r3, [pc, #72]	@ (800469c <HAL_InitTick+0x54>)
 8004652:	681a      	ldr	r2, [r3, #0]
 8004654:	4b12      	ldr	r3, [pc, #72]	@ (80046a0 <HAL_InitTick+0x58>)
 8004656:	781b      	ldrb	r3, [r3, #0]
 8004658:	4619      	mov	r1, r3
 800465a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800465e:	fbb3 f3f1 	udiv	r3, r3, r1
 8004662:	fbb2 f3f3 	udiv	r3, r2, r3
 8004666:	4618      	mov	r0, r3
 8004668:	f001 fc33 	bl	8005ed2 <HAL_SYSTICK_Config>
 800466c:	4603      	mov	r3, r0
 800466e:	2b00      	cmp	r3, #0
 8004670:	d001      	beq.n	8004676 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004672:	2301      	movs	r3, #1
 8004674:	e00e      	b.n	8004694 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	2b0f      	cmp	r3, #15
 800467a:	d80a      	bhi.n	8004692 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800467c:	2200      	movs	r2, #0
 800467e:	6879      	ldr	r1, [r7, #4]
 8004680:	f04f 30ff 	mov.w	r0, #4294967295
 8004684:	f001 fbfb 	bl	8005e7e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004688:	4a06      	ldr	r2, [pc, #24]	@ (80046a4 <HAL_InitTick+0x5c>)
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800468e:	2300      	movs	r3, #0
 8004690:	e000      	b.n	8004694 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004692:	2301      	movs	r3, #1
}
 8004694:	4618      	mov	r0, r3
 8004696:	3708      	adds	r7, #8
 8004698:	46bd      	mov	sp, r7
 800469a:	bd80      	pop	{r7, pc}
 800469c:	20000000 	.word	0x20000000
 80046a0:	2000000c 	.word	0x2000000c
 80046a4:	20000008 	.word	0x20000008

080046a8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80046a8:	b480      	push	{r7}
 80046aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80046ac:	4b06      	ldr	r3, [pc, #24]	@ (80046c8 <HAL_IncTick+0x20>)
 80046ae:	781b      	ldrb	r3, [r3, #0]
 80046b0:	461a      	mov	r2, r3
 80046b2:	4b06      	ldr	r3, [pc, #24]	@ (80046cc <HAL_IncTick+0x24>)
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	4413      	add	r3, r2
 80046b8:	4a04      	ldr	r2, [pc, #16]	@ (80046cc <HAL_IncTick+0x24>)
 80046ba:	6013      	str	r3, [r2, #0]
}
 80046bc:	bf00      	nop
 80046be:	46bd      	mov	sp, r7
 80046c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c4:	4770      	bx	lr
 80046c6:	bf00      	nop
 80046c8:	2000000c 	.word	0x2000000c
 80046cc:	200003fc 	.word	0x200003fc

080046d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80046d0:	b480      	push	{r7}
 80046d2:	af00      	add	r7, sp, #0
  return uwTick;
 80046d4:	4b03      	ldr	r3, [pc, #12]	@ (80046e4 <HAL_GetTick+0x14>)
 80046d6:	681b      	ldr	r3, [r3, #0]
}
 80046d8:	4618      	mov	r0, r3
 80046da:	46bd      	mov	sp, r7
 80046dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e0:	4770      	bx	lr
 80046e2:	bf00      	nop
 80046e4:	200003fc 	.word	0x200003fc

080046e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80046e8:	b580      	push	{r7, lr}
 80046ea:	b084      	sub	sp, #16
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80046f0:	f7ff ffee 	bl	80046d0 <HAL_GetTick>
 80046f4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004700:	d005      	beq.n	800470e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004702:	4b0a      	ldr	r3, [pc, #40]	@ (800472c <HAL_Delay+0x44>)
 8004704:	781b      	ldrb	r3, [r3, #0]
 8004706:	461a      	mov	r2, r3
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	4413      	add	r3, r2
 800470c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800470e:	bf00      	nop
 8004710:	f7ff ffde 	bl	80046d0 <HAL_GetTick>
 8004714:	4602      	mov	r2, r0
 8004716:	68bb      	ldr	r3, [r7, #8]
 8004718:	1ad3      	subs	r3, r2, r3
 800471a:	68fa      	ldr	r2, [r7, #12]
 800471c:	429a      	cmp	r2, r3
 800471e:	d8f7      	bhi.n	8004710 <HAL_Delay+0x28>
  {
  }
}
 8004720:	bf00      	nop
 8004722:	bf00      	nop
 8004724:	3710      	adds	r7, #16
 8004726:	46bd      	mov	sp, r7
 8004728:	bd80      	pop	{r7, pc}
 800472a:	bf00      	nop
 800472c:	2000000c 	.word	0x2000000c

08004730 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004730:	b580      	push	{r7, lr}
 8004732:	b084      	sub	sp, #16
 8004734:	af00      	add	r7, sp, #0
 8004736:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004738:	2300      	movs	r3, #0
 800473a:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	2b00      	cmp	r3, #0
 8004740:	d101      	bne.n	8004746 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8004742:	2301      	movs	r3, #1
 8004744:	e033      	b.n	80047ae <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800474a:	2b00      	cmp	r3, #0
 800474c:	d109      	bne.n	8004762 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800474e:	6878      	ldr	r0, [r7, #4]
 8004750:	f7fc fe36 	bl	80013c0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2200      	movs	r2, #0
 8004758:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	2200      	movs	r2, #0
 800475e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004766:	f003 0310 	and.w	r3, r3, #16
 800476a:	2b00      	cmp	r3, #0
 800476c:	d118      	bne.n	80047a0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004772:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8004776:	f023 0302 	bic.w	r3, r3, #2
 800477a:	f043 0202 	orr.w	r2, r3, #2
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8004782:	6878      	ldr	r0, [r7, #4]
 8004784:	f000 fae8 	bl	8004d58 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	2200      	movs	r2, #0
 800478c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004792:	f023 0303 	bic.w	r3, r3, #3
 8004796:	f043 0201 	orr.w	r2, r3, #1
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	641a      	str	r2, [r3, #64]	@ 0x40
 800479e:	e001      	b.n	80047a4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80047a0:	2301      	movs	r3, #1
 80047a2:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2200      	movs	r2, #0
 80047a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80047ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80047ae:	4618      	mov	r0, r3
 80047b0:	3710      	adds	r7, #16
 80047b2:	46bd      	mov	sp, r7
 80047b4:	bd80      	pop	{r7, pc}
	...

080047b8 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80047b8:	b480      	push	{r7}
 80047ba:	b085      	sub	sp, #20
 80047bc:	af00      	add	r7, sp, #0
 80047be:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80047c0:	2300      	movs	r3, #0
 80047c2:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80047ca:	2b01      	cmp	r3, #1
 80047cc:	d101      	bne.n	80047d2 <HAL_ADC_Start+0x1a>
 80047ce:	2302      	movs	r3, #2
 80047d0:	e0b2      	b.n	8004938 <HAL_ADC_Start+0x180>
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	2201      	movs	r2, #1
 80047d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	689b      	ldr	r3, [r3, #8]
 80047e0:	f003 0301 	and.w	r3, r3, #1
 80047e4:	2b01      	cmp	r3, #1
 80047e6:	d018      	beq.n	800481a <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	689a      	ldr	r2, [r3, #8]
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f042 0201 	orr.w	r2, r2, #1
 80047f6:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80047f8:	4b52      	ldr	r3, [pc, #328]	@ (8004944 <HAL_ADC_Start+0x18c>)
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	4a52      	ldr	r2, [pc, #328]	@ (8004948 <HAL_ADC_Start+0x190>)
 80047fe:	fba2 2303 	umull	r2, r3, r2, r3
 8004802:	0c9a      	lsrs	r2, r3, #18
 8004804:	4613      	mov	r3, r2
 8004806:	005b      	lsls	r3, r3, #1
 8004808:	4413      	add	r3, r2
 800480a:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 800480c:	e002      	b.n	8004814 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800480e:	68bb      	ldr	r3, [r7, #8]
 8004810:	3b01      	subs	r3, #1
 8004812:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8004814:	68bb      	ldr	r3, [r7, #8]
 8004816:	2b00      	cmp	r3, #0
 8004818:	d1f9      	bne.n	800480e <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	689b      	ldr	r3, [r3, #8]
 8004820:	f003 0301 	and.w	r3, r3, #1
 8004824:	2b01      	cmp	r3, #1
 8004826:	d17a      	bne.n	800491e <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800482c:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8004830:	f023 0301 	bic.w	r3, r3, #1
 8004834:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	685b      	ldr	r3, [r3, #4]
 8004842:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004846:	2b00      	cmp	r3, #0
 8004848:	d007      	beq.n	800485a <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800484e:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8004852:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800485e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004862:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004866:	d106      	bne.n	8004876 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800486c:	f023 0206 	bic.w	r2, r3, #6
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	645a      	str	r2, [r3, #68]	@ 0x44
 8004874:	e002      	b.n	800487c <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	2200      	movs	r2, #0
 800487a:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	2200      	movs	r2, #0
 8004880:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004884:	4b31      	ldr	r3, [pc, #196]	@ (800494c <HAL_ADC_Start+0x194>)
 8004886:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8004890:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	685b      	ldr	r3, [r3, #4]
 8004896:	f003 031f 	and.w	r3, r3, #31
 800489a:	2b00      	cmp	r3, #0
 800489c:	d12a      	bne.n	80048f4 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	4a2b      	ldr	r2, [pc, #172]	@ (8004950 <HAL_ADC_Start+0x198>)
 80048a4:	4293      	cmp	r3, r2
 80048a6:	d015      	beq.n	80048d4 <HAL_ADC_Start+0x11c>
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	4a29      	ldr	r2, [pc, #164]	@ (8004954 <HAL_ADC_Start+0x19c>)
 80048ae:	4293      	cmp	r3, r2
 80048b0:	d105      	bne.n	80048be <HAL_ADC_Start+0x106>
 80048b2:	4b26      	ldr	r3, [pc, #152]	@ (800494c <HAL_ADC_Start+0x194>)
 80048b4:	685b      	ldr	r3, [r3, #4]
 80048b6:	f003 031f 	and.w	r3, r3, #31
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d00a      	beq.n	80048d4 <HAL_ADC_Start+0x11c>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	4a25      	ldr	r2, [pc, #148]	@ (8004958 <HAL_ADC_Start+0x1a0>)
 80048c4:	4293      	cmp	r3, r2
 80048c6:	d136      	bne.n	8004936 <HAL_ADC_Start+0x17e>
 80048c8:	4b20      	ldr	r3, [pc, #128]	@ (800494c <HAL_ADC_Start+0x194>)
 80048ca:	685b      	ldr	r3, [r3, #4]
 80048cc:	f003 0310 	and.w	r3, r3, #16
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d130      	bne.n	8004936 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	689b      	ldr	r3, [r3, #8]
 80048da:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d129      	bne.n	8004936 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	689a      	ldr	r2, [r3, #8]
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80048f0:	609a      	str	r2, [r3, #8]
 80048f2:	e020      	b.n	8004936 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	4a15      	ldr	r2, [pc, #84]	@ (8004950 <HAL_ADC_Start+0x198>)
 80048fa:	4293      	cmp	r3, r2
 80048fc:	d11b      	bne.n	8004936 <HAL_ADC_Start+0x17e>
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	689b      	ldr	r3, [r3, #8]
 8004904:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8004908:	2b00      	cmp	r3, #0
 800490a:	d114      	bne.n	8004936 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	689a      	ldr	r2, [r3, #8]
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800491a:	609a      	str	r2, [r3, #8]
 800491c:	e00b      	b.n	8004936 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004922:	f043 0210 	orr.w	r2, r3, #16
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800492e:	f043 0201 	orr.w	r2, r3, #1
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8004936:	2300      	movs	r3, #0
}
 8004938:	4618      	mov	r0, r3
 800493a:	3714      	adds	r7, #20
 800493c:	46bd      	mov	sp, r7
 800493e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004942:	4770      	bx	lr
 8004944:	20000000 	.word	0x20000000
 8004948:	431bde83 	.word	0x431bde83
 800494c:	40012300 	.word	0x40012300
 8004950:	40012000 	.word	0x40012000
 8004954:	40012100 	.word	0x40012100
 8004958:	40012200 	.word	0x40012200

0800495c <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 800495c:	b480      	push	{r7}
 800495e:	b083      	sub	sp, #12
 8004960:	af00      	add	r7, sp, #0
 8004962:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800496a:	2b01      	cmp	r3, #1
 800496c:	d101      	bne.n	8004972 <HAL_ADC_Stop+0x16>
 800496e:	2302      	movs	r3, #2
 8004970:	e021      	b.n	80049b6 <HAL_ADC_Stop+0x5a>
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	2201      	movs	r2, #1
 8004976:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	689a      	ldr	r2, [r3, #8]
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f022 0201 	bic.w	r2, r2, #1
 8004988:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	689b      	ldr	r3, [r3, #8]
 8004990:	f003 0301 	and.w	r3, r3, #1
 8004994:	2b00      	cmp	r3, #0
 8004996:	d109      	bne.n	80049ac <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800499c:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80049a0:	f023 0301 	bic.w	r3, r3, #1
 80049a4:	f043 0201 	orr.w	r2, r3, #1
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	2200      	movs	r2, #0
 80049b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80049b4:	2300      	movs	r3, #0
}
 80049b6:	4618      	mov	r0, r3
 80049b8:	370c      	adds	r7, #12
 80049ba:	46bd      	mov	sp, r7
 80049bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c0:	4770      	bx	lr

080049c2 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80049c2:	b580      	push	{r7, lr}
 80049c4:	b084      	sub	sp, #16
 80049c6:	af00      	add	r7, sp, #0
 80049c8:	6078      	str	r0, [r7, #4]
 80049ca:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80049cc:	2300      	movs	r3, #0
 80049ce:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	689b      	ldr	r3, [r3, #8]
 80049d6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80049da:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80049de:	d113      	bne.n	8004a08 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	689b      	ldr	r3, [r3, #8]
 80049e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80049ea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80049ee:	d10b      	bne.n	8004a08 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049f4:	f043 0220 	orr.w	r2, r3, #32
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	2200      	movs	r2, #0
 8004a00:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8004a04:	2301      	movs	r3, #1
 8004a06:	e063      	b.n	8004ad0 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 8004a08:	f7ff fe62 	bl	80046d0 <HAL_GetTick>
 8004a0c:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8004a0e:	e021      	b.n	8004a54 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8004a10:	683b      	ldr	r3, [r7, #0]
 8004a12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a16:	d01d      	beq.n	8004a54 <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8004a18:	683b      	ldr	r3, [r7, #0]
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d007      	beq.n	8004a2e <HAL_ADC_PollForConversion+0x6c>
 8004a1e:	f7ff fe57 	bl	80046d0 <HAL_GetTick>
 8004a22:	4602      	mov	r2, r0
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	1ad3      	subs	r3, r2, r3
 8004a28:	683a      	ldr	r2, [r7, #0]
 8004a2a:	429a      	cmp	r2, r3
 8004a2c:	d212      	bcs.n	8004a54 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f003 0302 	and.w	r3, r3, #2
 8004a38:	2b02      	cmp	r3, #2
 8004a3a:	d00b      	beq.n	8004a54 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a40:	f043 0204 	orr.w	r2, r3, #4
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	2200      	movs	r2, #0
 8004a4c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 8004a50:	2303      	movs	r3, #3
 8004a52:	e03d      	b.n	8004ad0 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f003 0302 	and.w	r3, r3, #2
 8004a5e:	2b02      	cmp	r3, #2
 8004a60:	d1d6      	bne.n	8004a10 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f06f 0212 	mvn.w	r2, #18
 8004a6a:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a70:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	689b      	ldr	r3, [r3, #8]
 8004a7e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d123      	bne.n	8004ace <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d11f      	bne.n	8004ace <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a94:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d006      	beq.n	8004aaa <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	689b      	ldr	r3, [r3, #8]
 8004aa2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d111      	bne.n	8004ace <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004aae:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004aba:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d105      	bne.n	8004ace <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ac6:	f043 0201 	orr.w	r2, r3, #1
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 8004ace:	2300      	movs	r3, #0
}
 8004ad0:	4618      	mov	r0, r3
 8004ad2:	3710      	adds	r7, #16
 8004ad4:	46bd      	mov	sp, r7
 8004ad6:	bd80      	pop	{r7, pc}

08004ad8 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8004ad8:	b480      	push	{r7}
 8004ada:	b083      	sub	sp, #12
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8004ae6:	4618      	mov	r0, r3
 8004ae8:	370c      	adds	r7, #12
 8004aea:	46bd      	mov	sp, r7
 8004aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af0:	4770      	bx	lr
	...

08004af4 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8004af4:	b480      	push	{r7}
 8004af6:	b085      	sub	sp, #20
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	6078      	str	r0, [r7, #4]
 8004afc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8004afe:	2300      	movs	r3, #0
 8004b00:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004b08:	2b01      	cmp	r3, #1
 8004b0a:	d101      	bne.n	8004b10 <HAL_ADC_ConfigChannel+0x1c>
 8004b0c:	2302      	movs	r3, #2
 8004b0e:	e113      	b.n	8004d38 <HAL_ADC_ConfigChannel+0x244>
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	2201      	movs	r2, #1
 8004b14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8004b18:	683b      	ldr	r3, [r7, #0]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	2b09      	cmp	r3, #9
 8004b1e:	d925      	bls.n	8004b6c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	68d9      	ldr	r1, [r3, #12]
 8004b26:	683b      	ldr	r3, [r7, #0]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	b29b      	uxth	r3, r3
 8004b2c:	461a      	mov	r2, r3
 8004b2e:	4613      	mov	r3, r2
 8004b30:	005b      	lsls	r3, r3, #1
 8004b32:	4413      	add	r3, r2
 8004b34:	3b1e      	subs	r3, #30
 8004b36:	2207      	movs	r2, #7
 8004b38:	fa02 f303 	lsl.w	r3, r2, r3
 8004b3c:	43da      	mvns	r2, r3
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	400a      	ands	r2, r1
 8004b44:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	68d9      	ldr	r1, [r3, #12]
 8004b4c:	683b      	ldr	r3, [r7, #0]
 8004b4e:	689a      	ldr	r2, [r3, #8]
 8004b50:	683b      	ldr	r3, [r7, #0]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	b29b      	uxth	r3, r3
 8004b56:	4618      	mov	r0, r3
 8004b58:	4603      	mov	r3, r0
 8004b5a:	005b      	lsls	r3, r3, #1
 8004b5c:	4403      	add	r3, r0
 8004b5e:	3b1e      	subs	r3, #30
 8004b60:	409a      	lsls	r2, r3
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	430a      	orrs	r2, r1
 8004b68:	60da      	str	r2, [r3, #12]
 8004b6a:	e022      	b.n	8004bb2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	6919      	ldr	r1, [r3, #16]
 8004b72:	683b      	ldr	r3, [r7, #0]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	b29b      	uxth	r3, r3
 8004b78:	461a      	mov	r2, r3
 8004b7a:	4613      	mov	r3, r2
 8004b7c:	005b      	lsls	r3, r3, #1
 8004b7e:	4413      	add	r3, r2
 8004b80:	2207      	movs	r2, #7
 8004b82:	fa02 f303 	lsl.w	r3, r2, r3
 8004b86:	43da      	mvns	r2, r3
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	400a      	ands	r2, r1
 8004b8e:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	6919      	ldr	r1, [r3, #16]
 8004b96:	683b      	ldr	r3, [r7, #0]
 8004b98:	689a      	ldr	r2, [r3, #8]
 8004b9a:	683b      	ldr	r3, [r7, #0]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	b29b      	uxth	r3, r3
 8004ba0:	4618      	mov	r0, r3
 8004ba2:	4603      	mov	r3, r0
 8004ba4:	005b      	lsls	r3, r3, #1
 8004ba6:	4403      	add	r3, r0
 8004ba8:	409a      	lsls	r2, r3
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	430a      	orrs	r2, r1
 8004bb0:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8004bb2:	683b      	ldr	r3, [r7, #0]
 8004bb4:	685b      	ldr	r3, [r3, #4]
 8004bb6:	2b06      	cmp	r3, #6
 8004bb8:	d824      	bhi.n	8004c04 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8004bc0:	683b      	ldr	r3, [r7, #0]
 8004bc2:	685a      	ldr	r2, [r3, #4]
 8004bc4:	4613      	mov	r3, r2
 8004bc6:	009b      	lsls	r3, r3, #2
 8004bc8:	4413      	add	r3, r2
 8004bca:	3b05      	subs	r3, #5
 8004bcc:	221f      	movs	r2, #31
 8004bce:	fa02 f303 	lsl.w	r3, r2, r3
 8004bd2:	43da      	mvns	r2, r3
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	400a      	ands	r2, r1
 8004bda:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8004be2:	683b      	ldr	r3, [r7, #0]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	b29b      	uxth	r3, r3
 8004be8:	4618      	mov	r0, r3
 8004bea:	683b      	ldr	r3, [r7, #0]
 8004bec:	685a      	ldr	r2, [r3, #4]
 8004bee:	4613      	mov	r3, r2
 8004bf0:	009b      	lsls	r3, r3, #2
 8004bf2:	4413      	add	r3, r2
 8004bf4:	3b05      	subs	r3, #5
 8004bf6:	fa00 f203 	lsl.w	r2, r0, r3
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	430a      	orrs	r2, r1
 8004c00:	635a      	str	r2, [r3, #52]	@ 0x34
 8004c02:	e04c      	b.n	8004c9e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8004c04:	683b      	ldr	r3, [r7, #0]
 8004c06:	685b      	ldr	r3, [r3, #4]
 8004c08:	2b0c      	cmp	r3, #12
 8004c0a:	d824      	bhi.n	8004c56 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8004c12:	683b      	ldr	r3, [r7, #0]
 8004c14:	685a      	ldr	r2, [r3, #4]
 8004c16:	4613      	mov	r3, r2
 8004c18:	009b      	lsls	r3, r3, #2
 8004c1a:	4413      	add	r3, r2
 8004c1c:	3b23      	subs	r3, #35	@ 0x23
 8004c1e:	221f      	movs	r2, #31
 8004c20:	fa02 f303 	lsl.w	r3, r2, r3
 8004c24:	43da      	mvns	r2, r3
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	400a      	ands	r2, r1
 8004c2c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8004c34:	683b      	ldr	r3, [r7, #0]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	b29b      	uxth	r3, r3
 8004c3a:	4618      	mov	r0, r3
 8004c3c:	683b      	ldr	r3, [r7, #0]
 8004c3e:	685a      	ldr	r2, [r3, #4]
 8004c40:	4613      	mov	r3, r2
 8004c42:	009b      	lsls	r3, r3, #2
 8004c44:	4413      	add	r3, r2
 8004c46:	3b23      	subs	r3, #35	@ 0x23
 8004c48:	fa00 f203 	lsl.w	r2, r0, r3
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	430a      	orrs	r2, r1
 8004c52:	631a      	str	r2, [r3, #48]	@ 0x30
 8004c54:	e023      	b.n	8004c9e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004c5c:	683b      	ldr	r3, [r7, #0]
 8004c5e:	685a      	ldr	r2, [r3, #4]
 8004c60:	4613      	mov	r3, r2
 8004c62:	009b      	lsls	r3, r3, #2
 8004c64:	4413      	add	r3, r2
 8004c66:	3b41      	subs	r3, #65	@ 0x41
 8004c68:	221f      	movs	r2, #31
 8004c6a:	fa02 f303 	lsl.w	r3, r2, r3
 8004c6e:	43da      	mvns	r2, r3
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	400a      	ands	r2, r1
 8004c76:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004c7e:	683b      	ldr	r3, [r7, #0]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	b29b      	uxth	r3, r3
 8004c84:	4618      	mov	r0, r3
 8004c86:	683b      	ldr	r3, [r7, #0]
 8004c88:	685a      	ldr	r2, [r3, #4]
 8004c8a:	4613      	mov	r3, r2
 8004c8c:	009b      	lsls	r3, r3, #2
 8004c8e:	4413      	add	r3, r2
 8004c90:	3b41      	subs	r3, #65	@ 0x41
 8004c92:	fa00 f203 	lsl.w	r2, r0, r3
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	430a      	orrs	r2, r1
 8004c9c:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004c9e:	4b29      	ldr	r3, [pc, #164]	@ (8004d44 <HAL_ADC_ConfigChannel+0x250>)
 8004ca0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	4a28      	ldr	r2, [pc, #160]	@ (8004d48 <HAL_ADC_ConfigChannel+0x254>)
 8004ca8:	4293      	cmp	r3, r2
 8004caa:	d10f      	bne.n	8004ccc <HAL_ADC_ConfigChannel+0x1d8>
 8004cac:	683b      	ldr	r3, [r7, #0]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	2b12      	cmp	r3, #18
 8004cb2:	d10b      	bne.n	8004ccc <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	685b      	ldr	r3, [r3, #4]
 8004cb8:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	685b      	ldr	r3, [r3, #4]
 8004cc4:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	4a1d      	ldr	r2, [pc, #116]	@ (8004d48 <HAL_ADC_ConfigChannel+0x254>)
 8004cd2:	4293      	cmp	r3, r2
 8004cd4:	d12b      	bne.n	8004d2e <HAL_ADC_ConfigChannel+0x23a>
 8004cd6:	683b      	ldr	r3, [r7, #0]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	4a1c      	ldr	r2, [pc, #112]	@ (8004d4c <HAL_ADC_ConfigChannel+0x258>)
 8004cdc:	4293      	cmp	r3, r2
 8004cde:	d003      	beq.n	8004ce8 <HAL_ADC_ConfigChannel+0x1f4>
 8004ce0:	683b      	ldr	r3, [r7, #0]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	2b11      	cmp	r3, #17
 8004ce6:	d122      	bne.n	8004d2e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	685b      	ldr	r3, [r3, #4]
 8004cec:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	685b      	ldr	r3, [r3, #4]
 8004cf8:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004d00:	683b      	ldr	r3, [r7, #0]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	4a11      	ldr	r2, [pc, #68]	@ (8004d4c <HAL_ADC_ConfigChannel+0x258>)
 8004d06:	4293      	cmp	r3, r2
 8004d08:	d111      	bne.n	8004d2e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004d0a:	4b11      	ldr	r3, [pc, #68]	@ (8004d50 <HAL_ADC_ConfigChannel+0x25c>)
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	4a11      	ldr	r2, [pc, #68]	@ (8004d54 <HAL_ADC_ConfigChannel+0x260>)
 8004d10:	fba2 2303 	umull	r2, r3, r2, r3
 8004d14:	0c9a      	lsrs	r2, r3, #18
 8004d16:	4613      	mov	r3, r2
 8004d18:	009b      	lsls	r3, r3, #2
 8004d1a:	4413      	add	r3, r2
 8004d1c:	005b      	lsls	r3, r3, #1
 8004d1e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8004d20:	e002      	b.n	8004d28 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8004d22:	68bb      	ldr	r3, [r7, #8]
 8004d24:	3b01      	subs	r3, #1
 8004d26:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8004d28:	68bb      	ldr	r3, [r7, #8]
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d1f9      	bne.n	8004d22 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	2200      	movs	r2, #0
 8004d32:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8004d36:	2300      	movs	r3, #0
}
 8004d38:	4618      	mov	r0, r3
 8004d3a:	3714      	adds	r7, #20
 8004d3c:	46bd      	mov	sp, r7
 8004d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d42:	4770      	bx	lr
 8004d44:	40012300 	.word	0x40012300
 8004d48:	40012000 	.word	0x40012000
 8004d4c:	10000012 	.word	0x10000012
 8004d50:	20000000 	.word	0x20000000
 8004d54:	431bde83 	.word	0x431bde83

08004d58 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004d58:	b480      	push	{r7}
 8004d5a:	b085      	sub	sp, #20
 8004d5c:	af00      	add	r7, sp, #0
 8004d5e:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004d60:	4b79      	ldr	r3, [pc, #484]	@ (8004f48 <ADC_Init+0x1f0>)
 8004d62:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	685b      	ldr	r3, [r3, #4]
 8004d68:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	685a      	ldr	r2, [r3, #4]
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	685b      	ldr	r3, [r3, #4]
 8004d78:	431a      	orrs	r2, r3
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	685a      	ldr	r2, [r3, #4]
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004d8c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	6859      	ldr	r1, [r3, #4]
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	691b      	ldr	r3, [r3, #16]
 8004d98:	021a      	lsls	r2, r3, #8
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	430a      	orrs	r2, r1
 8004da0:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	685a      	ldr	r2, [r3, #4]
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8004db0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	6859      	ldr	r1, [r3, #4]
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	689a      	ldr	r2, [r3, #8]
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	430a      	orrs	r2, r1
 8004dc2:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	689a      	ldr	r2, [r3, #8]
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004dd2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	6899      	ldr	r1, [r3, #8]
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	68da      	ldr	r2, [r3, #12]
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	430a      	orrs	r2, r1
 8004de4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004dea:	4a58      	ldr	r2, [pc, #352]	@ (8004f4c <ADC_Init+0x1f4>)
 8004dec:	4293      	cmp	r3, r2
 8004dee:	d022      	beq.n	8004e36 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	689a      	ldr	r2, [r3, #8]
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004dfe:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	6899      	ldr	r1, [r3, #8]
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	430a      	orrs	r2, r1
 8004e10:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	689a      	ldr	r2, [r3, #8]
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8004e20:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	6899      	ldr	r1, [r3, #8]
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	430a      	orrs	r2, r1
 8004e32:	609a      	str	r2, [r3, #8]
 8004e34:	e00f      	b.n	8004e56 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	689a      	ldr	r2, [r3, #8]
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004e44:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	689a      	ldr	r2, [r3, #8]
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8004e54:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	689a      	ldr	r2, [r3, #8]
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	f022 0202 	bic.w	r2, r2, #2
 8004e64:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	6899      	ldr	r1, [r3, #8]
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	7e1b      	ldrb	r3, [r3, #24]
 8004e70:	005a      	lsls	r2, r3, #1
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	430a      	orrs	r2, r1
 8004e78:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d01b      	beq.n	8004ebc <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	685a      	ldr	r2, [r3, #4]
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004e92:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	685a      	ldr	r2, [r3, #4]
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8004ea2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	6859      	ldr	r1, [r3, #4]
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004eae:	3b01      	subs	r3, #1
 8004eb0:	035a      	lsls	r2, r3, #13
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	430a      	orrs	r2, r1
 8004eb8:	605a      	str	r2, [r3, #4]
 8004eba:	e007      	b.n	8004ecc <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	685a      	ldr	r2, [r3, #4]
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004eca:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8004eda:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	69db      	ldr	r3, [r3, #28]
 8004ee6:	3b01      	subs	r3, #1
 8004ee8:	051a      	lsls	r2, r3, #20
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	430a      	orrs	r2, r1
 8004ef0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	689a      	ldr	r2, [r3, #8]
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8004f00:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	6899      	ldr	r1, [r3, #8]
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8004f0e:	025a      	lsls	r2, r3, #9
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	430a      	orrs	r2, r1
 8004f16:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	689a      	ldr	r2, [r3, #8]
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004f26:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	6899      	ldr	r1, [r3, #8]
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	695b      	ldr	r3, [r3, #20]
 8004f32:	029a      	lsls	r2, r3, #10
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	430a      	orrs	r2, r1
 8004f3a:	609a      	str	r2, [r3, #8]
}
 8004f3c:	bf00      	nop
 8004f3e:	3714      	adds	r7, #20
 8004f40:	46bd      	mov	sp, r7
 8004f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f46:	4770      	bx	lr
 8004f48:	40012300 	.word	0x40012300
 8004f4c:	0f000001 	.word	0x0f000001

08004f50 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8004f50:	b580      	push	{r7, lr}
 8004f52:	b084      	sub	sp, #16
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d101      	bne.n	8004f62 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8004f5e:	2301      	movs	r3, #1
 8004f60:	e0ed      	b.n	800513e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004f68:	b2db      	uxtb	r3, r3
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d102      	bne.n	8004f74 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8004f6e:	6878      	ldr	r0, [r7, #4]
 8004f70:	f7fc fa6a 	bl	8001448 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	681a      	ldr	r2, [r3, #0]
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	f042 0201 	orr.w	r2, r2, #1
 8004f82:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004f84:	f7ff fba4 	bl	80046d0 <HAL_GetTick>
 8004f88:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8004f8a:	e012      	b.n	8004fb2 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004f8c:	f7ff fba0 	bl	80046d0 <HAL_GetTick>
 8004f90:	4602      	mov	r2, r0
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	1ad3      	subs	r3, r2, r3
 8004f96:	2b0a      	cmp	r3, #10
 8004f98:	d90b      	bls.n	8004fb2 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f9e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	2205      	movs	r2, #5
 8004faa:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8004fae:	2301      	movs	r3, #1
 8004fb0:	e0c5      	b.n	800513e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	685b      	ldr	r3, [r3, #4]
 8004fb8:	f003 0301 	and.w	r3, r3, #1
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d0e5      	beq.n	8004f8c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	681a      	ldr	r2, [r3, #0]
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	f022 0202 	bic.w	r2, r2, #2
 8004fce:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004fd0:	f7ff fb7e 	bl	80046d0 <HAL_GetTick>
 8004fd4:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8004fd6:	e012      	b.n	8004ffe <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004fd8:	f7ff fb7a 	bl	80046d0 <HAL_GetTick>
 8004fdc:	4602      	mov	r2, r0
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	1ad3      	subs	r3, r2, r3
 8004fe2:	2b0a      	cmp	r3, #10
 8004fe4:	d90b      	bls.n	8004ffe <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fea:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	2205      	movs	r2, #5
 8004ff6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8004ffa:	2301      	movs	r3, #1
 8004ffc:	e09f      	b.n	800513e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	685b      	ldr	r3, [r3, #4]
 8005004:	f003 0302 	and.w	r3, r3, #2
 8005008:	2b00      	cmp	r3, #0
 800500a:	d1e5      	bne.n	8004fd8 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	7e1b      	ldrb	r3, [r3, #24]
 8005010:	2b01      	cmp	r3, #1
 8005012:	d108      	bne.n	8005026 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	681a      	ldr	r2, [r3, #0]
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8005022:	601a      	str	r2, [r3, #0]
 8005024:	e007      	b.n	8005036 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	681a      	ldr	r2, [r3, #0]
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005034:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	7e5b      	ldrb	r3, [r3, #25]
 800503a:	2b01      	cmp	r3, #1
 800503c:	d108      	bne.n	8005050 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	681a      	ldr	r2, [r3, #0]
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800504c:	601a      	str	r2, [r3, #0]
 800504e:	e007      	b.n	8005060 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	681a      	ldr	r2, [r3, #0]
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800505e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	7e9b      	ldrb	r3, [r3, #26]
 8005064:	2b01      	cmp	r3, #1
 8005066:	d108      	bne.n	800507a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	681a      	ldr	r2, [r3, #0]
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	f042 0220 	orr.w	r2, r2, #32
 8005076:	601a      	str	r2, [r3, #0]
 8005078:	e007      	b.n	800508a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	681a      	ldr	r2, [r3, #0]
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	f022 0220 	bic.w	r2, r2, #32
 8005088:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	7edb      	ldrb	r3, [r3, #27]
 800508e:	2b01      	cmp	r3, #1
 8005090:	d108      	bne.n	80050a4 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	681a      	ldr	r2, [r3, #0]
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	f022 0210 	bic.w	r2, r2, #16
 80050a0:	601a      	str	r2, [r3, #0]
 80050a2:	e007      	b.n	80050b4 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	681a      	ldr	r2, [r3, #0]
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	f042 0210 	orr.w	r2, r2, #16
 80050b2:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	7f1b      	ldrb	r3, [r3, #28]
 80050b8:	2b01      	cmp	r3, #1
 80050ba:	d108      	bne.n	80050ce <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	681a      	ldr	r2, [r3, #0]
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	f042 0208 	orr.w	r2, r2, #8
 80050ca:	601a      	str	r2, [r3, #0]
 80050cc:	e007      	b.n	80050de <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	681a      	ldr	r2, [r3, #0]
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	f022 0208 	bic.w	r2, r2, #8
 80050dc:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	7f5b      	ldrb	r3, [r3, #29]
 80050e2:	2b01      	cmp	r3, #1
 80050e4:	d108      	bne.n	80050f8 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	681a      	ldr	r2, [r3, #0]
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	f042 0204 	orr.w	r2, r2, #4
 80050f4:	601a      	str	r2, [r3, #0]
 80050f6:	e007      	b.n	8005108 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	681a      	ldr	r2, [r3, #0]
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	f022 0204 	bic.w	r2, r2, #4
 8005106:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	689a      	ldr	r2, [r3, #8]
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	68db      	ldr	r3, [r3, #12]
 8005110:	431a      	orrs	r2, r3
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	691b      	ldr	r3, [r3, #16]
 8005116:	431a      	orrs	r2, r3
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	695b      	ldr	r3, [r3, #20]
 800511c:	ea42 0103 	orr.w	r1, r2, r3
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	685b      	ldr	r3, [r3, #4]
 8005124:	1e5a      	subs	r2, r3, #1
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	430a      	orrs	r2, r1
 800512c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	2200      	movs	r2, #0
 8005132:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	2201      	movs	r2, #1
 8005138:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800513c:	2300      	movs	r3, #0
}
 800513e:	4618      	mov	r0, r3
 8005140:	3710      	adds	r7, #16
 8005142:	46bd      	mov	sp, r7
 8005144:	bd80      	pop	{r7, pc}
	...

08005148 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8005148:	b480      	push	{r7}
 800514a:	b087      	sub	sp, #28
 800514c:	af00      	add	r7, sp, #0
 800514e:	6078      	str	r0, [r7, #4]
 8005150:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800515e:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8005160:	7cfb      	ldrb	r3, [r7, #19]
 8005162:	2b01      	cmp	r3, #1
 8005164:	d003      	beq.n	800516e <HAL_CAN_ConfigFilter+0x26>
 8005166:	7cfb      	ldrb	r3, [r7, #19]
 8005168:	2b02      	cmp	r3, #2
 800516a:	f040 80be 	bne.w	80052ea <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 800516e:	4b65      	ldr	r3, [pc, #404]	@ (8005304 <HAL_CAN_ConfigFilter+0x1bc>)
 8005170:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8005172:	697b      	ldr	r3, [r7, #20]
 8005174:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8005178:	f043 0201 	orr.w	r2, r3, #1
 800517c:	697b      	ldr	r3, [r7, #20]
 800517e:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8005182:	697b      	ldr	r3, [r7, #20]
 8005184:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8005188:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 800518c:	697b      	ldr	r3, [r7, #20]
 800518e:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8005192:	697b      	ldr	r3, [r7, #20]
 8005194:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8005198:	683b      	ldr	r3, [r7, #0]
 800519a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800519c:	021b      	lsls	r3, r3, #8
 800519e:	431a      	orrs	r2, r3
 80051a0:	697b      	ldr	r3, [r7, #20]
 80051a2:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80051a6:	683b      	ldr	r3, [r7, #0]
 80051a8:	695b      	ldr	r3, [r3, #20]
 80051aa:	f003 031f 	and.w	r3, r3, #31
 80051ae:	2201      	movs	r2, #1
 80051b0:	fa02 f303 	lsl.w	r3, r2, r3
 80051b4:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80051b6:	697b      	ldr	r3, [r7, #20]
 80051b8:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	43db      	mvns	r3, r3
 80051c0:	401a      	ands	r2, r3
 80051c2:	697b      	ldr	r3, [r7, #20]
 80051c4:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80051c8:	683b      	ldr	r3, [r7, #0]
 80051ca:	69db      	ldr	r3, [r3, #28]
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d123      	bne.n	8005218 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80051d0:	697b      	ldr	r3, [r7, #20]
 80051d2:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	43db      	mvns	r3, r3
 80051da:	401a      	ands	r2, r3
 80051dc:	697b      	ldr	r3, [r7, #20]
 80051de:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80051e2:	683b      	ldr	r3, [r7, #0]
 80051e4:	68db      	ldr	r3, [r3, #12]
 80051e6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80051e8:	683b      	ldr	r3, [r7, #0]
 80051ea:	685b      	ldr	r3, [r3, #4]
 80051ec:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80051ee:	683a      	ldr	r2, [r7, #0]
 80051f0:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80051f2:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80051f4:	697b      	ldr	r3, [r7, #20]
 80051f6:	3248      	adds	r2, #72	@ 0x48
 80051f8:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80051fc:	683b      	ldr	r3, [r7, #0]
 80051fe:	689b      	ldr	r3, [r3, #8]
 8005200:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8005202:	683b      	ldr	r3, [r7, #0]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8005208:	683b      	ldr	r3, [r7, #0]
 800520a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800520c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800520e:	6979      	ldr	r1, [r7, #20]
 8005210:	3348      	adds	r3, #72	@ 0x48
 8005212:	00db      	lsls	r3, r3, #3
 8005214:	440b      	add	r3, r1
 8005216:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8005218:	683b      	ldr	r3, [r7, #0]
 800521a:	69db      	ldr	r3, [r3, #28]
 800521c:	2b01      	cmp	r3, #1
 800521e:	d122      	bne.n	8005266 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8005220:	697b      	ldr	r3, [r7, #20]
 8005222:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	431a      	orrs	r2, r3
 800522a:	697b      	ldr	r3, [r7, #20]
 800522c:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8005230:	683b      	ldr	r3, [r7, #0]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8005236:	683b      	ldr	r3, [r7, #0]
 8005238:	685b      	ldr	r3, [r3, #4]
 800523a:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800523c:	683a      	ldr	r2, [r7, #0]
 800523e:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8005240:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8005242:	697b      	ldr	r3, [r7, #20]
 8005244:	3248      	adds	r2, #72	@ 0x48
 8005246:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800524a:	683b      	ldr	r3, [r7, #0]
 800524c:	689b      	ldr	r3, [r3, #8]
 800524e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8005250:	683b      	ldr	r3, [r7, #0]
 8005252:	68db      	ldr	r3, [r3, #12]
 8005254:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8005256:	683b      	ldr	r3, [r7, #0]
 8005258:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800525a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800525c:	6979      	ldr	r1, [r7, #20]
 800525e:	3348      	adds	r3, #72	@ 0x48
 8005260:	00db      	lsls	r3, r3, #3
 8005262:	440b      	add	r3, r1
 8005264:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8005266:	683b      	ldr	r3, [r7, #0]
 8005268:	699b      	ldr	r3, [r3, #24]
 800526a:	2b00      	cmp	r3, #0
 800526c:	d109      	bne.n	8005282 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800526e:	697b      	ldr	r3, [r7, #20]
 8005270:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	43db      	mvns	r3, r3
 8005278:	401a      	ands	r2, r3
 800527a:	697b      	ldr	r3, [r7, #20]
 800527c:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8005280:	e007      	b.n	8005292 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8005282:	697b      	ldr	r3, [r7, #20]
 8005284:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	431a      	orrs	r2, r3
 800528c:	697b      	ldr	r3, [r7, #20]
 800528e:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8005292:	683b      	ldr	r3, [r7, #0]
 8005294:	691b      	ldr	r3, [r3, #16]
 8005296:	2b00      	cmp	r3, #0
 8005298:	d109      	bne.n	80052ae <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800529a:	697b      	ldr	r3, [r7, #20]
 800529c:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	43db      	mvns	r3, r3
 80052a4:	401a      	ands	r2, r3
 80052a6:	697b      	ldr	r3, [r7, #20]
 80052a8:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 80052ac:	e007      	b.n	80052be <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80052ae:	697b      	ldr	r3, [r7, #20]
 80052b0:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	431a      	orrs	r2, r3
 80052b8:	697b      	ldr	r3, [r7, #20]
 80052ba:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80052be:	683b      	ldr	r3, [r7, #0]
 80052c0:	6a1b      	ldr	r3, [r3, #32]
 80052c2:	2b01      	cmp	r3, #1
 80052c4:	d107      	bne.n	80052d6 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80052c6:	697b      	ldr	r3, [r7, #20]
 80052c8:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	431a      	orrs	r2, r3
 80052d0:	697b      	ldr	r3, [r7, #20]
 80052d2:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80052d6:	697b      	ldr	r3, [r7, #20]
 80052d8:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80052dc:	f023 0201 	bic.w	r2, r3, #1
 80052e0:	697b      	ldr	r3, [r7, #20]
 80052e2:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 80052e6:	2300      	movs	r3, #0
 80052e8:	e006      	b.n	80052f8 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052ee:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80052f6:	2301      	movs	r3, #1
  }
}
 80052f8:	4618      	mov	r0, r3
 80052fa:	371c      	adds	r7, #28
 80052fc:	46bd      	mov	sp, r7
 80052fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005302:	4770      	bx	lr
 8005304:	40006400 	.word	0x40006400

08005308 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8005308:	b580      	push	{r7, lr}
 800530a:	b084      	sub	sp, #16
 800530c:	af00      	add	r7, sp, #0
 800530e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005316:	b2db      	uxtb	r3, r3
 8005318:	2b01      	cmp	r3, #1
 800531a:	d12e      	bne.n	800537a <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	2202      	movs	r2, #2
 8005320:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	681a      	ldr	r2, [r3, #0]
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	f022 0201 	bic.w	r2, r2, #1
 8005332:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005334:	f7ff f9cc 	bl	80046d0 <HAL_GetTick>
 8005338:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800533a:	e012      	b.n	8005362 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800533c:	f7ff f9c8 	bl	80046d0 <HAL_GetTick>
 8005340:	4602      	mov	r2, r0
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	1ad3      	subs	r3, r2, r3
 8005346:	2b0a      	cmp	r3, #10
 8005348:	d90b      	bls.n	8005362 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800534e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	2205      	movs	r2, #5
 800535a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800535e:	2301      	movs	r3, #1
 8005360:	e012      	b.n	8005388 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	685b      	ldr	r3, [r3, #4]
 8005368:	f003 0301 	and.w	r3, r3, #1
 800536c:	2b00      	cmp	r3, #0
 800536e:	d1e5      	bne.n	800533c <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	2200      	movs	r2, #0
 8005374:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8005376:	2300      	movs	r3, #0
 8005378:	e006      	b.n	8005388 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800537e:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8005386:	2301      	movs	r3, #1
  }
}
 8005388:	4618      	mov	r0, r3
 800538a:	3710      	adds	r7, #16
 800538c:	46bd      	mov	sp, r7
 800538e:	bd80      	pop	{r7, pc}

08005390 <HAL_CAN_Stop>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Stop(CAN_HandleTypeDef *hcan)
{
 8005390:	b580      	push	{r7, lr}
 8005392:	b084      	sub	sp, #16
 8005394:	af00      	add	r7, sp, #0
 8005396:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_LISTENING)
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800539e:	b2db      	uxtb	r3, r3
 80053a0:	2b02      	cmp	r3, #2
 80053a2:	d133      	bne.n	800540c <HAL_CAN_Stop+0x7c>
  {
    /* Request initialisation */
    SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	681a      	ldr	r2, [r3, #0]
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	f042 0201 	orr.w	r2, r2, #1
 80053b2:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80053b4:	f7ff f98c 	bl	80046d0 <HAL_GetTick>
 80053b8:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80053ba:	e012      	b.n	80053e2 <HAL_CAN_Stop+0x52>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80053bc:	f7ff f988 	bl	80046d0 <HAL_GetTick>
 80053c0:	4602      	mov	r2, r0
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	1ad3      	subs	r3, r2, r3
 80053c6:	2b0a      	cmp	r3, #10
 80053c8:	d90b      	bls.n	80053e2 <HAL_CAN_Stop+0x52>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053ce:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	2205      	movs	r2, #5
 80053da:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80053de:	2301      	movs	r3, #1
 80053e0:	e01b      	b.n	800541a <HAL_CAN_Stop+0x8a>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	685b      	ldr	r3, [r3, #4]
 80053e8:	f003 0301 	and.w	r3, r3, #1
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d0e5      	beq.n	80053bc <HAL_CAN_Stop+0x2c>
      }
    }

    /* Exit from sleep mode */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	681a      	ldr	r2, [r3, #0]
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	f022 0202 	bic.w	r2, r2, #2
 80053fe:	601a      	str	r2, [r3, #0]

    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_READY;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	2201      	movs	r2, #1
 8005404:	f883 2020 	strb.w	r2, [r3, #32]

    /* Return function status */
    return HAL_OK;
 8005408:	2300      	movs	r3, #0
 800540a:	e006      	b.n	800541a <HAL_CAN_Stop+0x8a>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_STARTED;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005410:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8005418:	2301      	movs	r3, #1
  }
}
 800541a:	4618      	mov	r0, r3
 800541c:	3710      	adds	r7, #16
 800541e:	46bd      	mov	sp, r7
 8005420:	bd80      	pop	{r7, pc}

08005422 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8005422:	b480      	push	{r7}
 8005424:	b089      	sub	sp, #36	@ 0x24
 8005426:	af00      	add	r7, sp, #0
 8005428:	60f8      	str	r0, [r7, #12]
 800542a:	60b9      	str	r1, [r7, #8]
 800542c:	607a      	str	r2, [r7, #4]
 800542e:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005436:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	689b      	ldr	r3, [r3, #8]
 800543e:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8005440:	7ffb      	ldrb	r3, [r7, #31]
 8005442:	2b01      	cmp	r3, #1
 8005444:	d003      	beq.n	800544e <HAL_CAN_AddTxMessage+0x2c>
 8005446:	7ffb      	ldrb	r3, [r7, #31]
 8005448:	2b02      	cmp	r3, #2
 800544a:	f040 80ad 	bne.w	80055a8 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800544e:	69bb      	ldr	r3, [r7, #24]
 8005450:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005454:	2b00      	cmp	r3, #0
 8005456:	d10a      	bne.n	800546e <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8005458:	69bb      	ldr	r3, [r7, #24]
 800545a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800545e:	2b00      	cmp	r3, #0
 8005460:	d105      	bne.n	800546e <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8005462:	69bb      	ldr	r3, [r7, #24]
 8005464:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8005468:	2b00      	cmp	r3, #0
 800546a:	f000 8095 	beq.w	8005598 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 800546e:	69bb      	ldr	r3, [r7, #24]
 8005470:	0e1b      	lsrs	r3, r3, #24
 8005472:	f003 0303 	and.w	r3, r3, #3
 8005476:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8005478:	2201      	movs	r2, #1
 800547a:	697b      	ldr	r3, [r7, #20]
 800547c:	409a      	lsls	r2, r3
 800547e:	683b      	ldr	r3, [r7, #0]
 8005480:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8005482:	68bb      	ldr	r3, [r7, #8]
 8005484:	689b      	ldr	r3, [r3, #8]
 8005486:	2b00      	cmp	r3, #0
 8005488:	d10d      	bne.n	80054a6 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800548a:	68bb      	ldr	r3, [r7, #8]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8005490:	68bb      	ldr	r3, [r7, #8]
 8005492:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8005494:	68f9      	ldr	r1, [r7, #12]
 8005496:	6809      	ldr	r1, [r1, #0]
 8005498:	431a      	orrs	r2, r3
 800549a:	697b      	ldr	r3, [r7, #20]
 800549c:	3318      	adds	r3, #24
 800549e:	011b      	lsls	r3, r3, #4
 80054a0:	440b      	add	r3, r1
 80054a2:	601a      	str	r2, [r3, #0]
 80054a4:	e00f      	b.n	80054c6 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80054a6:	68bb      	ldr	r3, [r7, #8]
 80054a8:	685b      	ldr	r3, [r3, #4]
 80054aa:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80054ac:	68bb      	ldr	r3, [r7, #8]
 80054ae:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80054b0:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80054b2:	68bb      	ldr	r3, [r7, #8]
 80054b4:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80054b6:	68f9      	ldr	r1, [r7, #12]
 80054b8:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80054ba:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80054bc:	697b      	ldr	r3, [r7, #20]
 80054be:	3318      	adds	r3, #24
 80054c0:	011b      	lsls	r3, r3, #4
 80054c2:	440b      	add	r3, r1
 80054c4:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	6819      	ldr	r1, [r3, #0]
 80054ca:	68bb      	ldr	r3, [r7, #8]
 80054cc:	691a      	ldr	r2, [r3, #16]
 80054ce:	697b      	ldr	r3, [r7, #20]
 80054d0:	3318      	adds	r3, #24
 80054d2:	011b      	lsls	r3, r3, #4
 80054d4:	440b      	add	r3, r1
 80054d6:	3304      	adds	r3, #4
 80054d8:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80054da:	68bb      	ldr	r3, [r7, #8]
 80054dc:	7d1b      	ldrb	r3, [r3, #20]
 80054de:	2b01      	cmp	r3, #1
 80054e0:	d111      	bne.n	8005506 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	681a      	ldr	r2, [r3, #0]
 80054e6:	697b      	ldr	r3, [r7, #20]
 80054e8:	3318      	adds	r3, #24
 80054ea:	011b      	lsls	r3, r3, #4
 80054ec:	4413      	add	r3, r2
 80054ee:	3304      	adds	r3, #4
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	68fa      	ldr	r2, [r7, #12]
 80054f4:	6811      	ldr	r1, [r2, #0]
 80054f6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80054fa:	697b      	ldr	r3, [r7, #20]
 80054fc:	3318      	adds	r3, #24
 80054fe:	011b      	lsls	r3, r3, #4
 8005500:	440b      	add	r3, r1
 8005502:	3304      	adds	r3, #4
 8005504:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	3307      	adds	r3, #7
 800550a:	781b      	ldrb	r3, [r3, #0]
 800550c:	061a      	lsls	r2, r3, #24
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	3306      	adds	r3, #6
 8005512:	781b      	ldrb	r3, [r3, #0]
 8005514:	041b      	lsls	r3, r3, #16
 8005516:	431a      	orrs	r2, r3
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	3305      	adds	r3, #5
 800551c:	781b      	ldrb	r3, [r3, #0]
 800551e:	021b      	lsls	r3, r3, #8
 8005520:	4313      	orrs	r3, r2
 8005522:	687a      	ldr	r2, [r7, #4]
 8005524:	3204      	adds	r2, #4
 8005526:	7812      	ldrb	r2, [r2, #0]
 8005528:	4610      	mov	r0, r2
 800552a:	68fa      	ldr	r2, [r7, #12]
 800552c:	6811      	ldr	r1, [r2, #0]
 800552e:	ea43 0200 	orr.w	r2, r3, r0
 8005532:	697b      	ldr	r3, [r7, #20]
 8005534:	011b      	lsls	r3, r3, #4
 8005536:	440b      	add	r3, r1
 8005538:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 800553c:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	3303      	adds	r3, #3
 8005542:	781b      	ldrb	r3, [r3, #0]
 8005544:	061a      	lsls	r2, r3, #24
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	3302      	adds	r3, #2
 800554a:	781b      	ldrb	r3, [r3, #0]
 800554c:	041b      	lsls	r3, r3, #16
 800554e:	431a      	orrs	r2, r3
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	3301      	adds	r3, #1
 8005554:	781b      	ldrb	r3, [r3, #0]
 8005556:	021b      	lsls	r3, r3, #8
 8005558:	4313      	orrs	r3, r2
 800555a:	687a      	ldr	r2, [r7, #4]
 800555c:	7812      	ldrb	r2, [r2, #0]
 800555e:	4610      	mov	r0, r2
 8005560:	68fa      	ldr	r2, [r7, #12]
 8005562:	6811      	ldr	r1, [r2, #0]
 8005564:	ea43 0200 	orr.w	r2, r3, r0
 8005568:	697b      	ldr	r3, [r7, #20]
 800556a:	011b      	lsls	r3, r3, #4
 800556c:	440b      	add	r3, r1
 800556e:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8005572:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	681a      	ldr	r2, [r3, #0]
 8005578:	697b      	ldr	r3, [r7, #20]
 800557a:	3318      	adds	r3, #24
 800557c:	011b      	lsls	r3, r3, #4
 800557e:	4413      	add	r3, r2
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	68fa      	ldr	r2, [r7, #12]
 8005584:	6811      	ldr	r1, [r2, #0]
 8005586:	f043 0201 	orr.w	r2, r3, #1
 800558a:	697b      	ldr	r3, [r7, #20]
 800558c:	3318      	adds	r3, #24
 800558e:	011b      	lsls	r3, r3, #4
 8005590:	440b      	add	r3, r1
 8005592:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8005594:	2300      	movs	r3, #0
 8005596:	e00e      	b.n	80055b6 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800559c:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 80055a4:	2301      	movs	r3, #1
 80055a6:	e006      	b.n	80055b6 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055ac:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80055b4:	2301      	movs	r3, #1
  }
}
 80055b6:	4618      	mov	r0, r3
 80055b8:	3724      	adds	r7, #36	@ 0x24
 80055ba:	46bd      	mov	sp, r7
 80055bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c0:	4770      	bx	lr

080055c2 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80055c2:	b480      	push	{r7}
 80055c4:	b087      	sub	sp, #28
 80055c6:	af00      	add	r7, sp, #0
 80055c8:	60f8      	str	r0, [r7, #12]
 80055ca:	60b9      	str	r1, [r7, #8]
 80055cc:	607a      	str	r2, [r7, #4]
 80055ce:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80055d6:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80055d8:	7dfb      	ldrb	r3, [r7, #23]
 80055da:	2b01      	cmp	r3, #1
 80055dc:	d003      	beq.n	80055e6 <HAL_CAN_GetRxMessage+0x24>
 80055de:	7dfb      	ldrb	r3, [r7, #23]
 80055e0:	2b02      	cmp	r3, #2
 80055e2:	f040 8103 	bne.w	80057ec <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80055e6:	68bb      	ldr	r3, [r7, #8]
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d10e      	bne.n	800560a <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	68db      	ldr	r3, [r3, #12]
 80055f2:	f003 0303 	and.w	r3, r3, #3
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d116      	bne.n	8005628 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055fe:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8005606:	2301      	movs	r3, #1
 8005608:	e0f7      	b.n	80057fa <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	691b      	ldr	r3, [r3, #16]
 8005610:	f003 0303 	and.w	r3, r3, #3
 8005614:	2b00      	cmp	r3, #0
 8005616:	d107      	bne.n	8005628 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800561c:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8005624:	2301      	movs	r3, #1
 8005626:	e0e8      	b.n	80057fa <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	681a      	ldr	r2, [r3, #0]
 800562c:	68bb      	ldr	r3, [r7, #8]
 800562e:	331b      	adds	r3, #27
 8005630:	011b      	lsls	r3, r3, #4
 8005632:	4413      	add	r3, r2
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	f003 0204 	and.w	r2, r3, #4
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	689b      	ldr	r3, [r3, #8]
 8005642:	2b00      	cmp	r3, #0
 8005644:	d10c      	bne.n	8005660 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	681a      	ldr	r2, [r3, #0]
 800564a:	68bb      	ldr	r3, [r7, #8]
 800564c:	331b      	adds	r3, #27
 800564e:	011b      	lsls	r3, r3, #4
 8005650:	4413      	add	r3, r2
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	0d5b      	lsrs	r3, r3, #21
 8005656:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	601a      	str	r2, [r3, #0]
 800565e:	e00b      	b.n	8005678 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	681a      	ldr	r2, [r3, #0]
 8005664:	68bb      	ldr	r3, [r7, #8]
 8005666:	331b      	adds	r3, #27
 8005668:	011b      	lsls	r3, r3, #4
 800566a:	4413      	add	r3, r2
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	08db      	lsrs	r3, r3, #3
 8005670:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	681a      	ldr	r2, [r3, #0]
 800567c:	68bb      	ldr	r3, [r7, #8]
 800567e:	331b      	adds	r3, #27
 8005680:	011b      	lsls	r3, r3, #4
 8005682:	4413      	add	r3, r2
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	f003 0202 	and.w	r2, r3, #2
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	681a      	ldr	r2, [r3, #0]
 8005692:	68bb      	ldr	r3, [r7, #8]
 8005694:	331b      	adds	r3, #27
 8005696:	011b      	lsls	r3, r3, #4
 8005698:	4413      	add	r3, r2
 800569a:	3304      	adds	r3, #4
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	f003 0308 	and.w	r3, r3, #8
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d003      	beq.n	80056ae <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	2208      	movs	r2, #8
 80056aa:	611a      	str	r2, [r3, #16]
 80056ac:	e00b      	b.n	80056c6 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	681a      	ldr	r2, [r3, #0]
 80056b2:	68bb      	ldr	r3, [r7, #8]
 80056b4:	331b      	adds	r3, #27
 80056b6:	011b      	lsls	r3, r3, #4
 80056b8:	4413      	add	r3, r2
 80056ba:	3304      	adds	r3, #4
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	f003 020f 	and.w	r2, r3, #15
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	681a      	ldr	r2, [r3, #0]
 80056ca:	68bb      	ldr	r3, [r7, #8]
 80056cc:	331b      	adds	r3, #27
 80056ce:	011b      	lsls	r3, r3, #4
 80056d0:	4413      	add	r3, r2
 80056d2:	3304      	adds	r3, #4
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	0a1b      	lsrs	r3, r3, #8
 80056d8:	b2da      	uxtb	r2, r3
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	681a      	ldr	r2, [r3, #0]
 80056e2:	68bb      	ldr	r3, [r7, #8]
 80056e4:	331b      	adds	r3, #27
 80056e6:	011b      	lsls	r3, r3, #4
 80056e8:	4413      	add	r3, r2
 80056ea:	3304      	adds	r3, #4
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	0c1b      	lsrs	r3, r3, #16
 80056f0:	b29a      	uxth	r2, r3
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	681a      	ldr	r2, [r3, #0]
 80056fa:	68bb      	ldr	r3, [r7, #8]
 80056fc:	011b      	lsls	r3, r3, #4
 80056fe:	4413      	add	r3, r2
 8005700:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	b2da      	uxtb	r2, r3
 8005708:	683b      	ldr	r3, [r7, #0]
 800570a:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	681a      	ldr	r2, [r3, #0]
 8005710:	68bb      	ldr	r3, [r7, #8]
 8005712:	011b      	lsls	r3, r3, #4
 8005714:	4413      	add	r3, r2
 8005716:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	0a1a      	lsrs	r2, r3, #8
 800571e:	683b      	ldr	r3, [r7, #0]
 8005720:	3301      	adds	r3, #1
 8005722:	b2d2      	uxtb	r2, r2
 8005724:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	681a      	ldr	r2, [r3, #0]
 800572a:	68bb      	ldr	r3, [r7, #8]
 800572c:	011b      	lsls	r3, r3, #4
 800572e:	4413      	add	r3, r2
 8005730:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	0c1a      	lsrs	r2, r3, #16
 8005738:	683b      	ldr	r3, [r7, #0]
 800573a:	3302      	adds	r3, #2
 800573c:	b2d2      	uxtb	r2, r2
 800573e:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	681a      	ldr	r2, [r3, #0]
 8005744:	68bb      	ldr	r3, [r7, #8]
 8005746:	011b      	lsls	r3, r3, #4
 8005748:	4413      	add	r3, r2
 800574a:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	0e1a      	lsrs	r2, r3, #24
 8005752:	683b      	ldr	r3, [r7, #0]
 8005754:	3303      	adds	r3, #3
 8005756:	b2d2      	uxtb	r2, r2
 8005758:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	681a      	ldr	r2, [r3, #0]
 800575e:	68bb      	ldr	r3, [r7, #8]
 8005760:	011b      	lsls	r3, r3, #4
 8005762:	4413      	add	r3, r2
 8005764:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8005768:	681a      	ldr	r2, [r3, #0]
 800576a:	683b      	ldr	r3, [r7, #0]
 800576c:	3304      	adds	r3, #4
 800576e:	b2d2      	uxtb	r2, r2
 8005770:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	681a      	ldr	r2, [r3, #0]
 8005776:	68bb      	ldr	r3, [r7, #8]
 8005778:	011b      	lsls	r3, r3, #4
 800577a:	4413      	add	r3, r2
 800577c:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	0a1a      	lsrs	r2, r3, #8
 8005784:	683b      	ldr	r3, [r7, #0]
 8005786:	3305      	adds	r3, #5
 8005788:	b2d2      	uxtb	r2, r2
 800578a:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	681a      	ldr	r2, [r3, #0]
 8005790:	68bb      	ldr	r3, [r7, #8]
 8005792:	011b      	lsls	r3, r3, #4
 8005794:	4413      	add	r3, r2
 8005796:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	0c1a      	lsrs	r2, r3, #16
 800579e:	683b      	ldr	r3, [r7, #0]
 80057a0:	3306      	adds	r3, #6
 80057a2:	b2d2      	uxtb	r2, r2
 80057a4:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	681a      	ldr	r2, [r3, #0]
 80057aa:	68bb      	ldr	r3, [r7, #8]
 80057ac:	011b      	lsls	r3, r3, #4
 80057ae:	4413      	add	r3, r2
 80057b0:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	0e1a      	lsrs	r2, r3, #24
 80057b8:	683b      	ldr	r3, [r7, #0]
 80057ba:	3307      	adds	r3, #7
 80057bc:	b2d2      	uxtb	r2, r2
 80057be:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80057c0:	68bb      	ldr	r3, [r7, #8]
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d108      	bne.n	80057d8 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	68da      	ldr	r2, [r3, #12]
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	f042 0220 	orr.w	r2, r2, #32
 80057d4:	60da      	str	r2, [r3, #12]
 80057d6:	e007      	b.n	80057e8 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	691a      	ldr	r2, [r3, #16]
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	f042 0220 	orr.w	r2, r2, #32
 80057e6:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80057e8:	2300      	movs	r3, #0
 80057ea:	e006      	b.n	80057fa <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057f0:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80057f8:	2301      	movs	r3, #1
  }
}
 80057fa:	4618      	mov	r0, r3
 80057fc:	371c      	adds	r7, #28
 80057fe:	46bd      	mov	sp, r7
 8005800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005804:	4770      	bx	lr

08005806 <HAL_CAN_GetRxFifoFillLevel>:
  * @param  RxFifo Rx FIFO.
  *         This parameter can be a value of @arg CAN_receive_FIFO_number.
  * @retval Number of messages available in Rx FIFO.
  */
uint32_t HAL_CAN_GetRxFifoFillLevel(const CAN_HandleTypeDef *hcan, uint32_t RxFifo)
{
 8005806:	b480      	push	{r7}
 8005808:	b085      	sub	sp, #20
 800580a:	af00      	add	r7, sp, #0
 800580c:	6078      	str	r0, [r7, #4]
 800580e:	6039      	str	r1, [r7, #0]
  uint32_t filllevel = 0U;
 8005810:	2300      	movs	r3, #0
 8005812:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	f893 3020 	ldrb.w	r3, [r3, #32]
 800581a:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800581c:	7afb      	ldrb	r3, [r7, #11]
 800581e:	2b01      	cmp	r3, #1
 8005820:	d002      	beq.n	8005828 <HAL_CAN_GetRxFifoFillLevel+0x22>
 8005822:	7afb      	ldrb	r3, [r7, #11]
 8005824:	2b02      	cmp	r3, #2
 8005826:	d10f      	bne.n	8005848 <HAL_CAN_GetRxFifoFillLevel+0x42>
      (state == HAL_CAN_STATE_LISTENING))
  {
    if (RxFifo == CAN_RX_FIFO0)
 8005828:	683b      	ldr	r3, [r7, #0]
 800582a:	2b00      	cmp	r3, #0
 800582c:	d106      	bne.n	800583c <HAL_CAN_GetRxFifoFillLevel+0x36>
    {
      filllevel = hcan->Instance->RF0R & CAN_RF0R_FMP0;
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	68db      	ldr	r3, [r3, #12]
 8005834:	f003 0303 	and.w	r3, r3, #3
 8005838:	60fb      	str	r3, [r7, #12]
 800583a:	e005      	b.n	8005848 <HAL_CAN_GetRxFifoFillLevel+0x42>
    }
    else /* RxFifo == CAN_RX_FIFO1 */
    {
      filllevel = hcan->Instance->RF1R & CAN_RF1R_FMP1;
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	691b      	ldr	r3, [r3, #16]
 8005842:	f003 0303 	and.w	r3, r3, #3
 8005846:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Rx FIFO fill level */
  return filllevel;
 8005848:	68fb      	ldr	r3, [r7, #12]
}
 800584a:	4618      	mov	r0, r3
 800584c:	3714      	adds	r7, #20
 800584e:	46bd      	mov	sp, r7
 8005850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005854:	4770      	bx	lr

08005856 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8005856:	b580      	push	{r7, lr}
 8005858:	b08a      	sub	sp, #40	@ 0x28
 800585a:	af00      	add	r7, sp, #0
 800585c:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800585e:	2300      	movs	r3, #0
 8005860:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	695b      	ldr	r3, [r3, #20]
 8005868:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	685b      	ldr	r3, [r3, #4]
 8005870:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	689b      	ldr	r3, [r3, #8]
 8005878:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	68db      	ldr	r3, [r3, #12]
 8005880:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	691b      	ldr	r3, [r3, #16]
 8005888:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	699b      	ldr	r3, [r3, #24]
 8005890:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8005892:	6a3b      	ldr	r3, [r7, #32]
 8005894:	f003 0301 	and.w	r3, r3, #1
 8005898:	2b00      	cmp	r3, #0
 800589a:	d07c      	beq.n	8005996 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800589c:	69bb      	ldr	r3, [r7, #24]
 800589e:	f003 0301 	and.w	r3, r3, #1
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d023      	beq.n	80058ee <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	2201      	movs	r2, #1
 80058ac:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80058ae:	69bb      	ldr	r3, [r7, #24]
 80058b0:	f003 0302 	and.w	r3, r3, #2
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d003      	beq.n	80058c0 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80058b8:	6878      	ldr	r0, [r7, #4]
 80058ba:	f000 f983 	bl	8005bc4 <HAL_CAN_TxMailbox0CompleteCallback>
 80058be:	e016      	b.n	80058ee <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80058c0:	69bb      	ldr	r3, [r7, #24]
 80058c2:	f003 0304 	and.w	r3, r3, #4
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d004      	beq.n	80058d4 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80058ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058cc:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80058d0:	627b      	str	r3, [r7, #36]	@ 0x24
 80058d2:	e00c      	b.n	80058ee <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80058d4:	69bb      	ldr	r3, [r7, #24]
 80058d6:	f003 0308 	and.w	r3, r3, #8
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d004      	beq.n	80058e8 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80058de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058e0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80058e4:	627b      	str	r3, [r7, #36]	@ 0x24
 80058e6:	e002      	b.n	80058ee <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80058e8:	6878      	ldr	r0, [r7, #4]
 80058ea:	f000 f989 	bl	8005c00 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80058ee:	69bb      	ldr	r3, [r7, #24]
 80058f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d024      	beq.n	8005942 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005900:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8005902:	69bb      	ldr	r3, [r7, #24]
 8005904:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005908:	2b00      	cmp	r3, #0
 800590a:	d003      	beq.n	8005914 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800590c:	6878      	ldr	r0, [r7, #4]
 800590e:	f000 f963 	bl	8005bd8 <HAL_CAN_TxMailbox1CompleteCallback>
 8005912:	e016      	b.n	8005942 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8005914:	69bb      	ldr	r3, [r7, #24]
 8005916:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800591a:	2b00      	cmp	r3, #0
 800591c:	d004      	beq.n	8005928 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800591e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005920:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8005924:	627b      	str	r3, [r7, #36]	@ 0x24
 8005926:	e00c      	b.n	8005942 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8005928:	69bb      	ldr	r3, [r7, #24]
 800592a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800592e:	2b00      	cmp	r3, #0
 8005930:	d004      	beq.n	800593c <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8005932:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005934:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005938:	627b      	str	r3, [r7, #36]	@ 0x24
 800593a:	e002      	b.n	8005942 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800593c:	6878      	ldr	r0, [r7, #4]
 800593e:	f000 f969 	bl	8005c14 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8005942:	69bb      	ldr	r3, [r7, #24]
 8005944:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005948:	2b00      	cmp	r3, #0
 800594a:	d024      	beq.n	8005996 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8005954:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8005956:	69bb      	ldr	r3, [r7, #24]
 8005958:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800595c:	2b00      	cmp	r3, #0
 800595e:	d003      	beq.n	8005968 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8005960:	6878      	ldr	r0, [r7, #4]
 8005962:	f000 f943 	bl	8005bec <HAL_CAN_TxMailbox2CompleteCallback>
 8005966:	e016      	b.n	8005996 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8005968:	69bb      	ldr	r3, [r7, #24]
 800596a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800596e:	2b00      	cmp	r3, #0
 8005970:	d004      	beq.n	800597c <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8005972:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005974:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005978:	627b      	str	r3, [r7, #36]	@ 0x24
 800597a:	e00c      	b.n	8005996 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800597c:	69bb      	ldr	r3, [r7, #24]
 800597e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005982:	2b00      	cmp	r3, #0
 8005984:	d004      	beq.n	8005990 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8005986:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005988:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800598c:	627b      	str	r3, [r7, #36]	@ 0x24
 800598e:	e002      	b.n	8005996 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8005990:	6878      	ldr	r0, [r7, #4]
 8005992:	f000 f949 	bl	8005c28 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8005996:	6a3b      	ldr	r3, [r7, #32]
 8005998:	f003 0308 	and.w	r3, r3, #8
 800599c:	2b00      	cmp	r3, #0
 800599e:	d00c      	beq.n	80059ba <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80059a0:	697b      	ldr	r3, [r7, #20]
 80059a2:	f003 0310 	and.w	r3, r3, #16
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d007      	beq.n	80059ba <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80059aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059ac:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80059b0:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	2210      	movs	r2, #16
 80059b8:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80059ba:	6a3b      	ldr	r3, [r7, #32]
 80059bc:	f003 0304 	and.w	r3, r3, #4
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d00b      	beq.n	80059dc <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80059c4:	697b      	ldr	r3, [r7, #20]
 80059c6:	f003 0308 	and.w	r3, r3, #8
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d006      	beq.n	80059dc <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	2208      	movs	r2, #8
 80059d4:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80059d6:	6878      	ldr	r0, [r7, #4]
 80059d8:	f000 f93a 	bl	8005c50 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80059dc:	6a3b      	ldr	r3, [r7, #32]
 80059de:	f003 0302 	and.w	r3, r3, #2
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d009      	beq.n	80059fa <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	68db      	ldr	r3, [r3, #12]
 80059ec:	f003 0303 	and.w	r3, r3, #3
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d002      	beq.n	80059fa <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80059f4:	6878      	ldr	r0, [r7, #4]
 80059f6:	f000 f921 	bl	8005c3c <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80059fa:	6a3b      	ldr	r3, [r7, #32]
 80059fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d00c      	beq.n	8005a1e <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8005a04:	693b      	ldr	r3, [r7, #16]
 8005a06:	f003 0310 	and.w	r3, r3, #16
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d007      	beq.n	8005a1e <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8005a0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a10:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005a14:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	2210      	movs	r2, #16
 8005a1c:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8005a1e:	6a3b      	ldr	r3, [r7, #32]
 8005a20:	f003 0320 	and.w	r3, r3, #32
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d00b      	beq.n	8005a40 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8005a28:	693b      	ldr	r3, [r7, #16]
 8005a2a:	f003 0308 	and.w	r3, r3, #8
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d006      	beq.n	8005a40 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	2208      	movs	r2, #8
 8005a38:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8005a3a:	6878      	ldr	r0, [r7, #4]
 8005a3c:	f000 f91c 	bl	8005c78 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8005a40:	6a3b      	ldr	r3, [r7, #32]
 8005a42:	f003 0310 	and.w	r3, r3, #16
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d009      	beq.n	8005a5e <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	691b      	ldr	r3, [r3, #16]
 8005a50:	f003 0303 	and.w	r3, r3, #3
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d002      	beq.n	8005a5e <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8005a58:	6878      	ldr	r0, [r7, #4]
 8005a5a:	f000 f903 	bl	8005c64 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8005a5e:	6a3b      	ldr	r3, [r7, #32]
 8005a60:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d00b      	beq.n	8005a80 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8005a68:	69fb      	ldr	r3, [r7, #28]
 8005a6a:	f003 0310 	and.w	r3, r3, #16
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d006      	beq.n	8005a80 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	2210      	movs	r2, #16
 8005a78:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8005a7a:	6878      	ldr	r0, [r7, #4]
 8005a7c:	f000 f906 	bl	8005c8c <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8005a80:	6a3b      	ldr	r3, [r7, #32]
 8005a82:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d00b      	beq.n	8005aa2 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8005a8a:	69fb      	ldr	r3, [r7, #28]
 8005a8c:	f003 0308 	and.w	r3, r3, #8
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d006      	beq.n	8005aa2 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	2208      	movs	r2, #8
 8005a9a:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8005a9c:	6878      	ldr	r0, [r7, #4]
 8005a9e:	f000 f8ff 	bl	8005ca0 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8005aa2:	6a3b      	ldr	r3, [r7, #32]
 8005aa4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d07b      	beq.n	8005ba4 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8005aac:	69fb      	ldr	r3, [r7, #28]
 8005aae:	f003 0304 	and.w	r3, r3, #4
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d072      	beq.n	8005b9c <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8005ab6:	6a3b      	ldr	r3, [r7, #32]
 8005ab8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d008      	beq.n	8005ad2 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d003      	beq.n	8005ad2 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8005aca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005acc:	f043 0301 	orr.w	r3, r3, #1
 8005ad0:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8005ad2:	6a3b      	ldr	r3, [r7, #32]
 8005ad4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d008      	beq.n	8005aee <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d003      	beq.n	8005aee <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8005ae6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ae8:	f043 0302 	orr.w	r3, r3, #2
 8005aec:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8005aee:	6a3b      	ldr	r3, [r7, #32]
 8005af0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d008      	beq.n	8005b0a <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d003      	beq.n	8005b0a <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8005b02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b04:	f043 0304 	orr.w	r3, r3, #4
 8005b08:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8005b0a:	6a3b      	ldr	r3, [r7, #32]
 8005b0c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d043      	beq.n	8005b9c <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d03e      	beq.n	8005b9c <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005b24:	2b60      	cmp	r3, #96	@ 0x60
 8005b26:	d02b      	beq.n	8005b80 <HAL_CAN_IRQHandler+0x32a>
 8005b28:	2b60      	cmp	r3, #96	@ 0x60
 8005b2a:	d82e      	bhi.n	8005b8a <HAL_CAN_IRQHandler+0x334>
 8005b2c:	2b50      	cmp	r3, #80	@ 0x50
 8005b2e:	d022      	beq.n	8005b76 <HAL_CAN_IRQHandler+0x320>
 8005b30:	2b50      	cmp	r3, #80	@ 0x50
 8005b32:	d82a      	bhi.n	8005b8a <HAL_CAN_IRQHandler+0x334>
 8005b34:	2b40      	cmp	r3, #64	@ 0x40
 8005b36:	d019      	beq.n	8005b6c <HAL_CAN_IRQHandler+0x316>
 8005b38:	2b40      	cmp	r3, #64	@ 0x40
 8005b3a:	d826      	bhi.n	8005b8a <HAL_CAN_IRQHandler+0x334>
 8005b3c:	2b30      	cmp	r3, #48	@ 0x30
 8005b3e:	d010      	beq.n	8005b62 <HAL_CAN_IRQHandler+0x30c>
 8005b40:	2b30      	cmp	r3, #48	@ 0x30
 8005b42:	d822      	bhi.n	8005b8a <HAL_CAN_IRQHandler+0x334>
 8005b44:	2b10      	cmp	r3, #16
 8005b46:	d002      	beq.n	8005b4e <HAL_CAN_IRQHandler+0x2f8>
 8005b48:	2b20      	cmp	r3, #32
 8005b4a:	d005      	beq.n	8005b58 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8005b4c:	e01d      	b.n	8005b8a <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8005b4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b50:	f043 0308 	orr.w	r3, r3, #8
 8005b54:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8005b56:	e019      	b.n	8005b8c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8005b58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b5a:	f043 0310 	orr.w	r3, r3, #16
 8005b5e:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8005b60:	e014      	b.n	8005b8c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8005b62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b64:	f043 0320 	orr.w	r3, r3, #32
 8005b68:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8005b6a:	e00f      	b.n	8005b8c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8005b6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b6e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005b72:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8005b74:	e00a      	b.n	8005b8c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8005b76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b78:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005b7c:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8005b7e:	e005      	b.n	8005b8c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8005b80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b82:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005b86:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8005b88:	e000      	b.n	8005b8c <HAL_CAN_IRQHandler+0x336>
            break;
 8005b8a:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	699a      	ldr	r2, [r3, #24]
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8005b9a:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	2204      	movs	r2, #4
 8005ba2:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8005ba4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d008      	beq.n	8005bbc <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005bae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bb0:	431a      	orrs	r2, r3
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8005bb6:	6878      	ldr	r0, [r7, #4]
 8005bb8:	f000 f87c 	bl	8005cb4 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8005bbc:	bf00      	nop
 8005bbe:	3728      	adds	r7, #40	@ 0x28
 8005bc0:	46bd      	mov	sp, r7
 8005bc2:	bd80      	pop	{r7, pc}

08005bc4 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8005bc4:	b480      	push	{r7}
 8005bc6:	b083      	sub	sp, #12
 8005bc8:	af00      	add	r7, sp, #0
 8005bca:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8005bcc:	bf00      	nop
 8005bce:	370c      	adds	r7, #12
 8005bd0:	46bd      	mov	sp, r7
 8005bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd6:	4770      	bx	lr

08005bd8 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8005bd8:	b480      	push	{r7}
 8005bda:	b083      	sub	sp, #12
 8005bdc:	af00      	add	r7, sp, #0
 8005bde:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8005be0:	bf00      	nop
 8005be2:	370c      	adds	r7, #12
 8005be4:	46bd      	mov	sp, r7
 8005be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bea:	4770      	bx	lr

08005bec <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8005bec:	b480      	push	{r7}
 8005bee:	b083      	sub	sp, #12
 8005bf0:	af00      	add	r7, sp, #0
 8005bf2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8005bf4:	bf00      	nop
 8005bf6:	370c      	adds	r7, #12
 8005bf8:	46bd      	mov	sp, r7
 8005bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bfe:	4770      	bx	lr

08005c00 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8005c00:	b480      	push	{r7}
 8005c02:	b083      	sub	sp, #12
 8005c04:	af00      	add	r7, sp, #0
 8005c06:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8005c08:	bf00      	nop
 8005c0a:	370c      	adds	r7, #12
 8005c0c:	46bd      	mov	sp, r7
 8005c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c12:	4770      	bx	lr

08005c14 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8005c14:	b480      	push	{r7}
 8005c16:	b083      	sub	sp, #12
 8005c18:	af00      	add	r7, sp, #0
 8005c1a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8005c1c:	bf00      	nop
 8005c1e:	370c      	adds	r7, #12
 8005c20:	46bd      	mov	sp, r7
 8005c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c26:	4770      	bx	lr

08005c28 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8005c28:	b480      	push	{r7}
 8005c2a:	b083      	sub	sp, #12
 8005c2c:	af00      	add	r7, sp, #0
 8005c2e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8005c30:	bf00      	nop
 8005c32:	370c      	adds	r7, #12
 8005c34:	46bd      	mov	sp, r7
 8005c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c3a:	4770      	bx	lr

08005c3c <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8005c3c:	b480      	push	{r7}
 8005c3e:	b083      	sub	sp, #12
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8005c44:	bf00      	nop
 8005c46:	370c      	adds	r7, #12
 8005c48:	46bd      	mov	sp, r7
 8005c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c4e:	4770      	bx	lr

08005c50 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8005c50:	b480      	push	{r7}
 8005c52:	b083      	sub	sp, #12
 8005c54:	af00      	add	r7, sp, #0
 8005c56:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8005c58:	bf00      	nop
 8005c5a:	370c      	adds	r7, #12
 8005c5c:	46bd      	mov	sp, r7
 8005c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c62:	4770      	bx	lr

08005c64 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8005c64:	b480      	push	{r7}
 8005c66:	b083      	sub	sp, #12
 8005c68:	af00      	add	r7, sp, #0
 8005c6a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8005c6c:	bf00      	nop
 8005c6e:	370c      	adds	r7, #12
 8005c70:	46bd      	mov	sp, r7
 8005c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c76:	4770      	bx	lr

08005c78 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8005c78:	b480      	push	{r7}
 8005c7a:	b083      	sub	sp, #12
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8005c80:	bf00      	nop
 8005c82:	370c      	adds	r7, #12
 8005c84:	46bd      	mov	sp, r7
 8005c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c8a:	4770      	bx	lr

08005c8c <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8005c8c:	b480      	push	{r7}
 8005c8e:	b083      	sub	sp, #12
 8005c90:	af00      	add	r7, sp, #0
 8005c92:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8005c94:	bf00      	nop
 8005c96:	370c      	adds	r7, #12
 8005c98:	46bd      	mov	sp, r7
 8005c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c9e:	4770      	bx	lr

08005ca0 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8005ca0:	b480      	push	{r7}
 8005ca2:	b083      	sub	sp, #12
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8005ca8:	bf00      	nop
 8005caa:	370c      	adds	r7, #12
 8005cac:	46bd      	mov	sp, r7
 8005cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb2:	4770      	bx	lr

08005cb4 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8005cb4:	b480      	push	{r7}
 8005cb6:	b083      	sub	sp, #12
 8005cb8:	af00      	add	r7, sp, #0
 8005cba:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8005cbc:	bf00      	nop
 8005cbe:	370c      	adds	r7, #12
 8005cc0:	46bd      	mov	sp, r7
 8005cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc6:	4770      	bx	lr

08005cc8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005cc8:	b480      	push	{r7}
 8005cca:	b085      	sub	sp, #20
 8005ccc:	af00      	add	r7, sp, #0
 8005cce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	f003 0307 	and.w	r3, r3, #7
 8005cd6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005cd8:	4b0c      	ldr	r3, [pc, #48]	@ (8005d0c <__NVIC_SetPriorityGrouping+0x44>)
 8005cda:	68db      	ldr	r3, [r3, #12]
 8005cdc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005cde:	68ba      	ldr	r2, [r7, #8]
 8005ce0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8005ce4:	4013      	ands	r3, r2
 8005ce6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005cec:	68bb      	ldr	r3, [r7, #8]
 8005cee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005cf0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8005cf4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005cf8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005cfa:	4a04      	ldr	r2, [pc, #16]	@ (8005d0c <__NVIC_SetPriorityGrouping+0x44>)
 8005cfc:	68bb      	ldr	r3, [r7, #8]
 8005cfe:	60d3      	str	r3, [r2, #12]
}
 8005d00:	bf00      	nop
 8005d02:	3714      	adds	r7, #20
 8005d04:	46bd      	mov	sp, r7
 8005d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d0a:	4770      	bx	lr
 8005d0c:	e000ed00 	.word	0xe000ed00

08005d10 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005d10:	b480      	push	{r7}
 8005d12:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005d14:	4b04      	ldr	r3, [pc, #16]	@ (8005d28 <__NVIC_GetPriorityGrouping+0x18>)
 8005d16:	68db      	ldr	r3, [r3, #12]
 8005d18:	0a1b      	lsrs	r3, r3, #8
 8005d1a:	f003 0307 	and.w	r3, r3, #7
}
 8005d1e:	4618      	mov	r0, r3
 8005d20:	46bd      	mov	sp, r7
 8005d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d26:	4770      	bx	lr
 8005d28:	e000ed00 	.word	0xe000ed00

08005d2c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005d2c:	b480      	push	{r7}
 8005d2e:	b083      	sub	sp, #12
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	4603      	mov	r3, r0
 8005d34:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005d36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	db0b      	blt.n	8005d56 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005d3e:	79fb      	ldrb	r3, [r7, #7]
 8005d40:	f003 021f 	and.w	r2, r3, #31
 8005d44:	4907      	ldr	r1, [pc, #28]	@ (8005d64 <__NVIC_EnableIRQ+0x38>)
 8005d46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005d4a:	095b      	lsrs	r3, r3, #5
 8005d4c:	2001      	movs	r0, #1
 8005d4e:	fa00 f202 	lsl.w	r2, r0, r2
 8005d52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8005d56:	bf00      	nop
 8005d58:	370c      	adds	r7, #12
 8005d5a:	46bd      	mov	sp, r7
 8005d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d60:	4770      	bx	lr
 8005d62:	bf00      	nop
 8005d64:	e000e100 	.word	0xe000e100

08005d68 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005d68:	b480      	push	{r7}
 8005d6a:	b083      	sub	sp, #12
 8005d6c:	af00      	add	r7, sp, #0
 8005d6e:	4603      	mov	r3, r0
 8005d70:	6039      	str	r1, [r7, #0]
 8005d72:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005d74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	db0a      	blt.n	8005d92 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005d7c:	683b      	ldr	r3, [r7, #0]
 8005d7e:	b2da      	uxtb	r2, r3
 8005d80:	490c      	ldr	r1, [pc, #48]	@ (8005db4 <__NVIC_SetPriority+0x4c>)
 8005d82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005d86:	0112      	lsls	r2, r2, #4
 8005d88:	b2d2      	uxtb	r2, r2
 8005d8a:	440b      	add	r3, r1
 8005d8c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005d90:	e00a      	b.n	8005da8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005d92:	683b      	ldr	r3, [r7, #0]
 8005d94:	b2da      	uxtb	r2, r3
 8005d96:	4908      	ldr	r1, [pc, #32]	@ (8005db8 <__NVIC_SetPriority+0x50>)
 8005d98:	79fb      	ldrb	r3, [r7, #7]
 8005d9a:	f003 030f 	and.w	r3, r3, #15
 8005d9e:	3b04      	subs	r3, #4
 8005da0:	0112      	lsls	r2, r2, #4
 8005da2:	b2d2      	uxtb	r2, r2
 8005da4:	440b      	add	r3, r1
 8005da6:	761a      	strb	r2, [r3, #24]
}
 8005da8:	bf00      	nop
 8005daa:	370c      	adds	r7, #12
 8005dac:	46bd      	mov	sp, r7
 8005dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db2:	4770      	bx	lr
 8005db4:	e000e100 	.word	0xe000e100
 8005db8:	e000ed00 	.word	0xe000ed00

08005dbc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005dbc:	b480      	push	{r7}
 8005dbe:	b089      	sub	sp, #36	@ 0x24
 8005dc0:	af00      	add	r7, sp, #0
 8005dc2:	60f8      	str	r0, [r7, #12]
 8005dc4:	60b9      	str	r1, [r7, #8]
 8005dc6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	f003 0307 	and.w	r3, r3, #7
 8005dce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005dd0:	69fb      	ldr	r3, [r7, #28]
 8005dd2:	f1c3 0307 	rsb	r3, r3, #7
 8005dd6:	2b04      	cmp	r3, #4
 8005dd8:	bf28      	it	cs
 8005dda:	2304      	movcs	r3, #4
 8005ddc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005dde:	69fb      	ldr	r3, [r7, #28]
 8005de0:	3304      	adds	r3, #4
 8005de2:	2b06      	cmp	r3, #6
 8005de4:	d902      	bls.n	8005dec <NVIC_EncodePriority+0x30>
 8005de6:	69fb      	ldr	r3, [r7, #28]
 8005de8:	3b03      	subs	r3, #3
 8005dea:	e000      	b.n	8005dee <NVIC_EncodePriority+0x32>
 8005dec:	2300      	movs	r3, #0
 8005dee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005df0:	f04f 32ff 	mov.w	r2, #4294967295
 8005df4:	69bb      	ldr	r3, [r7, #24]
 8005df6:	fa02 f303 	lsl.w	r3, r2, r3
 8005dfa:	43da      	mvns	r2, r3
 8005dfc:	68bb      	ldr	r3, [r7, #8]
 8005dfe:	401a      	ands	r2, r3
 8005e00:	697b      	ldr	r3, [r7, #20]
 8005e02:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005e04:	f04f 31ff 	mov.w	r1, #4294967295
 8005e08:	697b      	ldr	r3, [r7, #20]
 8005e0a:	fa01 f303 	lsl.w	r3, r1, r3
 8005e0e:	43d9      	mvns	r1, r3
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005e14:	4313      	orrs	r3, r2
         );
}
 8005e16:	4618      	mov	r0, r3
 8005e18:	3724      	adds	r7, #36	@ 0x24
 8005e1a:	46bd      	mov	sp, r7
 8005e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e20:	4770      	bx	lr
	...

08005e24 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005e24:	b580      	push	{r7, lr}
 8005e26:	b082      	sub	sp, #8
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	3b01      	subs	r3, #1
 8005e30:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005e34:	d301      	bcc.n	8005e3a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005e36:	2301      	movs	r3, #1
 8005e38:	e00f      	b.n	8005e5a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005e3a:	4a0a      	ldr	r2, [pc, #40]	@ (8005e64 <SysTick_Config+0x40>)
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	3b01      	subs	r3, #1
 8005e40:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005e42:	210f      	movs	r1, #15
 8005e44:	f04f 30ff 	mov.w	r0, #4294967295
 8005e48:	f7ff ff8e 	bl	8005d68 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005e4c:	4b05      	ldr	r3, [pc, #20]	@ (8005e64 <SysTick_Config+0x40>)
 8005e4e:	2200      	movs	r2, #0
 8005e50:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005e52:	4b04      	ldr	r3, [pc, #16]	@ (8005e64 <SysTick_Config+0x40>)
 8005e54:	2207      	movs	r2, #7
 8005e56:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005e58:	2300      	movs	r3, #0
}
 8005e5a:	4618      	mov	r0, r3
 8005e5c:	3708      	adds	r7, #8
 8005e5e:	46bd      	mov	sp, r7
 8005e60:	bd80      	pop	{r7, pc}
 8005e62:	bf00      	nop
 8005e64:	e000e010 	.word	0xe000e010

08005e68 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005e68:	b580      	push	{r7, lr}
 8005e6a:	b082      	sub	sp, #8
 8005e6c:	af00      	add	r7, sp, #0
 8005e6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005e70:	6878      	ldr	r0, [r7, #4]
 8005e72:	f7ff ff29 	bl	8005cc8 <__NVIC_SetPriorityGrouping>
}
 8005e76:	bf00      	nop
 8005e78:	3708      	adds	r7, #8
 8005e7a:	46bd      	mov	sp, r7
 8005e7c:	bd80      	pop	{r7, pc}

08005e7e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005e7e:	b580      	push	{r7, lr}
 8005e80:	b086      	sub	sp, #24
 8005e82:	af00      	add	r7, sp, #0
 8005e84:	4603      	mov	r3, r0
 8005e86:	60b9      	str	r1, [r7, #8]
 8005e88:	607a      	str	r2, [r7, #4]
 8005e8a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005e8c:	2300      	movs	r3, #0
 8005e8e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005e90:	f7ff ff3e 	bl	8005d10 <__NVIC_GetPriorityGrouping>
 8005e94:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005e96:	687a      	ldr	r2, [r7, #4]
 8005e98:	68b9      	ldr	r1, [r7, #8]
 8005e9a:	6978      	ldr	r0, [r7, #20]
 8005e9c:	f7ff ff8e 	bl	8005dbc <NVIC_EncodePriority>
 8005ea0:	4602      	mov	r2, r0
 8005ea2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005ea6:	4611      	mov	r1, r2
 8005ea8:	4618      	mov	r0, r3
 8005eaa:	f7ff ff5d 	bl	8005d68 <__NVIC_SetPriority>
}
 8005eae:	bf00      	nop
 8005eb0:	3718      	adds	r7, #24
 8005eb2:	46bd      	mov	sp, r7
 8005eb4:	bd80      	pop	{r7, pc}

08005eb6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005eb6:	b580      	push	{r7, lr}
 8005eb8:	b082      	sub	sp, #8
 8005eba:	af00      	add	r7, sp, #0
 8005ebc:	4603      	mov	r3, r0
 8005ebe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005ec0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005ec4:	4618      	mov	r0, r3
 8005ec6:	f7ff ff31 	bl	8005d2c <__NVIC_EnableIRQ>
}
 8005eca:	bf00      	nop
 8005ecc:	3708      	adds	r7, #8
 8005ece:	46bd      	mov	sp, r7
 8005ed0:	bd80      	pop	{r7, pc}

08005ed2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005ed2:	b580      	push	{r7, lr}
 8005ed4:	b082      	sub	sp, #8
 8005ed6:	af00      	add	r7, sp, #0
 8005ed8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005eda:	6878      	ldr	r0, [r7, #4]
 8005edc:	f7ff ffa2 	bl	8005e24 <SysTick_Config>
 8005ee0:	4603      	mov	r3, r0
}
 8005ee2:	4618      	mov	r0, r3
 8005ee4:	3708      	adds	r7, #8
 8005ee6:	46bd      	mov	sp, r7
 8005ee8:	bd80      	pop	{r7, pc}
	...

08005eec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005eec:	b480      	push	{r7}
 8005eee:	b089      	sub	sp, #36	@ 0x24
 8005ef0:	af00      	add	r7, sp, #0
 8005ef2:	6078      	str	r0, [r7, #4]
 8005ef4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005ef6:	2300      	movs	r3, #0
 8005ef8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005efa:	2300      	movs	r3, #0
 8005efc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005efe:	2300      	movs	r3, #0
 8005f00:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005f02:	2300      	movs	r3, #0
 8005f04:	61fb      	str	r3, [r7, #28]
 8005f06:	e165      	b.n	80061d4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005f08:	2201      	movs	r2, #1
 8005f0a:	69fb      	ldr	r3, [r7, #28]
 8005f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8005f10:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005f12:	683b      	ldr	r3, [r7, #0]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	697a      	ldr	r2, [r7, #20]
 8005f18:	4013      	ands	r3, r2
 8005f1a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005f1c:	693a      	ldr	r2, [r7, #16]
 8005f1e:	697b      	ldr	r3, [r7, #20]
 8005f20:	429a      	cmp	r2, r3
 8005f22:	f040 8154 	bne.w	80061ce <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005f26:	683b      	ldr	r3, [r7, #0]
 8005f28:	685b      	ldr	r3, [r3, #4]
 8005f2a:	f003 0303 	and.w	r3, r3, #3
 8005f2e:	2b01      	cmp	r3, #1
 8005f30:	d005      	beq.n	8005f3e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005f32:	683b      	ldr	r3, [r7, #0]
 8005f34:	685b      	ldr	r3, [r3, #4]
 8005f36:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005f3a:	2b02      	cmp	r3, #2
 8005f3c:	d130      	bne.n	8005fa0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	689b      	ldr	r3, [r3, #8]
 8005f42:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005f44:	69fb      	ldr	r3, [r7, #28]
 8005f46:	005b      	lsls	r3, r3, #1
 8005f48:	2203      	movs	r2, #3
 8005f4a:	fa02 f303 	lsl.w	r3, r2, r3
 8005f4e:	43db      	mvns	r3, r3
 8005f50:	69ba      	ldr	r2, [r7, #24]
 8005f52:	4013      	ands	r3, r2
 8005f54:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005f56:	683b      	ldr	r3, [r7, #0]
 8005f58:	68da      	ldr	r2, [r3, #12]
 8005f5a:	69fb      	ldr	r3, [r7, #28]
 8005f5c:	005b      	lsls	r3, r3, #1
 8005f5e:	fa02 f303 	lsl.w	r3, r2, r3
 8005f62:	69ba      	ldr	r2, [r7, #24]
 8005f64:	4313      	orrs	r3, r2
 8005f66:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	69ba      	ldr	r2, [r7, #24]
 8005f6c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	685b      	ldr	r3, [r3, #4]
 8005f72:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005f74:	2201      	movs	r2, #1
 8005f76:	69fb      	ldr	r3, [r7, #28]
 8005f78:	fa02 f303 	lsl.w	r3, r2, r3
 8005f7c:	43db      	mvns	r3, r3
 8005f7e:	69ba      	ldr	r2, [r7, #24]
 8005f80:	4013      	ands	r3, r2
 8005f82:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005f84:	683b      	ldr	r3, [r7, #0]
 8005f86:	685b      	ldr	r3, [r3, #4]
 8005f88:	091b      	lsrs	r3, r3, #4
 8005f8a:	f003 0201 	and.w	r2, r3, #1
 8005f8e:	69fb      	ldr	r3, [r7, #28]
 8005f90:	fa02 f303 	lsl.w	r3, r2, r3
 8005f94:	69ba      	ldr	r2, [r7, #24]
 8005f96:	4313      	orrs	r3, r2
 8005f98:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	69ba      	ldr	r2, [r7, #24]
 8005f9e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005fa0:	683b      	ldr	r3, [r7, #0]
 8005fa2:	685b      	ldr	r3, [r3, #4]
 8005fa4:	f003 0303 	and.w	r3, r3, #3
 8005fa8:	2b03      	cmp	r3, #3
 8005faa:	d017      	beq.n	8005fdc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	68db      	ldr	r3, [r3, #12]
 8005fb0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005fb2:	69fb      	ldr	r3, [r7, #28]
 8005fb4:	005b      	lsls	r3, r3, #1
 8005fb6:	2203      	movs	r2, #3
 8005fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8005fbc:	43db      	mvns	r3, r3
 8005fbe:	69ba      	ldr	r2, [r7, #24]
 8005fc0:	4013      	ands	r3, r2
 8005fc2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005fc4:	683b      	ldr	r3, [r7, #0]
 8005fc6:	689a      	ldr	r2, [r3, #8]
 8005fc8:	69fb      	ldr	r3, [r7, #28]
 8005fca:	005b      	lsls	r3, r3, #1
 8005fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8005fd0:	69ba      	ldr	r2, [r7, #24]
 8005fd2:	4313      	orrs	r3, r2
 8005fd4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	69ba      	ldr	r2, [r7, #24]
 8005fda:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005fdc:	683b      	ldr	r3, [r7, #0]
 8005fde:	685b      	ldr	r3, [r3, #4]
 8005fe0:	f003 0303 	and.w	r3, r3, #3
 8005fe4:	2b02      	cmp	r3, #2
 8005fe6:	d123      	bne.n	8006030 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005fe8:	69fb      	ldr	r3, [r7, #28]
 8005fea:	08da      	lsrs	r2, r3, #3
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	3208      	adds	r2, #8
 8005ff0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ff4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005ff6:	69fb      	ldr	r3, [r7, #28]
 8005ff8:	f003 0307 	and.w	r3, r3, #7
 8005ffc:	009b      	lsls	r3, r3, #2
 8005ffe:	220f      	movs	r2, #15
 8006000:	fa02 f303 	lsl.w	r3, r2, r3
 8006004:	43db      	mvns	r3, r3
 8006006:	69ba      	ldr	r2, [r7, #24]
 8006008:	4013      	ands	r3, r2
 800600a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800600c:	683b      	ldr	r3, [r7, #0]
 800600e:	691a      	ldr	r2, [r3, #16]
 8006010:	69fb      	ldr	r3, [r7, #28]
 8006012:	f003 0307 	and.w	r3, r3, #7
 8006016:	009b      	lsls	r3, r3, #2
 8006018:	fa02 f303 	lsl.w	r3, r2, r3
 800601c:	69ba      	ldr	r2, [r7, #24]
 800601e:	4313      	orrs	r3, r2
 8006020:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006022:	69fb      	ldr	r3, [r7, #28]
 8006024:	08da      	lsrs	r2, r3, #3
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	3208      	adds	r2, #8
 800602a:	69b9      	ldr	r1, [r7, #24]
 800602c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8006036:	69fb      	ldr	r3, [r7, #28]
 8006038:	005b      	lsls	r3, r3, #1
 800603a:	2203      	movs	r2, #3
 800603c:	fa02 f303 	lsl.w	r3, r2, r3
 8006040:	43db      	mvns	r3, r3
 8006042:	69ba      	ldr	r2, [r7, #24]
 8006044:	4013      	ands	r3, r2
 8006046:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006048:	683b      	ldr	r3, [r7, #0]
 800604a:	685b      	ldr	r3, [r3, #4]
 800604c:	f003 0203 	and.w	r2, r3, #3
 8006050:	69fb      	ldr	r3, [r7, #28]
 8006052:	005b      	lsls	r3, r3, #1
 8006054:	fa02 f303 	lsl.w	r3, r2, r3
 8006058:	69ba      	ldr	r2, [r7, #24]
 800605a:	4313      	orrs	r3, r2
 800605c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	69ba      	ldr	r2, [r7, #24]
 8006062:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006064:	683b      	ldr	r3, [r7, #0]
 8006066:	685b      	ldr	r3, [r3, #4]
 8006068:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800606c:	2b00      	cmp	r3, #0
 800606e:	f000 80ae 	beq.w	80061ce <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006072:	2300      	movs	r3, #0
 8006074:	60fb      	str	r3, [r7, #12]
 8006076:	4b5d      	ldr	r3, [pc, #372]	@ (80061ec <HAL_GPIO_Init+0x300>)
 8006078:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800607a:	4a5c      	ldr	r2, [pc, #368]	@ (80061ec <HAL_GPIO_Init+0x300>)
 800607c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006080:	6453      	str	r3, [r2, #68]	@ 0x44
 8006082:	4b5a      	ldr	r3, [pc, #360]	@ (80061ec <HAL_GPIO_Init+0x300>)
 8006084:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006086:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800608a:	60fb      	str	r3, [r7, #12]
 800608c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800608e:	4a58      	ldr	r2, [pc, #352]	@ (80061f0 <HAL_GPIO_Init+0x304>)
 8006090:	69fb      	ldr	r3, [r7, #28]
 8006092:	089b      	lsrs	r3, r3, #2
 8006094:	3302      	adds	r3, #2
 8006096:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800609a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800609c:	69fb      	ldr	r3, [r7, #28]
 800609e:	f003 0303 	and.w	r3, r3, #3
 80060a2:	009b      	lsls	r3, r3, #2
 80060a4:	220f      	movs	r2, #15
 80060a6:	fa02 f303 	lsl.w	r3, r2, r3
 80060aa:	43db      	mvns	r3, r3
 80060ac:	69ba      	ldr	r2, [r7, #24]
 80060ae:	4013      	ands	r3, r2
 80060b0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	4a4f      	ldr	r2, [pc, #316]	@ (80061f4 <HAL_GPIO_Init+0x308>)
 80060b6:	4293      	cmp	r3, r2
 80060b8:	d025      	beq.n	8006106 <HAL_GPIO_Init+0x21a>
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	4a4e      	ldr	r2, [pc, #312]	@ (80061f8 <HAL_GPIO_Init+0x30c>)
 80060be:	4293      	cmp	r3, r2
 80060c0:	d01f      	beq.n	8006102 <HAL_GPIO_Init+0x216>
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	4a4d      	ldr	r2, [pc, #308]	@ (80061fc <HAL_GPIO_Init+0x310>)
 80060c6:	4293      	cmp	r3, r2
 80060c8:	d019      	beq.n	80060fe <HAL_GPIO_Init+0x212>
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	4a4c      	ldr	r2, [pc, #304]	@ (8006200 <HAL_GPIO_Init+0x314>)
 80060ce:	4293      	cmp	r3, r2
 80060d0:	d013      	beq.n	80060fa <HAL_GPIO_Init+0x20e>
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	4a4b      	ldr	r2, [pc, #300]	@ (8006204 <HAL_GPIO_Init+0x318>)
 80060d6:	4293      	cmp	r3, r2
 80060d8:	d00d      	beq.n	80060f6 <HAL_GPIO_Init+0x20a>
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	4a4a      	ldr	r2, [pc, #296]	@ (8006208 <HAL_GPIO_Init+0x31c>)
 80060de:	4293      	cmp	r3, r2
 80060e0:	d007      	beq.n	80060f2 <HAL_GPIO_Init+0x206>
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	4a49      	ldr	r2, [pc, #292]	@ (800620c <HAL_GPIO_Init+0x320>)
 80060e6:	4293      	cmp	r3, r2
 80060e8:	d101      	bne.n	80060ee <HAL_GPIO_Init+0x202>
 80060ea:	2306      	movs	r3, #6
 80060ec:	e00c      	b.n	8006108 <HAL_GPIO_Init+0x21c>
 80060ee:	2307      	movs	r3, #7
 80060f0:	e00a      	b.n	8006108 <HAL_GPIO_Init+0x21c>
 80060f2:	2305      	movs	r3, #5
 80060f4:	e008      	b.n	8006108 <HAL_GPIO_Init+0x21c>
 80060f6:	2304      	movs	r3, #4
 80060f8:	e006      	b.n	8006108 <HAL_GPIO_Init+0x21c>
 80060fa:	2303      	movs	r3, #3
 80060fc:	e004      	b.n	8006108 <HAL_GPIO_Init+0x21c>
 80060fe:	2302      	movs	r3, #2
 8006100:	e002      	b.n	8006108 <HAL_GPIO_Init+0x21c>
 8006102:	2301      	movs	r3, #1
 8006104:	e000      	b.n	8006108 <HAL_GPIO_Init+0x21c>
 8006106:	2300      	movs	r3, #0
 8006108:	69fa      	ldr	r2, [r7, #28]
 800610a:	f002 0203 	and.w	r2, r2, #3
 800610e:	0092      	lsls	r2, r2, #2
 8006110:	4093      	lsls	r3, r2
 8006112:	69ba      	ldr	r2, [r7, #24]
 8006114:	4313      	orrs	r3, r2
 8006116:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006118:	4935      	ldr	r1, [pc, #212]	@ (80061f0 <HAL_GPIO_Init+0x304>)
 800611a:	69fb      	ldr	r3, [r7, #28]
 800611c:	089b      	lsrs	r3, r3, #2
 800611e:	3302      	adds	r3, #2
 8006120:	69ba      	ldr	r2, [r7, #24]
 8006122:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006126:	4b3a      	ldr	r3, [pc, #232]	@ (8006210 <HAL_GPIO_Init+0x324>)
 8006128:	689b      	ldr	r3, [r3, #8]
 800612a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800612c:	693b      	ldr	r3, [r7, #16]
 800612e:	43db      	mvns	r3, r3
 8006130:	69ba      	ldr	r2, [r7, #24]
 8006132:	4013      	ands	r3, r2
 8006134:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006136:	683b      	ldr	r3, [r7, #0]
 8006138:	685b      	ldr	r3, [r3, #4]
 800613a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800613e:	2b00      	cmp	r3, #0
 8006140:	d003      	beq.n	800614a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8006142:	69ba      	ldr	r2, [r7, #24]
 8006144:	693b      	ldr	r3, [r7, #16]
 8006146:	4313      	orrs	r3, r2
 8006148:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800614a:	4a31      	ldr	r2, [pc, #196]	@ (8006210 <HAL_GPIO_Init+0x324>)
 800614c:	69bb      	ldr	r3, [r7, #24]
 800614e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006150:	4b2f      	ldr	r3, [pc, #188]	@ (8006210 <HAL_GPIO_Init+0x324>)
 8006152:	68db      	ldr	r3, [r3, #12]
 8006154:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006156:	693b      	ldr	r3, [r7, #16]
 8006158:	43db      	mvns	r3, r3
 800615a:	69ba      	ldr	r2, [r7, #24]
 800615c:	4013      	ands	r3, r2
 800615e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006160:	683b      	ldr	r3, [r7, #0]
 8006162:	685b      	ldr	r3, [r3, #4]
 8006164:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006168:	2b00      	cmp	r3, #0
 800616a:	d003      	beq.n	8006174 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800616c:	69ba      	ldr	r2, [r7, #24]
 800616e:	693b      	ldr	r3, [r7, #16]
 8006170:	4313      	orrs	r3, r2
 8006172:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006174:	4a26      	ldr	r2, [pc, #152]	@ (8006210 <HAL_GPIO_Init+0x324>)
 8006176:	69bb      	ldr	r3, [r7, #24]
 8006178:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800617a:	4b25      	ldr	r3, [pc, #148]	@ (8006210 <HAL_GPIO_Init+0x324>)
 800617c:	685b      	ldr	r3, [r3, #4]
 800617e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006180:	693b      	ldr	r3, [r7, #16]
 8006182:	43db      	mvns	r3, r3
 8006184:	69ba      	ldr	r2, [r7, #24]
 8006186:	4013      	ands	r3, r2
 8006188:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800618a:	683b      	ldr	r3, [r7, #0]
 800618c:	685b      	ldr	r3, [r3, #4]
 800618e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006192:	2b00      	cmp	r3, #0
 8006194:	d003      	beq.n	800619e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8006196:	69ba      	ldr	r2, [r7, #24]
 8006198:	693b      	ldr	r3, [r7, #16]
 800619a:	4313      	orrs	r3, r2
 800619c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800619e:	4a1c      	ldr	r2, [pc, #112]	@ (8006210 <HAL_GPIO_Init+0x324>)
 80061a0:	69bb      	ldr	r3, [r7, #24]
 80061a2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80061a4:	4b1a      	ldr	r3, [pc, #104]	@ (8006210 <HAL_GPIO_Init+0x324>)
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80061aa:	693b      	ldr	r3, [r7, #16]
 80061ac:	43db      	mvns	r3, r3
 80061ae:	69ba      	ldr	r2, [r7, #24]
 80061b0:	4013      	ands	r3, r2
 80061b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80061b4:	683b      	ldr	r3, [r7, #0]
 80061b6:	685b      	ldr	r3, [r3, #4]
 80061b8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d003      	beq.n	80061c8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80061c0:	69ba      	ldr	r2, [r7, #24]
 80061c2:	693b      	ldr	r3, [r7, #16]
 80061c4:	4313      	orrs	r3, r2
 80061c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80061c8:	4a11      	ldr	r2, [pc, #68]	@ (8006210 <HAL_GPIO_Init+0x324>)
 80061ca:	69bb      	ldr	r3, [r7, #24]
 80061cc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80061ce:	69fb      	ldr	r3, [r7, #28]
 80061d0:	3301      	adds	r3, #1
 80061d2:	61fb      	str	r3, [r7, #28]
 80061d4:	69fb      	ldr	r3, [r7, #28]
 80061d6:	2b0f      	cmp	r3, #15
 80061d8:	f67f ae96 	bls.w	8005f08 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80061dc:	bf00      	nop
 80061de:	bf00      	nop
 80061e0:	3724      	adds	r7, #36	@ 0x24
 80061e2:	46bd      	mov	sp, r7
 80061e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e8:	4770      	bx	lr
 80061ea:	bf00      	nop
 80061ec:	40023800 	.word	0x40023800
 80061f0:	40013800 	.word	0x40013800
 80061f4:	40020000 	.word	0x40020000
 80061f8:	40020400 	.word	0x40020400
 80061fc:	40020800 	.word	0x40020800
 8006200:	40020c00 	.word	0x40020c00
 8006204:	40021000 	.word	0x40021000
 8006208:	40021400 	.word	0x40021400
 800620c:	40021800 	.word	0x40021800
 8006210:	40013c00 	.word	0x40013c00

08006214 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006214:	b480      	push	{r7}
 8006216:	b083      	sub	sp, #12
 8006218:	af00      	add	r7, sp, #0
 800621a:	6078      	str	r0, [r7, #4]
 800621c:	460b      	mov	r3, r1
 800621e:	807b      	strh	r3, [r7, #2]
 8006220:	4613      	mov	r3, r2
 8006222:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006224:	787b      	ldrb	r3, [r7, #1]
 8006226:	2b00      	cmp	r3, #0
 8006228:	d003      	beq.n	8006232 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800622a:	887a      	ldrh	r2, [r7, #2]
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8006230:	e003      	b.n	800623a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8006232:	887b      	ldrh	r3, [r7, #2]
 8006234:	041a      	lsls	r2, r3, #16
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	619a      	str	r2, [r3, #24]
}
 800623a:	bf00      	nop
 800623c:	370c      	adds	r7, #12
 800623e:	46bd      	mov	sp, r7
 8006240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006244:	4770      	bx	lr
	...

08006248 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006248:	b580      	push	{r7, lr}
 800624a:	b084      	sub	sp, #16
 800624c:	af00      	add	r7, sp, #0
 800624e:	6078      	str	r0, [r7, #4]
 8006250:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	2b00      	cmp	r3, #0
 8006256:	d101      	bne.n	800625c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006258:	2301      	movs	r3, #1
 800625a:	e0cc      	b.n	80063f6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800625c:	4b68      	ldr	r3, [pc, #416]	@ (8006400 <HAL_RCC_ClockConfig+0x1b8>)
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	f003 030f 	and.w	r3, r3, #15
 8006264:	683a      	ldr	r2, [r7, #0]
 8006266:	429a      	cmp	r2, r3
 8006268:	d90c      	bls.n	8006284 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800626a:	4b65      	ldr	r3, [pc, #404]	@ (8006400 <HAL_RCC_ClockConfig+0x1b8>)
 800626c:	683a      	ldr	r2, [r7, #0]
 800626e:	b2d2      	uxtb	r2, r2
 8006270:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006272:	4b63      	ldr	r3, [pc, #396]	@ (8006400 <HAL_RCC_ClockConfig+0x1b8>)
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	f003 030f 	and.w	r3, r3, #15
 800627a:	683a      	ldr	r2, [r7, #0]
 800627c:	429a      	cmp	r2, r3
 800627e:	d001      	beq.n	8006284 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006280:	2301      	movs	r3, #1
 8006282:	e0b8      	b.n	80063f6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	f003 0302 	and.w	r3, r3, #2
 800628c:	2b00      	cmp	r3, #0
 800628e:	d020      	beq.n	80062d2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	f003 0304 	and.w	r3, r3, #4
 8006298:	2b00      	cmp	r3, #0
 800629a:	d005      	beq.n	80062a8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800629c:	4b59      	ldr	r3, [pc, #356]	@ (8006404 <HAL_RCC_ClockConfig+0x1bc>)
 800629e:	689b      	ldr	r3, [r3, #8]
 80062a0:	4a58      	ldr	r2, [pc, #352]	@ (8006404 <HAL_RCC_ClockConfig+0x1bc>)
 80062a2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80062a6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	f003 0308 	and.w	r3, r3, #8
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d005      	beq.n	80062c0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80062b4:	4b53      	ldr	r3, [pc, #332]	@ (8006404 <HAL_RCC_ClockConfig+0x1bc>)
 80062b6:	689b      	ldr	r3, [r3, #8]
 80062b8:	4a52      	ldr	r2, [pc, #328]	@ (8006404 <HAL_RCC_ClockConfig+0x1bc>)
 80062ba:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80062be:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80062c0:	4b50      	ldr	r3, [pc, #320]	@ (8006404 <HAL_RCC_ClockConfig+0x1bc>)
 80062c2:	689b      	ldr	r3, [r3, #8]
 80062c4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	689b      	ldr	r3, [r3, #8]
 80062cc:	494d      	ldr	r1, [pc, #308]	@ (8006404 <HAL_RCC_ClockConfig+0x1bc>)
 80062ce:	4313      	orrs	r3, r2
 80062d0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	f003 0301 	and.w	r3, r3, #1
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d044      	beq.n	8006368 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	685b      	ldr	r3, [r3, #4]
 80062e2:	2b01      	cmp	r3, #1
 80062e4:	d107      	bne.n	80062f6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80062e6:	4b47      	ldr	r3, [pc, #284]	@ (8006404 <HAL_RCC_ClockConfig+0x1bc>)
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d119      	bne.n	8006326 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80062f2:	2301      	movs	r3, #1
 80062f4:	e07f      	b.n	80063f6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	685b      	ldr	r3, [r3, #4]
 80062fa:	2b02      	cmp	r3, #2
 80062fc:	d003      	beq.n	8006306 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006302:	2b03      	cmp	r3, #3
 8006304:	d107      	bne.n	8006316 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006306:	4b3f      	ldr	r3, [pc, #252]	@ (8006404 <HAL_RCC_ClockConfig+0x1bc>)
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800630e:	2b00      	cmp	r3, #0
 8006310:	d109      	bne.n	8006326 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006312:	2301      	movs	r3, #1
 8006314:	e06f      	b.n	80063f6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006316:	4b3b      	ldr	r3, [pc, #236]	@ (8006404 <HAL_RCC_ClockConfig+0x1bc>)
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	f003 0302 	and.w	r3, r3, #2
 800631e:	2b00      	cmp	r3, #0
 8006320:	d101      	bne.n	8006326 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006322:	2301      	movs	r3, #1
 8006324:	e067      	b.n	80063f6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006326:	4b37      	ldr	r3, [pc, #220]	@ (8006404 <HAL_RCC_ClockConfig+0x1bc>)
 8006328:	689b      	ldr	r3, [r3, #8]
 800632a:	f023 0203 	bic.w	r2, r3, #3
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	685b      	ldr	r3, [r3, #4]
 8006332:	4934      	ldr	r1, [pc, #208]	@ (8006404 <HAL_RCC_ClockConfig+0x1bc>)
 8006334:	4313      	orrs	r3, r2
 8006336:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006338:	f7fe f9ca 	bl	80046d0 <HAL_GetTick>
 800633c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800633e:	e00a      	b.n	8006356 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006340:	f7fe f9c6 	bl	80046d0 <HAL_GetTick>
 8006344:	4602      	mov	r2, r0
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	1ad3      	subs	r3, r2, r3
 800634a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800634e:	4293      	cmp	r3, r2
 8006350:	d901      	bls.n	8006356 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006352:	2303      	movs	r3, #3
 8006354:	e04f      	b.n	80063f6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006356:	4b2b      	ldr	r3, [pc, #172]	@ (8006404 <HAL_RCC_ClockConfig+0x1bc>)
 8006358:	689b      	ldr	r3, [r3, #8]
 800635a:	f003 020c 	and.w	r2, r3, #12
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	685b      	ldr	r3, [r3, #4]
 8006362:	009b      	lsls	r3, r3, #2
 8006364:	429a      	cmp	r2, r3
 8006366:	d1eb      	bne.n	8006340 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006368:	4b25      	ldr	r3, [pc, #148]	@ (8006400 <HAL_RCC_ClockConfig+0x1b8>)
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	f003 030f 	and.w	r3, r3, #15
 8006370:	683a      	ldr	r2, [r7, #0]
 8006372:	429a      	cmp	r2, r3
 8006374:	d20c      	bcs.n	8006390 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006376:	4b22      	ldr	r3, [pc, #136]	@ (8006400 <HAL_RCC_ClockConfig+0x1b8>)
 8006378:	683a      	ldr	r2, [r7, #0]
 800637a:	b2d2      	uxtb	r2, r2
 800637c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800637e:	4b20      	ldr	r3, [pc, #128]	@ (8006400 <HAL_RCC_ClockConfig+0x1b8>)
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	f003 030f 	and.w	r3, r3, #15
 8006386:	683a      	ldr	r2, [r7, #0]
 8006388:	429a      	cmp	r2, r3
 800638a:	d001      	beq.n	8006390 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800638c:	2301      	movs	r3, #1
 800638e:	e032      	b.n	80063f6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	f003 0304 	and.w	r3, r3, #4
 8006398:	2b00      	cmp	r3, #0
 800639a:	d008      	beq.n	80063ae <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800639c:	4b19      	ldr	r3, [pc, #100]	@ (8006404 <HAL_RCC_ClockConfig+0x1bc>)
 800639e:	689b      	ldr	r3, [r3, #8]
 80063a0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	68db      	ldr	r3, [r3, #12]
 80063a8:	4916      	ldr	r1, [pc, #88]	@ (8006404 <HAL_RCC_ClockConfig+0x1bc>)
 80063aa:	4313      	orrs	r3, r2
 80063ac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	f003 0308 	and.w	r3, r3, #8
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d009      	beq.n	80063ce <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80063ba:	4b12      	ldr	r3, [pc, #72]	@ (8006404 <HAL_RCC_ClockConfig+0x1bc>)
 80063bc:	689b      	ldr	r3, [r3, #8]
 80063be:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	691b      	ldr	r3, [r3, #16]
 80063c6:	00db      	lsls	r3, r3, #3
 80063c8:	490e      	ldr	r1, [pc, #56]	@ (8006404 <HAL_RCC_ClockConfig+0x1bc>)
 80063ca:	4313      	orrs	r3, r2
 80063cc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80063ce:	f000 f821 	bl	8006414 <HAL_RCC_GetSysClockFreq>
 80063d2:	4602      	mov	r2, r0
 80063d4:	4b0b      	ldr	r3, [pc, #44]	@ (8006404 <HAL_RCC_ClockConfig+0x1bc>)
 80063d6:	689b      	ldr	r3, [r3, #8]
 80063d8:	091b      	lsrs	r3, r3, #4
 80063da:	f003 030f 	and.w	r3, r3, #15
 80063de:	490a      	ldr	r1, [pc, #40]	@ (8006408 <HAL_RCC_ClockConfig+0x1c0>)
 80063e0:	5ccb      	ldrb	r3, [r1, r3]
 80063e2:	fa22 f303 	lsr.w	r3, r2, r3
 80063e6:	4a09      	ldr	r2, [pc, #36]	@ (800640c <HAL_RCC_ClockConfig+0x1c4>)
 80063e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80063ea:	4b09      	ldr	r3, [pc, #36]	@ (8006410 <HAL_RCC_ClockConfig+0x1c8>)
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	4618      	mov	r0, r3
 80063f0:	f7fe f92a 	bl	8004648 <HAL_InitTick>

  return HAL_OK;
 80063f4:	2300      	movs	r3, #0
}
 80063f6:	4618      	mov	r0, r3
 80063f8:	3710      	adds	r7, #16
 80063fa:	46bd      	mov	sp, r7
 80063fc:	bd80      	pop	{r7, pc}
 80063fe:	bf00      	nop
 8006400:	40023c00 	.word	0x40023c00
 8006404:	40023800 	.word	0x40023800
 8006408:	080089f8 	.word	0x080089f8
 800640c:	20000000 	.word	0x20000000
 8006410:	20000008 	.word	0x20000008

08006414 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006414:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006418:	b0ae      	sub	sp, #184	@ 0xb8
 800641a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800641c:	2300      	movs	r3, #0
 800641e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8006422:	2300      	movs	r3, #0
 8006424:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8006428:	2300      	movs	r3, #0
 800642a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 800642e:	2300      	movs	r3, #0
 8006430:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8006434:	2300      	movs	r3, #0
 8006436:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800643a:	4bcb      	ldr	r3, [pc, #812]	@ (8006768 <HAL_RCC_GetSysClockFreq+0x354>)
 800643c:	689b      	ldr	r3, [r3, #8]
 800643e:	f003 030c 	and.w	r3, r3, #12
 8006442:	2b0c      	cmp	r3, #12
 8006444:	f200 8204 	bhi.w	8006850 <HAL_RCC_GetSysClockFreq+0x43c>
 8006448:	a201      	add	r2, pc, #4	@ (adr r2, 8006450 <HAL_RCC_GetSysClockFreq+0x3c>)
 800644a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800644e:	bf00      	nop
 8006450:	08006485 	.word	0x08006485
 8006454:	08006851 	.word	0x08006851
 8006458:	08006851 	.word	0x08006851
 800645c:	08006851 	.word	0x08006851
 8006460:	0800648d 	.word	0x0800648d
 8006464:	08006851 	.word	0x08006851
 8006468:	08006851 	.word	0x08006851
 800646c:	08006851 	.word	0x08006851
 8006470:	08006495 	.word	0x08006495
 8006474:	08006851 	.word	0x08006851
 8006478:	08006851 	.word	0x08006851
 800647c:	08006851 	.word	0x08006851
 8006480:	08006685 	.word	0x08006685
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006484:	4bb9      	ldr	r3, [pc, #740]	@ (800676c <HAL_RCC_GetSysClockFreq+0x358>)
 8006486:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800648a:	e1e5      	b.n	8006858 <HAL_RCC_GetSysClockFreq+0x444>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800648c:	4bb7      	ldr	r3, [pc, #732]	@ (800676c <HAL_RCC_GetSysClockFreq+0x358>)
 800648e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8006492:	e1e1      	b.n	8006858 <HAL_RCC_GetSysClockFreq+0x444>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006494:	4bb4      	ldr	r3, [pc, #720]	@ (8006768 <HAL_RCC_GetSysClockFreq+0x354>)
 8006496:	685b      	ldr	r3, [r3, #4]
 8006498:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800649c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80064a0:	4bb1      	ldr	r3, [pc, #708]	@ (8006768 <HAL_RCC_GetSysClockFreq+0x354>)
 80064a2:	685b      	ldr	r3, [r3, #4]
 80064a4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d071      	beq.n	8006590 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80064ac:	4bae      	ldr	r3, [pc, #696]	@ (8006768 <HAL_RCC_GetSysClockFreq+0x354>)
 80064ae:	685b      	ldr	r3, [r3, #4]
 80064b0:	099b      	lsrs	r3, r3, #6
 80064b2:	2200      	movs	r2, #0
 80064b4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80064b8:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 80064bc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80064c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80064c4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80064c8:	2300      	movs	r3, #0
 80064ca:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80064ce:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80064d2:	4622      	mov	r2, r4
 80064d4:	462b      	mov	r3, r5
 80064d6:	f04f 0000 	mov.w	r0, #0
 80064da:	f04f 0100 	mov.w	r1, #0
 80064de:	0159      	lsls	r1, r3, #5
 80064e0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80064e4:	0150      	lsls	r0, r2, #5
 80064e6:	4602      	mov	r2, r0
 80064e8:	460b      	mov	r3, r1
 80064ea:	4621      	mov	r1, r4
 80064ec:	1a51      	subs	r1, r2, r1
 80064ee:	6439      	str	r1, [r7, #64]	@ 0x40
 80064f0:	4629      	mov	r1, r5
 80064f2:	eb63 0301 	sbc.w	r3, r3, r1
 80064f6:	647b      	str	r3, [r7, #68]	@ 0x44
 80064f8:	f04f 0200 	mov.w	r2, #0
 80064fc:	f04f 0300 	mov.w	r3, #0
 8006500:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8006504:	4649      	mov	r1, r9
 8006506:	018b      	lsls	r3, r1, #6
 8006508:	4641      	mov	r1, r8
 800650a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800650e:	4641      	mov	r1, r8
 8006510:	018a      	lsls	r2, r1, #6
 8006512:	4641      	mov	r1, r8
 8006514:	1a51      	subs	r1, r2, r1
 8006516:	63b9      	str	r1, [r7, #56]	@ 0x38
 8006518:	4649      	mov	r1, r9
 800651a:	eb63 0301 	sbc.w	r3, r3, r1
 800651e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006520:	f04f 0200 	mov.w	r2, #0
 8006524:	f04f 0300 	mov.w	r3, #0
 8006528:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 800652c:	4649      	mov	r1, r9
 800652e:	00cb      	lsls	r3, r1, #3
 8006530:	4641      	mov	r1, r8
 8006532:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006536:	4641      	mov	r1, r8
 8006538:	00ca      	lsls	r2, r1, #3
 800653a:	4610      	mov	r0, r2
 800653c:	4619      	mov	r1, r3
 800653e:	4603      	mov	r3, r0
 8006540:	4622      	mov	r2, r4
 8006542:	189b      	adds	r3, r3, r2
 8006544:	633b      	str	r3, [r7, #48]	@ 0x30
 8006546:	462b      	mov	r3, r5
 8006548:	460a      	mov	r2, r1
 800654a:	eb42 0303 	adc.w	r3, r2, r3
 800654e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006550:	f04f 0200 	mov.w	r2, #0
 8006554:	f04f 0300 	mov.w	r3, #0
 8006558:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800655c:	4629      	mov	r1, r5
 800655e:	028b      	lsls	r3, r1, #10
 8006560:	4621      	mov	r1, r4
 8006562:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006566:	4621      	mov	r1, r4
 8006568:	028a      	lsls	r2, r1, #10
 800656a:	4610      	mov	r0, r2
 800656c:	4619      	mov	r1, r3
 800656e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006572:	2200      	movs	r2, #0
 8006574:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006578:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800657c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8006580:	f7fa fa60 	bl	8000a44 <__aeabi_uldivmod>
 8006584:	4602      	mov	r2, r0
 8006586:	460b      	mov	r3, r1
 8006588:	4613      	mov	r3, r2
 800658a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800658e:	e067      	b.n	8006660 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006590:	4b75      	ldr	r3, [pc, #468]	@ (8006768 <HAL_RCC_GetSysClockFreq+0x354>)
 8006592:	685b      	ldr	r3, [r3, #4]
 8006594:	099b      	lsrs	r3, r3, #6
 8006596:	2200      	movs	r2, #0
 8006598:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800659c:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 80065a0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80065a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80065a8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80065aa:	2300      	movs	r3, #0
 80065ac:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80065ae:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 80065b2:	4622      	mov	r2, r4
 80065b4:	462b      	mov	r3, r5
 80065b6:	f04f 0000 	mov.w	r0, #0
 80065ba:	f04f 0100 	mov.w	r1, #0
 80065be:	0159      	lsls	r1, r3, #5
 80065c0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80065c4:	0150      	lsls	r0, r2, #5
 80065c6:	4602      	mov	r2, r0
 80065c8:	460b      	mov	r3, r1
 80065ca:	4621      	mov	r1, r4
 80065cc:	1a51      	subs	r1, r2, r1
 80065ce:	62b9      	str	r1, [r7, #40]	@ 0x28
 80065d0:	4629      	mov	r1, r5
 80065d2:	eb63 0301 	sbc.w	r3, r3, r1
 80065d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80065d8:	f04f 0200 	mov.w	r2, #0
 80065dc:	f04f 0300 	mov.w	r3, #0
 80065e0:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 80065e4:	4649      	mov	r1, r9
 80065e6:	018b      	lsls	r3, r1, #6
 80065e8:	4641      	mov	r1, r8
 80065ea:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80065ee:	4641      	mov	r1, r8
 80065f0:	018a      	lsls	r2, r1, #6
 80065f2:	4641      	mov	r1, r8
 80065f4:	ebb2 0a01 	subs.w	sl, r2, r1
 80065f8:	4649      	mov	r1, r9
 80065fa:	eb63 0b01 	sbc.w	fp, r3, r1
 80065fe:	f04f 0200 	mov.w	r2, #0
 8006602:	f04f 0300 	mov.w	r3, #0
 8006606:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800660a:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800660e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006612:	4692      	mov	sl, r2
 8006614:	469b      	mov	fp, r3
 8006616:	4623      	mov	r3, r4
 8006618:	eb1a 0303 	adds.w	r3, sl, r3
 800661c:	623b      	str	r3, [r7, #32]
 800661e:	462b      	mov	r3, r5
 8006620:	eb4b 0303 	adc.w	r3, fp, r3
 8006624:	627b      	str	r3, [r7, #36]	@ 0x24
 8006626:	f04f 0200 	mov.w	r2, #0
 800662a:	f04f 0300 	mov.w	r3, #0
 800662e:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8006632:	4629      	mov	r1, r5
 8006634:	028b      	lsls	r3, r1, #10
 8006636:	4621      	mov	r1, r4
 8006638:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800663c:	4621      	mov	r1, r4
 800663e:	028a      	lsls	r2, r1, #10
 8006640:	4610      	mov	r0, r2
 8006642:	4619      	mov	r1, r3
 8006644:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006648:	2200      	movs	r2, #0
 800664a:	673b      	str	r3, [r7, #112]	@ 0x70
 800664c:	677a      	str	r2, [r7, #116]	@ 0x74
 800664e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8006652:	f7fa f9f7 	bl	8000a44 <__aeabi_uldivmod>
 8006656:	4602      	mov	r2, r0
 8006658:	460b      	mov	r3, r1
 800665a:	4613      	mov	r3, r2
 800665c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8006660:	4b41      	ldr	r3, [pc, #260]	@ (8006768 <HAL_RCC_GetSysClockFreq+0x354>)
 8006662:	685b      	ldr	r3, [r3, #4]
 8006664:	0c1b      	lsrs	r3, r3, #16
 8006666:	f003 0303 	and.w	r3, r3, #3
 800666a:	3301      	adds	r3, #1
 800666c:	005b      	lsls	r3, r3, #1
 800666e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8006672:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006676:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800667a:	fbb2 f3f3 	udiv	r3, r2, r3
 800667e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8006682:	e0e9      	b.n	8006858 <HAL_RCC_GetSysClockFreq+0x444>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006684:	4b38      	ldr	r3, [pc, #224]	@ (8006768 <HAL_RCC_GetSysClockFreq+0x354>)
 8006686:	685b      	ldr	r3, [r3, #4]
 8006688:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800668c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006690:	4b35      	ldr	r3, [pc, #212]	@ (8006768 <HAL_RCC_GetSysClockFreq+0x354>)
 8006692:	685b      	ldr	r3, [r3, #4]
 8006694:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006698:	2b00      	cmp	r3, #0
 800669a:	d069      	beq.n	8006770 <HAL_RCC_GetSysClockFreq+0x35c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800669c:	4b32      	ldr	r3, [pc, #200]	@ (8006768 <HAL_RCC_GetSysClockFreq+0x354>)
 800669e:	685b      	ldr	r3, [r3, #4]
 80066a0:	099b      	lsrs	r3, r3, #6
 80066a2:	2200      	movs	r2, #0
 80066a4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80066a6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80066a8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80066aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80066ae:	663b      	str	r3, [r7, #96]	@ 0x60
 80066b0:	2300      	movs	r3, #0
 80066b2:	667b      	str	r3, [r7, #100]	@ 0x64
 80066b4:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 80066b8:	4622      	mov	r2, r4
 80066ba:	462b      	mov	r3, r5
 80066bc:	f04f 0000 	mov.w	r0, #0
 80066c0:	f04f 0100 	mov.w	r1, #0
 80066c4:	0159      	lsls	r1, r3, #5
 80066c6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80066ca:	0150      	lsls	r0, r2, #5
 80066cc:	4602      	mov	r2, r0
 80066ce:	460b      	mov	r3, r1
 80066d0:	4621      	mov	r1, r4
 80066d2:	1a51      	subs	r1, r2, r1
 80066d4:	61b9      	str	r1, [r7, #24]
 80066d6:	4629      	mov	r1, r5
 80066d8:	eb63 0301 	sbc.w	r3, r3, r1
 80066dc:	61fb      	str	r3, [r7, #28]
 80066de:	f04f 0200 	mov.w	r2, #0
 80066e2:	f04f 0300 	mov.w	r3, #0
 80066e6:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80066ea:	4659      	mov	r1, fp
 80066ec:	018b      	lsls	r3, r1, #6
 80066ee:	4651      	mov	r1, sl
 80066f0:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80066f4:	4651      	mov	r1, sl
 80066f6:	018a      	lsls	r2, r1, #6
 80066f8:	4651      	mov	r1, sl
 80066fa:	ebb2 0801 	subs.w	r8, r2, r1
 80066fe:	4659      	mov	r1, fp
 8006700:	eb63 0901 	sbc.w	r9, r3, r1
 8006704:	f04f 0200 	mov.w	r2, #0
 8006708:	f04f 0300 	mov.w	r3, #0
 800670c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006710:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006714:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006718:	4690      	mov	r8, r2
 800671a:	4699      	mov	r9, r3
 800671c:	4623      	mov	r3, r4
 800671e:	eb18 0303 	adds.w	r3, r8, r3
 8006722:	613b      	str	r3, [r7, #16]
 8006724:	462b      	mov	r3, r5
 8006726:	eb49 0303 	adc.w	r3, r9, r3
 800672a:	617b      	str	r3, [r7, #20]
 800672c:	f04f 0200 	mov.w	r2, #0
 8006730:	f04f 0300 	mov.w	r3, #0
 8006734:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8006738:	4629      	mov	r1, r5
 800673a:	028b      	lsls	r3, r1, #10
 800673c:	4621      	mov	r1, r4
 800673e:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006742:	4621      	mov	r1, r4
 8006744:	028a      	lsls	r2, r1, #10
 8006746:	4610      	mov	r0, r2
 8006748:	4619      	mov	r1, r3
 800674a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800674e:	2200      	movs	r2, #0
 8006750:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006752:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8006754:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8006758:	f7fa f974 	bl	8000a44 <__aeabi_uldivmod>
 800675c:	4602      	mov	r2, r0
 800675e:	460b      	mov	r3, r1
 8006760:	4613      	mov	r3, r2
 8006762:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006766:	e063      	b.n	8006830 <HAL_RCC_GetSysClockFreq+0x41c>
 8006768:	40023800 	.word	0x40023800
 800676c:	00f42400 	.word	0x00f42400
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006770:	4b3d      	ldr	r3, [pc, #244]	@ (8006868 <HAL_RCC_GetSysClockFreq+0x454>)
 8006772:	685b      	ldr	r3, [r3, #4]
 8006774:	099b      	lsrs	r3, r3, #6
 8006776:	2200      	movs	r2, #0
 8006778:	4618      	mov	r0, r3
 800677a:	4611      	mov	r1, r2
 800677c:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006780:	653b      	str	r3, [r7, #80]	@ 0x50
 8006782:	2300      	movs	r3, #0
 8006784:	657b      	str	r3, [r7, #84]	@ 0x54
 8006786:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 800678a:	4642      	mov	r2, r8
 800678c:	464b      	mov	r3, r9
 800678e:	f04f 0000 	mov.w	r0, #0
 8006792:	f04f 0100 	mov.w	r1, #0
 8006796:	0159      	lsls	r1, r3, #5
 8006798:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800679c:	0150      	lsls	r0, r2, #5
 800679e:	4602      	mov	r2, r0
 80067a0:	460b      	mov	r3, r1
 80067a2:	4641      	mov	r1, r8
 80067a4:	1a51      	subs	r1, r2, r1
 80067a6:	60b9      	str	r1, [r7, #8]
 80067a8:	4649      	mov	r1, r9
 80067aa:	eb63 0301 	sbc.w	r3, r3, r1
 80067ae:	60fb      	str	r3, [r7, #12]
 80067b0:	f04f 0200 	mov.w	r2, #0
 80067b4:	f04f 0300 	mov.w	r3, #0
 80067b8:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80067bc:	4659      	mov	r1, fp
 80067be:	018b      	lsls	r3, r1, #6
 80067c0:	4651      	mov	r1, sl
 80067c2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80067c6:	4651      	mov	r1, sl
 80067c8:	018a      	lsls	r2, r1, #6
 80067ca:	4651      	mov	r1, sl
 80067cc:	1a54      	subs	r4, r2, r1
 80067ce:	4659      	mov	r1, fp
 80067d0:	eb63 0501 	sbc.w	r5, r3, r1
 80067d4:	f04f 0200 	mov.w	r2, #0
 80067d8:	f04f 0300 	mov.w	r3, #0
 80067dc:	00eb      	lsls	r3, r5, #3
 80067de:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80067e2:	00e2      	lsls	r2, r4, #3
 80067e4:	4614      	mov	r4, r2
 80067e6:	461d      	mov	r5, r3
 80067e8:	4643      	mov	r3, r8
 80067ea:	18e3      	adds	r3, r4, r3
 80067ec:	603b      	str	r3, [r7, #0]
 80067ee:	464b      	mov	r3, r9
 80067f0:	eb45 0303 	adc.w	r3, r5, r3
 80067f4:	607b      	str	r3, [r7, #4]
 80067f6:	f04f 0200 	mov.w	r2, #0
 80067fa:	f04f 0300 	mov.w	r3, #0
 80067fe:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006802:	4629      	mov	r1, r5
 8006804:	028b      	lsls	r3, r1, #10
 8006806:	4621      	mov	r1, r4
 8006808:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800680c:	4621      	mov	r1, r4
 800680e:	028a      	lsls	r2, r1, #10
 8006810:	4610      	mov	r0, r2
 8006812:	4619      	mov	r1, r3
 8006814:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006818:	2200      	movs	r2, #0
 800681a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800681c:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800681e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8006822:	f7fa f90f 	bl	8000a44 <__aeabi_uldivmod>
 8006826:	4602      	mov	r2, r0
 8006828:	460b      	mov	r3, r1
 800682a:	4613      	mov	r3, r2
 800682c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8006830:	4b0d      	ldr	r3, [pc, #52]	@ (8006868 <HAL_RCC_GetSysClockFreq+0x454>)
 8006832:	685b      	ldr	r3, [r3, #4]
 8006834:	0f1b      	lsrs	r3, r3, #28
 8006836:	f003 0307 	and.w	r3, r3, #7
 800683a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 800683e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006842:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8006846:	fbb2 f3f3 	udiv	r3, r2, r3
 800684a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800684e:	e003      	b.n	8006858 <HAL_RCC_GetSysClockFreq+0x444>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006850:	4b06      	ldr	r3, [pc, #24]	@ (800686c <HAL_RCC_GetSysClockFreq+0x458>)
 8006852:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8006856:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006858:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 800685c:	4618      	mov	r0, r3
 800685e:	37b8      	adds	r7, #184	@ 0xb8
 8006860:	46bd      	mov	sp, r7
 8006862:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006866:	bf00      	nop
 8006868:	40023800 	.word	0x40023800
 800686c:	00f42400 	.word	0x00f42400

08006870 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006870:	b580      	push	{r7, lr}
 8006872:	b086      	sub	sp, #24
 8006874:	af00      	add	r7, sp, #0
 8006876:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	2b00      	cmp	r3, #0
 800687c:	d101      	bne.n	8006882 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800687e:	2301      	movs	r3, #1
 8006880:	e28d      	b.n	8006d9e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	f003 0301 	and.w	r3, r3, #1
 800688a:	2b00      	cmp	r3, #0
 800688c:	f000 8083 	beq.w	8006996 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8006890:	4b94      	ldr	r3, [pc, #592]	@ (8006ae4 <HAL_RCC_OscConfig+0x274>)
 8006892:	689b      	ldr	r3, [r3, #8]
 8006894:	f003 030c 	and.w	r3, r3, #12
 8006898:	2b04      	cmp	r3, #4
 800689a:	d019      	beq.n	80068d0 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800689c:	4b91      	ldr	r3, [pc, #580]	@ (8006ae4 <HAL_RCC_OscConfig+0x274>)
 800689e:	689b      	ldr	r3, [r3, #8]
 80068a0:	f003 030c 	and.w	r3, r3, #12
        || \
 80068a4:	2b08      	cmp	r3, #8
 80068a6:	d106      	bne.n	80068b6 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80068a8:	4b8e      	ldr	r3, [pc, #568]	@ (8006ae4 <HAL_RCC_OscConfig+0x274>)
 80068aa:	685b      	ldr	r3, [r3, #4]
 80068ac:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80068b0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80068b4:	d00c      	beq.n	80068d0 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80068b6:	4b8b      	ldr	r3, [pc, #556]	@ (8006ae4 <HAL_RCC_OscConfig+0x274>)
 80068b8:	689b      	ldr	r3, [r3, #8]
 80068ba:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80068be:	2b0c      	cmp	r3, #12
 80068c0:	d112      	bne.n	80068e8 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80068c2:	4b88      	ldr	r3, [pc, #544]	@ (8006ae4 <HAL_RCC_OscConfig+0x274>)
 80068c4:	685b      	ldr	r3, [r3, #4]
 80068c6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80068ca:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80068ce:	d10b      	bne.n	80068e8 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80068d0:	4b84      	ldr	r3, [pc, #528]	@ (8006ae4 <HAL_RCC_OscConfig+0x274>)
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d05b      	beq.n	8006994 <HAL_RCC_OscConfig+0x124>
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	685b      	ldr	r3, [r3, #4]
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d157      	bne.n	8006994 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80068e4:	2301      	movs	r3, #1
 80068e6:	e25a      	b.n	8006d9e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	685b      	ldr	r3, [r3, #4]
 80068ec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80068f0:	d106      	bne.n	8006900 <HAL_RCC_OscConfig+0x90>
 80068f2:	4b7c      	ldr	r3, [pc, #496]	@ (8006ae4 <HAL_RCC_OscConfig+0x274>)
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	4a7b      	ldr	r2, [pc, #492]	@ (8006ae4 <HAL_RCC_OscConfig+0x274>)
 80068f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80068fc:	6013      	str	r3, [r2, #0]
 80068fe:	e01d      	b.n	800693c <HAL_RCC_OscConfig+0xcc>
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	685b      	ldr	r3, [r3, #4]
 8006904:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006908:	d10c      	bne.n	8006924 <HAL_RCC_OscConfig+0xb4>
 800690a:	4b76      	ldr	r3, [pc, #472]	@ (8006ae4 <HAL_RCC_OscConfig+0x274>)
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	4a75      	ldr	r2, [pc, #468]	@ (8006ae4 <HAL_RCC_OscConfig+0x274>)
 8006910:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006914:	6013      	str	r3, [r2, #0]
 8006916:	4b73      	ldr	r3, [pc, #460]	@ (8006ae4 <HAL_RCC_OscConfig+0x274>)
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	4a72      	ldr	r2, [pc, #456]	@ (8006ae4 <HAL_RCC_OscConfig+0x274>)
 800691c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006920:	6013      	str	r3, [r2, #0]
 8006922:	e00b      	b.n	800693c <HAL_RCC_OscConfig+0xcc>
 8006924:	4b6f      	ldr	r3, [pc, #444]	@ (8006ae4 <HAL_RCC_OscConfig+0x274>)
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	4a6e      	ldr	r2, [pc, #440]	@ (8006ae4 <HAL_RCC_OscConfig+0x274>)
 800692a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800692e:	6013      	str	r3, [r2, #0]
 8006930:	4b6c      	ldr	r3, [pc, #432]	@ (8006ae4 <HAL_RCC_OscConfig+0x274>)
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	4a6b      	ldr	r2, [pc, #428]	@ (8006ae4 <HAL_RCC_OscConfig+0x274>)
 8006936:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800693a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	685b      	ldr	r3, [r3, #4]
 8006940:	2b00      	cmp	r3, #0
 8006942:	d013      	beq.n	800696c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006944:	f7fd fec4 	bl	80046d0 <HAL_GetTick>
 8006948:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800694a:	e008      	b.n	800695e <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800694c:	f7fd fec0 	bl	80046d0 <HAL_GetTick>
 8006950:	4602      	mov	r2, r0
 8006952:	693b      	ldr	r3, [r7, #16]
 8006954:	1ad3      	subs	r3, r2, r3
 8006956:	2b64      	cmp	r3, #100	@ 0x64
 8006958:	d901      	bls.n	800695e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800695a:	2303      	movs	r3, #3
 800695c:	e21f      	b.n	8006d9e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800695e:	4b61      	ldr	r3, [pc, #388]	@ (8006ae4 <HAL_RCC_OscConfig+0x274>)
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006966:	2b00      	cmp	r3, #0
 8006968:	d0f0      	beq.n	800694c <HAL_RCC_OscConfig+0xdc>
 800696a:	e014      	b.n	8006996 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800696c:	f7fd feb0 	bl	80046d0 <HAL_GetTick>
 8006970:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006972:	e008      	b.n	8006986 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006974:	f7fd feac 	bl	80046d0 <HAL_GetTick>
 8006978:	4602      	mov	r2, r0
 800697a:	693b      	ldr	r3, [r7, #16]
 800697c:	1ad3      	subs	r3, r2, r3
 800697e:	2b64      	cmp	r3, #100	@ 0x64
 8006980:	d901      	bls.n	8006986 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8006982:	2303      	movs	r3, #3
 8006984:	e20b      	b.n	8006d9e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006986:	4b57      	ldr	r3, [pc, #348]	@ (8006ae4 <HAL_RCC_OscConfig+0x274>)
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800698e:	2b00      	cmp	r3, #0
 8006990:	d1f0      	bne.n	8006974 <HAL_RCC_OscConfig+0x104>
 8006992:	e000      	b.n	8006996 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006994:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	f003 0302 	and.w	r3, r3, #2
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d06f      	beq.n	8006a82 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80069a2:	4b50      	ldr	r3, [pc, #320]	@ (8006ae4 <HAL_RCC_OscConfig+0x274>)
 80069a4:	689b      	ldr	r3, [r3, #8]
 80069a6:	f003 030c 	and.w	r3, r3, #12
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d017      	beq.n	80069de <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80069ae:	4b4d      	ldr	r3, [pc, #308]	@ (8006ae4 <HAL_RCC_OscConfig+0x274>)
 80069b0:	689b      	ldr	r3, [r3, #8]
 80069b2:	f003 030c 	and.w	r3, r3, #12
        || \
 80069b6:	2b08      	cmp	r3, #8
 80069b8:	d105      	bne.n	80069c6 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80069ba:	4b4a      	ldr	r3, [pc, #296]	@ (8006ae4 <HAL_RCC_OscConfig+0x274>)
 80069bc:	685b      	ldr	r3, [r3, #4]
 80069be:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d00b      	beq.n	80069de <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80069c6:	4b47      	ldr	r3, [pc, #284]	@ (8006ae4 <HAL_RCC_OscConfig+0x274>)
 80069c8:	689b      	ldr	r3, [r3, #8]
 80069ca:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80069ce:	2b0c      	cmp	r3, #12
 80069d0:	d11c      	bne.n	8006a0c <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80069d2:	4b44      	ldr	r3, [pc, #272]	@ (8006ae4 <HAL_RCC_OscConfig+0x274>)
 80069d4:	685b      	ldr	r3, [r3, #4]
 80069d6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d116      	bne.n	8006a0c <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80069de:	4b41      	ldr	r3, [pc, #260]	@ (8006ae4 <HAL_RCC_OscConfig+0x274>)
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	f003 0302 	and.w	r3, r3, #2
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d005      	beq.n	80069f6 <HAL_RCC_OscConfig+0x186>
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	68db      	ldr	r3, [r3, #12]
 80069ee:	2b01      	cmp	r3, #1
 80069f0:	d001      	beq.n	80069f6 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80069f2:	2301      	movs	r3, #1
 80069f4:	e1d3      	b.n	8006d9e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80069f6:	4b3b      	ldr	r3, [pc, #236]	@ (8006ae4 <HAL_RCC_OscConfig+0x274>)
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	691b      	ldr	r3, [r3, #16]
 8006a02:	00db      	lsls	r3, r3, #3
 8006a04:	4937      	ldr	r1, [pc, #220]	@ (8006ae4 <HAL_RCC_OscConfig+0x274>)
 8006a06:	4313      	orrs	r3, r2
 8006a08:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006a0a:	e03a      	b.n	8006a82 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	68db      	ldr	r3, [r3, #12]
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d020      	beq.n	8006a56 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006a14:	4b34      	ldr	r3, [pc, #208]	@ (8006ae8 <HAL_RCC_OscConfig+0x278>)
 8006a16:	2201      	movs	r2, #1
 8006a18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a1a:	f7fd fe59 	bl	80046d0 <HAL_GetTick>
 8006a1e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006a20:	e008      	b.n	8006a34 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006a22:	f7fd fe55 	bl	80046d0 <HAL_GetTick>
 8006a26:	4602      	mov	r2, r0
 8006a28:	693b      	ldr	r3, [r7, #16]
 8006a2a:	1ad3      	subs	r3, r2, r3
 8006a2c:	2b02      	cmp	r3, #2
 8006a2e:	d901      	bls.n	8006a34 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8006a30:	2303      	movs	r3, #3
 8006a32:	e1b4      	b.n	8006d9e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006a34:	4b2b      	ldr	r3, [pc, #172]	@ (8006ae4 <HAL_RCC_OscConfig+0x274>)
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	f003 0302 	and.w	r3, r3, #2
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d0f0      	beq.n	8006a22 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006a40:	4b28      	ldr	r3, [pc, #160]	@ (8006ae4 <HAL_RCC_OscConfig+0x274>)
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	691b      	ldr	r3, [r3, #16]
 8006a4c:	00db      	lsls	r3, r3, #3
 8006a4e:	4925      	ldr	r1, [pc, #148]	@ (8006ae4 <HAL_RCC_OscConfig+0x274>)
 8006a50:	4313      	orrs	r3, r2
 8006a52:	600b      	str	r3, [r1, #0]
 8006a54:	e015      	b.n	8006a82 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006a56:	4b24      	ldr	r3, [pc, #144]	@ (8006ae8 <HAL_RCC_OscConfig+0x278>)
 8006a58:	2200      	movs	r2, #0
 8006a5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a5c:	f7fd fe38 	bl	80046d0 <HAL_GetTick>
 8006a60:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006a62:	e008      	b.n	8006a76 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006a64:	f7fd fe34 	bl	80046d0 <HAL_GetTick>
 8006a68:	4602      	mov	r2, r0
 8006a6a:	693b      	ldr	r3, [r7, #16]
 8006a6c:	1ad3      	subs	r3, r2, r3
 8006a6e:	2b02      	cmp	r3, #2
 8006a70:	d901      	bls.n	8006a76 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8006a72:	2303      	movs	r3, #3
 8006a74:	e193      	b.n	8006d9e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006a76:	4b1b      	ldr	r3, [pc, #108]	@ (8006ae4 <HAL_RCC_OscConfig+0x274>)
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	f003 0302 	and.w	r3, r3, #2
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d1f0      	bne.n	8006a64 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	f003 0308 	and.w	r3, r3, #8
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d036      	beq.n	8006afc <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	695b      	ldr	r3, [r3, #20]
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d016      	beq.n	8006ac4 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006a96:	4b15      	ldr	r3, [pc, #84]	@ (8006aec <HAL_RCC_OscConfig+0x27c>)
 8006a98:	2201      	movs	r2, #1
 8006a9a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006a9c:	f7fd fe18 	bl	80046d0 <HAL_GetTick>
 8006aa0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006aa2:	e008      	b.n	8006ab6 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006aa4:	f7fd fe14 	bl	80046d0 <HAL_GetTick>
 8006aa8:	4602      	mov	r2, r0
 8006aaa:	693b      	ldr	r3, [r7, #16]
 8006aac:	1ad3      	subs	r3, r2, r3
 8006aae:	2b02      	cmp	r3, #2
 8006ab0:	d901      	bls.n	8006ab6 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8006ab2:	2303      	movs	r3, #3
 8006ab4:	e173      	b.n	8006d9e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006ab6:	4b0b      	ldr	r3, [pc, #44]	@ (8006ae4 <HAL_RCC_OscConfig+0x274>)
 8006ab8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006aba:	f003 0302 	and.w	r3, r3, #2
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d0f0      	beq.n	8006aa4 <HAL_RCC_OscConfig+0x234>
 8006ac2:	e01b      	b.n	8006afc <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006ac4:	4b09      	ldr	r3, [pc, #36]	@ (8006aec <HAL_RCC_OscConfig+0x27c>)
 8006ac6:	2200      	movs	r2, #0
 8006ac8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006aca:	f7fd fe01 	bl	80046d0 <HAL_GetTick>
 8006ace:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006ad0:	e00e      	b.n	8006af0 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006ad2:	f7fd fdfd 	bl	80046d0 <HAL_GetTick>
 8006ad6:	4602      	mov	r2, r0
 8006ad8:	693b      	ldr	r3, [r7, #16]
 8006ada:	1ad3      	subs	r3, r2, r3
 8006adc:	2b02      	cmp	r3, #2
 8006ade:	d907      	bls.n	8006af0 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8006ae0:	2303      	movs	r3, #3
 8006ae2:	e15c      	b.n	8006d9e <HAL_RCC_OscConfig+0x52e>
 8006ae4:	40023800 	.word	0x40023800
 8006ae8:	42470000 	.word	0x42470000
 8006aec:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006af0:	4b8a      	ldr	r3, [pc, #552]	@ (8006d1c <HAL_RCC_OscConfig+0x4ac>)
 8006af2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006af4:	f003 0302 	and.w	r3, r3, #2
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d1ea      	bne.n	8006ad2 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	f003 0304 	and.w	r3, r3, #4
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	f000 8097 	beq.w	8006c38 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006b0a:	2300      	movs	r3, #0
 8006b0c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006b0e:	4b83      	ldr	r3, [pc, #524]	@ (8006d1c <HAL_RCC_OscConfig+0x4ac>)
 8006b10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b12:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d10f      	bne.n	8006b3a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006b1a:	2300      	movs	r3, #0
 8006b1c:	60bb      	str	r3, [r7, #8]
 8006b1e:	4b7f      	ldr	r3, [pc, #508]	@ (8006d1c <HAL_RCC_OscConfig+0x4ac>)
 8006b20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b22:	4a7e      	ldr	r2, [pc, #504]	@ (8006d1c <HAL_RCC_OscConfig+0x4ac>)
 8006b24:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006b28:	6413      	str	r3, [r2, #64]	@ 0x40
 8006b2a:	4b7c      	ldr	r3, [pc, #496]	@ (8006d1c <HAL_RCC_OscConfig+0x4ac>)
 8006b2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b2e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006b32:	60bb      	str	r3, [r7, #8]
 8006b34:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006b36:	2301      	movs	r3, #1
 8006b38:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006b3a:	4b79      	ldr	r3, [pc, #484]	@ (8006d20 <HAL_RCC_OscConfig+0x4b0>)
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d118      	bne.n	8006b78 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006b46:	4b76      	ldr	r3, [pc, #472]	@ (8006d20 <HAL_RCC_OscConfig+0x4b0>)
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	4a75      	ldr	r2, [pc, #468]	@ (8006d20 <HAL_RCC_OscConfig+0x4b0>)
 8006b4c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006b50:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006b52:	f7fd fdbd 	bl	80046d0 <HAL_GetTick>
 8006b56:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006b58:	e008      	b.n	8006b6c <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006b5a:	f7fd fdb9 	bl	80046d0 <HAL_GetTick>
 8006b5e:	4602      	mov	r2, r0
 8006b60:	693b      	ldr	r3, [r7, #16]
 8006b62:	1ad3      	subs	r3, r2, r3
 8006b64:	2b02      	cmp	r3, #2
 8006b66:	d901      	bls.n	8006b6c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8006b68:	2303      	movs	r3, #3
 8006b6a:	e118      	b.n	8006d9e <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006b6c:	4b6c      	ldr	r3, [pc, #432]	@ (8006d20 <HAL_RCC_OscConfig+0x4b0>)
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d0f0      	beq.n	8006b5a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	689b      	ldr	r3, [r3, #8]
 8006b7c:	2b01      	cmp	r3, #1
 8006b7e:	d106      	bne.n	8006b8e <HAL_RCC_OscConfig+0x31e>
 8006b80:	4b66      	ldr	r3, [pc, #408]	@ (8006d1c <HAL_RCC_OscConfig+0x4ac>)
 8006b82:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006b84:	4a65      	ldr	r2, [pc, #404]	@ (8006d1c <HAL_RCC_OscConfig+0x4ac>)
 8006b86:	f043 0301 	orr.w	r3, r3, #1
 8006b8a:	6713      	str	r3, [r2, #112]	@ 0x70
 8006b8c:	e01c      	b.n	8006bc8 <HAL_RCC_OscConfig+0x358>
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	689b      	ldr	r3, [r3, #8]
 8006b92:	2b05      	cmp	r3, #5
 8006b94:	d10c      	bne.n	8006bb0 <HAL_RCC_OscConfig+0x340>
 8006b96:	4b61      	ldr	r3, [pc, #388]	@ (8006d1c <HAL_RCC_OscConfig+0x4ac>)
 8006b98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006b9a:	4a60      	ldr	r2, [pc, #384]	@ (8006d1c <HAL_RCC_OscConfig+0x4ac>)
 8006b9c:	f043 0304 	orr.w	r3, r3, #4
 8006ba0:	6713      	str	r3, [r2, #112]	@ 0x70
 8006ba2:	4b5e      	ldr	r3, [pc, #376]	@ (8006d1c <HAL_RCC_OscConfig+0x4ac>)
 8006ba4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006ba6:	4a5d      	ldr	r2, [pc, #372]	@ (8006d1c <HAL_RCC_OscConfig+0x4ac>)
 8006ba8:	f043 0301 	orr.w	r3, r3, #1
 8006bac:	6713      	str	r3, [r2, #112]	@ 0x70
 8006bae:	e00b      	b.n	8006bc8 <HAL_RCC_OscConfig+0x358>
 8006bb0:	4b5a      	ldr	r3, [pc, #360]	@ (8006d1c <HAL_RCC_OscConfig+0x4ac>)
 8006bb2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006bb4:	4a59      	ldr	r2, [pc, #356]	@ (8006d1c <HAL_RCC_OscConfig+0x4ac>)
 8006bb6:	f023 0301 	bic.w	r3, r3, #1
 8006bba:	6713      	str	r3, [r2, #112]	@ 0x70
 8006bbc:	4b57      	ldr	r3, [pc, #348]	@ (8006d1c <HAL_RCC_OscConfig+0x4ac>)
 8006bbe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006bc0:	4a56      	ldr	r2, [pc, #344]	@ (8006d1c <HAL_RCC_OscConfig+0x4ac>)
 8006bc2:	f023 0304 	bic.w	r3, r3, #4
 8006bc6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	689b      	ldr	r3, [r3, #8]
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d015      	beq.n	8006bfc <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006bd0:	f7fd fd7e 	bl	80046d0 <HAL_GetTick>
 8006bd4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006bd6:	e00a      	b.n	8006bee <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006bd8:	f7fd fd7a 	bl	80046d0 <HAL_GetTick>
 8006bdc:	4602      	mov	r2, r0
 8006bde:	693b      	ldr	r3, [r7, #16]
 8006be0:	1ad3      	subs	r3, r2, r3
 8006be2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006be6:	4293      	cmp	r3, r2
 8006be8:	d901      	bls.n	8006bee <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8006bea:	2303      	movs	r3, #3
 8006bec:	e0d7      	b.n	8006d9e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006bee:	4b4b      	ldr	r3, [pc, #300]	@ (8006d1c <HAL_RCC_OscConfig+0x4ac>)
 8006bf0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006bf2:	f003 0302 	and.w	r3, r3, #2
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d0ee      	beq.n	8006bd8 <HAL_RCC_OscConfig+0x368>
 8006bfa:	e014      	b.n	8006c26 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006bfc:	f7fd fd68 	bl	80046d0 <HAL_GetTick>
 8006c00:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006c02:	e00a      	b.n	8006c1a <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006c04:	f7fd fd64 	bl	80046d0 <HAL_GetTick>
 8006c08:	4602      	mov	r2, r0
 8006c0a:	693b      	ldr	r3, [r7, #16]
 8006c0c:	1ad3      	subs	r3, r2, r3
 8006c0e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006c12:	4293      	cmp	r3, r2
 8006c14:	d901      	bls.n	8006c1a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8006c16:	2303      	movs	r3, #3
 8006c18:	e0c1      	b.n	8006d9e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006c1a:	4b40      	ldr	r3, [pc, #256]	@ (8006d1c <HAL_RCC_OscConfig+0x4ac>)
 8006c1c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006c1e:	f003 0302 	and.w	r3, r3, #2
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d1ee      	bne.n	8006c04 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006c26:	7dfb      	ldrb	r3, [r7, #23]
 8006c28:	2b01      	cmp	r3, #1
 8006c2a:	d105      	bne.n	8006c38 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006c2c:	4b3b      	ldr	r3, [pc, #236]	@ (8006d1c <HAL_RCC_OscConfig+0x4ac>)
 8006c2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c30:	4a3a      	ldr	r2, [pc, #232]	@ (8006d1c <HAL_RCC_OscConfig+0x4ac>)
 8006c32:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006c36:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	699b      	ldr	r3, [r3, #24]
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	f000 80ad 	beq.w	8006d9c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006c42:	4b36      	ldr	r3, [pc, #216]	@ (8006d1c <HAL_RCC_OscConfig+0x4ac>)
 8006c44:	689b      	ldr	r3, [r3, #8]
 8006c46:	f003 030c 	and.w	r3, r3, #12
 8006c4a:	2b08      	cmp	r3, #8
 8006c4c:	d060      	beq.n	8006d10 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	699b      	ldr	r3, [r3, #24]
 8006c52:	2b02      	cmp	r3, #2
 8006c54:	d145      	bne.n	8006ce2 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006c56:	4b33      	ldr	r3, [pc, #204]	@ (8006d24 <HAL_RCC_OscConfig+0x4b4>)
 8006c58:	2200      	movs	r2, #0
 8006c5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c5c:	f7fd fd38 	bl	80046d0 <HAL_GetTick>
 8006c60:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006c62:	e008      	b.n	8006c76 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006c64:	f7fd fd34 	bl	80046d0 <HAL_GetTick>
 8006c68:	4602      	mov	r2, r0
 8006c6a:	693b      	ldr	r3, [r7, #16]
 8006c6c:	1ad3      	subs	r3, r2, r3
 8006c6e:	2b02      	cmp	r3, #2
 8006c70:	d901      	bls.n	8006c76 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8006c72:	2303      	movs	r3, #3
 8006c74:	e093      	b.n	8006d9e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006c76:	4b29      	ldr	r3, [pc, #164]	@ (8006d1c <HAL_RCC_OscConfig+0x4ac>)
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d1f0      	bne.n	8006c64 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	69da      	ldr	r2, [r3, #28]
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	6a1b      	ldr	r3, [r3, #32]
 8006c8a:	431a      	orrs	r2, r3
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c90:	019b      	lsls	r3, r3, #6
 8006c92:	431a      	orrs	r2, r3
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c98:	085b      	lsrs	r3, r3, #1
 8006c9a:	3b01      	subs	r3, #1
 8006c9c:	041b      	lsls	r3, r3, #16
 8006c9e:	431a      	orrs	r2, r3
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ca4:	061b      	lsls	r3, r3, #24
 8006ca6:	431a      	orrs	r2, r3
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006cac:	071b      	lsls	r3, r3, #28
 8006cae:	491b      	ldr	r1, [pc, #108]	@ (8006d1c <HAL_RCC_OscConfig+0x4ac>)
 8006cb0:	4313      	orrs	r3, r2
 8006cb2:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006cb4:	4b1b      	ldr	r3, [pc, #108]	@ (8006d24 <HAL_RCC_OscConfig+0x4b4>)
 8006cb6:	2201      	movs	r2, #1
 8006cb8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006cba:	f7fd fd09 	bl	80046d0 <HAL_GetTick>
 8006cbe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006cc0:	e008      	b.n	8006cd4 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006cc2:	f7fd fd05 	bl	80046d0 <HAL_GetTick>
 8006cc6:	4602      	mov	r2, r0
 8006cc8:	693b      	ldr	r3, [r7, #16]
 8006cca:	1ad3      	subs	r3, r2, r3
 8006ccc:	2b02      	cmp	r3, #2
 8006cce:	d901      	bls.n	8006cd4 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8006cd0:	2303      	movs	r3, #3
 8006cd2:	e064      	b.n	8006d9e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006cd4:	4b11      	ldr	r3, [pc, #68]	@ (8006d1c <HAL_RCC_OscConfig+0x4ac>)
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d0f0      	beq.n	8006cc2 <HAL_RCC_OscConfig+0x452>
 8006ce0:	e05c      	b.n	8006d9c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006ce2:	4b10      	ldr	r3, [pc, #64]	@ (8006d24 <HAL_RCC_OscConfig+0x4b4>)
 8006ce4:	2200      	movs	r2, #0
 8006ce6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ce8:	f7fd fcf2 	bl	80046d0 <HAL_GetTick>
 8006cec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006cee:	e008      	b.n	8006d02 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006cf0:	f7fd fcee 	bl	80046d0 <HAL_GetTick>
 8006cf4:	4602      	mov	r2, r0
 8006cf6:	693b      	ldr	r3, [r7, #16]
 8006cf8:	1ad3      	subs	r3, r2, r3
 8006cfa:	2b02      	cmp	r3, #2
 8006cfc:	d901      	bls.n	8006d02 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8006cfe:	2303      	movs	r3, #3
 8006d00:	e04d      	b.n	8006d9e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006d02:	4b06      	ldr	r3, [pc, #24]	@ (8006d1c <HAL_RCC_OscConfig+0x4ac>)
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d1f0      	bne.n	8006cf0 <HAL_RCC_OscConfig+0x480>
 8006d0e:	e045      	b.n	8006d9c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	699b      	ldr	r3, [r3, #24]
 8006d14:	2b01      	cmp	r3, #1
 8006d16:	d107      	bne.n	8006d28 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8006d18:	2301      	movs	r3, #1
 8006d1a:	e040      	b.n	8006d9e <HAL_RCC_OscConfig+0x52e>
 8006d1c:	40023800 	.word	0x40023800
 8006d20:	40007000 	.word	0x40007000
 8006d24:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006d28:	4b1f      	ldr	r3, [pc, #124]	@ (8006da8 <HAL_RCC_OscConfig+0x538>)
 8006d2a:	685b      	ldr	r3, [r3, #4]
 8006d2c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	699b      	ldr	r3, [r3, #24]
 8006d32:	2b01      	cmp	r3, #1
 8006d34:	d030      	beq.n	8006d98 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006d40:	429a      	cmp	r2, r3
 8006d42:	d129      	bne.n	8006d98 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006d4e:	429a      	cmp	r2, r3
 8006d50:	d122      	bne.n	8006d98 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006d52:	68fa      	ldr	r2, [r7, #12]
 8006d54:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8006d58:	4013      	ands	r3, r2
 8006d5a:	687a      	ldr	r2, [r7, #4]
 8006d5c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006d5e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006d60:	4293      	cmp	r3, r2
 8006d62:	d119      	bne.n	8006d98 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d6e:	085b      	lsrs	r3, r3, #1
 8006d70:	3b01      	subs	r3, #1
 8006d72:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006d74:	429a      	cmp	r2, r3
 8006d76:	d10f      	bne.n	8006d98 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d82:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006d84:	429a      	cmp	r2, r3
 8006d86:	d107      	bne.n	8006d98 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d92:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006d94:	429a      	cmp	r2, r3
 8006d96:	d001      	beq.n	8006d9c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8006d98:	2301      	movs	r3, #1
 8006d9a:	e000      	b.n	8006d9e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8006d9c:	2300      	movs	r3, #0
}
 8006d9e:	4618      	mov	r0, r3
 8006da0:	3718      	adds	r7, #24
 8006da2:	46bd      	mov	sp, r7
 8006da4:	bd80      	pop	{r7, pc}
 8006da6:	bf00      	nop
 8006da8:	40023800 	.word	0x40023800

08006dac <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006dac:	b580      	push	{r7, lr}
 8006dae:	b082      	sub	sp, #8
 8006db0:	af00      	add	r7, sp, #0
 8006db2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d101      	bne.n	8006dbe <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006dba:	2301      	movs	r3, #1
 8006dbc:	e07b      	b.n	8006eb6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d108      	bne.n	8006dd8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	685b      	ldr	r3, [r3, #4]
 8006dca:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006dce:	d009      	beq.n	8006de4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	2200      	movs	r2, #0
 8006dd4:	61da      	str	r2, [r3, #28]
 8006dd6:	e005      	b.n	8006de4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	2200      	movs	r2, #0
 8006ddc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	2200      	movs	r2, #0
 8006de2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	2200      	movs	r2, #0
 8006de8:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006df0:	b2db      	uxtb	r3, r3
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d106      	bne.n	8006e04 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	2200      	movs	r2, #0
 8006dfa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006dfe:	6878      	ldr	r0, [r7, #4]
 8006e00:	f7fa fb7a 	bl	80014f8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	2202      	movs	r2, #2
 8006e08:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	681a      	ldr	r2, [r3, #0]
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006e1a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	685b      	ldr	r3, [r3, #4]
 8006e20:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	689b      	ldr	r3, [r3, #8]
 8006e28:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8006e2c:	431a      	orrs	r2, r3
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	68db      	ldr	r3, [r3, #12]
 8006e32:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006e36:	431a      	orrs	r2, r3
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	691b      	ldr	r3, [r3, #16]
 8006e3c:	f003 0302 	and.w	r3, r3, #2
 8006e40:	431a      	orrs	r2, r3
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	695b      	ldr	r3, [r3, #20]
 8006e46:	f003 0301 	and.w	r3, r3, #1
 8006e4a:	431a      	orrs	r2, r3
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	699b      	ldr	r3, [r3, #24]
 8006e50:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006e54:	431a      	orrs	r2, r3
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	69db      	ldr	r3, [r3, #28]
 8006e5a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006e5e:	431a      	orrs	r2, r3
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	6a1b      	ldr	r3, [r3, #32]
 8006e64:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006e68:	ea42 0103 	orr.w	r1, r2, r3
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e70:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	430a      	orrs	r2, r1
 8006e7a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	699b      	ldr	r3, [r3, #24]
 8006e80:	0c1b      	lsrs	r3, r3, #16
 8006e82:	f003 0104 	and.w	r1, r3, #4
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e8a:	f003 0210 	and.w	r2, r3, #16
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	430a      	orrs	r2, r1
 8006e94:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	69da      	ldr	r2, [r3, #28]
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006ea4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	2200      	movs	r2, #0
 8006eaa:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	2201      	movs	r2, #1
 8006eb0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8006eb4:	2300      	movs	r3, #0
}
 8006eb6:	4618      	mov	r0, r3
 8006eb8:	3708      	adds	r7, #8
 8006eba:	46bd      	mov	sp, r7
 8006ebc:	bd80      	pop	{r7, pc}

08006ebe <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006ebe:	b580      	push	{r7, lr}
 8006ec0:	b088      	sub	sp, #32
 8006ec2:	af00      	add	r7, sp, #0
 8006ec4:	60f8      	str	r0, [r7, #12]
 8006ec6:	60b9      	str	r1, [r7, #8]
 8006ec8:	603b      	str	r3, [r7, #0]
 8006eca:	4613      	mov	r3, r2
 8006ecc:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006ece:	f7fd fbff 	bl	80046d0 <HAL_GetTick>
 8006ed2:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8006ed4:	88fb      	ldrh	r3, [r7, #6]
 8006ed6:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006ede:	b2db      	uxtb	r3, r3
 8006ee0:	2b01      	cmp	r3, #1
 8006ee2:	d001      	beq.n	8006ee8 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8006ee4:	2302      	movs	r3, #2
 8006ee6:	e12a      	b.n	800713e <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8006ee8:	68bb      	ldr	r3, [r7, #8]
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d002      	beq.n	8006ef4 <HAL_SPI_Transmit+0x36>
 8006eee:	88fb      	ldrh	r3, [r7, #6]
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d101      	bne.n	8006ef8 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8006ef4:	2301      	movs	r3, #1
 8006ef6:	e122      	b.n	800713e <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8006efe:	2b01      	cmp	r3, #1
 8006f00:	d101      	bne.n	8006f06 <HAL_SPI_Transmit+0x48>
 8006f02:	2302      	movs	r3, #2
 8006f04:	e11b      	b.n	800713e <HAL_SPI_Transmit+0x280>
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	2201      	movs	r2, #1
 8006f0a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	2203      	movs	r2, #3
 8006f12:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	2200      	movs	r2, #0
 8006f1a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	68ba      	ldr	r2, [r7, #8]
 8006f20:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	88fa      	ldrh	r2, [r7, #6]
 8006f26:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	88fa      	ldrh	r2, [r7, #6]
 8006f2c:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	2200      	movs	r2, #0
 8006f32:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	2200      	movs	r2, #0
 8006f38:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	2200      	movs	r2, #0
 8006f3e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	2200      	movs	r2, #0
 8006f44:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	2200      	movs	r2, #0
 8006f4a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	689b      	ldr	r3, [r3, #8]
 8006f50:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006f54:	d10f      	bne.n	8006f76 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	681a      	ldr	r2, [r3, #0]
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006f64:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	681a      	ldr	r2, [r3, #0]
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006f74:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006f80:	2b40      	cmp	r3, #64	@ 0x40
 8006f82:	d007      	beq.n	8006f94 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	681a      	ldr	r2, [r3, #0]
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006f92:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	68db      	ldr	r3, [r3, #12]
 8006f98:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006f9c:	d152      	bne.n	8007044 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	685b      	ldr	r3, [r3, #4]
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d002      	beq.n	8006fac <HAL_SPI_Transmit+0xee>
 8006fa6:	8b7b      	ldrh	r3, [r7, #26]
 8006fa8:	2b01      	cmp	r3, #1
 8006faa:	d145      	bne.n	8007038 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006fb0:	881a      	ldrh	r2, [r3, #0]
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006fbc:	1c9a      	adds	r2, r3, #2
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006fc6:	b29b      	uxth	r3, r3
 8006fc8:	3b01      	subs	r3, #1
 8006fca:	b29a      	uxth	r2, r3
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006fd0:	e032      	b.n	8007038 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	689b      	ldr	r3, [r3, #8]
 8006fd8:	f003 0302 	and.w	r3, r3, #2
 8006fdc:	2b02      	cmp	r3, #2
 8006fde:	d112      	bne.n	8007006 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006fe4:	881a      	ldrh	r2, [r3, #0]
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ff0:	1c9a      	adds	r2, r3, #2
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006ffa:	b29b      	uxth	r3, r3
 8006ffc:	3b01      	subs	r3, #1
 8006ffe:	b29a      	uxth	r2, r3
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	86da      	strh	r2, [r3, #54]	@ 0x36
 8007004:	e018      	b.n	8007038 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007006:	f7fd fb63 	bl	80046d0 <HAL_GetTick>
 800700a:	4602      	mov	r2, r0
 800700c:	69fb      	ldr	r3, [r7, #28]
 800700e:	1ad3      	subs	r3, r2, r3
 8007010:	683a      	ldr	r2, [r7, #0]
 8007012:	429a      	cmp	r2, r3
 8007014:	d803      	bhi.n	800701e <HAL_SPI_Transmit+0x160>
 8007016:	683b      	ldr	r3, [r7, #0]
 8007018:	f1b3 3fff 	cmp.w	r3, #4294967295
 800701c:	d102      	bne.n	8007024 <HAL_SPI_Transmit+0x166>
 800701e:	683b      	ldr	r3, [r7, #0]
 8007020:	2b00      	cmp	r3, #0
 8007022:	d109      	bne.n	8007038 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	2201      	movs	r2, #1
 8007028:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	2200      	movs	r2, #0
 8007030:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8007034:	2303      	movs	r3, #3
 8007036:	e082      	b.n	800713e <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800703c:	b29b      	uxth	r3, r3
 800703e:	2b00      	cmp	r3, #0
 8007040:	d1c7      	bne.n	8006fd2 <HAL_SPI_Transmit+0x114>
 8007042:	e053      	b.n	80070ec <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	685b      	ldr	r3, [r3, #4]
 8007048:	2b00      	cmp	r3, #0
 800704a:	d002      	beq.n	8007052 <HAL_SPI_Transmit+0x194>
 800704c:	8b7b      	ldrh	r3, [r7, #26]
 800704e:	2b01      	cmp	r3, #1
 8007050:	d147      	bne.n	80070e2 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	330c      	adds	r3, #12
 800705c:	7812      	ldrb	r2, [r2, #0]
 800705e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007064:	1c5a      	adds	r2, r3, #1
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800706e:	b29b      	uxth	r3, r3
 8007070:	3b01      	subs	r3, #1
 8007072:	b29a      	uxth	r2, r3
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8007078:	e033      	b.n	80070e2 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	689b      	ldr	r3, [r3, #8]
 8007080:	f003 0302 	and.w	r3, r3, #2
 8007084:	2b02      	cmp	r3, #2
 8007086:	d113      	bne.n	80070b0 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	330c      	adds	r3, #12
 8007092:	7812      	ldrb	r2, [r2, #0]
 8007094:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800709a:	1c5a      	adds	r2, r3, #1
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80070a4:	b29b      	uxth	r3, r3
 80070a6:	3b01      	subs	r3, #1
 80070a8:	b29a      	uxth	r2, r3
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	86da      	strh	r2, [r3, #54]	@ 0x36
 80070ae:	e018      	b.n	80070e2 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80070b0:	f7fd fb0e 	bl	80046d0 <HAL_GetTick>
 80070b4:	4602      	mov	r2, r0
 80070b6:	69fb      	ldr	r3, [r7, #28]
 80070b8:	1ad3      	subs	r3, r2, r3
 80070ba:	683a      	ldr	r2, [r7, #0]
 80070bc:	429a      	cmp	r2, r3
 80070be:	d803      	bhi.n	80070c8 <HAL_SPI_Transmit+0x20a>
 80070c0:	683b      	ldr	r3, [r7, #0]
 80070c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070c6:	d102      	bne.n	80070ce <HAL_SPI_Transmit+0x210>
 80070c8:	683b      	ldr	r3, [r7, #0]
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d109      	bne.n	80070e2 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	2201      	movs	r2, #1
 80070d2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	2200      	movs	r2, #0
 80070da:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80070de:	2303      	movs	r3, #3
 80070e0:	e02d      	b.n	800713e <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80070e6:	b29b      	uxth	r3, r3
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d1c6      	bne.n	800707a <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80070ec:	69fa      	ldr	r2, [r7, #28]
 80070ee:	6839      	ldr	r1, [r7, #0]
 80070f0:	68f8      	ldr	r0, [r7, #12]
 80070f2:	f000 fa59 	bl	80075a8 <SPI_EndRxTxTransaction>
 80070f6:	4603      	mov	r3, r0
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d002      	beq.n	8007102 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	2220      	movs	r2, #32
 8007100:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	689b      	ldr	r3, [r3, #8]
 8007106:	2b00      	cmp	r3, #0
 8007108:	d10a      	bne.n	8007120 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800710a:	2300      	movs	r3, #0
 800710c:	617b      	str	r3, [r7, #20]
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	68db      	ldr	r3, [r3, #12]
 8007114:	617b      	str	r3, [r7, #20]
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	689b      	ldr	r3, [r3, #8]
 800711c:	617b      	str	r3, [r7, #20]
 800711e:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	2201      	movs	r2, #1
 8007124:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	2200      	movs	r2, #0
 800712c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007134:	2b00      	cmp	r3, #0
 8007136:	d001      	beq.n	800713c <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8007138:	2301      	movs	r3, #1
 800713a:	e000      	b.n	800713e <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 800713c:	2300      	movs	r3, #0
  }
}
 800713e:	4618      	mov	r0, r3
 8007140:	3720      	adds	r7, #32
 8007142:	46bd      	mov	sp, r7
 8007144:	bd80      	pop	{r7, pc}

08007146 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8007146:	b580      	push	{r7, lr}
 8007148:	b08a      	sub	sp, #40	@ 0x28
 800714a:	af00      	add	r7, sp, #0
 800714c:	60f8      	str	r0, [r7, #12]
 800714e:	60b9      	str	r1, [r7, #8]
 8007150:	607a      	str	r2, [r7, #4]
 8007152:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8007154:	2301      	movs	r3, #1
 8007156:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007158:	f7fd faba 	bl	80046d0 <HAL_GetTick>
 800715c:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007164:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	685b      	ldr	r3, [r3, #4]
 800716a:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800716c:	887b      	ldrh	r3, [r7, #2]
 800716e:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007170:	7ffb      	ldrb	r3, [r7, #31]
 8007172:	2b01      	cmp	r3, #1
 8007174:	d00c      	beq.n	8007190 <HAL_SPI_TransmitReceive+0x4a>
 8007176:	69bb      	ldr	r3, [r7, #24]
 8007178:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800717c:	d106      	bne.n	800718c <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	689b      	ldr	r3, [r3, #8]
 8007182:	2b00      	cmp	r3, #0
 8007184:	d102      	bne.n	800718c <HAL_SPI_TransmitReceive+0x46>
 8007186:	7ffb      	ldrb	r3, [r7, #31]
 8007188:	2b04      	cmp	r3, #4
 800718a:	d001      	beq.n	8007190 <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 800718c:	2302      	movs	r3, #2
 800718e:	e17f      	b.n	8007490 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007190:	68bb      	ldr	r3, [r7, #8]
 8007192:	2b00      	cmp	r3, #0
 8007194:	d005      	beq.n	80071a2 <HAL_SPI_TransmitReceive+0x5c>
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	2b00      	cmp	r3, #0
 800719a:	d002      	beq.n	80071a2 <HAL_SPI_TransmitReceive+0x5c>
 800719c:	887b      	ldrh	r3, [r7, #2]
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d101      	bne.n	80071a6 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 80071a2:	2301      	movs	r3, #1
 80071a4:	e174      	b.n	8007490 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80071ac:	2b01      	cmp	r3, #1
 80071ae:	d101      	bne.n	80071b4 <HAL_SPI_TransmitReceive+0x6e>
 80071b0:	2302      	movs	r3, #2
 80071b2:	e16d      	b.n	8007490 <HAL_SPI_TransmitReceive+0x34a>
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	2201      	movs	r2, #1
 80071b8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80071c2:	b2db      	uxtb	r3, r3
 80071c4:	2b04      	cmp	r3, #4
 80071c6:	d003      	beq.n	80071d0 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	2205      	movs	r2, #5
 80071cc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	2200      	movs	r2, #0
 80071d4:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	687a      	ldr	r2, [r7, #4]
 80071da:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	887a      	ldrh	r2, [r7, #2]
 80071e0:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	887a      	ldrh	r2, [r7, #2]
 80071e6:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	68ba      	ldr	r2, [r7, #8]
 80071ec:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	887a      	ldrh	r2, [r7, #2]
 80071f2:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	887a      	ldrh	r2, [r7, #2]
 80071f8:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	2200      	movs	r2, #0
 80071fe:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	2200      	movs	r2, #0
 8007204:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007210:	2b40      	cmp	r3, #64	@ 0x40
 8007212:	d007      	beq.n	8007224 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	681a      	ldr	r2, [r3, #0]
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007222:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	68db      	ldr	r3, [r3, #12]
 8007228:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800722c:	d17e      	bne.n	800732c <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	685b      	ldr	r3, [r3, #4]
 8007232:	2b00      	cmp	r3, #0
 8007234:	d002      	beq.n	800723c <HAL_SPI_TransmitReceive+0xf6>
 8007236:	8afb      	ldrh	r3, [r7, #22]
 8007238:	2b01      	cmp	r3, #1
 800723a:	d16c      	bne.n	8007316 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007240:	881a      	ldrh	r2, [r3, #0]
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800724c:	1c9a      	adds	r2, r3, #2
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007256:	b29b      	uxth	r3, r3
 8007258:	3b01      	subs	r3, #1
 800725a:	b29a      	uxth	r2, r3
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007260:	e059      	b.n	8007316 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	689b      	ldr	r3, [r3, #8]
 8007268:	f003 0302 	and.w	r3, r3, #2
 800726c:	2b02      	cmp	r3, #2
 800726e:	d11b      	bne.n	80072a8 <HAL_SPI_TransmitReceive+0x162>
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007274:	b29b      	uxth	r3, r3
 8007276:	2b00      	cmp	r3, #0
 8007278:	d016      	beq.n	80072a8 <HAL_SPI_TransmitReceive+0x162>
 800727a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800727c:	2b01      	cmp	r3, #1
 800727e:	d113      	bne.n	80072a8 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007284:	881a      	ldrh	r2, [r3, #0]
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007290:	1c9a      	adds	r2, r3, #2
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800729a:	b29b      	uxth	r3, r3
 800729c:	3b01      	subs	r3, #1
 800729e:	b29a      	uxth	r2, r3
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80072a4:	2300      	movs	r3, #0
 80072a6:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	689b      	ldr	r3, [r3, #8]
 80072ae:	f003 0301 	and.w	r3, r3, #1
 80072b2:	2b01      	cmp	r3, #1
 80072b4:	d119      	bne.n	80072ea <HAL_SPI_TransmitReceive+0x1a4>
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80072ba:	b29b      	uxth	r3, r3
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d014      	beq.n	80072ea <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	68da      	ldr	r2, [r3, #12]
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80072ca:	b292      	uxth	r2, r2
 80072cc:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80072d2:	1c9a      	adds	r2, r3, #2
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80072dc:	b29b      	uxth	r3, r3
 80072de:	3b01      	subs	r3, #1
 80072e0:	b29a      	uxth	r2, r3
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80072e6:	2301      	movs	r3, #1
 80072e8:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80072ea:	f7fd f9f1 	bl	80046d0 <HAL_GetTick>
 80072ee:	4602      	mov	r2, r0
 80072f0:	6a3b      	ldr	r3, [r7, #32]
 80072f2:	1ad3      	subs	r3, r2, r3
 80072f4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80072f6:	429a      	cmp	r2, r3
 80072f8:	d80d      	bhi.n	8007316 <HAL_SPI_TransmitReceive+0x1d0>
 80072fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007300:	d009      	beq.n	8007316 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	2201      	movs	r2, #1
 8007306:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	2200      	movs	r2, #0
 800730e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8007312:	2303      	movs	r3, #3
 8007314:	e0bc      	b.n	8007490 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800731a:	b29b      	uxth	r3, r3
 800731c:	2b00      	cmp	r3, #0
 800731e:	d1a0      	bne.n	8007262 <HAL_SPI_TransmitReceive+0x11c>
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007324:	b29b      	uxth	r3, r3
 8007326:	2b00      	cmp	r3, #0
 8007328:	d19b      	bne.n	8007262 <HAL_SPI_TransmitReceive+0x11c>
 800732a:	e082      	b.n	8007432 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	685b      	ldr	r3, [r3, #4]
 8007330:	2b00      	cmp	r3, #0
 8007332:	d002      	beq.n	800733a <HAL_SPI_TransmitReceive+0x1f4>
 8007334:	8afb      	ldrh	r3, [r7, #22]
 8007336:	2b01      	cmp	r3, #1
 8007338:	d171      	bne.n	800741e <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	330c      	adds	r3, #12
 8007344:	7812      	ldrb	r2, [r2, #0]
 8007346:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800734c:	1c5a      	adds	r2, r3, #1
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007356:	b29b      	uxth	r3, r3
 8007358:	3b01      	subs	r3, #1
 800735a:	b29a      	uxth	r2, r3
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007360:	e05d      	b.n	800741e <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	689b      	ldr	r3, [r3, #8]
 8007368:	f003 0302 	and.w	r3, r3, #2
 800736c:	2b02      	cmp	r3, #2
 800736e:	d11c      	bne.n	80073aa <HAL_SPI_TransmitReceive+0x264>
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007374:	b29b      	uxth	r3, r3
 8007376:	2b00      	cmp	r3, #0
 8007378:	d017      	beq.n	80073aa <HAL_SPI_TransmitReceive+0x264>
 800737a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800737c:	2b01      	cmp	r3, #1
 800737e:	d114      	bne.n	80073aa <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	330c      	adds	r3, #12
 800738a:	7812      	ldrb	r2, [r2, #0]
 800738c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007392:	1c5a      	adds	r2, r3, #1
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800739c:	b29b      	uxth	r3, r3
 800739e:	3b01      	subs	r3, #1
 80073a0:	b29a      	uxth	r2, r3
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80073a6:	2300      	movs	r3, #0
 80073a8:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	689b      	ldr	r3, [r3, #8]
 80073b0:	f003 0301 	and.w	r3, r3, #1
 80073b4:	2b01      	cmp	r3, #1
 80073b6:	d119      	bne.n	80073ec <HAL_SPI_TransmitReceive+0x2a6>
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80073bc:	b29b      	uxth	r3, r3
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d014      	beq.n	80073ec <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	68da      	ldr	r2, [r3, #12]
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80073cc:	b2d2      	uxtb	r2, r2
 80073ce:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80073d4:	1c5a      	adds	r2, r3, #1
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80073de:	b29b      	uxth	r3, r3
 80073e0:	3b01      	subs	r3, #1
 80073e2:	b29a      	uxth	r2, r3
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80073e8:	2301      	movs	r3, #1
 80073ea:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80073ec:	f7fd f970 	bl	80046d0 <HAL_GetTick>
 80073f0:	4602      	mov	r2, r0
 80073f2:	6a3b      	ldr	r3, [r7, #32]
 80073f4:	1ad3      	subs	r3, r2, r3
 80073f6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80073f8:	429a      	cmp	r2, r3
 80073fa:	d803      	bhi.n	8007404 <HAL_SPI_TransmitReceive+0x2be>
 80073fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007402:	d102      	bne.n	800740a <HAL_SPI_TransmitReceive+0x2c4>
 8007404:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007406:	2b00      	cmp	r3, #0
 8007408:	d109      	bne.n	800741e <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	2201      	movs	r2, #1
 800740e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	2200      	movs	r2, #0
 8007416:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 800741a:	2303      	movs	r3, #3
 800741c:	e038      	b.n	8007490 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007422:	b29b      	uxth	r3, r3
 8007424:	2b00      	cmp	r3, #0
 8007426:	d19c      	bne.n	8007362 <HAL_SPI_TransmitReceive+0x21c>
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800742c:	b29b      	uxth	r3, r3
 800742e:	2b00      	cmp	r3, #0
 8007430:	d197      	bne.n	8007362 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007432:	6a3a      	ldr	r2, [r7, #32]
 8007434:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8007436:	68f8      	ldr	r0, [r7, #12]
 8007438:	f000 f8b6 	bl	80075a8 <SPI_EndRxTxTransaction>
 800743c:	4603      	mov	r3, r0
 800743e:	2b00      	cmp	r3, #0
 8007440:	d008      	beq.n	8007454 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	2220      	movs	r2, #32
 8007446:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	2200      	movs	r2, #0
 800744c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8007450:	2301      	movs	r3, #1
 8007452:	e01d      	b.n	8007490 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	689b      	ldr	r3, [r3, #8]
 8007458:	2b00      	cmp	r3, #0
 800745a:	d10a      	bne.n	8007472 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800745c:	2300      	movs	r3, #0
 800745e:	613b      	str	r3, [r7, #16]
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	68db      	ldr	r3, [r3, #12]
 8007466:	613b      	str	r3, [r7, #16]
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	689b      	ldr	r3, [r3, #8]
 800746e:	613b      	str	r3, [r7, #16]
 8007470:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	2201      	movs	r2, #1
 8007476:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	2200      	movs	r2, #0
 800747e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007486:	2b00      	cmp	r3, #0
 8007488:	d001      	beq.n	800748e <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 800748a:	2301      	movs	r3, #1
 800748c:	e000      	b.n	8007490 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 800748e:	2300      	movs	r3, #0
  }
}
 8007490:	4618      	mov	r0, r3
 8007492:	3728      	adds	r7, #40	@ 0x28
 8007494:	46bd      	mov	sp, r7
 8007496:	bd80      	pop	{r7, pc}

08007498 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007498:	b580      	push	{r7, lr}
 800749a:	b088      	sub	sp, #32
 800749c:	af00      	add	r7, sp, #0
 800749e:	60f8      	str	r0, [r7, #12]
 80074a0:	60b9      	str	r1, [r7, #8]
 80074a2:	603b      	str	r3, [r7, #0]
 80074a4:	4613      	mov	r3, r2
 80074a6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80074a8:	f7fd f912 	bl	80046d0 <HAL_GetTick>
 80074ac:	4602      	mov	r2, r0
 80074ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074b0:	1a9b      	subs	r3, r3, r2
 80074b2:	683a      	ldr	r2, [r7, #0]
 80074b4:	4413      	add	r3, r2
 80074b6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80074b8:	f7fd f90a 	bl	80046d0 <HAL_GetTick>
 80074bc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80074be:	4b39      	ldr	r3, [pc, #228]	@ (80075a4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	015b      	lsls	r3, r3, #5
 80074c4:	0d1b      	lsrs	r3, r3, #20
 80074c6:	69fa      	ldr	r2, [r7, #28]
 80074c8:	fb02 f303 	mul.w	r3, r2, r3
 80074cc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80074ce:	e054      	b.n	800757a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80074d0:	683b      	ldr	r3, [r7, #0]
 80074d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074d6:	d050      	beq.n	800757a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80074d8:	f7fd f8fa 	bl	80046d0 <HAL_GetTick>
 80074dc:	4602      	mov	r2, r0
 80074de:	69bb      	ldr	r3, [r7, #24]
 80074e0:	1ad3      	subs	r3, r2, r3
 80074e2:	69fa      	ldr	r2, [r7, #28]
 80074e4:	429a      	cmp	r2, r3
 80074e6:	d902      	bls.n	80074ee <SPI_WaitFlagStateUntilTimeout+0x56>
 80074e8:	69fb      	ldr	r3, [r7, #28]
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d13d      	bne.n	800756a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	685a      	ldr	r2, [r3, #4]
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80074fc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	685b      	ldr	r3, [r3, #4]
 8007502:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007506:	d111      	bne.n	800752c <SPI_WaitFlagStateUntilTimeout+0x94>
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	689b      	ldr	r3, [r3, #8]
 800750c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007510:	d004      	beq.n	800751c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	689b      	ldr	r3, [r3, #8]
 8007516:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800751a:	d107      	bne.n	800752c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	681a      	ldr	r2, [r3, #0]
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800752a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007530:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007534:	d10f      	bne.n	8007556 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	681a      	ldr	r2, [r3, #0]
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007544:	601a      	str	r2, [r3, #0]
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	681a      	ldr	r2, [r3, #0]
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007554:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	2201      	movs	r2, #1
 800755a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	2200      	movs	r2, #0
 8007562:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8007566:	2303      	movs	r3, #3
 8007568:	e017      	b.n	800759a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800756a:	697b      	ldr	r3, [r7, #20]
 800756c:	2b00      	cmp	r3, #0
 800756e:	d101      	bne.n	8007574 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007570:	2300      	movs	r3, #0
 8007572:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007574:	697b      	ldr	r3, [r7, #20]
 8007576:	3b01      	subs	r3, #1
 8007578:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	689a      	ldr	r2, [r3, #8]
 8007580:	68bb      	ldr	r3, [r7, #8]
 8007582:	4013      	ands	r3, r2
 8007584:	68ba      	ldr	r2, [r7, #8]
 8007586:	429a      	cmp	r2, r3
 8007588:	bf0c      	ite	eq
 800758a:	2301      	moveq	r3, #1
 800758c:	2300      	movne	r3, #0
 800758e:	b2db      	uxtb	r3, r3
 8007590:	461a      	mov	r2, r3
 8007592:	79fb      	ldrb	r3, [r7, #7]
 8007594:	429a      	cmp	r2, r3
 8007596:	d19b      	bne.n	80074d0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007598:	2300      	movs	r3, #0
}
 800759a:	4618      	mov	r0, r3
 800759c:	3720      	adds	r7, #32
 800759e:	46bd      	mov	sp, r7
 80075a0:	bd80      	pop	{r7, pc}
 80075a2:	bf00      	nop
 80075a4:	20000000 	.word	0x20000000

080075a8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80075a8:	b580      	push	{r7, lr}
 80075aa:	b088      	sub	sp, #32
 80075ac:	af02      	add	r7, sp, #8
 80075ae:	60f8      	str	r0, [r7, #12]
 80075b0:	60b9      	str	r1, [r7, #8]
 80075b2:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	9300      	str	r3, [sp, #0]
 80075b8:	68bb      	ldr	r3, [r7, #8]
 80075ba:	2201      	movs	r2, #1
 80075bc:	2102      	movs	r1, #2
 80075be:	68f8      	ldr	r0, [r7, #12]
 80075c0:	f7ff ff6a 	bl	8007498 <SPI_WaitFlagStateUntilTimeout>
 80075c4:	4603      	mov	r3, r0
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d007      	beq.n	80075da <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80075ce:	f043 0220 	orr.w	r2, r3, #32
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80075d6:	2303      	movs	r3, #3
 80075d8:	e032      	b.n	8007640 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80075da:	4b1b      	ldr	r3, [pc, #108]	@ (8007648 <SPI_EndRxTxTransaction+0xa0>)
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	4a1b      	ldr	r2, [pc, #108]	@ (800764c <SPI_EndRxTxTransaction+0xa4>)
 80075e0:	fba2 2303 	umull	r2, r3, r2, r3
 80075e4:	0d5b      	lsrs	r3, r3, #21
 80075e6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80075ea:	fb02 f303 	mul.w	r3, r2, r3
 80075ee:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	685b      	ldr	r3, [r3, #4]
 80075f4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80075f8:	d112      	bne.n	8007620 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	9300      	str	r3, [sp, #0]
 80075fe:	68bb      	ldr	r3, [r7, #8]
 8007600:	2200      	movs	r2, #0
 8007602:	2180      	movs	r1, #128	@ 0x80
 8007604:	68f8      	ldr	r0, [r7, #12]
 8007606:	f7ff ff47 	bl	8007498 <SPI_WaitFlagStateUntilTimeout>
 800760a:	4603      	mov	r3, r0
 800760c:	2b00      	cmp	r3, #0
 800760e:	d016      	beq.n	800763e <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007614:	f043 0220 	orr.w	r2, r3, #32
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800761c:	2303      	movs	r3, #3
 800761e:	e00f      	b.n	8007640 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8007620:	697b      	ldr	r3, [r7, #20]
 8007622:	2b00      	cmp	r3, #0
 8007624:	d00a      	beq.n	800763c <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8007626:	697b      	ldr	r3, [r7, #20]
 8007628:	3b01      	subs	r3, #1
 800762a:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	689b      	ldr	r3, [r3, #8]
 8007632:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007636:	2b80      	cmp	r3, #128	@ 0x80
 8007638:	d0f2      	beq.n	8007620 <SPI_EndRxTxTransaction+0x78>
 800763a:	e000      	b.n	800763e <SPI_EndRxTxTransaction+0x96>
        break;
 800763c:	bf00      	nop
  }

  return HAL_OK;
 800763e:	2300      	movs	r3, #0
}
 8007640:	4618      	mov	r0, r3
 8007642:	3718      	adds	r7, #24
 8007644:	46bd      	mov	sp, r7
 8007646:	bd80      	pop	{r7, pc}
 8007648:	20000000 	.word	0x20000000
 800764c:	165e9f81 	.word	0x165e9f81

08007650 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007650:	b580      	push	{r7, lr}
 8007652:	b082      	sub	sp, #8
 8007654:	af00      	add	r7, sp, #0
 8007656:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	2b00      	cmp	r3, #0
 800765c:	d101      	bne.n	8007662 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800765e:	2301      	movs	r3, #1
 8007660:	e041      	b.n	80076e6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007668:	b2db      	uxtb	r3, r3
 800766a:	2b00      	cmp	r3, #0
 800766c:	d106      	bne.n	800767c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	2200      	movs	r2, #0
 8007672:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007676:	6878      	ldr	r0, [r7, #4]
 8007678:	f7f9 ffbc 	bl	80015f4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	2202      	movs	r2, #2
 8007680:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	681a      	ldr	r2, [r3, #0]
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	3304      	adds	r3, #4
 800768c:	4619      	mov	r1, r3
 800768e:	4610      	mov	r0, r2
 8007690:	f000 faac 	bl	8007bec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	2201      	movs	r2, #1
 8007698:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	2201      	movs	r2, #1
 80076a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	2201      	movs	r2, #1
 80076a8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	2201      	movs	r2, #1
 80076b0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	2201      	movs	r2, #1
 80076b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	2201      	movs	r2, #1
 80076c0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	2201      	movs	r2, #1
 80076c8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	2201      	movs	r2, #1
 80076d0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	2201      	movs	r2, #1
 80076d8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	2201      	movs	r2, #1
 80076e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80076e4:	2300      	movs	r3, #0
}
 80076e6:	4618      	mov	r0, r3
 80076e8:	3708      	adds	r7, #8
 80076ea:	46bd      	mov	sp, r7
 80076ec:	bd80      	pop	{r7, pc}
	...

080076f0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80076f0:	b480      	push	{r7}
 80076f2:	b085      	sub	sp, #20
 80076f4:	af00      	add	r7, sp, #0
 80076f6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80076fe:	b2db      	uxtb	r3, r3
 8007700:	2b01      	cmp	r3, #1
 8007702:	d001      	beq.n	8007708 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007704:	2301      	movs	r3, #1
 8007706:	e04e      	b.n	80077a6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	2202      	movs	r2, #2
 800770c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	68da      	ldr	r2, [r3, #12]
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	f042 0201 	orr.w	r2, r2, #1
 800771e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	4a23      	ldr	r2, [pc, #140]	@ (80077b4 <HAL_TIM_Base_Start_IT+0xc4>)
 8007726:	4293      	cmp	r3, r2
 8007728:	d022      	beq.n	8007770 <HAL_TIM_Base_Start_IT+0x80>
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007732:	d01d      	beq.n	8007770 <HAL_TIM_Base_Start_IT+0x80>
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	4a1f      	ldr	r2, [pc, #124]	@ (80077b8 <HAL_TIM_Base_Start_IT+0xc8>)
 800773a:	4293      	cmp	r3, r2
 800773c:	d018      	beq.n	8007770 <HAL_TIM_Base_Start_IT+0x80>
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	4a1e      	ldr	r2, [pc, #120]	@ (80077bc <HAL_TIM_Base_Start_IT+0xcc>)
 8007744:	4293      	cmp	r3, r2
 8007746:	d013      	beq.n	8007770 <HAL_TIM_Base_Start_IT+0x80>
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	4a1c      	ldr	r2, [pc, #112]	@ (80077c0 <HAL_TIM_Base_Start_IT+0xd0>)
 800774e:	4293      	cmp	r3, r2
 8007750:	d00e      	beq.n	8007770 <HAL_TIM_Base_Start_IT+0x80>
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	4a1b      	ldr	r2, [pc, #108]	@ (80077c4 <HAL_TIM_Base_Start_IT+0xd4>)
 8007758:	4293      	cmp	r3, r2
 800775a:	d009      	beq.n	8007770 <HAL_TIM_Base_Start_IT+0x80>
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	4a19      	ldr	r2, [pc, #100]	@ (80077c8 <HAL_TIM_Base_Start_IT+0xd8>)
 8007762:	4293      	cmp	r3, r2
 8007764:	d004      	beq.n	8007770 <HAL_TIM_Base_Start_IT+0x80>
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	4a18      	ldr	r2, [pc, #96]	@ (80077cc <HAL_TIM_Base_Start_IT+0xdc>)
 800776c:	4293      	cmp	r3, r2
 800776e:	d111      	bne.n	8007794 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	689b      	ldr	r3, [r3, #8]
 8007776:	f003 0307 	and.w	r3, r3, #7
 800777a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	2b06      	cmp	r3, #6
 8007780:	d010      	beq.n	80077a4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	681a      	ldr	r2, [r3, #0]
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	f042 0201 	orr.w	r2, r2, #1
 8007790:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007792:	e007      	b.n	80077a4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	681a      	ldr	r2, [r3, #0]
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	f042 0201 	orr.w	r2, r2, #1
 80077a2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80077a4:	2300      	movs	r3, #0
}
 80077a6:	4618      	mov	r0, r3
 80077a8:	3714      	adds	r7, #20
 80077aa:	46bd      	mov	sp, r7
 80077ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077b0:	4770      	bx	lr
 80077b2:	bf00      	nop
 80077b4:	40010000 	.word	0x40010000
 80077b8:	40000400 	.word	0x40000400
 80077bc:	40000800 	.word	0x40000800
 80077c0:	40000c00 	.word	0x40000c00
 80077c4:	40010400 	.word	0x40010400
 80077c8:	40014000 	.word	0x40014000
 80077cc:	40001800 	.word	0x40001800

080077d0 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80077d0:	b480      	push	{r7}
 80077d2:	b083      	sub	sp, #12
 80077d4:	af00      	add	r7, sp, #0
 80077d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	68da      	ldr	r2, [r3, #12]
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	f022 0201 	bic.w	r2, r2, #1
 80077e6:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	6a1a      	ldr	r2, [r3, #32]
 80077ee:	f241 1311 	movw	r3, #4369	@ 0x1111
 80077f2:	4013      	ands	r3, r2
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d10f      	bne.n	8007818 <HAL_TIM_Base_Stop_IT+0x48>
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	6a1a      	ldr	r2, [r3, #32]
 80077fe:	f240 4344 	movw	r3, #1092	@ 0x444
 8007802:	4013      	ands	r3, r2
 8007804:	2b00      	cmp	r3, #0
 8007806:	d107      	bne.n	8007818 <HAL_TIM_Base_Stop_IT+0x48>
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	681a      	ldr	r2, [r3, #0]
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	f022 0201 	bic.w	r2, r2, #1
 8007816:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	2201      	movs	r2, #1
 800781c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8007820:	2300      	movs	r3, #0
}
 8007822:	4618      	mov	r0, r3
 8007824:	370c      	adds	r7, #12
 8007826:	46bd      	mov	sp, r7
 8007828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800782c:	4770      	bx	lr

0800782e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800782e:	b580      	push	{r7, lr}
 8007830:	b084      	sub	sp, #16
 8007832:	af00      	add	r7, sp, #0
 8007834:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	68db      	ldr	r3, [r3, #12]
 800783c:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	691b      	ldr	r3, [r3, #16]
 8007844:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8007846:	68bb      	ldr	r3, [r7, #8]
 8007848:	f003 0302 	and.w	r3, r3, #2
 800784c:	2b00      	cmp	r3, #0
 800784e:	d020      	beq.n	8007892 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	f003 0302 	and.w	r3, r3, #2
 8007856:	2b00      	cmp	r3, #0
 8007858:	d01b      	beq.n	8007892 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	f06f 0202 	mvn.w	r2, #2
 8007862:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	2201      	movs	r2, #1
 8007868:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	699b      	ldr	r3, [r3, #24]
 8007870:	f003 0303 	and.w	r3, r3, #3
 8007874:	2b00      	cmp	r3, #0
 8007876:	d003      	beq.n	8007880 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007878:	6878      	ldr	r0, [r7, #4]
 800787a:	f000 f999 	bl	8007bb0 <HAL_TIM_IC_CaptureCallback>
 800787e:	e005      	b.n	800788c <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007880:	6878      	ldr	r0, [r7, #4]
 8007882:	f000 f98b 	bl	8007b9c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007886:	6878      	ldr	r0, [r7, #4]
 8007888:	f000 f99c 	bl	8007bc4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	2200      	movs	r2, #0
 8007890:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8007892:	68bb      	ldr	r3, [r7, #8]
 8007894:	f003 0304 	and.w	r3, r3, #4
 8007898:	2b00      	cmp	r3, #0
 800789a:	d020      	beq.n	80078de <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	f003 0304 	and.w	r3, r3, #4
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d01b      	beq.n	80078de <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	f06f 0204 	mvn.w	r2, #4
 80078ae:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	2202      	movs	r2, #2
 80078b4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	699b      	ldr	r3, [r3, #24]
 80078bc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d003      	beq.n	80078cc <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80078c4:	6878      	ldr	r0, [r7, #4]
 80078c6:	f000 f973 	bl	8007bb0 <HAL_TIM_IC_CaptureCallback>
 80078ca:	e005      	b.n	80078d8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80078cc:	6878      	ldr	r0, [r7, #4]
 80078ce:	f000 f965 	bl	8007b9c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80078d2:	6878      	ldr	r0, [r7, #4]
 80078d4:	f000 f976 	bl	8007bc4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	2200      	movs	r2, #0
 80078dc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80078de:	68bb      	ldr	r3, [r7, #8]
 80078e0:	f003 0308 	and.w	r3, r3, #8
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d020      	beq.n	800792a <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	f003 0308 	and.w	r3, r3, #8
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d01b      	beq.n	800792a <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	f06f 0208 	mvn.w	r2, #8
 80078fa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	2204      	movs	r2, #4
 8007900:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	69db      	ldr	r3, [r3, #28]
 8007908:	f003 0303 	and.w	r3, r3, #3
 800790c:	2b00      	cmp	r3, #0
 800790e:	d003      	beq.n	8007918 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007910:	6878      	ldr	r0, [r7, #4]
 8007912:	f000 f94d 	bl	8007bb0 <HAL_TIM_IC_CaptureCallback>
 8007916:	e005      	b.n	8007924 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007918:	6878      	ldr	r0, [r7, #4]
 800791a:	f000 f93f 	bl	8007b9c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800791e:	6878      	ldr	r0, [r7, #4]
 8007920:	f000 f950 	bl	8007bc4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	2200      	movs	r2, #0
 8007928:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800792a:	68bb      	ldr	r3, [r7, #8]
 800792c:	f003 0310 	and.w	r3, r3, #16
 8007930:	2b00      	cmp	r3, #0
 8007932:	d020      	beq.n	8007976 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	f003 0310 	and.w	r3, r3, #16
 800793a:	2b00      	cmp	r3, #0
 800793c:	d01b      	beq.n	8007976 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	f06f 0210 	mvn.w	r2, #16
 8007946:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	2208      	movs	r2, #8
 800794c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	69db      	ldr	r3, [r3, #28]
 8007954:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007958:	2b00      	cmp	r3, #0
 800795a:	d003      	beq.n	8007964 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800795c:	6878      	ldr	r0, [r7, #4]
 800795e:	f000 f927 	bl	8007bb0 <HAL_TIM_IC_CaptureCallback>
 8007962:	e005      	b.n	8007970 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007964:	6878      	ldr	r0, [r7, #4]
 8007966:	f000 f919 	bl	8007b9c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800796a:	6878      	ldr	r0, [r7, #4]
 800796c:	f000 f92a 	bl	8007bc4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	2200      	movs	r2, #0
 8007974:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8007976:	68bb      	ldr	r3, [r7, #8]
 8007978:	f003 0301 	and.w	r3, r3, #1
 800797c:	2b00      	cmp	r3, #0
 800797e:	d00c      	beq.n	800799a <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	f003 0301 	and.w	r3, r3, #1
 8007986:	2b00      	cmp	r3, #0
 8007988:	d007      	beq.n	800799a <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	f06f 0201 	mvn.w	r2, #1
 8007992:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007994:	6878      	ldr	r0, [r7, #4]
 8007996:	f7f9 fcb3 	bl	8001300 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800799a:	68bb      	ldr	r3, [r7, #8]
 800799c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d00c      	beq.n	80079be <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d007      	beq.n	80079be <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80079b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80079b8:	6878      	ldr	r0, [r7, #4]
 80079ba:	f000 fae3 	bl	8007f84 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80079be:	68bb      	ldr	r3, [r7, #8]
 80079c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d00c      	beq.n	80079e2 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d007      	beq.n	80079e2 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80079da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80079dc:	6878      	ldr	r0, [r7, #4]
 80079de:	f000 f8fb 	bl	8007bd8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80079e2:	68bb      	ldr	r3, [r7, #8]
 80079e4:	f003 0320 	and.w	r3, r3, #32
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d00c      	beq.n	8007a06 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	f003 0320 	and.w	r3, r3, #32
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d007      	beq.n	8007a06 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	f06f 0220 	mvn.w	r2, #32
 80079fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007a00:	6878      	ldr	r0, [r7, #4]
 8007a02:	f000 fab5 	bl	8007f70 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007a06:	bf00      	nop
 8007a08:	3710      	adds	r7, #16
 8007a0a:	46bd      	mov	sp, r7
 8007a0c:	bd80      	pop	{r7, pc}

08007a0e <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007a0e:	b580      	push	{r7, lr}
 8007a10:	b084      	sub	sp, #16
 8007a12:	af00      	add	r7, sp, #0
 8007a14:	6078      	str	r0, [r7, #4]
 8007a16:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007a18:	2300      	movs	r3, #0
 8007a1a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007a22:	2b01      	cmp	r3, #1
 8007a24:	d101      	bne.n	8007a2a <HAL_TIM_ConfigClockSource+0x1c>
 8007a26:	2302      	movs	r3, #2
 8007a28:	e0b4      	b.n	8007b94 <HAL_TIM_ConfigClockSource+0x186>
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	2201      	movs	r2, #1
 8007a2e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	2202      	movs	r2, #2
 8007a36:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	689b      	ldr	r3, [r3, #8]
 8007a40:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007a42:	68bb      	ldr	r3, [r7, #8]
 8007a44:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8007a48:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007a4a:	68bb      	ldr	r3, [r7, #8]
 8007a4c:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007a50:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	68ba      	ldr	r2, [r7, #8]
 8007a58:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007a5a:	683b      	ldr	r3, [r7, #0]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007a62:	d03e      	beq.n	8007ae2 <HAL_TIM_ConfigClockSource+0xd4>
 8007a64:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007a68:	f200 8087 	bhi.w	8007b7a <HAL_TIM_ConfigClockSource+0x16c>
 8007a6c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007a70:	f000 8086 	beq.w	8007b80 <HAL_TIM_ConfigClockSource+0x172>
 8007a74:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007a78:	d87f      	bhi.n	8007b7a <HAL_TIM_ConfigClockSource+0x16c>
 8007a7a:	2b70      	cmp	r3, #112	@ 0x70
 8007a7c:	d01a      	beq.n	8007ab4 <HAL_TIM_ConfigClockSource+0xa6>
 8007a7e:	2b70      	cmp	r3, #112	@ 0x70
 8007a80:	d87b      	bhi.n	8007b7a <HAL_TIM_ConfigClockSource+0x16c>
 8007a82:	2b60      	cmp	r3, #96	@ 0x60
 8007a84:	d050      	beq.n	8007b28 <HAL_TIM_ConfigClockSource+0x11a>
 8007a86:	2b60      	cmp	r3, #96	@ 0x60
 8007a88:	d877      	bhi.n	8007b7a <HAL_TIM_ConfigClockSource+0x16c>
 8007a8a:	2b50      	cmp	r3, #80	@ 0x50
 8007a8c:	d03c      	beq.n	8007b08 <HAL_TIM_ConfigClockSource+0xfa>
 8007a8e:	2b50      	cmp	r3, #80	@ 0x50
 8007a90:	d873      	bhi.n	8007b7a <HAL_TIM_ConfigClockSource+0x16c>
 8007a92:	2b40      	cmp	r3, #64	@ 0x40
 8007a94:	d058      	beq.n	8007b48 <HAL_TIM_ConfigClockSource+0x13a>
 8007a96:	2b40      	cmp	r3, #64	@ 0x40
 8007a98:	d86f      	bhi.n	8007b7a <HAL_TIM_ConfigClockSource+0x16c>
 8007a9a:	2b30      	cmp	r3, #48	@ 0x30
 8007a9c:	d064      	beq.n	8007b68 <HAL_TIM_ConfigClockSource+0x15a>
 8007a9e:	2b30      	cmp	r3, #48	@ 0x30
 8007aa0:	d86b      	bhi.n	8007b7a <HAL_TIM_ConfigClockSource+0x16c>
 8007aa2:	2b20      	cmp	r3, #32
 8007aa4:	d060      	beq.n	8007b68 <HAL_TIM_ConfigClockSource+0x15a>
 8007aa6:	2b20      	cmp	r3, #32
 8007aa8:	d867      	bhi.n	8007b7a <HAL_TIM_ConfigClockSource+0x16c>
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d05c      	beq.n	8007b68 <HAL_TIM_ConfigClockSource+0x15a>
 8007aae:	2b10      	cmp	r3, #16
 8007ab0:	d05a      	beq.n	8007b68 <HAL_TIM_ConfigClockSource+0x15a>
 8007ab2:	e062      	b.n	8007b7a <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007ab8:	683b      	ldr	r3, [r7, #0]
 8007aba:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007abc:	683b      	ldr	r3, [r7, #0]
 8007abe:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007ac0:	683b      	ldr	r3, [r7, #0]
 8007ac2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007ac4:	f000 f9b8 	bl	8007e38 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	689b      	ldr	r3, [r3, #8]
 8007ace:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007ad0:	68bb      	ldr	r3, [r7, #8]
 8007ad2:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8007ad6:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	68ba      	ldr	r2, [r7, #8]
 8007ade:	609a      	str	r2, [r3, #8]
      break;
 8007ae0:	e04f      	b.n	8007b82 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007ae6:	683b      	ldr	r3, [r7, #0]
 8007ae8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007aea:	683b      	ldr	r3, [r7, #0]
 8007aec:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007aee:	683b      	ldr	r3, [r7, #0]
 8007af0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007af2:	f000 f9a1 	bl	8007e38 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	689a      	ldr	r2, [r3, #8]
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007b04:	609a      	str	r2, [r3, #8]
      break;
 8007b06:	e03c      	b.n	8007b82 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007b0c:	683b      	ldr	r3, [r7, #0]
 8007b0e:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007b10:	683b      	ldr	r3, [r7, #0]
 8007b12:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007b14:	461a      	mov	r2, r3
 8007b16:	f000 f915 	bl	8007d44 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	2150      	movs	r1, #80	@ 0x50
 8007b20:	4618      	mov	r0, r3
 8007b22:	f000 f96e 	bl	8007e02 <TIM_ITRx_SetConfig>
      break;
 8007b26:	e02c      	b.n	8007b82 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007b2c:	683b      	ldr	r3, [r7, #0]
 8007b2e:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007b30:	683b      	ldr	r3, [r7, #0]
 8007b32:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007b34:	461a      	mov	r2, r3
 8007b36:	f000 f934 	bl	8007da2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	2160      	movs	r1, #96	@ 0x60
 8007b40:	4618      	mov	r0, r3
 8007b42:	f000 f95e 	bl	8007e02 <TIM_ITRx_SetConfig>
      break;
 8007b46:	e01c      	b.n	8007b82 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007b4c:	683b      	ldr	r3, [r7, #0]
 8007b4e:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007b50:	683b      	ldr	r3, [r7, #0]
 8007b52:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007b54:	461a      	mov	r2, r3
 8007b56:	f000 f8f5 	bl	8007d44 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	2140      	movs	r1, #64	@ 0x40
 8007b60:	4618      	mov	r0, r3
 8007b62:	f000 f94e 	bl	8007e02 <TIM_ITRx_SetConfig>
      break;
 8007b66:	e00c      	b.n	8007b82 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	681a      	ldr	r2, [r3, #0]
 8007b6c:	683b      	ldr	r3, [r7, #0]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	4619      	mov	r1, r3
 8007b72:	4610      	mov	r0, r2
 8007b74:	f000 f945 	bl	8007e02 <TIM_ITRx_SetConfig>
      break;
 8007b78:	e003      	b.n	8007b82 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007b7a:	2301      	movs	r3, #1
 8007b7c:	73fb      	strb	r3, [r7, #15]
      break;
 8007b7e:	e000      	b.n	8007b82 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8007b80:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	2201      	movs	r2, #1
 8007b86:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	2200      	movs	r2, #0
 8007b8e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007b92:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b94:	4618      	mov	r0, r3
 8007b96:	3710      	adds	r7, #16
 8007b98:	46bd      	mov	sp, r7
 8007b9a:	bd80      	pop	{r7, pc}

08007b9c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007b9c:	b480      	push	{r7}
 8007b9e:	b083      	sub	sp, #12
 8007ba0:	af00      	add	r7, sp, #0
 8007ba2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007ba4:	bf00      	nop
 8007ba6:	370c      	adds	r7, #12
 8007ba8:	46bd      	mov	sp, r7
 8007baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bae:	4770      	bx	lr

08007bb0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007bb0:	b480      	push	{r7}
 8007bb2:	b083      	sub	sp, #12
 8007bb4:	af00      	add	r7, sp, #0
 8007bb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007bb8:	bf00      	nop
 8007bba:	370c      	adds	r7, #12
 8007bbc:	46bd      	mov	sp, r7
 8007bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bc2:	4770      	bx	lr

08007bc4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007bc4:	b480      	push	{r7}
 8007bc6:	b083      	sub	sp, #12
 8007bc8:	af00      	add	r7, sp, #0
 8007bca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007bcc:	bf00      	nop
 8007bce:	370c      	adds	r7, #12
 8007bd0:	46bd      	mov	sp, r7
 8007bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bd6:	4770      	bx	lr

08007bd8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007bd8:	b480      	push	{r7}
 8007bda:	b083      	sub	sp, #12
 8007bdc:	af00      	add	r7, sp, #0
 8007bde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007be0:	bf00      	nop
 8007be2:	370c      	adds	r7, #12
 8007be4:	46bd      	mov	sp, r7
 8007be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bea:	4770      	bx	lr

08007bec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007bec:	b480      	push	{r7}
 8007bee:	b085      	sub	sp, #20
 8007bf0:	af00      	add	r7, sp, #0
 8007bf2:	6078      	str	r0, [r7, #4]
 8007bf4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	4a46      	ldr	r2, [pc, #280]	@ (8007d18 <TIM_Base_SetConfig+0x12c>)
 8007c00:	4293      	cmp	r3, r2
 8007c02:	d013      	beq.n	8007c2c <TIM_Base_SetConfig+0x40>
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007c0a:	d00f      	beq.n	8007c2c <TIM_Base_SetConfig+0x40>
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	4a43      	ldr	r2, [pc, #268]	@ (8007d1c <TIM_Base_SetConfig+0x130>)
 8007c10:	4293      	cmp	r3, r2
 8007c12:	d00b      	beq.n	8007c2c <TIM_Base_SetConfig+0x40>
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	4a42      	ldr	r2, [pc, #264]	@ (8007d20 <TIM_Base_SetConfig+0x134>)
 8007c18:	4293      	cmp	r3, r2
 8007c1a:	d007      	beq.n	8007c2c <TIM_Base_SetConfig+0x40>
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	4a41      	ldr	r2, [pc, #260]	@ (8007d24 <TIM_Base_SetConfig+0x138>)
 8007c20:	4293      	cmp	r3, r2
 8007c22:	d003      	beq.n	8007c2c <TIM_Base_SetConfig+0x40>
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	4a40      	ldr	r2, [pc, #256]	@ (8007d28 <TIM_Base_SetConfig+0x13c>)
 8007c28:	4293      	cmp	r3, r2
 8007c2a:	d108      	bne.n	8007c3e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007c32:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007c34:	683b      	ldr	r3, [r7, #0]
 8007c36:	685b      	ldr	r3, [r3, #4]
 8007c38:	68fa      	ldr	r2, [r7, #12]
 8007c3a:	4313      	orrs	r3, r2
 8007c3c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	4a35      	ldr	r2, [pc, #212]	@ (8007d18 <TIM_Base_SetConfig+0x12c>)
 8007c42:	4293      	cmp	r3, r2
 8007c44:	d02b      	beq.n	8007c9e <TIM_Base_SetConfig+0xb2>
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007c4c:	d027      	beq.n	8007c9e <TIM_Base_SetConfig+0xb2>
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	4a32      	ldr	r2, [pc, #200]	@ (8007d1c <TIM_Base_SetConfig+0x130>)
 8007c52:	4293      	cmp	r3, r2
 8007c54:	d023      	beq.n	8007c9e <TIM_Base_SetConfig+0xb2>
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	4a31      	ldr	r2, [pc, #196]	@ (8007d20 <TIM_Base_SetConfig+0x134>)
 8007c5a:	4293      	cmp	r3, r2
 8007c5c:	d01f      	beq.n	8007c9e <TIM_Base_SetConfig+0xb2>
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	4a30      	ldr	r2, [pc, #192]	@ (8007d24 <TIM_Base_SetConfig+0x138>)
 8007c62:	4293      	cmp	r3, r2
 8007c64:	d01b      	beq.n	8007c9e <TIM_Base_SetConfig+0xb2>
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	4a2f      	ldr	r2, [pc, #188]	@ (8007d28 <TIM_Base_SetConfig+0x13c>)
 8007c6a:	4293      	cmp	r3, r2
 8007c6c:	d017      	beq.n	8007c9e <TIM_Base_SetConfig+0xb2>
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	4a2e      	ldr	r2, [pc, #184]	@ (8007d2c <TIM_Base_SetConfig+0x140>)
 8007c72:	4293      	cmp	r3, r2
 8007c74:	d013      	beq.n	8007c9e <TIM_Base_SetConfig+0xb2>
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	4a2d      	ldr	r2, [pc, #180]	@ (8007d30 <TIM_Base_SetConfig+0x144>)
 8007c7a:	4293      	cmp	r3, r2
 8007c7c:	d00f      	beq.n	8007c9e <TIM_Base_SetConfig+0xb2>
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	4a2c      	ldr	r2, [pc, #176]	@ (8007d34 <TIM_Base_SetConfig+0x148>)
 8007c82:	4293      	cmp	r3, r2
 8007c84:	d00b      	beq.n	8007c9e <TIM_Base_SetConfig+0xb2>
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	4a2b      	ldr	r2, [pc, #172]	@ (8007d38 <TIM_Base_SetConfig+0x14c>)
 8007c8a:	4293      	cmp	r3, r2
 8007c8c:	d007      	beq.n	8007c9e <TIM_Base_SetConfig+0xb2>
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	4a2a      	ldr	r2, [pc, #168]	@ (8007d3c <TIM_Base_SetConfig+0x150>)
 8007c92:	4293      	cmp	r3, r2
 8007c94:	d003      	beq.n	8007c9e <TIM_Base_SetConfig+0xb2>
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	4a29      	ldr	r2, [pc, #164]	@ (8007d40 <TIM_Base_SetConfig+0x154>)
 8007c9a:	4293      	cmp	r3, r2
 8007c9c:	d108      	bne.n	8007cb0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007ca4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007ca6:	683b      	ldr	r3, [r7, #0]
 8007ca8:	68db      	ldr	r3, [r3, #12]
 8007caa:	68fa      	ldr	r2, [r7, #12]
 8007cac:	4313      	orrs	r3, r2
 8007cae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007cb6:	683b      	ldr	r3, [r7, #0]
 8007cb8:	695b      	ldr	r3, [r3, #20]
 8007cba:	4313      	orrs	r3, r2
 8007cbc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	68fa      	ldr	r2, [r7, #12]
 8007cc2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007cc4:	683b      	ldr	r3, [r7, #0]
 8007cc6:	689a      	ldr	r2, [r3, #8]
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007ccc:	683b      	ldr	r3, [r7, #0]
 8007cce:	681a      	ldr	r2, [r3, #0]
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	4a10      	ldr	r2, [pc, #64]	@ (8007d18 <TIM_Base_SetConfig+0x12c>)
 8007cd8:	4293      	cmp	r3, r2
 8007cda:	d003      	beq.n	8007ce4 <TIM_Base_SetConfig+0xf8>
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	4a12      	ldr	r2, [pc, #72]	@ (8007d28 <TIM_Base_SetConfig+0x13c>)
 8007ce0:	4293      	cmp	r3, r2
 8007ce2:	d103      	bne.n	8007cec <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007ce4:	683b      	ldr	r3, [r7, #0]
 8007ce6:	691a      	ldr	r2, [r3, #16]
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	2201      	movs	r2, #1
 8007cf0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	691b      	ldr	r3, [r3, #16]
 8007cf6:	f003 0301 	and.w	r3, r3, #1
 8007cfa:	2b01      	cmp	r3, #1
 8007cfc:	d105      	bne.n	8007d0a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	691b      	ldr	r3, [r3, #16]
 8007d02:	f023 0201 	bic.w	r2, r3, #1
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	611a      	str	r2, [r3, #16]
  }
}
 8007d0a:	bf00      	nop
 8007d0c:	3714      	adds	r7, #20
 8007d0e:	46bd      	mov	sp, r7
 8007d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d14:	4770      	bx	lr
 8007d16:	bf00      	nop
 8007d18:	40010000 	.word	0x40010000
 8007d1c:	40000400 	.word	0x40000400
 8007d20:	40000800 	.word	0x40000800
 8007d24:	40000c00 	.word	0x40000c00
 8007d28:	40010400 	.word	0x40010400
 8007d2c:	40014000 	.word	0x40014000
 8007d30:	40014400 	.word	0x40014400
 8007d34:	40014800 	.word	0x40014800
 8007d38:	40001800 	.word	0x40001800
 8007d3c:	40001c00 	.word	0x40001c00
 8007d40:	40002000 	.word	0x40002000

08007d44 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007d44:	b480      	push	{r7}
 8007d46:	b087      	sub	sp, #28
 8007d48:	af00      	add	r7, sp, #0
 8007d4a:	60f8      	str	r0, [r7, #12]
 8007d4c:	60b9      	str	r1, [r7, #8]
 8007d4e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	6a1b      	ldr	r3, [r3, #32]
 8007d54:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	6a1b      	ldr	r3, [r3, #32]
 8007d5a:	f023 0201 	bic.w	r2, r3, #1
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	699b      	ldr	r3, [r3, #24]
 8007d66:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007d68:	693b      	ldr	r3, [r7, #16]
 8007d6a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007d6e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	011b      	lsls	r3, r3, #4
 8007d74:	693a      	ldr	r2, [r7, #16]
 8007d76:	4313      	orrs	r3, r2
 8007d78:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007d7a:	697b      	ldr	r3, [r7, #20]
 8007d7c:	f023 030a 	bic.w	r3, r3, #10
 8007d80:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007d82:	697a      	ldr	r2, [r7, #20]
 8007d84:	68bb      	ldr	r3, [r7, #8]
 8007d86:	4313      	orrs	r3, r2
 8007d88:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	693a      	ldr	r2, [r7, #16]
 8007d8e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	697a      	ldr	r2, [r7, #20]
 8007d94:	621a      	str	r2, [r3, #32]
}
 8007d96:	bf00      	nop
 8007d98:	371c      	adds	r7, #28
 8007d9a:	46bd      	mov	sp, r7
 8007d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007da0:	4770      	bx	lr

08007da2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007da2:	b480      	push	{r7}
 8007da4:	b087      	sub	sp, #28
 8007da6:	af00      	add	r7, sp, #0
 8007da8:	60f8      	str	r0, [r7, #12]
 8007daa:	60b9      	str	r1, [r7, #8]
 8007dac:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	6a1b      	ldr	r3, [r3, #32]
 8007db2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	6a1b      	ldr	r3, [r3, #32]
 8007db8:	f023 0210 	bic.w	r2, r3, #16
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	699b      	ldr	r3, [r3, #24]
 8007dc4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007dc6:	693b      	ldr	r3, [r7, #16]
 8007dc8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007dcc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	031b      	lsls	r3, r3, #12
 8007dd2:	693a      	ldr	r2, [r7, #16]
 8007dd4:	4313      	orrs	r3, r2
 8007dd6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007dd8:	697b      	ldr	r3, [r7, #20]
 8007dda:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8007dde:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007de0:	68bb      	ldr	r3, [r7, #8]
 8007de2:	011b      	lsls	r3, r3, #4
 8007de4:	697a      	ldr	r2, [r7, #20]
 8007de6:	4313      	orrs	r3, r2
 8007de8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	693a      	ldr	r2, [r7, #16]
 8007dee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	697a      	ldr	r2, [r7, #20]
 8007df4:	621a      	str	r2, [r3, #32]
}
 8007df6:	bf00      	nop
 8007df8:	371c      	adds	r7, #28
 8007dfa:	46bd      	mov	sp, r7
 8007dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e00:	4770      	bx	lr

08007e02 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007e02:	b480      	push	{r7}
 8007e04:	b085      	sub	sp, #20
 8007e06:	af00      	add	r7, sp, #0
 8007e08:	6078      	str	r0, [r7, #4]
 8007e0a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	689b      	ldr	r3, [r3, #8]
 8007e10:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007e18:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007e1a:	683a      	ldr	r2, [r7, #0]
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	4313      	orrs	r3, r2
 8007e20:	f043 0307 	orr.w	r3, r3, #7
 8007e24:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	68fa      	ldr	r2, [r7, #12]
 8007e2a:	609a      	str	r2, [r3, #8]
}
 8007e2c:	bf00      	nop
 8007e2e:	3714      	adds	r7, #20
 8007e30:	46bd      	mov	sp, r7
 8007e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e36:	4770      	bx	lr

08007e38 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007e38:	b480      	push	{r7}
 8007e3a:	b087      	sub	sp, #28
 8007e3c:	af00      	add	r7, sp, #0
 8007e3e:	60f8      	str	r0, [r7, #12]
 8007e40:	60b9      	str	r1, [r7, #8]
 8007e42:	607a      	str	r2, [r7, #4]
 8007e44:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	689b      	ldr	r3, [r3, #8]
 8007e4a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007e4c:	697b      	ldr	r3, [r7, #20]
 8007e4e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007e52:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007e54:	683b      	ldr	r3, [r7, #0]
 8007e56:	021a      	lsls	r2, r3, #8
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	431a      	orrs	r2, r3
 8007e5c:	68bb      	ldr	r3, [r7, #8]
 8007e5e:	4313      	orrs	r3, r2
 8007e60:	697a      	ldr	r2, [r7, #20]
 8007e62:	4313      	orrs	r3, r2
 8007e64:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	697a      	ldr	r2, [r7, #20]
 8007e6a:	609a      	str	r2, [r3, #8]
}
 8007e6c:	bf00      	nop
 8007e6e:	371c      	adds	r7, #28
 8007e70:	46bd      	mov	sp, r7
 8007e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e76:	4770      	bx	lr

08007e78 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007e78:	b480      	push	{r7}
 8007e7a:	b085      	sub	sp, #20
 8007e7c:	af00      	add	r7, sp, #0
 8007e7e:	6078      	str	r0, [r7, #4]
 8007e80:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007e88:	2b01      	cmp	r3, #1
 8007e8a:	d101      	bne.n	8007e90 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007e8c:	2302      	movs	r3, #2
 8007e8e:	e05a      	b.n	8007f46 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	2201      	movs	r2, #1
 8007e94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	2202      	movs	r2, #2
 8007e9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	685b      	ldr	r3, [r3, #4]
 8007ea6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	689b      	ldr	r3, [r3, #8]
 8007eae:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007eb6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007eb8:	683b      	ldr	r3, [r7, #0]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	68fa      	ldr	r2, [r7, #12]
 8007ebe:	4313      	orrs	r3, r2
 8007ec0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	68fa      	ldr	r2, [r7, #12]
 8007ec8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	4a21      	ldr	r2, [pc, #132]	@ (8007f54 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007ed0:	4293      	cmp	r3, r2
 8007ed2:	d022      	beq.n	8007f1a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007edc:	d01d      	beq.n	8007f1a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	4a1d      	ldr	r2, [pc, #116]	@ (8007f58 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007ee4:	4293      	cmp	r3, r2
 8007ee6:	d018      	beq.n	8007f1a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	4a1b      	ldr	r2, [pc, #108]	@ (8007f5c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007eee:	4293      	cmp	r3, r2
 8007ef0:	d013      	beq.n	8007f1a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	4a1a      	ldr	r2, [pc, #104]	@ (8007f60 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007ef8:	4293      	cmp	r3, r2
 8007efa:	d00e      	beq.n	8007f1a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	4a18      	ldr	r2, [pc, #96]	@ (8007f64 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007f02:	4293      	cmp	r3, r2
 8007f04:	d009      	beq.n	8007f1a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	4a17      	ldr	r2, [pc, #92]	@ (8007f68 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007f0c:	4293      	cmp	r3, r2
 8007f0e:	d004      	beq.n	8007f1a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	4a15      	ldr	r2, [pc, #84]	@ (8007f6c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007f16:	4293      	cmp	r3, r2
 8007f18:	d10c      	bne.n	8007f34 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007f1a:	68bb      	ldr	r3, [r7, #8]
 8007f1c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007f20:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007f22:	683b      	ldr	r3, [r7, #0]
 8007f24:	685b      	ldr	r3, [r3, #4]
 8007f26:	68ba      	ldr	r2, [r7, #8]
 8007f28:	4313      	orrs	r3, r2
 8007f2a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	68ba      	ldr	r2, [r7, #8]
 8007f32:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	2201      	movs	r2, #1
 8007f38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	2200      	movs	r2, #0
 8007f40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007f44:	2300      	movs	r3, #0
}
 8007f46:	4618      	mov	r0, r3
 8007f48:	3714      	adds	r7, #20
 8007f4a:	46bd      	mov	sp, r7
 8007f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f50:	4770      	bx	lr
 8007f52:	bf00      	nop
 8007f54:	40010000 	.word	0x40010000
 8007f58:	40000400 	.word	0x40000400
 8007f5c:	40000800 	.word	0x40000800
 8007f60:	40000c00 	.word	0x40000c00
 8007f64:	40010400 	.word	0x40010400
 8007f68:	40014000 	.word	0x40014000
 8007f6c:	40001800 	.word	0x40001800

08007f70 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007f70:	b480      	push	{r7}
 8007f72:	b083      	sub	sp, #12
 8007f74:	af00      	add	r7, sp, #0
 8007f76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007f78:	bf00      	nop
 8007f7a:	370c      	adds	r7, #12
 8007f7c:	46bd      	mov	sp, r7
 8007f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f82:	4770      	bx	lr

08007f84 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007f84:	b480      	push	{r7}
 8007f86:	b083      	sub	sp, #12
 8007f88:	af00      	add	r7, sp, #0
 8007f8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007f8c:	bf00      	nop
 8007f8e:	370c      	adds	r7, #12
 8007f90:	46bd      	mov	sp, r7
 8007f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f96:	4770      	bx	lr

08007f98 <memset>:
 8007f98:	4402      	add	r2, r0
 8007f9a:	4603      	mov	r3, r0
 8007f9c:	4293      	cmp	r3, r2
 8007f9e:	d100      	bne.n	8007fa2 <memset+0xa>
 8007fa0:	4770      	bx	lr
 8007fa2:	f803 1b01 	strb.w	r1, [r3], #1
 8007fa6:	e7f9      	b.n	8007f9c <memset+0x4>

08007fa8 <__errno>:
 8007fa8:	4b01      	ldr	r3, [pc, #4]	@ (8007fb0 <__errno+0x8>)
 8007faa:	6818      	ldr	r0, [r3, #0]
 8007fac:	4770      	bx	lr
 8007fae:	bf00      	nop
 8007fb0:	20000010 	.word	0x20000010

08007fb4 <__libc_init_array>:
 8007fb4:	b570      	push	{r4, r5, r6, lr}
 8007fb6:	4d0d      	ldr	r5, [pc, #52]	@ (8007fec <__libc_init_array+0x38>)
 8007fb8:	4c0d      	ldr	r4, [pc, #52]	@ (8007ff0 <__libc_init_array+0x3c>)
 8007fba:	1b64      	subs	r4, r4, r5
 8007fbc:	10a4      	asrs	r4, r4, #2
 8007fbe:	2600      	movs	r6, #0
 8007fc0:	42a6      	cmp	r6, r4
 8007fc2:	d109      	bne.n	8007fd8 <__libc_init_array+0x24>
 8007fc4:	4d0b      	ldr	r5, [pc, #44]	@ (8007ff4 <__libc_init_array+0x40>)
 8007fc6:	4c0c      	ldr	r4, [pc, #48]	@ (8007ff8 <__libc_init_array+0x44>)
 8007fc8:	f000 fd06 	bl	80089d8 <_init>
 8007fcc:	1b64      	subs	r4, r4, r5
 8007fce:	10a4      	asrs	r4, r4, #2
 8007fd0:	2600      	movs	r6, #0
 8007fd2:	42a6      	cmp	r6, r4
 8007fd4:	d105      	bne.n	8007fe2 <__libc_init_array+0x2e>
 8007fd6:	bd70      	pop	{r4, r5, r6, pc}
 8007fd8:	f855 3b04 	ldr.w	r3, [r5], #4
 8007fdc:	4798      	blx	r3
 8007fde:	3601      	adds	r6, #1
 8007fe0:	e7ee      	b.n	8007fc0 <__libc_init_array+0xc>
 8007fe2:	f855 3b04 	ldr.w	r3, [r5], #4
 8007fe6:	4798      	blx	r3
 8007fe8:	3601      	adds	r6, #1
 8007fea:	e7f2      	b.n	8007fd2 <__libc_init_array+0x1e>
 8007fec:	08008a2c 	.word	0x08008a2c
 8007ff0:	08008a2c 	.word	0x08008a2c
 8007ff4:	08008a2c 	.word	0x08008a2c
 8007ff8:	08008a30 	.word	0x08008a30

08007ffc <logf>:
 8007ffc:	b508      	push	{r3, lr}
 8007ffe:	ed2d 8b02 	vpush	{d8}
 8008002:	eeb0 8a40 	vmov.f32	s16, s0
 8008006:	f000 f88f 	bl	8008128 <__ieee754_logf>
 800800a:	eeb4 8a48 	vcmp.f32	s16, s16
 800800e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008012:	d60f      	bvs.n	8008034 <logf+0x38>
 8008014:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8008018:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800801c:	dc0a      	bgt.n	8008034 <logf+0x38>
 800801e:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8008022:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008026:	d108      	bne.n	800803a <logf+0x3e>
 8008028:	f7ff ffbe 	bl	8007fa8 <__errno>
 800802c:	2322      	movs	r3, #34	@ 0x22
 800802e:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 8008050 <logf+0x54>
 8008032:	6003      	str	r3, [r0, #0]
 8008034:	ecbd 8b02 	vpop	{d8}
 8008038:	bd08      	pop	{r3, pc}
 800803a:	f7ff ffb5 	bl	8007fa8 <__errno>
 800803e:	ecbd 8b02 	vpop	{d8}
 8008042:	2321      	movs	r3, #33	@ 0x21
 8008044:	6003      	str	r3, [r0, #0]
 8008046:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800804a:	4802      	ldr	r0, [pc, #8]	@ (8008054 <logf+0x58>)
 800804c:	f000 b866 	b.w	800811c <nanf>
 8008050:	ff800000 	.word	0xff800000
 8008054:	08008a09 	.word	0x08008a09

08008058 <powf>:
 8008058:	b508      	push	{r3, lr}
 800805a:	ed2d 8b04 	vpush	{d8-d9}
 800805e:	eeb0 8a60 	vmov.f32	s16, s1
 8008062:	eeb0 9a40 	vmov.f32	s18, s0
 8008066:	f000 f951 	bl	800830c <__ieee754_powf>
 800806a:	eeb4 8a48 	vcmp.f32	s16, s16
 800806e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008072:	eef0 8a40 	vmov.f32	s17, s0
 8008076:	d63e      	bvs.n	80080f6 <powf+0x9e>
 8008078:	eeb5 9a40 	vcmp.f32	s18, #0.0
 800807c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008080:	d112      	bne.n	80080a8 <powf+0x50>
 8008082:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8008086:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800808a:	d039      	beq.n	8008100 <powf+0xa8>
 800808c:	eeb0 0a48 	vmov.f32	s0, s16
 8008090:	f000 f839 	bl	8008106 <finitef>
 8008094:	b378      	cbz	r0, 80080f6 <powf+0x9e>
 8008096:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800809a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800809e:	d52a      	bpl.n	80080f6 <powf+0x9e>
 80080a0:	f7ff ff82 	bl	8007fa8 <__errno>
 80080a4:	2322      	movs	r3, #34	@ 0x22
 80080a6:	e014      	b.n	80080d2 <powf+0x7a>
 80080a8:	f000 f82d 	bl	8008106 <finitef>
 80080ac:	b998      	cbnz	r0, 80080d6 <powf+0x7e>
 80080ae:	eeb0 0a49 	vmov.f32	s0, s18
 80080b2:	f000 f828 	bl	8008106 <finitef>
 80080b6:	b170      	cbz	r0, 80080d6 <powf+0x7e>
 80080b8:	eeb0 0a48 	vmov.f32	s0, s16
 80080bc:	f000 f823 	bl	8008106 <finitef>
 80080c0:	b148      	cbz	r0, 80080d6 <powf+0x7e>
 80080c2:	eef4 8a68 	vcmp.f32	s17, s17
 80080c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80080ca:	d7e9      	bvc.n	80080a0 <powf+0x48>
 80080cc:	f7ff ff6c 	bl	8007fa8 <__errno>
 80080d0:	2321      	movs	r3, #33	@ 0x21
 80080d2:	6003      	str	r3, [r0, #0]
 80080d4:	e00f      	b.n	80080f6 <powf+0x9e>
 80080d6:	eef5 8a40 	vcmp.f32	s17, #0.0
 80080da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80080de:	d10a      	bne.n	80080f6 <powf+0x9e>
 80080e0:	eeb0 0a49 	vmov.f32	s0, s18
 80080e4:	f000 f80f 	bl	8008106 <finitef>
 80080e8:	b128      	cbz	r0, 80080f6 <powf+0x9e>
 80080ea:	eeb0 0a48 	vmov.f32	s0, s16
 80080ee:	f000 f80a 	bl	8008106 <finitef>
 80080f2:	2800      	cmp	r0, #0
 80080f4:	d1d4      	bne.n	80080a0 <powf+0x48>
 80080f6:	eeb0 0a68 	vmov.f32	s0, s17
 80080fa:	ecbd 8b04 	vpop	{d8-d9}
 80080fe:	bd08      	pop	{r3, pc}
 8008100:	eef7 8a00 	vmov.f32	s17, #112	@ 0x3f800000  1.0
 8008104:	e7f7      	b.n	80080f6 <powf+0x9e>

08008106 <finitef>:
 8008106:	ee10 3a10 	vmov	r3, s0
 800810a:	f023 4000 	bic.w	r0, r3, #2147483648	@ 0x80000000
 800810e:	f1b0 4fff 	cmp.w	r0, #2139095040	@ 0x7f800000
 8008112:	bfac      	ite	ge
 8008114:	2000      	movge	r0, #0
 8008116:	2001      	movlt	r0, #1
 8008118:	4770      	bx	lr
	...

0800811c <nanf>:
 800811c:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8008124 <nanf+0x8>
 8008120:	4770      	bx	lr
 8008122:	bf00      	nop
 8008124:	7fc00000 	.word	0x7fc00000

08008128 <__ieee754_logf>:
 8008128:	ee10 3a10 	vmov	r3, s0
 800812c:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 8008130:	d106      	bne.n	8008140 <__ieee754_logf+0x18>
 8008132:	ed9f 7a66 	vldr	s14, [pc, #408]	@ 80082cc <__ieee754_logf+0x1a4>
 8008136:	eddf 7a66 	vldr	s15, [pc, #408]	@ 80082d0 <__ieee754_logf+0x1a8>
 800813a:	ee87 0a27 	vdiv.f32	s0, s14, s15
 800813e:	4770      	bx	lr
 8008140:	2b00      	cmp	r3, #0
 8008142:	461a      	mov	r2, r3
 8008144:	da02      	bge.n	800814c <__ieee754_logf+0x24>
 8008146:	ee30 7a40 	vsub.f32	s14, s0, s0
 800814a:	e7f4      	b.n	8008136 <__ieee754_logf+0xe>
 800814c:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8008150:	db02      	blt.n	8008158 <__ieee754_logf+0x30>
 8008152:	ee30 0a00 	vadd.f32	s0, s0, s0
 8008156:	4770      	bx	lr
 8008158:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800815c:	bfb8      	it	lt
 800815e:	eddf 7a5d 	vldrlt	s15, [pc, #372]	@ 80082d4 <__ieee754_logf+0x1ac>
 8008162:	485d      	ldr	r0, [pc, #372]	@ (80082d8 <__ieee754_logf+0x1b0>)
 8008164:	bfbe      	ittt	lt
 8008166:	ee60 7a27 	vmullt.f32	s15, s0, s15
 800816a:	f06f 0118 	mvnlt.w	r1, #24
 800816e:	ee17 2a90 	vmovlt	r2, s15
 8008172:	ea4f 53e2 	mov.w	r3, r2, asr #23
 8008176:	f3c2 0216 	ubfx	r2, r2, #0, #23
 800817a:	4410      	add	r0, r2
 800817c:	bfa8      	it	ge
 800817e:	2100      	movge	r1, #0
 8008180:	3b7f      	subs	r3, #127	@ 0x7f
 8008182:	440b      	add	r3, r1
 8008184:	f400 0100 	and.w	r1, r0, #8388608	@ 0x800000
 8008188:	f081 517e 	eor.w	r1, r1, #1065353216	@ 0x3f800000
 800818c:	4311      	orrs	r1, r2
 800818e:	ee00 1a10 	vmov	s0, r1
 8008192:	4952      	ldr	r1, [pc, #328]	@ (80082dc <__ieee754_logf+0x1b4>)
 8008194:	eb03 53d0 	add.w	r3, r3, r0, lsr #23
 8008198:	f102 000f 	add.w	r0, r2, #15
 800819c:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 80081a0:	4001      	ands	r1, r0
 80081a2:	ee30 0a67 	vsub.f32	s0, s0, s15
 80081a6:	bb89      	cbnz	r1, 800820c <__ieee754_logf+0xe4>
 80081a8:	eeb5 0a40 	vcmp.f32	s0, #0.0
 80081ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80081b0:	d10f      	bne.n	80081d2 <__ieee754_logf+0xaa>
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	f000 8087 	beq.w	80082c6 <__ieee754_logf+0x19e>
 80081b8:	ee07 3a90 	vmov	s15, r3
 80081bc:	ed9f 0a48 	vldr	s0, [pc, #288]	@ 80082e0 <__ieee754_logf+0x1b8>
 80081c0:	ed9f 7a48 	vldr	s14, [pc, #288]	@ 80082e4 <__ieee754_logf+0x1bc>
 80081c4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80081c8:	ee27 0a80 	vmul.f32	s0, s15, s0
 80081cc:	eea7 0a87 	vfma.f32	s0, s15, s14
 80081d0:	4770      	bx	lr
 80081d2:	eddf 6a45 	vldr	s13, [pc, #276]	@ 80082e8 <__ieee754_logf+0x1c0>
 80081d6:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 80081da:	eee0 7a66 	vfms.f32	s15, s0, s13
 80081de:	ee20 7a00 	vmul.f32	s14, s0, s0
 80081e2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80081e6:	b913      	cbnz	r3, 80081ee <__ieee754_logf+0xc6>
 80081e8:	ee30 0a47 	vsub.f32	s0, s0, s14
 80081ec:	4770      	bx	lr
 80081ee:	ee07 3a90 	vmov	s15, r3
 80081f2:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 80082e0 <__ieee754_logf+0x1b8>
 80081f6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80081fa:	eea7 7ae6 	vfms.f32	s14, s15, s13
 80081fe:	ee37 0a40 	vsub.f32	s0, s14, s0
 8008202:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 80082e4 <__ieee754_logf+0x1bc>
 8008206:	ee97 0a87 	vfnms.f32	s0, s15, s14
 800820a:	4770      	bx	lr
 800820c:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 8008210:	ee70 7a27 	vadd.f32	s15, s0, s15
 8008214:	eddf 5a35 	vldr	s11, [pc, #212]	@ 80082ec <__ieee754_logf+0x1c4>
 8008218:	eddf 4a35 	vldr	s9, [pc, #212]	@ 80082f0 <__ieee754_logf+0x1c8>
 800821c:	4935      	ldr	r1, [pc, #212]	@ (80082f4 <__ieee754_logf+0x1cc>)
 800821e:	ee80 6a27 	vdiv.f32	s12, s0, s15
 8008222:	4411      	add	r1, r2
 8008224:	f5c2 1257 	rsb	r2, r2, #3522560	@ 0x35c000
 8008228:	f502 7222 	add.w	r2, r2, #648	@ 0x288
 800822c:	430a      	orrs	r2, r1
 800822e:	2a00      	cmp	r2, #0
 8008230:	ee07 3a90 	vmov	s15, r3
 8008234:	ee26 5a06 	vmul.f32	s10, s12, s12
 8008238:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800823c:	ee25 7a05 	vmul.f32	s14, s10, s10
 8008240:	eddf 7a2d 	vldr	s15, [pc, #180]	@ 80082f8 <__ieee754_logf+0x1d0>
 8008244:	eee7 7a25 	vfma.f32	s15, s14, s11
 8008248:	eddf 5a2c 	vldr	s11, [pc, #176]	@ 80082fc <__ieee754_logf+0x1d4>
 800824c:	eee7 5a87 	vfma.f32	s11, s15, s14
 8008250:	eddf 7a2b 	vldr	s15, [pc, #172]	@ 8008300 <__ieee754_logf+0x1d8>
 8008254:	eee7 7a24 	vfma.f32	s15, s14, s9
 8008258:	eddf 4a2a 	vldr	s9, [pc, #168]	@ 8008304 <__ieee754_logf+0x1dc>
 800825c:	eee7 4a87 	vfma.f32	s9, s15, s14
 8008260:	eddf 7a29 	vldr	s15, [pc, #164]	@ 8008308 <__ieee754_logf+0x1e0>
 8008264:	eee4 7a87 	vfma.f32	s15, s9, s14
 8008268:	ee67 7a85 	vmul.f32	s15, s15, s10
 800826c:	eee5 7a87 	vfma.f32	s15, s11, s14
 8008270:	dd1a      	ble.n	80082a8 <__ieee754_logf+0x180>
 8008272:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8008276:	ee20 7a07 	vmul.f32	s14, s0, s14
 800827a:	ee27 7a00 	vmul.f32	s14, s14, s0
 800827e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008282:	ee67 7a86 	vmul.f32	s15, s15, s12
 8008286:	b913      	cbnz	r3, 800828e <__ieee754_logf+0x166>
 8008288:	ee37 7a67 	vsub.f32	s14, s14, s15
 800828c:	e7ac      	b.n	80081e8 <__ieee754_logf+0xc0>
 800828e:	ed9f 6a14 	vldr	s12, [pc, #80]	@ 80082e0 <__ieee754_logf+0x1b8>
 8008292:	eee6 7a86 	vfma.f32	s15, s13, s12
 8008296:	ee37 7a67 	vsub.f32	s14, s14, s15
 800829a:	ee37 0a40 	vsub.f32	s0, s14, s0
 800829e:	eddf 7a11 	vldr	s15, [pc, #68]	@ 80082e4 <__ieee754_logf+0x1bc>
 80082a2:	ee96 0aa7 	vfnms.f32	s0, s13, s15
 80082a6:	4770      	bx	lr
 80082a8:	ee70 7a67 	vsub.f32	s15, s0, s15
 80082ac:	ee67 7a86 	vmul.f32	s15, s15, s12
 80082b0:	b913      	cbnz	r3, 80082b8 <__ieee754_logf+0x190>
 80082b2:	ee30 0a67 	vsub.f32	s0, s0, s15
 80082b6:	4770      	bx	lr
 80082b8:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 80082e0 <__ieee754_logf+0x1b8>
 80082bc:	eee6 7ac7 	vfms.f32	s15, s13, s14
 80082c0:	ee37 0ac0 	vsub.f32	s0, s15, s0
 80082c4:	e7eb      	b.n	800829e <__ieee754_logf+0x176>
 80082c6:	ed9f 0a02 	vldr	s0, [pc, #8]	@ 80082d0 <__ieee754_logf+0x1a8>
 80082ca:	4770      	bx	lr
 80082cc:	cc000000 	.word	0xcc000000
 80082d0:	00000000 	.word	0x00000000
 80082d4:	4c000000 	.word	0x4c000000
 80082d8:	004afb20 	.word	0x004afb20
 80082dc:	007ffff0 	.word	0x007ffff0
 80082e0:	3717f7d1 	.word	0x3717f7d1
 80082e4:	3f317180 	.word	0x3f317180
 80082e8:	3eaaaaab 	.word	0x3eaaaaab
 80082ec:	3e1cd04f 	.word	0x3e1cd04f
 80082f0:	3e178897 	.word	0x3e178897
 80082f4:	ffcf5c30 	.word	0xffcf5c30
 80082f8:	3e638e29 	.word	0x3e638e29
 80082fc:	3ecccccd 	.word	0x3ecccccd
 8008300:	3e3a3325 	.word	0x3e3a3325
 8008304:	3e924925 	.word	0x3e924925
 8008308:	3f2aaaab 	.word	0x3f2aaaab

0800830c <__ieee754_powf>:
 800830c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008310:	ee10 4a90 	vmov	r4, s1
 8008314:	f034 4900 	bics.w	r9, r4, #2147483648	@ 0x80000000
 8008318:	ed2d 8b02 	vpush	{d8}
 800831c:	ee10 6a10 	vmov	r6, s0
 8008320:	eeb0 8a40 	vmov.f32	s16, s0
 8008324:	eef0 8a60 	vmov.f32	s17, s1
 8008328:	d10c      	bne.n	8008344 <__ieee754_powf+0x38>
 800832a:	f486 0680 	eor.w	r6, r6, #4194304	@ 0x400000
 800832e:	0076      	lsls	r6, r6, #1
 8008330:	f516 0f00 	cmn.w	r6, #8388608	@ 0x800000
 8008334:	f240 8274 	bls.w	8008820 <__ieee754_powf+0x514>
 8008338:	ee38 0a28 	vadd.f32	s0, s16, s17
 800833c:	ecbd 8b02 	vpop	{d8}
 8008340:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008344:	f026 4800 	bic.w	r8, r6, #2147483648	@ 0x80000000
 8008348:	f1b8 4fff 	cmp.w	r8, #2139095040	@ 0x7f800000
 800834c:	d802      	bhi.n	8008354 <__ieee754_powf+0x48>
 800834e:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 8008352:	d908      	bls.n	8008366 <__ieee754_powf+0x5a>
 8008354:	f1b6 5f7e 	cmp.w	r6, #1065353216	@ 0x3f800000
 8008358:	d1ee      	bne.n	8008338 <__ieee754_powf+0x2c>
 800835a:	f484 0480 	eor.w	r4, r4, #4194304	@ 0x400000
 800835e:	0064      	lsls	r4, r4, #1
 8008360:	f514 0f00 	cmn.w	r4, #8388608	@ 0x800000
 8008364:	e7e6      	b.n	8008334 <__ieee754_powf+0x28>
 8008366:	2e00      	cmp	r6, #0
 8008368:	da1f      	bge.n	80083aa <__ieee754_powf+0x9e>
 800836a:	f1b9 4f97 	cmp.w	r9, #1266679808	@ 0x4b800000
 800836e:	f080 8260 	bcs.w	8008832 <__ieee754_powf+0x526>
 8008372:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 8008376:	d32f      	bcc.n	80083d8 <__ieee754_powf+0xcc>
 8008378:	ea4f 53e9 	mov.w	r3, r9, asr #23
 800837c:	f1c3 0396 	rsb	r3, r3, #150	@ 0x96
 8008380:	fa49 f503 	asr.w	r5, r9, r3
 8008384:	fa05 f303 	lsl.w	r3, r5, r3
 8008388:	454b      	cmp	r3, r9
 800838a:	d123      	bne.n	80083d4 <__ieee754_powf+0xc8>
 800838c:	f005 0501 	and.w	r5, r5, #1
 8008390:	f1c5 0502 	rsb	r5, r5, #2
 8008394:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 8008398:	d11f      	bne.n	80083da <__ieee754_powf+0xce>
 800839a:	2c00      	cmp	r4, #0
 800839c:	f280 8246 	bge.w	800882c <__ieee754_powf+0x520>
 80083a0:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 80083a4:	ee87 0a88 	vdiv.f32	s0, s15, s16
 80083a8:	e7c8      	b.n	800833c <__ieee754_powf+0x30>
 80083aa:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 80083ae:	d111      	bne.n	80083d4 <__ieee754_powf+0xc8>
 80083b0:	f1b8 5f7e 	cmp.w	r8, #1065353216	@ 0x3f800000
 80083b4:	f000 8234 	beq.w	8008820 <__ieee754_powf+0x514>
 80083b8:	d906      	bls.n	80083c8 <__ieee754_powf+0xbc>
 80083ba:	ed9f 0ac5 	vldr	s0, [pc, #788]	@ 80086d0 <__ieee754_powf+0x3c4>
 80083be:	2c00      	cmp	r4, #0
 80083c0:	bfa8      	it	ge
 80083c2:	eeb0 0a68 	vmovge.f32	s0, s17
 80083c6:	e7b9      	b.n	800833c <__ieee754_powf+0x30>
 80083c8:	2c00      	cmp	r4, #0
 80083ca:	f280 822c 	bge.w	8008826 <__ieee754_powf+0x51a>
 80083ce:	eeb1 0a68 	vneg.f32	s0, s17
 80083d2:	e7b3      	b.n	800833c <__ieee754_powf+0x30>
 80083d4:	2500      	movs	r5, #0
 80083d6:	e7dd      	b.n	8008394 <__ieee754_powf+0x88>
 80083d8:	2500      	movs	r5, #0
 80083da:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 80083de:	d102      	bne.n	80083e6 <__ieee754_powf+0xda>
 80083e0:	ee28 0a08 	vmul.f32	s0, s16, s16
 80083e4:	e7aa      	b.n	800833c <__ieee754_powf+0x30>
 80083e6:	f1b4 5f7c 	cmp.w	r4, #1056964608	@ 0x3f000000
 80083ea:	f040 8227 	bne.w	800883c <__ieee754_powf+0x530>
 80083ee:	2e00      	cmp	r6, #0
 80083f0:	f2c0 8224 	blt.w	800883c <__ieee754_powf+0x530>
 80083f4:	eeb0 0a48 	vmov.f32	s0, s16
 80083f8:	ecbd 8b02 	vpop	{d8}
 80083fc:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008400:	f000 bae6 	b.w	80089d0 <__ieee754_sqrtf>
 8008404:	2d01      	cmp	r5, #1
 8008406:	d199      	bne.n	800833c <__ieee754_powf+0x30>
 8008408:	eeb1 0a40 	vneg.f32	s0, s0
 800840c:	e796      	b.n	800833c <__ieee754_powf+0x30>
 800840e:	0ff0      	lsrs	r0, r6, #31
 8008410:	3801      	subs	r0, #1
 8008412:	ea55 0300 	orrs.w	r3, r5, r0
 8008416:	d104      	bne.n	8008422 <__ieee754_powf+0x116>
 8008418:	ee38 8a48 	vsub.f32	s16, s16, s16
 800841c:	ee88 0a08 	vdiv.f32	s0, s16, s16
 8008420:	e78c      	b.n	800833c <__ieee754_powf+0x30>
 8008422:	f1b9 4f9a 	cmp.w	r9, #1291845632	@ 0x4d000000
 8008426:	d96d      	bls.n	8008504 <__ieee754_powf+0x1f8>
 8008428:	4baa      	ldr	r3, [pc, #680]	@ (80086d4 <__ieee754_powf+0x3c8>)
 800842a:	4598      	cmp	r8, r3
 800842c:	d808      	bhi.n	8008440 <__ieee754_powf+0x134>
 800842e:	2c00      	cmp	r4, #0
 8008430:	da0b      	bge.n	800844a <__ieee754_powf+0x13e>
 8008432:	2000      	movs	r0, #0
 8008434:	ecbd 8b02 	vpop	{d8}
 8008438:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800843c:	f000 bac2 	b.w	80089c4 <__math_oflowf>
 8008440:	4ba5      	ldr	r3, [pc, #660]	@ (80086d8 <__ieee754_powf+0x3cc>)
 8008442:	4598      	cmp	r8, r3
 8008444:	d908      	bls.n	8008458 <__ieee754_powf+0x14c>
 8008446:	2c00      	cmp	r4, #0
 8008448:	dcf3      	bgt.n	8008432 <__ieee754_powf+0x126>
 800844a:	2000      	movs	r0, #0
 800844c:	ecbd 8b02 	vpop	{d8}
 8008450:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008454:	f000 bab0 	b.w	80089b8 <__math_uflowf>
 8008458:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800845c:	ee30 0a67 	vsub.f32	s0, s0, s15
 8008460:	eddf 6a9e 	vldr	s13, [pc, #632]	@ 80086dc <__ieee754_powf+0x3d0>
 8008464:	eef5 7a00 	vmov.f32	s15, #80	@ 0x3e800000  0.250
 8008468:	eee0 6a67 	vfms.f32	s13, s0, s15
 800846c:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8008470:	eee6 7ac0 	vfms.f32	s15, s13, s0
 8008474:	ee20 7a00 	vmul.f32	s14, s0, s0
 8008478:	eddf 6a99 	vldr	s13, [pc, #612]	@ 80086e0 <__ieee754_powf+0x3d4>
 800847c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8008480:	eddf 7a98 	vldr	s15, [pc, #608]	@ 80086e4 <__ieee754_powf+0x3d8>
 8008484:	ee67 7ac7 	vnmul.f32	s15, s15, s14
 8008488:	ed9f 7a97 	vldr	s14, [pc, #604]	@ 80086e8 <__ieee754_powf+0x3dc>
 800848c:	eee0 7a07 	vfma.f32	s15, s0, s14
 8008490:	eeb0 7a67 	vmov.f32	s14, s15
 8008494:	eea0 7a26 	vfma.f32	s14, s0, s13
 8008498:	ee17 3a10 	vmov	r3, s14
 800849c:	f36f 030b 	bfc	r3, #0, #12
 80084a0:	ee07 3a10 	vmov	s14, r3
 80084a4:	eeb0 6a47 	vmov.f32	s12, s14
 80084a8:	eea0 6a66 	vfms.f32	s12, s0, s13
 80084ac:	ee77 7ac6 	vsub.f32	s15, s15, s12
 80084b0:	3d01      	subs	r5, #1
 80084b2:	4305      	orrs	r5, r0
 80084b4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80084b8:	eebf 8a00 	vmov.f32	s16, #240	@ 0xbf800000 -1.0
 80084bc:	f36f 040b 	bfc	r4, #0, #12
 80084c0:	bf18      	it	ne
 80084c2:	eeb0 8a66 	vmovne.f32	s16, s13
 80084c6:	ee06 4a90 	vmov	s13, r4
 80084ca:	ee67 0aa8 	vmul.f32	s1, s15, s17
 80084ce:	ee38 6ae6 	vsub.f32	s12, s17, s13
 80084d2:	ee67 7a26 	vmul.f32	s15, s14, s13
 80084d6:	eee6 0a07 	vfma.f32	s1, s12, s14
 80084da:	ee30 7aa7 	vadd.f32	s14, s1, s15
 80084de:	ee17 1a10 	vmov	r1, s14
 80084e2:	2900      	cmp	r1, #0
 80084e4:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80084e8:	f340 80dd 	ble.w	80086a6 <__ieee754_powf+0x39a>
 80084ec:	f1b3 4f86 	cmp.w	r3, #1124073472	@ 0x43000000
 80084f0:	f240 80ca 	bls.w	8008688 <__ieee754_powf+0x37c>
 80084f4:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 80084f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80084fc:	bf4c      	ite	mi
 80084fe:	2001      	movmi	r0, #1
 8008500:	2000      	movpl	r0, #0
 8008502:	e797      	b.n	8008434 <__ieee754_powf+0x128>
 8008504:	f016 4fff 	tst.w	r6, #2139095040	@ 0x7f800000
 8008508:	bf01      	itttt	eq
 800850a:	eddf 7a78 	vldreq	s15, [pc, #480]	@ 80086ec <__ieee754_powf+0x3e0>
 800850e:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 8008512:	f06f 0317 	mvneq.w	r3, #23
 8008516:	ee17 7a90 	vmoveq	r7, s15
 800851a:	ea4f 52e7 	mov.w	r2, r7, asr #23
 800851e:	bf18      	it	ne
 8008520:	2300      	movne	r3, #0
 8008522:	3a7f      	subs	r2, #127	@ 0x7f
 8008524:	441a      	add	r2, r3
 8008526:	4b72      	ldr	r3, [pc, #456]	@ (80086f0 <__ieee754_powf+0x3e4>)
 8008528:	f3c7 0716 	ubfx	r7, r7, #0, #23
 800852c:	429f      	cmp	r7, r3
 800852e:	f047 517e 	orr.w	r1, r7, #1065353216	@ 0x3f800000
 8008532:	dd06      	ble.n	8008542 <__ieee754_powf+0x236>
 8008534:	4b6f      	ldr	r3, [pc, #444]	@ (80086f4 <__ieee754_powf+0x3e8>)
 8008536:	429f      	cmp	r7, r3
 8008538:	f340 80a4 	ble.w	8008684 <__ieee754_powf+0x378>
 800853c:	3201      	adds	r2, #1
 800853e:	f5a1 0100 	sub.w	r1, r1, #8388608	@ 0x800000
 8008542:	2600      	movs	r6, #0
 8008544:	4b6c      	ldr	r3, [pc, #432]	@ (80086f8 <__ieee754_powf+0x3ec>)
 8008546:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 800854a:	ee07 1a10 	vmov	s14, r1
 800854e:	edd3 5a00 	vldr	s11, [r3]
 8008552:	4b6a      	ldr	r3, [pc, #424]	@ (80086fc <__ieee754_powf+0x3f0>)
 8008554:	ee75 7a87 	vadd.f32	s15, s11, s14
 8008558:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800855c:	eec6 4aa7 	vdiv.f32	s9, s13, s15
 8008560:	1049      	asrs	r1, r1, #1
 8008562:	f041 5100 	orr.w	r1, r1, #536870912	@ 0x20000000
 8008566:	f501 2180 	add.w	r1, r1, #262144	@ 0x40000
 800856a:	eb01 5146 	add.w	r1, r1, r6, lsl #21
 800856e:	ee37 6a65 	vsub.f32	s12, s14, s11
 8008572:	ee07 1a90 	vmov	s15, r1
 8008576:	ee26 5a24 	vmul.f32	s10, s12, s9
 800857a:	ee77 5ae5 	vsub.f32	s11, s15, s11
 800857e:	ee15 7a10 	vmov	r7, s10
 8008582:	401f      	ands	r7, r3
 8008584:	ee06 7a90 	vmov	s13, r7
 8008588:	eea6 6ae7 	vfms.f32	s12, s13, s15
 800858c:	ee37 7a65 	vsub.f32	s14, s14, s11
 8008590:	ee65 7a05 	vmul.f32	s15, s10, s10
 8008594:	eea6 6ac7 	vfms.f32	s12, s13, s14
 8008598:	eddf 5a59 	vldr	s11, [pc, #356]	@ 8008700 <__ieee754_powf+0x3f4>
 800859c:	ed9f 7a59 	vldr	s14, [pc, #356]	@ 8008704 <__ieee754_powf+0x3f8>
 80085a0:	eee7 5a87 	vfma.f32	s11, s15, s14
 80085a4:	ed9f 7a58 	vldr	s14, [pc, #352]	@ 8008708 <__ieee754_powf+0x3fc>
 80085a8:	eea5 7aa7 	vfma.f32	s14, s11, s15
 80085ac:	eddf 5a4b 	vldr	s11, [pc, #300]	@ 80086dc <__ieee754_powf+0x3d0>
 80085b0:	eee7 5a27 	vfma.f32	s11, s14, s15
 80085b4:	ed9f 7a55 	vldr	s14, [pc, #340]	@ 800870c <__ieee754_powf+0x400>
 80085b8:	eea5 7aa7 	vfma.f32	s14, s11, s15
 80085bc:	eddf 5a54 	vldr	s11, [pc, #336]	@ 8008710 <__ieee754_powf+0x404>
 80085c0:	ee26 6a24 	vmul.f32	s12, s12, s9
 80085c4:	eee7 5a27 	vfma.f32	s11, s14, s15
 80085c8:	ee35 7a26 	vadd.f32	s14, s10, s13
 80085cc:	ee67 4aa7 	vmul.f32	s9, s15, s15
 80085d0:	ee27 7a06 	vmul.f32	s14, s14, s12
 80085d4:	eef0 7a08 	vmov.f32	s15, #8	@ 0x40400000  3.0
 80085d8:	eea4 7aa5 	vfma.f32	s14, s9, s11
 80085dc:	eef0 5a67 	vmov.f32	s11, s15
 80085e0:	eee6 5aa6 	vfma.f32	s11, s13, s13
 80085e4:	ee75 5a87 	vadd.f32	s11, s11, s14
 80085e8:	ee15 1a90 	vmov	r1, s11
 80085ec:	4019      	ands	r1, r3
 80085ee:	ee05 1a90 	vmov	s11, r1
 80085f2:	ee75 7ae7 	vsub.f32	s15, s11, s15
 80085f6:	eee6 7ae6 	vfms.f32	s15, s13, s13
 80085fa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80085fe:	ee67 7a85 	vmul.f32	s15, s15, s10
 8008602:	eee6 7a25 	vfma.f32	s15, s12, s11
 8008606:	eeb0 6a67 	vmov.f32	s12, s15
 800860a:	eea6 6aa5 	vfma.f32	s12, s13, s11
 800860e:	ee16 1a10 	vmov	r1, s12
 8008612:	4019      	ands	r1, r3
 8008614:	ee06 1a10 	vmov	s12, r1
 8008618:	eeb0 7a46 	vmov.f32	s14, s12
 800861c:	eea6 7ae5 	vfms.f32	s14, s13, s11
 8008620:	493c      	ldr	r1, [pc, #240]	@ (8008714 <__ieee754_powf+0x408>)
 8008622:	eb01 0186 	add.w	r1, r1, r6, lsl #2
 8008626:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800862a:	ed9f 7a3b 	vldr	s14, [pc, #236]	@ 8008718 <__ieee754_powf+0x40c>
 800862e:	eddf 5a3b 	vldr	s11, [pc, #236]	@ 800871c <__ieee754_powf+0x410>
 8008632:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008636:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 8008720 <__ieee754_powf+0x414>
 800863a:	eee6 7a07 	vfma.f32	s15, s12, s14
 800863e:	ed91 7a00 	vldr	s14, [r1]
 8008642:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008646:	ee07 2a10 	vmov	s14, r2
 800864a:	4a36      	ldr	r2, [pc, #216]	@ (8008724 <__ieee754_powf+0x418>)
 800864c:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8008650:	eeb0 7a67 	vmov.f32	s14, s15
 8008654:	eea6 7a25 	vfma.f32	s14, s12, s11
 8008658:	eb02 0286 	add.w	r2, r2, r6, lsl #2
 800865c:	ed92 5a00 	vldr	s10, [r2]
 8008660:	ee37 7a05 	vadd.f32	s14, s14, s10
 8008664:	ee37 7a26 	vadd.f32	s14, s14, s13
 8008668:	ee17 2a10 	vmov	r2, s14
 800866c:	401a      	ands	r2, r3
 800866e:	ee07 2a10 	vmov	s14, r2
 8008672:	ee77 6a66 	vsub.f32	s13, s14, s13
 8008676:	ee76 6ac5 	vsub.f32	s13, s13, s10
 800867a:	eee6 6a65 	vfms.f32	s13, s12, s11
 800867e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8008682:	e715      	b.n	80084b0 <__ieee754_powf+0x1a4>
 8008684:	2601      	movs	r6, #1
 8008686:	e75d      	b.n	8008544 <__ieee754_powf+0x238>
 8008688:	d152      	bne.n	8008730 <__ieee754_powf+0x424>
 800868a:	eddf 6a27 	vldr	s13, [pc, #156]	@ 8008728 <__ieee754_powf+0x41c>
 800868e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8008692:	ee70 6aa6 	vadd.f32	s13, s1, s13
 8008696:	eef4 6ac7 	vcmpe.f32	s13, s14
 800869a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800869e:	f73f af29 	bgt.w	80084f4 <__ieee754_powf+0x1e8>
 80086a2:	2386      	movs	r3, #134	@ 0x86
 80086a4:	e048      	b.n	8008738 <__ieee754_powf+0x42c>
 80086a6:	4a21      	ldr	r2, [pc, #132]	@ (800872c <__ieee754_powf+0x420>)
 80086a8:	4293      	cmp	r3, r2
 80086aa:	d907      	bls.n	80086bc <__ieee754_powf+0x3b0>
 80086ac:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 80086b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80086b4:	bf4c      	ite	mi
 80086b6:	2001      	movmi	r0, #1
 80086b8:	2000      	movpl	r0, #0
 80086ba:	e6c7      	b.n	800844c <__ieee754_powf+0x140>
 80086bc:	d138      	bne.n	8008730 <__ieee754_powf+0x424>
 80086be:	ee37 7a67 	vsub.f32	s14, s14, s15
 80086c2:	eeb4 7ae0 	vcmpe.f32	s14, s1
 80086c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80086ca:	dbea      	blt.n	80086a2 <__ieee754_powf+0x396>
 80086cc:	e7ee      	b.n	80086ac <__ieee754_powf+0x3a0>
 80086ce:	bf00      	nop
 80086d0:	00000000 	.word	0x00000000
 80086d4:	3f7ffff3 	.word	0x3f7ffff3
 80086d8:	3f800007 	.word	0x3f800007
 80086dc:	3eaaaaab 	.word	0x3eaaaaab
 80086e0:	3fb8aa00 	.word	0x3fb8aa00
 80086e4:	3fb8aa3b 	.word	0x3fb8aa3b
 80086e8:	36eca570 	.word	0x36eca570
 80086ec:	4b800000 	.word	0x4b800000
 80086f0:	001cc471 	.word	0x001cc471
 80086f4:	005db3d6 	.word	0x005db3d6
 80086f8:	08008a1c 	.word	0x08008a1c
 80086fc:	fffff000 	.word	0xfffff000
 8008700:	3e6c3255 	.word	0x3e6c3255
 8008704:	3e53f142 	.word	0x3e53f142
 8008708:	3e8ba305 	.word	0x3e8ba305
 800870c:	3edb6db7 	.word	0x3edb6db7
 8008710:	3f19999a 	.word	0x3f19999a
 8008714:	08008a0c 	.word	0x08008a0c
 8008718:	3f76384f 	.word	0x3f76384f
 800871c:	3f763800 	.word	0x3f763800
 8008720:	369dc3a0 	.word	0x369dc3a0
 8008724:	08008a14 	.word	0x08008a14
 8008728:	3338aa3c 	.word	0x3338aa3c
 800872c:	43160000 	.word	0x43160000
 8008730:	f1b3 5f7c 	cmp.w	r3, #1056964608	@ 0x3f000000
 8008734:	d96f      	bls.n	8008816 <__ieee754_powf+0x50a>
 8008736:	15db      	asrs	r3, r3, #23
 8008738:	3b7e      	subs	r3, #126	@ 0x7e
 800873a:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 800873e:	4118      	asrs	r0, r3
 8008740:	4408      	add	r0, r1
 8008742:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8008746:	4a4e      	ldr	r2, [pc, #312]	@ (8008880 <__ieee754_powf+0x574>)
 8008748:	3b7f      	subs	r3, #127	@ 0x7f
 800874a:	411a      	asrs	r2, r3
 800874c:	4002      	ands	r2, r0
 800874e:	ee07 2a10 	vmov	s14, r2
 8008752:	f3c0 0016 	ubfx	r0, r0, #0, #23
 8008756:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800875a:	f1c3 0317 	rsb	r3, r3, #23
 800875e:	4118      	asrs	r0, r3
 8008760:	2900      	cmp	r1, #0
 8008762:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008766:	bfb8      	it	lt
 8008768:	4240      	neglt	r0, r0
 800876a:	ee77 6aa0 	vadd.f32	s13, s15, s1
 800876e:	ed9f 7a45 	vldr	s14, [pc, #276]	@ 8008884 <__ieee754_powf+0x578>
 8008772:	ed9f 6a45 	vldr	s12, [pc, #276]	@ 8008888 <__ieee754_powf+0x57c>
 8008776:	ee16 3a90 	vmov	r3, s13
 800877a:	f36f 030b 	bfc	r3, #0, #12
 800877e:	ee06 3a90 	vmov	s13, r3
 8008782:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8008786:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800878a:	ee70 0ae7 	vsub.f32	s1, s1, s15
 800878e:	eddf 7a3f 	vldr	s15, [pc, #252]	@ 800888c <__ieee754_powf+0x580>
 8008792:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008796:	eee0 7a87 	vfma.f32	s15, s1, s14
 800879a:	eeb0 7a67 	vmov.f32	s14, s15
 800879e:	eea6 7a86 	vfma.f32	s14, s13, s12
 80087a2:	eef0 5a47 	vmov.f32	s11, s14
 80087a6:	eee6 5ac6 	vfms.f32	s11, s13, s12
 80087aa:	ee67 6a07 	vmul.f32	s13, s14, s14
 80087ae:	ee77 7ae5 	vsub.f32	s15, s15, s11
 80087b2:	ed9f 6a37 	vldr	s12, [pc, #220]	@ 8008890 <__ieee754_powf+0x584>
 80087b6:	eddf 5a37 	vldr	s11, [pc, #220]	@ 8008894 <__ieee754_powf+0x588>
 80087ba:	eea6 6aa5 	vfma.f32	s12, s13, s11
 80087be:	eddf 5a36 	vldr	s11, [pc, #216]	@ 8008898 <__ieee754_powf+0x58c>
 80087c2:	eee6 5a26 	vfma.f32	s11, s12, s13
 80087c6:	ed9f 6a35 	vldr	s12, [pc, #212]	@ 800889c <__ieee754_powf+0x590>
 80087ca:	eea5 6aa6 	vfma.f32	s12, s11, s13
 80087ce:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80088a0 <__ieee754_powf+0x594>
 80087d2:	eee6 5a26 	vfma.f32	s11, s12, s13
 80087d6:	eeb0 6a47 	vmov.f32	s12, s14
 80087da:	eea5 6ae6 	vfms.f32	s12, s11, s13
 80087de:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 80087e2:	ee67 5a06 	vmul.f32	s11, s14, s12
 80087e6:	ee36 6a66 	vsub.f32	s12, s12, s13
 80087ea:	eee7 7a27 	vfma.f32	s15, s14, s15
 80087ee:	eec5 6a86 	vdiv.f32	s13, s11, s12
 80087f2:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80087f6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80087fa:	ee30 0a67 	vsub.f32	s0, s0, s15
 80087fe:	ee10 3a10 	vmov	r3, s0
 8008802:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 8008806:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800880a:	da06      	bge.n	800881a <__ieee754_powf+0x50e>
 800880c:	f000 f854 	bl	80088b8 <scalbnf>
 8008810:	ee20 0a08 	vmul.f32	s0, s0, s16
 8008814:	e592      	b.n	800833c <__ieee754_powf+0x30>
 8008816:	2000      	movs	r0, #0
 8008818:	e7a7      	b.n	800876a <__ieee754_powf+0x45e>
 800881a:	ee00 3a10 	vmov	s0, r3
 800881e:	e7f7      	b.n	8008810 <__ieee754_powf+0x504>
 8008820:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8008824:	e58a      	b.n	800833c <__ieee754_powf+0x30>
 8008826:	ed9f 0a1f 	vldr	s0, [pc, #124]	@ 80088a4 <__ieee754_powf+0x598>
 800882a:	e587      	b.n	800833c <__ieee754_powf+0x30>
 800882c:	eeb0 0a48 	vmov.f32	s0, s16
 8008830:	e584      	b.n	800833c <__ieee754_powf+0x30>
 8008832:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 8008836:	f43f adbb 	beq.w	80083b0 <__ieee754_powf+0xa4>
 800883a:	2502      	movs	r5, #2
 800883c:	eeb0 0a48 	vmov.f32	s0, s16
 8008840:	f000 f832 	bl	80088a8 <fabsf>
 8008844:	f026 4340 	bic.w	r3, r6, #3221225472	@ 0xc0000000
 8008848:	f1b3 5f7e 	cmp.w	r3, #1065353216	@ 0x3f800000
 800884c:	4647      	mov	r7, r8
 800884e:	d003      	beq.n	8008858 <__ieee754_powf+0x54c>
 8008850:	f1b8 0f00 	cmp.w	r8, #0
 8008854:	f47f addb 	bne.w	800840e <__ieee754_powf+0x102>
 8008858:	2c00      	cmp	r4, #0
 800885a:	bfbc      	itt	lt
 800885c:	eef7 7a00 	vmovlt.f32	s15, #112	@ 0x3f800000  1.0
 8008860:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 8008864:	2e00      	cmp	r6, #0
 8008866:	f6bf ad69 	bge.w	800833c <__ieee754_powf+0x30>
 800886a:	f1a8 587e 	sub.w	r8, r8, #1065353216	@ 0x3f800000
 800886e:	ea58 0805 	orrs.w	r8, r8, r5
 8008872:	f47f adc7 	bne.w	8008404 <__ieee754_powf+0xf8>
 8008876:	ee70 7a40 	vsub.f32	s15, s0, s0
 800887a:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 800887e:	e55d      	b.n	800833c <__ieee754_powf+0x30>
 8008880:	ff800000 	.word	0xff800000
 8008884:	3f317218 	.word	0x3f317218
 8008888:	3f317200 	.word	0x3f317200
 800888c:	35bfbe8c 	.word	0x35bfbe8c
 8008890:	b5ddea0e 	.word	0xb5ddea0e
 8008894:	3331bb4c 	.word	0x3331bb4c
 8008898:	388ab355 	.word	0x388ab355
 800889c:	bb360b61 	.word	0xbb360b61
 80088a0:	3e2aaaab 	.word	0x3e2aaaab
 80088a4:	00000000 	.word	0x00000000

080088a8 <fabsf>:
 80088a8:	ee10 3a10 	vmov	r3, s0
 80088ac:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80088b0:	ee00 3a10 	vmov	s0, r3
 80088b4:	4770      	bx	lr
	...

080088b8 <scalbnf>:
 80088b8:	ee10 3a10 	vmov	r3, s0
 80088bc:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 80088c0:	d02b      	beq.n	800891a <scalbnf+0x62>
 80088c2:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 80088c6:	d302      	bcc.n	80088ce <scalbnf+0x16>
 80088c8:	ee30 0a00 	vadd.f32	s0, s0, s0
 80088cc:	4770      	bx	lr
 80088ce:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 80088d2:	d123      	bne.n	800891c <scalbnf+0x64>
 80088d4:	4b24      	ldr	r3, [pc, #144]	@ (8008968 <scalbnf+0xb0>)
 80088d6:	eddf 7a25 	vldr	s15, [pc, #148]	@ 800896c <scalbnf+0xb4>
 80088da:	4298      	cmp	r0, r3
 80088dc:	ee20 0a27 	vmul.f32	s0, s0, s15
 80088e0:	db17      	blt.n	8008912 <scalbnf+0x5a>
 80088e2:	ee10 3a10 	vmov	r3, s0
 80088e6:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 80088ea:	3a19      	subs	r2, #25
 80088ec:	f24c 3150 	movw	r1, #50000	@ 0xc350
 80088f0:	4288      	cmp	r0, r1
 80088f2:	dd15      	ble.n	8008920 <scalbnf+0x68>
 80088f4:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 8008970 <scalbnf+0xb8>
 80088f8:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 8008974 <scalbnf+0xbc>
 80088fc:	ee10 3a10 	vmov	r3, s0
 8008900:	eeb0 7a67 	vmov.f32	s14, s15
 8008904:	2b00      	cmp	r3, #0
 8008906:	bfb8      	it	lt
 8008908:	eef0 7a66 	vmovlt.f32	s15, s13
 800890c:	ee27 0a87 	vmul.f32	s0, s15, s14
 8008910:	4770      	bx	lr
 8008912:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8008978 <scalbnf+0xc0>
 8008916:	ee27 0a80 	vmul.f32	s0, s15, s0
 800891a:	4770      	bx	lr
 800891c:	0dd2      	lsrs	r2, r2, #23
 800891e:	e7e5      	b.n	80088ec <scalbnf+0x34>
 8008920:	4410      	add	r0, r2
 8008922:	28fe      	cmp	r0, #254	@ 0xfe
 8008924:	dce6      	bgt.n	80088f4 <scalbnf+0x3c>
 8008926:	2800      	cmp	r0, #0
 8008928:	dd06      	ble.n	8008938 <scalbnf+0x80>
 800892a:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800892e:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8008932:	ee00 3a10 	vmov	s0, r3
 8008936:	4770      	bx	lr
 8008938:	f110 0f16 	cmn.w	r0, #22
 800893c:	da09      	bge.n	8008952 <scalbnf+0x9a>
 800893e:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 8008978 <scalbnf+0xc0>
 8008942:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 800897c <scalbnf+0xc4>
 8008946:	ee10 3a10 	vmov	r3, s0
 800894a:	eeb0 7a67 	vmov.f32	s14, s15
 800894e:	2b00      	cmp	r3, #0
 8008950:	e7d9      	b.n	8008906 <scalbnf+0x4e>
 8008952:	3019      	adds	r0, #25
 8008954:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8008958:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800895c:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 8008980 <scalbnf+0xc8>
 8008960:	ee07 3a90 	vmov	s15, r3
 8008964:	e7d7      	b.n	8008916 <scalbnf+0x5e>
 8008966:	bf00      	nop
 8008968:	ffff3cb0 	.word	0xffff3cb0
 800896c:	4c000000 	.word	0x4c000000
 8008970:	7149f2ca 	.word	0x7149f2ca
 8008974:	f149f2ca 	.word	0xf149f2ca
 8008978:	0da24260 	.word	0x0da24260
 800897c:	8da24260 	.word	0x8da24260
 8008980:	33000000 	.word	0x33000000

08008984 <with_errnof>:
 8008984:	b510      	push	{r4, lr}
 8008986:	ed2d 8b02 	vpush	{d8}
 800898a:	eeb0 8a40 	vmov.f32	s16, s0
 800898e:	4604      	mov	r4, r0
 8008990:	f7ff fb0a 	bl	8007fa8 <__errno>
 8008994:	eeb0 0a48 	vmov.f32	s0, s16
 8008998:	ecbd 8b02 	vpop	{d8}
 800899c:	6004      	str	r4, [r0, #0]
 800899e:	bd10      	pop	{r4, pc}

080089a0 <xflowf>:
 80089a0:	b130      	cbz	r0, 80089b0 <xflowf+0x10>
 80089a2:	eef1 7a40 	vneg.f32	s15, s0
 80089a6:	ee27 0a80 	vmul.f32	s0, s15, s0
 80089aa:	2022      	movs	r0, #34	@ 0x22
 80089ac:	f7ff bfea 	b.w	8008984 <with_errnof>
 80089b0:	eef0 7a40 	vmov.f32	s15, s0
 80089b4:	e7f7      	b.n	80089a6 <xflowf+0x6>
	...

080089b8 <__math_uflowf>:
 80089b8:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 80089c0 <__math_uflowf+0x8>
 80089bc:	f7ff bff0 	b.w	80089a0 <xflowf>
 80089c0:	10000000 	.word	0x10000000

080089c4 <__math_oflowf>:
 80089c4:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 80089cc <__math_oflowf+0x8>
 80089c8:	f7ff bfea 	b.w	80089a0 <xflowf>
 80089cc:	70000000 	.word	0x70000000

080089d0 <__ieee754_sqrtf>:
 80089d0:	eeb1 0ac0 	vsqrt.f32	s0, s0
 80089d4:	4770      	bx	lr
	...

080089d8 <_init>:
 80089d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089da:	bf00      	nop
 80089dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80089de:	bc08      	pop	{r3}
 80089e0:	469e      	mov	lr, r3
 80089e2:	4770      	bx	lr

080089e4 <_fini>:
 80089e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089e6:	bf00      	nop
 80089e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80089ea:	bc08      	pop	{r3}
 80089ec:	469e      	mov	lr, r3
 80089ee:	4770      	bx	lr
