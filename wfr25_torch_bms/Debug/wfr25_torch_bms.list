
wfr25_torch_bms.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e8bc  080001c8  080001c8  000011c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000034  0800ea84  0800ea84  0000fa84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800eab8  0800eab8  00010060  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800eab8  0800eab8  0000fab8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800eac0  0800eac0  00010060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800eac0  0800eac0  0000fac0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800eac4  0800eac4  0000fac4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  0800eac8  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004d8  20000060  0800eb28  00010060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000538  0800eb28  00010538  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00010060  2**0
                  CONTENTS, READONLY
 12 .debug_info   000154dc  00000000  00000000  00010090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000317e  00000000  00000000  0002556c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001220  00000000  00000000  000286f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000df5  00000000  00000000  00029910  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002436e  00000000  00000000  0002a705  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018d43  00000000  00000000  0004ea73  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e17cb  00000000  00000000  000677b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00148f81  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005058  00000000  00000000  00148fc4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  0014e01c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	@ (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	@ (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	20000060 	.word	0x20000060
 80001e4:	00000000 	.word	0x00000000
 80001e8:	0800ea6c 	.word	0x0800ea6c

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	@ (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	@ (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	@ (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000064 	.word	0x20000064
 8000204:	0800ea6c 	.word	0x0800ea6c

08000208 <__aeabi_drsub>:
 8000208:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800020c:	e002      	b.n	8000214 <__adddf3>
 800020e:	bf00      	nop

08000210 <__aeabi_dsub>:
 8000210:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000214 <__adddf3>:
 8000214:	b530      	push	{r4, r5, lr}
 8000216:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800021a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800021e:	ea94 0f05 	teq	r4, r5
 8000222:	bf08      	it	eq
 8000224:	ea90 0f02 	teqeq	r0, r2
 8000228:	bf1f      	itttt	ne
 800022a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800022e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000232:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000236:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800023a:	f000 80e2 	beq.w	8000402 <__adddf3+0x1ee>
 800023e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000242:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000246:	bfb8      	it	lt
 8000248:	426d      	neglt	r5, r5
 800024a:	dd0c      	ble.n	8000266 <__adddf3+0x52>
 800024c:	442c      	add	r4, r5
 800024e:	ea80 0202 	eor.w	r2, r0, r2
 8000252:	ea81 0303 	eor.w	r3, r1, r3
 8000256:	ea82 0000 	eor.w	r0, r2, r0
 800025a:	ea83 0101 	eor.w	r1, r3, r1
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	2d36      	cmp	r5, #54	@ 0x36
 8000268:	bf88      	it	hi
 800026a:	bd30      	pophi	{r4, r5, pc}
 800026c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000270:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000274:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000278:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800027c:	d002      	beq.n	8000284 <__adddf3+0x70>
 800027e:	4240      	negs	r0, r0
 8000280:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000284:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000288:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800028c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000290:	d002      	beq.n	8000298 <__adddf3+0x84>
 8000292:	4252      	negs	r2, r2
 8000294:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000298:	ea94 0f05 	teq	r4, r5
 800029c:	f000 80a7 	beq.w	80003ee <__adddf3+0x1da>
 80002a0:	f1a4 0401 	sub.w	r4, r4, #1
 80002a4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a8:	db0d      	blt.n	80002c6 <__adddf3+0xb2>
 80002aa:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ae:	fa22 f205 	lsr.w	r2, r2, r5
 80002b2:	1880      	adds	r0, r0, r2
 80002b4:	f141 0100 	adc.w	r1, r1, #0
 80002b8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002bc:	1880      	adds	r0, r0, r2
 80002be:	fa43 f305 	asr.w	r3, r3, r5
 80002c2:	4159      	adcs	r1, r3
 80002c4:	e00e      	b.n	80002e4 <__adddf3+0xd0>
 80002c6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ca:	f10e 0e20 	add.w	lr, lr, #32
 80002ce:	2a01      	cmp	r2, #1
 80002d0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002d4:	bf28      	it	cs
 80002d6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002da:	fa43 f305 	asr.w	r3, r3, r5
 80002de:	18c0      	adds	r0, r0, r3
 80002e0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002e4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002e8:	d507      	bpl.n	80002fa <__adddf3+0xe6>
 80002ea:	f04f 0e00 	mov.w	lr, #0
 80002ee:	f1dc 0c00 	rsbs	ip, ip, #0
 80002f2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002f6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002fa:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002fe:	d31b      	bcc.n	8000338 <__adddf3+0x124>
 8000300:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000304:	d30c      	bcc.n	8000320 <__adddf3+0x10c>
 8000306:	0849      	lsrs	r1, r1, #1
 8000308:	ea5f 0030 	movs.w	r0, r0, rrx
 800030c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000310:	f104 0401 	add.w	r4, r4, #1
 8000314:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000318:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800031c:	f080 809a 	bcs.w	8000454 <__adddf3+0x240>
 8000320:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	ea41 0105 	orr.w	r1, r1, r5
 8000336:	bd30      	pop	{r4, r5, pc}
 8000338:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800033c:	4140      	adcs	r0, r0
 800033e:	eb41 0101 	adc.w	r1, r1, r1
 8000342:	3c01      	subs	r4, #1
 8000344:	bf28      	it	cs
 8000346:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800034a:	d2e9      	bcs.n	8000320 <__adddf3+0x10c>
 800034c:	f091 0f00 	teq	r1, #0
 8000350:	bf04      	itt	eq
 8000352:	4601      	moveq	r1, r0
 8000354:	2000      	moveq	r0, #0
 8000356:	fab1 f381 	clz	r3, r1
 800035a:	bf08      	it	eq
 800035c:	3320      	addeq	r3, #32
 800035e:	f1a3 030b 	sub.w	r3, r3, #11
 8000362:	f1b3 0220 	subs.w	r2, r3, #32
 8000366:	da0c      	bge.n	8000382 <__adddf3+0x16e>
 8000368:	320c      	adds	r2, #12
 800036a:	dd08      	ble.n	800037e <__adddf3+0x16a>
 800036c:	f102 0c14 	add.w	ip, r2, #20
 8000370:	f1c2 020c 	rsb	r2, r2, #12
 8000374:	fa01 f00c 	lsl.w	r0, r1, ip
 8000378:	fa21 f102 	lsr.w	r1, r1, r2
 800037c:	e00c      	b.n	8000398 <__adddf3+0x184>
 800037e:	f102 0214 	add.w	r2, r2, #20
 8000382:	bfd8      	it	le
 8000384:	f1c2 0c20 	rsble	ip, r2, #32
 8000388:	fa01 f102 	lsl.w	r1, r1, r2
 800038c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000390:	bfdc      	itt	le
 8000392:	ea41 010c 	orrle.w	r1, r1, ip
 8000396:	4090      	lslle	r0, r2
 8000398:	1ae4      	subs	r4, r4, r3
 800039a:	bfa2      	ittt	ge
 800039c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003a0:	4329      	orrge	r1, r5
 80003a2:	bd30      	popge	{r4, r5, pc}
 80003a4:	ea6f 0404 	mvn.w	r4, r4
 80003a8:	3c1f      	subs	r4, #31
 80003aa:	da1c      	bge.n	80003e6 <__adddf3+0x1d2>
 80003ac:	340c      	adds	r4, #12
 80003ae:	dc0e      	bgt.n	80003ce <__adddf3+0x1ba>
 80003b0:	f104 0414 	add.w	r4, r4, #20
 80003b4:	f1c4 0220 	rsb	r2, r4, #32
 80003b8:	fa20 f004 	lsr.w	r0, r0, r4
 80003bc:	fa01 f302 	lsl.w	r3, r1, r2
 80003c0:	ea40 0003 	orr.w	r0, r0, r3
 80003c4:	fa21 f304 	lsr.w	r3, r1, r4
 80003c8:	ea45 0103 	orr.w	r1, r5, r3
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	f1c4 040c 	rsb	r4, r4, #12
 80003d2:	f1c4 0220 	rsb	r2, r4, #32
 80003d6:	fa20 f002 	lsr.w	r0, r0, r2
 80003da:	fa01 f304 	lsl.w	r3, r1, r4
 80003de:	ea40 0003 	orr.w	r0, r0, r3
 80003e2:	4629      	mov	r1, r5
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ea:	4629      	mov	r1, r5
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f094 0f00 	teq	r4, #0
 80003f2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003f6:	bf06      	itte	eq
 80003f8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003fc:	3401      	addeq	r4, #1
 80003fe:	3d01      	subne	r5, #1
 8000400:	e74e      	b.n	80002a0 <__adddf3+0x8c>
 8000402:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000406:	bf18      	it	ne
 8000408:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800040c:	d029      	beq.n	8000462 <__adddf3+0x24e>
 800040e:	ea94 0f05 	teq	r4, r5
 8000412:	bf08      	it	eq
 8000414:	ea90 0f02 	teqeq	r0, r2
 8000418:	d005      	beq.n	8000426 <__adddf3+0x212>
 800041a:	ea54 0c00 	orrs.w	ip, r4, r0
 800041e:	bf04      	itt	eq
 8000420:	4619      	moveq	r1, r3
 8000422:	4610      	moveq	r0, r2
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	ea91 0f03 	teq	r1, r3
 800042a:	bf1e      	ittt	ne
 800042c:	2100      	movne	r1, #0
 800042e:	2000      	movne	r0, #0
 8000430:	bd30      	popne	{r4, r5, pc}
 8000432:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000436:	d105      	bne.n	8000444 <__adddf3+0x230>
 8000438:	0040      	lsls	r0, r0, #1
 800043a:	4149      	adcs	r1, r1
 800043c:	bf28      	it	cs
 800043e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000442:	bd30      	pop	{r4, r5, pc}
 8000444:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000448:	bf3c      	itt	cc
 800044a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800044e:	bd30      	popcc	{r4, r5, pc}
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000454:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000458:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800045c:	f04f 0000 	mov.w	r0, #0
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000466:	bf1a      	itte	ne
 8000468:	4619      	movne	r1, r3
 800046a:	4610      	movne	r0, r2
 800046c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000470:	bf1c      	itt	ne
 8000472:	460b      	movne	r3, r1
 8000474:	4602      	movne	r2, r0
 8000476:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800047a:	bf06      	itte	eq
 800047c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000480:	ea91 0f03 	teqeq	r1, r3
 8000484:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	bf00      	nop

0800048c <__aeabi_ui2d>:
 800048c:	f090 0f00 	teq	r0, #0
 8000490:	bf04      	itt	eq
 8000492:	2100      	moveq	r1, #0
 8000494:	4770      	bxeq	lr
 8000496:	b530      	push	{r4, r5, lr}
 8000498:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800049c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004a0:	f04f 0500 	mov.w	r5, #0
 80004a4:	f04f 0100 	mov.w	r1, #0
 80004a8:	e750      	b.n	800034c <__adddf3+0x138>
 80004aa:	bf00      	nop

080004ac <__aeabi_i2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004c0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004c4:	bf48      	it	mi
 80004c6:	4240      	negmi	r0, r0
 80004c8:	f04f 0100 	mov.w	r1, #0
 80004cc:	e73e      	b.n	800034c <__adddf3+0x138>
 80004ce:	bf00      	nop

080004d0 <__aeabi_f2d>:
 80004d0:	0042      	lsls	r2, r0, #1
 80004d2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004d6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004da:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004de:	bf1f      	itttt	ne
 80004e0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004e4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004e8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004ec:	4770      	bxne	lr
 80004ee:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004f2:	bf08      	it	eq
 80004f4:	4770      	bxeq	lr
 80004f6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004fa:	bf04      	itt	eq
 80004fc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000500:	4770      	bxeq	lr
 8000502:	b530      	push	{r4, r5, lr}
 8000504:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000510:	e71c      	b.n	800034c <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_ul2d>:
 8000514:	ea50 0201 	orrs.w	r2, r0, r1
 8000518:	bf08      	it	eq
 800051a:	4770      	bxeq	lr
 800051c:	b530      	push	{r4, r5, lr}
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	e00a      	b.n	800053a <__aeabi_l2d+0x16>

08000524 <__aeabi_l2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000532:	d502      	bpl.n	800053a <__aeabi_l2d+0x16>
 8000534:	4240      	negs	r0, r0
 8000536:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800053a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800053e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000542:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000546:	f43f aed8 	beq.w	80002fa <__adddf3+0xe6>
 800054a:	f04f 0203 	mov.w	r2, #3
 800054e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000552:	bf18      	it	ne
 8000554:	3203      	addne	r2, #3
 8000556:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800055a:	bf18      	it	ne
 800055c:	3203      	addne	r2, #3
 800055e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000562:	f1c2 0320 	rsb	r3, r2, #32
 8000566:	fa00 fc03 	lsl.w	ip, r0, r3
 800056a:	fa20 f002 	lsr.w	r0, r0, r2
 800056e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000572:	ea40 000e 	orr.w	r0, r0, lr
 8000576:	fa21 f102 	lsr.w	r1, r1, r2
 800057a:	4414      	add	r4, r2
 800057c:	e6bd      	b.n	80002fa <__adddf3+0xe6>
 800057e:	bf00      	nop

08000580 <__aeabi_dmul>:
 8000580:	b570      	push	{r4, r5, r6, lr}
 8000582:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000586:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800058a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800058e:	bf1d      	ittte	ne
 8000590:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000594:	ea94 0f0c 	teqne	r4, ip
 8000598:	ea95 0f0c 	teqne	r5, ip
 800059c:	f000 f8de 	bleq	800075c <__aeabi_dmul+0x1dc>
 80005a0:	442c      	add	r4, r5
 80005a2:	ea81 0603 	eor.w	r6, r1, r3
 80005a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005b2:	bf18      	it	ne
 80005b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005bc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005c0:	d038      	beq.n	8000634 <__aeabi_dmul+0xb4>
 80005c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ce:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005d6:	f04f 0600 	mov.w	r6, #0
 80005da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005de:	f09c 0f00 	teq	ip, #0
 80005e2:	bf18      	it	ne
 80005e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005e8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005ec:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005f0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005f4:	d204      	bcs.n	8000600 <__aeabi_dmul+0x80>
 80005f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005fa:	416d      	adcs	r5, r5
 80005fc:	eb46 0606 	adc.w	r6, r6, r6
 8000600:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000604:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000608:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800060c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000610:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000614:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000618:	bf88      	it	hi
 800061a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800061e:	d81e      	bhi.n	800065e <__aeabi_dmul+0xde>
 8000620:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000624:	bf08      	it	eq
 8000626:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800062a:	f150 0000 	adcs.w	r0, r0, #0
 800062e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000632:	bd70      	pop	{r4, r5, r6, pc}
 8000634:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000638:	ea46 0101 	orr.w	r1, r6, r1
 800063c:	ea40 0002 	orr.w	r0, r0, r2
 8000640:	ea81 0103 	eor.w	r1, r1, r3
 8000644:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000648:	bfc2      	ittt	gt
 800064a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800064e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000652:	bd70      	popgt	{r4, r5, r6, pc}
 8000654:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000658:	f04f 0e00 	mov.w	lr, #0
 800065c:	3c01      	subs	r4, #1
 800065e:	f300 80ab 	bgt.w	80007b8 <__aeabi_dmul+0x238>
 8000662:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000666:	bfde      	ittt	le
 8000668:	2000      	movle	r0, #0
 800066a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800066e:	bd70      	pople	{r4, r5, r6, pc}
 8000670:	f1c4 0400 	rsb	r4, r4, #0
 8000674:	3c20      	subs	r4, #32
 8000676:	da35      	bge.n	80006e4 <__aeabi_dmul+0x164>
 8000678:	340c      	adds	r4, #12
 800067a:	dc1b      	bgt.n	80006b4 <__aeabi_dmul+0x134>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f305 	lsl.w	r3, r0, r5
 8000688:	fa20 f004 	lsr.w	r0, r0, r4
 800068c:	fa01 f205 	lsl.w	r2, r1, r5
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000698:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800069c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a0:	fa21 f604 	lsr.w	r6, r1, r4
 80006a4:	eb42 0106 	adc.w	r1, r2, r6
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 040c 	rsb	r4, r4, #12
 80006b8:	f1c4 0520 	rsb	r5, r4, #32
 80006bc:	fa00 f304 	lsl.w	r3, r0, r4
 80006c0:	fa20 f005 	lsr.w	r0, r0, r5
 80006c4:	fa01 f204 	lsl.w	r2, r1, r4
 80006c8:	ea40 0002 	orr.w	r0, r0, r2
 80006cc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d4:	f141 0100 	adc.w	r1, r1, #0
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 0520 	rsb	r5, r4, #32
 80006e8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80006f0:	fa20 f304 	lsr.w	r3, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea43 0302 	orr.w	r3, r3, r2
 80006fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000704:	fa21 f204 	lsr.w	r2, r1, r4
 8000708:	ea20 0002 	bic.w	r0, r0, r2
 800070c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f094 0f00 	teq	r4, #0
 8000720:	d10f      	bne.n	8000742 <__aeabi_dmul+0x1c2>
 8000722:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000726:	0040      	lsls	r0, r0, #1
 8000728:	eb41 0101 	adc.w	r1, r1, r1
 800072c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000730:	bf08      	it	eq
 8000732:	3c01      	subeq	r4, #1
 8000734:	d0f7      	beq.n	8000726 <__aeabi_dmul+0x1a6>
 8000736:	ea41 0106 	orr.w	r1, r1, r6
 800073a:	f095 0f00 	teq	r5, #0
 800073e:	bf18      	it	ne
 8000740:	4770      	bxne	lr
 8000742:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000746:	0052      	lsls	r2, r2, #1
 8000748:	eb43 0303 	adc.w	r3, r3, r3
 800074c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000750:	bf08      	it	eq
 8000752:	3d01      	subeq	r5, #1
 8000754:	d0f7      	beq.n	8000746 <__aeabi_dmul+0x1c6>
 8000756:	ea43 0306 	orr.w	r3, r3, r6
 800075a:	4770      	bx	lr
 800075c:	ea94 0f0c 	teq	r4, ip
 8000760:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000764:	bf18      	it	ne
 8000766:	ea95 0f0c 	teqne	r5, ip
 800076a:	d00c      	beq.n	8000786 <__aeabi_dmul+0x206>
 800076c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000770:	bf18      	it	ne
 8000772:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000776:	d1d1      	bne.n	800071c <__aeabi_dmul+0x19c>
 8000778:	ea81 0103 	eor.w	r1, r1, r3
 800077c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000780:	f04f 0000 	mov.w	r0, #0
 8000784:	bd70      	pop	{r4, r5, r6, pc}
 8000786:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800078a:	bf06      	itte	eq
 800078c:	4610      	moveq	r0, r2
 800078e:	4619      	moveq	r1, r3
 8000790:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000794:	d019      	beq.n	80007ca <__aeabi_dmul+0x24a>
 8000796:	ea94 0f0c 	teq	r4, ip
 800079a:	d102      	bne.n	80007a2 <__aeabi_dmul+0x222>
 800079c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007a0:	d113      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007a2:	ea95 0f0c 	teq	r5, ip
 80007a6:	d105      	bne.n	80007b4 <__aeabi_dmul+0x234>
 80007a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007ac:	bf1c      	itt	ne
 80007ae:	4610      	movne	r0, r2
 80007b0:	4619      	movne	r1, r3
 80007b2:	d10a      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007b4:	ea81 0103 	eor.w	r1, r1, r3
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007c0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007c4:	f04f 0000 	mov.w	r0, #0
 80007c8:	bd70      	pop	{r4, r5, r6, pc}
 80007ca:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007ce:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007d2:	bd70      	pop	{r4, r5, r6, pc}

080007d4 <__aeabi_ddiv>:
 80007d4:	b570      	push	{r4, r5, r6, lr}
 80007d6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007da:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007de:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007e2:	bf1d      	ittte	ne
 80007e4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007e8:	ea94 0f0c 	teqne	r4, ip
 80007ec:	ea95 0f0c 	teqne	r5, ip
 80007f0:	f000 f8a7 	bleq	8000942 <__aeabi_ddiv+0x16e>
 80007f4:	eba4 0405 	sub.w	r4, r4, r5
 80007f8:	ea81 0e03 	eor.w	lr, r1, r3
 80007fc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000800:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000804:	f000 8088 	beq.w	8000918 <__aeabi_ddiv+0x144>
 8000808:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800080c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000810:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000814:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000818:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800081c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000820:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000824:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000828:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800082c:	429d      	cmp	r5, r3
 800082e:	bf08      	it	eq
 8000830:	4296      	cmpeq	r6, r2
 8000832:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000836:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800083a:	d202      	bcs.n	8000842 <__aeabi_ddiv+0x6e>
 800083c:	085b      	lsrs	r3, r3, #1
 800083e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000842:	1ab6      	subs	r6, r6, r2
 8000844:	eb65 0503 	sbc.w	r5, r5, r3
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000852:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 000c 	orrcs.w	r0, r0, ip
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008b0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008b4:	d018      	beq.n	80008e8 <__aeabi_ddiv+0x114>
 80008b6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ba:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008be:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008c2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008c6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ca:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ce:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008d2:	d1c0      	bne.n	8000856 <__aeabi_ddiv+0x82>
 80008d4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008d8:	d10b      	bne.n	80008f2 <__aeabi_ddiv+0x11e>
 80008da:	ea41 0100 	orr.w	r1, r1, r0
 80008de:	f04f 0000 	mov.w	r0, #0
 80008e2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008e6:	e7b6      	b.n	8000856 <__aeabi_ddiv+0x82>
 80008e8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008ec:	bf04      	itt	eq
 80008ee:	4301      	orreq	r1, r0
 80008f0:	2000      	moveq	r0, #0
 80008f2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008f6:	bf88      	it	hi
 80008f8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008fc:	f63f aeaf 	bhi.w	800065e <__aeabi_dmul+0xde>
 8000900:	ebb5 0c03 	subs.w	ip, r5, r3
 8000904:	bf04      	itt	eq
 8000906:	ebb6 0c02 	subseq.w	ip, r6, r2
 800090a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800090e:	f150 0000 	adcs.w	r0, r0, #0
 8000912:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000916:	bd70      	pop	{r4, r5, r6, pc}
 8000918:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800091c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000920:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000924:	bfc2      	ittt	gt
 8000926:	ebd4 050c 	rsbsgt	r5, r4, ip
 800092a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800092e:	bd70      	popgt	{r4, r5, r6, pc}
 8000930:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000934:	f04f 0e00 	mov.w	lr, #0
 8000938:	3c01      	subs	r4, #1
 800093a:	e690      	b.n	800065e <__aeabi_dmul+0xde>
 800093c:	ea45 0e06 	orr.w	lr, r5, r6
 8000940:	e68d      	b.n	800065e <__aeabi_dmul+0xde>
 8000942:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000946:	ea94 0f0c 	teq	r4, ip
 800094a:	bf08      	it	eq
 800094c:	ea95 0f0c 	teqeq	r5, ip
 8000950:	f43f af3b 	beq.w	80007ca <__aeabi_dmul+0x24a>
 8000954:	ea94 0f0c 	teq	r4, ip
 8000958:	d10a      	bne.n	8000970 <__aeabi_ddiv+0x19c>
 800095a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800095e:	f47f af34 	bne.w	80007ca <__aeabi_dmul+0x24a>
 8000962:	ea95 0f0c 	teq	r5, ip
 8000966:	f47f af25 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800096a:	4610      	mov	r0, r2
 800096c:	4619      	mov	r1, r3
 800096e:	e72c      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000970:	ea95 0f0c 	teq	r5, ip
 8000974:	d106      	bne.n	8000984 <__aeabi_ddiv+0x1b0>
 8000976:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800097a:	f43f aefd 	beq.w	8000778 <__aeabi_dmul+0x1f8>
 800097e:	4610      	mov	r0, r2
 8000980:	4619      	mov	r1, r3
 8000982:	e722      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000984:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800098e:	f47f aec5 	bne.w	800071c <__aeabi_dmul+0x19c>
 8000992:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000996:	f47f af0d 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800099a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800099e:	f47f aeeb 	bne.w	8000778 <__aeabi_dmul+0x1f8>
 80009a2:	e712      	b.n	80007ca <__aeabi_dmul+0x24a>

080009a4 <__aeabi_d2f>:
 80009a4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009a8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 80009ac:	bf24      	itt	cs
 80009ae:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 80009b2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 80009b6:	d90d      	bls.n	80009d4 <__aeabi_d2f+0x30>
 80009b8:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80009bc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80009c0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80009c4:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 80009c8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80009cc:	bf08      	it	eq
 80009ce:	f020 0001 	biceq.w	r0, r0, #1
 80009d2:	4770      	bx	lr
 80009d4:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 80009d8:	d121      	bne.n	8000a1e <__aeabi_d2f+0x7a>
 80009da:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 80009de:	bfbc      	itt	lt
 80009e0:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 80009e4:	4770      	bxlt	lr
 80009e6:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ea:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009ee:	f1c2 0218 	rsb	r2, r2, #24
 80009f2:	f1c2 0c20 	rsb	ip, r2, #32
 80009f6:	fa10 f30c 	lsls.w	r3, r0, ip
 80009fa:	fa20 f002 	lsr.w	r0, r0, r2
 80009fe:	bf18      	it	ne
 8000a00:	f040 0001 	orrne.w	r0, r0, #1
 8000a04:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a08:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a0c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a10:	ea40 000c 	orr.w	r0, r0, ip
 8000a14:	fa23 f302 	lsr.w	r3, r3, r2
 8000a18:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a1c:	e7cc      	b.n	80009b8 <__aeabi_d2f+0x14>
 8000a1e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a22:	d107      	bne.n	8000a34 <__aeabi_d2f+0x90>
 8000a24:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a28:	bf1e      	ittt	ne
 8000a2a:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000a2e:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000a32:	4770      	bxne	lr
 8000a34:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000a38:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000a3c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000a40:	4770      	bx	lr
 8000a42:	bf00      	nop

08000a44 <__aeabi_uldivmod>:
 8000a44:	b953      	cbnz	r3, 8000a5c <__aeabi_uldivmod+0x18>
 8000a46:	b94a      	cbnz	r2, 8000a5c <__aeabi_uldivmod+0x18>
 8000a48:	2900      	cmp	r1, #0
 8000a4a:	bf08      	it	eq
 8000a4c:	2800      	cmpeq	r0, #0
 8000a4e:	bf1c      	itt	ne
 8000a50:	f04f 31ff 	movne.w	r1, #4294967295
 8000a54:	f04f 30ff 	movne.w	r0, #4294967295
 8000a58:	f000 b988 	b.w	8000d6c <__aeabi_idiv0>
 8000a5c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a60:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a64:	f000 f806 	bl	8000a74 <__udivmoddi4>
 8000a68:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a6c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a70:	b004      	add	sp, #16
 8000a72:	4770      	bx	lr

08000a74 <__udivmoddi4>:
 8000a74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a78:	9d08      	ldr	r5, [sp, #32]
 8000a7a:	468e      	mov	lr, r1
 8000a7c:	4604      	mov	r4, r0
 8000a7e:	4688      	mov	r8, r1
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d14a      	bne.n	8000b1a <__udivmoddi4+0xa6>
 8000a84:	428a      	cmp	r2, r1
 8000a86:	4617      	mov	r7, r2
 8000a88:	d962      	bls.n	8000b50 <__udivmoddi4+0xdc>
 8000a8a:	fab2 f682 	clz	r6, r2
 8000a8e:	b14e      	cbz	r6, 8000aa4 <__udivmoddi4+0x30>
 8000a90:	f1c6 0320 	rsb	r3, r6, #32
 8000a94:	fa01 f806 	lsl.w	r8, r1, r6
 8000a98:	fa20 f303 	lsr.w	r3, r0, r3
 8000a9c:	40b7      	lsls	r7, r6
 8000a9e:	ea43 0808 	orr.w	r8, r3, r8
 8000aa2:	40b4      	lsls	r4, r6
 8000aa4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000aa8:	fa1f fc87 	uxth.w	ip, r7
 8000aac:	fbb8 f1fe 	udiv	r1, r8, lr
 8000ab0:	0c23      	lsrs	r3, r4, #16
 8000ab2:	fb0e 8811 	mls	r8, lr, r1, r8
 8000ab6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000aba:	fb01 f20c 	mul.w	r2, r1, ip
 8000abe:	429a      	cmp	r2, r3
 8000ac0:	d909      	bls.n	8000ad6 <__udivmoddi4+0x62>
 8000ac2:	18fb      	adds	r3, r7, r3
 8000ac4:	f101 30ff 	add.w	r0, r1, #4294967295
 8000ac8:	f080 80ea 	bcs.w	8000ca0 <__udivmoddi4+0x22c>
 8000acc:	429a      	cmp	r2, r3
 8000ace:	f240 80e7 	bls.w	8000ca0 <__udivmoddi4+0x22c>
 8000ad2:	3902      	subs	r1, #2
 8000ad4:	443b      	add	r3, r7
 8000ad6:	1a9a      	subs	r2, r3, r2
 8000ad8:	b2a3      	uxth	r3, r4
 8000ada:	fbb2 f0fe 	udiv	r0, r2, lr
 8000ade:	fb0e 2210 	mls	r2, lr, r0, r2
 8000ae2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000ae6:	fb00 fc0c 	mul.w	ip, r0, ip
 8000aea:	459c      	cmp	ip, r3
 8000aec:	d909      	bls.n	8000b02 <__udivmoddi4+0x8e>
 8000aee:	18fb      	adds	r3, r7, r3
 8000af0:	f100 32ff 	add.w	r2, r0, #4294967295
 8000af4:	f080 80d6 	bcs.w	8000ca4 <__udivmoddi4+0x230>
 8000af8:	459c      	cmp	ip, r3
 8000afa:	f240 80d3 	bls.w	8000ca4 <__udivmoddi4+0x230>
 8000afe:	443b      	add	r3, r7
 8000b00:	3802      	subs	r0, #2
 8000b02:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000b06:	eba3 030c 	sub.w	r3, r3, ip
 8000b0a:	2100      	movs	r1, #0
 8000b0c:	b11d      	cbz	r5, 8000b16 <__udivmoddi4+0xa2>
 8000b0e:	40f3      	lsrs	r3, r6
 8000b10:	2200      	movs	r2, #0
 8000b12:	e9c5 3200 	strd	r3, r2, [r5]
 8000b16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b1a:	428b      	cmp	r3, r1
 8000b1c:	d905      	bls.n	8000b2a <__udivmoddi4+0xb6>
 8000b1e:	b10d      	cbz	r5, 8000b24 <__udivmoddi4+0xb0>
 8000b20:	e9c5 0100 	strd	r0, r1, [r5]
 8000b24:	2100      	movs	r1, #0
 8000b26:	4608      	mov	r0, r1
 8000b28:	e7f5      	b.n	8000b16 <__udivmoddi4+0xa2>
 8000b2a:	fab3 f183 	clz	r1, r3
 8000b2e:	2900      	cmp	r1, #0
 8000b30:	d146      	bne.n	8000bc0 <__udivmoddi4+0x14c>
 8000b32:	4573      	cmp	r3, lr
 8000b34:	d302      	bcc.n	8000b3c <__udivmoddi4+0xc8>
 8000b36:	4282      	cmp	r2, r0
 8000b38:	f200 8105 	bhi.w	8000d46 <__udivmoddi4+0x2d2>
 8000b3c:	1a84      	subs	r4, r0, r2
 8000b3e:	eb6e 0203 	sbc.w	r2, lr, r3
 8000b42:	2001      	movs	r0, #1
 8000b44:	4690      	mov	r8, r2
 8000b46:	2d00      	cmp	r5, #0
 8000b48:	d0e5      	beq.n	8000b16 <__udivmoddi4+0xa2>
 8000b4a:	e9c5 4800 	strd	r4, r8, [r5]
 8000b4e:	e7e2      	b.n	8000b16 <__udivmoddi4+0xa2>
 8000b50:	2a00      	cmp	r2, #0
 8000b52:	f000 8090 	beq.w	8000c76 <__udivmoddi4+0x202>
 8000b56:	fab2 f682 	clz	r6, r2
 8000b5a:	2e00      	cmp	r6, #0
 8000b5c:	f040 80a4 	bne.w	8000ca8 <__udivmoddi4+0x234>
 8000b60:	1a8a      	subs	r2, r1, r2
 8000b62:	0c03      	lsrs	r3, r0, #16
 8000b64:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000b68:	b280      	uxth	r0, r0
 8000b6a:	b2bc      	uxth	r4, r7
 8000b6c:	2101      	movs	r1, #1
 8000b6e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000b72:	fb0e 221c 	mls	r2, lr, ip, r2
 8000b76:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000b7a:	fb04 f20c 	mul.w	r2, r4, ip
 8000b7e:	429a      	cmp	r2, r3
 8000b80:	d907      	bls.n	8000b92 <__udivmoddi4+0x11e>
 8000b82:	18fb      	adds	r3, r7, r3
 8000b84:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000b88:	d202      	bcs.n	8000b90 <__udivmoddi4+0x11c>
 8000b8a:	429a      	cmp	r2, r3
 8000b8c:	f200 80e0 	bhi.w	8000d50 <__udivmoddi4+0x2dc>
 8000b90:	46c4      	mov	ip, r8
 8000b92:	1a9b      	subs	r3, r3, r2
 8000b94:	fbb3 f2fe 	udiv	r2, r3, lr
 8000b98:	fb0e 3312 	mls	r3, lr, r2, r3
 8000b9c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000ba0:	fb02 f404 	mul.w	r4, r2, r4
 8000ba4:	429c      	cmp	r4, r3
 8000ba6:	d907      	bls.n	8000bb8 <__udivmoddi4+0x144>
 8000ba8:	18fb      	adds	r3, r7, r3
 8000baa:	f102 30ff 	add.w	r0, r2, #4294967295
 8000bae:	d202      	bcs.n	8000bb6 <__udivmoddi4+0x142>
 8000bb0:	429c      	cmp	r4, r3
 8000bb2:	f200 80ca 	bhi.w	8000d4a <__udivmoddi4+0x2d6>
 8000bb6:	4602      	mov	r2, r0
 8000bb8:	1b1b      	subs	r3, r3, r4
 8000bba:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000bbe:	e7a5      	b.n	8000b0c <__udivmoddi4+0x98>
 8000bc0:	f1c1 0620 	rsb	r6, r1, #32
 8000bc4:	408b      	lsls	r3, r1
 8000bc6:	fa22 f706 	lsr.w	r7, r2, r6
 8000bca:	431f      	orrs	r7, r3
 8000bcc:	fa0e f401 	lsl.w	r4, lr, r1
 8000bd0:	fa20 f306 	lsr.w	r3, r0, r6
 8000bd4:	fa2e fe06 	lsr.w	lr, lr, r6
 8000bd8:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000bdc:	4323      	orrs	r3, r4
 8000bde:	fa00 f801 	lsl.w	r8, r0, r1
 8000be2:	fa1f fc87 	uxth.w	ip, r7
 8000be6:	fbbe f0f9 	udiv	r0, lr, r9
 8000bea:	0c1c      	lsrs	r4, r3, #16
 8000bec:	fb09 ee10 	mls	lr, r9, r0, lr
 8000bf0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000bf4:	fb00 fe0c 	mul.w	lr, r0, ip
 8000bf8:	45a6      	cmp	lr, r4
 8000bfa:	fa02 f201 	lsl.w	r2, r2, r1
 8000bfe:	d909      	bls.n	8000c14 <__udivmoddi4+0x1a0>
 8000c00:	193c      	adds	r4, r7, r4
 8000c02:	f100 3aff 	add.w	sl, r0, #4294967295
 8000c06:	f080 809c 	bcs.w	8000d42 <__udivmoddi4+0x2ce>
 8000c0a:	45a6      	cmp	lr, r4
 8000c0c:	f240 8099 	bls.w	8000d42 <__udivmoddi4+0x2ce>
 8000c10:	3802      	subs	r0, #2
 8000c12:	443c      	add	r4, r7
 8000c14:	eba4 040e 	sub.w	r4, r4, lr
 8000c18:	fa1f fe83 	uxth.w	lr, r3
 8000c1c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000c20:	fb09 4413 	mls	r4, r9, r3, r4
 8000c24:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000c28:	fb03 fc0c 	mul.w	ip, r3, ip
 8000c2c:	45a4      	cmp	ip, r4
 8000c2e:	d908      	bls.n	8000c42 <__udivmoddi4+0x1ce>
 8000c30:	193c      	adds	r4, r7, r4
 8000c32:	f103 3eff 	add.w	lr, r3, #4294967295
 8000c36:	f080 8082 	bcs.w	8000d3e <__udivmoddi4+0x2ca>
 8000c3a:	45a4      	cmp	ip, r4
 8000c3c:	d97f      	bls.n	8000d3e <__udivmoddi4+0x2ca>
 8000c3e:	3b02      	subs	r3, #2
 8000c40:	443c      	add	r4, r7
 8000c42:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000c46:	eba4 040c 	sub.w	r4, r4, ip
 8000c4a:	fba0 ec02 	umull	lr, ip, r0, r2
 8000c4e:	4564      	cmp	r4, ip
 8000c50:	4673      	mov	r3, lr
 8000c52:	46e1      	mov	r9, ip
 8000c54:	d362      	bcc.n	8000d1c <__udivmoddi4+0x2a8>
 8000c56:	d05f      	beq.n	8000d18 <__udivmoddi4+0x2a4>
 8000c58:	b15d      	cbz	r5, 8000c72 <__udivmoddi4+0x1fe>
 8000c5a:	ebb8 0203 	subs.w	r2, r8, r3
 8000c5e:	eb64 0409 	sbc.w	r4, r4, r9
 8000c62:	fa04 f606 	lsl.w	r6, r4, r6
 8000c66:	fa22 f301 	lsr.w	r3, r2, r1
 8000c6a:	431e      	orrs	r6, r3
 8000c6c:	40cc      	lsrs	r4, r1
 8000c6e:	e9c5 6400 	strd	r6, r4, [r5]
 8000c72:	2100      	movs	r1, #0
 8000c74:	e74f      	b.n	8000b16 <__udivmoddi4+0xa2>
 8000c76:	fbb1 fcf2 	udiv	ip, r1, r2
 8000c7a:	0c01      	lsrs	r1, r0, #16
 8000c7c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000c80:	b280      	uxth	r0, r0
 8000c82:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000c86:	463b      	mov	r3, r7
 8000c88:	4638      	mov	r0, r7
 8000c8a:	463c      	mov	r4, r7
 8000c8c:	46b8      	mov	r8, r7
 8000c8e:	46be      	mov	lr, r7
 8000c90:	2620      	movs	r6, #32
 8000c92:	fbb1 f1f7 	udiv	r1, r1, r7
 8000c96:	eba2 0208 	sub.w	r2, r2, r8
 8000c9a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000c9e:	e766      	b.n	8000b6e <__udivmoddi4+0xfa>
 8000ca0:	4601      	mov	r1, r0
 8000ca2:	e718      	b.n	8000ad6 <__udivmoddi4+0x62>
 8000ca4:	4610      	mov	r0, r2
 8000ca6:	e72c      	b.n	8000b02 <__udivmoddi4+0x8e>
 8000ca8:	f1c6 0220 	rsb	r2, r6, #32
 8000cac:	fa2e f302 	lsr.w	r3, lr, r2
 8000cb0:	40b7      	lsls	r7, r6
 8000cb2:	40b1      	lsls	r1, r6
 8000cb4:	fa20 f202 	lsr.w	r2, r0, r2
 8000cb8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cbc:	430a      	orrs	r2, r1
 8000cbe:	fbb3 f8fe 	udiv	r8, r3, lr
 8000cc2:	b2bc      	uxth	r4, r7
 8000cc4:	fb0e 3318 	mls	r3, lr, r8, r3
 8000cc8:	0c11      	lsrs	r1, r2, #16
 8000cca:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cce:	fb08 f904 	mul.w	r9, r8, r4
 8000cd2:	40b0      	lsls	r0, r6
 8000cd4:	4589      	cmp	r9, r1
 8000cd6:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000cda:	b280      	uxth	r0, r0
 8000cdc:	d93e      	bls.n	8000d5c <__udivmoddi4+0x2e8>
 8000cde:	1879      	adds	r1, r7, r1
 8000ce0:	f108 3cff 	add.w	ip, r8, #4294967295
 8000ce4:	d201      	bcs.n	8000cea <__udivmoddi4+0x276>
 8000ce6:	4589      	cmp	r9, r1
 8000ce8:	d81f      	bhi.n	8000d2a <__udivmoddi4+0x2b6>
 8000cea:	eba1 0109 	sub.w	r1, r1, r9
 8000cee:	fbb1 f9fe 	udiv	r9, r1, lr
 8000cf2:	fb09 f804 	mul.w	r8, r9, r4
 8000cf6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000cfa:	b292      	uxth	r2, r2
 8000cfc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000d00:	4542      	cmp	r2, r8
 8000d02:	d229      	bcs.n	8000d58 <__udivmoddi4+0x2e4>
 8000d04:	18ba      	adds	r2, r7, r2
 8000d06:	f109 31ff 	add.w	r1, r9, #4294967295
 8000d0a:	d2c4      	bcs.n	8000c96 <__udivmoddi4+0x222>
 8000d0c:	4542      	cmp	r2, r8
 8000d0e:	d2c2      	bcs.n	8000c96 <__udivmoddi4+0x222>
 8000d10:	f1a9 0102 	sub.w	r1, r9, #2
 8000d14:	443a      	add	r2, r7
 8000d16:	e7be      	b.n	8000c96 <__udivmoddi4+0x222>
 8000d18:	45f0      	cmp	r8, lr
 8000d1a:	d29d      	bcs.n	8000c58 <__udivmoddi4+0x1e4>
 8000d1c:	ebbe 0302 	subs.w	r3, lr, r2
 8000d20:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000d24:	3801      	subs	r0, #1
 8000d26:	46e1      	mov	r9, ip
 8000d28:	e796      	b.n	8000c58 <__udivmoddi4+0x1e4>
 8000d2a:	eba7 0909 	sub.w	r9, r7, r9
 8000d2e:	4449      	add	r1, r9
 8000d30:	f1a8 0c02 	sub.w	ip, r8, #2
 8000d34:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d38:	fb09 f804 	mul.w	r8, r9, r4
 8000d3c:	e7db      	b.n	8000cf6 <__udivmoddi4+0x282>
 8000d3e:	4673      	mov	r3, lr
 8000d40:	e77f      	b.n	8000c42 <__udivmoddi4+0x1ce>
 8000d42:	4650      	mov	r0, sl
 8000d44:	e766      	b.n	8000c14 <__udivmoddi4+0x1a0>
 8000d46:	4608      	mov	r0, r1
 8000d48:	e6fd      	b.n	8000b46 <__udivmoddi4+0xd2>
 8000d4a:	443b      	add	r3, r7
 8000d4c:	3a02      	subs	r2, #2
 8000d4e:	e733      	b.n	8000bb8 <__udivmoddi4+0x144>
 8000d50:	f1ac 0c02 	sub.w	ip, ip, #2
 8000d54:	443b      	add	r3, r7
 8000d56:	e71c      	b.n	8000b92 <__udivmoddi4+0x11e>
 8000d58:	4649      	mov	r1, r9
 8000d5a:	e79c      	b.n	8000c96 <__udivmoddi4+0x222>
 8000d5c:	eba1 0109 	sub.w	r1, r1, r9
 8000d60:	46c4      	mov	ip, r8
 8000d62:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d66:	fb09 f804 	mul.w	r8, r9, r4
 8000d6a:	e7c4      	b.n	8000cf6 <__udivmoddi4+0x282>

08000d6c <__aeabi_idiv0>:
 8000d6c:	4770      	bx	lr
 8000d6e:	bf00      	nop

08000d70 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d74:	f009 fd06 	bl	800a784 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d78:	f000 f816 	bl	8000da8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d7c:	f000 fa42 	bl	8001204 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000d80:	f000 f980 	bl	8001084 <MX_SPI1_Init>
  MX_SPI3_Init();
 8000d84:	f000 f9b4 	bl	80010f0 <MX_SPI3_Init>
  MX_ADC1_Init();
 8000d88:	f000 f87c 	bl	8000e84 <MX_ADC1_Init>
  MX_TIM2_Init();
 8000d8c:	f000 f9e6 	bl	800115c <MX_TIM2_Init>
  MX_CAN1_Init(moduleID);
 8000d90:	4b04      	ldr	r3, [pc, #16]	@ (8000da4 <main+0x34>)
 8000d92:	781b      	ldrb	r3, [r3, #0]
 8000d94:	4618      	mov	r0, r3
 8000d96:	f000 f8c7 	bl	8000f28 <MX_CAN1_Init>
  /* USER CODE BEGIN 2 */
  torch_main();
 8000d9a:	f007 fe63 	bl	8008a64 <torch_main>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000d9e:	bf00      	nop
 8000da0:	e7fd      	b.n	8000d9e <main+0x2e>
 8000da2:	bf00      	nop
 8000da4:	0800ea9c 	.word	0x0800ea9c

08000da8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b094      	sub	sp, #80	@ 0x50
 8000dac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000dae:	f107 031c 	add.w	r3, r7, #28
 8000db2:	2234      	movs	r2, #52	@ 0x34
 8000db4:	2100      	movs	r1, #0
 8000db6:	4618      	mov	r0, r3
 8000db8:	f00d f938 	bl	800e02c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000dbc:	f107 0308 	add.w	r3, r7, #8
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	601a      	str	r2, [r3, #0]
 8000dc4:	605a      	str	r2, [r3, #4]
 8000dc6:	609a      	str	r2, [r3, #8]
 8000dc8:	60da      	str	r2, [r3, #12]
 8000dca:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dcc:	2300      	movs	r3, #0
 8000dce:	607b      	str	r3, [r7, #4]
 8000dd0:	4b2a      	ldr	r3, [pc, #168]	@ (8000e7c <SystemClock_Config+0xd4>)
 8000dd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dd4:	4a29      	ldr	r2, [pc, #164]	@ (8000e7c <SystemClock_Config+0xd4>)
 8000dd6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000dda:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ddc:	4b27      	ldr	r3, [pc, #156]	@ (8000e7c <SystemClock_Config+0xd4>)
 8000dde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000de0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000de4:	607b      	str	r3, [r7, #4]
 8000de6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000de8:	2300      	movs	r3, #0
 8000dea:	603b      	str	r3, [r7, #0]
 8000dec:	4b24      	ldr	r3, [pc, #144]	@ (8000e80 <SystemClock_Config+0xd8>)
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000df4:	4a22      	ldr	r2, [pc, #136]	@ (8000e80 <SystemClock_Config+0xd8>)
 8000df6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000dfa:	6013      	str	r3, [r2, #0]
 8000dfc:	4b20      	ldr	r3, [pc, #128]	@ (8000e80 <SystemClock_Config+0xd8>)
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000e04:	603b      	str	r3, [r7, #0]
 8000e06:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000e08:	2301      	movs	r3, #1
 8000e0a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000e0c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000e10:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e12:	2302      	movs	r3, #2
 8000e14:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e16:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000e1a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000e1c:	2310      	movs	r3, #16
 8000e1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000e20:	23c0      	movs	r3, #192	@ 0xc0
 8000e22:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000e24:	2302      	movs	r3, #2
 8000e26:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000e28:	2302      	movs	r3, #2
 8000e2a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000e2c:	2302      	movs	r3, #2
 8000e2e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e30:	f107 031c 	add.w	r3, r7, #28
 8000e34:	4618      	mov	r0, r3
 8000e36:	f00b fd93 	bl	800c960 <HAL_RCC_OscConfig>
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d001      	beq.n	8000e44 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000e40:	f000 face 	bl	80013e0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e44:	230f      	movs	r3, #15
 8000e46:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e48:	2302      	movs	r3, #2
 8000e4a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000e50:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000e54:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8000e56:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000e5a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000e5c:	f107 0308 	add.w	r3, r7, #8
 8000e60:	2103      	movs	r1, #3
 8000e62:	4618      	mov	r0, r3
 8000e64:	f00b fa68 	bl	800c338 <HAL_RCC_ClockConfig>
 8000e68:	4603      	mov	r3, r0
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d001      	beq.n	8000e72 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000e6e:	f000 fab7 	bl	80013e0 <Error_Handler>
  }
}
 8000e72:	bf00      	nop
 8000e74:	3750      	adds	r7, #80	@ 0x50
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bd80      	pop	{r7, pc}
 8000e7a:	bf00      	nop
 8000e7c:	40023800 	.word	0x40023800
 8000e80:	40007000 	.word	0x40007000

08000e84 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b084      	sub	sp, #16
 8000e88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000e8a:	463b      	mov	r3, r7
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	601a      	str	r2, [r3, #0]
 8000e90:	605a      	str	r2, [r3, #4]
 8000e92:	609a      	str	r2, [r3, #8]
 8000e94:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000e96:	4b21      	ldr	r3, [pc, #132]	@ (8000f1c <MX_ADC1_Init+0x98>)
 8000e98:	4a21      	ldr	r2, [pc, #132]	@ (8000f20 <MX_ADC1_Init+0x9c>)
 8000e9a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000e9c:	4b1f      	ldr	r3, [pc, #124]	@ (8000f1c <MX_ADC1_Init+0x98>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000ea2:	4b1e      	ldr	r3, [pc, #120]	@ (8000f1c <MX_ADC1_Init+0x98>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000ea8:	4b1c      	ldr	r3, [pc, #112]	@ (8000f1c <MX_ADC1_Init+0x98>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000eae:	4b1b      	ldr	r3, [pc, #108]	@ (8000f1c <MX_ADC1_Init+0x98>)
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000eb4:	4b19      	ldr	r3, [pc, #100]	@ (8000f1c <MX_ADC1_Init+0x98>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000ebc:	4b17      	ldr	r3, [pc, #92]	@ (8000f1c <MX_ADC1_Init+0x98>)
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000ec2:	4b16      	ldr	r3, [pc, #88]	@ (8000f1c <MX_ADC1_Init+0x98>)
 8000ec4:	4a17      	ldr	r2, [pc, #92]	@ (8000f24 <MX_ADC1_Init+0xa0>)
 8000ec6:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ec8:	4b14      	ldr	r3, [pc, #80]	@ (8000f1c <MX_ADC1_Init+0x98>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000ece:	4b13      	ldr	r3, [pc, #76]	@ (8000f1c <MX_ADC1_Init+0x98>)
 8000ed0:	2201      	movs	r2, #1
 8000ed2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000ed4:	4b11      	ldr	r3, [pc, #68]	@ (8000f1c <MX_ADC1_Init+0x98>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000edc:	4b0f      	ldr	r3, [pc, #60]	@ (8000f1c <MX_ADC1_Init+0x98>)
 8000ede:	2201      	movs	r2, #1
 8000ee0:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000ee2:	480e      	ldr	r0, [pc, #56]	@ (8000f1c <MX_ADC1_Init+0x98>)
 8000ee4:	f009 fce4 	bl	800a8b0 <HAL_ADC_Init>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d001      	beq.n	8000ef2 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000eee:	f000 fa77 	bl	80013e0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8000ef2:	230f      	movs	r3, #15
 8000ef4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000ef6:	2301      	movs	r3, #1
 8000ef8:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000efa:	2300      	movs	r3, #0
 8000efc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000efe:	463b      	mov	r3, r7
 8000f00:	4619      	mov	r1, r3
 8000f02:	4806      	ldr	r0, [pc, #24]	@ (8000f1c <MX_ADC1_Init+0x98>)
 8000f04:	f009 feb6 	bl	800ac74 <HAL_ADC_ConfigChannel>
 8000f08:	4603      	mov	r3, r0
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d001      	beq.n	8000f12 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000f0e:	f000 fa67 	bl	80013e0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000f12:	bf00      	nop
 8000f14:	3710      	adds	r7, #16
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd80      	pop	{r7, pc}
 8000f1a:	bf00      	nop
 8000f1c:	2000007c 	.word	0x2000007c
 8000f20:	40012000 	.word	0x40012000
 8000f24:	0f000001 	.word	0x0f000001

08000f28 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
void MX_CAN1_Init(uint8_t moduleID)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b08c      	sub	sp, #48	@ 0x30
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	4603      	mov	r3, r0
 8000f30:	71fb      	strb	r3, [r7, #7]
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000f32:	4b52      	ldr	r3, [pc, #328]	@ (800107c <MX_CAN1_Init+0x154>)
 8000f34:	4a52      	ldr	r2, [pc, #328]	@ (8001080 <MX_CAN1_Init+0x158>)
 8000f36:	601a      	str	r2, [r3, #0]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000f38:	4b50      	ldr	r3, [pc, #320]	@ (800107c <MX_CAN1_Init+0x154>)
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	609a      	str	r2, [r3, #8]
  hcan1.Init.Prescaler = 3;
 8000f3e:	4b4f      	ldr	r3, [pc, #316]	@ (800107c <MX_CAN1_Init+0x154>)
 8000f40:	2203      	movs	r2, #3
 8000f42:	605a      	str	r2, [r3, #4]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000f44:	4b4d      	ldr	r3, [pc, #308]	@ (800107c <MX_CAN1_Init+0x154>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_11TQ;
 8000f4a:	4b4c      	ldr	r3, [pc, #304]	@ (800107c <MX_CAN1_Init+0x154>)
 8000f4c:	f44f 2220 	mov.w	r2, #655360	@ 0xa0000
 8000f50:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_4TQ;
 8000f52:	4b4a      	ldr	r3, [pc, #296]	@ (800107c <MX_CAN1_Init+0x154>)
 8000f54:	f44f 1240 	mov.w	r2, #3145728	@ 0x300000
 8000f58:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000f5a:	4b48      	ldr	r3, [pc, #288]	@ (800107c <MX_CAN1_Init+0x154>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000f60:	4b46      	ldr	r3, [pc, #280]	@ (800107c <MX_CAN1_Init+0x154>)
 8000f62:	2200      	movs	r2, #0
 8000f64:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000f66:	4b45      	ldr	r3, [pc, #276]	@ (800107c <MX_CAN1_Init+0x154>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000f6c:	4b43      	ldr	r3, [pc, #268]	@ (800107c <MX_CAN1_Init+0x154>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000f72:	4b42      	ldr	r3, [pc, #264]	@ (800107c <MX_CAN1_Init+0x154>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000f78:	4b40      	ldr	r3, [pc, #256]	@ (800107c <MX_CAN1_Init+0x154>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000f7e:	483f      	ldr	r0, [pc, #252]	@ (800107c <MX_CAN1_Init+0x154>)
 8000f80:	f00a f8a6 	bl	800b0d0 <HAL_CAN_Init>
 8000f84:	4603      	mov	r3, r0
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d001      	beq.n	8000f8e <MX_CAN1_Init+0x66>
  {
    Error_Handler();
 8000f8a:	f000 fa29 	bl	80013e0 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  CAN_FilterTypeDef canFilter;

  canFilter.FilterActivation = CAN_FILTER_ENABLE;
 8000f8e:	2301      	movs	r3, #1
 8000f90:	62bb      	str	r3, [r7, #40]	@ 0x28
  canFilter.FilterBank = 1;
 8000f92:	2301      	movs	r3, #1
 8000f94:	61fb      	str	r3, [r7, #28]
  canFilter.FilterFIFOAssignment = CAN_RX_FIFO0;
 8000f96:	2300      	movs	r3, #0
 8000f98:	61bb      	str	r3, [r7, #24]
  canFilter.FilterIdHigh = CAN_FAULT_ID << 5;
 8000f9a:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8000f9e:	60bb      	str	r3, [r7, #8]
  canFilter.FilterIdLow = 0x0000;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	60fb      	str	r3, [r7, #12]
  canFilter.FilterMaskIdHigh = 0xFFE0;
 8000fa4:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8000fa8:	613b      	str	r3, [r7, #16]
  canFilter.FilterMaskIdLow = 0x0000;
 8000faa:	2300      	movs	r3, #0
 8000fac:	617b      	str	r3, [r7, #20]
  canFilter.FilterMode = CAN_FILTERMODE_IDMASK;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	623b      	str	r3, [r7, #32]
  canFilter.FilterScale = CAN_FILTERSCALE_32BIT;
 8000fb2:	2301      	movs	r3, #1
 8000fb4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_CAN_ConfigFilter(&hcan1, &canFilter);
 8000fb6:	f107 0308 	add.w	r3, r7, #8
 8000fba:	4619      	mov	r1, r3
 8000fbc:	482f      	ldr	r0, [pc, #188]	@ (800107c <MX_CAN1_Init+0x154>)
 8000fbe:	f00a f983 	bl	800b2c8 <HAL_CAN_ConfigFilter>

  canFilter.FilterBank = 2;
 8000fc2:	2302      	movs	r3, #2
 8000fc4:	61fb      	str	r3, [r7, #28]
  canFilter.FilterIdHigh = CAN_MIN_VCELL_ID << 5;
 8000fc6:	f647 43e0 	movw	r3, #31968	@ 0x7ce0
 8000fca:	60bb      	str	r3, [r7, #8]
  HAL_CAN_ConfigFilter(&hcan1, &canFilter);
 8000fcc:	f107 0308 	add.w	r3, r7, #8
 8000fd0:	4619      	mov	r1, r3
 8000fd2:	482a      	ldr	r0, [pc, #168]	@ (800107c <MX_CAN1_Init+0x154>)
 8000fd4:	f00a f978 	bl	800b2c8 <HAL_CAN_ConfigFilter>

  canFilter.FilterBank = 3;
 8000fd8:	2303      	movs	r3, #3
 8000fda:	61fb      	str	r3, [r7, #28]
  canFilter.FilterFIFOAssignment = CAN_RX_FIFO1;
 8000fdc:	2301      	movs	r3, #1
 8000fde:	61bb      	str	r3, [r7, #24]
  canFilter.FilterIdHigh = CAN_PACK_STAT_ID << 5;
 8000fe0:	f44f 4304 	mov.w	r3, #33792	@ 0x8400
 8000fe4:	60bb      	str	r3, [r7, #8]
  HAL_CAN_ConfigFilter(&hcan1, &canFilter);
 8000fe6:	f107 0308 	add.w	r3, r7, #8
 8000fea:	4619      	mov	r1, r3
 8000fec:	4823      	ldr	r0, [pc, #140]	@ (800107c <MX_CAN1_Init+0x154>)
 8000fee:	f00a f96b 	bl	800b2c8 <HAL_CAN_ConfigFilter>

  switch(moduleID) {
 8000ff2:	79fb      	ldrb	r3, [r7, #7]
 8000ff4:	2b01      	cmp	r3, #1
 8000ff6:	d12e      	bne.n	8001056 <MX_CAN1_Init+0x12e>
  	  case 1:
  		  canFilter.FilterBank = 4;
 8000ff8:	2304      	movs	r3, #4
 8000ffa:	61fb      	str	r3, [r7, #28]
  		  canFilter.FilterFIFOAssignment = CAN_RX_FIFO0;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	61bb      	str	r3, [r7, #24]
  		  canFilter.FilterIdHigh = CAN_M2_VMIN_ID << 5;
 8001000:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 8001004:	60bb      	str	r3, [r7, #8]
  		  HAL_CAN_ConfigFilter(&hcan1, &canFilter);
 8001006:	f107 0308 	add.w	r3, r7, #8
 800100a:	4619      	mov	r1, r3
 800100c:	481b      	ldr	r0, [pc, #108]	@ (800107c <MX_CAN1_Init+0x154>)
 800100e:	f00a f95b 	bl	800b2c8 <HAL_CAN_ConfigFilter>

  		  canFilter.FilterBank = 5;
 8001012:	2305      	movs	r3, #5
 8001014:	61fb      	str	r3, [r7, #28]
  		  canFilter.FilterIdHigh = CAN_M3_VMIN_ID << 5;
 8001016:	f44f 630e 	mov.w	r3, #2272	@ 0x8e0
 800101a:	60bb      	str	r3, [r7, #8]
  		  HAL_CAN_ConfigFilter(&hcan1, &canFilter);
 800101c:	f107 0308 	add.w	r3, r7, #8
 8001020:	4619      	mov	r1, r3
 8001022:	4816      	ldr	r0, [pc, #88]	@ (800107c <MX_CAN1_Init+0x154>)
 8001024:	f00a f950 	bl	800b2c8 <HAL_CAN_ConfigFilter>

  		  canFilter.FilterBank = 6;
 8001028:	2306      	movs	r3, #6
 800102a:	61fb      	str	r3, [r7, #28]
  		  canFilter.FilterIdHigh = CAN_M4_VMIN_ID << 5;
 800102c:	f44f 6310 	mov.w	r3, #2304	@ 0x900
 8001030:	60bb      	str	r3, [r7, #8]
  		  HAL_CAN_ConfigFilter(&hcan1, &canFilter);
 8001032:	f107 0308 	add.w	r3, r7, #8
 8001036:	4619      	mov	r1, r3
 8001038:	4810      	ldr	r0, [pc, #64]	@ (800107c <MX_CAN1_Init+0x154>)
 800103a:	f00a f945 	bl	800b2c8 <HAL_CAN_ConfigFilter>

  		  canFilter.FilterBank = 7;
 800103e:	2307      	movs	r3, #7
 8001040:	61fb      	str	r3, [r7, #28]
  		  canFilter.FilterIdHigh = CAN_M5_VMIN_ID << 5;
 8001042:	f44f 6312 	mov.w	r3, #2336	@ 0x920
 8001046:	60bb      	str	r3, [r7, #8]
  		  HAL_CAN_ConfigFilter(&hcan1, &canFilter);
 8001048:	f107 0308 	add.w	r3, r7, #8
 800104c:	4619      	mov	r1, r3
 800104e:	480b      	ldr	r0, [pc, #44]	@ (800107c <MX_CAN1_Init+0x154>)
 8001050:	f00a f93a 	bl	800b2c8 <HAL_CAN_ConfigFilter>
  		  break;
 8001054:	e00d      	b.n	8001072 <MX_CAN1_Init+0x14a>
  	  default:
  		  canFilter.FilterBank = 4;
 8001056:	2304      	movs	r3, #4
 8001058:	61fb      	str	r3, [r7, #28]
  		  canFilter.FilterFIFOAssignment = CAN_RX_FIFO0;
 800105a:	2300      	movs	r3, #0
 800105c:	61bb      	str	r3, [r7, #24]
  		  canFilter.FilterIdHigh = CAN_EXTRACT_VMIN_ID << 5;
 800105e:	f44f 630a 	mov.w	r3, #2208	@ 0x8a0
 8001062:	60bb      	str	r3, [r7, #8]
  		  HAL_CAN_ConfigFilter(&hcan1, &canFilter);
 8001064:	f107 0308 	add.w	r3, r7, #8
 8001068:	4619      	mov	r1, r3
 800106a:	4804      	ldr	r0, [pc, #16]	@ (800107c <MX_CAN1_Init+0x154>)
 800106c:	f00a f92c 	bl	800b2c8 <HAL_CAN_ConfigFilter>
  		  break;
 8001070:	bf00      	nop
  }

  /* USER CODE END CAN1_Init 2 */

}
 8001072:	bf00      	nop
 8001074:	3730      	adds	r7, #48	@ 0x30
 8001076:	46bd      	mov	sp, r7
 8001078:	bd80      	pop	{r7, pc}
 800107a:	bf00      	nop
 800107c:	200000c4 	.word	0x200000c4
 8001080:	40006400 	.word	0x40006400

08001084 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001088:	4b17      	ldr	r3, [pc, #92]	@ (80010e8 <MX_SPI1_Init+0x64>)
 800108a:	4a18      	ldr	r2, [pc, #96]	@ (80010ec <MX_SPI1_Init+0x68>)
 800108c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800108e:	4b16      	ldr	r3, [pc, #88]	@ (80010e8 <MX_SPI1_Init+0x64>)
 8001090:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001094:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001096:	4b14      	ldr	r3, [pc, #80]	@ (80010e8 <MX_SPI1_Init+0x64>)
 8001098:	2200      	movs	r2, #0
 800109a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800109c:	4b12      	ldr	r3, [pc, #72]	@ (80010e8 <MX_SPI1_Init+0x64>)
 800109e:	2200      	movs	r2, #0
 80010a0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80010a2:	4b11      	ldr	r3, [pc, #68]	@ (80010e8 <MX_SPI1_Init+0x64>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80010a8:	4b0f      	ldr	r3, [pc, #60]	@ (80010e8 <MX_SPI1_Init+0x64>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80010ae:	4b0e      	ldr	r3, [pc, #56]	@ (80010e8 <MX_SPI1_Init+0x64>)
 80010b0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80010b4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80010b6:	4b0c      	ldr	r3, [pc, #48]	@ (80010e8 <MX_SPI1_Init+0x64>)
 80010b8:	2220      	movs	r2, #32
 80010ba:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80010bc:	4b0a      	ldr	r3, [pc, #40]	@ (80010e8 <MX_SPI1_Init+0x64>)
 80010be:	2200      	movs	r2, #0
 80010c0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80010c2:	4b09      	ldr	r3, [pc, #36]	@ (80010e8 <MX_SPI1_Init+0x64>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80010c8:	4b07      	ldr	r3, [pc, #28]	@ (80010e8 <MX_SPI1_Init+0x64>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80010ce:	4b06      	ldr	r3, [pc, #24]	@ (80010e8 <MX_SPI1_Init+0x64>)
 80010d0:	220a      	movs	r2, #10
 80010d2:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80010d4:	4804      	ldr	r0, [pc, #16]	@ (80010e8 <MX_SPI1_Init+0x64>)
 80010d6:	f00b fee1 	bl	800ce9c <HAL_SPI_Init>
 80010da:	4603      	mov	r3, r0
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d001      	beq.n	80010e4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80010e0:	f000 f97e 	bl	80013e0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80010e4:	bf00      	nop
 80010e6:	bd80      	pop	{r7, pc}
 80010e8:	200000ec 	.word	0x200000ec
 80010ec:	40013000 	.word	0x40013000

080010f0 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80010f4:	4b17      	ldr	r3, [pc, #92]	@ (8001154 <MX_SPI3_Init+0x64>)
 80010f6:	4a18      	ldr	r2, [pc, #96]	@ (8001158 <MX_SPI3_Init+0x68>)
 80010f8:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80010fa:	4b16      	ldr	r3, [pc, #88]	@ (8001154 <MX_SPI3_Init+0x64>)
 80010fc:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001100:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001102:	4b14      	ldr	r3, [pc, #80]	@ (8001154 <MX_SPI3_Init+0x64>)
 8001104:	2200      	movs	r2, #0
 8001106:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001108:	4b12      	ldr	r3, [pc, #72]	@ (8001154 <MX_SPI3_Init+0x64>)
 800110a:	2200      	movs	r2, #0
 800110c:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800110e:	4b11      	ldr	r3, [pc, #68]	@ (8001154 <MX_SPI3_Init+0x64>)
 8001110:	2200      	movs	r2, #0
 8001112:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001114:	4b0f      	ldr	r3, [pc, #60]	@ (8001154 <MX_SPI3_Init+0x64>)
 8001116:	2200      	movs	r2, #0
 8001118:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800111a:	4b0e      	ldr	r3, [pc, #56]	@ (8001154 <MX_SPI3_Init+0x64>)
 800111c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001120:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8001122:	4b0c      	ldr	r3, [pc, #48]	@ (8001154 <MX_SPI3_Init+0x64>)
 8001124:	2220      	movs	r2, #32
 8001126:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001128:	4b0a      	ldr	r3, [pc, #40]	@ (8001154 <MX_SPI3_Init+0x64>)
 800112a:	2200      	movs	r2, #0
 800112c:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800112e:	4b09      	ldr	r3, [pc, #36]	@ (8001154 <MX_SPI3_Init+0x64>)
 8001130:	2200      	movs	r2, #0
 8001132:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001134:	4b07      	ldr	r3, [pc, #28]	@ (8001154 <MX_SPI3_Init+0x64>)
 8001136:	2200      	movs	r2, #0
 8001138:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 10;
 800113a:	4b06      	ldr	r3, [pc, #24]	@ (8001154 <MX_SPI3_Init+0x64>)
 800113c:	220a      	movs	r2, #10
 800113e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001140:	4804      	ldr	r0, [pc, #16]	@ (8001154 <MX_SPI3_Init+0x64>)
 8001142:	f00b feab 	bl	800ce9c <HAL_SPI_Init>
 8001146:	4603      	mov	r3, r0
 8001148:	2b00      	cmp	r3, #0
 800114a:	d001      	beq.n	8001150 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 800114c:	f000 f948 	bl	80013e0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001150:	bf00      	nop
 8001152:	bd80      	pop	{r7, pc}
 8001154:	20000144 	.word	0x20000144
 8001158:	40003c00 	.word	0x40003c00

0800115c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b086      	sub	sp, #24
 8001160:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001162:	f107 0308 	add.w	r3, r7, #8
 8001166:	2200      	movs	r2, #0
 8001168:	601a      	str	r2, [r3, #0]
 800116a:	605a      	str	r2, [r3, #4]
 800116c:	609a      	str	r2, [r3, #8]
 800116e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001170:	463b      	mov	r3, r7
 8001172:	2200      	movs	r2, #0
 8001174:	601a      	str	r2, [r3, #0]
 8001176:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001178:	4b21      	ldr	r3, [pc, #132]	@ (8001200 <MX_TIM2_Init+0xa4>)
 800117a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800117e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 187;
 8001180:	4b1f      	ldr	r3, [pc, #124]	@ (8001200 <MX_TIM2_Init+0xa4>)
 8001182:	22bb      	movs	r2, #187	@ 0xbb
 8001184:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001186:	4b1e      	ldr	r3, [pc, #120]	@ (8001200 <MX_TIM2_Init+0xa4>)
 8001188:	2200      	movs	r2, #0
 800118a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 255;
 800118c:	4b1c      	ldr	r3, [pc, #112]	@ (8001200 <MX_TIM2_Init+0xa4>)
 800118e:	22ff      	movs	r2, #255	@ 0xff
 8001190:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001192:	4b1b      	ldr	r3, [pc, #108]	@ (8001200 <MX_TIM2_Init+0xa4>)
 8001194:	2200      	movs	r2, #0
 8001196:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001198:	4b19      	ldr	r3, [pc, #100]	@ (8001200 <MX_TIM2_Init+0xa4>)
 800119a:	2200      	movs	r2, #0
 800119c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800119e:	4818      	ldr	r0, [pc, #96]	@ (8001200 <MX_TIM2_Init+0xa4>)
 80011a0:	f00c face 	bl	800d740 <HAL_TIM_Base_Init>
 80011a4:	4603      	mov	r3, r0
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d001      	beq.n	80011ae <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 80011aa:	f000 f919 	bl	80013e0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011ae:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80011b2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80011b4:	f107 0308 	add.w	r3, r7, #8
 80011b8:	4619      	mov	r1, r3
 80011ba:	4811      	ldr	r0, [pc, #68]	@ (8001200 <MX_TIM2_Init+0xa4>)
 80011bc:	f00c fc70 	bl	800daa0 <HAL_TIM_ConfigClockSource>
 80011c0:	4603      	mov	r3, r0
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d001      	beq.n	80011ca <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 80011c6:	f000 f90b 	bl	80013e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011ca:	2300      	movs	r3, #0
 80011cc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011ce:	2300      	movs	r3, #0
 80011d0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80011d2:	463b      	mov	r3, r7
 80011d4:	4619      	mov	r1, r3
 80011d6:	480a      	ldr	r0, [pc, #40]	@ (8001200 <MX_TIM2_Init+0xa4>)
 80011d8:	f00c fe98 	bl	800df0c <HAL_TIMEx_MasterConfigSynchronization>
 80011dc:	4603      	mov	r3, r0
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d001      	beq.n	80011e6 <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 80011e2:	f000 f8fd 	bl	80013e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */
  HAL_NVIC_EnableIRQ(TIM2_IRQn);  // Enable TIM2 Interrupt in NVIC
 80011e6:	201c      	movs	r0, #28
 80011e8:	f00a fedd 	bl	800bfa6 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);  // Set Priority
 80011ec:	2200      	movs	r2, #0
 80011ee:	2101      	movs	r1, #1
 80011f0:	201c      	movs	r0, #28
 80011f2:	f00a febc 	bl	800bf6e <HAL_NVIC_SetPriority>
  /* USER CODE END TIM2_Init 2 */

}
 80011f6:	bf00      	nop
 80011f8:	3718      	adds	r7, #24
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}
 80011fe:	bf00      	nop
 8001200:	2000019c 	.word	0x2000019c

08001204 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b08a      	sub	sp, #40	@ 0x28
 8001208:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800120a:	f107 0314 	add.w	r3, r7, #20
 800120e:	2200      	movs	r2, #0
 8001210:	601a      	str	r2, [r3, #0]
 8001212:	605a      	str	r2, [r3, #4]
 8001214:	609a      	str	r2, [r3, #8]
 8001216:	60da      	str	r2, [r3, #12]
 8001218:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800121a:	2300      	movs	r3, #0
 800121c:	613b      	str	r3, [r7, #16]
 800121e:	4b4d      	ldr	r3, [pc, #308]	@ (8001354 <MX_GPIO_Init+0x150>)
 8001220:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001222:	4a4c      	ldr	r2, [pc, #304]	@ (8001354 <MX_GPIO_Init+0x150>)
 8001224:	f043 0304 	orr.w	r3, r3, #4
 8001228:	6313      	str	r3, [r2, #48]	@ 0x30
 800122a:	4b4a      	ldr	r3, [pc, #296]	@ (8001354 <MX_GPIO_Init+0x150>)
 800122c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800122e:	f003 0304 	and.w	r3, r3, #4
 8001232:	613b      	str	r3, [r7, #16]
 8001234:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001236:	2300      	movs	r3, #0
 8001238:	60fb      	str	r3, [r7, #12]
 800123a:	4b46      	ldr	r3, [pc, #280]	@ (8001354 <MX_GPIO_Init+0x150>)
 800123c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800123e:	4a45      	ldr	r2, [pc, #276]	@ (8001354 <MX_GPIO_Init+0x150>)
 8001240:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001244:	6313      	str	r3, [r2, #48]	@ 0x30
 8001246:	4b43      	ldr	r3, [pc, #268]	@ (8001354 <MX_GPIO_Init+0x150>)
 8001248:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800124a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800124e:	60fb      	str	r3, [r7, #12]
 8001250:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001252:	2300      	movs	r3, #0
 8001254:	60bb      	str	r3, [r7, #8]
 8001256:	4b3f      	ldr	r3, [pc, #252]	@ (8001354 <MX_GPIO_Init+0x150>)
 8001258:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800125a:	4a3e      	ldr	r2, [pc, #248]	@ (8001354 <MX_GPIO_Init+0x150>)
 800125c:	f043 0301 	orr.w	r3, r3, #1
 8001260:	6313      	str	r3, [r2, #48]	@ 0x30
 8001262:	4b3c      	ldr	r3, [pc, #240]	@ (8001354 <MX_GPIO_Init+0x150>)
 8001264:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001266:	f003 0301 	and.w	r3, r3, #1
 800126a:	60bb      	str	r3, [r7, #8]
 800126c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800126e:	2300      	movs	r3, #0
 8001270:	607b      	str	r3, [r7, #4]
 8001272:	4b38      	ldr	r3, [pc, #224]	@ (8001354 <MX_GPIO_Init+0x150>)
 8001274:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001276:	4a37      	ldr	r2, [pc, #220]	@ (8001354 <MX_GPIO_Init+0x150>)
 8001278:	f043 0302 	orr.w	r3, r3, #2
 800127c:	6313      	str	r3, [r2, #48]	@ 0x30
 800127e:	4b35      	ldr	r3, [pc, #212]	@ (8001354 <MX_GPIO_Init+0x150>)
 8001280:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001282:	f003 0302 	and.w	r3, r3, #2
 8001286:	607b      	str	r3, [r7, #4]
 8001288:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800128a:	2300      	movs	r3, #0
 800128c:	603b      	str	r3, [r7, #0]
 800128e:	4b31      	ldr	r3, [pc, #196]	@ (8001354 <MX_GPIO_Init+0x150>)
 8001290:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001292:	4a30      	ldr	r2, [pc, #192]	@ (8001354 <MX_GPIO_Init+0x150>)
 8001294:	f043 0308 	orr.w	r3, r3, #8
 8001298:	6313      	str	r3, [r2, #48]	@ 0x30
 800129a:	4b2e      	ldr	r3, [pc, #184]	@ (8001354 <MX_GPIO_Init+0x150>)
 800129c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800129e:	f003 0308 	and.w	r3, r3, #8
 80012a2:	603b      	str	r3, [r7, #0]
 80012a4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_4|GPIO_PIN_7
 80012a6:	2200      	movs	r2, #0
 80012a8:	f246 3190 	movw	r1, #25488	@ 0x6390
 80012ac:	482a      	ldr	r0, [pc, #168]	@ (8001358 <MX_GPIO_Init+0x154>)
 80012ae:	f00b f829 	bl	800c304 <HAL_GPIO_WritePin>
                          |GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_8
 80012b2:	2200      	movs	r2, #0
 80012b4:	f248 111c 	movw	r1, #33052	@ 0x811c
 80012b8:	4828      	ldr	r0, [pc, #160]	@ (800135c <MX_GPIO_Init+0x158>)
 80012ba:	f00b f823 	bl	800c304 <HAL_GPIO_WritePin>
                          |GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 80012be:	2200      	movs	r2, #0
 80012c0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80012c4:	4826      	ldr	r0, [pc, #152]	@ (8001360 <MX_GPIO_Init+0x15c>)
 80012c6:	f00b f81d 	bl	800c304 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 80012ca:	2200      	movs	r2, #0
 80012cc:	2104      	movs	r1, #4
 80012ce:	4825      	ldr	r0, [pc, #148]	@ (8001364 <MX_GPIO_Init+0x160>)
 80012d0:	f00b f818 	bl	800c304 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 PC4 PC7
                           PC8 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_4|GPIO_PIN_7
 80012d4:	f246 3390 	movw	r3, #25488	@ 0x6390
 80012d8:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012da:	2301      	movs	r3, #1
 80012dc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012de:	2300      	movs	r3, #0
 80012e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012e2:	2300      	movs	r3, #0
 80012e4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012e6:	f107 0314 	add.w	r3, r7, #20
 80012ea:	4619      	mov	r1, r3
 80012ec:	481a      	ldr	r0, [pc, #104]	@ (8001358 <MX_GPIO_Init+0x154>)
 80012ee:	f00a fe75 	bl	800bfdc <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 PA3 PA4 PA8
                           PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_8
 80012f2:	f248 131c 	movw	r3, #33052	@ 0x811c
 80012f6:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012f8:	2301      	movs	r3, #1
 80012fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012fc:	2300      	movs	r3, #0
 80012fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001300:	2300      	movs	r3, #0
 8001302:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001304:	f107 0314 	add.w	r3, r7, #20
 8001308:	4619      	mov	r1, r3
 800130a:	4814      	ldr	r0, [pc, #80]	@ (800135c <MX_GPIO_Init+0x158>)
 800130c:	f00a fe66 	bl	800bfdc <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001310:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001314:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001316:	2301      	movs	r3, #1
 8001318:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800131a:	2300      	movs	r3, #0
 800131c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800131e:	2300      	movs	r3, #0
 8001320:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001322:	f107 0314 	add.w	r3, r7, #20
 8001326:	4619      	mov	r1, r3
 8001328:	480d      	ldr	r0, [pc, #52]	@ (8001360 <MX_GPIO_Init+0x15c>)
 800132a:	f00a fe57 	bl	800bfdc <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800132e:	2304      	movs	r3, #4
 8001330:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001332:	2301      	movs	r3, #1
 8001334:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001336:	2300      	movs	r3, #0
 8001338:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800133a:	2300      	movs	r3, #0
 800133c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800133e:	f107 0314 	add.w	r3, r7, #20
 8001342:	4619      	mov	r1, r3
 8001344:	4807      	ldr	r0, [pc, #28]	@ (8001364 <MX_GPIO_Init+0x160>)
 8001346:	f00a fe49 	bl	800bfdc <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800134a:	bf00      	nop
 800134c:	3728      	adds	r7, #40	@ 0x28
 800134e:	46bd      	mov	sp, r7
 8001350:	bd80      	pop	{r7, pc}
 8001352:	bf00      	nop
 8001354:	40023800 	.word	0x40023800
 8001358:	40020800 	.word	0x40020800
 800135c:	40020000 	.word	0x40020000
 8001360:	40020400 	.word	0x40020400
 8001364:	40020c00 	.word	0x40020c00

08001368 <TIM2_IRQHandler>:

/* USER CODE BEGIN 4 */
void TIM2_IRQHandler(void)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	af00      	add	r7, sp, #0
    HAL_TIM_IRQHandler(&htim2);  // Call HAL's IRQ handler
 800136c:	4802      	ldr	r0, [pc, #8]	@ (8001378 <TIM2_IRQHandler+0x10>)
 800136e:	f00c faa7 	bl	800d8c0 <HAL_TIM_IRQHandler>
}
 8001372:	bf00      	nop
 8001374:	bd80      	pop	{r7, pc}
 8001376:	bf00      	nop
 8001378:	2000019c 	.word	0x2000019c

0800137c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800137c:	b480      	push	{r7}
 800137e:	b083      	sub	sp, #12
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM2) {
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800138c:	d118      	bne.n	80013c0 <HAL_TIM_PeriodElapsedCallback+0x44>
        Counter++;
 800138e:	4b0f      	ldr	r3, [pc, #60]	@ (80013cc <HAL_TIM_PeriodElapsedCallback+0x50>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	3301      	adds	r3, #1
 8001394:	4a0d      	ldr	r2, [pc, #52]	@ (80013cc <HAL_TIM_PeriodElapsedCallback+0x50>)
 8001396:	6013      	str	r3, [r2, #0]
        transmitCounter++;
 8001398:	4b0d      	ldr	r3, [pc, #52]	@ (80013d0 <HAL_TIM_PeriodElapsedCallback+0x54>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	3301      	adds	r3, #1
 800139e:	4a0c      	ldr	r2, [pc, #48]	@ (80013d0 <HAL_TIM_PeriodElapsedCallback+0x54>)
 80013a0:	6013      	str	r3, [r2, #0]
        measureCounter++;
 80013a2:	4b0c      	ldr	r3, [pc, #48]	@ (80013d4 <HAL_TIM_PeriodElapsedCallback+0x58>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	3301      	adds	r3, #1
 80013a8:	4a0a      	ldr	r2, [pc, #40]	@ (80013d4 <HAL_TIM_PeriodElapsedCallback+0x58>)
 80013aa:	6013      	str	r3, [r2, #0]
        balanceCounter++;
 80013ac:	4b0a      	ldr	r3, [pc, #40]	@ (80013d8 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	3301      	adds	r3, #1
 80013b2:	4a09      	ldr	r2, [pc, #36]	@ (80013d8 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 80013b4:	6013      	str	r3, [r2, #0]
        transientCounter++;
 80013b6:	4b09      	ldr	r3, [pc, #36]	@ (80013dc <HAL_TIM_PeriodElapsedCallback+0x60>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	3301      	adds	r3, #1
 80013bc:	4a07      	ldr	r2, [pc, #28]	@ (80013dc <HAL_TIM_PeriodElapsedCallback+0x60>)
 80013be:	6013      	str	r3, [r2, #0]
        //canTimeoutCounter++;
    }
}
 80013c0:	bf00      	nop
 80013c2:	370c      	adds	r7, #12
 80013c4:	46bd      	mov	sp, r7
 80013c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ca:	4770      	bx	lr
 80013cc:	200003f8 	.word	0x200003f8
 80013d0:	200003e8 	.word	0x200003e8
 80013d4:	200003ec 	.word	0x200003ec
 80013d8:	200003f0 	.word	0x200003f0
 80013dc:	200003f4 	.word	0x200003f4

080013e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013e0:	b480      	push	{r7}
 80013e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013e4:	b672      	cpsid	i
}
 80013e6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013e8:	bf00      	nop
 80013ea:	e7fd      	b.n	80013e8 <Error_Handler+0x8>

080013ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013ec:	b480      	push	{r7}
 80013ee:	b083      	sub	sp, #12
 80013f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013f2:	2300      	movs	r3, #0
 80013f4:	607b      	str	r3, [r7, #4]
 80013f6:	4b10      	ldr	r3, [pc, #64]	@ (8001438 <HAL_MspInit+0x4c>)
 80013f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013fa:	4a0f      	ldr	r2, [pc, #60]	@ (8001438 <HAL_MspInit+0x4c>)
 80013fc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001400:	6453      	str	r3, [r2, #68]	@ 0x44
 8001402:	4b0d      	ldr	r3, [pc, #52]	@ (8001438 <HAL_MspInit+0x4c>)
 8001404:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001406:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800140a:	607b      	str	r3, [r7, #4]
 800140c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800140e:	2300      	movs	r3, #0
 8001410:	603b      	str	r3, [r7, #0]
 8001412:	4b09      	ldr	r3, [pc, #36]	@ (8001438 <HAL_MspInit+0x4c>)
 8001414:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001416:	4a08      	ldr	r2, [pc, #32]	@ (8001438 <HAL_MspInit+0x4c>)
 8001418:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800141c:	6413      	str	r3, [r2, #64]	@ 0x40
 800141e:	4b06      	ldr	r3, [pc, #24]	@ (8001438 <HAL_MspInit+0x4c>)
 8001420:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001422:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001426:	603b      	str	r3, [r7, #0]
 8001428:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800142a:	bf00      	nop
 800142c:	370c      	adds	r7, #12
 800142e:	46bd      	mov	sp, r7
 8001430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001434:	4770      	bx	lr
 8001436:	bf00      	nop
 8001438:	40023800 	.word	0x40023800

0800143c <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b08a      	sub	sp, #40	@ 0x28
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001444:	f107 0314 	add.w	r3, r7, #20
 8001448:	2200      	movs	r2, #0
 800144a:	601a      	str	r2, [r3, #0]
 800144c:	605a      	str	r2, [r3, #4]
 800144e:	609a      	str	r2, [r3, #8]
 8001450:	60da      	str	r2, [r3, #12]
 8001452:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	4a17      	ldr	r2, [pc, #92]	@ (80014b8 <HAL_ADC_MspInit+0x7c>)
 800145a:	4293      	cmp	r3, r2
 800145c:	d127      	bne.n	80014ae <HAL_ADC_MspInit+0x72>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800145e:	2300      	movs	r3, #0
 8001460:	613b      	str	r3, [r7, #16]
 8001462:	4b16      	ldr	r3, [pc, #88]	@ (80014bc <HAL_ADC_MspInit+0x80>)
 8001464:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001466:	4a15      	ldr	r2, [pc, #84]	@ (80014bc <HAL_ADC_MspInit+0x80>)
 8001468:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800146c:	6453      	str	r3, [r2, #68]	@ 0x44
 800146e:	4b13      	ldr	r3, [pc, #76]	@ (80014bc <HAL_ADC_MspInit+0x80>)
 8001470:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001472:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001476:	613b      	str	r3, [r7, #16]
 8001478:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800147a:	2300      	movs	r3, #0
 800147c:	60fb      	str	r3, [r7, #12]
 800147e:	4b0f      	ldr	r3, [pc, #60]	@ (80014bc <HAL_ADC_MspInit+0x80>)
 8001480:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001482:	4a0e      	ldr	r2, [pc, #56]	@ (80014bc <HAL_ADC_MspInit+0x80>)
 8001484:	f043 0304 	orr.w	r3, r3, #4
 8001488:	6313      	str	r3, [r2, #48]	@ 0x30
 800148a:	4b0c      	ldr	r3, [pc, #48]	@ (80014bc <HAL_ADC_MspInit+0x80>)
 800148c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800148e:	f003 0304 	and.w	r3, r3, #4
 8001492:	60fb      	str	r3, [r7, #12]
 8001494:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC5     ------> ADC1_IN15
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001496:	2320      	movs	r3, #32
 8001498:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800149a:	2303      	movs	r3, #3
 800149c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800149e:	2300      	movs	r3, #0
 80014a0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014a2:	f107 0314 	add.w	r3, r7, #20
 80014a6:	4619      	mov	r1, r3
 80014a8:	4805      	ldr	r0, [pc, #20]	@ (80014c0 <HAL_ADC_MspInit+0x84>)
 80014aa:	f00a fd97 	bl	800bfdc <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 80014ae:	bf00      	nop
 80014b0:	3728      	adds	r7, #40	@ 0x28
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bd80      	pop	{r7, pc}
 80014b6:	bf00      	nop
 80014b8:	40012000 	.word	0x40012000
 80014bc:	40023800 	.word	0x40023800
 80014c0:	40020800 	.word	0x40020800

080014c4 <HAL_CAN_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcan: CAN handle pointer
  * @retval None
  */
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b08a      	sub	sp, #40	@ 0x28
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014cc:	f107 0314 	add.w	r3, r7, #20
 80014d0:	2200      	movs	r2, #0
 80014d2:	601a      	str	r2, [r3, #0]
 80014d4:	605a      	str	r2, [r3, #4]
 80014d6:	609a      	str	r2, [r3, #8]
 80014d8:	60da      	str	r2, [r3, #12]
 80014da:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	4a21      	ldr	r2, [pc, #132]	@ (8001568 <HAL_CAN_MspInit+0xa4>)
 80014e2:	4293      	cmp	r3, r2
 80014e4:	d13c      	bne.n	8001560 <HAL_CAN_MspInit+0x9c>
  {
    /* USER CODE BEGIN CAN1_MspInit 0 */

    /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80014e6:	2300      	movs	r3, #0
 80014e8:	613b      	str	r3, [r7, #16]
 80014ea:	4b20      	ldr	r3, [pc, #128]	@ (800156c <HAL_CAN_MspInit+0xa8>)
 80014ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014ee:	4a1f      	ldr	r2, [pc, #124]	@ (800156c <HAL_CAN_MspInit+0xa8>)
 80014f0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80014f4:	6413      	str	r3, [r2, #64]	@ 0x40
 80014f6:	4b1d      	ldr	r3, [pc, #116]	@ (800156c <HAL_CAN_MspInit+0xa8>)
 80014f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80014fe:	613b      	str	r3, [r7, #16]
 8001500:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001502:	2300      	movs	r3, #0
 8001504:	60fb      	str	r3, [r7, #12]
 8001506:	4b19      	ldr	r3, [pc, #100]	@ (800156c <HAL_CAN_MspInit+0xa8>)
 8001508:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800150a:	4a18      	ldr	r2, [pc, #96]	@ (800156c <HAL_CAN_MspInit+0xa8>)
 800150c:	f043 0301 	orr.w	r3, r3, #1
 8001510:	6313      	str	r3, [r2, #48]	@ 0x30
 8001512:	4b16      	ldr	r3, [pc, #88]	@ (800156c <HAL_CAN_MspInit+0xa8>)
 8001514:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001516:	f003 0301 	and.w	r3, r3, #1
 800151a:	60fb      	str	r3, [r7, #12]
 800151c:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800151e:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8001522:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001524:	2302      	movs	r3, #2
 8001526:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001528:	2300      	movs	r3, #0
 800152a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800152c:	2303      	movs	r3, #3
 800152e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001530:	2309      	movs	r3, #9
 8001532:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001534:	f107 0314 	add.w	r3, r7, #20
 8001538:	4619      	mov	r1, r3
 800153a:	480d      	ldr	r0, [pc, #52]	@ (8001570 <HAL_CAN_MspInit+0xac>)
 800153c:	f00a fd4e 	bl	800bfdc <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8001540:	2200      	movs	r2, #0
 8001542:	2100      	movs	r1, #0
 8001544:	2014      	movs	r0, #20
 8001546:	f00a fd12 	bl	800bf6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 800154a:	2014      	movs	r0, #20
 800154c:	f00a fd2b 	bl	800bfa6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 8001550:	2200      	movs	r2, #0
 8001552:	2100      	movs	r1, #0
 8001554:	2015      	movs	r0, #21
 8001556:	f00a fd0a 	bl	800bf6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 800155a:	2015      	movs	r0, #21
 800155c:	f00a fd23 	bl	800bfa6 <HAL_NVIC_EnableIRQ>

    /* USER CODE END CAN1_MspInit 1 */

  }

}
 8001560:	bf00      	nop
 8001562:	3728      	adds	r7, #40	@ 0x28
 8001564:	46bd      	mov	sp, r7
 8001566:	bd80      	pop	{r7, pc}
 8001568:	40006400 	.word	0x40006400
 800156c:	40023800 	.word	0x40023800
 8001570:	40020000 	.word	0x40020000

08001574 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b08c      	sub	sp, #48	@ 0x30
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800157c:	f107 031c 	add.w	r3, r7, #28
 8001580:	2200      	movs	r2, #0
 8001582:	601a      	str	r2, [r3, #0]
 8001584:	605a      	str	r2, [r3, #4]
 8001586:	609a      	str	r2, [r3, #8]
 8001588:	60da      	str	r2, [r3, #12]
 800158a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	4a32      	ldr	r2, [pc, #200]	@ (800165c <HAL_SPI_MspInit+0xe8>)
 8001592:	4293      	cmp	r3, r2
 8001594:	d12c      	bne.n	80015f0 <HAL_SPI_MspInit+0x7c>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001596:	2300      	movs	r3, #0
 8001598:	61bb      	str	r3, [r7, #24]
 800159a:	4b31      	ldr	r3, [pc, #196]	@ (8001660 <HAL_SPI_MspInit+0xec>)
 800159c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800159e:	4a30      	ldr	r2, [pc, #192]	@ (8001660 <HAL_SPI_MspInit+0xec>)
 80015a0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80015a4:	6453      	str	r3, [r2, #68]	@ 0x44
 80015a6:	4b2e      	ldr	r3, [pc, #184]	@ (8001660 <HAL_SPI_MspInit+0xec>)
 80015a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015aa:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80015ae:	61bb      	str	r3, [r7, #24]
 80015b0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015b2:	2300      	movs	r3, #0
 80015b4:	617b      	str	r3, [r7, #20]
 80015b6:	4b2a      	ldr	r3, [pc, #168]	@ (8001660 <HAL_SPI_MspInit+0xec>)
 80015b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015ba:	4a29      	ldr	r2, [pc, #164]	@ (8001660 <HAL_SPI_MspInit+0xec>)
 80015bc:	f043 0301 	orr.w	r3, r3, #1
 80015c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80015c2:	4b27      	ldr	r3, [pc, #156]	@ (8001660 <HAL_SPI_MspInit+0xec>)
 80015c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015c6:	f003 0301 	and.w	r3, r3, #1
 80015ca:	617b      	str	r3, [r7, #20]
 80015cc:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80015ce:	23e0      	movs	r3, #224	@ 0xe0
 80015d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015d2:	2302      	movs	r3, #2
 80015d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d6:	2300      	movs	r3, #0
 80015d8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015da:	2303      	movs	r3, #3
 80015dc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80015de:	2305      	movs	r3, #5
 80015e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015e2:	f107 031c 	add.w	r3, r7, #28
 80015e6:	4619      	mov	r1, r3
 80015e8:	481e      	ldr	r0, [pc, #120]	@ (8001664 <HAL_SPI_MspInit+0xf0>)
 80015ea:	f00a fcf7 	bl	800bfdc <HAL_GPIO_Init>
    /* USER CODE BEGIN SPI3_MspInit 1 */

    /* USER CODE END SPI3_MspInit 1 */
  }

}
 80015ee:	e031      	b.n	8001654 <HAL_SPI_MspInit+0xe0>
  else if(hspi->Instance==SPI3)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	4a1c      	ldr	r2, [pc, #112]	@ (8001668 <HAL_SPI_MspInit+0xf4>)
 80015f6:	4293      	cmp	r3, r2
 80015f8:	d12c      	bne.n	8001654 <HAL_SPI_MspInit+0xe0>
    __HAL_RCC_SPI3_CLK_ENABLE();
 80015fa:	2300      	movs	r3, #0
 80015fc:	613b      	str	r3, [r7, #16]
 80015fe:	4b18      	ldr	r3, [pc, #96]	@ (8001660 <HAL_SPI_MspInit+0xec>)
 8001600:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001602:	4a17      	ldr	r2, [pc, #92]	@ (8001660 <HAL_SPI_MspInit+0xec>)
 8001604:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001608:	6413      	str	r3, [r2, #64]	@ 0x40
 800160a:	4b15      	ldr	r3, [pc, #84]	@ (8001660 <HAL_SPI_MspInit+0xec>)
 800160c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800160e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001612:	613b      	str	r3, [r7, #16]
 8001614:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001616:	2300      	movs	r3, #0
 8001618:	60fb      	str	r3, [r7, #12]
 800161a:	4b11      	ldr	r3, [pc, #68]	@ (8001660 <HAL_SPI_MspInit+0xec>)
 800161c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800161e:	4a10      	ldr	r2, [pc, #64]	@ (8001660 <HAL_SPI_MspInit+0xec>)
 8001620:	f043 0304 	orr.w	r3, r3, #4
 8001624:	6313      	str	r3, [r2, #48]	@ 0x30
 8001626:	4b0e      	ldr	r3, [pc, #56]	@ (8001660 <HAL_SPI_MspInit+0xec>)
 8001628:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800162a:	f003 0304 	and.w	r3, r3, #4
 800162e:	60fb      	str	r3, [r7, #12]
 8001630:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8001632:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8001636:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001638:	2302      	movs	r3, #2
 800163a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800163c:	2300      	movs	r3, #0
 800163e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001640:	2303      	movs	r3, #3
 8001642:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001644:	2306      	movs	r3, #6
 8001646:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001648:	f107 031c 	add.w	r3, r7, #28
 800164c:	4619      	mov	r1, r3
 800164e:	4807      	ldr	r0, [pc, #28]	@ (800166c <HAL_SPI_MspInit+0xf8>)
 8001650:	f00a fcc4 	bl	800bfdc <HAL_GPIO_Init>
}
 8001654:	bf00      	nop
 8001656:	3730      	adds	r7, #48	@ 0x30
 8001658:	46bd      	mov	sp, r7
 800165a:	bd80      	pop	{r7, pc}
 800165c:	40013000 	.word	0x40013000
 8001660:	40023800 	.word	0x40023800
 8001664:	40020000 	.word	0x40020000
 8001668:	40003c00 	.word	0x40003c00
 800166c:	40020800 	.word	0x40020800

08001670 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001670:	b480      	push	{r7}
 8001672:	b085      	sub	sp, #20
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001680:	d10d      	bne.n	800169e <HAL_TIM_Base_MspInit+0x2e>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001682:	2300      	movs	r3, #0
 8001684:	60fb      	str	r3, [r7, #12]
 8001686:	4b09      	ldr	r3, [pc, #36]	@ (80016ac <HAL_TIM_Base_MspInit+0x3c>)
 8001688:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800168a:	4a08      	ldr	r2, [pc, #32]	@ (80016ac <HAL_TIM_Base_MspInit+0x3c>)
 800168c:	f043 0301 	orr.w	r3, r3, #1
 8001690:	6413      	str	r3, [r2, #64]	@ 0x40
 8001692:	4b06      	ldr	r3, [pc, #24]	@ (80016ac <HAL_TIM_Base_MspInit+0x3c>)
 8001694:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001696:	f003 0301 	and.w	r3, r3, #1
 800169a:	60fb      	str	r3, [r7, #12]
 800169c:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 800169e:	bf00      	nop
 80016a0:	3714      	adds	r7, #20
 80016a2:	46bd      	mov	sp, r7
 80016a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a8:	4770      	bx	lr
 80016aa:	bf00      	nop
 80016ac:	40023800 	.word	0x40023800

080016b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016b0:	b480      	push	{r7}
 80016b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80016b4:	bf00      	nop
 80016b6:	e7fd      	b.n	80016b4 <NMI_Handler+0x4>

080016b8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016b8:	b480      	push	{r7}
 80016ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016bc:	bf00      	nop
 80016be:	e7fd      	b.n	80016bc <HardFault_Handler+0x4>

080016c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016c0:	b480      	push	{r7}
 80016c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016c4:	bf00      	nop
 80016c6:	e7fd      	b.n	80016c4 <MemManage_Handler+0x4>

080016c8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016c8:	b480      	push	{r7}
 80016ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016cc:	bf00      	nop
 80016ce:	e7fd      	b.n	80016cc <BusFault_Handler+0x4>

080016d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016d0:	b480      	push	{r7}
 80016d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016d4:	bf00      	nop
 80016d6:	e7fd      	b.n	80016d4 <UsageFault_Handler+0x4>

080016d8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80016d8:	b480      	push	{r7}
 80016da:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80016dc:	bf00      	nop
 80016de:	46bd      	mov	sp, r7
 80016e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e4:	4770      	bx	lr

080016e6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016e6:	b480      	push	{r7}
 80016e8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016ea:	bf00      	nop
 80016ec:	46bd      	mov	sp, r7
 80016ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f2:	4770      	bx	lr

080016f4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80016f4:	b480      	push	{r7}
 80016f6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016f8:	bf00      	nop
 80016fa:	46bd      	mov	sp, r7
 80016fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001700:	4770      	bx	lr

08001702 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001702:	b580      	push	{r7, lr}
 8001704:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001706:	f009 f88f 	bl	800a828 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800170a:	bf00      	nop
 800170c:	bd80      	pop	{r7, pc}
	...

08001710 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001714:	4802      	ldr	r0, [pc, #8]	@ (8001720 <CAN1_RX0_IRQHandler+0x10>)
 8001716:	f00a f915 	bl	800b944 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 800171a:	bf00      	nop
 800171c:	bd80      	pop	{r7, pc}
 800171e:	bf00      	nop
 8001720:	200000c4 	.word	0x200000c4

08001724 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001728:	4802      	ldr	r0, [pc, #8]	@ (8001734 <CAN1_RX1_IRQHandler+0x10>)
 800172a:	f00a f90b 	bl	800b944 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 800172e:	bf00      	nop
 8001730:	bd80      	pop	{r7, pc}
 8001732:	bf00      	nop
 8001734:	200000c4 	.word	0x200000c4

08001738 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001738:	b480      	push	{r7}
 800173a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800173c:	4b06      	ldr	r3, [pc, #24]	@ (8001758 <SystemInit+0x20>)
 800173e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001742:	4a05      	ldr	r2, [pc, #20]	@ (8001758 <SystemInit+0x20>)
 8001744:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001748:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800174c:	bf00      	nop
 800174e:	46bd      	mov	sp, r7
 8001750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001754:	4770      	bx	lr
 8001756:	bf00      	nop
 8001758:	e000ed00 	.word	0xe000ed00

0800175c <resistor_temperature_sense>:
#include "torch_config.h"
#include <math.h>


void resistor_temperature_sense(float *pcbTemperatures)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b0bc      	sub	sp, #240	@ 0xf0
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
	uint8_t attempts = 0;
 8001764:	2300      	movs	r3, #0
 8001766:	f887 30ef 	strb.w	r3, [r7, #239]	@ 0xef
	float sideB_boardThermistorVoltages[9];

	float sideA_temperatures[9];
	float sideB_temperatures[9];

	while(attempts < ATTEMPT_LIMIT) {
 800176a:	e106      	b.n	800197a <resistor_temperature_sense+0x21e>
		CLRAUX(SIDE_A);
 800176c:	2001      	movs	r0, #1
 800176e:	f006 ff4c 	bl	800860a <CLRAUX>
		CLRAUX(SIDE_B);
 8001772:	2000      	movs	r0, #0
 8001774:	f006 ff49 	bl	800860a <CLRAUX>
		wait(3);
 8001778:	2003      	movs	r0, #3
 800177a:	f007 fd5d 	bl	8009238 <wait>

		ADAXD(SIDE_A);
 800177e:	2001      	movs	r0, #1
 8001780:	f006 feda 	bl	8008538 <ADAXD>
		ADAXD(SIDE_B);
 8001784:	2000      	movs	r0, #0
 8001786:	f006 fed7 	bl	8008538 <ADAXD>
		wait(3);
 800178a:	2003      	movs	r0, #3
 800178c:	f007 fd54 	bl	8009238 <wait>

		RDAUXA(sideA_auxRegisterA, SIDE_A);
 8001790:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001794:	2101      	movs	r1, #1
 8001796:	4618      	mov	r0, r3
 8001798:	f006 fd1c 	bl	80081d4 <RDAUXA>
		RDAUXA(sideB_auxRegisterA, SIDE_B);
 800179c:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 80017a0:	2100      	movs	r1, #0
 80017a2:	4618      	mov	r0, r3
 80017a4:	f006 fd16 	bl	80081d4 <RDAUXA>
		wait(1);
 80017a8:	2001      	movs	r0, #1
 80017aa:	f007 fd45 	bl	8009238 <wait>
		RDAUXB(sideA_auxRegisterB, SIDE_A);
 80017ae:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 80017b2:	2101      	movs	r1, #1
 80017b4:	4618      	mov	r0, r3
 80017b6:	f006 fd31 	bl	800821c <RDAUXB>
		RDAUXB(sideB_auxRegisterB, SIDE_B);
 80017ba:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80017be:	2100      	movs	r1, #0
 80017c0:	4618      	mov	r0, r3
 80017c2:	f006 fd2b 	bl	800821c <RDAUXB>
		wait(1);
 80017c6:	2001      	movs	r0, #1
 80017c8:	f007 fd36 	bl	8009238 <wait>
		RDAUXC(sideA_auxRegisterC, SIDE_A);
 80017cc:	f107 03c4 	add.w	r3, r7, #196	@ 0xc4
 80017d0:	2101      	movs	r1, #1
 80017d2:	4618      	mov	r0, r3
 80017d4:	f006 fd46 	bl	8008264 <RDAUXC>
		RDAUXC(sideB_auxRegisterC, SIDE_B);
 80017d8:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80017dc:	2100      	movs	r1, #0
 80017de:	4618      	mov	r0, r3
 80017e0:	f006 fd40 	bl	8008264 <RDAUXC>
		wait(1);
 80017e4:	2001      	movs	r0, #1
 80017e6:	f007 fd27 	bl	8009238 <wait>
		RDAUXD(sideA_auxRegisterD, SIDE_A);
 80017ea:	f107 03bc 	add.w	r3, r7, #188	@ 0xbc
 80017ee:	2101      	movs	r1, #1
 80017f0:	4618      	mov	r0, r3
 80017f2:	f006 fd5b 	bl	80082ac <RDAUXD>
		RDAUXD(sideB_auxRegisterD, SIDE_B);
 80017f6:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80017fa:	2100      	movs	r1, #0
 80017fc:	4618      	mov	r0, r3
 80017fe:	f006 fd55 	bl	80082ac <RDAUXD>

		sideA_auxRegisterA_PECflag = verify_PEC15(sideA_auxRegisterA);
 8001802:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001806:	4618      	mov	r0, r3
 8001808:	f006 fa1b 	bl	8007c42 <verify_PEC15>
 800180c:	4603      	mov	r3, r0
 800180e:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
		sideA_auxRegisterB_PECflag = verify_PEC15(sideA_auxRegisterB);
 8001812:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8001816:	4618      	mov	r0, r3
 8001818:	f006 fa13 	bl	8007c42 <verify_PEC15>
 800181c:	4603      	mov	r3, r0
 800181e:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
		sideA_auxRegisterC_PECflag = verify_PEC15(sideA_auxRegisterC);
 8001822:	f107 03c4 	add.w	r3, r7, #196	@ 0xc4
 8001826:	4618      	mov	r0, r3
 8001828:	f006 fa0b 	bl	8007c42 <verify_PEC15>
 800182c:	4603      	mov	r3, r0
 800182e:	f887 30e1 	strb.w	r3, [r7, #225]	@ 0xe1
		sideA_auxRegisterD_PECflag = verify_PEC15(sideA_auxRegisterD);
 8001832:	f107 03bc 	add.w	r3, r7, #188	@ 0xbc
 8001836:	4618      	mov	r0, r3
 8001838:	f006 fa03 	bl	8007c42 <verify_PEC15>
 800183c:	4603      	mov	r3, r0
 800183e:	f887 30e0 	strb.w	r3, [r7, #224]	@ 0xe0

		sideB_auxRegisterA_PECflag = verify_PEC15(sideB_auxRegisterA);
 8001842:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 8001846:	4618      	mov	r0, r3
 8001848:	f006 f9fb 	bl	8007c42 <verify_PEC15>
 800184c:	4603      	mov	r3, r0
 800184e:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
		sideB_auxRegisterB_PECflag = verify_PEC15(sideB_auxRegisterB);
 8001852:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001856:	4618      	mov	r0, r3
 8001858:	f006 f9f3 	bl	8007c42 <verify_PEC15>
 800185c:	4603      	mov	r3, r0
 800185e:	f887 30de 	strb.w	r3, [r7, #222]	@ 0xde
		sideB_auxRegisterC_PECflag = verify_PEC15(sideB_auxRegisterC);
 8001862:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001866:	4618      	mov	r0, r3
 8001868:	f006 f9eb 	bl	8007c42 <verify_PEC15>
 800186c:	4603      	mov	r3, r0
 800186e:	f887 30dd 	strb.w	r3, [r7, #221]	@ 0xdd
		sideB_auxRegisterD_PECflag = verify_PEC15(sideB_auxRegisterD);
 8001872:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001876:	4618      	mov	r0, r3
 8001878:	f006 f9e3 	bl	8007c42 <verify_PEC15>
 800187c:	4603      	mov	r3, r0
 800187e:	f887 30dc 	strb.w	r3, [r7, #220]	@ 0xdc

		if(sideA_auxRegisterA_PECflag == 2 &&
 8001882:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8001886:	2b02      	cmp	r3, #2
 8001888:	d16f      	bne.n	800196a <resistor_temperature_sense+0x20e>
 800188a:	f897 30e2 	ldrb.w	r3, [r7, #226]	@ 0xe2
 800188e:	2b02      	cmp	r3, #2
 8001890:	d16b      	bne.n	800196a <resistor_temperature_sense+0x20e>
		   sideA_auxRegisterB_PECflag == 2 &&
 8001892:	f897 30e1 	ldrb.w	r3, [r7, #225]	@ 0xe1
 8001896:	2b02      	cmp	r3, #2
 8001898:	d167      	bne.n	800196a <resistor_temperature_sense+0x20e>
		   sideA_auxRegisterC_PECflag == 2 &&
 800189a:	f897 30e0 	ldrb.w	r3, [r7, #224]	@ 0xe0
 800189e:	2b02      	cmp	r3, #2
 80018a0:	d163      	bne.n	800196a <resistor_temperature_sense+0x20e>
		   sideA_auxRegisterD_PECflag == 2 &&
 80018a2:	f897 30df 	ldrb.w	r3, [r7, #223]	@ 0xdf
 80018a6:	2b02      	cmp	r3, #2
 80018a8:	d15f      	bne.n	800196a <resistor_temperature_sense+0x20e>
		   sideB_auxRegisterA_PECflag == 2 &&
 80018aa:	f897 30de 	ldrb.w	r3, [r7, #222]	@ 0xde
 80018ae:	2b02      	cmp	r3, #2
 80018b0:	d15b      	bne.n	800196a <resistor_temperature_sense+0x20e>
		   sideB_auxRegisterB_PECflag == 2 &&
 80018b2:	f897 30dd 	ldrb.w	r3, [r7, #221]	@ 0xdd
 80018b6:	2b02      	cmp	r3, #2
 80018b8:	d157      	bne.n	800196a <resistor_temperature_sense+0x20e>
		   sideB_auxRegisterC_PECflag == 2 &&
 80018ba:	f897 30dc 	ldrb.w	r3, [r7, #220]	@ 0xdc
 80018be:	2b02      	cmp	r3, #2
 80018c0:	d153      	bne.n	800196a <resistor_temperature_sense+0x20e>
		   sideB_auxRegisterD_PECflag == 2 &&
		   sideA_auxRegisterA[1] != 0xFF &&
 80018c2:	f897 30d5 	ldrb.w	r3, [r7, #213]	@ 0xd5
		   sideB_auxRegisterD_PECflag == 2 &&
 80018c6:	2bff      	cmp	r3, #255	@ 0xff
 80018c8:	d04f      	beq.n	800196a <resistor_temperature_sense+0x20e>
		   sideA_auxRegisterA[3] != 0xFF &&
 80018ca:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
		   sideA_auxRegisterA[1] != 0xFF &&
 80018ce:	2bff      	cmp	r3, #255	@ 0xff
 80018d0:	d04b      	beq.n	800196a <resistor_temperature_sense+0x20e>
		   sideA_auxRegisterA[5] != 0xFF &&
 80018d2:	f897 30d9 	ldrb.w	r3, [r7, #217]	@ 0xd9
		   sideA_auxRegisterA[3] != 0xFF &&
 80018d6:	2bff      	cmp	r3, #255	@ 0xff
 80018d8:	d047      	beq.n	800196a <resistor_temperature_sense+0x20e>
		   sideA_auxRegisterB[1] != 0xFF &&
 80018da:	f897 30cd 	ldrb.w	r3, [r7, #205]	@ 0xcd
		   sideA_auxRegisterA[5] != 0xFF &&
 80018de:	2bff      	cmp	r3, #255	@ 0xff
 80018e0:	d043      	beq.n	800196a <resistor_temperature_sense+0x20e>
		   sideA_auxRegisterB[3] != 0xFF &&
 80018e2:	f897 30cf 	ldrb.w	r3, [r7, #207]	@ 0xcf
		   sideA_auxRegisterB[1] != 0xFF &&
 80018e6:	2bff      	cmp	r3, #255	@ 0xff
 80018e8:	d03f      	beq.n	800196a <resistor_temperature_sense+0x20e>
		   sideA_auxRegisterB[5] != 0xFF &&
 80018ea:	f897 30d1 	ldrb.w	r3, [r7, #209]	@ 0xd1
		   sideA_auxRegisterB[3] != 0xFF &&
 80018ee:	2bff      	cmp	r3, #255	@ 0xff
 80018f0:	d03b      	beq.n	800196a <resistor_temperature_sense+0x20e>
		   sideA_auxRegisterC[1] != 0xFF &&
 80018f2:	f897 30c5 	ldrb.w	r3, [r7, #197]	@ 0xc5
		   sideA_auxRegisterB[5] != 0xFF &&
 80018f6:	2bff      	cmp	r3, #255	@ 0xff
 80018f8:	d037      	beq.n	800196a <resistor_temperature_sense+0x20e>
		   sideA_auxRegisterC[3] != 0xFF &&
 80018fa:	f897 30c7 	ldrb.w	r3, [r7, #199]	@ 0xc7
		   sideA_auxRegisterC[1] != 0xFF &&
 80018fe:	2bff      	cmp	r3, #255	@ 0xff
 8001900:	d033      	beq.n	800196a <resistor_temperature_sense+0x20e>
		   sideA_auxRegisterC[5] != 0xFF &&
 8001902:	f897 30c9 	ldrb.w	r3, [r7, #201]	@ 0xc9
		   sideA_auxRegisterC[3] != 0xFF &&
 8001906:	2bff      	cmp	r3, #255	@ 0xff
 8001908:	d02f      	beq.n	800196a <resistor_temperature_sense+0x20e>
		   sideA_auxRegisterD[1] != 0xFF &&
 800190a:	f897 30bd 	ldrb.w	r3, [r7, #189]	@ 0xbd
		   sideA_auxRegisterC[5] != 0xFF &&
 800190e:	2bff      	cmp	r3, #255	@ 0xff
 8001910:	d02b      	beq.n	800196a <resistor_temperature_sense+0x20e>
		   sideB_auxRegisterA[1] != 0xFF &&
 8001912:	f897 30b5 	ldrb.w	r3, [r7, #181]	@ 0xb5
		   sideA_auxRegisterD[1] != 0xFF &&
 8001916:	2bff      	cmp	r3, #255	@ 0xff
 8001918:	d027      	beq.n	800196a <resistor_temperature_sense+0x20e>
		   sideB_auxRegisterA[3] != 0xFF &&
 800191a:	f897 30b7 	ldrb.w	r3, [r7, #183]	@ 0xb7
		   sideB_auxRegisterA[1] != 0xFF &&
 800191e:	2bff      	cmp	r3, #255	@ 0xff
 8001920:	d023      	beq.n	800196a <resistor_temperature_sense+0x20e>
		   sideB_auxRegisterA[5] != 0xFF &&
 8001922:	f897 30b9 	ldrb.w	r3, [r7, #185]	@ 0xb9
		   sideB_auxRegisterA[3] != 0xFF &&
 8001926:	2bff      	cmp	r3, #255	@ 0xff
 8001928:	d01f      	beq.n	800196a <resistor_temperature_sense+0x20e>
		   sideB_auxRegisterB[1] != 0xFF &&
 800192a:	f897 30ad 	ldrb.w	r3, [r7, #173]	@ 0xad
		   sideB_auxRegisterA[5] != 0xFF &&
 800192e:	2bff      	cmp	r3, #255	@ 0xff
 8001930:	d01b      	beq.n	800196a <resistor_temperature_sense+0x20e>
		   sideB_auxRegisterB[3] != 0xFF &&
 8001932:	f897 30af 	ldrb.w	r3, [r7, #175]	@ 0xaf
		   sideB_auxRegisterB[1] != 0xFF &&
 8001936:	2bff      	cmp	r3, #255	@ 0xff
 8001938:	d017      	beq.n	800196a <resistor_temperature_sense+0x20e>
		   sideB_auxRegisterB[5] != 0xFF &&
 800193a:	f897 30b1 	ldrb.w	r3, [r7, #177]	@ 0xb1
		   sideB_auxRegisterB[3] != 0xFF &&
 800193e:	2bff      	cmp	r3, #255	@ 0xff
 8001940:	d013      	beq.n	800196a <resistor_temperature_sense+0x20e>
		   sideB_auxRegisterC[1] != 0xFF &&
 8001942:	f897 30a5 	ldrb.w	r3, [r7, #165]	@ 0xa5
		   sideB_auxRegisterB[5] != 0xFF &&
 8001946:	2bff      	cmp	r3, #255	@ 0xff
 8001948:	d00f      	beq.n	800196a <resistor_temperature_sense+0x20e>
		   sideB_auxRegisterC[3] != 0xFF &&
 800194a:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
		   sideB_auxRegisterC[1] != 0xFF &&
 800194e:	2bff      	cmp	r3, #255	@ 0xff
 8001950:	d00b      	beq.n	800196a <resistor_temperature_sense+0x20e>
		   sideB_auxRegisterC[5] != 0xFF &&
 8001952:	f897 30a9 	ldrb.w	r3, [r7, #169]	@ 0xa9
		   sideB_auxRegisterC[3] != 0xFF &&
 8001956:	2bff      	cmp	r3, #255	@ 0xff
 8001958:	d007      	beq.n	800196a <resistor_temperature_sense+0x20e>
		   sideB_auxRegisterD[1] != 0xFF)
 800195a:	f897 309d 	ldrb.w	r3, [r7, #157]	@ 0x9d
		   sideB_auxRegisterC[5] != 0xFF &&
 800195e:	2bff      	cmp	r3, #255	@ 0xff
 8001960:	d003      	beq.n	800196a <resistor_temperature_sense+0x20e>
		{
			attempts = 13;
 8001962:	230d      	movs	r3, #13
 8001964:	f887 30ef 	strb.w	r3, [r7, #239]	@ 0xef
 8001968:	e007      	b.n	800197a <resistor_temperature_sense+0x21e>
		}
		else {
			attempts++;
 800196a:	f897 30ef 	ldrb.w	r3, [r7, #239]	@ 0xef
 800196e:	3301      	adds	r3, #1
 8001970:	f887 30ef 	strb.w	r3, [r7, #239]	@ 0xef
			wait(1);
 8001974:	2001      	movs	r0, #1
 8001976:	f007 fc5f 	bl	8009238 <wait>
	while(attempts < ATTEMPT_LIMIT) {
 800197a:	f897 30ef 	ldrb.w	r3, [r7, #239]	@ 0xef
 800197e:	2b09      	cmp	r3, #9
 8001980:	f67f aef4 	bls.w	800176c <resistor_temperature_sense+0x10>
		}
	}
	if(attempts != 13) { error_loop(ERROR_PEC, 0, 0); }
 8001984:	f897 30ef 	ldrb.w	r3, [r7, #239]	@ 0xef
 8001988:	2b0d      	cmp	r3, #13
 800198a:	d004      	beq.n	8001996 <resistor_temperature_sense+0x23a>
 800198c:	2200      	movs	r2, #0
 800198e:	2100      	movs	r1, #0
 8001990:	2056      	movs	r0, #86	@ 0x56
 8001992:	f002 fe67 	bl	8004664 <error_loop>

	sideA_boardThermistorVoltages[0] = ((sideA_auxRegisterA[1] << 8) | sideA_auxRegisterA[0]) / 10000.0f;
 8001996:	f897 30d5 	ldrb.w	r3, [r7, #213]	@ 0xd5
 800199a:	021b      	lsls	r3, r3, #8
 800199c:	f897 20d4 	ldrb.w	r2, [r7, #212]	@ 0xd4
 80019a0:	4313      	orrs	r3, r2
 80019a2:	ee07 3a90 	vmov	s15, r3
 80019a6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80019aa:	eddf 6ac1 	vldr	s13, [pc, #772]	@ 8001cb0 <resistor_temperature_sense+0x554>
 80019ae:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80019b2:	edc7 7a1e 	vstr	s15, [r7, #120]	@ 0x78
	sideA_boardThermistorVoltages[1] = ((sideA_auxRegisterA[3] << 8) | sideA_auxRegisterA[2]) / 10000.0f;
 80019b6:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
 80019ba:	021b      	lsls	r3, r3, #8
 80019bc:	f897 20d6 	ldrb.w	r2, [r7, #214]	@ 0xd6
 80019c0:	4313      	orrs	r3, r2
 80019c2:	ee07 3a90 	vmov	s15, r3
 80019c6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80019ca:	eddf 6ab9 	vldr	s13, [pc, #740]	@ 8001cb0 <resistor_temperature_sense+0x554>
 80019ce:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80019d2:	edc7 7a1f 	vstr	s15, [r7, #124]	@ 0x7c
	sideA_boardThermistorVoltages[2] = ((sideA_auxRegisterA[5] << 8) | sideA_auxRegisterA[4]) / 10000.0f;
 80019d6:	f897 30d9 	ldrb.w	r3, [r7, #217]	@ 0xd9
 80019da:	021b      	lsls	r3, r3, #8
 80019dc:	f897 20d8 	ldrb.w	r2, [r7, #216]	@ 0xd8
 80019e0:	4313      	orrs	r3, r2
 80019e2:	ee07 3a90 	vmov	s15, r3
 80019e6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80019ea:	eddf 6ab1 	vldr	s13, [pc, #708]	@ 8001cb0 <resistor_temperature_sense+0x554>
 80019ee:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80019f2:	edc7 7a20 	vstr	s15, [r7, #128]	@ 0x80
	sideA_boardThermistorVoltages[3] = ((sideA_auxRegisterB[1] << 8) | sideA_auxRegisterB[0]) / 10000.0f;
 80019f6:	f897 30cd 	ldrb.w	r3, [r7, #205]	@ 0xcd
 80019fa:	021b      	lsls	r3, r3, #8
 80019fc:	f897 20cc 	ldrb.w	r2, [r7, #204]	@ 0xcc
 8001a00:	4313      	orrs	r3, r2
 8001a02:	ee07 3a90 	vmov	s15, r3
 8001a06:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001a0a:	eddf 6aa9 	vldr	s13, [pc, #676]	@ 8001cb0 <resistor_temperature_sense+0x554>
 8001a0e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001a12:	edc7 7a21 	vstr	s15, [r7, #132]	@ 0x84
	sideA_boardThermistorVoltages[4] = ((sideA_auxRegisterB[3] << 8) | sideA_auxRegisterB[2]) / 10000.0f;
 8001a16:	f897 30cf 	ldrb.w	r3, [r7, #207]	@ 0xcf
 8001a1a:	021b      	lsls	r3, r3, #8
 8001a1c:	f897 20ce 	ldrb.w	r2, [r7, #206]	@ 0xce
 8001a20:	4313      	orrs	r3, r2
 8001a22:	ee07 3a90 	vmov	s15, r3
 8001a26:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001a2a:	eddf 6aa1 	vldr	s13, [pc, #644]	@ 8001cb0 <resistor_temperature_sense+0x554>
 8001a2e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001a32:	edc7 7a22 	vstr	s15, [r7, #136]	@ 0x88
	sideA_boardThermistorVoltages[5] = ((sideA_auxRegisterC[1] << 8) | sideA_auxRegisterC[0]) / 10000.0f;
 8001a36:	f897 30c5 	ldrb.w	r3, [r7, #197]	@ 0xc5
 8001a3a:	021b      	lsls	r3, r3, #8
 8001a3c:	f897 20c4 	ldrb.w	r2, [r7, #196]	@ 0xc4
 8001a40:	4313      	orrs	r3, r2
 8001a42:	ee07 3a90 	vmov	s15, r3
 8001a46:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001a4a:	eddf 6a99 	vldr	s13, [pc, #612]	@ 8001cb0 <resistor_temperature_sense+0x554>
 8001a4e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001a52:	edc7 7a23 	vstr	s15, [r7, #140]	@ 0x8c
	sideA_boardThermistorVoltages[6] = ((sideA_auxRegisterC[3] << 8) | sideA_auxRegisterC[2]) / 10000.0f;
 8001a56:	f897 30c7 	ldrb.w	r3, [r7, #199]	@ 0xc7
 8001a5a:	021b      	lsls	r3, r3, #8
 8001a5c:	f897 20c6 	ldrb.w	r2, [r7, #198]	@ 0xc6
 8001a60:	4313      	orrs	r3, r2
 8001a62:	ee07 3a90 	vmov	s15, r3
 8001a66:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001a6a:	eddf 6a91 	vldr	s13, [pc, #580]	@ 8001cb0 <resistor_temperature_sense+0x554>
 8001a6e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001a72:	edc7 7a24 	vstr	s15, [r7, #144]	@ 0x90
	sideA_boardThermistorVoltages[7] = ((sideA_auxRegisterC[5] << 8) | sideA_auxRegisterC[4]) / 10000.0f;
 8001a76:	f897 30c9 	ldrb.w	r3, [r7, #201]	@ 0xc9
 8001a7a:	021b      	lsls	r3, r3, #8
 8001a7c:	f897 20c8 	ldrb.w	r2, [r7, #200]	@ 0xc8
 8001a80:	4313      	orrs	r3, r2
 8001a82:	ee07 3a90 	vmov	s15, r3
 8001a86:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001a8a:	eddf 6a89 	vldr	s13, [pc, #548]	@ 8001cb0 <resistor_temperature_sense+0x554>
 8001a8e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001a92:	edc7 7a25 	vstr	s15, [r7, #148]	@ 0x94
	sideA_boardThermistorVoltages[8] = ((sideA_auxRegisterD[1] << 8) | sideA_auxRegisterD[0]) / 10000.0f;
 8001a96:	f897 30bd 	ldrb.w	r3, [r7, #189]	@ 0xbd
 8001a9a:	021b      	lsls	r3, r3, #8
 8001a9c:	f897 20bc 	ldrb.w	r2, [r7, #188]	@ 0xbc
 8001aa0:	4313      	orrs	r3, r2
 8001aa2:	ee07 3a90 	vmov	s15, r3
 8001aa6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001aaa:	eddf 6a81 	vldr	s13, [pc, #516]	@ 8001cb0 <resistor_temperature_sense+0x554>
 8001aae:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001ab2:	edc7 7a26 	vstr	s15, [r7, #152]	@ 0x98

	sideB_boardThermistorVoltages[0] = ((sideB_auxRegisterA[1] << 8) | sideB_auxRegisterA[0]) / 10000.0f;
 8001ab6:	f897 30b5 	ldrb.w	r3, [r7, #181]	@ 0xb5
 8001aba:	021b      	lsls	r3, r3, #8
 8001abc:	f897 20b4 	ldrb.w	r2, [r7, #180]	@ 0xb4
 8001ac0:	4313      	orrs	r3, r2
 8001ac2:	ee07 3a90 	vmov	s15, r3
 8001ac6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001aca:	eddf 6a79 	vldr	s13, [pc, #484]	@ 8001cb0 <resistor_temperature_sense+0x554>
 8001ace:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001ad2:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54
	sideB_boardThermistorVoltages[1] = ((sideB_auxRegisterA[3] << 8) | sideB_auxRegisterA[2]) / 10000.0f;
 8001ad6:	f897 30b7 	ldrb.w	r3, [r7, #183]	@ 0xb7
 8001ada:	021b      	lsls	r3, r3, #8
 8001adc:	f897 20b6 	ldrb.w	r2, [r7, #182]	@ 0xb6
 8001ae0:	4313      	orrs	r3, r2
 8001ae2:	ee07 3a90 	vmov	s15, r3
 8001ae6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001aea:	eddf 6a71 	vldr	s13, [pc, #452]	@ 8001cb0 <resistor_temperature_sense+0x554>
 8001aee:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001af2:	edc7 7a16 	vstr	s15, [r7, #88]	@ 0x58
	sideB_boardThermistorVoltages[2] = ((sideB_auxRegisterA[5] << 8) | sideB_auxRegisterA[4]) / 10000.0f;
 8001af6:	f897 30b9 	ldrb.w	r3, [r7, #185]	@ 0xb9
 8001afa:	021b      	lsls	r3, r3, #8
 8001afc:	f897 20b8 	ldrb.w	r2, [r7, #184]	@ 0xb8
 8001b00:	4313      	orrs	r3, r2
 8001b02:	ee07 3a90 	vmov	s15, r3
 8001b06:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001b0a:	eddf 6a69 	vldr	s13, [pc, #420]	@ 8001cb0 <resistor_temperature_sense+0x554>
 8001b0e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001b12:	edc7 7a17 	vstr	s15, [r7, #92]	@ 0x5c
	sideB_boardThermistorVoltages[3] = ((sideB_auxRegisterB[1] << 8) | sideB_auxRegisterB[0]) / 10000.0f;
 8001b16:	f897 30ad 	ldrb.w	r3, [r7, #173]	@ 0xad
 8001b1a:	021b      	lsls	r3, r3, #8
 8001b1c:	f897 20ac 	ldrb.w	r2, [r7, #172]	@ 0xac
 8001b20:	4313      	orrs	r3, r2
 8001b22:	ee07 3a90 	vmov	s15, r3
 8001b26:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001b2a:	eddf 6a61 	vldr	s13, [pc, #388]	@ 8001cb0 <resistor_temperature_sense+0x554>
 8001b2e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001b32:	edc7 7a18 	vstr	s15, [r7, #96]	@ 0x60
	sideB_boardThermistorVoltages[4] = ((sideB_auxRegisterB[3] << 8) | sideB_auxRegisterB[2]) / 10000.0f;
 8001b36:	f897 30af 	ldrb.w	r3, [r7, #175]	@ 0xaf
 8001b3a:	021b      	lsls	r3, r3, #8
 8001b3c:	f897 20ae 	ldrb.w	r2, [r7, #174]	@ 0xae
 8001b40:	4313      	orrs	r3, r2
 8001b42:	ee07 3a90 	vmov	s15, r3
 8001b46:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001b4a:	eddf 6a59 	vldr	s13, [pc, #356]	@ 8001cb0 <resistor_temperature_sense+0x554>
 8001b4e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001b52:	edc7 7a19 	vstr	s15, [r7, #100]	@ 0x64
	sideB_boardThermistorVoltages[5] = ((sideB_auxRegisterC[1] << 8) | sideB_auxRegisterC[0]) / 10000.0f;
 8001b56:	f897 30a5 	ldrb.w	r3, [r7, #165]	@ 0xa5
 8001b5a:	021b      	lsls	r3, r3, #8
 8001b5c:	f897 20a4 	ldrb.w	r2, [r7, #164]	@ 0xa4
 8001b60:	4313      	orrs	r3, r2
 8001b62:	ee07 3a90 	vmov	s15, r3
 8001b66:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001b6a:	eddf 6a51 	vldr	s13, [pc, #324]	@ 8001cb0 <resistor_temperature_sense+0x554>
 8001b6e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001b72:	edc7 7a1a 	vstr	s15, [r7, #104]	@ 0x68
	sideB_boardThermistorVoltages[6] = ((sideB_auxRegisterC[3] << 8) | sideB_auxRegisterC[2]) / 10000.0f;
 8001b76:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 8001b7a:	021b      	lsls	r3, r3, #8
 8001b7c:	f897 20a6 	ldrb.w	r2, [r7, #166]	@ 0xa6
 8001b80:	4313      	orrs	r3, r2
 8001b82:	ee07 3a90 	vmov	s15, r3
 8001b86:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001b8a:	eddf 6a49 	vldr	s13, [pc, #292]	@ 8001cb0 <resistor_temperature_sense+0x554>
 8001b8e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001b92:	edc7 7a1b 	vstr	s15, [r7, #108]	@ 0x6c
	sideB_boardThermistorVoltages[7] = ((sideB_auxRegisterC[5] << 8) | sideB_auxRegisterC[4]) / 10000.0f;
 8001b96:	f897 30a9 	ldrb.w	r3, [r7, #169]	@ 0xa9
 8001b9a:	021b      	lsls	r3, r3, #8
 8001b9c:	f897 20a8 	ldrb.w	r2, [r7, #168]	@ 0xa8
 8001ba0:	4313      	orrs	r3, r2
 8001ba2:	ee07 3a90 	vmov	s15, r3
 8001ba6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001baa:	eddf 6a41 	vldr	s13, [pc, #260]	@ 8001cb0 <resistor_temperature_sense+0x554>
 8001bae:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001bb2:	edc7 7a1c 	vstr	s15, [r7, #112]	@ 0x70
	sideB_boardThermistorVoltages[8] = ((sideB_auxRegisterD[1] << 8) | sideB_auxRegisterD[0]) / 10000.0f;
 8001bb6:	f897 309d 	ldrb.w	r3, [r7, #157]	@ 0x9d
 8001bba:	021b      	lsls	r3, r3, #8
 8001bbc:	f897 209c 	ldrb.w	r2, [r7, #156]	@ 0x9c
 8001bc0:	4313      	orrs	r3, r2
 8001bc2:	ee07 3a90 	vmov	s15, r3
 8001bc6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001bca:	eddf 6a39 	vldr	s13, [pc, #228]	@ 8001cb0 <resistor_temperature_sense+0x554>
 8001bce:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001bd2:	edc7 7a1d 	vstr	s15, [r7, #116]	@ 0x74

	sideA_VREF2 = ((sideA_auxRegisterB[5] << 8) | sideA_auxRegisterB[4]) / 10000.0f;
 8001bd6:	f897 30d1 	ldrb.w	r3, [r7, #209]	@ 0xd1
 8001bda:	021b      	lsls	r3, r3, #8
 8001bdc:	f897 20d0 	ldrb.w	r2, [r7, #208]	@ 0xd0
 8001be0:	4313      	orrs	r3, r2
 8001be2:	ee07 3a90 	vmov	s15, r3
 8001be6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001bea:	eddf 6a31 	vldr	s13, [pc, #196]	@ 8001cb0 <resistor_temperature_sense+0x554>
 8001bee:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001bf2:	edc7 7a3a 	vstr	s15, [r7, #232]	@ 0xe8
	sideB_VREF2 = ((sideB_auxRegisterB[5] << 8) | sideB_auxRegisterB[4]) / 10000.0f;
 8001bf6:	f897 30b1 	ldrb.w	r3, [r7, #177]	@ 0xb1
 8001bfa:	021b      	lsls	r3, r3, #8
 8001bfc:	f897 20b0 	ldrb.w	r2, [r7, #176]	@ 0xb0
 8001c00:	4313      	orrs	r3, r2
 8001c02:	ee07 3a90 	vmov	s15, r3
 8001c06:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001c0a:	eddf 6a29 	vldr	s13, [pc, #164]	@ 8001cb0 <resistor_temperature_sense+0x554>
 8001c0e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001c12:	edc7 7a39 	vstr	s15, [r7, #228]	@ 0xe4

	board_temperature_sense(sideA_boardThermistorVoltages, sideA_VREF2, sideA_temperatures);
 8001c16:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8001c1a:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8001c1e:	4611      	mov	r1, r2
 8001c20:	ed97 0a3a 	vldr	s0, [r7, #232]	@ 0xe8
 8001c24:	4618      	mov	r0, r3
 8001c26:	f007 fd57 	bl	80096d8 <board_temperature_sense>
	board_temperature_sense(sideB_boardThermistorVoltages, sideB_VREF2, sideB_temperatures);
 8001c2a:	f107 020c 	add.w	r2, r7, #12
 8001c2e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001c32:	4611      	mov	r1, r2
 8001c34:	ed97 0a39 	vldr	s0, [r7, #228]	@ 0xe4
 8001c38:	4618      	mov	r0, r3
 8001c3a:	f007 fd4d 	bl	80096d8 <board_temperature_sense>

	for(uint8_t i = 0; i < 9; i++) { *(pcbTemperatures + i) = sideA_temperatures[i]; }
 8001c3e:	2300      	movs	r3, #0
 8001c40:	f887 30ee 	strb.w	r3, [r7, #238]	@ 0xee
 8001c44:	e011      	b.n	8001c6a <resistor_temperature_sense+0x50e>
 8001c46:	f897 20ee 	ldrb.w	r2, [r7, #238]	@ 0xee
 8001c4a:	f897 30ee 	ldrb.w	r3, [r7, #238]	@ 0xee
 8001c4e:	009b      	lsls	r3, r3, #2
 8001c50:	6879      	ldr	r1, [r7, #4]
 8001c52:	440b      	add	r3, r1
 8001c54:	0092      	lsls	r2, r2, #2
 8001c56:	32f0      	adds	r2, #240	@ 0xf0
 8001c58:	443a      	add	r2, r7
 8001c5a:	3ac0      	subs	r2, #192	@ 0xc0
 8001c5c:	6812      	ldr	r2, [r2, #0]
 8001c5e:	601a      	str	r2, [r3, #0]
 8001c60:	f897 30ee 	ldrb.w	r3, [r7, #238]	@ 0xee
 8001c64:	3301      	adds	r3, #1
 8001c66:	f887 30ee 	strb.w	r3, [r7, #238]	@ 0xee
 8001c6a:	f897 30ee 	ldrb.w	r3, [r7, #238]	@ 0xee
 8001c6e:	2b08      	cmp	r3, #8
 8001c70:	d9e9      	bls.n	8001c46 <resistor_temperature_sense+0x4ea>

	for(uint8_t i = 9; i < 18; i++) { *(pcbTemperatures + i) = sideB_temperatures[i]; }
 8001c72:	2309      	movs	r3, #9
 8001c74:	f887 30ed 	strb.w	r3, [r7, #237]	@ 0xed
 8001c78:	e011      	b.n	8001c9e <resistor_temperature_sense+0x542>
 8001c7a:	f897 20ed 	ldrb.w	r2, [r7, #237]	@ 0xed
 8001c7e:	f897 30ed 	ldrb.w	r3, [r7, #237]	@ 0xed
 8001c82:	009b      	lsls	r3, r3, #2
 8001c84:	6879      	ldr	r1, [r7, #4]
 8001c86:	440b      	add	r3, r1
 8001c88:	0092      	lsls	r2, r2, #2
 8001c8a:	32f0      	adds	r2, #240	@ 0xf0
 8001c8c:	443a      	add	r2, r7
 8001c8e:	3ae4      	subs	r2, #228	@ 0xe4
 8001c90:	6812      	ldr	r2, [r2, #0]
 8001c92:	601a      	str	r2, [r3, #0]
 8001c94:	f897 30ed 	ldrb.w	r3, [r7, #237]	@ 0xed
 8001c98:	3301      	adds	r3, #1
 8001c9a:	f887 30ed 	strb.w	r3, [r7, #237]	@ 0xed
 8001c9e:	f897 30ed 	ldrb.w	r3, [r7, #237]	@ 0xed
 8001ca2:	2b11      	cmp	r3, #17
 8001ca4:	d9e9      	bls.n	8001c7a <resistor_temperature_sense+0x51e>
}
 8001ca6:	bf00      	nop
 8001ca8:	bf00      	nop
 8001caa:	37f0      	adds	r7, #240	@ 0xf0
 8001cac:	46bd      	mov	sp, r7
 8001cae:	bd80      	pop	{r7, pc}
 8001cb0:	461c4000 	.word	0x461c4000

08001cb4 <balance_check>:


uint8_t balance_check(uint8_t *cellsToBalance, uint16_t *cellVoltages, uint16_t minCellVoltage)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	b087      	sub	sp, #28
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	60f8      	str	r0, [r7, #12]
 8001cbc:	60b9      	str	r1, [r7, #8]
 8001cbe:	4613      	mov	r3, r2
 8001cc0:	80fb      	strh	r3, [r7, #6]
	uint8_t cellsToBalanceQty = 0;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	75fb      	strb	r3, [r7, #23]

	// For loop below finds all cells that have a delta greater than the maximum delta
	for(uint8_t i = 0; i < CELL_QTY; i++) {
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	75bb      	strb	r3, [r7, #22]
 8001cca:	e016      	b.n	8001cfa <balance_check+0x46>
		if(*(cellVoltages + i) > minCellVoltage + MAX_DELTA) {
 8001ccc:	7dbb      	ldrb	r3, [r7, #22]
 8001cce:	005b      	lsls	r3, r3, #1
 8001cd0:	68ba      	ldr	r2, [r7, #8]
 8001cd2:	4413      	add	r3, r2
 8001cd4:	881b      	ldrh	r3, [r3, #0]
 8001cd6:	461a      	mov	r2, r3
 8001cd8:	88fb      	ldrh	r3, [r7, #6]
 8001cda:	3396      	adds	r3, #150	@ 0x96
 8001cdc:	429a      	cmp	r2, r3
 8001cde:	dd09      	ble.n	8001cf4 <balance_check+0x40>
			*(cellsToBalance + cellsToBalanceQty) = i + 1;
 8001ce0:	7dfb      	ldrb	r3, [r7, #23]
 8001ce2:	68fa      	ldr	r2, [r7, #12]
 8001ce4:	4413      	add	r3, r2
 8001ce6:	7dba      	ldrb	r2, [r7, #22]
 8001ce8:	3201      	adds	r2, #1
 8001cea:	b2d2      	uxtb	r2, r2
 8001cec:	701a      	strb	r2, [r3, #0]
			cellsToBalanceQty++;
 8001cee:	7dfb      	ldrb	r3, [r7, #23]
 8001cf0:	3301      	adds	r3, #1
 8001cf2:	75fb      	strb	r3, [r7, #23]
	for(uint8_t i = 0; i < CELL_QTY; i++) {
 8001cf4:	7dbb      	ldrb	r3, [r7, #22]
 8001cf6:	3301      	adds	r3, #1
 8001cf8:	75bb      	strb	r3, [r7, #22]
 8001cfa:	7dbb      	ldrb	r3, [r7, #22]
 8001cfc:	2b13      	cmp	r3, #19
 8001cfe:	d9e5      	bls.n	8001ccc <balance_check+0x18>
		}
	}

	// For loop below sorts the cells that need to balanced (cellsToBalance array) in descending order
    for (uint8_t i = 0; i < cellsToBalanceQty - 1; i++) {
 8001d00:	2300      	movs	r3, #0
 8001d02:	757b      	strb	r3, [r7, #21]
 8001d04:	e02e      	b.n	8001d64 <balance_check+0xb0>
        for (uint8_t j = 0; j < cellsToBalanceQty - i - 1; j++) {
 8001d06:	2300      	movs	r3, #0
 8001d08:	753b      	strb	r3, [r7, #20]
 8001d0a:	e021      	b.n	8001d50 <balance_check+0x9c>
            if (*(cellsToBalance + j) < *(cellsToBalance + j + 1)) {
 8001d0c:	7d3b      	ldrb	r3, [r7, #20]
 8001d0e:	68fa      	ldr	r2, [r7, #12]
 8001d10:	4413      	add	r3, r2
 8001d12:	781a      	ldrb	r2, [r3, #0]
 8001d14:	7d3b      	ldrb	r3, [r7, #20]
 8001d16:	3301      	adds	r3, #1
 8001d18:	68f9      	ldr	r1, [r7, #12]
 8001d1a:	440b      	add	r3, r1
 8001d1c:	781b      	ldrb	r3, [r3, #0]
 8001d1e:	429a      	cmp	r2, r3
 8001d20:	d213      	bcs.n	8001d4a <balance_check+0x96>
                uint8_t dummy = *(cellsToBalance + j);
 8001d22:	7d3b      	ldrb	r3, [r7, #20]
 8001d24:	68fa      	ldr	r2, [r7, #12]
 8001d26:	4413      	add	r3, r2
 8001d28:	781b      	ldrb	r3, [r3, #0]
 8001d2a:	74fb      	strb	r3, [r7, #19]
                *(cellsToBalance + j) = *(cellsToBalance + j + 1);
 8001d2c:	7d3b      	ldrb	r3, [r7, #20]
 8001d2e:	3301      	adds	r3, #1
 8001d30:	68fa      	ldr	r2, [r7, #12]
 8001d32:	441a      	add	r2, r3
 8001d34:	7d3b      	ldrb	r3, [r7, #20]
 8001d36:	68f9      	ldr	r1, [r7, #12]
 8001d38:	440b      	add	r3, r1
 8001d3a:	7812      	ldrb	r2, [r2, #0]
 8001d3c:	701a      	strb	r2, [r3, #0]
                *(cellsToBalance + j + 1) = dummy;
 8001d3e:	7d3b      	ldrb	r3, [r7, #20]
 8001d40:	3301      	adds	r3, #1
 8001d42:	68fa      	ldr	r2, [r7, #12]
 8001d44:	4413      	add	r3, r2
 8001d46:	7cfa      	ldrb	r2, [r7, #19]
 8001d48:	701a      	strb	r2, [r3, #0]
        for (uint8_t j = 0; j < cellsToBalanceQty - i - 1; j++) {
 8001d4a:	7d3b      	ldrb	r3, [r7, #20]
 8001d4c:	3301      	adds	r3, #1
 8001d4e:	753b      	strb	r3, [r7, #20]
 8001d50:	7d3a      	ldrb	r2, [r7, #20]
 8001d52:	7df9      	ldrb	r1, [r7, #23]
 8001d54:	7d7b      	ldrb	r3, [r7, #21]
 8001d56:	1acb      	subs	r3, r1, r3
 8001d58:	3b01      	subs	r3, #1
 8001d5a:	429a      	cmp	r2, r3
 8001d5c:	dbd6      	blt.n	8001d0c <balance_check+0x58>
    for (uint8_t i = 0; i < cellsToBalanceQty - 1; i++) {
 8001d5e:	7d7b      	ldrb	r3, [r7, #21]
 8001d60:	3301      	adds	r3, #1
 8001d62:	757b      	strb	r3, [r7, #21]
 8001d64:	7d7a      	ldrb	r2, [r7, #21]
 8001d66:	7dfb      	ldrb	r3, [r7, #23]
 8001d68:	3b01      	subs	r3, #1
 8001d6a:	429a      	cmp	r2, r3
 8001d6c:	dbcb      	blt.n	8001d06 <balance_check+0x52>
            }
        }
    }
    return cellsToBalanceQty;
 8001d6e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001d70:	4618      	mov	r0, r3
 8001d72:	371c      	adds	r7, #28
 8001d74:	46bd      	mov	sp, r7
 8001d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7a:	4770      	bx	lr

08001d7c <extract_min_cell_voltage>:


void extract_min_cell_voltage(uint16_t *absMinCellVoltage)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b0ac      	sub	sp, #176	@ 0xb0
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
	CAN_RxHeaderTypeDef RxHeader;
	uint8_t RxData[8];

	uint16_t cellVoltages[CELL_QTY];
	float moduleTemperatures[MODULE_THERM_QTY];
	uint16_t localMinCellVoltages[5] = {0};
 8001d84:	f107 0308 	add.w	r3, r7, #8
 8001d88:	2200      	movs	r2, #0
 8001d8a:	601a      	str	r2, [r3, #0]
 8001d8c:	605a      	str	r2, [r3, #4]
 8001d8e:	811a      	strh	r2, [r3, #8]

	uint8_t minCellVoltageReceptionFlag = 0;
 8001d90:	2300      	movs	r3, #0
 8001d92:	f887 30af 	strb.w	r3, [r7, #175]	@ 0xaf

	uint16_t dummyMinValue;

	transmitCounter = 0;
 8001d96:	4b93      	ldr	r3, [pc, #588]	@ (8001fe4 <extract_min_cell_voltage+0x268>)
 8001d98:	2200      	movs	r2, #0
 8001d9a:	601a      	str	r2, [r3, #0]
	measureCounter = 0;
 8001d9c:	4b92      	ldr	r3, [pc, #584]	@ (8001fe8 <extract_min_cell_voltage+0x26c>)
 8001d9e:	2200      	movs	r2, #0
 8001da0:	601a      	str	r2, [r3, #0]
	while(!minCellVoltageReceptionFlag) {
 8001da2:	e0ed      	b.n	8001f80 <extract_min_cell_voltage+0x204>
		if(measureCounter > 100) {
 8001da4:	4b90      	ldr	r3, [pc, #576]	@ (8001fe8 <extract_min_cell_voltage+0x26c>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	2b64      	cmp	r3, #100	@ 0x64
 8001daa:	d93e      	bls.n	8001e2a <extract_min_cell_voltage+0xae>
			if(!refup_check()) {
 8001dac:	f006 fd18 	bl	80087e0 <refup_check>
 8001db0:	4603      	mov	r3, r0
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d104      	bne.n	8001dc0 <extract_min_cell_voltage+0x44>
				force_refup();
 8001db6:	f006 fcd7 	bl	8008768 <force_refup>
				wait(1);
 8001dba:	2001      	movs	r0, #1
 8001dbc:	f007 fa3c 	bl	8009238 <wait>
			}

			temperature_sense(moduleTemperatures);
 8001dc0:	f107 0314 	add.w	r3, r7, #20
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	f007 fc53 	bl	8009670 <temperature_sense>
			voltage_sense(cellVoltages);
 8001dca:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001dce:	4618      	mov	r0, r3
 8001dd0:	f008 fa7a 	bl	800a2c8 <voltage_sense>

			// Check for minimum cell voltage in own cell voltage set
			dummyMinValue = cellVoltages[0];
 8001dd4:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 8001dd8:	f8a7 30ac 	strh.w	r3, [r7, #172]	@ 0xac
			for(uint8_t i = 0; i < CELL_QTY; i++) {
 8001ddc:	2300      	movs	r3, #0
 8001dde:	f887 30ab 	strb.w	r3, [r7, #171]	@ 0xab
 8001de2:	e018      	b.n	8001e16 <extract_min_cell_voltage+0x9a>
				if(cellVoltages[i] < dummyMinValue) {
 8001de4:	f897 30ab 	ldrb.w	r3, [r7, #171]	@ 0xab
 8001de8:	005b      	lsls	r3, r3, #1
 8001dea:	33b0      	adds	r3, #176	@ 0xb0
 8001dec:	443b      	add	r3, r7
 8001dee:	f833 3c54 	ldrh.w	r3, [r3, #-84]
 8001df2:	f8b7 20ac 	ldrh.w	r2, [r7, #172]	@ 0xac
 8001df6:	429a      	cmp	r2, r3
 8001df8:	d908      	bls.n	8001e0c <extract_min_cell_voltage+0x90>
					dummyMinValue = cellVoltages[i];
 8001dfa:	f897 30ab 	ldrb.w	r3, [r7, #171]	@ 0xab
 8001dfe:	005b      	lsls	r3, r3, #1
 8001e00:	33b0      	adds	r3, #176	@ 0xb0
 8001e02:	443b      	add	r3, r7
 8001e04:	f833 3c54 	ldrh.w	r3, [r3, #-84]
 8001e08:	f8a7 30ac 	strh.w	r3, [r7, #172]	@ 0xac
			for(uint8_t i = 0; i < CELL_QTY; i++) {
 8001e0c:	f897 30ab 	ldrb.w	r3, [r7, #171]	@ 0xab
 8001e10:	3301      	adds	r3, #1
 8001e12:	f887 30ab 	strb.w	r3, [r7, #171]	@ 0xab
 8001e16:	f897 30ab 	ldrb.w	r3, [r7, #171]	@ 0xab
 8001e1a:	2b13      	cmp	r3, #19
 8001e1c:	d9e2      	bls.n	8001de4 <extract_min_cell_voltage+0x68>
				}
			}
			localMinCellVoltages[0] = dummyMinValue;
 8001e1e:	f8b7 30ac 	ldrh.w	r3, [r7, #172]	@ 0xac
 8001e22:	813b      	strh	r3, [r7, #8]

			measureCounter = 0;
 8001e24:	4b70      	ldr	r3, [pc, #448]	@ (8001fe8 <extract_min_cell_voltage+0x26c>)
 8001e26:	2200      	movs	r2, #0
 8001e28:	601a      	str	r2, [r3, #0]
		}

		if(transmitCounter > transmissionDelay) {
 8001e2a:	4b70      	ldr	r3, [pc, #448]	@ (8001fec <extract_min_cell_voltage+0x270>)
 8001e2c:	881b      	ldrh	r3, [r3, #0]
 8001e2e:	461a      	mov	r2, r3
 8001e30:	4b6c      	ldr	r3, [pc, #432]	@ (8001fe4 <extract_min_cell_voltage+0x268>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	429a      	cmp	r2, r3
 8001e36:	d20e      	bcs.n	8001e56 <extract_min_cell_voltage+0xda>
			transmit_extract_vmin();
 8001e38:	f002 fdb0 	bl	800499c <transmit_extract_vmin>
			transmit_voltages(cellVoltages);
 8001e3c:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001e40:	4618      	mov	r0, r3
 8001e42:	f002 fdbb 	bl	80049bc <transmit_voltages>
			transmit_temperatures(moduleTemperatures);
 8001e46:	f107 0314 	add.w	r3, r7, #20
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	f002 ff86 	bl	8004d5c <transmit_temperatures>

			transmitCounter = 0;
 8001e50:	4b64      	ldr	r3, [pc, #400]	@ (8001fe4 <extract_min_cell_voltage+0x268>)
 8001e52:	2200      	movs	r2, #0
 8001e54:	601a      	str	r2, [r3, #0]
		}

		if(HAL_CAN_GetRxFifoFillLevel(&hcan1, CAN_RX_FIFO0) > 0) {
 8001e56:	2100      	movs	r1, #0
 8001e58:	4865      	ldr	r0, [pc, #404]	@ (8001ff0 <extract_min_cell_voltage+0x274>)
 8001e5a:	f009 fd4b 	bl	800b8f4 <HAL_CAN_GetRxFifoFillLevel>
 8001e5e:	4603      	mov	r3, r0
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d06e      	beq.n	8001f42 <extract_min_cell_voltage+0x1c6>
			uint8_t attempts = 0;
 8001e64:	2300      	movs	r3, #0
 8001e66:	f887 30aa 	strb.w	r3, [r7, #170]	@ 0xaa

			while(attempts < ATTEMPT_LIMIT) {
 8001e6a:	e05d      	b.n	8001f28 <extract_min_cell_voltage+0x1ac>
				if(HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &RxHeader, RxData) == HAL_OK) {
 8001e6c:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8001e70:	f107 028c 	add.w	r2, r7, #140	@ 0x8c
 8001e74:	2100      	movs	r1, #0
 8001e76:	485e      	ldr	r0, [pc, #376]	@ (8001ff0 <extract_min_cell_voltage+0x274>)
 8001e78:	f009 fc1a 	bl	800b6b0 <HAL_CAN_GetRxMessage>
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d14a      	bne.n	8001f18 <extract_min_cell_voltage+0x19c>

					if(RxHeader.StdId == CAN_FAULT_ID) { silent_error_loop(); }
 8001e82:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001e86:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001e8a:	d101      	bne.n	8001e90 <extract_min_cell_voltage+0x114>
 8001e8c:	f002 fb9c 	bl	80045c8 <silent_error_loop>

					if(RxHeader.StdId == CAN_M2_VMIN_ID) { localMinCellVoltages[1] = (uint16_t)RxData[0] | ((uint16_t)RxData[1] << 8); }
 8001e90:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001e94:	2b46      	cmp	r3, #70	@ 0x46
 8001e96:	d10b      	bne.n	8001eb0 <extract_min_cell_voltage+0x134>
 8001e98:	f897 3084 	ldrb.w	r3, [r7, #132]	@ 0x84
 8001e9c:	b21a      	sxth	r2, r3
 8001e9e:	f897 3085 	ldrb.w	r3, [r7, #133]	@ 0x85
 8001ea2:	b21b      	sxth	r3, r3
 8001ea4:	021b      	lsls	r3, r3, #8
 8001ea6:	b21b      	sxth	r3, r3
 8001ea8:	4313      	orrs	r3, r2
 8001eaa:	b21b      	sxth	r3, r3
 8001eac:	b29b      	uxth	r3, r3
 8001eae:	817b      	strh	r3, [r7, #10]

					if(RxHeader.StdId == CAN_M3_VMIN_ID) { localMinCellVoltages[2] = (uint16_t)RxData[0] | ((uint16_t)RxData[1] << 8); }
 8001eb0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001eb4:	2b47      	cmp	r3, #71	@ 0x47
 8001eb6:	d10b      	bne.n	8001ed0 <extract_min_cell_voltage+0x154>
 8001eb8:	f897 3084 	ldrb.w	r3, [r7, #132]	@ 0x84
 8001ebc:	b21a      	sxth	r2, r3
 8001ebe:	f897 3085 	ldrb.w	r3, [r7, #133]	@ 0x85
 8001ec2:	b21b      	sxth	r3, r3
 8001ec4:	021b      	lsls	r3, r3, #8
 8001ec6:	b21b      	sxth	r3, r3
 8001ec8:	4313      	orrs	r3, r2
 8001eca:	b21b      	sxth	r3, r3
 8001ecc:	b29b      	uxth	r3, r3
 8001ece:	81bb      	strh	r3, [r7, #12]

					if(RxHeader.StdId == CAN_M4_VMIN_ID) { localMinCellVoltages[3] = (uint16_t)RxData[0] | ((uint16_t)RxData[1] << 8); }
 8001ed0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001ed4:	2b48      	cmp	r3, #72	@ 0x48
 8001ed6:	d10b      	bne.n	8001ef0 <extract_min_cell_voltage+0x174>
 8001ed8:	f897 3084 	ldrb.w	r3, [r7, #132]	@ 0x84
 8001edc:	b21a      	sxth	r2, r3
 8001ede:	f897 3085 	ldrb.w	r3, [r7, #133]	@ 0x85
 8001ee2:	b21b      	sxth	r3, r3
 8001ee4:	021b      	lsls	r3, r3, #8
 8001ee6:	b21b      	sxth	r3, r3
 8001ee8:	4313      	orrs	r3, r2
 8001eea:	b21b      	sxth	r3, r3
 8001eec:	b29b      	uxth	r3, r3
 8001eee:	81fb      	strh	r3, [r7, #14]

					if(RxHeader.StdId == CAN_M5_VMIN_ID) { localMinCellVoltages[4] = (uint16_t)RxData[0] | ((uint16_t)RxData[1] << 8); }
 8001ef0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001ef4:	2b49      	cmp	r3, #73	@ 0x49
 8001ef6:	d10b      	bne.n	8001f10 <extract_min_cell_voltage+0x194>
 8001ef8:	f897 3084 	ldrb.w	r3, [r7, #132]	@ 0x84
 8001efc:	b21a      	sxth	r2, r3
 8001efe:	f897 3085 	ldrb.w	r3, [r7, #133]	@ 0x85
 8001f02:	b21b      	sxth	r3, r3
 8001f04:	021b      	lsls	r3, r3, #8
 8001f06:	b21b      	sxth	r3, r3
 8001f08:	4313      	orrs	r3, r2
 8001f0a:	b21b      	sxth	r3, r3
 8001f0c:	b29b      	uxth	r3, r3
 8001f0e:	823b      	strh	r3, [r7, #16]

					attempts = 13;
 8001f10:	230d      	movs	r3, #13
 8001f12:	f887 30aa 	strb.w	r3, [r7, #170]	@ 0xaa
 8001f16:	e007      	b.n	8001f28 <extract_min_cell_voltage+0x1ac>
				}
				// If there's a problem with reading the CAN message, the 'attempts' counter will increment.
				else {
					attempts++;
 8001f18:	f897 30aa 	ldrb.w	r3, [r7, #170]	@ 0xaa
 8001f1c:	3301      	adds	r3, #1
 8001f1e:	f887 30aa 	strb.w	r3, [r7, #170]	@ 0xaa
					wait(5);
 8001f22:	2005      	movs	r0, #5
 8001f24:	f007 f988 	bl	8009238 <wait>
			while(attempts < ATTEMPT_LIMIT) {
 8001f28:	f897 30aa 	ldrb.w	r3, [r7, #170]	@ 0xaa
 8001f2c:	2b09      	cmp	r3, #9
 8001f2e:	d99d      	bls.n	8001e6c <extract_min_cell_voltage+0xf0>
				}
			}
			// If the STM32 fails to read the CAN message 10 times in a row, fault!
			if(attempts != 13) { error_loop(ERROR_CAN_READ, 0, 0); }
 8001f30:	f897 30aa 	ldrb.w	r3, [r7, #170]	@ 0xaa
 8001f34:	2b0d      	cmp	r3, #13
 8001f36:	d004      	beq.n	8001f42 <extract_min_cell_voltage+0x1c6>
 8001f38:	2200      	movs	r2, #0
 8001f3a:	2100      	movs	r1, #0
 8001f3c:	2057      	movs	r0, #87	@ 0x57
 8001f3e:	f002 fb91 	bl	8004664 <error_loop>
		}

		minCellVoltageReceptionFlag = 1;
 8001f42:	2301      	movs	r3, #1
 8001f44:	f887 30af 	strb.w	r3, [r7, #175]	@ 0xaf
		for(uint8_t i = 0; i < 5; i++) {
 8001f48:	2300      	movs	r3, #0
 8001f4a:	f887 30a9 	strb.w	r3, [r7, #169]	@ 0xa9
 8001f4e:	e010      	b.n	8001f72 <extract_min_cell_voltage+0x1f6>
			if(localMinCellVoltages[i] == 0) {
 8001f50:	f897 30a9 	ldrb.w	r3, [r7, #169]	@ 0xa9
 8001f54:	005b      	lsls	r3, r3, #1
 8001f56:	33b0      	adds	r3, #176	@ 0xb0
 8001f58:	443b      	add	r3, r7
 8001f5a:	f833 3ca8 	ldrh.w	r3, [r3, #-168]
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d102      	bne.n	8001f68 <extract_min_cell_voltage+0x1ec>
				minCellVoltageReceptionFlag = 0;
 8001f62:	2300      	movs	r3, #0
 8001f64:	f887 30af 	strb.w	r3, [r7, #175]	@ 0xaf
		for(uint8_t i = 0; i < 5; i++) {
 8001f68:	f897 30a9 	ldrb.w	r3, [r7, #169]	@ 0xa9
 8001f6c:	3301      	adds	r3, #1
 8001f6e:	f887 30a9 	strb.w	r3, [r7, #169]	@ 0xa9
 8001f72:	f897 30a9 	ldrb.w	r3, [r7, #169]	@ 0xa9
 8001f76:	2b04      	cmp	r3, #4
 8001f78:	d9ea      	bls.n	8001f50 <extract_min_cell_voltage+0x1d4>
			}
		}

		wait(1);
 8001f7a:	2001      	movs	r0, #1
 8001f7c:	f007 f95c 	bl	8009238 <wait>
	while(!minCellVoltageReceptionFlag) {
 8001f80:	f897 30af 	ldrb.w	r3, [r7, #175]	@ 0xaf
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	f43f af0d 	beq.w	8001da4 <extract_min_cell_voltage+0x28>
	}

	// Find lowest cell voltage in pack
	dummyMinValue = localMinCellVoltages[0];
 8001f8a:	893b      	ldrh	r3, [r7, #8]
 8001f8c:	f8a7 30ac 	strh.w	r3, [r7, #172]	@ 0xac
	for(uint8_t i = 0; i < 5; i++) {
 8001f90:	2300      	movs	r3, #0
 8001f92:	f887 30a8 	strb.w	r3, [r7, #168]	@ 0xa8
 8001f96:	e018      	b.n	8001fca <extract_min_cell_voltage+0x24e>
		if(localMinCellVoltages[i] < dummyMinValue) {
 8001f98:	f897 30a8 	ldrb.w	r3, [r7, #168]	@ 0xa8
 8001f9c:	005b      	lsls	r3, r3, #1
 8001f9e:	33b0      	adds	r3, #176	@ 0xb0
 8001fa0:	443b      	add	r3, r7
 8001fa2:	f833 3ca8 	ldrh.w	r3, [r3, #-168]
 8001fa6:	f8b7 20ac 	ldrh.w	r2, [r7, #172]	@ 0xac
 8001faa:	429a      	cmp	r2, r3
 8001fac:	d908      	bls.n	8001fc0 <extract_min_cell_voltage+0x244>
			dummyMinValue = localMinCellVoltages[i];
 8001fae:	f897 30a8 	ldrb.w	r3, [r7, #168]	@ 0xa8
 8001fb2:	005b      	lsls	r3, r3, #1
 8001fb4:	33b0      	adds	r3, #176	@ 0xb0
 8001fb6:	443b      	add	r3, r7
 8001fb8:	f833 3ca8 	ldrh.w	r3, [r3, #-168]
 8001fbc:	f8a7 30ac 	strh.w	r3, [r7, #172]	@ 0xac
	for(uint8_t i = 0; i < 5; i++) {
 8001fc0:	f897 30a8 	ldrb.w	r3, [r7, #168]	@ 0xa8
 8001fc4:	3301      	adds	r3, #1
 8001fc6:	f887 30a8 	strb.w	r3, [r7, #168]	@ 0xa8
 8001fca:	f897 30a8 	ldrb.w	r3, [r7, #168]	@ 0xa8
 8001fce:	2b04      	cmp	r3, #4
 8001fd0:	d9e2      	bls.n	8001f98 <extract_min_cell_voltage+0x21c>
		}
	}
	*absMinCellVoltage = dummyMinValue;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	f8b7 20ac 	ldrh.w	r2, [r7, #172]	@ 0xac
 8001fd8:	801a      	strh	r2, [r3, #0]
}
 8001fda:	bf00      	nop
 8001fdc:	37b0      	adds	r7, #176	@ 0xb0
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bd80      	pop	{r7, pc}
 8001fe2:	bf00      	nop
 8001fe4:	200003e8 	.word	0x200003e8
 8001fe8:	200003ec 	.word	0x200003ec
 8001fec:	200003e4 	.word	0x200003e4
 8001ff0:	200000c4 	.word	0x200000c4

08001ff4 <balance_cycle>:


void balance_cycle(uint8_t *cellsToBalance, uint8_t cellsToBalanceQty, uint16_t absMinCellVoltage)
{
 8001ff4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001ff8:	f5ad 7d15 	sub.w	sp, sp, #596	@ 0x254
 8001ffc:	af02      	add	r7, sp, #8
 8001ffe:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 8002002:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002006:	6018      	str	r0, [r3, #0]
 8002008:	4610      	mov	r0, r2
 800200a:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 800200e:	f2a3 12fd 	subw	r2, r3, #509	@ 0x1fd
 8002012:	460b      	mov	r3, r1
 8002014:	7013      	strb	r3, [r2, #0]
 8002016:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 800201a:	f5a3 7200 	sub.w	r2, r3, #512	@ 0x200
 800201e:	4603      	mov	r3, r0
 8002020:	8013      	strh	r3, [r2, #0]
 8002022:	466b      	mov	r3, sp
 8002024:	461e      	mov	r6, r3
	CAN_RxHeaderTypeDef RxHeader;
	uint8_t RxData[8];

	uint8_t evenCellsFlag = 1;
 8002026:	2301      	movs	r3, #1
 8002028:	f887 3247 	strb.w	r3, [r7, #583]	@ 0x247
	uint8_t oddCellsFlag = 1;
 800202c:	2301      	movs	r3, #1
 800202e:	f887 3246 	strb.w	r3, [r7, #582]	@ 0x246

	uint8_t evenCellCount = 0;
 8002032:	2300      	movs	r3, #0
 8002034:	f887 3245 	strb.w	r3, [r7, #581]	@ 0x245
	uint8_t oddCellCount = 0;
 8002038:	2300      	movs	r3, #0
 800203a:	f887 3244 	strb.w	r3, [r7, #580]	@ 0x244

	// For-loop below counts up all the even & odd cells that need to be balanced.
	for(uint8_t i = 0; i < cellsToBalanceQty; i++) {
 800203e:	2300      	movs	r3, #0
 8002040:	f887 3243 	strb.w	r3, [r7, #579]	@ 0x243
 8002044:	e028      	b.n	8002098 <balance_cycle+0xa4>
		if(*(cellsToBalance + i) != 0) {
 8002046:	f897 2243 	ldrb.w	r2, [r7, #579]	@ 0x243
 800204a:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 800204e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	4413      	add	r3, r2
 8002056:	781b      	ldrb	r3, [r3, #0]
 8002058:	2b00      	cmp	r3, #0
 800205a:	d018      	beq.n	800208e <balance_cycle+0x9a>
			if(*(cellsToBalance + i) % 2 == 0) {
 800205c:	f897 2243 	ldrb.w	r2, [r7, #579]	@ 0x243
 8002060:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 8002064:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	4413      	add	r3, r2
 800206c:	781b      	ldrb	r3, [r3, #0]
 800206e:	f003 0301 	and.w	r3, r3, #1
 8002072:	b2db      	uxtb	r3, r3
 8002074:	2b00      	cmp	r3, #0
 8002076:	d105      	bne.n	8002084 <balance_cycle+0x90>
				evenCellCount++;
 8002078:	f897 3245 	ldrb.w	r3, [r7, #581]	@ 0x245
 800207c:	3301      	adds	r3, #1
 800207e:	f887 3245 	strb.w	r3, [r7, #581]	@ 0x245
 8002082:	e004      	b.n	800208e <balance_cycle+0x9a>
			}
			else {
				oddCellCount++;
 8002084:	f897 3244 	ldrb.w	r3, [r7, #580]	@ 0x244
 8002088:	3301      	adds	r3, #1
 800208a:	f887 3244 	strb.w	r3, [r7, #580]	@ 0x244
	for(uint8_t i = 0; i < cellsToBalanceQty; i++) {
 800208e:	f897 3243 	ldrb.w	r3, [r7, #579]	@ 0x243
 8002092:	3301      	adds	r3, #1
 8002094:	f887 3243 	strb.w	r3, [r7, #579]	@ 0x243
 8002098:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 800209c:	f2a3 13fd 	subw	r3, r3, #509	@ 0x1fd
 80020a0:	f897 2243 	ldrb.w	r2, [r7, #579]	@ 0x243
 80020a4:	781b      	ldrb	r3, [r3, #0]
 80020a6:	429a      	cmp	r2, r3
 80020a8:	d3cd      	bcc.n	8002046 <balance_cycle+0x52>
			}
		}
	}

	uint8_t evenCells[evenCellCount];
 80020aa:	f897 1245 	ldrb.w	r1, [r7, #581]	@ 0x245
 80020ae:	460b      	mov	r3, r1
 80020b0:	3b01      	subs	r3, #1
 80020b2:	f8c7 320c 	str.w	r3, [r7, #524]	@ 0x20c
 80020b6:	b2cb      	uxtb	r3, r1
 80020b8:	2200      	movs	r2, #0
 80020ba:	461c      	mov	r4, r3
 80020bc:	4615      	mov	r5, r2
 80020be:	f04f 0200 	mov.w	r2, #0
 80020c2:	f04f 0300 	mov.w	r3, #0
 80020c6:	00eb      	lsls	r3, r5, #3
 80020c8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80020cc:	00e2      	lsls	r2, r4, #3
 80020ce:	b2cb      	uxtb	r3, r1
 80020d0:	2200      	movs	r2, #0
 80020d2:	4698      	mov	r8, r3
 80020d4:	4691      	mov	r9, r2
 80020d6:	f04f 0200 	mov.w	r2, #0
 80020da:	f04f 0300 	mov.w	r3, #0
 80020de:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80020e2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80020e6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80020ea:	460b      	mov	r3, r1
 80020ec:	3307      	adds	r3, #7
 80020ee:	08db      	lsrs	r3, r3, #3
 80020f0:	00db      	lsls	r3, r3, #3
 80020f2:	ebad 0d03 	sub.w	sp, sp, r3
 80020f6:	ab02      	add	r3, sp, #8
 80020f8:	3300      	adds	r3, #0
 80020fa:	f8c7 3208 	str.w	r3, [r7, #520]	@ 0x208
	uint8_t oddCells[oddCellCount];
 80020fe:	f897 1244 	ldrb.w	r1, [r7, #580]	@ 0x244
 8002102:	460b      	mov	r3, r1
 8002104:	3b01      	subs	r3, #1
 8002106:	f8c7 3204 	str.w	r3, [r7, #516]	@ 0x204
 800210a:	b2cb      	uxtb	r3, r1
 800210c:	2200      	movs	r2, #0
 800210e:	469a      	mov	sl, r3
 8002110:	4693      	mov	fp, r2
 8002112:	f04f 0200 	mov.w	r2, #0
 8002116:	f04f 0300 	mov.w	r3, #0
 800211a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800211e:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002122:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002126:	b2cb      	uxtb	r3, r1
 8002128:	2200      	movs	r2, #0
 800212a:	643b      	str	r3, [r7, #64]	@ 0x40
 800212c:	647a      	str	r2, [r7, #68]	@ 0x44
 800212e:	f04f 0200 	mov.w	r2, #0
 8002132:	f04f 0300 	mov.w	r3, #0
 8002136:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	@ 0x40
 800213a:	4628      	mov	r0, r5
 800213c:	00c3      	lsls	r3, r0, #3
 800213e:	4620      	mov	r0, r4
 8002140:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8002144:	4620      	mov	r0, r4
 8002146:	00c2      	lsls	r2, r0, #3
 8002148:	460b      	mov	r3, r1
 800214a:	3307      	adds	r3, #7
 800214c:	08db      	lsrs	r3, r3, #3
 800214e:	00db      	lsls	r3, r3, #3
 8002150:	ebad 0d03 	sub.w	sp, sp, r3
 8002154:	ab02      	add	r3, sp, #8
 8002156:	3300      	adds	r3, #0
 8002158:	f8c7 3200 	str.w	r3, [r7, #512]	@ 0x200
	uint8_t evenIndex = 0;
 800215c:	2300      	movs	r3, #0
 800215e:	f887 3242 	strb.w	r3, [r7, #578]	@ 0x242
	uint8_t oddIndex = 0;
 8002162:	2300      	movs	r3, #0
 8002164:	f887 3241 	strb.w	r3, [r7, #577]	@ 0x241

	// For-loop below assigns all even and odd cells in need of balancing to their own arrays.
	for(uint8_t i = 0; i < cellsToBalanceQty; i++) {
 8002168:	2300      	movs	r3, #0
 800216a:	f887 3240 	strb.w	r3, [r7, #576]	@ 0x240
 800216e:	e042      	b.n	80021f6 <balance_cycle+0x202>
		if(*(cellsToBalance + i) != 0) {
 8002170:	f897 2240 	ldrb.w	r2, [r7, #576]	@ 0x240
 8002174:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 8002178:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	4413      	add	r3, r2
 8002180:	781b      	ldrb	r3, [r3, #0]
 8002182:	2b00      	cmp	r3, #0
 8002184:	d032      	beq.n	80021ec <balance_cycle+0x1f8>
			if(*(cellsToBalance + i) % 2 == 0) {
 8002186:	f897 2240 	ldrb.w	r2, [r7, #576]	@ 0x240
 800218a:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 800218e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	4413      	add	r3, r2
 8002196:	781b      	ldrb	r3, [r3, #0]
 8002198:	f003 0301 	and.w	r3, r3, #1
 800219c:	b2db      	uxtb	r3, r3
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d112      	bne.n	80021c8 <balance_cycle+0x1d4>
				evenCells[evenIndex++] = *(cellsToBalance + i);
 80021a2:	f897 2240 	ldrb.w	r2, [r7, #576]	@ 0x240
 80021a6:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 80021aa:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	1899      	adds	r1, r3, r2
 80021b2:	f897 2242 	ldrb.w	r2, [r7, #578]	@ 0x242
 80021b6:	1c53      	adds	r3, r2, #1
 80021b8:	f887 3242 	strb.w	r3, [r7, #578]	@ 0x242
 80021bc:	4610      	mov	r0, r2
 80021be:	780b      	ldrb	r3, [r1, #0]
 80021c0:	f8d7 2208 	ldr.w	r2, [r7, #520]	@ 0x208
 80021c4:	5413      	strb	r3, [r2, r0]
 80021c6:	e011      	b.n	80021ec <balance_cycle+0x1f8>
			}
			else {
				oddCells[oddIndex++] = *(cellsToBalance + i);
 80021c8:	f897 2240 	ldrb.w	r2, [r7, #576]	@ 0x240
 80021cc:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 80021d0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	1899      	adds	r1, r3, r2
 80021d8:	f897 2241 	ldrb.w	r2, [r7, #577]	@ 0x241
 80021dc:	1c53      	adds	r3, r2, #1
 80021de:	f887 3241 	strb.w	r3, [r7, #577]	@ 0x241
 80021e2:	4610      	mov	r0, r2
 80021e4:	780b      	ldrb	r3, [r1, #0]
 80021e6:	f8d7 2200 	ldr.w	r2, [r7, #512]	@ 0x200
 80021ea:	5413      	strb	r3, [r2, r0]
	for(uint8_t i = 0; i < cellsToBalanceQty; i++) {
 80021ec:	f897 3240 	ldrb.w	r3, [r7, #576]	@ 0x240
 80021f0:	3301      	adds	r3, #1
 80021f2:	f887 3240 	strb.w	r3, [r7, #576]	@ 0x240
 80021f6:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 80021fa:	f2a3 13fd 	subw	r3, r3, #509	@ 0x1fd
 80021fe:	f897 2240 	ldrb.w	r2, [r7, #576]	@ 0x240
 8002202:	781b      	ldrb	r3, [r3, #0]
 8002204:	429a      	cmp	r2, r3
 8002206:	d3b3      	bcc.n	8002170 <balance_cycle+0x17c>
			}
		}
	}

	uint8_t sideAEvenCount = 0;
 8002208:	2300      	movs	r3, #0
 800220a:	f887 323f 	strb.w	r3, [r7, #575]	@ 0x23f
	uint8_t sideAOddCount = 0;
 800220e:	2300      	movs	r3, #0
 8002210:	f887 323e 	strb.w	r3, [r7, #574]	@ 0x23e
	uint8_t sideBEvenCount = 0;
 8002214:	2300      	movs	r3, #0
 8002216:	f887 323d 	strb.w	r3, [r7, #573]	@ 0x23d
	uint8_t sideBOddCount = 0;
 800221a:	2300      	movs	r3, #0
 800221c:	f887 323c 	strb.w	r3, [r7, #572]	@ 0x23c

	// For-loop below counts up all the side A even & odd cells.
	for(uint8_t i = 0; i < evenCellCount; i++) {
 8002220:	2300      	movs	r3, #0
 8002222:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
 8002226:	e016      	b.n	8002256 <balance_cycle+0x262>
		if(evenCells[i] > 10) {
 8002228:	f897 223b 	ldrb.w	r2, [r7, #571]	@ 0x23b
 800222c:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 8002230:	5c9b      	ldrb	r3, [r3, r2]
 8002232:	2b0a      	cmp	r3, #10
 8002234:	d905      	bls.n	8002242 <balance_cycle+0x24e>
			sideBEvenCount++;
 8002236:	f897 323d 	ldrb.w	r3, [r7, #573]	@ 0x23d
 800223a:	3301      	adds	r3, #1
 800223c:	f887 323d 	strb.w	r3, [r7, #573]	@ 0x23d
 8002240:	e004      	b.n	800224c <balance_cycle+0x258>
		}

		else {
			sideAEvenCount++;
 8002242:	f897 323f 	ldrb.w	r3, [r7, #575]	@ 0x23f
 8002246:	3301      	adds	r3, #1
 8002248:	f887 323f 	strb.w	r3, [r7, #575]	@ 0x23f
	for(uint8_t i = 0; i < evenCellCount; i++) {
 800224c:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
 8002250:	3301      	adds	r3, #1
 8002252:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
 8002256:	f897 223b 	ldrb.w	r2, [r7, #571]	@ 0x23b
 800225a:	f897 3245 	ldrb.w	r3, [r7, #581]	@ 0x245
 800225e:	429a      	cmp	r2, r3
 8002260:	d3e2      	bcc.n	8002228 <balance_cycle+0x234>
		}
	}
	// For-loop below counts up all the side B even & odd cells.
	for(uint8_t i = 0; i < oddCellCount; i++) {
 8002262:	2300      	movs	r3, #0
 8002264:	f887 323a 	strb.w	r3, [r7, #570]	@ 0x23a
 8002268:	e016      	b.n	8002298 <balance_cycle+0x2a4>
		if(oddCells[i] > 9) {
 800226a:	f897 223a 	ldrb.w	r2, [r7, #570]	@ 0x23a
 800226e:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002272:	5c9b      	ldrb	r3, [r3, r2]
 8002274:	2b09      	cmp	r3, #9
 8002276:	d905      	bls.n	8002284 <balance_cycle+0x290>
			sideBOddCount++;
 8002278:	f897 323c 	ldrb.w	r3, [r7, #572]	@ 0x23c
 800227c:	3301      	adds	r3, #1
 800227e:	f887 323c 	strb.w	r3, [r7, #572]	@ 0x23c
 8002282:	e004      	b.n	800228e <balance_cycle+0x29a>
		}

		else {
			sideAOddCount++;
 8002284:	f897 323e 	ldrb.w	r3, [r7, #574]	@ 0x23e
 8002288:	3301      	adds	r3, #1
 800228a:	f887 323e 	strb.w	r3, [r7, #574]	@ 0x23e
	for(uint8_t i = 0; i < oddCellCount; i++) {
 800228e:	f897 323a 	ldrb.w	r3, [r7, #570]	@ 0x23a
 8002292:	3301      	adds	r3, #1
 8002294:	f887 323a 	strb.w	r3, [r7, #570]	@ 0x23a
 8002298:	f897 223a 	ldrb.w	r2, [r7, #570]	@ 0x23a
 800229c:	f897 3244 	ldrb.w	r3, [r7, #580]	@ 0x244
 80022a0:	429a      	cmp	r2, r3
 80022a2:	d3e2      	bcc.n	800226a <balance_cycle+0x276>
		}
	}

	uint8_t sideAEvenCells[sideAEvenCount];
 80022a4:	f897 123f 	ldrb.w	r1, [r7, #575]	@ 0x23f
 80022a8:	460b      	mov	r3, r1
 80022aa:	3b01      	subs	r3, #1
 80022ac:	f8c7 31fc 	str.w	r3, [r7, #508]	@ 0x1fc
 80022b0:	b2cb      	uxtb	r3, r1
 80022b2:	2200      	movs	r2, #0
 80022b4:	63bb      	str	r3, [r7, #56]	@ 0x38
 80022b6:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80022b8:	f04f 0200 	mov.w	r2, #0
 80022bc:	f04f 0300 	mov.w	r3, #0
 80022c0:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	@ 0x38
 80022c4:	4628      	mov	r0, r5
 80022c6:	00c3      	lsls	r3, r0, #3
 80022c8:	4620      	mov	r0, r4
 80022ca:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80022ce:	4620      	mov	r0, r4
 80022d0:	00c2      	lsls	r2, r0, #3
 80022d2:	b2cb      	uxtb	r3, r1
 80022d4:	2200      	movs	r2, #0
 80022d6:	633b      	str	r3, [r7, #48]	@ 0x30
 80022d8:	637a      	str	r2, [r7, #52]	@ 0x34
 80022da:	f04f 0200 	mov.w	r2, #0
 80022de:	f04f 0300 	mov.w	r3, #0
 80022e2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80022e6:	4628      	mov	r0, r5
 80022e8:	00c3      	lsls	r3, r0, #3
 80022ea:	4620      	mov	r0, r4
 80022ec:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80022f0:	4620      	mov	r0, r4
 80022f2:	00c2      	lsls	r2, r0, #3
 80022f4:	460b      	mov	r3, r1
 80022f6:	3307      	adds	r3, #7
 80022f8:	08db      	lsrs	r3, r3, #3
 80022fa:	00db      	lsls	r3, r3, #3
 80022fc:	ebad 0d03 	sub.w	sp, sp, r3
 8002300:	ab02      	add	r3, sp, #8
 8002302:	3300      	adds	r3, #0
 8002304:	f8c7 31f8 	str.w	r3, [r7, #504]	@ 0x1f8
	uint8_t sideAOddCells[sideAOddCount];
 8002308:	f897 123e 	ldrb.w	r1, [r7, #574]	@ 0x23e
 800230c:	460b      	mov	r3, r1
 800230e:	3b01      	subs	r3, #1
 8002310:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
 8002314:	b2cb      	uxtb	r3, r1
 8002316:	2200      	movs	r2, #0
 8002318:	62bb      	str	r3, [r7, #40]	@ 0x28
 800231a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800231c:	f04f 0200 	mov.w	r2, #0
 8002320:	f04f 0300 	mov.w	r3, #0
 8002324:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	@ 0x28
 8002328:	4628      	mov	r0, r5
 800232a:	00c3      	lsls	r3, r0, #3
 800232c:	4620      	mov	r0, r4
 800232e:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8002332:	4620      	mov	r0, r4
 8002334:	00c2      	lsls	r2, r0, #3
 8002336:	b2cb      	uxtb	r3, r1
 8002338:	2200      	movs	r2, #0
 800233a:	623b      	str	r3, [r7, #32]
 800233c:	627a      	str	r2, [r7, #36]	@ 0x24
 800233e:	f04f 0200 	mov.w	r2, #0
 8002342:	f04f 0300 	mov.w	r3, #0
 8002346:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800234a:	4628      	mov	r0, r5
 800234c:	00c3      	lsls	r3, r0, #3
 800234e:	4620      	mov	r0, r4
 8002350:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8002354:	4620      	mov	r0, r4
 8002356:	00c2      	lsls	r2, r0, #3
 8002358:	460b      	mov	r3, r1
 800235a:	3307      	adds	r3, #7
 800235c:	08db      	lsrs	r3, r3, #3
 800235e:	00db      	lsls	r3, r3, #3
 8002360:	ebad 0d03 	sub.w	sp, sp, r3
 8002364:	ab02      	add	r3, sp, #8
 8002366:	3300      	adds	r3, #0
 8002368:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
	uint8_t sideBEvenCells[sideBEvenCount];
 800236c:	f897 123d 	ldrb.w	r1, [r7, #573]	@ 0x23d
 8002370:	460b      	mov	r3, r1
 8002372:	3b01      	subs	r3, #1
 8002374:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
 8002378:	b2cb      	uxtb	r3, r1
 800237a:	2200      	movs	r2, #0
 800237c:	61bb      	str	r3, [r7, #24]
 800237e:	61fa      	str	r2, [r7, #28]
 8002380:	f04f 0200 	mov.w	r2, #0
 8002384:	f04f 0300 	mov.w	r3, #0
 8002388:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 800238c:	4628      	mov	r0, r5
 800238e:	00c3      	lsls	r3, r0, #3
 8002390:	4620      	mov	r0, r4
 8002392:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8002396:	4620      	mov	r0, r4
 8002398:	00c2      	lsls	r2, r0, #3
 800239a:	b2cb      	uxtb	r3, r1
 800239c:	2200      	movs	r2, #0
 800239e:	613b      	str	r3, [r7, #16]
 80023a0:	617a      	str	r2, [r7, #20]
 80023a2:	f04f 0200 	mov.w	r2, #0
 80023a6:	f04f 0300 	mov.w	r3, #0
 80023aa:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80023ae:	4628      	mov	r0, r5
 80023b0:	00c3      	lsls	r3, r0, #3
 80023b2:	4620      	mov	r0, r4
 80023b4:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80023b8:	4620      	mov	r0, r4
 80023ba:	00c2      	lsls	r2, r0, #3
 80023bc:	460b      	mov	r3, r1
 80023be:	3307      	adds	r3, #7
 80023c0:	08db      	lsrs	r3, r3, #3
 80023c2:	00db      	lsls	r3, r3, #3
 80023c4:	ebad 0d03 	sub.w	sp, sp, r3
 80023c8:	ab02      	add	r3, sp, #8
 80023ca:	3300      	adds	r3, #0
 80023cc:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
	uint8_t sideBOddCells[sideBOddCount];
 80023d0:	f897 123c 	ldrb.w	r1, [r7, #572]	@ 0x23c
 80023d4:	460b      	mov	r3, r1
 80023d6:	3b01      	subs	r3, #1
 80023d8:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 80023dc:	b2cb      	uxtb	r3, r1
 80023de:	2200      	movs	r2, #0
 80023e0:	60bb      	str	r3, [r7, #8]
 80023e2:	60fa      	str	r2, [r7, #12]
 80023e4:	f04f 0200 	mov.w	r2, #0
 80023e8:	f04f 0300 	mov.w	r3, #0
 80023ec:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80023f0:	4628      	mov	r0, r5
 80023f2:	00c3      	lsls	r3, r0, #3
 80023f4:	4620      	mov	r0, r4
 80023f6:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80023fa:	4620      	mov	r0, r4
 80023fc:	00c2      	lsls	r2, r0, #3
 80023fe:	b2cb      	uxtb	r3, r1
 8002400:	2200      	movs	r2, #0
 8002402:	603b      	str	r3, [r7, #0]
 8002404:	607a      	str	r2, [r7, #4]
 8002406:	f04f 0200 	mov.w	r2, #0
 800240a:	f04f 0300 	mov.w	r3, #0
 800240e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002412:	4628      	mov	r0, r5
 8002414:	00c3      	lsls	r3, r0, #3
 8002416:	4620      	mov	r0, r4
 8002418:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800241c:	4620      	mov	r0, r4
 800241e:	00c2      	lsls	r2, r0, #3
 8002420:	460b      	mov	r3, r1
 8002422:	3307      	adds	r3, #7
 8002424:	08db      	lsrs	r3, r3, #3
 8002426:	00db      	lsls	r3, r3, #3
 8002428:	ebad 0d03 	sub.w	sp, sp, r3
 800242c:	ab02      	add	r3, sp, #8
 800242e:	3300      	adds	r3, #0
 8002430:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
	uint8_t sideAEvenIndex = 0;
 8002434:	2300      	movs	r3, #0
 8002436:	f887 3239 	strb.w	r3, [r7, #569]	@ 0x239
	uint8_t sideAOddIndex = 0;
 800243a:	2300      	movs	r3, #0
 800243c:	f887 3238 	strb.w	r3, [r7, #568]	@ 0x238
	uint8_t sideBEvenIndex = 0;
 8002440:	2300      	movs	r3, #0
 8002442:	f887 3237 	strb.w	r3, [r7, #567]	@ 0x237
	uint8_t sideBOddIndex = 0;
 8002446:	2300      	movs	r3, #0
 8002448:	f887 3236 	strb.w	r3, [r7, #566]	@ 0x236

	// For-loop below sets up the two side A even & odd cells to balance.
	for(uint8_t i = 0; i < evenCellCount; i++) {
 800244c:	2300      	movs	r3, #0
 800244e:	f887 3235 	strb.w	r3, [r7, #565]	@ 0x235
 8002452:	e02b      	b.n	80024ac <balance_cycle+0x4b8>
		if(evenCells[i] > 10) {
 8002454:	f897 3235 	ldrb.w	r3, [r7, #565]	@ 0x235
 8002458:	f8d7 2208 	ldr.w	r2, [r7, #520]	@ 0x208
 800245c:	5cd3      	ldrb	r3, [r2, r3]
 800245e:	2b0a      	cmp	r3, #10
 8002460:	d911      	bls.n	8002486 <balance_cycle+0x492>
			sideBEvenCells[sideBEvenIndex++] = evenCells[i] - 10;
 8002462:	f897 3235 	ldrb.w	r3, [r7, #565]	@ 0x235
 8002466:	f8d7 2208 	ldr.w	r2, [r7, #520]	@ 0x208
 800246a:	5cd2      	ldrb	r2, [r2, r3]
 800246c:	f897 3237 	ldrb.w	r3, [r7, #567]	@ 0x237
 8002470:	1c59      	adds	r1, r3, #1
 8002472:	f887 1237 	strb.w	r1, [r7, #567]	@ 0x237
 8002476:	4619      	mov	r1, r3
 8002478:	f1a2 030a 	sub.w	r3, r2, #10
 800247c:	b2da      	uxtb	r2, r3
 800247e:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 8002482:	545a      	strb	r2, [r3, r1]
 8002484:	e00d      	b.n	80024a2 <balance_cycle+0x4ae>
		}

		else {
			sideAEvenCells[sideAEvenIndex++] = evenCells[i];
 8002486:	f897 2235 	ldrb.w	r2, [r7, #565]	@ 0x235
 800248a:	f897 3239 	ldrb.w	r3, [r7, #569]	@ 0x239
 800248e:	1c59      	adds	r1, r3, #1
 8002490:	f887 1239 	strb.w	r1, [r7, #569]	@ 0x239
 8002494:	4619      	mov	r1, r3
 8002496:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 800249a:	5c9a      	ldrb	r2, [r3, r2]
 800249c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80024a0:	545a      	strb	r2, [r3, r1]
	for(uint8_t i = 0; i < evenCellCount; i++) {
 80024a2:	f897 3235 	ldrb.w	r3, [r7, #565]	@ 0x235
 80024a6:	3301      	adds	r3, #1
 80024a8:	f887 3235 	strb.w	r3, [r7, #565]	@ 0x235
 80024ac:	f897 2235 	ldrb.w	r2, [r7, #565]	@ 0x235
 80024b0:	f897 3245 	ldrb.w	r3, [r7, #581]	@ 0x245
 80024b4:	429a      	cmp	r2, r3
 80024b6:	d3cd      	bcc.n	8002454 <balance_cycle+0x460>
		}
	}
	// For-loop below sets up the two side B even & odd cells to balance.
	for(uint8_t i = 0; i < oddCellCount; i++) {
 80024b8:	2300      	movs	r3, #0
 80024ba:	f887 3234 	strb.w	r3, [r7, #564]	@ 0x234
 80024be:	e02b      	b.n	8002518 <balance_cycle+0x524>
		if(oddCells[i] > 9) {
 80024c0:	f897 3234 	ldrb.w	r3, [r7, #564]	@ 0x234
 80024c4:	f8d7 2200 	ldr.w	r2, [r7, #512]	@ 0x200
 80024c8:	5cd3      	ldrb	r3, [r2, r3]
 80024ca:	2b09      	cmp	r3, #9
 80024cc:	d911      	bls.n	80024f2 <balance_cycle+0x4fe>
			sideBOddCells[sideBOddIndex++] = oddCells[i] - 10;
 80024ce:	f897 3234 	ldrb.w	r3, [r7, #564]	@ 0x234
 80024d2:	f8d7 2200 	ldr.w	r2, [r7, #512]	@ 0x200
 80024d6:	5cd2      	ldrb	r2, [r2, r3]
 80024d8:	f897 3236 	ldrb.w	r3, [r7, #566]	@ 0x236
 80024dc:	1c59      	adds	r1, r3, #1
 80024de:	f887 1236 	strb.w	r1, [r7, #566]	@ 0x236
 80024e2:	4619      	mov	r1, r3
 80024e4:	f1a2 030a 	sub.w	r3, r2, #10
 80024e8:	b2da      	uxtb	r2, r3
 80024ea:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 80024ee:	545a      	strb	r2, [r3, r1]
 80024f0:	e00d      	b.n	800250e <balance_cycle+0x51a>
		}

		else {
			sideAOddCells[sideAOddIndex++] = oddCells[i];
 80024f2:	f897 2234 	ldrb.w	r2, [r7, #564]	@ 0x234
 80024f6:	f897 3238 	ldrb.w	r3, [r7, #568]	@ 0x238
 80024fa:	1c59      	adds	r1, r3, #1
 80024fc:	f887 1238 	strb.w	r1, [r7, #568]	@ 0x238
 8002500:	4619      	mov	r1, r3
 8002502:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002506:	5c9a      	ldrb	r2, [r3, r2]
 8002508:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 800250c:	545a      	strb	r2, [r3, r1]
	for(uint8_t i = 0; i < oddCellCount; i++) {
 800250e:	f897 3234 	ldrb.w	r3, [r7, #564]	@ 0x234
 8002512:	3301      	adds	r3, #1
 8002514:	f887 3234 	strb.w	r3, [r7, #564]	@ 0x234
 8002518:	f897 2234 	ldrb.w	r2, [r7, #564]	@ 0x234
 800251c:	f897 3244 	ldrb.w	r3, [r7, #580]	@ 0x244
 8002520:	429a      	cmp	r2, r3
 8002522:	d3cd      	bcc.n	80024c0 <balance_cycle+0x4cc>
		}
	}

	if(evenCellCount == 0) { evenCellsFlag = 0; }
 8002524:	f897 3245 	ldrb.w	r3, [r7, #581]	@ 0x245
 8002528:	2b00      	cmp	r3, #0
 800252a:	d102      	bne.n	8002532 <balance_cycle+0x53e>
 800252c:	2300      	movs	r3, #0
 800252e:	f887 3247 	strb.w	r3, [r7, #583]	@ 0x247

	if(oddCellCount == 0) { oddCellsFlag = 0; }
 8002532:	f897 3244 	ldrb.w	r3, [r7, #580]	@ 0x244
 8002536:	2b00      	cmp	r3, #0
 8002538:	d102      	bne.n	8002540 <balance_cycle+0x54c>
 800253a:	2300      	movs	r3, #0
 800253c:	f887 3246 	strb.w	r3, [r7, #582]	@ 0x246
	uint16_t minCellVoltage;
	uint16_t cellVoltageDelta;

	float maxResistorTemperature;
	uint16_t intMaxResistorTemperature;
	float tempScale = 100.0f;
 8002540:	4bdf      	ldr	r3, [pc, #892]	@ (80028c0 <balance_cycle+0x8cc>)
 8002542:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc

	uint8_t overheatFlag = 0;
 8002546:	2300      	movs	r3, #0
 8002548:	f887 322b 	strb.w	r3, [r7, #555]	@ 0x22b
	uint8_t overheatCount = 0;
 800254c:	2300      	movs	r3, #0
 800254e:	f887 322a 	strb.w	r3, [r7, #554]	@ 0x22a
	uint8_t sideA_payloadRegisterPWM_evenCells[8];
	uint8_t sideB_payloadRegisterPWM_evenCells[8];
	uint8_t sideA_payloadRegisterPWM_oddCells[8];
	uint8_t sideB_payloadRegisterPWM_oddCells[8];

	uint8_t DCTO = 0x2;
 8002552:	2302      	movs	r3, #2
 8002554:	f887 31db 	strb.w	r3, [r7, #475]	@ 0x1db

	sideA_payloadRegisterA_evenCells[0] = 0xFE;
 8002558:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 800255c:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8002560:	22fe      	movs	r2, #254	@ 0xfe
 8002562:	701a      	strb	r2, [r3, #0]
	sideA_payloadRegisterA_evenCells[1] = 0x00;
 8002564:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 8002568:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 800256c:	2200      	movs	r2, #0
 800256e:	705a      	strb	r2, [r3, #1]
	sideA_payloadRegisterA_evenCells[2] = 0x00;
 8002570:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 8002574:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8002578:	2200      	movs	r2, #0
 800257a:	709a      	strb	r2, [r3, #2]
	sideA_payloadRegisterA_evenCells[3] = 0x00;
 800257c:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 8002580:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8002584:	2200      	movs	r2, #0
 8002586:	70da      	strb	r2, [r3, #3]

	sideB_payloadRegisterA_evenCells[0] = 0xFE;
 8002588:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 800258c:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8002590:	22fe      	movs	r2, #254	@ 0xfe
 8002592:	701a      	strb	r2, [r3, #0]
	sideB_payloadRegisterA_evenCells[1] = 0x00;
 8002594:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 8002598:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 800259c:	2200      	movs	r2, #0
 800259e:	705a      	strb	r2, [r3, #1]
	sideB_payloadRegisterA_evenCells[2] = 0x00;
 80025a0:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 80025a4:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 80025a8:	2200      	movs	r2, #0
 80025aa:	709a      	strb	r2, [r3, #2]
	sideB_payloadRegisterA_evenCells[3] = 0x00;
 80025ac:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 80025b0:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 80025b4:	2200      	movs	r2, #0
 80025b6:	70da      	strb	r2, [r3, #3]

	sideA_payloadRegisterA_oddCells[0] = 0xFE;
 80025b8:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 80025bc:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80025c0:	22fe      	movs	r2, #254	@ 0xfe
 80025c2:	701a      	strb	r2, [r3, #0]
	sideA_payloadRegisterA_oddCells[1] = 0x00;
 80025c4:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 80025c8:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80025cc:	2200      	movs	r2, #0
 80025ce:	705a      	strb	r2, [r3, #1]
	sideA_payloadRegisterA_oddCells[2] = 0x00;
 80025d0:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 80025d4:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80025d8:	2200      	movs	r2, #0
 80025da:	709a      	strb	r2, [r3, #2]
	sideA_payloadRegisterA_oddCells[3] = 0x00;
 80025dc:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 80025e0:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80025e4:	2200      	movs	r2, #0
 80025e6:	70da      	strb	r2, [r3, #3]

	sideB_payloadRegisterA_oddCells[0] = 0xFE;
 80025e8:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 80025ec:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 80025f0:	22fe      	movs	r2, #254	@ 0xfe
 80025f2:	701a      	strb	r2, [r3, #0]
	sideB_payloadRegisterA_oddCells[1] = 0x00;
 80025f4:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 80025f8:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 80025fc:	2200      	movs	r2, #0
 80025fe:	705a      	strb	r2, [r3, #1]
	sideB_payloadRegisterA_oddCells[2] = 0x00;
 8002600:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 8002604:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8002608:	2200      	movs	r2, #0
 800260a:	709a      	strb	r2, [r3, #2]
	sideB_payloadRegisterA_oddCells[3] = 0x00;
 800260c:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 8002610:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8002614:	2200      	movs	r2, #0
 8002616:	70da      	strb	r2, [r3, #3]

	config_DCC_bits(sideAEvenCells, sideAEvenCount, sideA_payloadRegisterA_evenCells, DCTO);
 8002618:	f897 31db 	ldrb.w	r3, [r7, #475]	@ 0x1db
 800261c:	f107 02c8 	add.w	r2, r7, #200	@ 0xc8
 8002620:	f897 123f 	ldrb.w	r1, [r7, #575]	@ 0x23f
 8002624:	f8d7 01f8 	ldr.w	r0, [r7, #504]	@ 0x1f8
 8002628:	f001 f84c 	bl	80036c4 <config_DCC_bits>
	config_DCC_bits(sideAOddCells, sideAOddCount, sideA_payloadRegisterA_oddCells, DCTO);
 800262c:	f897 31db 	ldrb.w	r3, [r7, #475]	@ 0x1db
 8002630:	f107 02b8 	add.w	r2, r7, #184	@ 0xb8
 8002634:	f897 123e 	ldrb.w	r1, [r7, #574]	@ 0x23e
 8002638:	f8d7 01f0 	ldr.w	r0, [r7, #496]	@ 0x1f0
 800263c:	f001 f842 	bl	80036c4 <config_DCC_bits>

	config_DCC_bits(sideBEvenCells, sideBEvenCount, sideB_payloadRegisterA_evenCells, DCTO);
 8002640:	f897 31db 	ldrb.w	r3, [r7, #475]	@ 0x1db
 8002644:	f107 02c0 	add.w	r2, r7, #192	@ 0xc0
 8002648:	f897 123d 	ldrb.w	r1, [r7, #573]	@ 0x23d
 800264c:	f8d7 01e8 	ldr.w	r0, [r7, #488]	@ 0x1e8
 8002650:	f001 f838 	bl	80036c4 <config_DCC_bits>
	config_DCC_bits(sideBOddCells, sideBOddCount, sideB_payloadRegisterA_oddCells, DCTO);
 8002654:	f897 31db 	ldrb.w	r3, [r7, #475]	@ 0x1db
 8002658:	f107 02b0 	add.w	r2, r7, #176	@ 0xb0
 800265c:	f897 123c 	ldrb.w	r1, [r7, #572]	@ 0x23c
 8002660:	f8d7 01e0 	ldr.w	r0, [r7, #480]	@ 0x1e0
 8002664:	f001 f82e 	bl	80036c4 <config_DCC_bits>

	if(!refup_check()) {
 8002668:	f006 f8ba 	bl	80087e0 <refup_check>
 800266c:	4603      	mov	r3, r0
 800266e:	2b00      	cmp	r3, #0
 8002670:	d104      	bne.n	800267c <balance_cycle+0x688>
		force_refup();
 8002672:	f006 f879 	bl	8008768 <force_refup>
		wait(1);
 8002676:	2001      	movs	r0, #1
 8002678:	f006 fdde 	bl	8009238 <wait>
	}
	voltage_sense(cellVoltages);
 800267c:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002680:	4618      	mov	r0, r3
 8002682:	f007 fe21 	bl	800a2c8 <voltage_sense>

	maxCellVoltage = cellVoltages[0];
 8002686:	f8b7 3168 	ldrh.w	r3, [r7, #360]	@ 0x168
 800268a:	f8a7 3232 	strh.w	r3, [r7, #562]	@ 0x232
	for(uint8_t i = 0; i < CELL_QTY; i++) {
 800268e:	2300      	movs	r3, #0
 8002690:	f887 3223 	strb.w	r3, [r7, #547]	@ 0x223
 8002694:	e01e      	b.n	80026d4 <balance_cycle+0x6e0>
		if(cellVoltages[i] > maxCellVoltage) {
 8002696:	f897 3223 	ldrb.w	r3, [r7, #547]	@ 0x223
 800269a:	005b      	lsls	r3, r3, #1
 800269c:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 80026a0:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 80026a4:	4413      	add	r3, r2
 80026a6:	f833 3ce0 	ldrh.w	r3, [r3, #-224]
 80026aa:	f8b7 2232 	ldrh.w	r2, [r7, #562]	@ 0x232
 80026ae:	429a      	cmp	r2, r3
 80026b0:	d20b      	bcs.n	80026ca <balance_cycle+0x6d6>
			maxCellVoltage = cellVoltages[i];
 80026b2:	f897 3223 	ldrb.w	r3, [r7, #547]	@ 0x223
 80026b6:	005b      	lsls	r3, r3, #1
 80026b8:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 80026bc:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 80026c0:	4413      	add	r3, r2
 80026c2:	f833 3ce0 	ldrh.w	r3, [r3, #-224]
 80026c6:	f8a7 3232 	strh.w	r3, [r7, #562]	@ 0x232
	for(uint8_t i = 0; i < CELL_QTY; i++) {
 80026ca:	f897 3223 	ldrb.w	r3, [r7, #547]	@ 0x223
 80026ce:	3301      	adds	r3, #1
 80026d0:	f887 3223 	strb.w	r3, [r7, #547]	@ 0x223
 80026d4:	f897 3223 	ldrb.w	r3, [r7, #547]	@ 0x223
 80026d8:	2b13      	cmp	r3, #19
 80026da:	d9dc      	bls.n	8002696 <balance_cycle+0x6a2>
		}
	}
	cellVoltageDelta = maxCellVoltage - absMinCellVoltage;
 80026dc:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 80026e0:	f5a3 7300 	sub.w	r3, r3, #512	@ 0x200
 80026e4:	f8b7 2232 	ldrh.w	r2, [r7, #562]	@ 0x232
 80026e8:	881b      	ldrh	r3, [r3, #0]
 80026ea:	1ad3      	subs	r3, r2, r3
 80026ec:	f8a7 31d8 	strh.w	r3, [r7, #472]	@ 0x1d8
	balanceMsg[0] = (uint8_t)(cellVoltageDelta & 0xFF);
 80026f0:	f8b7 31d8 	ldrh.w	r3, [r7, #472]	@ 0x1d8
 80026f4:	b2da      	uxtb	r2, r3
 80026f6:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 80026fa:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 80026fe:	701a      	strb	r2, [r3, #0]
	balanceMsg[1] = (uint8_t)((cellVoltageDelta >> 8) & 0xFF);
 8002700:	f8b7 31d8 	ldrh.w	r3, [r7, #472]	@ 0x1d8
 8002704:	0a1b      	lsrs	r3, r3, #8
 8002706:	b29b      	uxth	r3, r3
 8002708:	b2da      	uxtb	r2, r3
 800270a:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 800270e:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 8002712:	705a      	strb	r2, [r3, #1]
	balanceMsg[7] = cellsToBalanceQty;
 8002714:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 8002718:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 800271c:	f507 7212 	add.w	r2, r7, #584	@ 0x248
 8002720:	f2a2 12fd 	subw	r2, r2, #509	@ 0x1fd
 8002724:	7812      	ldrb	r2, [r2, #0]
 8002726:	71da      	strb	r2, [r3, #7]

	config_PWM_bits(sideAEvenCells, sideAEvenCount, sideA_payloadRegisterPWM_evenCells, cellVoltages, SIDE_A);
 8002728:	f897 123f 	ldrb.w	r1, [r7, #575]	@ 0x23f
 800272c:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002730:	f107 02a8 	add.w	r2, r7, #168	@ 0xa8
 8002734:	2001      	movs	r0, #1
 8002736:	9000      	str	r0, [sp, #0]
 8002738:	f8d7 01f8 	ldr.w	r0, [r7, #504]	@ 0x1f8
 800273c:	f001 f880 	bl	8003840 <config_PWM_bits>
	config_PWM_bits(sideAOddCells, sideAOddCount, sideA_payloadRegisterPWM_oddCells, cellVoltages, SIDE_A);
 8002740:	f897 123e 	ldrb.w	r1, [r7, #574]	@ 0x23e
 8002744:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002748:	f107 0298 	add.w	r2, r7, #152	@ 0x98
 800274c:	2001      	movs	r0, #1
 800274e:	9000      	str	r0, [sp, #0]
 8002750:	f8d7 01f0 	ldr.w	r0, [r7, #496]	@ 0x1f0
 8002754:	f001 f874 	bl	8003840 <config_PWM_bits>

	config_PWM_bits(sideBEvenCells, sideBEvenCount, sideB_payloadRegisterPWM_evenCells, cellVoltages, SIDE_B);
 8002758:	f897 123d 	ldrb.w	r1, [r7, #573]	@ 0x23d
 800275c:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002760:	f107 02a0 	add.w	r2, r7, #160	@ 0xa0
 8002764:	2000      	movs	r0, #0
 8002766:	9000      	str	r0, [sp, #0]
 8002768:	f8d7 01e8 	ldr.w	r0, [r7, #488]	@ 0x1e8
 800276c:	f001 f868 	bl	8003840 <config_PWM_bits>
	config_PWM_bits(sideBOddCells, sideBOddCount, sideB_payloadRegisterPWM_oddCells, cellVoltages, SIDE_B);
 8002770:	f897 123c 	ldrb.w	r1, [r7, #572]	@ 0x23c
 8002774:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002778:	f107 0290 	add.w	r2, r7, #144	@ 0x90
 800277c:	2000      	movs	r0, #0
 800277e:	9000      	str	r0, [sp, #0]
 8002780:	f8d7 01e0 	ldr.w	r0, [r7, #480]	@ 0x1e0
 8002784:	f001 f85c 	bl	8003840 <config_PWM_bits>

	force_unmute();
 8002788:	f006 f8f5 	bl	8008976 <force_unmute>
	wait(1);
 800278c:	2001      	movs	r0, #1
 800278e:	f006 fd53 	bl	8009238 <wait>

	if(evenCellsFlag) {
 8002792:	f897 3247 	ldrb.w	r3, [r7, #583]	@ 0x247
 8002796:	2b00      	cmp	r3, #0
 8002798:	f000 8160 	beq.w	8002a5c <balance_cycle+0xa68>
		uint8_t attempts = 0;
 800279c:	2300      	movs	r3, #0
 800279e:	f887 3222 	strb.w	r3, [r7, #546]	@ 0x222
		uint8_t subAttempts = 0;
 80027a2:	2300      	movs	r3, #0
 80027a4:	f887 3221 	strb.w	r3, [r7, #545]	@ 0x221
		uint8_t sideB_receptionRegisterPWM[8];

		uint8_t sideA_receptionRegisterPWM_PECflag;
		uint8_t sideB_receptionRegisterPWM_PECflag;

		while(attempts < ATTEMPT_LIMIT) {
 80027a8:	e097      	b.n	80028da <balance_cycle+0x8e6>
			while(subAttempts < ATTEMPT_LIMIT) {
				WRPWM(sideA_payloadRegisterPWM_evenCells, SIDE_A);
 80027aa:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 80027ae:	2101      	movs	r1, #1
 80027b0:	4618      	mov	r0, r3
 80027b2:	f005 fb85 	bl	8007ec0 <WRPWM>
				WRPWM(sideB_payloadRegisterPWM_evenCells, SIDE_B);
 80027b6:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 80027ba:	2100      	movs	r1, #0
 80027bc:	4618      	mov	r0, r3
 80027be:	f005 fb7f 	bl	8007ec0 <WRPWM>
				wait(1);
 80027c2:	2001      	movs	r0, #1
 80027c4:	f006 fd38 	bl	8009238 <wait>

				RDPWM(sideA_receptionRegisterPWM, SIDE_A);
 80027c8:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 80027cc:	2101      	movs	r1, #1
 80027ce:	4618      	mov	r0, r3
 80027d0:	f005 fd90 	bl	80082f4 <RDPWM>
				RDPWM(sideB_receptionRegisterPWM, SIDE_B);
 80027d4:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 80027d8:	2100      	movs	r1, #0
 80027da:	4618      	mov	r0, r3
 80027dc:	f005 fd8a 	bl	80082f4 <RDPWM>
				wait(1);
 80027e0:	2001      	movs	r0, #1
 80027e2:	f006 fd29 	bl	8009238 <wait>

				sideA_receptionRegisterPWM_PECflag = verify_PEC15(sideA_receptionRegisterPWM);
 80027e6:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 80027ea:	4618      	mov	r0, r3
 80027ec:	f005 fa29 	bl	8007c42 <verify_PEC15>
 80027f0:	4603      	mov	r3, r0
 80027f2:	f887 31d5 	strb.w	r3, [r7, #469]	@ 0x1d5
				sideB_receptionRegisterPWM_PECflag = verify_PEC15(sideB_receptionRegisterPWM);
 80027f6:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 80027fa:	4618      	mov	r0, r3
 80027fc:	f005 fa21 	bl	8007c42 <verify_PEC15>
 8002800:	4603      	mov	r3, r0
 8002802:	f887 31d4 	strb.w	r3, [r7, #468]	@ 0x1d4

				if(sideA_receptionRegisterPWM_PECflag == 2 &&
 8002806:	f897 31d5 	ldrb.w	r3, [r7, #469]	@ 0x1d5
 800280a:	2b02      	cmp	r3, #2
 800280c:	d107      	bne.n	800281e <balance_cycle+0x82a>
 800280e:	f897 31d4 	ldrb.w	r3, [r7, #468]	@ 0x1d4
 8002812:	2b02      	cmp	r3, #2
 8002814:	d103      	bne.n	800281e <balance_cycle+0x82a>
				   sideB_receptionRegisterPWM_PECflag == 2)
				{
					subAttempts = 13;
 8002816:	230d      	movs	r3, #13
 8002818:	f887 3221 	strb.w	r3, [r7, #545]	@ 0x221
 800281c:	e007      	b.n	800282e <balance_cycle+0x83a>
				}
				else {
					subAttempts++;
 800281e:	f897 3221 	ldrb.w	r3, [r7, #545]	@ 0x221
 8002822:	3301      	adds	r3, #1
 8002824:	f887 3221 	strb.w	r3, [r7, #545]	@ 0x221
					wait(1);
 8002828:	2001      	movs	r0, #1
 800282a:	f006 fd05 	bl	8009238 <wait>
			while(subAttempts < ATTEMPT_LIMIT) {
 800282e:	f897 3221 	ldrb.w	r3, [r7, #545]	@ 0x221
 8002832:	2b09      	cmp	r3, #9
 8002834:	d9b9      	bls.n	80027aa <balance_cycle+0x7b6>
				}
			}
			if(subAttempts != 13) { error_loop(ERROR_PEC, 0, 0); }
 8002836:	f897 3221 	ldrb.w	r3, [r7, #545]	@ 0x221
 800283a:	2b0d      	cmp	r3, #13
 800283c:	d004      	beq.n	8002848 <balance_cycle+0x854>
 800283e:	2200      	movs	r2, #0
 8002840:	2100      	movs	r1, #0
 8002842:	2056      	movs	r0, #86	@ 0x56
 8002844:	f001 ff0e 	bl	8004664 <error_loop>

			uint8_t matchFlag = 1;
 8002848:	2301      	movs	r3, #1
 800284a:	f887 3220 	strb.w	r3, [r7, #544]	@ 0x220

			for(uint8_t i = 0; i < 6; i++) {
 800284e:	2300      	movs	r3, #0
 8002850:	f887 321f 	strb.w	r3, [r7, #543]	@ 0x21f
 8002854:	e027      	b.n	80028a6 <balance_cycle+0x8b2>
				if(sideA_receptionRegisterPWM[i] != sideA_payloadRegisterPWM_evenCells[i] || sideB_receptionRegisterPWM[i] != sideB_payloadRegisterPWM_evenCells[i]) {
 8002856:	f897 321f 	ldrb.w	r3, [r7, #543]	@ 0x21f
 800285a:	f507 7212 	add.w	r2, r7, #584	@ 0x248
 800285e:	f5a2 72e0 	sub.w	r2, r2, #448	@ 0x1c0
 8002862:	5cd2      	ldrb	r2, [r2, r3]
 8002864:	f897 321f 	ldrb.w	r3, [r7, #543]	@ 0x21f
 8002868:	f507 7112 	add.w	r1, r7, #584	@ 0x248
 800286c:	f5a1 71d0 	sub.w	r1, r1, #416	@ 0x1a0
 8002870:	5ccb      	ldrb	r3, [r1, r3]
 8002872:	429a      	cmp	r2, r3
 8002874:	d10f      	bne.n	8002896 <balance_cycle+0x8a2>
 8002876:	f897 321f 	ldrb.w	r3, [r7, #543]	@ 0x21f
 800287a:	f507 7212 	add.w	r2, r7, #584	@ 0x248
 800287e:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8002882:	5cd2      	ldrb	r2, [r2, r3]
 8002884:	f897 321f 	ldrb.w	r3, [r7, #543]	@ 0x21f
 8002888:	f507 7112 	add.w	r1, r7, #584	@ 0x248
 800288c:	f5a1 71d4 	sub.w	r1, r1, #424	@ 0x1a8
 8002890:	5ccb      	ldrb	r3, [r1, r3]
 8002892:	429a      	cmp	r2, r3
 8002894:	d002      	beq.n	800289c <balance_cycle+0x8a8>
					matchFlag = 0;
 8002896:	2300      	movs	r3, #0
 8002898:	f887 3220 	strb.w	r3, [r7, #544]	@ 0x220
			for(uint8_t i = 0; i < 6; i++) {
 800289c:	f897 321f 	ldrb.w	r3, [r7, #543]	@ 0x21f
 80028a0:	3301      	adds	r3, #1
 80028a2:	f887 321f 	strb.w	r3, [r7, #543]	@ 0x21f
 80028a6:	f897 321f 	ldrb.w	r3, [r7, #543]	@ 0x21f
 80028aa:	2b05      	cmp	r3, #5
 80028ac:	d9d3      	bls.n	8002856 <balance_cycle+0x862>
				}
			}
			if(matchFlag) { attempts = 13; }
 80028ae:	f897 3220 	ldrb.w	r3, [r7, #544]	@ 0x220
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d006      	beq.n	80028c4 <balance_cycle+0x8d0>
 80028b6:	230d      	movs	r3, #13
 80028b8:	f887 3222 	strb.w	r3, [r7, #546]	@ 0x222
 80028bc:	e00d      	b.n	80028da <balance_cycle+0x8e6>
 80028be:	bf00      	nop
 80028c0:	42c80000 	.word	0x42c80000

			else {
				attempts++;
 80028c4:	f897 3222 	ldrb.w	r3, [r7, #546]	@ 0x222
 80028c8:	3301      	adds	r3, #1
 80028ca:	f887 3222 	strb.w	r3, [r7, #546]	@ 0x222
				subAttempts = 0;
 80028ce:	2300      	movs	r3, #0
 80028d0:	f887 3221 	strb.w	r3, [r7, #545]	@ 0x221
				wait(1);
 80028d4:	2001      	movs	r0, #1
 80028d6:	f006 fcaf 	bl	8009238 <wait>
		while(attempts < ATTEMPT_LIMIT) {
 80028da:	f897 3222 	ldrb.w	r3, [r7, #546]	@ 0x222
 80028de:	2b09      	cmp	r3, #9
 80028e0:	d9a5      	bls.n	800282e <balance_cycle+0x83a>
			}
		}
		if(attempts != 13) { error_loop(ERROR_PWM_SETUP, 0, 0); }
 80028e2:	f897 3222 	ldrb.w	r3, [r7, #546]	@ 0x222
 80028e6:	2b0d      	cmp	r3, #13
 80028e8:	d004      	beq.n	80028f4 <balance_cycle+0x900>
 80028ea:	2200      	movs	r2, #0
 80028ec:	2100      	movs	r1, #0
 80028ee:	2054      	movs	r0, #84	@ 0x54
 80028f0:	f001 feb8 	bl	8004664 <error_loop>
		uint8_t sideB_receptionRegisterCFGA[8];

		uint8_t sideA_receptionRegisterCFGA_PECflag;
		uint8_t sideB_receptionRegisterCFGA_PECflag;

		attempts = 0;
 80028f4:	2300      	movs	r3, #0
 80028f6:	f887 3222 	strb.w	r3, [r7, #546]	@ 0x222
		subAttempts = 0;
 80028fa:	2300      	movs	r3, #0
 80028fc:	f887 3221 	strb.w	r3, [r7, #545]	@ 0x221
		while(attempts < ATTEMPT_LIMIT) {
 8002900:	e094      	b.n	8002a2c <balance_cycle+0xa38>
			while(subAttempts < ATTEMPT_LIMIT) {
				WRCFGA(sideA_payloadRegisterA_evenCells, SIDE_A);
 8002902:	f107 03c8 	add.w	r3, r7, #200	@ 0xc8
 8002906:	2101      	movs	r1, #1
 8002908:	4618      	mov	r0, r3
 800290a:	f005 fa93 	bl	8007e34 <WRCFGA>
				WRCFGA(sideB_payloadRegisterA_evenCells, SIDE_B);
 800290e:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 8002912:	2100      	movs	r1, #0
 8002914:	4618      	mov	r0, r3
 8002916:	f005 fa8d 	bl	8007e34 <WRCFGA>
				wait(1);
 800291a:	2001      	movs	r0, #1
 800291c:	f006 fc8c 	bl	8009238 <wait>

				RDCFGA(sideA_receptionRegisterCFGA, SIDE_A);
 8002920:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8002924:	2101      	movs	r1, #1
 8002926:	4618      	mov	r0, r3
 8002928:	f005 fb10 	bl	8007f4c <RDCFGA>
				RDCFGA(sideB_receptionRegisterCFGA, SIDE_B);
 800292c:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8002930:	2100      	movs	r1, #0
 8002932:	4618      	mov	r0, r3
 8002934:	f005 fb0a 	bl	8007f4c <RDCFGA>
				wait(1);
 8002938:	2001      	movs	r0, #1
 800293a:	f006 fc7d 	bl	8009238 <wait>

				sideA_receptionRegisterCFGA_PECflag = verify_PEC15(sideA_receptionRegisterCFGA);
 800293e:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8002942:	4618      	mov	r0, r3
 8002944:	f005 f97d 	bl	8007c42 <verify_PEC15>
 8002948:	4603      	mov	r3, r0
 800294a:	f887 31d7 	strb.w	r3, [r7, #471]	@ 0x1d7
				sideB_receptionRegisterCFGA_PECflag = verify_PEC15(sideB_receptionRegisterCFGA);
 800294e:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8002952:	4618      	mov	r0, r3
 8002954:	f005 f975 	bl	8007c42 <verify_PEC15>
 8002958:	4603      	mov	r3, r0
 800295a:	f887 31d6 	strb.w	r3, [r7, #470]	@ 0x1d6

				if(sideA_receptionRegisterCFGA_PECflag == 2 &&
 800295e:	f897 31d7 	ldrb.w	r3, [r7, #471]	@ 0x1d7
 8002962:	2b02      	cmp	r3, #2
 8002964:	d107      	bne.n	8002976 <balance_cycle+0x982>
 8002966:	f897 31d6 	ldrb.w	r3, [r7, #470]	@ 0x1d6
 800296a:	2b02      	cmp	r3, #2
 800296c:	d103      	bne.n	8002976 <balance_cycle+0x982>
				   sideB_receptionRegisterCFGA_PECflag == 2)
				{
					subAttempts = 13;
 800296e:	230d      	movs	r3, #13
 8002970:	f887 3221 	strb.w	r3, [r7, #545]	@ 0x221
 8002974:	e007      	b.n	8002986 <balance_cycle+0x992>
				}
				else {
					subAttempts++;
 8002976:	f897 3221 	ldrb.w	r3, [r7, #545]	@ 0x221
 800297a:	3301      	adds	r3, #1
 800297c:	f887 3221 	strb.w	r3, [r7, #545]	@ 0x221
					wait(1);
 8002980:	2001      	movs	r0, #1
 8002982:	f006 fc59 	bl	8009238 <wait>
			while(subAttempts < ATTEMPT_LIMIT) {
 8002986:	f897 3221 	ldrb.w	r3, [r7, #545]	@ 0x221
 800298a:	2b09      	cmp	r3, #9
 800298c:	d9b9      	bls.n	8002902 <balance_cycle+0x90e>
				}
			}
			if(subAttempts != 13) { error_loop(ERROR_PEC, 0, 0); }
 800298e:	f897 3221 	ldrb.w	r3, [r7, #545]	@ 0x221
 8002992:	2b0d      	cmp	r3, #13
 8002994:	d004      	beq.n	80029a0 <balance_cycle+0x9ac>
 8002996:	2200      	movs	r2, #0
 8002998:	2100      	movs	r1, #0
 800299a:	2056      	movs	r0, #86	@ 0x56
 800299c:	f001 fe62 	bl	8004664 <error_loop>

			uint8_t matchFlag = 1;
 80029a0:	2301      	movs	r3, #1
 80029a2:	f887 321e 	strb.w	r3, [r7, #542]	@ 0x21e

			for(uint8_t i = 4; i < 6; i++) {
 80029a6:	2304      	movs	r3, #4
 80029a8:	f887 321d 	strb.w	r3, [r7, #541]	@ 0x21d
 80029ac:	e027      	b.n	80029fe <balance_cycle+0xa0a>
				if(sideA_receptionRegisterCFGA[i] != sideA_payloadRegisterA_evenCells[i] || sideB_receptionRegisterCFGA[i] != sideB_payloadRegisterA_evenCells[i]) {
 80029ae:	f897 321d 	ldrb.w	r3, [r7, #541]	@ 0x21d
 80029b2:	f507 7212 	add.w	r2, r7, #584	@ 0x248
 80029b6:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 80029ba:	5cd2      	ldrb	r2, [r2, r3]
 80029bc:	f897 321d 	ldrb.w	r3, [r7, #541]	@ 0x21d
 80029c0:	f507 7112 	add.w	r1, r7, #584	@ 0x248
 80029c4:	f5a1 71c0 	sub.w	r1, r1, #384	@ 0x180
 80029c8:	5ccb      	ldrb	r3, [r1, r3]
 80029ca:	429a      	cmp	r2, r3
 80029cc:	d10f      	bne.n	80029ee <balance_cycle+0x9fa>
 80029ce:	f897 321d 	ldrb.w	r3, [r7, #541]	@ 0x21d
 80029d2:	f507 7212 	add.w	r2, r7, #584	@ 0x248
 80029d6:	f5a2 72ec 	sub.w	r2, r2, #472	@ 0x1d8
 80029da:	5cd2      	ldrb	r2, [r2, r3]
 80029dc:	f897 321d 	ldrb.w	r3, [r7, #541]	@ 0x21d
 80029e0:	f507 7112 	add.w	r1, r7, #584	@ 0x248
 80029e4:	f5a1 71c4 	sub.w	r1, r1, #392	@ 0x188
 80029e8:	5ccb      	ldrb	r3, [r1, r3]
 80029ea:	429a      	cmp	r2, r3
 80029ec:	d002      	beq.n	80029f4 <balance_cycle+0xa00>
					matchFlag = 0;
 80029ee:	2300      	movs	r3, #0
 80029f0:	f887 321e 	strb.w	r3, [r7, #542]	@ 0x21e
			for(uint8_t i = 4; i < 6; i++) {
 80029f4:	f897 321d 	ldrb.w	r3, [r7, #541]	@ 0x21d
 80029f8:	3301      	adds	r3, #1
 80029fa:	f887 321d 	strb.w	r3, [r7, #541]	@ 0x21d
 80029fe:	f897 321d 	ldrb.w	r3, [r7, #541]	@ 0x21d
 8002a02:	2b05      	cmp	r3, #5
 8002a04:	d9d3      	bls.n	80029ae <balance_cycle+0x9ba>
				}
			}
			if(matchFlag) { attempts = 13; }
 8002a06:	f897 321e 	ldrb.w	r3, [r7, #542]	@ 0x21e
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d003      	beq.n	8002a16 <balance_cycle+0xa22>
 8002a0e:	230d      	movs	r3, #13
 8002a10:	f887 3222 	strb.w	r3, [r7, #546]	@ 0x222
 8002a14:	e00a      	b.n	8002a2c <balance_cycle+0xa38>

			else {
				attempts++;
 8002a16:	f897 3222 	ldrb.w	r3, [r7, #546]	@ 0x222
 8002a1a:	3301      	adds	r3, #1
 8002a1c:	f887 3222 	strb.w	r3, [r7, #546]	@ 0x222
				subAttempts = 0;
 8002a20:	2300      	movs	r3, #0
 8002a22:	f887 3221 	strb.w	r3, [r7, #545]	@ 0x221
				wait(1);
 8002a26:	2001      	movs	r0, #1
 8002a28:	f006 fc06 	bl	8009238 <wait>
		while(attempts < ATTEMPT_LIMIT) {
 8002a2c:	f897 3222 	ldrb.w	r3, [r7, #546]	@ 0x222
 8002a30:	2b09      	cmp	r3, #9
 8002a32:	d9a8      	bls.n	8002986 <balance_cycle+0x992>
			}
		}
		if(attempts != 13) { error_loop(ERROR_BALANCE_INITIATION, 0, 0); }
 8002a34:	f897 3222 	ldrb.w	r3, [r7, #546]	@ 0x222
 8002a38:	2b0d      	cmp	r3, #13
 8002a3a:	d004      	beq.n	8002a46 <balance_cycle+0xa52>
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	2100      	movs	r1, #0
 8002a40:	2055      	movs	r0, #85	@ 0x55
 8002a42:	f001 fe0f 	bl	8004664 <error_loop>

		config_balance_flags(balanceMsg, evenCells, evenCellCount);
 8002a46:	f897 2245 	ldrb.w	r2, [r7, #581]	@ 0x245
 8002a4a:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 8002a4e:	f8d7 1208 	ldr.w	r1, [r7, #520]	@ 0x208
 8002a52:	4618      	mov	r0, r3
 8002a54:	f000 fd00 	bl	8003458 <config_balance_flags>
		balance_led_on();
 8002a58:	f006 fc84 	bl	8009364 <balance_led_on>
		WRCFGA(sideB_payloadRegisterA_evenCells, SIDE_B);
		wait(1);
		*/
	}

	balanceCounter = 0;
 8002a5c:	4bc2      	ldr	r3, [pc, #776]	@ (8002d68 <balance_cycle+0xd74>)
 8002a5e:	2200      	movs	r2, #0
 8002a60:	601a      	str	r2, [r3, #0]
	measureCounter = 0;
 8002a62:	4bc2      	ldr	r3, [pc, #776]	@ (8002d6c <balance_cycle+0xd78>)
 8002a64:	2200      	movs	r2, #0
 8002a66:	601a      	str	r2, [r3, #0]
	transmitCounter = 0;
 8002a68:	4bc1      	ldr	r3, [pc, #772]	@ (8002d70 <balance_cycle+0xd7c>)
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	601a      	str	r2, [r3, #0]
	while(evenCellsFlag) {
 8002a6e:	e114      	b.n	8002c9a <balance_cycle+0xca6>
		if(measureCounter > 100) {
 8002a70:	4bbe      	ldr	r3, [pc, #760]	@ (8002d6c <balance_cycle+0xd78>)
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	2b64      	cmp	r3, #100	@ 0x64
 8002a76:	f240 80e9 	bls.w	8002c4c <balance_cycle+0xc58>
			temperature_sense(moduleTemperatures);
 8002a7a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002a7e:	4618      	mov	r0, r3
 8002a80:	f006 fdf6 	bl	8009670 <temperature_sense>
			resistor_temperature_sense(pcbTemperatures);
 8002a84:	f107 03d8 	add.w	r3, r7, #216	@ 0xd8
 8002a88:	4618      	mov	r0, r3
 8002a8a:	f7fe fe67 	bl	800175c <resistor_temperature_sense>

			maxResistorTemperature = 0;
 8002a8e:	f04f 0300 	mov.w	r3, #0
 8002a92:	f8c7 322c 	str.w	r3, [r7, #556]	@ 0x22c

			for(uint8_t i = 0; i < PCB_THERM_QTY; i++) {
 8002a96:	2300      	movs	r3, #0
 8002a98:	f887 321c 	strb.w	r3, [r7, #540]	@ 0x21c
 8002a9c:	e02f      	b.n	8002afe <balance_cycle+0xb0a>
				if(!isnan(pcbTemperatures[i])) {
 8002a9e:	f897 321c 	ldrb.w	r3, [r7, #540]	@ 0x21c
 8002aa2:	f507 7212 	add.w	r2, r7, #584	@ 0x248
 8002aa6:	f5a2 72b8 	sub.w	r2, r2, #368	@ 0x170
 8002aaa:	009b      	lsls	r3, r3, #2
 8002aac:	4413      	add	r3, r2
 8002aae:	edd3 7a00 	vldr	s15, [r3]
 8002ab2:	eef4 7a67 	vcmp.f32	s15, s15
 8002ab6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002aba:	d61b      	bvs.n	8002af4 <balance_cycle+0xb00>
					if(pcbTemperatures[i] > maxResistorTemperature) {
 8002abc:	f897 321c 	ldrb.w	r3, [r7, #540]	@ 0x21c
 8002ac0:	f507 7212 	add.w	r2, r7, #584	@ 0x248
 8002ac4:	f5a2 72b8 	sub.w	r2, r2, #368	@ 0x170
 8002ac8:	009b      	lsls	r3, r3, #2
 8002aca:	4413      	add	r3, r2
 8002acc:	edd3 7a00 	vldr	s15, [r3]
 8002ad0:	ed97 7a8b 	vldr	s14, [r7, #556]	@ 0x22c
 8002ad4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002ad8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002adc:	d50a      	bpl.n	8002af4 <balance_cycle+0xb00>
						maxResistorTemperature = pcbTemperatures[i];
 8002ade:	f897 321c 	ldrb.w	r3, [r7, #540]	@ 0x21c
 8002ae2:	f507 7212 	add.w	r2, r7, #584	@ 0x248
 8002ae6:	f5a2 72b8 	sub.w	r2, r2, #368	@ 0x170
 8002aea:	009b      	lsls	r3, r3, #2
 8002aec:	4413      	add	r3, r2
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f8c7 322c 	str.w	r3, [r7, #556]	@ 0x22c
			for(uint8_t i = 0; i < PCB_THERM_QTY; i++) {
 8002af4:	f897 321c 	ldrb.w	r3, [r7, #540]	@ 0x21c
 8002af8:	3301      	adds	r3, #1
 8002afa:	f887 321c 	strb.w	r3, [r7, #540]	@ 0x21c
 8002afe:	f897 321c 	ldrb.w	r3, [r7, #540]	@ 0x21c
 8002b02:	2b11      	cmp	r3, #17
 8002b04:	d9cb      	bls.n	8002a9e <balance_cycle+0xaaa>
					}
				}
			}
			intMaxResistorTemperature = (uint16_t)(maxResistorTemperature*tempScale);
 8002b06:	ed97 7a8b 	vldr	s14, [r7, #556]	@ 0x22c
 8002b0a:	edd7 7a77 	vldr	s15, [r7, #476]	@ 0x1dc
 8002b0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b12:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002b16:	ee17 3a90 	vmov	r3, s15
 8002b1a:	f8a7 31ce 	strh.w	r3, [r7, #462]	@ 0x1ce
			balanceMsg[2] = (uint8_t)(intMaxResistorTemperature & 0xFF);
 8002b1e:	f8b7 31ce 	ldrh.w	r3, [r7, #462]	@ 0x1ce
 8002b22:	b2da      	uxtb	r2, r3
 8002b24:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 8002b28:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 8002b2c:	709a      	strb	r2, [r3, #2]
			balanceMsg[3] = (uint8_t)((intMaxResistorTemperature >> 8) & 0xFF);
 8002b2e:	f8b7 31ce 	ldrh.w	r3, [r7, #462]	@ 0x1ce
 8002b32:	0a1b      	lsrs	r3, r3, #8
 8002b34:	b29b      	uxth	r3, r3
 8002b36:	b2da      	uxtb	r2, r3
 8002b38:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 8002b3c:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 8002b40:	70da      	strb	r2, [r3, #3]

			if(maxResistorTemperature > HOT_LED_THRESHOLD) { hot_led_on(); }
 8002b42:	edd7 7a8b 	vldr	s15, [r7, #556]	@ 0x22c
 8002b46:	ed9f 7a8b 	vldr	s14, [pc, #556]	@ 8002d74 <balance_cycle+0xd80>
 8002b4a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002b4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b52:	dd02      	ble.n	8002b5a <balance_cycle+0xb66>
 8002b54:	f006 fc1e 	bl	8009394 <hot_led_on>
 8002b58:	e001      	b.n	8002b5e <balance_cycle+0xb6a>

			else { hot_led_off(); }
 8002b5a:	f006 fc25 	bl	80093a8 <hot_led_off>

			if(maxResistorTemperature > RESISTOR_TEMPERATURE_LIMIT) {
 8002b5e:	edd7 7a8b 	vldr	s15, [r7, #556]	@ 0x22c
 8002b62:	ed9f 7a85 	vldr	s14, [pc, #532]	@ 8002d78 <balance_cycle+0xd84>
 8002b66:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002b6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b6e:	dd04      	ble.n	8002b7a <balance_cycle+0xb86>
				force_refup();
 8002b70:	f005 fdfa 	bl	8008768 <force_refup>
				evenCellsFlag = 0;
 8002b74:	2300      	movs	r3, #0
 8002b76:	f887 3247 	strb.w	r3, [r7, #583]	@ 0x247
			}

			for(uint8_t i = 0; i < MODULE_THERM_QTY; i++) {
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	f887 321b 	strb.w	r3, [r7, #539]	@ 0x21b
 8002b80:	e028      	b.n	8002bd4 <balance_cycle+0xbe0>
				if(moduleTemperatures[i] > MAX_TEMPERATURE) {
 8002b82:	f897 321b 	ldrb.w	r3, [r7, #539]	@ 0x21b
 8002b86:	f507 7212 	add.w	r2, r7, #584	@ 0x248
 8002b8a:	f5a2 7294 	sub.w	r2, r2, #296	@ 0x128
 8002b8e:	009b      	lsls	r3, r3, #2
 8002b90:	4413      	add	r3, r2
 8002b92:	edd3 7a00 	vldr	s15, [r3]
 8002b96:	ed9f 7a79 	vldr	s14, [pc, #484]	@ 8002d7c <balance_cycle+0xd88>
 8002b9a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002b9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ba2:	dd12      	ble.n	8002bca <balance_cycle+0xbd6>
					overheatFlag = 1;
 8002ba4:	2301      	movs	r3, #1
 8002ba6:	f887 322b 	strb.w	r3, [r7, #555]	@ 0x22b
					faultingThermistorIndex = i + 1;
 8002baa:	f897 321b 	ldrb.w	r3, [r7, #539]	@ 0x21b
 8002bae:	3301      	adds	r3, #1
 8002bb0:	f887 3229 	strb.w	r3, [r7, #553]	@ 0x229
					faultingTemperature = moduleTemperatures[i];
 8002bb4:	f897 321b 	ldrb.w	r3, [r7, #539]	@ 0x21b
 8002bb8:	f507 7212 	add.w	r2, r7, #584	@ 0x248
 8002bbc:	f5a2 7294 	sub.w	r2, r2, #296	@ 0x128
 8002bc0:	009b      	lsls	r3, r3, #2
 8002bc2:	4413      	add	r3, r2
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f8c7 3224 	str.w	r3, [r7, #548]	@ 0x224
			for(uint8_t i = 0; i < MODULE_THERM_QTY; i++) {
 8002bca:	f897 321b 	ldrb.w	r3, [r7, #539]	@ 0x21b
 8002bce:	3301      	adds	r3, #1
 8002bd0:	f887 321b 	strb.w	r3, [r7, #539]	@ 0x21b
 8002bd4:	f897 321b 	ldrb.w	r3, [r7, #539]	@ 0x21b
 8002bd8:	2b11      	cmp	r3, #17
 8002bda:	d9d2      	bls.n	8002b82 <balance_cycle+0xb8e>
				}
			}
			if(overheatFlag) { overheatCount++; }
 8002bdc:	f897 322b 	ldrb.w	r3, [r7, #555]	@ 0x22b
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d005      	beq.n	8002bf0 <balance_cycle+0xbfc>
 8002be4:	f897 322a 	ldrb.w	r3, [r7, #554]	@ 0x22a
 8002be8:	3301      	adds	r3, #1
 8002bea:	f887 322a 	strb.w	r3, [r7, #554]	@ 0x22a
 8002bee:	e008      	b.n	8002c02 <balance_cycle+0xc0e>

			else {
				if(overheatCount > 0) {
 8002bf0:	f897 322a 	ldrb.w	r3, [r7, #554]	@ 0x22a
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d004      	beq.n	8002c02 <balance_cycle+0xc0e>
					overheatCount--;
 8002bf8:	f897 322a 	ldrb.w	r3, [r7, #554]	@ 0x22a
 8002bfc:	3b01      	subs	r3, #1
 8002bfe:	f887 322a 	strb.w	r3, [r7, #554]	@ 0x22a
				}
			}
			// MODULE OVERHEAT FAULT
			if(overheatCount > ATTEMPT_LIMIT) {
 8002c02:	f897 322a 	ldrb.w	r3, [r7, #554]	@ 0x22a
 8002c06:	2b0a      	cmp	r3, #10
 8002c08:	d91d      	bls.n	8002c46 <balance_cycle+0xc52>
				float tempScale = 1000.0f;
 8002c0a:	4b5d      	ldr	r3, [pc, #372]	@ (8002d80 <balance_cycle+0xd8c>)
 8002c0c:	f8c7 31b8 	str.w	r3, [r7, #440]	@ 0x1b8
				uint16_t intFaultingTemperature = (uint16_t)(faultingTemperature * tempScale);
 8002c10:	ed97 7a89 	vldr	s14, [r7, #548]	@ 0x224
 8002c14:	edd7 7a6e 	vldr	s15, [r7, #440]	@ 0x1b8
 8002c18:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c1c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002c20:	ee17 3a90 	vmov	r3, s15
 8002c24:	f8a7 31b6 	strh.w	r3, [r7, #438]	@ 0x1b6

				force_mute();
 8002c28:	f005 fe2f 	bl	800888a <force_mute>
				wait(1);
 8002c2c:	2001      	movs	r0, #1
 8002c2e:	f006 fb03 	bl	8009238 <wait>
				force_refup();
 8002c32:	f005 fd99 	bl	8008768 <force_refup>

				error_loop(ERROR_OVERHEAT, intFaultingTemperature, faultingThermistorIndex);
 8002c36:	f897 2229 	ldrb.w	r2, [r7, #553]	@ 0x229
 8002c3a:	f8b7 31b6 	ldrh.w	r3, [r7, #438]	@ 0x1b6
 8002c3e:	4619      	mov	r1, r3
 8002c40:	2045      	movs	r0, #69	@ 0x45
 8002c42:	f001 fd0f 	bl	8004664 <error_loop>
			}

			measureCounter = 0;
 8002c46:	4b49      	ldr	r3, [pc, #292]	@ (8002d6c <balance_cycle+0xd78>)
 8002c48:	2200      	movs	r2, #0
 8002c4a:	601a      	str	r2, [r3, #0]
		}

		if(transmitCounter > transmissionDelay) {
 8002c4c:	4b4d      	ldr	r3, [pc, #308]	@ (8002d84 <balance_cycle+0xd90>)
 8002c4e:	881b      	ldrh	r3, [r3, #0]
 8002c50:	461a      	mov	r2, r3
 8002c52:	4b47      	ldr	r3, [pc, #284]	@ (8002d70 <balance_cycle+0xd7c>)
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	429a      	cmp	r2, r3
 8002c58:	d211      	bcs.n	8002c7e <balance_cycle+0xc8a>
			transmit_balance(balanceMsg);
 8002c5a:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 8002c5e:	4618      	mov	r0, r3
 8002c60:	f001 fdde 	bl	8004820 <transmit_balance>
			transmit_voltages(cellVoltages);
 8002c64:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002c68:	4618      	mov	r0, r3
 8002c6a:	f001 fea7 	bl	80049bc <transmit_voltages>
			transmit_temperatures(moduleTemperatures);
 8002c6e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002c72:	4618      	mov	r0, r3
 8002c74:	f002 f872 	bl	8004d5c <transmit_temperatures>

			transmitCounter = 0;
 8002c78:	4b3d      	ldr	r3, [pc, #244]	@ (8002d70 <balance_cycle+0xd7c>)
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	601a      	str	r2, [r3, #0]
		}

		if(balanceCounter > 60000) {
 8002c7e:	4b3a      	ldr	r3, [pc, #232]	@ (8002d68 <balance_cycle+0xd74>)
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f64e 2260 	movw	r2, #60000	@ 0xea60
 8002c86:	4293      	cmp	r3, r2
 8002c88:	d904      	bls.n	8002c94 <balance_cycle+0xca0>
			force_refup();
 8002c8a:	f005 fd6d 	bl	8008768 <force_refup>
			evenCellsFlag = 0;
 8002c8e:	2300      	movs	r3, #0
 8002c90:	f887 3247 	strb.w	r3, [r7, #583]	@ 0x247
		}

		wait(1);
 8002c94:	2001      	movs	r0, #1
 8002c96:	f006 facf 	bl	8009238 <wait>
	while(evenCellsFlag) {
 8002c9a:	f897 3247 	ldrb.w	r3, [r7, #583]	@ 0x247
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	f47f aee6 	bne.w	8002a70 <balance_cycle+0xa7c>
	}

	if(oddCellsFlag) {
 8002ca4:	f897 3246 	ldrb.w	r3, [r7, #582]	@ 0x246
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	f000 816d 	beq.w	8002f88 <balance_cycle+0xf94>
		uint8_t attempts = 0;
 8002cae:	2300      	movs	r3, #0
 8002cb0:	f887 321a 	strb.w	r3, [r7, #538]	@ 0x21a
		uint8_t subAttempts = 0;
 8002cb4:	2300      	movs	r3, #0
 8002cb6:	f887 3219 	strb.w	r3, [r7, #537]	@ 0x219
		uint8_t sideB_receptionRegisterPWM[8];

		uint8_t sideA_receptionRegisterPWM_PECflag;
		uint8_t sideB_receptionRegisterPWM_PECflag;

		while(attempts < ATTEMPT_LIMIT) {
 8002cba:	e0a4      	b.n	8002e06 <balance_cycle+0xe12>
			while(subAttempts < ATTEMPT_LIMIT) {
				WRPWM(sideA_payloadRegisterPWM_oddCells, SIDE_A);
 8002cbc:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 8002cc0:	2101      	movs	r1, #1
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	f005 f8fc 	bl	8007ec0 <WRPWM>
				WRPWM(sideB_payloadRegisterPWM_oddCells, SIDE_B);
 8002cc8:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 8002ccc:	2100      	movs	r1, #0
 8002cce:	4618      	mov	r0, r3
 8002cd0:	f005 f8f6 	bl	8007ec0 <WRPWM>
				wait(1);
 8002cd4:	2001      	movs	r0, #1
 8002cd6:	f006 faaf 	bl	8009238 <wait>

				RDPWM(sideA_receptionRegisterPWM, SIDE_A);
 8002cda:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8002cde:	2101      	movs	r1, #1
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	f005 fb07 	bl	80082f4 <RDPWM>
				RDPWM(sideB_receptionRegisterPWM, SIDE_B);
 8002ce6:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8002cea:	2100      	movs	r1, #0
 8002cec:	4618      	mov	r0, r3
 8002cee:	f005 fb01 	bl	80082f4 <RDPWM>
				wait(1);
 8002cf2:	2001      	movs	r0, #1
 8002cf4:	f006 faa0 	bl	8009238 <wait>

				sideA_receptionRegisterPWM_PECflag = verify_PEC15(sideA_receptionRegisterPWM);
 8002cf8:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	f004 ffa0 	bl	8007c42 <verify_PEC15>
 8002d02:	4603      	mov	r3, r0
 8002d04:	f887 31d1 	strb.w	r3, [r7, #465]	@ 0x1d1
				sideB_receptionRegisterPWM_PECflag = verify_PEC15(sideB_receptionRegisterPWM);
 8002d08:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	f004 ff98 	bl	8007c42 <verify_PEC15>
 8002d12:	4603      	mov	r3, r0
 8002d14:	f887 31d0 	strb.w	r3, [r7, #464]	@ 0x1d0

				if(sideA_receptionRegisterPWM_PECflag == 2 &&
 8002d18:	f897 31d1 	ldrb.w	r3, [r7, #465]	@ 0x1d1
 8002d1c:	2b02      	cmp	r3, #2
 8002d1e:	d107      	bne.n	8002d30 <balance_cycle+0xd3c>
 8002d20:	f897 31d0 	ldrb.w	r3, [r7, #464]	@ 0x1d0
 8002d24:	2b02      	cmp	r3, #2
 8002d26:	d103      	bne.n	8002d30 <balance_cycle+0xd3c>
				   sideB_receptionRegisterPWM_PECflag == 2)
				{
					subAttempts = 13;
 8002d28:	230d      	movs	r3, #13
 8002d2a:	f887 3219 	strb.w	r3, [r7, #537]	@ 0x219
 8002d2e:	e007      	b.n	8002d40 <balance_cycle+0xd4c>
				}
				else {
					subAttempts++;
 8002d30:	f897 3219 	ldrb.w	r3, [r7, #537]	@ 0x219
 8002d34:	3301      	adds	r3, #1
 8002d36:	f887 3219 	strb.w	r3, [r7, #537]	@ 0x219
					wait(1);
 8002d3a:	2001      	movs	r0, #1
 8002d3c:	f006 fa7c 	bl	8009238 <wait>
			while(subAttempts < ATTEMPT_LIMIT) {
 8002d40:	f897 3219 	ldrb.w	r3, [r7, #537]	@ 0x219
 8002d44:	2b09      	cmp	r3, #9
 8002d46:	d9b9      	bls.n	8002cbc <balance_cycle+0xcc8>
				}
			}
			if(subAttempts != 13) { error_loop(ERROR_PEC, 0, 0); }
 8002d48:	f897 3219 	ldrb.w	r3, [r7, #537]	@ 0x219
 8002d4c:	2b0d      	cmp	r3, #13
 8002d4e:	d004      	beq.n	8002d5a <balance_cycle+0xd66>
 8002d50:	2200      	movs	r2, #0
 8002d52:	2100      	movs	r1, #0
 8002d54:	2056      	movs	r0, #86	@ 0x56
 8002d56:	f001 fc85 	bl	8004664 <error_loop>

			uint8_t matchFlag = 1;
 8002d5a:	2301      	movs	r3, #1
 8002d5c:	f887 3218 	strb.w	r3, [r7, #536]	@ 0x218

			for(uint8_t i = 0; i < 6; i++) {
 8002d60:	2300      	movs	r3, #0
 8002d62:	f887 3217 	strb.w	r3, [r7, #535]	@ 0x217
 8002d66:	e037      	b.n	8002dd8 <balance_cycle+0xde4>
 8002d68:	200003f0 	.word	0x200003f0
 8002d6c:	200003ec 	.word	0x200003ec
 8002d70:	200003e8 	.word	0x200003e8
 8002d74:	42340000 	.word	0x42340000
 8002d78:	42e60000 	.word	0x42e60000
 8002d7c:	42700000 	.word	0x42700000
 8002d80:	447a0000 	.word	0x447a0000
 8002d84:	200003e4 	.word	0x200003e4
				if(sideA_receptionRegisterPWM[i] != sideA_payloadRegisterPWM_oddCells[i] || sideB_receptionRegisterPWM[i] != sideB_payloadRegisterPWM_oddCells[i]) {
 8002d88:	f897 3217 	ldrb.w	r3, [r7, #535]	@ 0x217
 8002d8c:	f507 7212 	add.w	r2, r7, #584	@ 0x248
 8002d90:	f5a2 72f0 	sub.w	r2, r2, #480	@ 0x1e0
 8002d94:	5cd2      	ldrb	r2, [r2, r3]
 8002d96:	f897 3217 	ldrb.w	r3, [r7, #535]	@ 0x217
 8002d9a:	f507 7112 	add.w	r1, r7, #584	@ 0x248
 8002d9e:	f5a1 71d8 	sub.w	r1, r1, #432	@ 0x1b0
 8002da2:	5ccb      	ldrb	r3, [r1, r3]
 8002da4:	429a      	cmp	r2, r3
 8002da6:	d10f      	bne.n	8002dc8 <balance_cycle+0xdd4>
 8002da8:	f897 3217 	ldrb.w	r3, [r7, #535]	@ 0x217
 8002dac:	f507 7212 	add.w	r2, r7, #584	@ 0x248
 8002db0:	f5a2 72f4 	sub.w	r2, r2, #488	@ 0x1e8
 8002db4:	5cd2      	ldrb	r2, [r2, r3]
 8002db6:	f897 3217 	ldrb.w	r3, [r7, #535]	@ 0x217
 8002dba:	f507 7112 	add.w	r1, r7, #584	@ 0x248
 8002dbe:	f5a1 71dc 	sub.w	r1, r1, #440	@ 0x1b8
 8002dc2:	5ccb      	ldrb	r3, [r1, r3]
 8002dc4:	429a      	cmp	r2, r3
 8002dc6:	d002      	beq.n	8002dce <balance_cycle+0xdda>
					matchFlag = 0;
 8002dc8:	2300      	movs	r3, #0
 8002dca:	f887 3218 	strb.w	r3, [r7, #536]	@ 0x218
			for(uint8_t i = 0; i < 6; i++) {
 8002dce:	f897 3217 	ldrb.w	r3, [r7, #535]	@ 0x217
 8002dd2:	3301      	adds	r3, #1
 8002dd4:	f887 3217 	strb.w	r3, [r7, #535]	@ 0x217
 8002dd8:	f897 3217 	ldrb.w	r3, [r7, #535]	@ 0x217
 8002ddc:	2b05      	cmp	r3, #5
 8002dde:	d9d3      	bls.n	8002d88 <balance_cycle+0xd94>
				}
			}
			if(matchFlag) { attempts = 13; }
 8002de0:	f897 3218 	ldrb.w	r3, [r7, #536]	@ 0x218
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d003      	beq.n	8002df0 <balance_cycle+0xdfc>
 8002de8:	230d      	movs	r3, #13
 8002dea:	f887 321a 	strb.w	r3, [r7, #538]	@ 0x21a
 8002dee:	e00a      	b.n	8002e06 <balance_cycle+0xe12>

			else {
				attempts++;
 8002df0:	f897 321a 	ldrb.w	r3, [r7, #538]	@ 0x21a
 8002df4:	3301      	adds	r3, #1
 8002df6:	f887 321a 	strb.w	r3, [r7, #538]	@ 0x21a
				subAttempts = 0;
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	f887 3219 	strb.w	r3, [r7, #537]	@ 0x219
				wait(1);
 8002e00:	2001      	movs	r0, #1
 8002e02:	f006 fa19 	bl	8009238 <wait>
		while(attempts < ATTEMPT_LIMIT) {
 8002e06:	f897 321a 	ldrb.w	r3, [r7, #538]	@ 0x21a
 8002e0a:	2b09      	cmp	r3, #9
 8002e0c:	d998      	bls.n	8002d40 <balance_cycle+0xd4c>
			}
		}
		if(attempts != 13) { error_loop(ERROR_PWM_SETUP, 0, 0); }
 8002e0e:	f897 321a 	ldrb.w	r3, [r7, #538]	@ 0x21a
 8002e12:	2b0d      	cmp	r3, #13
 8002e14:	d004      	beq.n	8002e20 <balance_cycle+0xe2c>
 8002e16:	2200      	movs	r2, #0
 8002e18:	2100      	movs	r1, #0
 8002e1a:	2054      	movs	r0, #84	@ 0x54
 8002e1c:	f001 fc22 	bl	8004664 <error_loop>
		uint8_t sideB_receptionRegisterCFGA[8];

		uint8_t sideA_receptionRegisterCFGA_PECflag;
		uint8_t sideB_receptionRegisterCFGA_PECflag;

		attempts = 0;
 8002e20:	2300      	movs	r3, #0
 8002e22:	f887 321a 	strb.w	r3, [r7, #538]	@ 0x21a
		subAttempts = 0;
 8002e26:	2300      	movs	r3, #0
 8002e28:	f887 3219 	strb.w	r3, [r7, #537]	@ 0x219
		while(attempts < ATTEMPT_LIMIT) {
 8002e2c:	e094      	b.n	8002f58 <balance_cycle+0xf64>
			while(subAttempts < ATTEMPT_LIMIT) {
				WRCFGA(sideA_payloadRegisterA_oddCells, SIDE_A);
 8002e2e:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 8002e32:	2101      	movs	r1, #1
 8002e34:	4618      	mov	r0, r3
 8002e36:	f004 fffd 	bl	8007e34 <WRCFGA>
				WRCFGA(sideB_payloadRegisterA_oddCells, SIDE_B);
 8002e3a:	f107 03b0 	add.w	r3, r7, #176	@ 0xb0
 8002e3e:	2100      	movs	r1, #0
 8002e40:	4618      	mov	r0, r3
 8002e42:	f004 fff7 	bl	8007e34 <WRCFGA>
				wait(1);
 8002e46:	2001      	movs	r0, #1
 8002e48:	f006 f9f6 	bl	8009238 <wait>

				RDCFGA(sideA_receptionRegisterCFGA, SIDE_A);
 8002e4c:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8002e50:	2101      	movs	r1, #1
 8002e52:	4618      	mov	r0, r3
 8002e54:	f005 f87a 	bl	8007f4c <RDCFGA>
				RDCFGA(sideB_receptionRegisterCFGA, SIDE_B);
 8002e58:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8002e5c:	2100      	movs	r1, #0
 8002e5e:	4618      	mov	r0, r3
 8002e60:	f005 f874 	bl	8007f4c <RDCFGA>
				wait(1);
 8002e64:	2001      	movs	r0, #1
 8002e66:	f006 f9e7 	bl	8009238 <wait>

				sideA_receptionRegisterCFGA_PECflag = verify_PEC15(sideA_receptionRegisterCFGA);
 8002e6a:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8002e6e:	4618      	mov	r0, r3
 8002e70:	f004 fee7 	bl	8007c42 <verify_PEC15>
 8002e74:	4603      	mov	r3, r0
 8002e76:	f887 31d3 	strb.w	r3, [r7, #467]	@ 0x1d3
				sideB_receptionRegisterCFGA_PECflag = verify_PEC15(sideB_receptionRegisterCFGA);
 8002e7a:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8002e7e:	4618      	mov	r0, r3
 8002e80:	f004 fedf 	bl	8007c42 <verify_PEC15>
 8002e84:	4603      	mov	r3, r0
 8002e86:	f887 31d2 	strb.w	r3, [r7, #466]	@ 0x1d2

				if(sideA_receptionRegisterCFGA_PECflag == 2 &&
 8002e8a:	f897 31d3 	ldrb.w	r3, [r7, #467]	@ 0x1d3
 8002e8e:	2b02      	cmp	r3, #2
 8002e90:	d107      	bne.n	8002ea2 <balance_cycle+0xeae>
 8002e92:	f897 31d2 	ldrb.w	r3, [r7, #466]	@ 0x1d2
 8002e96:	2b02      	cmp	r3, #2
 8002e98:	d103      	bne.n	8002ea2 <balance_cycle+0xeae>
				   sideB_receptionRegisterCFGA_PECflag == 2)
				{
					subAttempts = 13;
 8002e9a:	230d      	movs	r3, #13
 8002e9c:	f887 3219 	strb.w	r3, [r7, #537]	@ 0x219
 8002ea0:	e007      	b.n	8002eb2 <balance_cycle+0xebe>
				}
				else {
					subAttempts++;
 8002ea2:	f897 3219 	ldrb.w	r3, [r7, #537]	@ 0x219
 8002ea6:	3301      	adds	r3, #1
 8002ea8:	f887 3219 	strb.w	r3, [r7, #537]	@ 0x219
					wait(1);
 8002eac:	2001      	movs	r0, #1
 8002eae:	f006 f9c3 	bl	8009238 <wait>
			while(subAttempts < ATTEMPT_LIMIT) {
 8002eb2:	f897 3219 	ldrb.w	r3, [r7, #537]	@ 0x219
 8002eb6:	2b09      	cmp	r3, #9
 8002eb8:	d9b9      	bls.n	8002e2e <balance_cycle+0xe3a>
				}
			}
			if(subAttempts != 13) { error_loop(ERROR_PEC, 0, 0); }
 8002eba:	f897 3219 	ldrb.w	r3, [r7, #537]	@ 0x219
 8002ebe:	2b0d      	cmp	r3, #13
 8002ec0:	d004      	beq.n	8002ecc <balance_cycle+0xed8>
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	2100      	movs	r1, #0
 8002ec6:	2056      	movs	r0, #86	@ 0x56
 8002ec8:	f001 fbcc 	bl	8004664 <error_loop>

			uint8_t matchFlag = 1;
 8002ecc:	2301      	movs	r3, #1
 8002ece:	f887 3216 	strb.w	r3, [r7, #534]	@ 0x216

			for(uint8_t i = 4; i < 6; i++) {
 8002ed2:	2304      	movs	r3, #4
 8002ed4:	f887 3215 	strb.w	r3, [r7, #533]	@ 0x215
 8002ed8:	e027      	b.n	8002f2a <balance_cycle+0xf36>
				if(sideA_receptionRegisterCFGA[i] != sideA_payloadRegisterA_oddCells[i] || sideB_receptionRegisterCFGA[i] != sideB_payloadRegisterA_oddCells[i]) {
 8002eda:	f897 3215 	ldrb.w	r3, [r7, #533]	@ 0x215
 8002ede:	f507 7212 	add.w	r2, r7, #584	@ 0x248
 8002ee2:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8002ee6:	5cd2      	ldrb	r2, [r2, r3]
 8002ee8:	f897 3215 	ldrb.w	r3, [r7, #533]	@ 0x215
 8002eec:	f507 7112 	add.w	r1, r7, #584	@ 0x248
 8002ef0:	f5a1 71c8 	sub.w	r1, r1, #400	@ 0x190
 8002ef4:	5ccb      	ldrb	r3, [r1, r3]
 8002ef6:	429a      	cmp	r2, r3
 8002ef8:	d10f      	bne.n	8002f1a <balance_cycle+0xf26>
 8002efa:	f897 3215 	ldrb.w	r3, [r7, #533]	@ 0x215
 8002efe:	f507 7212 	add.w	r2, r7, #584	@ 0x248
 8002f02:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 8002f06:	5cd2      	ldrb	r2, [r2, r3]
 8002f08:	f897 3215 	ldrb.w	r3, [r7, #533]	@ 0x215
 8002f0c:	f507 7112 	add.w	r1, r7, #584	@ 0x248
 8002f10:	f5a1 71cc 	sub.w	r1, r1, #408	@ 0x198
 8002f14:	5ccb      	ldrb	r3, [r1, r3]
 8002f16:	429a      	cmp	r2, r3
 8002f18:	d002      	beq.n	8002f20 <balance_cycle+0xf2c>
					matchFlag = 0;
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	f887 3216 	strb.w	r3, [r7, #534]	@ 0x216
			for(uint8_t i = 4; i < 6; i++) {
 8002f20:	f897 3215 	ldrb.w	r3, [r7, #533]	@ 0x215
 8002f24:	3301      	adds	r3, #1
 8002f26:	f887 3215 	strb.w	r3, [r7, #533]	@ 0x215
 8002f2a:	f897 3215 	ldrb.w	r3, [r7, #533]	@ 0x215
 8002f2e:	2b05      	cmp	r3, #5
 8002f30:	d9d3      	bls.n	8002eda <balance_cycle+0xee6>
				}
			}
			if(matchFlag) { attempts = 13; }
 8002f32:	f897 3216 	ldrb.w	r3, [r7, #534]	@ 0x216
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d003      	beq.n	8002f42 <balance_cycle+0xf4e>
 8002f3a:	230d      	movs	r3, #13
 8002f3c:	f887 321a 	strb.w	r3, [r7, #538]	@ 0x21a
 8002f40:	e00a      	b.n	8002f58 <balance_cycle+0xf64>

			else {
				attempts++;
 8002f42:	f897 321a 	ldrb.w	r3, [r7, #538]	@ 0x21a
 8002f46:	3301      	adds	r3, #1
 8002f48:	f887 321a 	strb.w	r3, [r7, #538]	@ 0x21a
				subAttempts = 0;
 8002f4c:	2300      	movs	r3, #0
 8002f4e:	f887 3219 	strb.w	r3, [r7, #537]	@ 0x219
				wait(1);
 8002f52:	2001      	movs	r0, #1
 8002f54:	f006 f970 	bl	8009238 <wait>
		while(attempts < ATTEMPT_LIMIT) {
 8002f58:	f897 321a 	ldrb.w	r3, [r7, #538]	@ 0x21a
 8002f5c:	2b09      	cmp	r3, #9
 8002f5e:	d9a8      	bls.n	8002eb2 <balance_cycle+0xebe>
			}
		}
		if(attempts != 13) { error_loop(ERROR_BALANCE_INITIATION, 0, 0); }
 8002f60:	f897 321a 	ldrb.w	r3, [r7, #538]	@ 0x21a
 8002f64:	2b0d      	cmp	r3, #13
 8002f66:	d004      	beq.n	8002f72 <balance_cycle+0xf7e>
 8002f68:	2200      	movs	r2, #0
 8002f6a:	2100      	movs	r1, #0
 8002f6c:	2055      	movs	r0, #85	@ 0x55
 8002f6e:	f001 fb79 	bl	8004664 <error_loop>

		config_balance_flags(balanceMsg, oddCells, oddCellCount);
 8002f72:	f897 2244 	ldrb.w	r2, [r7, #580]	@ 0x244
 8002f76:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 8002f7a:	f8d7 1200 	ldr.w	r1, [r7, #512]	@ 0x200
 8002f7e:	4618      	mov	r0, r3
 8002f80:	f000 fa6a 	bl	8003458 <config_balance_flags>
		balance_led_on();
 8002f84:	f006 f9ee 	bl	8009364 <balance_led_on>
		WRCFGA(sideB_payloadRegisterA_oddCells, SIDE_B);
		wait(1);
		*/
	}

	balanceCounter = 0;
 8002f88:	4bae      	ldr	r3, [pc, #696]	@ (8003244 <balance_cycle+0x1250>)
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	601a      	str	r2, [r3, #0]
	measureCounter = 0;
 8002f8e:	4bae      	ldr	r3, [pc, #696]	@ (8003248 <balance_cycle+0x1254>)
 8002f90:	2200      	movs	r2, #0
 8002f92:	601a      	str	r2, [r3, #0]
	transmitCounter = 0;
 8002f94:	4bad      	ldr	r3, [pc, #692]	@ (800324c <balance_cycle+0x1258>)
 8002f96:	2200      	movs	r2, #0
 8002f98:	601a      	str	r2, [r3, #0]
	while(oddCellsFlag) {
 8002f9a:	e114      	b.n	80031c6 <balance_cycle+0x11d2>
		if(measureCounter > 100) {
 8002f9c:	4baa      	ldr	r3, [pc, #680]	@ (8003248 <balance_cycle+0x1254>)
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	2b64      	cmp	r3, #100	@ 0x64
 8002fa2:	f240 80e9 	bls.w	8003178 <balance_cycle+0x1184>
			temperature_sense(moduleTemperatures);
 8002fa6:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002faa:	4618      	mov	r0, r3
 8002fac:	f006 fb60 	bl	8009670 <temperature_sense>
			resistor_temperature_sense(pcbTemperatures);
 8002fb0:	f107 03d8 	add.w	r3, r7, #216	@ 0xd8
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	f7fe fbd1 	bl	800175c <resistor_temperature_sense>

			maxResistorTemperature = 0;
 8002fba:	f04f 0300 	mov.w	r3, #0
 8002fbe:	f8c7 322c 	str.w	r3, [r7, #556]	@ 0x22c
			for(uint8_t i = 0; i < PCB_THERM_QTY; i++) {
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	f887 3214 	strb.w	r3, [r7, #532]	@ 0x214
 8002fc8:	e02f      	b.n	800302a <balance_cycle+0x1036>
				if(!isnan(pcbTemperatures[i])) {
 8002fca:	f897 3214 	ldrb.w	r3, [r7, #532]	@ 0x214
 8002fce:	f507 7212 	add.w	r2, r7, #584	@ 0x248
 8002fd2:	f5a2 72b8 	sub.w	r2, r2, #368	@ 0x170
 8002fd6:	009b      	lsls	r3, r3, #2
 8002fd8:	4413      	add	r3, r2
 8002fda:	edd3 7a00 	vldr	s15, [r3]
 8002fde:	eef4 7a67 	vcmp.f32	s15, s15
 8002fe2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002fe6:	d61b      	bvs.n	8003020 <balance_cycle+0x102c>
					if(pcbTemperatures[i] > maxResistorTemperature) {
 8002fe8:	f897 3214 	ldrb.w	r3, [r7, #532]	@ 0x214
 8002fec:	f507 7212 	add.w	r2, r7, #584	@ 0x248
 8002ff0:	f5a2 72b8 	sub.w	r2, r2, #368	@ 0x170
 8002ff4:	009b      	lsls	r3, r3, #2
 8002ff6:	4413      	add	r3, r2
 8002ff8:	edd3 7a00 	vldr	s15, [r3]
 8002ffc:	ed97 7a8b 	vldr	s14, [r7, #556]	@ 0x22c
 8003000:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003004:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003008:	d50a      	bpl.n	8003020 <balance_cycle+0x102c>
						maxResistorTemperature = pcbTemperatures[i];
 800300a:	f897 3214 	ldrb.w	r3, [r7, #532]	@ 0x214
 800300e:	f507 7212 	add.w	r2, r7, #584	@ 0x248
 8003012:	f5a2 72b8 	sub.w	r2, r2, #368	@ 0x170
 8003016:	009b      	lsls	r3, r3, #2
 8003018:	4413      	add	r3, r2
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f8c7 322c 	str.w	r3, [r7, #556]	@ 0x22c
			for(uint8_t i = 0; i < PCB_THERM_QTY; i++) {
 8003020:	f897 3214 	ldrb.w	r3, [r7, #532]	@ 0x214
 8003024:	3301      	adds	r3, #1
 8003026:	f887 3214 	strb.w	r3, [r7, #532]	@ 0x214
 800302a:	f897 3214 	ldrb.w	r3, [r7, #532]	@ 0x214
 800302e:	2b11      	cmp	r3, #17
 8003030:	d9cb      	bls.n	8002fca <balance_cycle+0xfd6>
					}
				}
			}
			intMaxResistorTemperature = (uint16_t)(maxResistorTemperature*tempScale);
 8003032:	ed97 7a8b 	vldr	s14, [r7, #556]	@ 0x22c
 8003036:	edd7 7a77 	vldr	s15, [r7, #476]	@ 0x1dc
 800303a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800303e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003042:	ee17 3a90 	vmov	r3, s15
 8003046:	f8a7 31ce 	strh.w	r3, [r7, #462]	@ 0x1ce
			balanceMsg[2] = (uint8_t)(intMaxResistorTemperature & 0xFF);
 800304a:	f8b7 31ce 	ldrh.w	r3, [r7, #462]	@ 0x1ce
 800304e:	b2da      	uxtb	r2, r3
 8003050:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 8003054:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 8003058:	709a      	strb	r2, [r3, #2]
			balanceMsg[3] = (uint8_t)((intMaxResistorTemperature >> 8) & 0xFF);
 800305a:	f8b7 31ce 	ldrh.w	r3, [r7, #462]	@ 0x1ce
 800305e:	0a1b      	lsrs	r3, r3, #8
 8003060:	b29b      	uxth	r3, r3
 8003062:	b2da      	uxtb	r2, r3
 8003064:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 8003068:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 800306c:	70da      	strb	r2, [r3, #3]

			if(maxResistorTemperature > HOT_LED_THRESHOLD) { hot_led_on(); }
 800306e:	edd7 7a8b 	vldr	s15, [r7, #556]	@ 0x22c
 8003072:	ed9f 7a7b 	vldr	s14, [pc, #492]	@ 8003260 <balance_cycle+0x126c>
 8003076:	eef4 7ac7 	vcmpe.f32	s15, s14
 800307a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800307e:	dd02      	ble.n	8003086 <balance_cycle+0x1092>
 8003080:	f006 f988 	bl	8009394 <hot_led_on>
 8003084:	e001      	b.n	800308a <balance_cycle+0x1096>

			else { hot_led_off(); }
 8003086:	f006 f98f 	bl	80093a8 <hot_led_off>

			if(maxResistorTemperature > RESISTOR_TEMPERATURE_LIMIT) {
 800308a:	edd7 7a8b 	vldr	s15, [r7, #556]	@ 0x22c
 800308e:	ed9f 7a70 	vldr	s14, [pc, #448]	@ 8003250 <balance_cycle+0x125c>
 8003092:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003096:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800309a:	dd04      	ble.n	80030a6 <balance_cycle+0x10b2>
				force_refup();
 800309c:	f005 fb64 	bl	8008768 <force_refup>
				oddCellsFlag = 0;
 80030a0:	2300      	movs	r3, #0
 80030a2:	f887 3246 	strb.w	r3, [r7, #582]	@ 0x246
			}

			for(uint8_t i = 0; i < MODULE_THERM_QTY; i++) {
 80030a6:	2300      	movs	r3, #0
 80030a8:	f887 3213 	strb.w	r3, [r7, #531]	@ 0x213
 80030ac:	e028      	b.n	8003100 <balance_cycle+0x110c>
				if(moduleTemperatures[i] > MAX_TEMPERATURE) {
 80030ae:	f897 3213 	ldrb.w	r3, [r7, #531]	@ 0x213
 80030b2:	f507 7212 	add.w	r2, r7, #584	@ 0x248
 80030b6:	f5a2 7294 	sub.w	r2, r2, #296	@ 0x128
 80030ba:	009b      	lsls	r3, r3, #2
 80030bc:	4413      	add	r3, r2
 80030be:	edd3 7a00 	vldr	s15, [r3]
 80030c2:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 8003264 <balance_cycle+0x1270>
 80030c6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80030ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030ce:	dd12      	ble.n	80030f6 <balance_cycle+0x1102>
					overheatFlag = 1;
 80030d0:	2301      	movs	r3, #1
 80030d2:	f887 322b 	strb.w	r3, [r7, #555]	@ 0x22b
					faultingThermistorIndex = i + 1;
 80030d6:	f897 3213 	ldrb.w	r3, [r7, #531]	@ 0x213
 80030da:	3301      	adds	r3, #1
 80030dc:	f887 3229 	strb.w	r3, [r7, #553]	@ 0x229
					faultingTemperature = moduleTemperatures[i];
 80030e0:	f897 3213 	ldrb.w	r3, [r7, #531]	@ 0x213
 80030e4:	f507 7212 	add.w	r2, r7, #584	@ 0x248
 80030e8:	f5a2 7294 	sub.w	r2, r2, #296	@ 0x128
 80030ec:	009b      	lsls	r3, r3, #2
 80030ee:	4413      	add	r3, r2
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f8c7 3224 	str.w	r3, [r7, #548]	@ 0x224
			for(uint8_t i = 0; i < MODULE_THERM_QTY; i++) {
 80030f6:	f897 3213 	ldrb.w	r3, [r7, #531]	@ 0x213
 80030fa:	3301      	adds	r3, #1
 80030fc:	f887 3213 	strb.w	r3, [r7, #531]	@ 0x213
 8003100:	f897 3213 	ldrb.w	r3, [r7, #531]	@ 0x213
 8003104:	2b11      	cmp	r3, #17
 8003106:	d9d2      	bls.n	80030ae <balance_cycle+0x10ba>
				}
			}

			if(overheatFlag) { overheatCount++; }
 8003108:	f897 322b 	ldrb.w	r3, [r7, #555]	@ 0x22b
 800310c:	2b00      	cmp	r3, #0
 800310e:	d005      	beq.n	800311c <balance_cycle+0x1128>
 8003110:	f897 322a 	ldrb.w	r3, [r7, #554]	@ 0x22a
 8003114:	3301      	adds	r3, #1
 8003116:	f887 322a 	strb.w	r3, [r7, #554]	@ 0x22a
 800311a:	e008      	b.n	800312e <balance_cycle+0x113a>

			else {
				if(overheatCount > 0) {
 800311c:	f897 322a 	ldrb.w	r3, [r7, #554]	@ 0x22a
 8003120:	2b00      	cmp	r3, #0
 8003122:	d004      	beq.n	800312e <balance_cycle+0x113a>
					overheatCount--;
 8003124:	f897 322a 	ldrb.w	r3, [r7, #554]	@ 0x22a
 8003128:	3b01      	subs	r3, #1
 800312a:	f887 322a 	strb.w	r3, [r7, #554]	@ 0x22a
				}
			}
			// MODULE OVERHEAT FAULT
			if(overheatCount > ATTEMPT_LIMIT) {
 800312e:	f897 322a 	ldrb.w	r3, [r7, #554]	@ 0x22a
 8003132:	2b0a      	cmp	r3, #10
 8003134:	d91d      	bls.n	8003172 <balance_cycle+0x117e>
				float tempScale = 1000.0f;
 8003136:	4b47      	ldr	r3, [pc, #284]	@ (8003254 <balance_cycle+0x1260>)
 8003138:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
				uint16_t intFaultingTemperature = (uint16_t)(faultingTemperature * tempScale);
 800313c:	ed97 7a89 	vldr	s14, [r7, #548]	@ 0x224
 8003140:	edd7 7a70 	vldr	s15, [r7, #448]	@ 0x1c0
 8003144:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003148:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800314c:	ee17 3a90 	vmov	r3, s15
 8003150:	f8a7 31be 	strh.w	r3, [r7, #446]	@ 0x1be

				force_mute();
 8003154:	f005 fb99 	bl	800888a <force_mute>
				wait(1);
 8003158:	2001      	movs	r0, #1
 800315a:	f006 f86d 	bl	8009238 <wait>
				force_refup();
 800315e:	f005 fb03 	bl	8008768 <force_refup>

				error_loop(ERROR_OVERHEAT, intFaultingTemperature, faultingThermistorIndex);
 8003162:	f897 2229 	ldrb.w	r2, [r7, #553]	@ 0x229
 8003166:	f8b7 31be 	ldrh.w	r3, [r7, #446]	@ 0x1be
 800316a:	4619      	mov	r1, r3
 800316c:	2045      	movs	r0, #69	@ 0x45
 800316e:	f001 fa79 	bl	8004664 <error_loop>
			}

			measureCounter = 0;
 8003172:	4b35      	ldr	r3, [pc, #212]	@ (8003248 <balance_cycle+0x1254>)
 8003174:	2200      	movs	r2, #0
 8003176:	601a      	str	r2, [r3, #0]
		}

		if(transmitCounter > transmissionDelay) {
 8003178:	4b37      	ldr	r3, [pc, #220]	@ (8003258 <balance_cycle+0x1264>)
 800317a:	881b      	ldrh	r3, [r3, #0]
 800317c:	461a      	mov	r2, r3
 800317e:	4b33      	ldr	r3, [pc, #204]	@ (800324c <balance_cycle+0x1258>)
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	429a      	cmp	r2, r3
 8003184:	d211      	bcs.n	80031aa <balance_cycle+0x11b6>
			transmit_balance(balanceMsg);
 8003186:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 800318a:	4618      	mov	r0, r3
 800318c:	f001 fb48 	bl	8004820 <transmit_balance>
			transmit_voltages(cellVoltages);
 8003190:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8003194:	4618      	mov	r0, r3
 8003196:	f001 fc11 	bl	80049bc <transmit_voltages>
			transmit_temperatures(moduleTemperatures);
 800319a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800319e:	4618      	mov	r0, r3
 80031a0:	f001 fddc 	bl	8004d5c <transmit_temperatures>

			transmitCounter = 0;
 80031a4:	4b29      	ldr	r3, [pc, #164]	@ (800324c <balance_cycle+0x1258>)
 80031a6:	2200      	movs	r2, #0
 80031a8:	601a      	str	r2, [r3, #0]
		}

		if(balanceCounter > 60000) {
 80031aa:	4b26      	ldr	r3, [pc, #152]	@ (8003244 <balance_cycle+0x1250>)
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f64e 2260 	movw	r2, #60000	@ 0xea60
 80031b2:	4293      	cmp	r3, r2
 80031b4:	d904      	bls.n	80031c0 <balance_cycle+0x11cc>
			force_refup();
 80031b6:	f005 fad7 	bl	8008768 <force_refup>
			oddCellsFlag = 0;
 80031ba:	2300      	movs	r3, #0
 80031bc:	f887 3246 	strb.w	r3, [r7, #582]	@ 0x246
		}

		wait(1);
 80031c0:	2001      	movs	r0, #1
 80031c2:	f006 f839 	bl	8009238 <wait>
	while(oddCellsFlag) {
 80031c6:	f897 3246 	ldrb.w	r3, [r7, #582]	@ 0x246
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	f47f aee6 	bne.w	8002f9c <balance_cycle+0xfa8>
	}

	force_mute();
 80031d0:	f005 fb5b 	bl	800888a <force_mute>
	balance_led_off();
 80031d4:	f006 f8d2 	bl	800937c <balance_led_off>

	// Set all cell balancing flags to zero
	for(uint8_t i = 4; i < 7; i++) { balanceMsg[i] = 0; }
 80031d8:	2304      	movs	r3, #4
 80031da:	f887 3212 	strb.w	r3, [r7, #530]	@ 0x212
 80031de:	e00c      	b.n	80031fa <balance_cycle+0x1206>
 80031e0:	f897 3212 	ldrb.w	r3, [r7, #530]	@ 0x212
 80031e4:	f507 7212 	add.w	r2, r7, #584	@ 0x248
 80031e8:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 80031ec:	2100      	movs	r1, #0
 80031ee:	54d1      	strb	r1, [r2, r3]
 80031f0:	f897 3212 	ldrb.w	r3, [r7, #530]	@ 0x212
 80031f4:	3301      	adds	r3, #1
 80031f6:	f887 3212 	strb.w	r3, [r7, #530]	@ 0x212
 80031fa:	f897 3212 	ldrb.w	r3, [r7, #530]	@ 0x212
 80031fe:	2b06      	cmp	r3, #6
 8003200:	d9ee      	bls.n	80031e0 <balance_cycle+0x11ec>

	transientCounter = 0;
 8003202:	4b16      	ldr	r3, [pc, #88]	@ (800325c <balance_cycle+0x1268>)
 8003204:	2200      	movs	r2, #0
 8003206:	601a      	str	r2, [r3, #0]
	measureCounter = 0;
 8003208:	4b0f      	ldr	r3, [pc, #60]	@ (8003248 <balance_cycle+0x1254>)
 800320a:	2200      	movs	r2, #0
 800320c:	601a      	str	r2, [r3, #0]
	transmitCounter = 0;
 800320e:	4b0f      	ldr	r3, [pc, #60]	@ (800324c <balance_cycle+0x1258>)
 8003210:	2200      	movs	r2, #0
 8003212:	601a      	str	r2, [r3, #0]
	while(transientCounter < 20000) {
 8003214:	e106      	b.n	8003424 <balance_cycle+0x1430>
		if(measureCounter > 100) {
 8003216:	4b0c      	ldr	r3, [pc, #48]	@ (8003248 <balance_cycle+0x1254>)
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	2b64      	cmp	r3, #100	@ 0x64
 800321c:	f240 80e6 	bls.w	80033ec <balance_cycle+0x13f8>
			temperature_sense(moduleTemperatures);
 8003220:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8003224:	4618      	mov	r0, r3
 8003226:	f006 fa23 	bl	8009670 <temperature_sense>
			resistor_temperature_sense(pcbTemperatures);
 800322a:	f107 03d8 	add.w	r3, r7, #216	@ 0xd8
 800322e:	4618      	mov	r0, r3
 8003230:	f7fe fa94 	bl	800175c <resistor_temperature_sense>

			maxResistorTemperature = 0;
 8003234:	f04f 0300 	mov.w	r3, #0
 8003238:	f8c7 322c 	str.w	r3, [r7, #556]	@ 0x22c
			for(uint8_t i = 0; i < PCB_THERM_QTY; i++) {
 800323c:	2300      	movs	r3, #0
 800323e:	f887 3211 	strb.w	r3, [r7, #529]	@ 0x211
 8003242:	e041      	b.n	80032c8 <balance_cycle+0x12d4>
 8003244:	200003f0 	.word	0x200003f0
 8003248:	200003ec 	.word	0x200003ec
 800324c:	200003e8 	.word	0x200003e8
 8003250:	42e60000 	.word	0x42e60000
 8003254:	447a0000 	.word	0x447a0000
 8003258:	200003e4 	.word	0x200003e4
 800325c:	200003f4 	.word	0x200003f4
 8003260:	42340000 	.word	0x42340000
 8003264:	42700000 	.word	0x42700000
				if(!isnan(pcbTemperatures[i])) {
 8003268:	f897 3211 	ldrb.w	r3, [r7, #529]	@ 0x211
 800326c:	f507 7212 	add.w	r2, r7, #584	@ 0x248
 8003270:	f5a2 72b8 	sub.w	r2, r2, #368	@ 0x170
 8003274:	009b      	lsls	r3, r3, #2
 8003276:	4413      	add	r3, r2
 8003278:	edd3 7a00 	vldr	s15, [r3]
 800327c:	eef4 7a67 	vcmp.f32	s15, s15
 8003280:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003284:	d61b      	bvs.n	80032be <balance_cycle+0x12ca>
					if(pcbTemperatures[i] > maxResistorTemperature) {
 8003286:	f897 3211 	ldrb.w	r3, [r7, #529]	@ 0x211
 800328a:	f507 7212 	add.w	r2, r7, #584	@ 0x248
 800328e:	f5a2 72b8 	sub.w	r2, r2, #368	@ 0x170
 8003292:	009b      	lsls	r3, r3, #2
 8003294:	4413      	add	r3, r2
 8003296:	edd3 7a00 	vldr	s15, [r3]
 800329a:	ed97 7a8b 	vldr	s14, [r7, #556]	@ 0x22c
 800329e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80032a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032a6:	d50a      	bpl.n	80032be <balance_cycle+0x12ca>
						maxResistorTemperature = pcbTemperatures[i];
 80032a8:	f897 3211 	ldrb.w	r3, [r7, #529]	@ 0x211
 80032ac:	f507 7212 	add.w	r2, r7, #584	@ 0x248
 80032b0:	f5a2 72b8 	sub.w	r2, r2, #368	@ 0x170
 80032b4:	009b      	lsls	r3, r3, #2
 80032b6:	4413      	add	r3, r2
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f8c7 322c 	str.w	r3, [r7, #556]	@ 0x22c
			for(uint8_t i = 0; i < PCB_THERM_QTY; i++) {
 80032be:	f897 3211 	ldrb.w	r3, [r7, #529]	@ 0x211
 80032c2:	3301      	adds	r3, #1
 80032c4:	f887 3211 	strb.w	r3, [r7, #529]	@ 0x211
 80032c8:	f897 3211 	ldrb.w	r3, [r7, #529]	@ 0x211
 80032cc:	2b11      	cmp	r3, #17
 80032ce:	d9cb      	bls.n	8003268 <balance_cycle+0x1274>
					}
				}
			}
			intMaxResistorTemperature = (uint16_t)(maxResistorTemperature*tempScale);
 80032d0:	ed97 7a8b 	vldr	s14, [r7, #556]	@ 0x22c
 80032d4:	edd7 7a77 	vldr	s15, [r7, #476]	@ 0x1dc
 80032d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80032dc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80032e0:	ee17 3a90 	vmov	r3, s15
 80032e4:	f8a7 31ce 	strh.w	r3, [r7, #462]	@ 0x1ce
			balanceMsg[2] = (uint8_t)(intMaxResistorTemperature & 0xFF);
 80032e8:	f8b7 31ce 	ldrh.w	r3, [r7, #462]	@ 0x1ce
 80032ec:	b2da      	uxtb	r2, r3
 80032ee:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 80032f2:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 80032f6:	709a      	strb	r2, [r3, #2]
			balanceMsg[3] = (uint8_t)((intMaxResistorTemperature >> 8) & 0xFF);
 80032f8:	f8b7 31ce 	ldrh.w	r3, [r7, #462]	@ 0x1ce
 80032fc:	0a1b      	lsrs	r3, r3, #8
 80032fe:	b29b      	uxth	r3, r3
 8003300:	b2da      	uxtb	r2, r3
 8003302:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 8003306:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 800330a:	70da      	strb	r2, [r3, #3]

			if(maxResistorTemperature > HOT_LED_THRESHOLD) { hot_led_on(); }
 800330c:	edd7 7a8b 	vldr	s15, [r7, #556]	@ 0x22c
 8003310:	ed1f 7a2d 	vldr	s14, [pc, #-180]	@ 8003260 <balance_cycle+0x126c>
 8003314:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003318:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800331c:	dd02      	ble.n	8003324 <balance_cycle+0x1330>
 800331e:	f006 f839 	bl	8009394 <hot_led_on>
 8003322:	e001      	b.n	8003328 <balance_cycle+0x1334>

			else { hot_led_off(); }
 8003324:	f006 f840 	bl	80093a8 <hot_led_off>

			for(uint8_t i = 0; i < MODULE_THERM_QTY; i++) {
 8003328:	2300      	movs	r3, #0
 800332a:	f887 3210 	strb.w	r3, [r7, #528]	@ 0x210
 800332e:	e028      	b.n	8003382 <balance_cycle+0x138e>
				if(moduleTemperatures[i] > MAX_TEMPERATURE) {
 8003330:	f897 3210 	ldrb.w	r3, [r7, #528]	@ 0x210
 8003334:	f507 7212 	add.w	r2, r7, #584	@ 0x248
 8003338:	f5a2 7294 	sub.w	r2, r2, #296	@ 0x128
 800333c:	009b      	lsls	r3, r3, #2
 800333e:	4413      	add	r3, r2
 8003340:	edd3 7a00 	vldr	s15, [r3]
 8003344:	ed1f 7a39 	vldr	s14, [pc, #-228]	@ 8003264 <balance_cycle+0x1270>
 8003348:	eef4 7ac7 	vcmpe.f32	s15, s14
 800334c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003350:	dd12      	ble.n	8003378 <balance_cycle+0x1384>
					overheatFlag = 1;
 8003352:	2301      	movs	r3, #1
 8003354:	f887 322b 	strb.w	r3, [r7, #555]	@ 0x22b
					faultingThermistorIndex = i + 1;
 8003358:	f897 3210 	ldrb.w	r3, [r7, #528]	@ 0x210
 800335c:	3301      	adds	r3, #1
 800335e:	f887 3229 	strb.w	r3, [r7, #553]	@ 0x229
					faultingTemperature = moduleTemperatures[i];
 8003362:	f897 3210 	ldrb.w	r3, [r7, #528]	@ 0x210
 8003366:	f507 7212 	add.w	r2, r7, #584	@ 0x248
 800336a:	f5a2 7294 	sub.w	r2, r2, #296	@ 0x128
 800336e:	009b      	lsls	r3, r3, #2
 8003370:	4413      	add	r3, r2
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f8c7 3224 	str.w	r3, [r7, #548]	@ 0x224
			for(uint8_t i = 0; i < MODULE_THERM_QTY; i++) {
 8003378:	f897 3210 	ldrb.w	r3, [r7, #528]	@ 0x210
 800337c:	3301      	adds	r3, #1
 800337e:	f887 3210 	strb.w	r3, [r7, #528]	@ 0x210
 8003382:	f897 3210 	ldrb.w	r3, [r7, #528]	@ 0x210
 8003386:	2b11      	cmp	r3, #17
 8003388:	d9d2      	bls.n	8003330 <balance_cycle+0x133c>
				}
			}
			if(overheatFlag) { overheatCount++; }
 800338a:	f897 322b 	ldrb.w	r3, [r7, #555]	@ 0x22b
 800338e:	2b00      	cmp	r3, #0
 8003390:	d005      	beq.n	800339e <balance_cycle+0x13aa>
 8003392:	f897 322a 	ldrb.w	r3, [r7, #554]	@ 0x22a
 8003396:	3301      	adds	r3, #1
 8003398:	f887 322a 	strb.w	r3, [r7, #554]	@ 0x22a
 800339c:	e008      	b.n	80033b0 <balance_cycle+0x13bc>

			else {
				if(overheatCount > 0) {
 800339e:	f897 322a 	ldrb.w	r3, [r7, #554]	@ 0x22a
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d004      	beq.n	80033b0 <balance_cycle+0x13bc>
					overheatCount--;
 80033a6:	f897 322a 	ldrb.w	r3, [r7, #554]	@ 0x22a
 80033aa:	3b01      	subs	r3, #1
 80033ac:	f887 322a 	strb.w	r3, [r7, #554]	@ 0x22a
				}
			}
			// MODULE OVERHEAT FAULT
			if(overheatCount > ATTEMPT_LIMIT) {
 80033b0:	f897 322a 	ldrb.w	r3, [r7, #554]	@ 0x22a
 80033b4:	2b0a      	cmp	r3, #10
 80033b6:	d916      	bls.n	80033e6 <balance_cycle+0x13f2>
				float tempScale = 1000.0f;
 80033b8:	4b22      	ldr	r3, [pc, #136]	@ (8003444 <balance_cycle+0x1450>)
 80033ba:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
				uint16_t intFaultingTemperature = (uint16_t)(faultingTemperature * tempScale);
 80033be:	ed97 7a89 	vldr	s14, [r7, #548]	@ 0x224
 80033c2:	edd7 7a72 	vldr	s15, [r7, #456]	@ 0x1c8
 80033c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80033ca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80033ce:	ee17 3a90 	vmov	r3, s15
 80033d2:	f8a7 31c6 	strh.w	r3, [r7, #454]	@ 0x1c6

				error_loop(ERROR_OVERHEAT, intFaultingTemperature, faultingThermistorIndex);
 80033d6:	f897 2229 	ldrb.w	r2, [r7, #553]	@ 0x229
 80033da:	f8b7 31c6 	ldrh.w	r3, [r7, #454]	@ 0x1c6
 80033de:	4619      	mov	r1, r3
 80033e0:	2045      	movs	r0, #69	@ 0x45
 80033e2:	f001 f93f 	bl	8004664 <error_loop>
			}

			measureCounter = 0;
 80033e6:	4b18      	ldr	r3, [pc, #96]	@ (8003448 <balance_cycle+0x1454>)
 80033e8:	2200      	movs	r2, #0
 80033ea:	601a      	str	r2, [r3, #0]
		}

		if(transmitCounter > transmissionDelay) {
 80033ec:	4b17      	ldr	r3, [pc, #92]	@ (800344c <balance_cycle+0x1458>)
 80033ee:	881b      	ldrh	r3, [r3, #0]
 80033f0:	461a      	mov	r2, r3
 80033f2:	4b17      	ldr	r3, [pc, #92]	@ (8003450 <balance_cycle+0x145c>)
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	429a      	cmp	r2, r3
 80033f8:	d211      	bcs.n	800341e <balance_cycle+0x142a>
			transmit_balance(balanceMsg);
 80033fa:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 80033fe:	4618      	mov	r0, r3
 8003400:	f001 fa0e 	bl	8004820 <transmit_balance>
			transmit_voltages(cellVoltages);
 8003404:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8003408:	4618      	mov	r0, r3
 800340a:	f001 fad7 	bl	80049bc <transmit_voltages>
			transmit_temperatures(moduleTemperatures);
 800340e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8003412:	4618      	mov	r0, r3
 8003414:	f001 fca2 	bl	8004d5c <transmit_temperatures>

			transmitCounter = 0;
 8003418:	4b0d      	ldr	r3, [pc, #52]	@ (8003450 <balance_cycle+0x145c>)
 800341a:	2200      	movs	r2, #0
 800341c:	601a      	str	r2, [r3, #0]
		}

		wait(1);
 800341e:	2001      	movs	r0, #1
 8003420:	f005 ff0a 	bl	8009238 <wait>
	while(transientCounter < 20000) {
 8003424:	4b0b      	ldr	r3, [pc, #44]	@ (8003454 <balance_cycle+0x1460>)
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 800342c:	4293      	cmp	r3, r2
 800342e:	f67f aef2 	bls.w	8003216 <balance_cycle+0x1222>
	}
	hot_led_off();
 8003432:	f005 ffb9 	bl	80093a8 <hot_led_off>
 8003436:	46b5      	mov	sp, r6
}
 8003438:	bf00      	nop
 800343a:	f507 7713 	add.w	r7, r7, #588	@ 0x24c
 800343e:	46bd      	mov	sp, r7
 8003440:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003444:	447a0000 	.word	0x447a0000
 8003448:	200003ec 	.word	0x200003ec
 800344c:	200003e4 	.word	0x200003e4
 8003450:	200003e8 	.word	0x200003e8
 8003454:	200003f4 	.word	0x200003f4

08003458 <config_balance_flags>:


void config_balance_flags(uint8_t *balanceMsg, uint8_t *cellIndexes, uint8_t cellQty)
{
 8003458:	b480      	push	{r7}
 800345a:	b08b      	sub	sp, #44	@ 0x2c
 800345c:	af00      	add	r7, sp, #0
 800345e:	60f8      	str	r0, [r7, #12]
 8003460:	60b9      	str	r1, [r7, #8]
 8003462:	4613      	mov	r3, r2
 8003464:	71fb      	strb	r3, [r7, #7]
	uint8_t cell1Flag = 0;
 8003466:	2300      	movs	r3, #0
 8003468:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	uint8_t cell2Flag = 0;
 800346c:	2300      	movs	r3, #0
 800346e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	uint8_t cell3Flag = 0;
 8003472:	2300      	movs	r3, #0
 8003474:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
	uint8_t cell4Flag = 0;
 8003478:	2300      	movs	r3, #0
 800347a:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
	uint8_t cell5Flag = 0;
 800347e:	2300      	movs	r3, #0
 8003480:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
	uint8_t cell6Flag = 0;
 8003484:	2300      	movs	r3, #0
 8003486:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
	uint8_t cell7Flag = 0;
 800348a:	2300      	movs	r3, #0
 800348c:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
	uint8_t cell8Flag = 0;
 8003490:	2300      	movs	r3, #0
 8003492:	f887 3020 	strb.w	r3, [r7, #32]
	uint8_t cell9Flag = 0;
 8003496:	2300      	movs	r3, #0
 8003498:	77fb      	strb	r3, [r7, #31]
	uint8_t cell10Flag = 0;
 800349a:	2300      	movs	r3, #0
 800349c:	77bb      	strb	r3, [r7, #30]
	uint8_t cell11Flag = 0;
 800349e:	2300      	movs	r3, #0
 80034a0:	777b      	strb	r3, [r7, #29]
	uint8_t cell12Flag = 0;
 80034a2:	2300      	movs	r3, #0
 80034a4:	773b      	strb	r3, [r7, #28]
	uint8_t cell13Flag = 0;
 80034a6:	2300      	movs	r3, #0
 80034a8:	76fb      	strb	r3, [r7, #27]
	uint8_t cell14Flag = 0;
 80034aa:	2300      	movs	r3, #0
 80034ac:	76bb      	strb	r3, [r7, #26]
	uint8_t cell15Flag = 0;
 80034ae:	2300      	movs	r3, #0
 80034b0:	767b      	strb	r3, [r7, #25]
	uint8_t cell16Flag = 0;
 80034b2:	2300      	movs	r3, #0
 80034b4:	763b      	strb	r3, [r7, #24]
	uint8_t cell17Flag = 0;
 80034b6:	2300      	movs	r3, #0
 80034b8:	75fb      	strb	r3, [r7, #23]
	uint8_t cell18Flag = 0;
 80034ba:	2300      	movs	r3, #0
 80034bc:	75bb      	strb	r3, [r7, #22]
	uint8_t cell19Flag = 0;
 80034be:	2300      	movs	r3, #0
 80034c0:	757b      	strb	r3, [r7, #21]
	uint8_t cell20Flag = 0;
 80034c2:	2300      	movs	r3, #0
 80034c4:	753b      	strb	r3, [r7, #20]

	for(uint8_t i = 0; i < cellQty; i++) {
 80034c6:	2300      	movs	r3, #0
 80034c8:	74fb      	strb	r3, [r7, #19]
 80034ca:	e078      	b.n	80035be <config_balance_flags+0x166>
		switch(*(cellIndexes + i)) {
 80034cc:	7cfb      	ldrb	r3, [r7, #19]
 80034ce:	68ba      	ldr	r2, [r7, #8]
 80034d0:	4413      	add	r3, r2
 80034d2:	781b      	ldrb	r3, [r3, #0]
 80034d4:	3b01      	subs	r3, #1
 80034d6:	2b13      	cmp	r3, #19
 80034d8:	d86e      	bhi.n	80035b8 <config_balance_flags+0x160>
 80034da:	a201      	add	r2, pc, #4	@ (adr r2, 80034e0 <config_balance_flags+0x88>)
 80034dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034e0:	08003531 	.word	0x08003531
 80034e4:	08003539 	.word	0x08003539
 80034e8:	08003541 	.word	0x08003541
 80034ec:	08003549 	.word	0x08003549
 80034f0:	08003551 	.word	0x08003551
 80034f4:	08003559 	.word	0x08003559
 80034f8:	08003561 	.word	0x08003561
 80034fc:	08003569 	.word	0x08003569
 8003500:	08003571 	.word	0x08003571
 8003504:	08003577 	.word	0x08003577
 8003508:	0800357d 	.word	0x0800357d
 800350c:	08003583 	.word	0x08003583
 8003510:	08003589 	.word	0x08003589
 8003514:	0800358f 	.word	0x0800358f
 8003518:	08003595 	.word	0x08003595
 800351c:	0800359b 	.word	0x0800359b
 8003520:	080035a1 	.word	0x080035a1
 8003524:	080035a7 	.word	0x080035a7
 8003528:	080035ad 	.word	0x080035ad
 800352c:	080035b3 	.word	0x080035b3
			case 1:
				cell1Flag = 1;
 8003530:	2301      	movs	r3, #1
 8003532:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				break;
 8003536:	e03f      	b.n	80035b8 <config_balance_flags+0x160>
			case 2:
				cell2Flag = 1;
 8003538:	2301      	movs	r3, #1
 800353a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
				break;
 800353e:	e03b      	b.n	80035b8 <config_balance_flags+0x160>
			case 3:
				cell3Flag = 1;
 8003540:	2301      	movs	r3, #1
 8003542:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
				break;
 8003546:	e037      	b.n	80035b8 <config_balance_flags+0x160>
			case 4:
				cell4Flag = 1;
 8003548:	2301      	movs	r3, #1
 800354a:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
				break;
 800354e:	e033      	b.n	80035b8 <config_balance_flags+0x160>
			case 5:
				cell5Flag = 1;
 8003550:	2301      	movs	r3, #1
 8003552:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
				break;
 8003556:	e02f      	b.n	80035b8 <config_balance_flags+0x160>
			case 6:
				cell6Flag = 1;
 8003558:	2301      	movs	r3, #1
 800355a:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
				break;
 800355e:	e02b      	b.n	80035b8 <config_balance_flags+0x160>
			case 7:
				cell7Flag = 1;
 8003560:	2301      	movs	r3, #1
 8003562:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
				break;
 8003566:	e027      	b.n	80035b8 <config_balance_flags+0x160>
			case 8:
				cell8Flag = 1;
 8003568:	2301      	movs	r3, #1
 800356a:	f887 3020 	strb.w	r3, [r7, #32]
				break;
 800356e:	e023      	b.n	80035b8 <config_balance_flags+0x160>
			case 9:
				cell9Flag = 1;
 8003570:	2301      	movs	r3, #1
 8003572:	77fb      	strb	r3, [r7, #31]
				break;
 8003574:	e020      	b.n	80035b8 <config_balance_flags+0x160>
			case 10:
				cell10Flag = 1;
 8003576:	2301      	movs	r3, #1
 8003578:	77bb      	strb	r3, [r7, #30]
				break;
 800357a:	e01d      	b.n	80035b8 <config_balance_flags+0x160>
			case 11:
				cell11Flag = 1;
 800357c:	2301      	movs	r3, #1
 800357e:	777b      	strb	r3, [r7, #29]
				break;
 8003580:	e01a      	b.n	80035b8 <config_balance_flags+0x160>
			case 12:
				cell12Flag = 1;
 8003582:	2301      	movs	r3, #1
 8003584:	773b      	strb	r3, [r7, #28]
				break;
 8003586:	e017      	b.n	80035b8 <config_balance_flags+0x160>
			case 13:
				cell13Flag = 1;
 8003588:	2301      	movs	r3, #1
 800358a:	76fb      	strb	r3, [r7, #27]
				break;
 800358c:	e014      	b.n	80035b8 <config_balance_flags+0x160>
			case 14:
				cell14Flag = 1;
 800358e:	2301      	movs	r3, #1
 8003590:	76bb      	strb	r3, [r7, #26]
				break;
 8003592:	e011      	b.n	80035b8 <config_balance_flags+0x160>
			case 15:
				cell15Flag = 1;
 8003594:	2301      	movs	r3, #1
 8003596:	767b      	strb	r3, [r7, #25]
				break;
 8003598:	e00e      	b.n	80035b8 <config_balance_flags+0x160>
			case 16:
				cell16Flag = 1;
 800359a:	2301      	movs	r3, #1
 800359c:	763b      	strb	r3, [r7, #24]
				break;
 800359e:	e00b      	b.n	80035b8 <config_balance_flags+0x160>
			case 17:
				cell17Flag = 1;
 80035a0:	2301      	movs	r3, #1
 80035a2:	75fb      	strb	r3, [r7, #23]
				break;
 80035a4:	e008      	b.n	80035b8 <config_balance_flags+0x160>
			case 18:
				cell18Flag = 1;
 80035a6:	2301      	movs	r3, #1
 80035a8:	75bb      	strb	r3, [r7, #22]
				break;
 80035aa:	e005      	b.n	80035b8 <config_balance_flags+0x160>
			case 19:
				cell19Flag = 1;
 80035ac:	2301      	movs	r3, #1
 80035ae:	757b      	strb	r3, [r7, #21]
				break;
 80035b0:	e002      	b.n	80035b8 <config_balance_flags+0x160>
			case 20:
				cell20Flag = 1;
 80035b2:	2301      	movs	r3, #1
 80035b4:	753b      	strb	r3, [r7, #20]
				break;
 80035b6:	bf00      	nop
	for(uint8_t i = 0; i < cellQty; i++) {
 80035b8:	7cfb      	ldrb	r3, [r7, #19]
 80035ba:	3301      	adds	r3, #1
 80035bc:	74fb      	strb	r3, [r7, #19]
 80035be:	7cfa      	ldrb	r2, [r7, #19]
 80035c0:	79fb      	ldrb	r3, [r7, #7]
 80035c2:	429a      	cmp	r2, r3
 80035c4:	d382      	bcc.n	80034cc <config_balance_flags+0x74>
		}
	}
	*(balanceMsg + 4) = (cell8Flag << 7) | (cell7Flag << 6) | (cell6Flag << 5) | (cell5Flag << 4) | (cell4Flag << 3) | (cell3Flag << 2) | (cell2Flag << 1) | (cell1Flag << 0);
 80035c6:	f997 3020 	ldrsb.w	r3, [r7, #32]
 80035ca:	01db      	lsls	r3, r3, #7
 80035cc:	b25a      	sxtb	r2, r3
 80035ce:	f997 3021 	ldrsb.w	r3, [r7, #33]	@ 0x21
 80035d2:	019b      	lsls	r3, r3, #6
 80035d4:	b25b      	sxtb	r3, r3
 80035d6:	4313      	orrs	r3, r2
 80035d8:	b25a      	sxtb	r2, r3
 80035da:	f997 3022 	ldrsb.w	r3, [r7, #34]	@ 0x22
 80035de:	015b      	lsls	r3, r3, #5
 80035e0:	b25b      	sxtb	r3, r3
 80035e2:	4313      	orrs	r3, r2
 80035e4:	b25a      	sxtb	r2, r3
 80035e6:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 80035ea:	011b      	lsls	r3, r3, #4
 80035ec:	b25b      	sxtb	r3, r3
 80035ee:	4313      	orrs	r3, r2
 80035f0:	b25a      	sxtb	r2, r3
 80035f2:	f997 3024 	ldrsb.w	r3, [r7, #36]	@ 0x24
 80035f6:	00db      	lsls	r3, r3, #3
 80035f8:	b25b      	sxtb	r3, r3
 80035fa:	4313      	orrs	r3, r2
 80035fc:	b25a      	sxtb	r2, r3
 80035fe:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 8003602:	009b      	lsls	r3, r3, #2
 8003604:	b25b      	sxtb	r3, r3
 8003606:	4313      	orrs	r3, r2
 8003608:	b25a      	sxtb	r2, r3
 800360a:	f997 3026 	ldrsb.w	r3, [r7, #38]	@ 0x26
 800360e:	005b      	lsls	r3, r3, #1
 8003610:	b25b      	sxtb	r3, r3
 8003612:	4313      	orrs	r3, r2
 8003614:	b25a      	sxtb	r2, r3
 8003616:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800361a:	4313      	orrs	r3, r2
 800361c:	b25a      	sxtb	r2, r3
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	3304      	adds	r3, #4
 8003622:	b2d2      	uxtb	r2, r2
 8003624:	701a      	strb	r2, [r3, #0]
	*(balanceMsg + 5) = (cell16Flag << 7) | (cell15Flag << 6) | (cell14Flag << 5) | (cell13Flag << 4) | (cell12Flag << 3) | (cell11Flag << 2) | (cell10Flag << 1) | (cell9Flag << 0);
 8003626:	f997 3018 	ldrsb.w	r3, [r7, #24]
 800362a:	01db      	lsls	r3, r3, #7
 800362c:	b25a      	sxtb	r2, r3
 800362e:	f997 3019 	ldrsb.w	r3, [r7, #25]
 8003632:	019b      	lsls	r3, r3, #6
 8003634:	b25b      	sxtb	r3, r3
 8003636:	4313      	orrs	r3, r2
 8003638:	b25a      	sxtb	r2, r3
 800363a:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800363e:	015b      	lsls	r3, r3, #5
 8003640:	b25b      	sxtb	r3, r3
 8003642:	4313      	orrs	r3, r2
 8003644:	b25a      	sxtb	r2, r3
 8003646:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800364a:	011b      	lsls	r3, r3, #4
 800364c:	b25b      	sxtb	r3, r3
 800364e:	4313      	orrs	r3, r2
 8003650:	b25a      	sxtb	r2, r3
 8003652:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8003656:	00db      	lsls	r3, r3, #3
 8003658:	b25b      	sxtb	r3, r3
 800365a:	4313      	orrs	r3, r2
 800365c:	b25a      	sxtb	r2, r3
 800365e:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8003662:	009b      	lsls	r3, r3, #2
 8003664:	b25b      	sxtb	r3, r3
 8003666:	4313      	orrs	r3, r2
 8003668:	b25a      	sxtb	r2, r3
 800366a:	f997 301e 	ldrsb.w	r3, [r7, #30]
 800366e:	005b      	lsls	r3, r3, #1
 8003670:	b25b      	sxtb	r3, r3
 8003672:	4313      	orrs	r3, r2
 8003674:	b25a      	sxtb	r2, r3
 8003676:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800367a:	4313      	orrs	r3, r2
 800367c:	b25a      	sxtb	r2, r3
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	3305      	adds	r3, #5
 8003682:	b2d2      	uxtb	r2, r2
 8003684:	701a      	strb	r2, [r3, #0]
	*(balanceMsg + 6) = (cell20Flag << 3) | (cell19Flag << 2) | (cell18Flag << 1) | (cell17Flag << 0);
 8003686:	f997 3014 	ldrsb.w	r3, [r7, #20]
 800368a:	00db      	lsls	r3, r3, #3
 800368c:	b25a      	sxtb	r2, r3
 800368e:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8003692:	009b      	lsls	r3, r3, #2
 8003694:	b25b      	sxtb	r3, r3
 8003696:	4313      	orrs	r3, r2
 8003698:	b25a      	sxtb	r2, r3
 800369a:	f997 3016 	ldrsb.w	r3, [r7, #22]
 800369e:	005b      	lsls	r3, r3, #1
 80036a0:	b25b      	sxtb	r3, r3
 80036a2:	4313      	orrs	r3, r2
 80036a4:	b25a      	sxtb	r2, r3
 80036a6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80036aa:	4313      	orrs	r3, r2
 80036ac:	b25a      	sxtb	r2, r3
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	3306      	adds	r3, #6
 80036b2:	b2d2      	uxtb	r2, r2
 80036b4:	701a      	strb	r2, [r3, #0]
}
 80036b6:	bf00      	nop
 80036b8:	372c      	adds	r7, #44	@ 0x2c
 80036ba:	46bd      	mov	sp, r7
 80036bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c0:	4770      	bx	lr
 80036c2:	bf00      	nop

080036c4 <config_DCC_bits>:


void config_DCC_bits(uint8_t *cellsToBalance, uint8_t cellsToBalanceQty, uint8_t *payloadRegisterA, uint8_t DCTO)
{
 80036c4:	b480      	push	{r7}
 80036c6:	b089      	sub	sp, #36	@ 0x24
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	60f8      	str	r0, [r7, #12]
 80036cc:	607a      	str	r2, [r7, #4]
 80036ce:	461a      	mov	r2, r3
 80036d0:	460b      	mov	r3, r1
 80036d2:	72fb      	strb	r3, [r7, #11]
 80036d4:	4613      	mov	r3, r2
 80036d6:	72bb      	strb	r3, [r7, #10]
	uint8_t DCC1 = 0;
 80036d8:	2300      	movs	r3, #0
 80036da:	77fb      	strb	r3, [r7, #31]
	uint8_t DCC2 = 0;
 80036dc:	2300      	movs	r3, #0
 80036de:	77bb      	strb	r3, [r7, #30]
	uint8_t DCC3 = 0;
 80036e0:	2300      	movs	r3, #0
 80036e2:	777b      	strb	r3, [r7, #29]
	uint8_t DCC4 = 0;
 80036e4:	2300      	movs	r3, #0
 80036e6:	773b      	strb	r3, [r7, #28]
	uint8_t DCC5 = 0;
 80036e8:	2300      	movs	r3, #0
 80036ea:	76fb      	strb	r3, [r7, #27]
	uint8_t DCC6 = 0;
 80036ec:	2300      	movs	r3, #0
 80036ee:	76bb      	strb	r3, [r7, #26]
	uint8_t DCC7 = 0;
 80036f0:	2300      	movs	r3, #0
 80036f2:	767b      	strb	r3, [r7, #25]
	uint8_t DCC8 = 0;
 80036f4:	2300      	movs	r3, #0
 80036f6:	763b      	strb	r3, [r7, #24]
	uint8_t DCC9 = 0;
 80036f8:	2300      	movs	r3, #0
 80036fa:	75fb      	strb	r3, [r7, #23]
	uint8_t DCC10 = 0;
 80036fc:	2300      	movs	r3, #0
 80036fe:	75bb      	strb	r3, [r7, #22]
	uint8_t DCC11 = 0;
 8003700:	2300      	movs	r3, #0
 8003702:	753b      	strb	r3, [r7, #20]
	uint8_t DCC12 = 0;
 8003704:	2300      	movs	r3, #0
 8003706:	74fb      	strb	r3, [r7, #19]

	for(uint8_t i = 0; i < cellsToBalanceQty; i++) {
 8003708:	2300      	movs	r3, #0
 800370a:	757b      	strb	r3, [r7, #21]
 800370c:	e03f      	b.n	800378e <config_DCC_bits+0xca>
		switch(*(cellsToBalance + i)) {
 800370e:	7d7b      	ldrb	r3, [r7, #21]
 8003710:	68fa      	ldr	r2, [r7, #12]
 8003712:	4413      	add	r3, r2
 8003714:	781b      	ldrb	r3, [r3, #0]
 8003716:	3b01      	subs	r3, #1
 8003718:	2b09      	cmp	r3, #9
 800371a:	d835      	bhi.n	8003788 <config_DCC_bits+0xc4>
 800371c:	a201      	add	r2, pc, #4	@ (adr r2, 8003724 <config_DCC_bits+0x60>)
 800371e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003722:	bf00      	nop
 8003724:	0800374d 	.word	0x0800374d
 8003728:	08003753 	.word	0x08003753
 800372c:	08003759 	.word	0x08003759
 8003730:	0800375f 	.word	0x0800375f
 8003734:	08003765 	.word	0x08003765
 8003738:	0800376b 	.word	0x0800376b
 800373c:	08003771 	.word	0x08003771
 8003740:	08003777 	.word	0x08003777
 8003744:	0800377d 	.word	0x0800377d
 8003748:	08003783 	.word	0x08003783
			case 1:
				DCC1 = 1;
 800374c:	2301      	movs	r3, #1
 800374e:	77fb      	strb	r3, [r7, #31]
				break;
 8003750:	e01a      	b.n	8003788 <config_DCC_bits+0xc4>
			case 2:
				DCC2 = 1;
 8003752:	2301      	movs	r3, #1
 8003754:	77bb      	strb	r3, [r7, #30]
				break;
 8003756:	e017      	b.n	8003788 <config_DCC_bits+0xc4>
			case 3:
				DCC3 = 1;
 8003758:	2301      	movs	r3, #1
 800375a:	777b      	strb	r3, [r7, #29]
				break;
 800375c:	e014      	b.n	8003788 <config_DCC_bits+0xc4>
			case 4:
				DCC4 = 1;
 800375e:	2301      	movs	r3, #1
 8003760:	773b      	strb	r3, [r7, #28]
				break;
 8003762:	e011      	b.n	8003788 <config_DCC_bits+0xc4>
			case 5:
				DCC5 = 1;
 8003764:	2301      	movs	r3, #1
 8003766:	76fb      	strb	r3, [r7, #27]
				break;
 8003768:	e00e      	b.n	8003788 <config_DCC_bits+0xc4>
			case 6:
				DCC6 = 1;
 800376a:	2301      	movs	r3, #1
 800376c:	76bb      	strb	r3, [r7, #26]
				break;
 800376e:	e00b      	b.n	8003788 <config_DCC_bits+0xc4>
			case 7:
				DCC7 = 1;
 8003770:	2301      	movs	r3, #1
 8003772:	767b      	strb	r3, [r7, #25]
				break;
 8003774:	e008      	b.n	8003788 <config_DCC_bits+0xc4>
			case 8:
				DCC8 = 1;
 8003776:	2301      	movs	r3, #1
 8003778:	763b      	strb	r3, [r7, #24]
				break;
 800377a:	e005      	b.n	8003788 <config_DCC_bits+0xc4>
			case 9:
				DCC9 = 1;
 800377c:	2301      	movs	r3, #1
 800377e:	75fb      	strb	r3, [r7, #23]
				break;
 8003780:	e002      	b.n	8003788 <config_DCC_bits+0xc4>
			case 10:
				DCC10 = 1;
 8003782:	2301      	movs	r3, #1
 8003784:	75bb      	strb	r3, [r7, #22]
				break;
 8003786:	bf00      	nop
	for(uint8_t i = 0; i < cellsToBalanceQty; i++) {
 8003788:	7d7b      	ldrb	r3, [r7, #21]
 800378a:	3301      	adds	r3, #1
 800378c:	757b      	strb	r3, [r7, #21]
 800378e:	7d7a      	ldrb	r2, [r7, #21]
 8003790:	7afb      	ldrb	r3, [r7, #11]
 8003792:	429a      	cmp	r2, r3
 8003794:	d3bb      	bcc.n	800370e <config_DCC_bits+0x4a>
		}
	}
	*(payloadRegisterA + 4) = (DCC8 << 7) | (DCC7 << 6) | (DCC6 << 5) | (DCC5 << 4) | (DCC4 << 3) | (DCC3 << 2) | (DCC2 << 1) | (DCC1 << 0);
 8003796:	f997 3018 	ldrsb.w	r3, [r7, #24]
 800379a:	01db      	lsls	r3, r3, #7
 800379c:	b25a      	sxtb	r2, r3
 800379e:	f997 3019 	ldrsb.w	r3, [r7, #25]
 80037a2:	019b      	lsls	r3, r3, #6
 80037a4:	b25b      	sxtb	r3, r3
 80037a6:	4313      	orrs	r3, r2
 80037a8:	b25a      	sxtb	r2, r3
 80037aa:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80037ae:	015b      	lsls	r3, r3, #5
 80037b0:	b25b      	sxtb	r3, r3
 80037b2:	4313      	orrs	r3, r2
 80037b4:	b25a      	sxtb	r2, r3
 80037b6:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80037ba:	011b      	lsls	r3, r3, #4
 80037bc:	b25b      	sxtb	r3, r3
 80037be:	4313      	orrs	r3, r2
 80037c0:	b25a      	sxtb	r2, r3
 80037c2:	f997 301c 	ldrsb.w	r3, [r7, #28]
 80037c6:	00db      	lsls	r3, r3, #3
 80037c8:	b25b      	sxtb	r3, r3
 80037ca:	4313      	orrs	r3, r2
 80037cc:	b25a      	sxtb	r2, r3
 80037ce:	f997 301d 	ldrsb.w	r3, [r7, #29]
 80037d2:	009b      	lsls	r3, r3, #2
 80037d4:	b25b      	sxtb	r3, r3
 80037d6:	4313      	orrs	r3, r2
 80037d8:	b25a      	sxtb	r2, r3
 80037da:	f997 301e 	ldrsb.w	r3, [r7, #30]
 80037de:	005b      	lsls	r3, r3, #1
 80037e0:	b25b      	sxtb	r3, r3
 80037e2:	4313      	orrs	r3, r2
 80037e4:	b25a      	sxtb	r2, r3
 80037e6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80037ea:	4313      	orrs	r3, r2
 80037ec:	b25a      	sxtb	r2, r3
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	3304      	adds	r3, #4
 80037f2:	b2d2      	uxtb	r2, r2
 80037f4:	701a      	strb	r2, [r3, #0]
	*(payloadRegisterA + 5) = (DCTO << 4) | (DCC12 << 3) | (DCC11 << 2) | (DCC10 << 1) | (DCC9 << 0);
 80037f6:	f997 300a 	ldrsb.w	r3, [r7, #10]
 80037fa:	011b      	lsls	r3, r3, #4
 80037fc:	b25a      	sxtb	r2, r3
 80037fe:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8003802:	00db      	lsls	r3, r3, #3
 8003804:	b25b      	sxtb	r3, r3
 8003806:	4313      	orrs	r3, r2
 8003808:	b25a      	sxtb	r2, r3
 800380a:	f997 3014 	ldrsb.w	r3, [r7, #20]
 800380e:	009b      	lsls	r3, r3, #2
 8003810:	b25b      	sxtb	r3, r3
 8003812:	4313      	orrs	r3, r2
 8003814:	b25a      	sxtb	r2, r3
 8003816:	f997 3016 	ldrsb.w	r3, [r7, #22]
 800381a:	005b      	lsls	r3, r3, #1
 800381c:	b25b      	sxtb	r3, r3
 800381e:	4313      	orrs	r3, r2
 8003820:	b25a      	sxtb	r2, r3
 8003822:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003826:	4313      	orrs	r3, r2
 8003828:	b25a      	sxtb	r2, r3
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	3305      	adds	r3, #5
 800382e:	b2d2      	uxtb	r2, r2
 8003830:	701a      	strb	r2, [r3, #0]
}
 8003832:	bf00      	nop
 8003834:	3724      	adds	r7, #36	@ 0x24
 8003836:	46bd      	mov	sp, r7
 8003838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383c:	4770      	bx	lr
 800383e:	bf00      	nop

08003840 <config_PWM_bits>:


void config_PWM_bits(uint8_t *cellsToBalance, uint8_t cellsToBalanceQty, uint8_t *payloadRegisterPWM, uint16_t *cellVoltages, uint8_t side)
{
 8003840:	b480      	push	{r7}
 8003842:	b091      	sub	sp, #68	@ 0x44
 8003844:	af00      	add	r7, sp, #0
 8003846:	60f8      	str	r0, [r7, #12]
 8003848:	607a      	str	r2, [r7, #4]
 800384a:	603b      	str	r3, [r7, #0]
 800384c:	460b      	mov	r3, r1
 800384e:	72fb      	strb	r3, [r7, #11]
	uint8_t PWM1_0 = 1;
 8003850:	2301      	movs	r3, #1
 8003852:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	uint8_t PWM1_1 = 1;
 8003856:	2301      	movs	r3, #1
 8003858:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
	uint8_t PWM1_2 = 1;
 800385c:	2301      	movs	r3, #1
 800385e:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
	uint8_t PWM1_3 = 1;
 8003862:	2301      	movs	r3, #1
 8003864:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28

	uint8_t PWM2_0 = 1;
 8003868:	2301      	movs	r3, #1
 800386a:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
	uint8_t PWM2_1 = 1;
 800386e:	2301      	movs	r3, #1
 8003870:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
	uint8_t PWM2_2 = 1;
 8003874:	2301      	movs	r3, #1
 8003876:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	uint8_t PWM2_3 = 1;
 800387a:	2301      	movs	r3, #1
 800387c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

	uint8_t PWM3_0 = 1;
 8003880:	2301      	movs	r3, #1
 8003882:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
	uint8_t PWM3_1 = 1;
 8003886:	2301      	movs	r3, #1
 8003888:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
	uint8_t PWM3_2 = 1;
 800388c:	2301      	movs	r3, #1
 800388e:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
	uint8_t PWM3_3 = 1;
 8003892:	2301      	movs	r3, #1
 8003894:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24

	uint8_t PWM4_0 = 1;
 8003898:	2301      	movs	r3, #1
 800389a:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
	uint8_t PWM4_1 = 1;
 800389e:	2301      	movs	r3, #1
 80038a0:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
	uint8_t PWM4_2 = 1;
 80038a4:	2301      	movs	r3, #1
 80038a6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
	uint8_t PWM4_3 = 1;
 80038aa:	2301      	movs	r3, #1
 80038ac:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22

	uint8_t PWM5_0 = 1;
 80038b0:	2301      	movs	r3, #1
 80038b2:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	uint8_t PWM5_1 = 1;
 80038b6:	2301      	movs	r3, #1
 80038b8:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
	uint8_t PWM5_2 = 1;
 80038bc:	2301      	movs	r3, #1
 80038be:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
	uint8_t PWM5_3 = 1;
 80038c2:	2301      	movs	r3, #1
 80038c4:	f887 3020 	strb.w	r3, [r7, #32]

	uint8_t PWM6_0 = 1;
 80038c8:	2301      	movs	r3, #1
 80038ca:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
	uint8_t PWM6_1 = 1;
 80038ce:	2301      	movs	r3, #1
 80038d0:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
	uint8_t PWM6_2 = 1;
 80038d4:	2301      	movs	r3, #1
 80038d6:	77fb      	strb	r3, [r7, #31]
	uint8_t PWM6_3 = 1;
 80038d8:	2301      	movs	r3, #1
 80038da:	77bb      	strb	r3, [r7, #30]

	uint8_t PWM7_0 = 1;
 80038dc:	2301      	movs	r3, #1
 80038de:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
	uint8_t PWM7_1 = 1;
 80038e2:	2301      	movs	r3, #1
 80038e4:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
	uint8_t PWM7_2 = 1;
 80038e8:	2301      	movs	r3, #1
 80038ea:	777b      	strb	r3, [r7, #29]
	uint8_t PWM7_3 = 1;
 80038ec:	2301      	movs	r3, #1
 80038ee:	773b      	strb	r3, [r7, #28]

	uint8_t PWM8_0 = 1;
 80038f0:	2301      	movs	r3, #1
 80038f2:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
	uint8_t PWM8_1 = 1;
 80038f6:	2301      	movs	r3, #1
 80038f8:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
	uint8_t PWM8_2 = 1;
 80038fc:	2301      	movs	r3, #1
 80038fe:	76fb      	strb	r3, [r7, #27]
	uint8_t PWM8_3 = 1;
 8003900:	2301      	movs	r3, #1
 8003902:	76bb      	strb	r3, [r7, #26]

	uint8_t PWM9_0 = 1;
 8003904:	2301      	movs	r3, #1
 8003906:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	uint8_t PWM9_1 = 1;
 800390a:	2301      	movs	r3, #1
 800390c:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
	uint8_t PWM9_2 = 1;
 8003910:	2301      	movs	r3, #1
 8003912:	767b      	strb	r3, [r7, #25]
	uint8_t PWM9_3 = 1;
 8003914:	2301      	movs	r3, #1
 8003916:	763b      	strb	r3, [r7, #24]

	uint8_t PWM10_0 = 1;
 8003918:	2301      	movs	r3, #1
 800391a:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
	uint8_t PWM10_1 = 1;
 800391e:	2301      	movs	r3, #1
 8003920:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
	uint8_t PWM10_2 = 1;
 8003924:	2301      	movs	r3, #1
 8003926:	75fb      	strb	r3, [r7, #23]
	uint8_t PWM10_3 = 1;
 8003928:	2301      	movs	r3, #1
 800392a:	75bb      	strb	r3, [r7, #22]

	switch(side) {
 800392c:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 8003930:	2b00      	cmp	r3, #0
 8003932:	f000 8294 	beq.w	8003e5e <config_PWM_bits+0x61e>
 8003936:	2b01      	cmp	r3, #1
 8003938:	f040 8529 	bne.w	800438e <config_PWM_bits+0xb4e>
		case SIDE_A:
			for(uint8_t i = 0; i < cellsToBalanceQty; i++) {
 800393c:	2300      	movs	r3, #0
 800393e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003942:	e285      	b.n	8003e50 <config_PWM_bits+0x610>
				switch(*(cellsToBalance + i)) {
 8003944:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003948:	68fa      	ldr	r2, [r7, #12]
 800394a:	4413      	add	r3, r2
 800394c:	781b      	ldrb	r3, [r3, #0]
 800394e:	3b01      	subs	r3, #1
 8003950:	2b09      	cmp	r3, #9
 8003952:	f200 8278 	bhi.w	8003e46 <config_PWM_bits+0x606>
 8003956:	a201      	add	r2, pc, #4	@ (adr r2, 800395c <config_PWM_bits+0x11c>)
 8003958:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800395c:	08003985 	.word	0x08003985
 8003960:	080039f1 	.word	0x080039f1
 8003964:	08003a69 	.word	0x08003a69
 8003968:	08003ae1 	.word	0x08003ae1
 800396c:	08003b59 	.word	0x08003b59
 8003970:	08003bd1 	.word	0x08003bd1
 8003974:	08003c49 	.word	0x08003c49
 8003978:	08003cc1 	.word	0x08003cc1
 800397c:	08003d39 	.word	0x08003d39
 8003980:	08003dad 	.word	0x08003dad
					case 1:
						if(*cellVoltages < 42000 && *cellVoltages >= 40000) {
 8003984:	683b      	ldr	r3, [r7, #0]
 8003986:	881b      	ldrh	r3, [r3, #0]
 8003988:	f24a 420f 	movw	r2, #41999	@ 0xa40f
 800398c:	4293      	cmp	r3, r2
 800398e:	d80c      	bhi.n	80039aa <config_PWM_bits+0x16a>
 8003990:	683b      	ldr	r3, [r7, #0]
 8003992:	881b      	ldrh	r3, [r3, #0]
 8003994:	f649 423f 	movw	r2, #39999	@ 0x9c3f
 8003998:	4293      	cmp	r3, r2
 800399a:	d906      	bls.n	80039aa <config_PWM_bits+0x16a>
							PWM1_1 = 0;
 800399c:	2300      	movs	r3, #0
 800399e:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
							PWM1_0 = 0;
 80039a2:	2300      	movs	r3, #0
 80039a4:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 80039a8:	e021      	b.n	80039ee <config_PWM_bits+0x1ae>
						}
						else if(*cellVoltages < 40000 && *cellVoltages >= 39000) {
 80039aa:	683b      	ldr	r3, [r7, #0]
 80039ac:	881b      	ldrh	r3, [r3, #0]
 80039ae:	f649 423f 	movw	r2, #39999	@ 0x9c3f
 80039b2:	4293      	cmp	r3, r2
 80039b4:	d809      	bhi.n	80039ca <config_PWM_bits+0x18a>
 80039b6:	683b      	ldr	r3, [r7, #0]
 80039b8:	881b      	ldrh	r3, [r3, #0]
 80039ba:	f649 0257 	movw	r2, #38999	@ 0x9857
 80039be:	4293      	cmp	r3, r2
 80039c0:	d903      	bls.n	80039ca <config_PWM_bits+0x18a>
							PWM1_1 = 0;
 80039c2:	2300      	movs	r3, #0
 80039c4:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
 80039c8:	e011      	b.n	80039ee <config_PWM_bits+0x1ae>
						}
						else if(*cellVoltages < 39000 && *cellVoltages >= 38000) {
 80039ca:	683b      	ldr	r3, [r7, #0]
 80039cc:	881b      	ldrh	r3, [r3, #0]
 80039ce:	f649 0257 	movw	r2, #38999	@ 0x9857
 80039d2:	4293      	cmp	r3, r2
 80039d4:	f200 8224 	bhi.w	8003e20 <config_PWM_bits+0x5e0>
 80039d8:	683b      	ldr	r3, [r7, #0]
 80039da:	881b      	ldrh	r3, [r3, #0]
 80039dc:	f249 426f 	movw	r2, #37999	@ 0x946f
 80039e0:	4293      	cmp	r3, r2
 80039e2:	f240 821d 	bls.w	8003e20 <config_PWM_bits+0x5e0>
							PWM1_0 = 0;
 80039e6:	2300      	movs	r3, #0
 80039e8:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
						}
						break;
 80039ec:	e218      	b.n	8003e20 <config_PWM_bits+0x5e0>
 80039ee:	e217      	b.n	8003e20 <config_PWM_bits+0x5e0>
					case 2:
						if(*(cellVoltages + 1) < 42000 && *(cellVoltages + 1) >= 40000) {
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	3302      	adds	r3, #2
 80039f4:	881b      	ldrh	r3, [r3, #0]
 80039f6:	f24a 420f 	movw	r2, #41999	@ 0xa40f
 80039fa:	4293      	cmp	r3, r2
 80039fc:	d80d      	bhi.n	8003a1a <config_PWM_bits+0x1da>
 80039fe:	683b      	ldr	r3, [r7, #0]
 8003a00:	3302      	adds	r3, #2
 8003a02:	881b      	ldrh	r3, [r3, #0]
 8003a04:	f649 423f 	movw	r2, #39999	@ 0x9c3f
 8003a08:	4293      	cmp	r3, r2
 8003a0a:	d906      	bls.n	8003a1a <config_PWM_bits+0x1da>
							PWM2_1 = 0;
 8003a0c:	2300      	movs	r3, #0
 8003a0e:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
							PWM2_0 = 0;
 8003a12:	2300      	movs	r3, #0
 8003a14:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
 8003a18:	e025      	b.n	8003a66 <config_PWM_bits+0x226>
						}
						else if(*(cellVoltages + 1) < 40000 && *(cellVoltages + 1) >= 39000) {
 8003a1a:	683b      	ldr	r3, [r7, #0]
 8003a1c:	3302      	adds	r3, #2
 8003a1e:	881b      	ldrh	r3, [r3, #0]
 8003a20:	f649 423f 	movw	r2, #39999	@ 0x9c3f
 8003a24:	4293      	cmp	r3, r2
 8003a26:	d80a      	bhi.n	8003a3e <config_PWM_bits+0x1fe>
 8003a28:	683b      	ldr	r3, [r7, #0]
 8003a2a:	3302      	adds	r3, #2
 8003a2c:	881b      	ldrh	r3, [r3, #0]
 8003a2e:	f649 0257 	movw	r2, #38999	@ 0x9857
 8003a32:	4293      	cmp	r3, r2
 8003a34:	d903      	bls.n	8003a3e <config_PWM_bits+0x1fe>
							PWM2_1 = 0;
 8003a36:	2300      	movs	r3, #0
 8003a38:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
 8003a3c:	e013      	b.n	8003a66 <config_PWM_bits+0x226>
						}
						else if(*(cellVoltages + 1) < 39000 && *(cellVoltages + 1) >= 38000) {
 8003a3e:	683b      	ldr	r3, [r7, #0]
 8003a40:	3302      	adds	r3, #2
 8003a42:	881b      	ldrh	r3, [r3, #0]
 8003a44:	f649 0257 	movw	r2, #38999	@ 0x9857
 8003a48:	4293      	cmp	r3, r2
 8003a4a:	f200 81eb 	bhi.w	8003e24 <config_PWM_bits+0x5e4>
 8003a4e:	683b      	ldr	r3, [r7, #0]
 8003a50:	3302      	adds	r3, #2
 8003a52:	881b      	ldrh	r3, [r3, #0]
 8003a54:	f249 426f 	movw	r2, #37999	@ 0x946f
 8003a58:	4293      	cmp	r3, r2
 8003a5a:	f240 81e3 	bls.w	8003e24 <config_PWM_bits+0x5e4>
							PWM2_0 = 0;
 8003a5e:	2300      	movs	r3, #0
 8003a60:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
						}
						break;
 8003a64:	e1de      	b.n	8003e24 <config_PWM_bits+0x5e4>
 8003a66:	e1dd      	b.n	8003e24 <config_PWM_bits+0x5e4>
					case 3:
						if(*(cellVoltages + 2) < 42000 && *(cellVoltages + 2) >= 40000) {
 8003a68:	683b      	ldr	r3, [r7, #0]
 8003a6a:	3304      	adds	r3, #4
 8003a6c:	881b      	ldrh	r3, [r3, #0]
 8003a6e:	f24a 420f 	movw	r2, #41999	@ 0xa40f
 8003a72:	4293      	cmp	r3, r2
 8003a74:	d80d      	bhi.n	8003a92 <config_PWM_bits+0x252>
 8003a76:	683b      	ldr	r3, [r7, #0]
 8003a78:	3304      	adds	r3, #4
 8003a7a:	881b      	ldrh	r3, [r3, #0]
 8003a7c:	f649 423f 	movw	r2, #39999	@ 0x9c3f
 8003a80:	4293      	cmp	r3, r2
 8003a82:	d906      	bls.n	8003a92 <config_PWM_bits+0x252>
							PWM3_1 = 0;
 8003a84:	2300      	movs	r3, #0
 8003a86:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
							PWM3_0 = 0;
 8003a8a:	2300      	movs	r3, #0
 8003a8c:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
 8003a90:	e025      	b.n	8003ade <config_PWM_bits+0x29e>
						}
						else if(*(cellVoltages + 2) < 40000 && *(cellVoltages + 2) >= 39000) {
 8003a92:	683b      	ldr	r3, [r7, #0]
 8003a94:	3304      	adds	r3, #4
 8003a96:	881b      	ldrh	r3, [r3, #0]
 8003a98:	f649 423f 	movw	r2, #39999	@ 0x9c3f
 8003a9c:	4293      	cmp	r3, r2
 8003a9e:	d80a      	bhi.n	8003ab6 <config_PWM_bits+0x276>
 8003aa0:	683b      	ldr	r3, [r7, #0]
 8003aa2:	3304      	adds	r3, #4
 8003aa4:	881b      	ldrh	r3, [r3, #0]
 8003aa6:	f649 0257 	movw	r2, #38999	@ 0x9857
 8003aaa:	4293      	cmp	r3, r2
 8003aac:	d903      	bls.n	8003ab6 <config_PWM_bits+0x276>
							PWM3_1 = 0;
 8003aae:	2300      	movs	r3, #0
 8003ab0:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
 8003ab4:	e013      	b.n	8003ade <config_PWM_bits+0x29e>
						}
						else if(*(cellVoltages + 2) < 39000 && *(cellVoltages + 2) >= 38000) {
 8003ab6:	683b      	ldr	r3, [r7, #0]
 8003ab8:	3304      	adds	r3, #4
 8003aba:	881b      	ldrh	r3, [r3, #0]
 8003abc:	f649 0257 	movw	r2, #38999	@ 0x9857
 8003ac0:	4293      	cmp	r3, r2
 8003ac2:	f200 81b1 	bhi.w	8003e28 <config_PWM_bits+0x5e8>
 8003ac6:	683b      	ldr	r3, [r7, #0]
 8003ac8:	3304      	adds	r3, #4
 8003aca:	881b      	ldrh	r3, [r3, #0]
 8003acc:	f249 426f 	movw	r2, #37999	@ 0x946f
 8003ad0:	4293      	cmp	r3, r2
 8003ad2:	f240 81a9 	bls.w	8003e28 <config_PWM_bits+0x5e8>
							PWM3_0 = 0;
 8003ad6:	2300      	movs	r3, #0
 8003ad8:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
						}
						break;
 8003adc:	e1a4      	b.n	8003e28 <config_PWM_bits+0x5e8>
 8003ade:	e1a3      	b.n	8003e28 <config_PWM_bits+0x5e8>
					case 4:
						if(*(cellVoltages + 3) < 42000 && *(cellVoltages + 3) >= 40000) {
 8003ae0:	683b      	ldr	r3, [r7, #0]
 8003ae2:	3306      	adds	r3, #6
 8003ae4:	881b      	ldrh	r3, [r3, #0]
 8003ae6:	f24a 420f 	movw	r2, #41999	@ 0xa40f
 8003aea:	4293      	cmp	r3, r2
 8003aec:	d80d      	bhi.n	8003b0a <config_PWM_bits+0x2ca>
 8003aee:	683b      	ldr	r3, [r7, #0]
 8003af0:	3306      	adds	r3, #6
 8003af2:	881b      	ldrh	r3, [r3, #0]
 8003af4:	f649 423f 	movw	r2, #39999	@ 0x9c3f
 8003af8:	4293      	cmp	r3, r2
 8003afa:	d906      	bls.n	8003b0a <config_PWM_bits+0x2ca>
							PWM4_1 = 0;
 8003afc:	2300      	movs	r3, #0
 8003afe:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
							PWM4_0 = 0;
 8003b02:	2300      	movs	r3, #0
 8003b04:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
 8003b08:	e025      	b.n	8003b56 <config_PWM_bits+0x316>
						}
						else if(*(cellVoltages + 3) < 40000 && *(cellVoltages + 3) >= 39000) {
 8003b0a:	683b      	ldr	r3, [r7, #0]
 8003b0c:	3306      	adds	r3, #6
 8003b0e:	881b      	ldrh	r3, [r3, #0]
 8003b10:	f649 423f 	movw	r2, #39999	@ 0x9c3f
 8003b14:	4293      	cmp	r3, r2
 8003b16:	d80a      	bhi.n	8003b2e <config_PWM_bits+0x2ee>
 8003b18:	683b      	ldr	r3, [r7, #0]
 8003b1a:	3306      	adds	r3, #6
 8003b1c:	881b      	ldrh	r3, [r3, #0]
 8003b1e:	f649 0257 	movw	r2, #38999	@ 0x9857
 8003b22:	4293      	cmp	r3, r2
 8003b24:	d903      	bls.n	8003b2e <config_PWM_bits+0x2ee>
							PWM4_1 = 0;
 8003b26:	2300      	movs	r3, #0
 8003b28:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
 8003b2c:	e013      	b.n	8003b56 <config_PWM_bits+0x316>
						}
						else if(*(cellVoltages + 3) < 39000 && *(cellVoltages + 3) >= 38000) {
 8003b2e:	683b      	ldr	r3, [r7, #0]
 8003b30:	3306      	adds	r3, #6
 8003b32:	881b      	ldrh	r3, [r3, #0]
 8003b34:	f649 0257 	movw	r2, #38999	@ 0x9857
 8003b38:	4293      	cmp	r3, r2
 8003b3a:	f200 8177 	bhi.w	8003e2c <config_PWM_bits+0x5ec>
 8003b3e:	683b      	ldr	r3, [r7, #0]
 8003b40:	3306      	adds	r3, #6
 8003b42:	881b      	ldrh	r3, [r3, #0]
 8003b44:	f249 426f 	movw	r2, #37999	@ 0x946f
 8003b48:	4293      	cmp	r3, r2
 8003b4a:	f240 816f 	bls.w	8003e2c <config_PWM_bits+0x5ec>
							PWM4_0 = 0;
 8003b4e:	2300      	movs	r3, #0
 8003b50:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
						}
						break;
 8003b54:	e16a      	b.n	8003e2c <config_PWM_bits+0x5ec>
 8003b56:	e169      	b.n	8003e2c <config_PWM_bits+0x5ec>
					case 5:
						if(*(cellVoltages + 4) < 42000 && *(cellVoltages + 4) >= 40000) {
 8003b58:	683b      	ldr	r3, [r7, #0]
 8003b5a:	3308      	adds	r3, #8
 8003b5c:	881b      	ldrh	r3, [r3, #0]
 8003b5e:	f24a 420f 	movw	r2, #41999	@ 0xa40f
 8003b62:	4293      	cmp	r3, r2
 8003b64:	d80d      	bhi.n	8003b82 <config_PWM_bits+0x342>
 8003b66:	683b      	ldr	r3, [r7, #0]
 8003b68:	3308      	adds	r3, #8
 8003b6a:	881b      	ldrh	r3, [r3, #0]
 8003b6c:	f649 423f 	movw	r2, #39999	@ 0x9c3f
 8003b70:	4293      	cmp	r3, r2
 8003b72:	d906      	bls.n	8003b82 <config_PWM_bits+0x342>
							PWM5_1 = 0;
 8003b74:	2300      	movs	r3, #0
 8003b76:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
							PWM5_0 = 0;
 8003b7a:	2300      	movs	r3, #0
 8003b7c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8003b80:	e025      	b.n	8003bce <config_PWM_bits+0x38e>
						}
						else if(*(cellVoltages + 4) < 40000 && *(cellVoltages + 4) >= 39000) {
 8003b82:	683b      	ldr	r3, [r7, #0]
 8003b84:	3308      	adds	r3, #8
 8003b86:	881b      	ldrh	r3, [r3, #0]
 8003b88:	f649 423f 	movw	r2, #39999	@ 0x9c3f
 8003b8c:	4293      	cmp	r3, r2
 8003b8e:	d80a      	bhi.n	8003ba6 <config_PWM_bits+0x366>
 8003b90:	683b      	ldr	r3, [r7, #0]
 8003b92:	3308      	adds	r3, #8
 8003b94:	881b      	ldrh	r3, [r3, #0]
 8003b96:	f649 0257 	movw	r2, #38999	@ 0x9857
 8003b9a:	4293      	cmp	r3, r2
 8003b9c:	d903      	bls.n	8003ba6 <config_PWM_bits+0x366>
							PWM5_1 = 0;
 8003b9e:	2300      	movs	r3, #0
 8003ba0:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
 8003ba4:	e013      	b.n	8003bce <config_PWM_bits+0x38e>
						}
						else if(*(cellVoltages + 4) < 39000 && *(cellVoltages + 4) >= 38000) {
 8003ba6:	683b      	ldr	r3, [r7, #0]
 8003ba8:	3308      	adds	r3, #8
 8003baa:	881b      	ldrh	r3, [r3, #0]
 8003bac:	f649 0257 	movw	r2, #38999	@ 0x9857
 8003bb0:	4293      	cmp	r3, r2
 8003bb2:	f200 813d 	bhi.w	8003e30 <config_PWM_bits+0x5f0>
 8003bb6:	683b      	ldr	r3, [r7, #0]
 8003bb8:	3308      	adds	r3, #8
 8003bba:	881b      	ldrh	r3, [r3, #0]
 8003bbc:	f249 426f 	movw	r2, #37999	@ 0x946f
 8003bc0:	4293      	cmp	r3, r2
 8003bc2:	f240 8135 	bls.w	8003e30 <config_PWM_bits+0x5f0>
							PWM5_0 = 0;
 8003bc6:	2300      	movs	r3, #0
 8003bc8:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
						}
						break;
 8003bcc:	e130      	b.n	8003e30 <config_PWM_bits+0x5f0>
 8003bce:	e12f      	b.n	8003e30 <config_PWM_bits+0x5f0>
					case 6:
						if(*(cellVoltages + 5) < 42000 && *(cellVoltages + 5) >= 40000) {
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	330a      	adds	r3, #10
 8003bd4:	881b      	ldrh	r3, [r3, #0]
 8003bd6:	f24a 420f 	movw	r2, #41999	@ 0xa40f
 8003bda:	4293      	cmp	r3, r2
 8003bdc:	d80d      	bhi.n	8003bfa <config_PWM_bits+0x3ba>
 8003bde:	683b      	ldr	r3, [r7, #0]
 8003be0:	330a      	adds	r3, #10
 8003be2:	881b      	ldrh	r3, [r3, #0]
 8003be4:	f649 423f 	movw	r2, #39999	@ 0x9c3f
 8003be8:	4293      	cmp	r3, r2
 8003bea:	d906      	bls.n	8003bfa <config_PWM_bits+0x3ba>
							PWM6_1 = 0;
 8003bec:	2300      	movs	r3, #0
 8003bee:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
							PWM6_0 = 0;
 8003bf2:	2300      	movs	r3, #0
 8003bf4:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
 8003bf8:	e025      	b.n	8003c46 <config_PWM_bits+0x406>
						}
						else if(*(cellVoltages + 5) < 40000 && *(cellVoltages + 5) >= 39000) {
 8003bfa:	683b      	ldr	r3, [r7, #0]
 8003bfc:	330a      	adds	r3, #10
 8003bfe:	881b      	ldrh	r3, [r3, #0]
 8003c00:	f649 423f 	movw	r2, #39999	@ 0x9c3f
 8003c04:	4293      	cmp	r3, r2
 8003c06:	d80a      	bhi.n	8003c1e <config_PWM_bits+0x3de>
 8003c08:	683b      	ldr	r3, [r7, #0]
 8003c0a:	330a      	adds	r3, #10
 8003c0c:	881b      	ldrh	r3, [r3, #0]
 8003c0e:	f649 0257 	movw	r2, #38999	@ 0x9857
 8003c12:	4293      	cmp	r3, r2
 8003c14:	d903      	bls.n	8003c1e <config_PWM_bits+0x3de>
							PWM6_1 = 0;
 8003c16:	2300      	movs	r3, #0
 8003c18:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
 8003c1c:	e013      	b.n	8003c46 <config_PWM_bits+0x406>
						}
						else if(*(cellVoltages + 5) < 39000 && *(cellVoltages + 5) >= 38000) {
 8003c1e:	683b      	ldr	r3, [r7, #0]
 8003c20:	330a      	adds	r3, #10
 8003c22:	881b      	ldrh	r3, [r3, #0]
 8003c24:	f649 0257 	movw	r2, #38999	@ 0x9857
 8003c28:	4293      	cmp	r3, r2
 8003c2a:	f200 8103 	bhi.w	8003e34 <config_PWM_bits+0x5f4>
 8003c2e:	683b      	ldr	r3, [r7, #0]
 8003c30:	330a      	adds	r3, #10
 8003c32:	881b      	ldrh	r3, [r3, #0]
 8003c34:	f249 426f 	movw	r2, #37999	@ 0x946f
 8003c38:	4293      	cmp	r3, r2
 8003c3a:	f240 80fb 	bls.w	8003e34 <config_PWM_bits+0x5f4>
							PWM6_0 = 0;
 8003c3e:	2300      	movs	r3, #0
 8003c40:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
						}
						break;
 8003c44:	e0f6      	b.n	8003e34 <config_PWM_bits+0x5f4>
 8003c46:	e0f5      	b.n	8003e34 <config_PWM_bits+0x5f4>
					case 7:
						if(*(cellVoltages + 6) < 42000 && *(cellVoltages + 6) >= 40000) {
 8003c48:	683b      	ldr	r3, [r7, #0]
 8003c4a:	330c      	adds	r3, #12
 8003c4c:	881b      	ldrh	r3, [r3, #0]
 8003c4e:	f24a 420f 	movw	r2, #41999	@ 0xa40f
 8003c52:	4293      	cmp	r3, r2
 8003c54:	d80d      	bhi.n	8003c72 <config_PWM_bits+0x432>
 8003c56:	683b      	ldr	r3, [r7, #0]
 8003c58:	330c      	adds	r3, #12
 8003c5a:	881b      	ldrh	r3, [r3, #0]
 8003c5c:	f649 423f 	movw	r2, #39999	@ 0x9c3f
 8003c60:	4293      	cmp	r3, r2
 8003c62:	d906      	bls.n	8003c72 <config_PWM_bits+0x432>
							PWM7_1 = 0;
 8003c64:	2300      	movs	r3, #0
 8003c66:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
							PWM7_0 = 0;
 8003c6a:	2300      	movs	r3, #0
 8003c6c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 8003c70:	e025      	b.n	8003cbe <config_PWM_bits+0x47e>
						}
						else if(*(cellVoltages + 6) < 40000 && *(cellVoltages + 6) >= 39000) {
 8003c72:	683b      	ldr	r3, [r7, #0]
 8003c74:	330c      	adds	r3, #12
 8003c76:	881b      	ldrh	r3, [r3, #0]
 8003c78:	f649 423f 	movw	r2, #39999	@ 0x9c3f
 8003c7c:	4293      	cmp	r3, r2
 8003c7e:	d80a      	bhi.n	8003c96 <config_PWM_bits+0x456>
 8003c80:	683b      	ldr	r3, [r7, #0]
 8003c82:	330c      	adds	r3, #12
 8003c84:	881b      	ldrh	r3, [r3, #0]
 8003c86:	f649 0257 	movw	r2, #38999	@ 0x9857
 8003c8a:	4293      	cmp	r3, r2
 8003c8c:	d903      	bls.n	8003c96 <config_PWM_bits+0x456>
							PWM7_1 = 0;
 8003c8e:	2300      	movs	r3, #0
 8003c90:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
 8003c94:	e013      	b.n	8003cbe <config_PWM_bits+0x47e>
						}
						else if(*(cellVoltages + 6) < 39000 && *(cellVoltages + 6) >= 38000) {
 8003c96:	683b      	ldr	r3, [r7, #0]
 8003c98:	330c      	adds	r3, #12
 8003c9a:	881b      	ldrh	r3, [r3, #0]
 8003c9c:	f649 0257 	movw	r2, #38999	@ 0x9857
 8003ca0:	4293      	cmp	r3, r2
 8003ca2:	f200 80c9 	bhi.w	8003e38 <config_PWM_bits+0x5f8>
 8003ca6:	683b      	ldr	r3, [r7, #0]
 8003ca8:	330c      	adds	r3, #12
 8003caa:	881b      	ldrh	r3, [r3, #0]
 8003cac:	f249 426f 	movw	r2, #37999	@ 0x946f
 8003cb0:	4293      	cmp	r3, r2
 8003cb2:	f240 80c1 	bls.w	8003e38 <config_PWM_bits+0x5f8>
							PWM7_0 = 0;
 8003cb6:	2300      	movs	r3, #0
 8003cb8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
						}
						break;
 8003cbc:	e0bc      	b.n	8003e38 <config_PWM_bits+0x5f8>
 8003cbe:	e0bb      	b.n	8003e38 <config_PWM_bits+0x5f8>
					case 8:
						if(*(cellVoltages + 7) < 42000 && *(cellVoltages + 7) >= 40000) {
 8003cc0:	683b      	ldr	r3, [r7, #0]
 8003cc2:	330e      	adds	r3, #14
 8003cc4:	881b      	ldrh	r3, [r3, #0]
 8003cc6:	f24a 420f 	movw	r2, #41999	@ 0xa40f
 8003cca:	4293      	cmp	r3, r2
 8003ccc:	d80d      	bhi.n	8003cea <config_PWM_bits+0x4aa>
 8003cce:	683b      	ldr	r3, [r7, #0]
 8003cd0:	330e      	adds	r3, #14
 8003cd2:	881b      	ldrh	r3, [r3, #0]
 8003cd4:	f649 423f 	movw	r2, #39999	@ 0x9c3f
 8003cd8:	4293      	cmp	r3, r2
 8003cda:	d906      	bls.n	8003cea <config_PWM_bits+0x4aa>
							PWM8_1 = 0;
 8003cdc:	2300      	movs	r3, #0
 8003cde:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
							PWM8_0 = 0;
 8003ce2:	2300      	movs	r3, #0
 8003ce4:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
 8003ce8:	e025      	b.n	8003d36 <config_PWM_bits+0x4f6>
						}
						else if(*(cellVoltages + 7) < 40000 && *(cellVoltages + 7) >= 39000) {
 8003cea:	683b      	ldr	r3, [r7, #0]
 8003cec:	330e      	adds	r3, #14
 8003cee:	881b      	ldrh	r3, [r3, #0]
 8003cf0:	f649 423f 	movw	r2, #39999	@ 0x9c3f
 8003cf4:	4293      	cmp	r3, r2
 8003cf6:	d80a      	bhi.n	8003d0e <config_PWM_bits+0x4ce>
 8003cf8:	683b      	ldr	r3, [r7, #0]
 8003cfa:	330e      	adds	r3, #14
 8003cfc:	881b      	ldrh	r3, [r3, #0]
 8003cfe:	f649 0257 	movw	r2, #38999	@ 0x9857
 8003d02:	4293      	cmp	r3, r2
 8003d04:	d903      	bls.n	8003d0e <config_PWM_bits+0x4ce>
							PWM8_1 = 0;
 8003d06:	2300      	movs	r3, #0
 8003d08:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
 8003d0c:	e013      	b.n	8003d36 <config_PWM_bits+0x4f6>
						}
						else if(*(cellVoltages + 7) < 39000 && *(cellVoltages + 7) >= 38000) {
 8003d0e:	683b      	ldr	r3, [r7, #0]
 8003d10:	330e      	adds	r3, #14
 8003d12:	881b      	ldrh	r3, [r3, #0]
 8003d14:	f649 0257 	movw	r2, #38999	@ 0x9857
 8003d18:	4293      	cmp	r3, r2
 8003d1a:	f200 808f 	bhi.w	8003e3c <config_PWM_bits+0x5fc>
 8003d1e:	683b      	ldr	r3, [r7, #0]
 8003d20:	330e      	adds	r3, #14
 8003d22:	881b      	ldrh	r3, [r3, #0]
 8003d24:	f249 426f 	movw	r2, #37999	@ 0x946f
 8003d28:	4293      	cmp	r3, r2
 8003d2a:	f240 8087 	bls.w	8003e3c <config_PWM_bits+0x5fc>
							PWM8_0 = 0;
 8003d2e:	2300      	movs	r3, #0
 8003d30:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
						}
						break;
 8003d34:	e082      	b.n	8003e3c <config_PWM_bits+0x5fc>
 8003d36:	e081      	b.n	8003e3c <config_PWM_bits+0x5fc>
					case 9:
						if(*(cellVoltages + 8) < 42000 && *(cellVoltages + 8) >= 40000) {
 8003d38:	683b      	ldr	r3, [r7, #0]
 8003d3a:	3310      	adds	r3, #16
 8003d3c:	881b      	ldrh	r3, [r3, #0]
 8003d3e:	f24a 420f 	movw	r2, #41999	@ 0xa40f
 8003d42:	4293      	cmp	r3, r2
 8003d44:	d80d      	bhi.n	8003d62 <config_PWM_bits+0x522>
 8003d46:	683b      	ldr	r3, [r7, #0]
 8003d48:	3310      	adds	r3, #16
 8003d4a:	881b      	ldrh	r3, [r3, #0]
 8003d4c:	f649 423f 	movw	r2, #39999	@ 0x9c3f
 8003d50:	4293      	cmp	r3, r2
 8003d52:	d906      	bls.n	8003d62 <config_PWM_bits+0x522>
							PWM9_1 = 0;
 8003d54:	2300      	movs	r3, #0
 8003d56:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
							PWM9_0 = 0;
 8003d5a:	2300      	movs	r3, #0
 8003d5c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8003d60:	e023      	b.n	8003daa <config_PWM_bits+0x56a>
						}
						else if(*(cellVoltages + 8) < 40000 && *(cellVoltages + 8) >= 39000) {
 8003d62:	683b      	ldr	r3, [r7, #0]
 8003d64:	3310      	adds	r3, #16
 8003d66:	881b      	ldrh	r3, [r3, #0]
 8003d68:	f649 423f 	movw	r2, #39999	@ 0x9c3f
 8003d6c:	4293      	cmp	r3, r2
 8003d6e:	d80a      	bhi.n	8003d86 <config_PWM_bits+0x546>
 8003d70:	683b      	ldr	r3, [r7, #0]
 8003d72:	3310      	adds	r3, #16
 8003d74:	881b      	ldrh	r3, [r3, #0]
 8003d76:	f649 0257 	movw	r2, #38999	@ 0x9857
 8003d7a:	4293      	cmp	r3, r2
 8003d7c:	d903      	bls.n	8003d86 <config_PWM_bits+0x546>
							PWM9_1 = 0;
 8003d7e:	2300      	movs	r3, #0
 8003d80:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 8003d84:	e011      	b.n	8003daa <config_PWM_bits+0x56a>
						}
						else if(*(cellVoltages + 8) < 39000 && *(cellVoltages + 8) >= 38000) {
 8003d86:	683b      	ldr	r3, [r7, #0]
 8003d88:	3310      	adds	r3, #16
 8003d8a:	881b      	ldrh	r3, [r3, #0]
 8003d8c:	f649 0257 	movw	r2, #38999	@ 0x9857
 8003d90:	4293      	cmp	r3, r2
 8003d92:	d855      	bhi.n	8003e40 <config_PWM_bits+0x600>
 8003d94:	683b      	ldr	r3, [r7, #0]
 8003d96:	3310      	adds	r3, #16
 8003d98:	881b      	ldrh	r3, [r3, #0]
 8003d9a:	f249 426f 	movw	r2, #37999	@ 0x946f
 8003d9e:	4293      	cmp	r3, r2
 8003da0:	d94e      	bls.n	8003e40 <config_PWM_bits+0x600>
							PWM9_0 = 0;
 8003da2:	2300      	movs	r3, #0
 8003da4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
						}
						break;
 8003da8:	e04a      	b.n	8003e40 <config_PWM_bits+0x600>
 8003daa:	e049      	b.n	8003e40 <config_PWM_bits+0x600>
					case 10:
						if(*(cellVoltages + 9) < 42000 && *(cellVoltages + 9) >= 40000) {
 8003dac:	683b      	ldr	r3, [r7, #0]
 8003dae:	3312      	adds	r3, #18
 8003db0:	881b      	ldrh	r3, [r3, #0]
 8003db2:	f24a 420f 	movw	r2, #41999	@ 0xa40f
 8003db6:	4293      	cmp	r3, r2
 8003db8:	d80d      	bhi.n	8003dd6 <config_PWM_bits+0x596>
 8003dba:	683b      	ldr	r3, [r7, #0]
 8003dbc:	3312      	adds	r3, #18
 8003dbe:	881b      	ldrh	r3, [r3, #0]
 8003dc0:	f649 423f 	movw	r2, #39999	@ 0x9c3f
 8003dc4:	4293      	cmp	r3, r2
 8003dc6:	d906      	bls.n	8003dd6 <config_PWM_bits+0x596>
							PWM10_1 = 0;
 8003dc8:	2300      	movs	r3, #0
 8003dca:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
							PWM10_0 = 0;
 8003dce:	2300      	movs	r3, #0
 8003dd0:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
 8003dd4:	e023      	b.n	8003e1e <config_PWM_bits+0x5de>
						}
						else if(*(cellVoltages + 9) < 40000 && *(cellVoltages + 9) >= 39000) {
 8003dd6:	683b      	ldr	r3, [r7, #0]
 8003dd8:	3312      	adds	r3, #18
 8003dda:	881b      	ldrh	r3, [r3, #0]
 8003ddc:	f649 423f 	movw	r2, #39999	@ 0x9c3f
 8003de0:	4293      	cmp	r3, r2
 8003de2:	d80a      	bhi.n	8003dfa <config_PWM_bits+0x5ba>
 8003de4:	683b      	ldr	r3, [r7, #0]
 8003de6:	3312      	adds	r3, #18
 8003de8:	881b      	ldrh	r3, [r3, #0]
 8003dea:	f649 0257 	movw	r2, #38999	@ 0x9857
 8003dee:	4293      	cmp	r3, r2
 8003df0:	d903      	bls.n	8003dfa <config_PWM_bits+0x5ba>
							PWM10_1 = 0;
 8003df2:	2300      	movs	r3, #0
 8003df4:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
 8003df8:	e011      	b.n	8003e1e <config_PWM_bits+0x5de>
						}
						else if(*(cellVoltages + 9) < 39000 && *(cellVoltages + 9) >= 38000) {
 8003dfa:	683b      	ldr	r3, [r7, #0]
 8003dfc:	3312      	adds	r3, #18
 8003dfe:	881b      	ldrh	r3, [r3, #0]
 8003e00:	f649 0257 	movw	r2, #38999	@ 0x9857
 8003e04:	4293      	cmp	r3, r2
 8003e06:	d81d      	bhi.n	8003e44 <config_PWM_bits+0x604>
 8003e08:	683b      	ldr	r3, [r7, #0]
 8003e0a:	3312      	adds	r3, #18
 8003e0c:	881b      	ldrh	r3, [r3, #0]
 8003e0e:	f249 426f 	movw	r2, #37999	@ 0x946f
 8003e12:	4293      	cmp	r3, r2
 8003e14:	d916      	bls.n	8003e44 <config_PWM_bits+0x604>
							PWM10_0 = 0;
 8003e16:	2300      	movs	r3, #0
 8003e18:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
						}
						break;
 8003e1c:	e012      	b.n	8003e44 <config_PWM_bits+0x604>
 8003e1e:	e011      	b.n	8003e44 <config_PWM_bits+0x604>
						break;
 8003e20:	bf00      	nop
 8003e22:	e010      	b.n	8003e46 <config_PWM_bits+0x606>
						break;
 8003e24:	bf00      	nop
 8003e26:	e00e      	b.n	8003e46 <config_PWM_bits+0x606>
						break;
 8003e28:	bf00      	nop
 8003e2a:	e00c      	b.n	8003e46 <config_PWM_bits+0x606>
						break;
 8003e2c:	bf00      	nop
 8003e2e:	e00a      	b.n	8003e46 <config_PWM_bits+0x606>
						break;
 8003e30:	bf00      	nop
 8003e32:	e008      	b.n	8003e46 <config_PWM_bits+0x606>
						break;
 8003e34:	bf00      	nop
 8003e36:	e006      	b.n	8003e46 <config_PWM_bits+0x606>
						break;
 8003e38:	bf00      	nop
 8003e3a:	e004      	b.n	8003e46 <config_PWM_bits+0x606>
						break;
 8003e3c:	bf00      	nop
 8003e3e:	e002      	b.n	8003e46 <config_PWM_bits+0x606>
						break;
 8003e40:	bf00      	nop
 8003e42:	e000      	b.n	8003e46 <config_PWM_bits+0x606>
						break;
 8003e44:	bf00      	nop
			for(uint8_t i = 0; i < cellsToBalanceQty; i++) {
 8003e46:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003e4a:	3301      	adds	r3, #1
 8003e4c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003e50:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 8003e54:	7afb      	ldrb	r3, [r7, #11]
 8003e56:	429a      	cmp	r2, r3
 8003e58:	f4ff ad74 	bcc.w	8003944 <config_PWM_bits+0x104>
				}
			}
			break;
 8003e5c:	e297      	b.n	800438e <config_PWM_bits+0xb4e>
		case SIDE_B:
			for(uint8_t i = 0; i < cellsToBalanceQty; i++) {
 8003e5e:	2300      	movs	r3, #0
 8003e60:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8003e64:	e28c      	b.n	8004380 <config_PWM_bits+0xb40>
				switch(*(cellsToBalance + i)) {
 8003e66:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8003e6a:	68fa      	ldr	r2, [r7, #12]
 8003e6c:	4413      	add	r3, r2
 8003e6e:	781b      	ldrb	r3, [r3, #0]
 8003e70:	3b01      	subs	r3, #1
 8003e72:	2b09      	cmp	r3, #9
 8003e74:	f200 827f 	bhi.w	8004376 <config_PWM_bits+0xb36>
 8003e78:	a201      	add	r2, pc, #4	@ (adr r2, 8003e80 <config_PWM_bits+0x640>)
 8003e7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e7e:	bf00      	nop
 8003e80:	08003ea9 	.word	0x08003ea9
 8003e84:	08003f21 	.word	0x08003f21
 8003e88:	08003f99 	.word	0x08003f99
 8003e8c:	08004011 	.word	0x08004011
 8003e90:	08004089 	.word	0x08004089
 8003e94:	08004101 	.word	0x08004101
 8003e98:	08004179 	.word	0x08004179
 8003e9c:	080041f1 	.word	0x080041f1
 8003ea0:	08004269 	.word	0x08004269
 8003ea4:	080042dd 	.word	0x080042dd
					case 1:
						if(*(cellVoltages + 10) < 42000 && *(cellVoltages + 10) >= 40000) {
 8003ea8:	683b      	ldr	r3, [r7, #0]
 8003eaa:	3314      	adds	r3, #20
 8003eac:	881b      	ldrh	r3, [r3, #0]
 8003eae:	f24a 420f 	movw	r2, #41999	@ 0xa40f
 8003eb2:	4293      	cmp	r3, r2
 8003eb4:	d80d      	bhi.n	8003ed2 <config_PWM_bits+0x692>
 8003eb6:	683b      	ldr	r3, [r7, #0]
 8003eb8:	3314      	adds	r3, #20
 8003eba:	881b      	ldrh	r3, [r3, #0]
 8003ebc:	f649 423f 	movw	r2, #39999	@ 0x9c3f
 8003ec0:	4293      	cmp	r3, r2
 8003ec2:	d906      	bls.n	8003ed2 <config_PWM_bits+0x692>
							PWM1_1 = 0;
 8003ec4:	2300      	movs	r3, #0
 8003ec6:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
							PWM1_0 = 0;
 8003eca:	2300      	movs	r3, #0
 8003ecc:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8003ed0:	e025      	b.n	8003f1e <config_PWM_bits+0x6de>
						}
						else if(*(cellVoltages + 10) < 40000 && *(cellVoltages + 10) >= 39000) {
 8003ed2:	683b      	ldr	r3, [r7, #0]
 8003ed4:	3314      	adds	r3, #20
 8003ed6:	881b      	ldrh	r3, [r3, #0]
 8003ed8:	f649 423f 	movw	r2, #39999	@ 0x9c3f
 8003edc:	4293      	cmp	r3, r2
 8003ede:	d80a      	bhi.n	8003ef6 <config_PWM_bits+0x6b6>
 8003ee0:	683b      	ldr	r3, [r7, #0]
 8003ee2:	3314      	adds	r3, #20
 8003ee4:	881b      	ldrh	r3, [r3, #0]
 8003ee6:	f649 0257 	movw	r2, #38999	@ 0x9857
 8003eea:	4293      	cmp	r3, r2
 8003eec:	d903      	bls.n	8003ef6 <config_PWM_bits+0x6b6>
							PWM1_1 = 0;
 8003eee:	2300      	movs	r3, #0
 8003ef0:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
 8003ef4:	e013      	b.n	8003f1e <config_PWM_bits+0x6de>
						}
						else if(*(cellVoltages + 10) < 39000 && *(cellVoltages + 10) >= 38000) {
 8003ef6:	683b      	ldr	r3, [r7, #0]
 8003ef8:	3314      	adds	r3, #20
 8003efa:	881b      	ldrh	r3, [r3, #0]
 8003efc:	f649 0257 	movw	r2, #38999	@ 0x9857
 8003f00:	4293      	cmp	r3, r2
 8003f02:	f200 8225 	bhi.w	8004350 <config_PWM_bits+0xb10>
 8003f06:	683b      	ldr	r3, [r7, #0]
 8003f08:	3314      	adds	r3, #20
 8003f0a:	881b      	ldrh	r3, [r3, #0]
 8003f0c:	f249 426f 	movw	r2, #37999	@ 0x946f
 8003f10:	4293      	cmp	r3, r2
 8003f12:	f240 821d 	bls.w	8004350 <config_PWM_bits+0xb10>
							PWM1_0 = 0;
 8003f16:	2300      	movs	r3, #0
 8003f18:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
						}
						break;
 8003f1c:	e218      	b.n	8004350 <config_PWM_bits+0xb10>
 8003f1e:	e217      	b.n	8004350 <config_PWM_bits+0xb10>
					case 2:
						if(*(cellVoltages + 11) < 42000 && *(cellVoltages + 11) >= 40000) {
 8003f20:	683b      	ldr	r3, [r7, #0]
 8003f22:	3316      	adds	r3, #22
 8003f24:	881b      	ldrh	r3, [r3, #0]
 8003f26:	f24a 420f 	movw	r2, #41999	@ 0xa40f
 8003f2a:	4293      	cmp	r3, r2
 8003f2c:	d80d      	bhi.n	8003f4a <config_PWM_bits+0x70a>
 8003f2e:	683b      	ldr	r3, [r7, #0]
 8003f30:	3316      	adds	r3, #22
 8003f32:	881b      	ldrh	r3, [r3, #0]
 8003f34:	f649 423f 	movw	r2, #39999	@ 0x9c3f
 8003f38:	4293      	cmp	r3, r2
 8003f3a:	d906      	bls.n	8003f4a <config_PWM_bits+0x70a>
							PWM2_1 = 0;
 8003f3c:	2300      	movs	r3, #0
 8003f3e:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
							PWM2_0 = 0;
 8003f42:	2300      	movs	r3, #0
 8003f44:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
 8003f48:	e025      	b.n	8003f96 <config_PWM_bits+0x756>
						}
						else if(*(cellVoltages + 11) < 40000 && *(cellVoltages + 11) >= 39000) {
 8003f4a:	683b      	ldr	r3, [r7, #0]
 8003f4c:	3316      	adds	r3, #22
 8003f4e:	881b      	ldrh	r3, [r3, #0]
 8003f50:	f649 423f 	movw	r2, #39999	@ 0x9c3f
 8003f54:	4293      	cmp	r3, r2
 8003f56:	d80a      	bhi.n	8003f6e <config_PWM_bits+0x72e>
 8003f58:	683b      	ldr	r3, [r7, #0]
 8003f5a:	3316      	adds	r3, #22
 8003f5c:	881b      	ldrh	r3, [r3, #0]
 8003f5e:	f649 0257 	movw	r2, #38999	@ 0x9857
 8003f62:	4293      	cmp	r3, r2
 8003f64:	d903      	bls.n	8003f6e <config_PWM_bits+0x72e>
							PWM2_1 = 0;
 8003f66:	2300      	movs	r3, #0
 8003f68:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
 8003f6c:	e013      	b.n	8003f96 <config_PWM_bits+0x756>
						}
						else if(*(cellVoltages + 11) < 39000 && *(cellVoltages + 11) >= 38000) {
 8003f6e:	683b      	ldr	r3, [r7, #0]
 8003f70:	3316      	adds	r3, #22
 8003f72:	881b      	ldrh	r3, [r3, #0]
 8003f74:	f649 0257 	movw	r2, #38999	@ 0x9857
 8003f78:	4293      	cmp	r3, r2
 8003f7a:	f200 81eb 	bhi.w	8004354 <config_PWM_bits+0xb14>
 8003f7e:	683b      	ldr	r3, [r7, #0]
 8003f80:	3316      	adds	r3, #22
 8003f82:	881b      	ldrh	r3, [r3, #0]
 8003f84:	f249 426f 	movw	r2, #37999	@ 0x946f
 8003f88:	4293      	cmp	r3, r2
 8003f8a:	f240 81e3 	bls.w	8004354 <config_PWM_bits+0xb14>
							PWM2_0 = 0;
 8003f8e:	2300      	movs	r3, #0
 8003f90:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
						}
						break;
 8003f94:	e1de      	b.n	8004354 <config_PWM_bits+0xb14>
 8003f96:	e1dd      	b.n	8004354 <config_PWM_bits+0xb14>
					case 3:
						if(*(cellVoltages + 12) < 42000 && *(cellVoltages + 12) >= 40000) {
 8003f98:	683b      	ldr	r3, [r7, #0]
 8003f9a:	3318      	adds	r3, #24
 8003f9c:	881b      	ldrh	r3, [r3, #0]
 8003f9e:	f24a 420f 	movw	r2, #41999	@ 0xa40f
 8003fa2:	4293      	cmp	r3, r2
 8003fa4:	d80d      	bhi.n	8003fc2 <config_PWM_bits+0x782>
 8003fa6:	683b      	ldr	r3, [r7, #0]
 8003fa8:	3318      	adds	r3, #24
 8003faa:	881b      	ldrh	r3, [r3, #0]
 8003fac:	f649 423f 	movw	r2, #39999	@ 0x9c3f
 8003fb0:	4293      	cmp	r3, r2
 8003fb2:	d906      	bls.n	8003fc2 <config_PWM_bits+0x782>
							PWM3_1 = 0;
 8003fb4:	2300      	movs	r3, #0
 8003fb6:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
							PWM3_0 = 0;
 8003fba:	2300      	movs	r3, #0
 8003fbc:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
 8003fc0:	e025      	b.n	800400e <config_PWM_bits+0x7ce>
						}
						else if(*(cellVoltages + 12) < 40000 && *(cellVoltages + 12) >= 39000) {
 8003fc2:	683b      	ldr	r3, [r7, #0]
 8003fc4:	3318      	adds	r3, #24
 8003fc6:	881b      	ldrh	r3, [r3, #0]
 8003fc8:	f649 423f 	movw	r2, #39999	@ 0x9c3f
 8003fcc:	4293      	cmp	r3, r2
 8003fce:	d80a      	bhi.n	8003fe6 <config_PWM_bits+0x7a6>
 8003fd0:	683b      	ldr	r3, [r7, #0]
 8003fd2:	3318      	adds	r3, #24
 8003fd4:	881b      	ldrh	r3, [r3, #0]
 8003fd6:	f649 0257 	movw	r2, #38999	@ 0x9857
 8003fda:	4293      	cmp	r3, r2
 8003fdc:	d903      	bls.n	8003fe6 <config_PWM_bits+0x7a6>
							PWM3_1 = 0;
 8003fde:	2300      	movs	r3, #0
 8003fe0:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
 8003fe4:	e013      	b.n	800400e <config_PWM_bits+0x7ce>
						}
						else if(*(cellVoltages + 12) < 39000 && *(cellVoltages + 12) >= 38000) {
 8003fe6:	683b      	ldr	r3, [r7, #0]
 8003fe8:	3318      	adds	r3, #24
 8003fea:	881b      	ldrh	r3, [r3, #0]
 8003fec:	f649 0257 	movw	r2, #38999	@ 0x9857
 8003ff0:	4293      	cmp	r3, r2
 8003ff2:	f200 81b1 	bhi.w	8004358 <config_PWM_bits+0xb18>
 8003ff6:	683b      	ldr	r3, [r7, #0]
 8003ff8:	3318      	adds	r3, #24
 8003ffa:	881b      	ldrh	r3, [r3, #0]
 8003ffc:	f249 426f 	movw	r2, #37999	@ 0x946f
 8004000:	4293      	cmp	r3, r2
 8004002:	f240 81a9 	bls.w	8004358 <config_PWM_bits+0xb18>
							PWM3_0 = 0;
 8004006:	2300      	movs	r3, #0
 8004008:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
						}
						break;
 800400c:	e1a4      	b.n	8004358 <config_PWM_bits+0xb18>
 800400e:	e1a3      	b.n	8004358 <config_PWM_bits+0xb18>
					case 4:
						if(*(cellVoltages + 13) < 42000 && *(cellVoltages + 13) >= 40000) {
 8004010:	683b      	ldr	r3, [r7, #0]
 8004012:	331a      	adds	r3, #26
 8004014:	881b      	ldrh	r3, [r3, #0]
 8004016:	f24a 420f 	movw	r2, #41999	@ 0xa40f
 800401a:	4293      	cmp	r3, r2
 800401c:	d80d      	bhi.n	800403a <config_PWM_bits+0x7fa>
 800401e:	683b      	ldr	r3, [r7, #0]
 8004020:	331a      	adds	r3, #26
 8004022:	881b      	ldrh	r3, [r3, #0]
 8004024:	f649 423f 	movw	r2, #39999	@ 0x9c3f
 8004028:	4293      	cmp	r3, r2
 800402a:	d906      	bls.n	800403a <config_PWM_bits+0x7fa>
							PWM4_1 = 0;
 800402c:	2300      	movs	r3, #0
 800402e:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
							PWM4_0 = 0;
 8004032:	2300      	movs	r3, #0
 8004034:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
 8004038:	e025      	b.n	8004086 <config_PWM_bits+0x846>
						}
						else if(*(cellVoltages + 13) < 40000 && *(cellVoltages + 13) >= 39000) {
 800403a:	683b      	ldr	r3, [r7, #0]
 800403c:	331a      	adds	r3, #26
 800403e:	881b      	ldrh	r3, [r3, #0]
 8004040:	f649 423f 	movw	r2, #39999	@ 0x9c3f
 8004044:	4293      	cmp	r3, r2
 8004046:	d80a      	bhi.n	800405e <config_PWM_bits+0x81e>
 8004048:	683b      	ldr	r3, [r7, #0]
 800404a:	331a      	adds	r3, #26
 800404c:	881b      	ldrh	r3, [r3, #0]
 800404e:	f649 0257 	movw	r2, #38999	@ 0x9857
 8004052:	4293      	cmp	r3, r2
 8004054:	d903      	bls.n	800405e <config_PWM_bits+0x81e>
							PWM4_1 = 0;
 8004056:	2300      	movs	r3, #0
 8004058:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
 800405c:	e013      	b.n	8004086 <config_PWM_bits+0x846>
						}
						else if(*(cellVoltages + 13) < 39000 && *(cellVoltages + 13) >= 38000) {
 800405e:	683b      	ldr	r3, [r7, #0]
 8004060:	331a      	adds	r3, #26
 8004062:	881b      	ldrh	r3, [r3, #0]
 8004064:	f649 0257 	movw	r2, #38999	@ 0x9857
 8004068:	4293      	cmp	r3, r2
 800406a:	f200 8177 	bhi.w	800435c <config_PWM_bits+0xb1c>
 800406e:	683b      	ldr	r3, [r7, #0]
 8004070:	331a      	adds	r3, #26
 8004072:	881b      	ldrh	r3, [r3, #0]
 8004074:	f249 426f 	movw	r2, #37999	@ 0x946f
 8004078:	4293      	cmp	r3, r2
 800407a:	f240 816f 	bls.w	800435c <config_PWM_bits+0xb1c>
							PWM4_0 = 0;
 800407e:	2300      	movs	r3, #0
 8004080:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
						}
						break;
 8004084:	e16a      	b.n	800435c <config_PWM_bits+0xb1c>
 8004086:	e169      	b.n	800435c <config_PWM_bits+0xb1c>
					case 5:
						if(*(cellVoltages + 14) < 42000 && *(cellVoltages + 14) >= 40000) {
 8004088:	683b      	ldr	r3, [r7, #0]
 800408a:	331c      	adds	r3, #28
 800408c:	881b      	ldrh	r3, [r3, #0]
 800408e:	f24a 420f 	movw	r2, #41999	@ 0xa40f
 8004092:	4293      	cmp	r3, r2
 8004094:	d80d      	bhi.n	80040b2 <config_PWM_bits+0x872>
 8004096:	683b      	ldr	r3, [r7, #0]
 8004098:	331c      	adds	r3, #28
 800409a:	881b      	ldrh	r3, [r3, #0]
 800409c:	f649 423f 	movw	r2, #39999	@ 0x9c3f
 80040a0:	4293      	cmp	r3, r2
 80040a2:	d906      	bls.n	80040b2 <config_PWM_bits+0x872>
							PWM5_1 = 0;
 80040a4:	2300      	movs	r3, #0
 80040a6:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
							PWM5_0 = 0;
 80040aa:	2300      	movs	r3, #0
 80040ac:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 80040b0:	e025      	b.n	80040fe <config_PWM_bits+0x8be>
						}
						else if(*(cellVoltages + 14) < 40000 && *(cellVoltages + 14) >= 39000) {
 80040b2:	683b      	ldr	r3, [r7, #0]
 80040b4:	331c      	adds	r3, #28
 80040b6:	881b      	ldrh	r3, [r3, #0]
 80040b8:	f649 423f 	movw	r2, #39999	@ 0x9c3f
 80040bc:	4293      	cmp	r3, r2
 80040be:	d80a      	bhi.n	80040d6 <config_PWM_bits+0x896>
 80040c0:	683b      	ldr	r3, [r7, #0]
 80040c2:	331c      	adds	r3, #28
 80040c4:	881b      	ldrh	r3, [r3, #0]
 80040c6:	f649 0257 	movw	r2, #38999	@ 0x9857
 80040ca:	4293      	cmp	r3, r2
 80040cc:	d903      	bls.n	80040d6 <config_PWM_bits+0x896>
							PWM5_1 = 0;
 80040ce:	2300      	movs	r3, #0
 80040d0:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
 80040d4:	e013      	b.n	80040fe <config_PWM_bits+0x8be>
						}
						else if(*(cellVoltages + 14) < 39000 && *(cellVoltages + 14) >= 38000) {
 80040d6:	683b      	ldr	r3, [r7, #0]
 80040d8:	331c      	adds	r3, #28
 80040da:	881b      	ldrh	r3, [r3, #0]
 80040dc:	f649 0257 	movw	r2, #38999	@ 0x9857
 80040e0:	4293      	cmp	r3, r2
 80040e2:	f200 813d 	bhi.w	8004360 <config_PWM_bits+0xb20>
 80040e6:	683b      	ldr	r3, [r7, #0]
 80040e8:	331c      	adds	r3, #28
 80040ea:	881b      	ldrh	r3, [r3, #0]
 80040ec:	f249 426f 	movw	r2, #37999	@ 0x946f
 80040f0:	4293      	cmp	r3, r2
 80040f2:	f240 8135 	bls.w	8004360 <config_PWM_bits+0xb20>
							PWM5_0 = 0;
 80040f6:	2300      	movs	r3, #0
 80040f8:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
						}
						break;
 80040fc:	e130      	b.n	8004360 <config_PWM_bits+0xb20>
 80040fe:	e12f      	b.n	8004360 <config_PWM_bits+0xb20>
					case 6:
						if(*(cellVoltages + 15) < 42000 && *(cellVoltages + 15) >= 40000) {
 8004100:	683b      	ldr	r3, [r7, #0]
 8004102:	331e      	adds	r3, #30
 8004104:	881b      	ldrh	r3, [r3, #0]
 8004106:	f24a 420f 	movw	r2, #41999	@ 0xa40f
 800410a:	4293      	cmp	r3, r2
 800410c:	d80d      	bhi.n	800412a <config_PWM_bits+0x8ea>
 800410e:	683b      	ldr	r3, [r7, #0]
 8004110:	331e      	adds	r3, #30
 8004112:	881b      	ldrh	r3, [r3, #0]
 8004114:	f649 423f 	movw	r2, #39999	@ 0x9c3f
 8004118:	4293      	cmp	r3, r2
 800411a:	d906      	bls.n	800412a <config_PWM_bits+0x8ea>
							PWM6_1 = 0;
 800411c:	2300      	movs	r3, #0
 800411e:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
							PWM6_0 = 0;
 8004122:	2300      	movs	r3, #0
 8004124:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
 8004128:	e025      	b.n	8004176 <config_PWM_bits+0x936>
						}
						else if(*(cellVoltages + 15) < 40000 && *(cellVoltages + 15) >= 39000) {
 800412a:	683b      	ldr	r3, [r7, #0]
 800412c:	331e      	adds	r3, #30
 800412e:	881b      	ldrh	r3, [r3, #0]
 8004130:	f649 423f 	movw	r2, #39999	@ 0x9c3f
 8004134:	4293      	cmp	r3, r2
 8004136:	d80a      	bhi.n	800414e <config_PWM_bits+0x90e>
 8004138:	683b      	ldr	r3, [r7, #0]
 800413a:	331e      	adds	r3, #30
 800413c:	881b      	ldrh	r3, [r3, #0]
 800413e:	f649 0257 	movw	r2, #38999	@ 0x9857
 8004142:	4293      	cmp	r3, r2
 8004144:	d903      	bls.n	800414e <config_PWM_bits+0x90e>
							PWM6_1 = 0;
 8004146:	2300      	movs	r3, #0
 8004148:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
 800414c:	e013      	b.n	8004176 <config_PWM_bits+0x936>
						}
						else if(*(cellVoltages + 15) < 39000 && *(cellVoltages + 15) >= 38000) {
 800414e:	683b      	ldr	r3, [r7, #0]
 8004150:	331e      	adds	r3, #30
 8004152:	881b      	ldrh	r3, [r3, #0]
 8004154:	f649 0257 	movw	r2, #38999	@ 0x9857
 8004158:	4293      	cmp	r3, r2
 800415a:	f200 8103 	bhi.w	8004364 <config_PWM_bits+0xb24>
 800415e:	683b      	ldr	r3, [r7, #0]
 8004160:	331e      	adds	r3, #30
 8004162:	881b      	ldrh	r3, [r3, #0]
 8004164:	f249 426f 	movw	r2, #37999	@ 0x946f
 8004168:	4293      	cmp	r3, r2
 800416a:	f240 80fb 	bls.w	8004364 <config_PWM_bits+0xb24>
							PWM6_0 = 0;
 800416e:	2300      	movs	r3, #0
 8004170:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
						}
						break;
 8004174:	e0f6      	b.n	8004364 <config_PWM_bits+0xb24>
 8004176:	e0f5      	b.n	8004364 <config_PWM_bits+0xb24>
					case 7:
						if(*(cellVoltages + 16) < 42000 && *(cellVoltages + 16) >= 40000) {
 8004178:	683b      	ldr	r3, [r7, #0]
 800417a:	3320      	adds	r3, #32
 800417c:	881b      	ldrh	r3, [r3, #0]
 800417e:	f24a 420f 	movw	r2, #41999	@ 0xa40f
 8004182:	4293      	cmp	r3, r2
 8004184:	d80d      	bhi.n	80041a2 <config_PWM_bits+0x962>
 8004186:	683b      	ldr	r3, [r7, #0]
 8004188:	3320      	adds	r3, #32
 800418a:	881b      	ldrh	r3, [r3, #0]
 800418c:	f649 423f 	movw	r2, #39999	@ 0x9c3f
 8004190:	4293      	cmp	r3, r2
 8004192:	d906      	bls.n	80041a2 <config_PWM_bits+0x962>
							PWM7_1 = 0;
 8004194:	2300      	movs	r3, #0
 8004196:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
							PWM7_0 = 0;
 800419a:	2300      	movs	r3, #0
 800419c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 80041a0:	e025      	b.n	80041ee <config_PWM_bits+0x9ae>
						}
						else if(*(cellVoltages + 16) < 40000 && *(cellVoltages + 16) >= 39000) {
 80041a2:	683b      	ldr	r3, [r7, #0]
 80041a4:	3320      	adds	r3, #32
 80041a6:	881b      	ldrh	r3, [r3, #0]
 80041a8:	f649 423f 	movw	r2, #39999	@ 0x9c3f
 80041ac:	4293      	cmp	r3, r2
 80041ae:	d80a      	bhi.n	80041c6 <config_PWM_bits+0x986>
 80041b0:	683b      	ldr	r3, [r7, #0]
 80041b2:	3320      	adds	r3, #32
 80041b4:	881b      	ldrh	r3, [r3, #0]
 80041b6:	f649 0257 	movw	r2, #38999	@ 0x9857
 80041ba:	4293      	cmp	r3, r2
 80041bc:	d903      	bls.n	80041c6 <config_PWM_bits+0x986>
							PWM7_1 = 0;
 80041be:	2300      	movs	r3, #0
 80041c0:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
 80041c4:	e013      	b.n	80041ee <config_PWM_bits+0x9ae>
						}
						else if(*(cellVoltages + 16) < 39000 && *(cellVoltages + 16) >= 38000) {
 80041c6:	683b      	ldr	r3, [r7, #0]
 80041c8:	3320      	adds	r3, #32
 80041ca:	881b      	ldrh	r3, [r3, #0]
 80041cc:	f649 0257 	movw	r2, #38999	@ 0x9857
 80041d0:	4293      	cmp	r3, r2
 80041d2:	f200 80c9 	bhi.w	8004368 <config_PWM_bits+0xb28>
 80041d6:	683b      	ldr	r3, [r7, #0]
 80041d8:	3320      	adds	r3, #32
 80041da:	881b      	ldrh	r3, [r3, #0]
 80041dc:	f249 426f 	movw	r2, #37999	@ 0x946f
 80041e0:	4293      	cmp	r3, r2
 80041e2:	f240 80c1 	bls.w	8004368 <config_PWM_bits+0xb28>
							PWM7_0 = 0;
 80041e6:	2300      	movs	r3, #0
 80041e8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
						}
						break;
 80041ec:	e0bc      	b.n	8004368 <config_PWM_bits+0xb28>
 80041ee:	e0bb      	b.n	8004368 <config_PWM_bits+0xb28>
					case 8:
						if(*(cellVoltages + 17) < 42000 && *(cellVoltages + 17) >= 40000) {
 80041f0:	683b      	ldr	r3, [r7, #0]
 80041f2:	3322      	adds	r3, #34	@ 0x22
 80041f4:	881b      	ldrh	r3, [r3, #0]
 80041f6:	f24a 420f 	movw	r2, #41999	@ 0xa40f
 80041fa:	4293      	cmp	r3, r2
 80041fc:	d80d      	bhi.n	800421a <config_PWM_bits+0x9da>
 80041fe:	683b      	ldr	r3, [r7, #0]
 8004200:	3322      	adds	r3, #34	@ 0x22
 8004202:	881b      	ldrh	r3, [r3, #0]
 8004204:	f649 423f 	movw	r2, #39999	@ 0x9c3f
 8004208:	4293      	cmp	r3, r2
 800420a:	d906      	bls.n	800421a <config_PWM_bits+0x9da>
							PWM8_1 = 0;
 800420c:	2300      	movs	r3, #0
 800420e:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
							PWM8_0 = 0;
 8004212:	2300      	movs	r3, #0
 8004214:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
 8004218:	e025      	b.n	8004266 <config_PWM_bits+0xa26>
						}
						else if(*(cellVoltages + 17) < 40000 && *(cellVoltages + 17) >= 39000) {
 800421a:	683b      	ldr	r3, [r7, #0]
 800421c:	3322      	adds	r3, #34	@ 0x22
 800421e:	881b      	ldrh	r3, [r3, #0]
 8004220:	f649 423f 	movw	r2, #39999	@ 0x9c3f
 8004224:	4293      	cmp	r3, r2
 8004226:	d80a      	bhi.n	800423e <config_PWM_bits+0x9fe>
 8004228:	683b      	ldr	r3, [r7, #0]
 800422a:	3322      	adds	r3, #34	@ 0x22
 800422c:	881b      	ldrh	r3, [r3, #0]
 800422e:	f649 0257 	movw	r2, #38999	@ 0x9857
 8004232:	4293      	cmp	r3, r2
 8004234:	d903      	bls.n	800423e <config_PWM_bits+0x9fe>
							PWM8_1 = 0;
 8004236:	2300      	movs	r3, #0
 8004238:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
 800423c:	e013      	b.n	8004266 <config_PWM_bits+0xa26>
						}
						else if(*(cellVoltages + 17) < 39000 && *(cellVoltages + 17) >= 38000) {
 800423e:	683b      	ldr	r3, [r7, #0]
 8004240:	3322      	adds	r3, #34	@ 0x22
 8004242:	881b      	ldrh	r3, [r3, #0]
 8004244:	f649 0257 	movw	r2, #38999	@ 0x9857
 8004248:	4293      	cmp	r3, r2
 800424a:	f200 808f 	bhi.w	800436c <config_PWM_bits+0xb2c>
 800424e:	683b      	ldr	r3, [r7, #0]
 8004250:	3322      	adds	r3, #34	@ 0x22
 8004252:	881b      	ldrh	r3, [r3, #0]
 8004254:	f249 426f 	movw	r2, #37999	@ 0x946f
 8004258:	4293      	cmp	r3, r2
 800425a:	f240 8087 	bls.w	800436c <config_PWM_bits+0xb2c>
							PWM8_0 = 0;
 800425e:	2300      	movs	r3, #0
 8004260:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
						}
						break;
 8004264:	e082      	b.n	800436c <config_PWM_bits+0xb2c>
 8004266:	e081      	b.n	800436c <config_PWM_bits+0xb2c>
					case 9:
						if(*(cellVoltages + 18) < 42000 && *(cellVoltages + 18) >= 40000) {
 8004268:	683b      	ldr	r3, [r7, #0]
 800426a:	3324      	adds	r3, #36	@ 0x24
 800426c:	881b      	ldrh	r3, [r3, #0]
 800426e:	f24a 420f 	movw	r2, #41999	@ 0xa40f
 8004272:	4293      	cmp	r3, r2
 8004274:	d80d      	bhi.n	8004292 <config_PWM_bits+0xa52>
 8004276:	683b      	ldr	r3, [r7, #0]
 8004278:	3324      	adds	r3, #36	@ 0x24
 800427a:	881b      	ldrh	r3, [r3, #0]
 800427c:	f649 423f 	movw	r2, #39999	@ 0x9c3f
 8004280:	4293      	cmp	r3, r2
 8004282:	d906      	bls.n	8004292 <config_PWM_bits+0xa52>
							PWM9_1 = 0;
 8004284:	2300      	movs	r3, #0
 8004286:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
							PWM9_0 = 0;
 800428a:	2300      	movs	r3, #0
 800428c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8004290:	e023      	b.n	80042da <config_PWM_bits+0xa9a>
						}
						else if(*(cellVoltages + 18) < 40000 && *(cellVoltages + 18) >= 39000) {
 8004292:	683b      	ldr	r3, [r7, #0]
 8004294:	3324      	adds	r3, #36	@ 0x24
 8004296:	881b      	ldrh	r3, [r3, #0]
 8004298:	f649 423f 	movw	r2, #39999	@ 0x9c3f
 800429c:	4293      	cmp	r3, r2
 800429e:	d80a      	bhi.n	80042b6 <config_PWM_bits+0xa76>
 80042a0:	683b      	ldr	r3, [r7, #0]
 80042a2:	3324      	adds	r3, #36	@ 0x24
 80042a4:	881b      	ldrh	r3, [r3, #0]
 80042a6:	f649 0257 	movw	r2, #38999	@ 0x9857
 80042aa:	4293      	cmp	r3, r2
 80042ac:	d903      	bls.n	80042b6 <config_PWM_bits+0xa76>
							PWM9_1 = 0;
 80042ae:	2300      	movs	r3, #0
 80042b0:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 80042b4:	e011      	b.n	80042da <config_PWM_bits+0xa9a>
						}
						else if(*(cellVoltages + 18) < 39000 && *(cellVoltages + 18) >= 38000) {
 80042b6:	683b      	ldr	r3, [r7, #0]
 80042b8:	3324      	adds	r3, #36	@ 0x24
 80042ba:	881b      	ldrh	r3, [r3, #0]
 80042bc:	f649 0257 	movw	r2, #38999	@ 0x9857
 80042c0:	4293      	cmp	r3, r2
 80042c2:	d855      	bhi.n	8004370 <config_PWM_bits+0xb30>
 80042c4:	683b      	ldr	r3, [r7, #0]
 80042c6:	3324      	adds	r3, #36	@ 0x24
 80042c8:	881b      	ldrh	r3, [r3, #0]
 80042ca:	f249 426f 	movw	r2, #37999	@ 0x946f
 80042ce:	4293      	cmp	r3, r2
 80042d0:	d94e      	bls.n	8004370 <config_PWM_bits+0xb30>
							PWM9_0 = 0;
 80042d2:	2300      	movs	r3, #0
 80042d4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
						}
						break;
 80042d8:	e04a      	b.n	8004370 <config_PWM_bits+0xb30>
 80042da:	e049      	b.n	8004370 <config_PWM_bits+0xb30>
					case 10:
						if(*(cellVoltages + 19) < 42000 && *(cellVoltages + 19) >= 40000) {
 80042dc:	683b      	ldr	r3, [r7, #0]
 80042de:	3326      	adds	r3, #38	@ 0x26
 80042e0:	881b      	ldrh	r3, [r3, #0]
 80042e2:	f24a 420f 	movw	r2, #41999	@ 0xa40f
 80042e6:	4293      	cmp	r3, r2
 80042e8:	d80d      	bhi.n	8004306 <config_PWM_bits+0xac6>
 80042ea:	683b      	ldr	r3, [r7, #0]
 80042ec:	3326      	adds	r3, #38	@ 0x26
 80042ee:	881b      	ldrh	r3, [r3, #0]
 80042f0:	f649 423f 	movw	r2, #39999	@ 0x9c3f
 80042f4:	4293      	cmp	r3, r2
 80042f6:	d906      	bls.n	8004306 <config_PWM_bits+0xac6>
							PWM10_1 = 0;
 80042f8:	2300      	movs	r3, #0
 80042fa:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
							PWM10_0 = 0;
 80042fe:	2300      	movs	r3, #0
 8004300:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
 8004304:	e023      	b.n	800434e <config_PWM_bits+0xb0e>
						}
						else if(*(cellVoltages + 19) < 40000 && *(cellVoltages + 19) >= 39000) {
 8004306:	683b      	ldr	r3, [r7, #0]
 8004308:	3326      	adds	r3, #38	@ 0x26
 800430a:	881b      	ldrh	r3, [r3, #0]
 800430c:	f649 423f 	movw	r2, #39999	@ 0x9c3f
 8004310:	4293      	cmp	r3, r2
 8004312:	d80a      	bhi.n	800432a <config_PWM_bits+0xaea>
 8004314:	683b      	ldr	r3, [r7, #0]
 8004316:	3326      	adds	r3, #38	@ 0x26
 8004318:	881b      	ldrh	r3, [r3, #0]
 800431a:	f649 0257 	movw	r2, #38999	@ 0x9857
 800431e:	4293      	cmp	r3, r2
 8004320:	d903      	bls.n	800432a <config_PWM_bits+0xaea>
							PWM10_1 = 0;
 8004322:	2300      	movs	r3, #0
 8004324:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
 8004328:	e011      	b.n	800434e <config_PWM_bits+0xb0e>
						}
						else if(*(cellVoltages + 19) < 39000 && *(cellVoltages + 19) >= 38000) {
 800432a:	683b      	ldr	r3, [r7, #0]
 800432c:	3326      	adds	r3, #38	@ 0x26
 800432e:	881b      	ldrh	r3, [r3, #0]
 8004330:	f649 0257 	movw	r2, #38999	@ 0x9857
 8004334:	4293      	cmp	r3, r2
 8004336:	d81d      	bhi.n	8004374 <config_PWM_bits+0xb34>
 8004338:	683b      	ldr	r3, [r7, #0]
 800433a:	3326      	adds	r3, #38	@ 0x26
 800433c:	881b      	ldrh	r3, [r3, #0]
 800433e:	f249 426f 	movw	r2, #37999	@ 0x946f
 8004342:	4293      	cmp	r3, r2
 8004344:	d916      	bls.n	8004374 <config_PWM_bits+0xb34>
							PWM10_0 = 0;
 8004346:	2300      	movs	r3, #0
 8004348:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
						}
						break;
 800434c:	e012      	b.n	8004374 <config_PWM_bits+0xb34>
 800434e:	e011      	b.n	8004374 <config_PWM_bits+0xb34>
						break;
 8004350:	bf00      	nop
 8004352:	e010      	b.n	8004376 <config_PWM_bits+0xb36>
						break;
 8004354:	bf00      	nop
 8004356:	e00e      	b.n	8004376 <config_PWM_bits+0xb36>
						break;
 8004358:	bf00      	nop
 800435a:	e00c      	b.n	8004376 <config_PWM_bits+0xb36>
						break;
 800435c:	bf00      	nop
 800435e:	e00a      	b.n	8004376 <config_PWM_bits+0xb36>
						break;
 8004360:	bf00      	nop
 8004362:	e008      	b.n	8004376 <config_PWM_bits+0xb36>
						break;
 8004364:	bf00      	nop
 8004366:	e006      	b.n	8004376 <config_PWM_bits+0xb36>
						break;
 8004368:	bf00      	nop
 800436a:	e004      	b.n	8004376 <config_PWM_bits+0xb36>
						break;
 800436c:	bf00      	nop
 800436e:	e002      	b.n	8004376 <config_PWM_bits+0xb36>
						break;
 8004370:	bf00      	nop
 8004372:	e000      	b.n	8004376 <config_PWM_bits+0xb36>
						break;
 8004374:	bf00      	nop
			for(uint8_t i = 0; i < cellsToBalanceQty; i++) {
 8004376:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800437a:	3301      	adds	r3, #1
 800437c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8004380:	f897 202a 	ldrb.w	r2, [r7, #42]	@ 0x2a
 8004384:	7afb      	ldrb	r3, [r7, #11]
 8004386:	429a      	cmp	r2, r3
 8004388:	f4ff ad6d 	bcc.w	8003e66 <config_PWM_bits+0x626>
				}
			}
			break;
 800438c:	bf00      	nop
	}
	*payloadRegisterPWM = (PWM2_3 << 7) | (PWM2_2 << 6) | (PWM2_1 << 5) | (PWM2_0 << 4) | (PWM1_3 << 3) | (PWM1_2 << 2) | (PWM1_1 <<1) | (PWM1_0 << 0);
 800438e:	f997 3026 	ldrsb.w	r3, [r7, #38]	@ 0x26
 8004392:	01db      	lsls	r3, r3, #7
 8004394:	b25a      	sxtb	r2, r3
 8004396:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800439a:	019b      	lsls	r3, r3, #6
 800439c:	b25b      	sxtb	r3, r3
 800439e:	4313      	orrs	r3, r2
 80043a0:	b25a      	sxtb	r2, r3
 80043a2:	f997 303c 	ldrsb.w	r3, [r7, #60]	@ 0x3c
 80043a6:	015b      	lsls	r3, r3, #5
 80043a8:	b25b      	sxtb	r3, r3
 80043aa:	4313      	orrs	r3, r2
 80043ac:	b25a      	sxtb	r2, r3
 80043ae:	f997 303d 	ldrsb.w	r3, [r7, #61]	@ 0x3d
 80043b2:	011b      	lsls	r3, r3, #4
 80043b4:	b25b      	sxtb	r3, r3
 80043b6:	4313      	orrs	r3, r2
 80043b8:	b25a      	sxtb	r2, r3
 80043ba:	f997 3028 	ldrsb.w	r3, [r7, #40]	@ 0x28
 80043be:	00db      	lsls	r3, r3, #3
 80043c0:	b25b      	sxtb	r3, r3
 80043c2:	4313      	orrs	r3, r2
 80043c4:	b25a      	sxtb	r2, r3
 80043c6:	f997 3029 	ldrsb.w	r3, [r7, #41]	@ 0x29
 80043ca:	009b      	lsls	r3, r3, #2
 80043cc:	b25b      	sxtb	r3, r3
 80043ce:	4313      	orrs	r3, r2
 80043d0:	b25a      	sxtb	r2, r3
 80043d2:	f997 303e 	ldrsb.w	r3, [r7, #62]	@ 0x3e
 80043d6:	005b      	lsls	r3, r3, #1
 80043d8:	b25b      	sxtb	r3, r3
 80043da:	4313      	orrs	r3, r2
 80043dc:	b25a      	sxtb	r2, r3
 80043de:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 80043e2:	4313      	orrs	r3, r2
 80043e4:	b25b      	sxtb	r3, r3
 80043e6:	b2da      	uxtb	r2, r3
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	701a      	strb	r2, [r3, #0]
	*(payloadRegisterPWM + 1) = (PWM4_3 << 7) | (PWM4_2 << 6) | (PWM4_1 << 5) | (PWM4_0 << 4) | (PWM3_3 << 3) | (PWM3_2 << 2) | (PWM3_1 <<1) | (PWM3_0 << 0);
 80043ec:	f997 3022 	ldrsb.w	r3, [r7, #34]	@ 0x22
 80043f0:	01db      	lsls	r3, r3, #7
 80043f2:	b25a      	sxtb	r2, r3
 80043f4:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 80043f8:	019b      	lsls	r3, r3, #6
 80043fa:	b25b      	sxtb	r3, r3
 80043fc:	4313      	orrs	r3, r2
 80043fe:	b25a      	sxtb	r2, r3
 8004400:	f997 3038 	ldrsb.w	r3, [r7, #56]	@ 0x38
 8004404:	015b      	lsls	r3, r3, #5
 8004406:	b25b      	sxtb	r3, r3
 8004408:	4313      	orrs	r3, r2
 800440a:	b25a      	sxtb	r2, r3
 800440c:	f997 3039 	ldrsb.w	r3, [r7, #57]	@ 0x39
 8004410:	011b      	lsls	r3, r3, #4
 8004412:	b25b      	sxtb	r3, r3
 8004414:	4313      	orrs	r3, r2
 8004416:	b25a      	sxtb	r2, r3
 8004418:	f997 3024 	ldrsb.w	r3, [r7, #36]	@ 0x24
 800441c:	00db      	lsls	r3, r3, #3
 800441e:	b25b      	sxtb	r3, r3
 8004420:	4313      	orrs	r3, r2
 8004422:	b25a      	sxtb	r2, r3
 8004424:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 8004428:	009b      	lsls	r3, r3, #2
 800442a:	b25b      	sxtb	r3, r3
 800442c:	4313      	orrs	r3, r2
 800442e:	b25a      	sxtb	r2, r3
 8004430:	f997 303a 	ldrsb.w	r3, [r7, #58]	@ 0x3a
 8004434:	005b      	lsls	r3, r3, #1
 8004436:	b25b      	sxtb	r3, r3
 8004438:	4313      	orrs	r3, r2
 800443a:	b25a      	sxtb	r2, r3
 800443c:	f997 303b 	ldrsb.w	r3, [r7, #59]	@ 0x3b
 8004440:	4313      	orrs	r3, r2
 8004442:	b25a      	sxtb	r2, r3
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	3301      	adds	r3, #1
 8004448:	b2d2      	uxtb	r2, r2
 800444a:	701a      	strb	r2, [r3, #0]
	*(payloadRegisterPWM + 2) = (PWM6_3 << 7) | (PWM6_2 << 6) | (PWM6_1 << 5) | (PWM6_0 << 4) | (PWM5_3 << 3) | (PWM5_2 << 2) | (PWM5_1 <<1) | (PWM5_0 << 0);
 800444c:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8004450:	01db      	lsls	r3, r3, #7
 8004452:	b25a      	sxtb	r2, r3
 8004454:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8004458:	019b      	lsls	r3, r3, #6
 800445a:	b25b      	sxtb	r3, r3
 800445c:	4313      	orrs	r3, r2
 800445e:	b25a      	sxtb	r2, r3
 8004460:	f997 3034 	ldrsb.w	r3, [r7, #52]	@ 0x34
 8004464:	015b      	lsls	r3, r3, #5
 8004466:	b25b      	sxtb	r3, r3
 8004468:	4313      	orrs	r3, r2
 800446a:	b25a      	sxtb	r2, r3
 800446c:	f997 3035 	ldrsb.w	r3, [r7, #53]	@ 0x35
 8004470:	011b      	lsls	r3, r3, #4
 8004472:	b25b      	sxtb	r3, r3
 8004474:	4313      	orrs	r3, r2
 8004476:	b25a      	sxtb	r2, r3
 8004478:	f997 3020 	ldrsb.w	r3, [r7, #32]
 800447c:	00db      	lsls	r3, r3, #3
 800447e:	b25b      	sxtb	r3, r3
 8004480:	4313      	orrs	r3, r2
 8004482:	b25a      	sxtb	r2, r3
 8004484:	f997 3021 	ldrsb.w	r3, [r7, #33]	@ 0x21
 8004488:	009b      	lsls	r3, r3, #2
 800448a:	b25b      	sxtb	r3, r3
 800448c:	4313      	orrs	r3, r2
 800448e:	b25a      	sxtb	r2, r3
 8004490:	f997 3036 	ldrsb.w	r3, [r7, #54]	@ 0x36
 8004494:	005b      	lsls	r3, r3, #1
 8004496:	b25b      	sxtb	r3, r3
 8004498:	4313      	orrs	r3, r2
 800449a:	b25a      	sxtb	r2, r3
 800449c:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 80044a0:	4313      	orrs	r3, r2
 80044a2:	b25a      	sxtb	r2, r3
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	3302      	adds	r3, #2
 80044a8:	b2d2      	uxtb	r2, r2
 80044aa:	701a      	strb	r2, [r3, #0]
	*(payloadRegisterPWM + 3) = (PWM8_3 << 7) | (PWM8_2 << 6) | (PWM8_1 << 5) | (PWM8_0 << 4) | (PWM7_3 << 3) | (PWM7_2 << 2) | (PWM7_1 <<1) | (PWM7_0 << 0);
 80044ac:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80044b0:	01db      	lsls	r3, r3, #7
 80044b2:	b25a      	sxtb	r2, r3
 80044b4:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80044b8:	019b      	lsls	r3, r3, #6
 80044ba:	b25b      	sxtb	r3, r3
 80044bc:	4313      	orrs	r3, r2
 80044be:	b25a      	sxtb	r2, r3
 80044c0:	f997 3030 	ldrsb.w	r3, [r7, #48]	@ 0x30
 80044c4:	015b      	lsls	r3, r3, #5
 80044c6:	b25b      	sxtb	r3, r3
 80044c8:	4313      	orrs	r3, r2
 80044ca:	b25a      	sxtb	r2, r3
 80044cc:	f997 3031 	ldrsb.w	r3, [r7, #49]	@ 0x31
 80044d0:	011b      	lsls	r3, r3, #4
 80044d2:	b25b      	sxtb	r3, r3
 80044d4:	4313      	orrs	r3, r2
 80044d6:	b25a      	sxtb	r2, r3
 80044d8:	f997 301c 	ldrsb.w	r3, [r7, #28]
 80044dc:	00db      	lsls	r3, r3, #3
 80044de:	b25b      	sxtb	r3, r3
 80044e0:	4313      	orrs	r3, r2
 80044e2:	b25a      	sxtb	r2, r3
 80044e4:	f997 301d 	ldrsb.w	r3, [r7, #29]
 80044e8:	009b      	lsls	r3, r3, #2
 80044ea:	b25b      	sxtb	r3, r3
 80044ec:	4313      	orrs	r3, r2
 80044ee:	b25a      	sxtb	r2, r3
 80044f0:	f997 3032 	ldrsb.w	r3, [r7, #50]	@ 0x32
 80044f4:	005b      	lsls	r3, r3, #1
 80044f6:	b25b      	sxtb	r3, r3
 80044f8:	4313      	orrs	r3, r2
 80044fa:	b25a      	sxtb	r2, r3
 80044fc:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8004500:	4313      	orrs	r3, r2
 8004502:	b25a      	sxtb	r2, r3
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	3303      	adds	r3, #3
 8004508:	b2d2      	uxtb	r2, r2
 800450a:	701a      	strb	r2, [r3, #0]
	*(payloadRegisterPWM + 4) = (PWM10_3 << 7) | (PWM10_2 << 6) | (PWM10_1 << 5) | (PWM10_0 << 4) | (PWM9_3 << 3) | (PWM9_2 << 2) | (PWM9_1 <<1) | (PWM9_0 << 0);
 800450c:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8004510:	01db      	lsls	r3, r3, #7
 8004512:	b25a      	sxtb	r2, r3
 8004514:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004518:	019b      	lsls	r3, r3, #6
 800451a:	b25b      	sxtb	r3, r3
 800451c:	4313      	orrs	r3, r2
 800451e:	b25a      	sxtb	r2, r3
 8004520:	f997 302c 	ldrsb.w	r3, [r7, #44]	@ 0x2c
 8004524:	015b      	lsls	r3, r3, #5
 8004526:	b25b      	sxtb	r3, r3
 8004528:	4313      	orrs	r3, r2
 800452a:	b25a      	sxtb	r2, r3
 800452c:	f997 302d 	ldrsb.w	r3, [r7, #45]	@ 0x2d
 8004530:	011b      	lsls	r3, r3, #4
 8004532:	b25b      	sxtb	r3, r3
 8004534:	4313      	orrs	r3, r2
 8004536:	b25a      	sxtb	r2, r3
 8004538:	f997 3018 	ldrsb.w	r3, [r7, #24]
 800453c:	00db      	lsls	r3, r3, #3
 800453e:	b25b      	sxtb	r3, r3
 8004540:	4313      	orrs	r3, r2
 8004542:	b25a      	sxtb	r2, r3
 8004544:	f997 3019 	ldrsb.w	r3, [r7, #25]
 8004548:	009b      	lsls	r3, r3, #2
 800454a:	b25b      	sxtb	r3, r3
 800454c:	4313      	orrs	r3, r2
 800454e:	b25a      	sxtb	r2, r3
 8004550:	f997 302e 	ldrsb.w	r3, [r7, #46]	@ 0x2e
 8004554:	005b      	lsls	r3, r3, #1
 8004556:	b25b      	sxtb	r3, r3
 8004558:	4313      	orrs	r3, r2
 800455a:	b25a      	sxtb	r2, r3
 800455c:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8004560:	4313      	orrs	r3, r2
 8004562:	b25a      	sxtb	r2, r3
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	3304      	adds	r3, #4
 8004568:	b2d2      	uxtb	r2, r2
 800456a:	701a      	strb	r2, [r3, #0]
	*(payloadRegisterPWM + 5) = 0xFF;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	3305      	adds	r3, #5
 8004570:	22ff      	movs	r2, #255	@ 0xff
 8004572:	701a      	strb	r2, [r3, #0]
}
 8004574:	bf00      	nop
 8004576:	3744      	adds	r7, #68	@ 0x44
 8004578:	46bd      	mov	sp, r7
 800457a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800457e:	4770      	bx	lr

08004580 <can_transmit>:
#include "torch_stm32.h"
#include "torch_config.h"


void can_transmit(uint16_t canMsgID, uint8_t *payload)
{
 8004580:	b580      	push	{r7, lr}
 8004582:	b08a      	sub	sp, #40	@ 0x28
 8004584:	af00      	add	r7, sp, #0
 8004586:	4603      	mov	r3, r0
 8004588:	6039      	str	r1, [r7, #0]
 800458a:	80fb      	strh	r3, [r7, #6]
	CAN_TxHeaderTypeDef TxHeader;
	uint32_t TxMailbox;

	TxHeader.DLC = 8;
 800458c:	2308      	movs	r3, #8
 800458e:	623b      	str	r3, [r7, #32]
	TxHeader.ExtId = 0;
 8004590:	2300      	movs	r3, #0
 8004592:	617b      	str	r3, [r7, #20]
	TxHeader.IDE = CAN_ID_STD;
 8004594:	2300      	movs	r3, #0
 8004596:	61bb      	str	r3, [r7, #24]
	TxHeader.RTR = CAN_RTR_DATA;
 8004598:	2300      	movs	r3, #0
 800459a:	61fb      	str	r3, [r7, #28]
	TxHeader.StdId = canMsgID;
 800459c:	88fb      	ldrh	r3, [r7, #6]
 800459e:	613b      	str	r3, [r7, #16]
	TxHeader.TransmitGlobalTime = DISABLE;
 80045a0:	2300      	movs	r3, #0
 80045a2:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24

	HAL_CAN_AddTxMessage(&hcan1, &TxHeader, payload, &TxMailbox);
 80045a6:	f107 030c 	add.w	r3, r7, #12
 80045aa:	f107 0110 	add.w	r1, r7, #16
 80045ae:	683a      	ldr	r2, [r7, #0]
 80045b0:	4804      	ldr	r0, [pc, #16]	@ (80045c4 <can_transmit+0x44>)
 80045b2:	f006 ffad 	bl	800b510 <HAL_CAN_AddTxMessage>
	wait(10);
 80045b6:	200a      	movs	r0, #10
 80045b8:	f004 fe3e 	bl	8009238 <wait>
}
 80045bc:	bf00      	nop
 80045be:	3728      	adds	r7, #40	@ 0x28
 80045c0:	46bd      	mov	sp, r7
 80045c2:	bd80      	pop	{r7, pc}
 80045c4:	200000c4 	.word	0x200000c4

080045c8 <silent_error_loop>:


void silent_error_loop(void)
{
 80045c8:	b580      	push	{r7, lr}
 80045ca:	b09c      	sub	sp, #112	@ 0x70
 80045cc:	af00      	add	r7, sp, #0
	pull_high(GPIOA, GPIO_PIN_8);		// ACTIVE LED
 80045ce:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80045d2:	481f      	ldr	r0, [pc, #124]	@ (8004650 <silent_error_loop+0x88>)
 80045d4:	f004 fe20 	bl	8009218 <pull_high>
	pull_high(GPIOC, GPIO_PIN_9);		// CHARGE LED
 80045d8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80045dc:	481d      	ldr	r0, [pc, #116]	@ (8004654 <silent_error_loop+0x8c>)
 80045de:	f004 fe1b 	bl	8009218 <pull_high>
	//stop_timer(&htim2);
	//HAL_CAN_Stop(&hcan1);

	uint16_t cellVoltages[CELL_QTY];
	float temperatures[THERM_QTY];
	transmitCounter = 0;
 80045e2:	4b1d      	ldr	r3, [pc, #116]	@ (8004658 <silent_error_loop+0x90>)
 80045e4:	2200      	movs	r2, #0
 80045e6:	601a      	str	r2, [r3, #0]
	measureCounter = 0;
 80045e8:	4b1c      	ldr	r3, [pc, #112]	@ (800465c <silent_error_loop+0x94>)
 80045ea:	2200      	movs	r2, #0
 80045ec:	601a      	str	r2, [r3, #0]
	while(1) {

		if(measureCounter > 100) {
 80045ee:	4b1b      	ldr	r3, [pc, #108]	@ (800465c <silent_error_loop+0x94>)
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	2b64      	cmp	r3, #100	@ 0x64
 80045f4:	d915      	bls.n	8004622 <silent_error_loop+0x5a>
			if(!refup_check()) {
 80045f6:	f004 f8f3 	bl	80087e0 <refup_check>
 80045fa:	4603      	mov	r3, r0
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d104      	bne.n	800460a <silent_error_loop+0x42>
				force_refup();
 8004600:	f004 f8b2 	bl	8008768 <force_refup>
				wait(1);
 8004604:	2001      	movs	r0, #1
 8004606:	f004 fe17 	bl	8009238 <wait>
			}

			temperature_sense(temperatures);
 800460a:	463b      	mov	r3, r7
 800460c:	4618      	mov	r0, r3
 800460e:	f005 f82f 	bl	8009670 <temperature_sense>
			voltage_sense(cellVoltages);
 8004612:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8004616:	4618      	mov	r0, r3
 8004618:	f005 fe56 	bl	800a2c8 <voltage_sense>

			measureCounter = 0;
 800461c:	4b0f      	ldr	r3, [pc, #60]	@ (800465c <silent_error_loop+0x94>)
 800461e:	2200      	movs	r2, #0
 8004620:	601a      	str	r2, [r3, #0]
		}

		if(transmitCounter > transmissionDelay) {
 8004622:	4b0f      	ldr	r3, [pc, #60]	@ (8004660 <silent_error_loop+0x98>)
 8004624:	881b      	ldrh	r3, [r3, #0]
 8004626:	461a      	mov	r2, r3
 8004628:	4b0b      	ldr	r3, [pc, #44]	@ (8004658 <silent_error_loop+0x90>)
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	429a      	cmp	r2, r3
 800462e:	d20b      	bcs.n	8004648 <silent_error_loop+0x80>
			transmit_voltages(cellVoltages);
 8004630:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8004634:	4618      	mov	r0, r3
 8004636:	f000 f9c1 	bl	80049bc <transmit_voltages>
			transmit_temperatures(temperatures);
 800463a:	463b      	mov	r3, r7
 800463c:	4618      	mov	r0, r3
 800463e:	f000 fb8d 	bl	8004d5c <transmit_temperatures>

			transmitCounter = 0;
 8004642:	4b05      	ldr	r3, [pc, #20]	@ (8004658 <silent_error_loop+0x90>)
 8004644:	2200      	movs	r2, #0
 8004646:	601a      	str	r2, [r3, #0]
		}

		wait(1);
 8004648:	2001      	movs	r0, #1
 800464a:	f004 fdf5 	bl	8009238 <wait>
		if(measureCounter > 100) {
 800464e:	e7ce      	b.n	80045ee <silent_error_loop+0x26>
 8004650:	40020000 	.word	0x40020000
 8004654:	40020800 	.word	0x40020800
 8004658:	200003e8 	.word	0x200003e8
 800465c:	200003ec 	.word	0x200003ec
 8004660:	200003e4 	.word	0x200003e4

08004664 <error_loop>:
	}
}


void error_loop(uint8_t errorCode, uint16_t faultValue, uint8_t faultIndex)
{
 8004664:	b580      	push	{r7, lr}
 8004666:	b0a0      	sub	sp, #128	@ 0x80
 8004668:	af00      	add	r7, sp, #0
 800466a:	4603      	mov	r3, r0
 800466c:	71fb      	strb	r3, [r7, #7]
 800466e:	460b      	mov	r3, r1
 8004670:	80bb      	strh	r3, [r7, #4]
 8004672:	4613      	mov	r3, r2
 8004674:	71bb      	strb	r3, [r7, #6]
	uint8_t msgFault[8];

	msgFault[0] = moduleID;
 8004676:	4b66      	ldr	r3, [pc, #408]	@ (8004810 <error_loop+0x1ac>)
 8004678:	781b      	ldrb	r3, [r3, #0]
 800467a:	f887 3078 	strb.w	r3, [r7, #120]	@ 0x78
	msgFault[1] = errorCode;
 800467e:	79fb      	ldrb	r3, [r7, #7]
 8004680:	f887 3079 	strb.w	r3, [r7, #121]	@ 0x79

	switch(errorCode) {
 8004684:	79fb      	ldrb	r3, [r7, #7]
 8004686:	3b45      	subs	r3, #69	@ 0x45
 8004688:	2b04      	cmp	r3, #4
 800468a:	d865      	bhi.n	8004758 <error_loop+0xf4>
 800468c:	a201      	add	r2, pc, #4	@ (adr r2, 8004694 <error_loop+0x30>)
 800468e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004692:	bf00      	nop
 8004694:	080046a9 	.word	0x080046a9
 8004698:	080046fd 	.word	0x080046fd
 800469c:	0800472b 	.word	0x0800472b
 80046a0:	08004759 	.word	0x08004759
 80046a4:	080046d7 	.word	0x080046d7
		case ERROR_OVERHEAT:
			// Setting cell voltage portions of fault message to zero
			msgFault[2] = 0;
 80046a8:	2300      	movs	r3, #0
 80046aa:	f887 307a 	strb.w	r3, [r7, #122]	@ 0x7a
			msgFault[3] = 0;
 80046ae:	2300      	movs	r3, #0
 80046b0:	f887 307b 	strb.w	r3, [r7, #123]	@ 0x7b
			msgFault[4] = 0;
 80046b4:	2300      	movs	r3, #0
 80046b6:	f887 307c 	strb.w	r3, [r7, #124]	@ 0x7c

			msgFault[5] = (uint8_t)(faultValue & 0xFF);
 80046ba:	88bb      	ldrh	r3, [r7, #4]
 80046bc:	b2db      	uxtb	r3, r3
 80046be:	f887 307d 	strb.w	r3, [r7, #125]	@ 0x7d
			msgFault[6] = (uint8_t)((faultValue >> 8) & 0xFF);
 80046c2:	88bb      	ldrh	r3, [r7, #4]
 80046c4:	0a1b      	lsrs	r3, r3, #8
 80046c6:	b29b      	uxth	r3, r3
 80046c8:	b2db      	uxtb	r3, r3
 80046ca:	f887 307e 	strb.w	r3, [r7, #126]	@ 0x7e
			msgFault[7] = faultIndex;
 80046ce:	79bb      	ldrb	r3, [r7, #6]
 80046d0:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
			break;
 80046d4:	e053      	b.n	800477e <error_loop+0x11a>
		case ERROR_THERMISTOR_OPEN:
			msgFault[2] = 0;
 80046d6:	2300      	movs	r3, #0
 80046d8:	f887 307a 	strb.w	r3, [r7, #122]	@ 0x7a
			msgFault[3] = 0;
 80046dc:	2300      	movs	r3, #0
 80046de:	f887 307b 	strb.w	r3, [r7, #123]	@ 0x7b
			msgFault[4] = 0;
 80046e2:	2300      	movs	r3, #0
 80046e4:	f887 307c 	strb.w	r3, [r7, #124]	@ 0x7c

			msgFault[5] = 0;
 80046e8:	2300      	movs	r3, #0
 80046ea:	f887 307d 	strb.w	r3, [r7, #125]	@ 0x7d
			msgFault[6] = 0;
 80046ee:	2300      	movs	r3, #0
 80046f0:	f887 307e 	strb.w	r3, [r7, #126]	@ 0x7e
			msgFault[7] = faultIndex;
 80046f4:	79bb      	ldrb	r3, [r7, #6]
 80046f6:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
			break;
 80046fa:	e040      	b.n	800477e <error_loop+0x11a>
		case ERROR_UNDERVOLT:
			msgFault[2] = (uint8_t)(faultValue & 0xFF);
 80046fc:	88bb      	ldrh	r3, [r7, #4]
 80046fe:	b2db      	uxtb	r3, r3
 8004700:	f887 307a 	strb.w	r3, [r7, #122]	@ 0x7a
			msgFault[3] = (uint8_t)((faultValue >> 8) & 0xFF);
 8004704:	88bb      	ldrh	r3, [r7, #4]
 8004706:	0a1b      	lsrs	r3, r3, #8
 8004708:	b29b      	uxth	r3, r3
 800470a:	b2db      	uxtb	r3, r3
 800470c:	f887 307b 	strb.w	r3, [r7, #123]	@ 0x7b
			msgFault[4] = faultIndex;
 8004710:	79bb      	ldrb	r3, [r7, #6]
 8004712:	f887 307c 	strb.w	r3, [r7, #124]	@ 0x7c

			// Setting temperature portions of fault message to zero
			msgFault[5] = 0;
 8004716:	2300      	movs	r3, #0
 8004718:	f887 307d 	strb.w	r3, [r7, #125]	@ 0x7d
			msgFault[6] = 0;
 800471c:	2300      	movs	r3, #0
 800471e:	f887 307e 	strb.w	r3, [r7, #126]	@ 0x7e
			msgFault[7] = 0;
 8004722:	2300      	movs	r3, #0
 8004724:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
			break;
 8004728:	e029      	b.n	800477e <error_loop+0x11a>
		case ERROR_OVERVOLT:
			msgFault[2] = (uint8_t)(faultValue & 0xFF);
 800472a:	88bb      	ldrh	r3, [r7, #4]
 800472c:	b2db      	uxtb	r3, r3
 800472e:	f887 307a 	strb.w	r3, [r7, #122]	@ 0x7a
			msgFault[3] = (uint8_t)((faultValue >> 8) & 0xFF);
 8004732:	88bb      	ldrh	r3, [r7, #4]
 8004734:	0a1b      	lsrs	r3, r3, #8
 8004736:	b29b      	uxth	r3, r3
 8004738:	b2db      	uxtb	r3, r3
 800473a:	f887 307b 	strb.w	r3, [r7, #123]	@ 0x7b
			msgFault[4] = faultIndex;
 800473e:	79bb      	ldrb	r3, [r7, #6]
 8004740:	f887 307c 	strb.w	r3, [r7, #124]	@ 0x7c

			// Setting temperature portions of fault message to zero
			msgFault[5] = 0;
 8004744:	2300      	movs	r3, #0
 8004746:	f887 307d 	strb.w	r3, [r7, #125]	@ 0x7d
			msgFault[6] = 0;
 800474a:	2300      	movs	r3, #0
 800474c:	f887 307e 	strb.w	r3, [r7, #126]	@ 0x7e
			msgFault[7] = 0;
 8004750:	2300      	movs	r3, #0
 8004752:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
			break;
 8004756:	e012      	b.n	800477e <error_loop+0x11a>
		default:
			msgFault[2] = 0;
 8004758:	2300      	movs	r3, #0
 800475a:	f887 307a 	strb.w	r3, [r7, #122]	@ 0x7a
			msgFault[3] = 0;
 800475e:	2300      	movs	r3, #0
 8004760:	f887 307b 	strb.w	r3, [r7, #123]	@ 0x7b
			msgFault[4] = 0;
 8004764:	2300      	movs	r3, #0
 8004766:	f887 307c 	strb.w	r3, [r7, #124]	@ 0x7c
			msgFault[5] = 0;
 800476a:	2300      	movs	r3, #0
 800476c:	f887 307d 	strb.w	r3, [r7, #125]	@ 0x7d
			msgFault[6] = 0;
 8004770:	2300      	movs	r3, #0
 8004772:	f887 307e 	strb.w	r3, [r7, #126]	@ 0x7e
			msgFault[7] = 0;
 8004776:	2300      	movs	r3, #0
 8004778:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
			break;
 800477c:	bf00      	nop
	}
	active_led_on();
 800477e:	f004 fdc1 	bl	8009304 <active_led_on>
	charge_led_on();
 8004782:	f004 fdd7 	bl	8009334 <charge_led_on>
	balance_led_off();
 8004786:	f004 fdf9 	bl	800937c <balance_led_off>
	hot_led_off();
 800478a:	f004 fe0d 	bl	80093a8 <hot_led_off>

	uint16_t cellVoltages[CELL_QTY];
	float temperatures[THERM_QTY];
	transmitCounter = 0;
 800478e:	4b21      	ldr	r3, [pc, #132]	@ (8004814 <error_loop+0x1b0>)
 8004790:	2200      	movs	r2, #0
 8004792:	601a      	str	r2, [r3, #0]
	measureCounter = 0;
 8004794:	4b20      	ldr	r3, [pc, #128]	@ (8004818 <error_loop+0x1b4>)
 8004796:	2200      	movs	r2, #0
 8004798:	601a      	str	r2, [r3, #0]
	while(1) {

		if(measureCounter > 100) {
 800479a:	4b1f      	ldr	r3, [pc, #124]	@ (8004818 <error_loop+0x1b4>)
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	2b64      	cmp	r3, #100	@ 0x64
 80047a0:	d916      	bls.n	80047d0 <error_loop+0x16c>
			if(!refup_check()) {
 80047a2:	f004 f81d 	bl	80087e0 <refup_check>
 80047a6:	4603      	mov	r3, r0
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d104      	bne.n	80047b6 <error_loop+0x152>
				force_refup();
 80047ac:	f003 ffdc 	bl	8008768 <force_refup>
				wait(1);
 80047b0:	2001      	movs	r0, #1
 80047b2:	f004 fd41 	bl	8009238 <wait>
			}

			temperature_sense(temperatures);
 80047b6:	f107 0308 	add.w	r3, r7, #8
 80047ba:	4618      	mov	r0, r3
 80047bc:	f004 ff58 	bl	8009670 <temperature_sense>
			voltage_sense(cellVoltages);
 80047c0:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80047c4:	4618      	mov	r0, r3
 80047c6:	f005 fd7f 	bl	800a2c8 <voltage_sense>

			measureCounter = 0;
 80047ca:	4b13      	ldr	r3, [pc, #76]	@ (8004818 <error_loop+0x1b4>)
 80047cc:	2200      	movs	r2, #0
 80047ce:	601a      	str	r2, [r3, #0]
		}

		if(transmitCounter > transmissionDelay) {
 80047d0:	4b12      	ldr	r3, [pc, #72]	@ (800481c <error_loop+0x1b8>)
 80047d2:	881b      	ldrh	r3, [r3, #0]
 80047d4:	461a      	mov	r2, r3
 80047d6:	4b0f      	ldr	r3, [pc, #60]	@ (8004814 <error_loop+0x1b0>)
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	429a      	cmp	r2, r3
 80047dc:	d213      	bcs.n	8004806 <error_loop+0x1a2>
			can_transmit(CAN_FAULT_ID, msgFault);
 80047de:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 80047e2:	4619      	mov	r1, r3
 80047e4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80047e8:	f7ff feca 	bl	8004580 <can_transmit>
			transmit_voltages(cellVoltages);
 80047ec:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80047f0:	4618      	mov	r0, r3
 80047f2:	f000 f8e3 	bl	80049bc <transmit_voltages>
			transmit_temperatures(temperatures);
 80047f6:	f107 0308 	add.w	r3, r7, #8
 80047fa:	4618      	mov	r0, r3
 80047fc:	f000 faae 	bl	8004d5c <transmit_temperatures>

			transmitCounter = 0;
 8004800:	4b04      	ldr	r3, [pc, #16]	@ (8004814 <error_loop+0x1b0>)
 8004802:	2200      	movs	r2, #0
 8004804:	601a      	str	r2, [r3, #0]
		}

		wait(1);
 8004806:	2001      	movs	r0, #1
 8004808:	f004 fd16 	bl	8009238 <wait>
		if(measureCounter > 100) {
 800480c:	e7c5      	b.n	800479a <error_loop+0x136>
 800480e:	bf00      	nop
 8004810:	0800ea9c 	.word	0x0800ea9c
 8004814:	200003e8 	.word	0x200003e8
 8004818:	200003ec 	.word	0x200003ec
 800481c:	200003e4 	.word	0x200003e4

08004820 <transmit_balance>:
	}
}


void transmit_balance(uint8_t *balanceMsg)
{
 8004820:	b580      	push	{r7, lr}
 8004822:	b086      	sub	sp, #24
 8004824:	af00      	add	r7, sp, #0
 8004826:	6078      	str	r0, [r7, #4]
	uint8_t payload[8] = {0};
 8004828:	f107 030c 	add.w	r3, r7, #12
 800482c:	2200      	movs	r2, #0
 800482e:	601a      	str	r2, [r3, #0]
 8004830:	605a      	str	r2, [r3, #4]

	for(uint8_t i = 0; i < 8; i++) { payload[i] = *(balanceMsg + i); }
 8004832:	2300      	movs	r3, #0
 8004834:	75fb      	strb	r3, [r7, #23]
 8004836:	e00b      	b.n	8004850 <transmit_balance+0x30>
 8004838:	7dfb      	ldrb	r3, [r7, #23]
 800483a:	687a      	ldr	r2, [r7, #4]
 800483c:	441a      	add	r2, r3
 800483e:	7dfb      	ldrb	r3, [r7, #23]
 8004840:	7812      	ldrb	r2, [r2, #0]
 8004842:	3318      	adds	r3, #24
 8004844:	443b      	add	r3, r7
 8004846:	f803 2c0c 	strb.w	r2, [r3, #-12]
 800484a:	7dfb      	ldrb	r3, [r7, #23]
 800484c:	3301      	adds	r3, #1
 800484e:	75fb      	strb	r3, [r7, #23]
 8004850:	7dfb      	ldrb	r3, [r7, #23]
 8004852:	2b07      	cmp	r3, #7
 8004854:	d9f0      	bls.n	8004838 <transmit_balance+0x18>

	switch(moduleID) {
 8004856:	4b1f      	ldr	r3, [pc, #124]	@ (80048d4 <transmit_balance+0xb4>)
 8004858:	781b      	ldrb	r3, [r3, #0]
 800485a:	3b01      	subs	r3, #1
 800485c:	2b04      	cmp	r3, #4
 800485e:	d835      	bhi.n	80048cc <transmit_balance+0xac>
 8004860:	a201      	add	r2, pc, #4	@ (adr r2, 8004868 <transmit_balance+0x48>)
 8004862:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004866:	bf00      	nop
 8004868:	0800487d 	.word	0x0800487d
 800486c:	0800488d 	.word	0x0800488d
 8004870:	0800489d 	.word	0x0800489d
 8004874:	080048ad 	.word	0x080048ad
 8004878:	080048bd 	.word	0x080048bd
		case 1:
			can_transmit(CAN_M1_BALANCE_ID, payload);
 800487c:	f107 030c 	add.w	r3, r7, #12
 8004880:	4619      	mov	r1, r3
 8004882:	f240 30e9 	movw	r0, #1001	@ 0x3e9
 8004886:	f7ff fe7b 	bl	8004580 <can_transmit>
			break;
 800488a:	e01f      	b.n	80048cc <transmit_balance+0xac>
		case 2:
			can_transmit(CAN_M2_BALANCE_ID, payload);
 800488c:	f107 030c 	add.w	r3, r7, #12
 8004890:	4619      	mov	r1, r3
 8004892:	f240 30ea 	movw	r0, #1002	@ 0x3ea
 8004896:	f7ff fe73 	bl	8004580 <can_transmit>
			break;
 800489a:	e017      	b.n	80048cc <transmit_balance+0xac>
		case 3:
			can_transmit(CAN_M3_BALANCE_ID, payload);
 800489c:	f107 030c 	add.w	r3, r7, #12
 80048a0:	4619      	mov	r1, r3
 80048a2:	f240 30eb 	movw	r0, #1003	@ 0x3eb
 80048a6:	f7ff fe6b 	bl	8004580 <can_transmit>
			break;
 80048aa:	e00f      	b.n	80048cc <transmit_balance+0xac>
		case 4:
			can_transmit(CAN_M4_BALANCE_ID, payload);
 80048ac:	f107 030c 	add.w	r3, r7, #12
 80048b0:	4619      	mov	r1, r3
 80048b2:	f44f 707b 	mov.w	r0, #1004	@ 0x3ec
 80048b6:	f7ff fe63 	bl	8004580 <can_transmit>
			break;
 80048ba:	e007      	b.n	80048cc <transmit_balance+0xac>
		case 5:
			can_transmit(CAN_M5_BALANCE_ID, payload);
 80048bc:	f107 030c 	add.w	r3, r7, #12
 80048c0:	4619      	mov	r1, r3
 80048c2:	f240 30ed 	movw	r0, #1005	@ 0x3ed
 80048c6:	f7ff fe5b 	bl	8004580 <can_transmit>
			break;
 80048ca:	bf00      	nop
	}
}
 80048cc:	bf00      	nop
 80048ce:	3718      	adds	r7, #24
 80048d0:	46bd      	mov	sp, r7
 80048d2:	bd80      	pop	{r7, pc}
 80048d4:	0800ea9c 	.word	0x0800ea9c

080048d8 <transmit_balance_initiation>:


void transmit_balance_initiation(uint16_t absMinCellVoltage)
{
 80048d8:	b580      	push	{r7, lr}
 80048da:	b084      	sub	sp, #16
 80048dc:	af00      	add	r7, sp, #0
 80048de:	4603      	mov	r3, r0
 80048e0:	80fb      	strh	r3, [r7, #6]
	uint8_t payload[8] = {0};
 80048e2:	f107 0308 	add.w	r3, r7, #8
 80048e6:	2200      	movs	r2, #0
 80048e8:	601a      	str	r2, [r3, #0]
 80048ea:	605a      	str	r2, [r3, #4]

	payload[0] = (uint8_t)(absMinCellVoltage & 0xFF);
 80048ec:	88fb      	ldrh	r3, [r7, #6]
 80048ee:	b2db      	uxtb	r3, r3
 80048f0:	723b      	strb	r3, [r7, #8]
	payload[1] = (uint8_t)((absMinCellVoltage >> 8) & 0xFF);
 80048f2:	88fb      	ldrh	r3, [r7, #6]
 80048f4:	0a1b      	lsrs	r3, r3, #8
 80048f6:	b29b      	uxth	r3, r3
 80048f8:	b2db      	uxtb	r3, r3
 80048fa:	727b      	strb	r3, [r7, #9]

	can_transmit(CAN_MIN_VCELL_ID, payload);
 80048fc:	f107 0308 	add.w	r3, r7, #8
 8004900:	4619      	mov	r1, r3
 8004902:	f240 30e7 	movw	r0, #999	@ 0x3e7
 8004906:	f7ff fe3b 	bl	8004580 <can_transmit>
}
 800490a:	bf00      	nop
 800490c:	3710      	adds	r7, #16
 800490e:	46bd      	mov	sp, r7
 8004910:	bd80      	pop	{r7, pc}
	...

08004914 <transmit_vmin>:


void transmit_vmin(uint16_t minCellVoltage)
{
 8004914:	b580      	push	{r7, lr}
 8004916:	b084      	sub	sp, #16
 8004918:	af00      	add	r7, sp, #0
 800491a:	4603      	mov	r3, r0
 800491c:	80fb      	strh	r3, [r7, #6]
	uint8_t payload[8] = {0};
 800491e:	f107 0308 	add.w	r3, r7, #8
 8004922:	2200      	movs	r2, #0
 8004924:	601a      	str	r2, [r3, #0]
 8004926:	605a      	str	r2, [r3, #4]

	payload[0] = (uint8_t)(minCellVoltage & 0xFF);
 8004928:	88fb      	ldrh	r3, [r7, #6]
 800492a:	b2db      	uxtb	r3, r3
 800492c:	723b      	strb	r3, [r7, #8]
	payload[1] = (uint8_t)((minCellVoltage >> 8) & 0xFF);
 800492e:	88fb      	ldrh	r3, [r7, #6]
 8004930:	0a1b      	lsrs	r3, r3, #8
 8004932:	b29b      	uxth	r3, r3
 8004934:	b2db      	uxtb	r3, r3
 8004936:	727b      	strb	r3, [r7, #9]

	switch(moduleID) {
 8004938:	4b17      	ldr	r3, [pc, #92]	@ (8004998 <transmit_vmin+0x84>)
 800493a:	781b      	ldrb	r3, [r3, #0]
 800493c:	3b02      	subs	r3, #2
 800493e:	2b03      	cmp	r3, #3
 8004940:	d826      	bhi.n	8004990 <transmit_vmin+0x7c>
 8004942:	a201      	add	r2, pc, #4	@ (adr r2, 8004948 <transmit_vmin+0x34>)
 8004944:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004948:	08004959 	.word	0x08004959
 800494c:	08004967 	.word	0x08004967
 8004950:	08004975 	.word	0x08004975
 8004954:	08004983 	.word	0x08004983
		case 2:
			can_transmit(CAN_M2_VMIN_ID, payload);
 8004958:	f107 0308 	add.w	r3, r7, #8
 800495c:	4619      	mov	r1, r3
 800495e:	2046      	movs	r0, #70	@ 0x46
 8004960:	f7ff fe0e 	bl	8004580 <can_transmit>
			break;
 8004964:	e014      	b.n	8004990 <transmit_vmin+0x7c>
		case 3:
			can_transmit(CAN_M3_VMIN_ID, payload);
 8004966:	f107 0308 	add.w	r3, r7, #8
 800496a:	4619      	mov	r1, r3
 800496c:	2047      	movs	r0, #71	@ 0x47
 800496e:	f7ff fe07 	bl	8004580 <can_transmit>
			break;
 8004972:	e00d      	b.n	8004990 <transmit_vmin+0x7c>
		case 4:
			can_transmit(CAN_M4_VMIN_ID, payload);
 8004974:	f107 0308 	add.w	r3, r7, #8
 8004978:	4619      	mov	r1, r3
 800497a:	2048      	movs	r0, #72	@ 0x48
 800497c:	f7ff fe00 	bl	8004580 <can_transmit>
			break;
 8004980:	e006      	b.n	8004990 <transmit_vmin+0x7c>
		case 5:
			can_transmit(CAN_M5_VMIN_ID, payload);
 8004982:	f107 0308 	add.w	r3, r7, #8
 8004986:	4619      	mov	r1, r3
 8004988:	2049      	movs	r0, #73	@ 0x49
 800498a:	f7ff fdf9 	bl	8004580 <can_transmit>
			break;
 800498e:	bf00      	nop
	}
}
 8004990:	bf00      	nop
 8004992:	3710      	adds	r7, #16
 8004994:	46bd      	mov	sp, r7
 8004996:	bd80      	pop	{r7, pc}
 8004998:	0800ea9c 	.word	0x0800ea9c

0800499c <transmit_extract_vmin>:

void transmit_extract_vmin(void)
{
 800499c:	b580      	push	{r7, lr}
 800499e:	b082      	sub	sp, #8
 80049a0:	af00      	add	r7, sp, #0
	uint8_t zeroPayload[8] = {0};
 80049a2:	463b      	mov	r3, r7
 80049a4:	2200      	movs	r2, #0
 80049a6:	601a      	str	r2, [r3, #0]
 80049a8:	605a      	str	r2, [r3, #4]

	can_transmit(CAN_EXTRACT_VMIN_ID, zeroPayload);
 80049aa:	463b      	mov	r3, r7
 80049ac:	4619      	mov	r1, r3
 80049ae:	2045      	movs	r0, #69	@ 0x45
 80049b0:	f7ff fde6 	bl	8004580 <can_transmit>
}
 80049b4:	bf00      	nop
 80049b6:	3708      	adds	r7, #8
 80049b8:	46bd      	mov	sp, r7
 80049ba:	bd80      	pop	{r7, pc}

080049bc <transmit_voltages>:


void transmit_voltages(uint16_t *cellVoltages)
{
 80049bc:	b580      	push	{r7, lr}
 80049be:	b08c      	sub	sp, #48	@ 0x30
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	6078      	str	r0, [r7, #4]
	uint8_t msgV2[8];
	uint8_t msgV3[8];
	uint8_t msgV4[8];
	uint8_t msgV5[8];

	msgV1[0] = (uint8_t)(*cellVoltages & 0xFF);
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	881b      	ldrh	r3, [r3, #0]
 80049c8:	b2db      	uxtb	r3, r3
 80049ca:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
	msgV1[1] = (uint8_t)((*cellVoltages >> 8) & 0xFF);
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	881b      	ldrh	r3, [r3, #0]
 80049d2:	0a1b      	lsrs	r3, r3, #8
 80049d4:	b29b      	uxth	r3, r3
 80049d6:	b2db      	uxtb	r3, r3
 80049d8:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
	msgV1[2] = (uint8_t)(*(cellVoltages + 1) & 0xFF);
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	3302      	adds	r3, #2
 80049e0:	881b      	ldrh	r3, [r3, #0]
 80049e2:	b2db      	uxtb	r3, r3
 80049e4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
	msgV1[3] = (uint8_t)((*(cellVoltages + 1) >> 8) & 0xFF);
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	3302      	adds	r3, #2
 80049ec:	881b      	ldrh	r3, [r3, #0]
 80049ee:	0a1b      	lsrs	r3, r3, #8
 80049f0:	b29b      	uxth	r3, r3
 80049f2:	b2db      	uxtb	r3, r3
 80049f4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
	msgV1[4] = (uint8_t)(*(cellVoltages + 2) & 0xFF);
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	3304      	adds	r3, #4
 80049fc:	881b      	ldrh	r3, [r3, #0]
 80049fe:	b2db      	uxtb	r3, r3
 8004a00:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
	msgV1[5] = (uint8_t)((*(cellVoltages + 2) >> 8) & 0xFF);
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	3304      	adds	r3, #4
 8004a08:	881b      	ldrh	r3, [r3, #0]
 8004a0a:	0a1b      	lsrs	r3, r3, #8
 8004a0c:	b29b      	uxth	r3, r3
 8004a0e:	b2db      	uxtb	r3, r3
 8004a10:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
	msgV1[6] = (uint8_t)(*(cellVoltages + 3) & 0xFF);
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	3306      	adds	r3, #6
 8004a18:	881b      	ldrh	r3, [r3, #0]
 8004a1a:	b2db      	uxtb	r3, r3
 8004a1c:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
	msgV1[7] = (uint8_t)((*(cellVoltages + 3) >> 8) & 0xFF);
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	3306      	adds	r3, #6
 8004a24:	881b      	ldrh	r3, [r3, #0]
 8004a26:	0a1b      	lsrs	r3, r3, #8
 8004a28:	b29b      	uxth	r3, r3
 8004a2a:	b2db      	uxtb	r3, r3
 8004a2c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

	msgV2[0] = (uint8_t)(*(cellVoltages + 4) & 0xFF);
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	3308      	adds	r3, #8
 8004a34:	881b      	ldrh	r3, [r3, #0]
 8004a36:	b2db      	uxtb	r3, r3
 8004a38:	f887 3020 	strb.w	r3, [r7, #32]
	msgV2[1] = (uint8_t)((*(cellVoltages + 4) >> 8) & 0xFF);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	3308      	adds	r3, #8
 8004a40:	881b      	ldrh	r3, [r3, #0]
 8004a42:	0a1b      	lsrs	r3, r3, #8
 8004a44:	b29b      	uxth	r3, r3
 8004a46:	b2db      	uxtb	r3, r3
 8004a48:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
	msgV2[2] = (uint8_t)(*(cellVoltages + 5) & 0xFF);
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	330a      	adds	r3, #10
 8004a50:	881b      	ldrh	r3, [r3, #0]
 8004a52:	b2db      	uxtb	r3, r3
 8004a54:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
	msgV2[3] = (uint8_t)((*(cellVoltages + 5) >> 8) & 0xFF);
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	330a      	adds	r3, #10
 8004a5c:	881b      	ldrh	r3, [r3, #0]
 8004a5e:	0a1b      	lsrs	r3, r3, #8
 8004a60:	b29b      	uxth	r3, r3
 8004a62:	b2db      	uxtb	r3, r3
 8004a64:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
	msgV2[4] = (uint8_t)(*(cellVoltages + 6) & 0xFF);
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	330c      	adds	r3, #12
 8004a6c:	881b      	ldrh	r3, [r3, #0]
 8004a6e:	b2db      	uxtb	r3, r3
 8004a70:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
	msgV2[5] = (uint8_t)((*(cellVoltages + 6) >> 8) & 0xFF);
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	330c      	adds	r3, #12
 8004a78:	881b      	ldrh	r3, [r3, #0]
 8004a7a:	0a1b      	lsrs	r3, r3, #8
 8004a7c:	b29b      	uxth	r3, r3
 8004a7e:	b2db      	uxtb	r3, r3
 8004a80:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
	msgV2[6] = (uint8_t)(*(cellVoltages + 7) & 0xFF);
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	330e      	adds	r3, #14
 8004a88:	881b      	ldrh	r3, [r3, #0]
 8004a8a:	b2db      	uxtb	r3, r3
 8004a8c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	msgV2[7] = (uint8_t)((*(cellVoltages + 7) >> 8) & 0xFF);
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	330e      	adds	r3, #14
 8004a94:	881b      	ldrh	r3, [r3, #0]
 8004a96:	0a1b      	lsrs	r3, r3, #8
 8004a98:	b29b      	uxth	r3, r3
 8004a9a:	b2db      	uxtb	r3, r3
 8004a9c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

	msgV3[0] = (uint8_t)(*(cellVoltages + 8) & 0xFF);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	3310      	adds	r3, #16
 8004aa4:	881b      	ldrh	r3, [r3, #0]
 8004aa6:	b2db      	uxtb	r3, r3
 8004aa8:	763b      	strb	r3, [r7, #24]
	msgV3[1] = (uint8_t)((*(cellVoltages + 8) >> 8) & 0xFF);
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	3310      	adds	r3, #16
 8004aae:	881b      	ldrh	r3, [r3, #0]
 8004ab0:	0a1b      	lsrs	r3, r3, #8
 8004ab2:	b29b      	uxth	r3, r3
 8004ab4:	b2db      	uxtb	r3, r3
 8004ab6:	767b      	strb	r3, [r7, #25]
	msgV3[2] = (uint8_t)(*(cellVoltages + 9) & 0xFF);
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	3312      	adds	r3, #18
 8004abc:	881b      	ldrh	r3, [r3, #0]
 8004abe:	b2db      	uxtb	r3, r3
 8004ac0:	76bb      	strb	r3, [r7, #26]
	msgV3[3] = (uint8_t)((*(cellVoltages + 9) >> 8) & 0xFF);
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	3312      	adds	r3, #18
 8004ac6:	881b      	ldrh	r3, [r3, #0]
 8004ac8:	0a1b      	lsrs	r3, r3, #8
 8004aca:	b29b      	uxth	r3, r3
 8004acc:	b2db      	uxtb	r3, r3
 8004ace:	76fb      	strb	r3, [r7, #27]
	msgV3[4] = (uint8_t)(*(cellVoltages + 10) & 0xFF);
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	3314      	adds	r3, #20
 8004ad4:	881b      	ldrh	r3, [r3, #0]
 8004ad6:	b2db      	uxtb	r3, r3
 8004ad8:	773b      	strb	r3, [r7, #28]
	msgV3[5] = (uint8_t)((*(cellVoltages + 10) >> 8) & 0xFF);
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	3314      	adds	r3, #20
 8004ade:	881b      	ldrh	r3, [r3, #0]
 8004ae0:	0a1b      	lsrs	r3, r3, #8
 8004ae2:	b29b      	uxth	r3, r3
 8004ae4:	b2db      	uxtb	r3, r3
 8004ae6:	777b      	strb	r3, [r7, #29]
	msgV3[6] = (uint8_t)(*(cellVoltages + 11) & 0xFF);
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	3316      	adds	r3, #22
 8004aec:	881b      	ldrh	r3, [r3, #0]
 8004aee:	b2db      	uxtb	r3, r3
 8004af0:	77bb      	strb	r3, [r7, #30]
	msgV3[7] = (uint8_t)((*(cellVoltages + 11) >> 8) & 0xFF);
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	3316      	adds	r3, #22
 8004af6:	881b      	ldrh	r3, [r3, #0]
 8004af8:	0a1b      	lsrs	r3, r3, #8
 8004afa:	b29b      	uxth	r3, r3
 8004afc:	b2db      	uxtb	r3, r3
 8004afe:	77fb      	strb	r3, [r7, #31]

	msgV4[0] = (uint8_t)(*(cellVoltages + 12) & 0xFF);
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	3318      	adds	r3, #24
 8004b04:	881b      	ldrh	r3, [r3, #0]
 8004b06:	b2db      	uxtb	r3, r3
 8004b08:	743b      	strb	r3, [r7, #16]
	msgV4[1] = (uint8_t)((*(cellVoltages + 12) >> 8) & 0xFF);
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	3318      	adds	r3, #24
 8004b0e:	881b      	ldrh	r3, [r3, #0]
 8004b10:	0a1b      	lsrs	r3, r3, #8
 8004b12:	b29b      	uxth	r3, r3
 8004b14:	b2db      	uxtb	r3, r3
 8004b16:	747b      	strb	r3, [r7, #17]
	msgV4[2] = (uint8_t)(*(cellVoltages + 13) & 0xFF);
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	331a      	adds	r3, #26
 8004b1c:	881b      	ldrh	r3, [r3, #0]
 8004b1e:	b2db      	uxtb	r3, r3
 8004b20:	74bb      	strb	r3, [r7, #18]
	msgV4[3] = (uint8_t)((*(cellVoltages + 13) >> 8) & 0xFF);
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	331a      	adds	r3, #26
 8004b26:	881b      	ldrh	r3, [r3, #0]
 8004b28:	0a1b      	lsrs	r3, r3, #8
 8004b2a:	b29b      	uxth	r3, r3
 8004b2c:	b2db      	uxtb	r3, r3
 8004b2e:	74fb      	strb	r3, [r7, #19]
	msgV4[4] = (uint8_t)(*(cellVoltages + 14) & 0xFF);
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	331c      	adds	r3, #28
 8004b34:	881b      	ldrh	r3, [r3, #0]
 8004b36:	b2db      	uxtb	r3, r3
 8004b38:	753b      	strb	r3, [r7, #20]
	msgV4[5] = (uint8_t)((*(cellVoltages + 14) >> 8) & 0xFF);
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	331c      	adds	r3, #28
 8004b3e:	881b      	ldrh	r3, [r3, #0]
 8004b40:	0a1b      	lsrs	r3, r3, #8
 8004b42:	b29b      	uxth	r3, r3
 8004b44:	b2db      	uxtb	r3, r3
 8004b46:	757b      	strb	r3, [r7, #21]
	msgV4[6] = (uint8_t)(*(cellVoltages + 15) & 0xFF);
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	331e      	adds	r3, #30
 8004b4c:	881b      	ldrh	r3, [r3, #0]
 8004b4e:	b2db      	uxtb	r3, r3
 8004b50:	75bb      	strb	r3, [r7, #22]
	msgV4[7] = (uint8_t)((*(cellVoltages + 15) >> 8) & 0xFF);
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	331e      	adds	r3, #30
 8004b56:	881b      	ldrh	r3, [r3, #0]
 8004b58:	0a1b      	lsrs	r3, r3, #8
 8004b5a:	b29b      	uxth	r3, r3
 8004b5c:	b2db      	uxtb	r3, r3
 8004b5e:	75fb      	strb	r3, [r7, #23]

	msgV5[0] = (uint8_t)(*(cellVoltages + 16) & 0xFF);
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	3320      	adds	r3, #32
 8004b64:	881b      	ldrh	r3, [r3, #0]
 8004b66:	b2db      	uxtb	r3, r3
 8004b68:	723b      	strb	r3, [r7, #8]
	msgV5[1] = (uint8_t)((*(cellVoltages + 16) >> 8) & 0xFF);
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	3320      	adds	r3, #32
 8004b6e:	881b      	ldrh	r3, [r3, #0]
 8004b70:	0a1b      	lsrs	r3, r3, #8
 8004b72:	b29b      	uxth	r3, r3
 8004b74:	b2db      	uxtb	r3, r3
 8004b76:	727b      	strb	r3, [r7, #9]
	msgV5[2] = (uint8_t)(*(cellVoltages + 17) & 0xFF);
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	3322      	adds	r3, #34	@ 0x22
 8004b7c:	881b      	ldrh	r3, [r3, #0]
 8004b7e:	b2db      	uxtb	r3, r3
 8004b80:	72bb      	strb	r3, [r7, #10]
	msgV5[3] = (uint8_t)((*(cellVoltages + 17) >> 8) & 0xFF);
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	3322      	adds	r3, #34	@ 0x22
 8004b86:	881b      	ldrh	r3, [r3, #0]
 8004b88:	0a1b      	lsrs	r3, r3, #8
 8004b8a:	b29b      	uxth	r3, r3
 8004b8c:	b2db      	uxtb	r3, r3
 8004b8e:	72fb      	strb	r3, [r7, #11]
	msgV5[4] = (uint8_t)(*(cellVoltages + 18) & 0xFF);
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	3324      	adds	r3, #36	@ 0x24
 8004b94:	881b      	ldrh	r3, [r3, #0]
 8004b96:	b2db      	uxtb	r3, r3
 8004b98:	733b      	strb	r3, [r7, #12]
	msgV5[5] = (uint8_t)((*(cellVoltages + 18) >> 8) & 0xFF);
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	3324      	adds	r3, #36	@ 0x24
 8004b9e:	881b      	ldrh	r3, [r3, #0]
 8004ba0:	0a1b      	lsrs	r3, r3, #8
 8004ba2:	b29b      	uxth	r3, r3
 8004ba4:	b2db      	uxtb	r3, r3
 8004ba6:	737b      	strb	r3, [r7, #13]
	msgV5[6] = (uint8_t)(*(cellVoltages + 19) & 0xFF);
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	3326      	adds	r3, #38	@ 0x26
 8004bac:	881b      	ldrh	r3, [r3, #0]
 8004bae:	b2db      	uxtb	r3, r3
 8004bb0:	73bb      	strb	r3, [r7, #14]
	msgV5[7] = (uint8_t)((*(cellVoltages + 19) >> 8) & 0xFF);
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	3326      	adds	r3, #38	@ 0x26
 8004bb6:	881b      	ldrh	r3, [r3, #0]
 8004bb8:	0a1b      	lsrs	r3, r3, #8
 8004bba:	b29b      	uxth	r3, r3
 8004bbc:	b2db      	uxtb	r3, r3
 8004bbe:	73fb      	strb	r3, [r7, #15]

	switch(moduleID) {
 8004bc0:	4b65      	ldr	r3, [pc, #404]	@ (8004d58 <transmit_voltages+0x39c>)
 8004bc2:	781b      	ldrb	r3, [r3, #0]
 8004bc4:	3b01      	subs	r3, #1
 8004bc6:	2b04      	cmp	r3, #4
 8004bc8:	f200 80c2 	bhi.w	8004d50 <transmit_voltages+0x394>
 8004bcc:	a201      	add	r2, pc, #4	@ (adr r2, 8004bd4 <transmit_voltages+0x218>)
 8004bce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bd2:	bf00      	nop
 8004bd4:	08004be9 	.word	0x08004be9
 8004bd8:	08004c31 	.word	0x08004c31
 8004bdc:	08004c79 	.word	0x08004c79
 8004be0:	08004cc1 	.word	0x08004cc1
 8004be4:	08004d09 	.word	0x08004d09
		case 1:
			can_transmit(CAN_M1_V1_ID, msgV1);
 8004be8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8004bec:	4619      	mov	r1, r3
 8004bee:	f240 30ee 	movw	r0, #1006	@ 0x3ee
 8004bf2:	f7ff fcc5 	bl	8004580 <can_transmit>
			can_transmit(CAN_M1_V2_ID, msgV2);
 8004bf6:	f107 0320 	add.w	r3, r7, #32
 8004bfa:	4619      	mov	r1, r3
 8004bfc:	f240 30ef 	movw	r0, #1007	@ 0x3ef
 8004c00:	f7ff fcbe 	bl	8004580 <can_transmit>
			can_transmit(CAN_M1_V3_ID, msgV3);
 8004c04:	f107 0318 	add.w	r3, r7, #24
 8004c08:	4619      	mov	r1, r3
 8004c0a:	f44f 707c 	mov.w	r0, #1008	@ 0x3f0
 8004c0e:	f7ff fcb7 	bl	8004580 <can_transmit>
			can_transmit(CAN_M1_V4_ID, msgV4);
 8004c12:	f107 0310 	add.w	r3, r7, #16
 8004c16:	4619      	mov	r1, r3
 8004c18:	f240 30f1 	movw	r0, #1009	@ 0x3f1
 8004c1c:	f7ff fcb0 	bl	8004580 <can_transmit>
			can_transmit(CAN_M1_V5_ID, msgV5);
 8004c20:	f107 0308 	add.w	r3, r7, #8
 8004c24:	4619      	mov	r1, r3
 8004c26:	f240 30f2 	movw	r0, #1010	@ 0x3f2
 8004c2a:	f7ff fca9 	bl	8004580 <can_transmit>
			break;
 8004c2e:	e08f      	b.n	8004d50 <transmit_voltages+0x394>
		case 2:
			can_transmit(CAN_M2_V1_ID, msgV1);
 8004c30:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8004c34:	4619      	mov	r1, r3
 8004c36:	f240 30f3 	movw	r0, #1011	@ 0x3f3
 8004c3a:	f7ff fca1 	bl	8004580 <can_transmit>
			can_transmit(CAN_M2_V2_ID, msgV2);
 8004c3e:	f107 0320 	add.w	r3, r7, #32
 8004c42:	4619      	mov	r1, r3
 8004c44:	f44f 707d 	mov.w	r0, #1012	@ 0x3f4
 8004c48:	f7ff fc9a 	bl	8004580 <can_transmit>
			can_transmit(CAN_M2_V3_ID, msgV3);
 8004c4c:	f107 0318 	add.w	r3, r7, #24
 8004c50:	4619      	mov	r1, r3
 8004c52:	f240 30f5 	movw	r0, #1013	@ 0x3f5
 8004c56:	f7ff fc93 	bl	8004580 <can_transmit>
			can_transmit(CAN_M2_V4_ID, msgV4);
 8004c5a:	f107 0310 	add.w	r3, r7, #16
 8004c5e:	4619      	mov	r1, r3
 8004c60:	f240 30f6 	movw	r0, #1014	@ 0x3f6
 8004c64:	f7ff fc8c 	bl	8004580 <can_transmit>
			can_transmit(CAN_M2_V5_ID, msgV5);
 8004c68:	f107 0308 	add.w	r3, r7, #8
 8004c6c:	4619      	mov	r1, r3
 8004c6e:	f240 30f7 	movw	r0, #1015	@ 0x3f7
 8004c72:	f7ff fc85 	bl	8004580 <can_transmit>
			break;
 8004c76:	e06b      	b.n	8004d50 <transmit_voltages+0x394>
		case 3:
			can_transmit(CAN_M3_V1_ID, msgV1);
 8004c78:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8004c7c:	4619      	mov	r1, r3
 8004c7e:	f44f 707e 	mov.w	r0, #1016	@ 0x3f8
 8004c82:	f7ff fc7d 	bl	8004580 <can_transmit>
			can_transmit(CAN_M3_V2_ID, msgV2);
 8004c86:	f107 0320 	add.w	r3, r7, #32
 8004c8a:	4619      	mov	r1, r3
 8004c8c:	f240 30f9 	movw	r0, #1017	@ 0x3f9
 8004c90:	f7ff fc76 	bl	8004580 <can_transmit>
			can_transmit(CAN_M3_V3_ID, msgV3);
 8004c94:	f107 0318 	add.w	r3, r7, #24
 8004c98:	4619      	mov	r1, r3
 8004c9a:	f240 30fa 	movw	r0, #1018	@ 0x3fa
 8004c9e:	f7ff fc6f 	bl	8004580 <can_transmit>
			can_transmit(CAN_M3_V4_ID, msgV4);
 8004ca2:	f107 0310 	add.w	r3, r7, #16
 8004ca6:	4619      	mov	r1, r3
 8004ca8:	f240 30fb 	movw	r0, #1019	@ 0x3fb
 8004cac:	f7ff fc68 	bl	8004580 <can_transmit>
			can_transmit(CAN_M3_V5_ID, msgV5);
 8004cb0:	f107 0308 	add.w	r3, r7, #8
 8004cb4:	4619      	mov	r1, r3
 8004cb6:	f44f 707f 	mov.w	r0, #1020	@ 0x3fc
 8004cba:	f7ff fc61 	bl	8004580 <can_transmit>
			break;
 8004cbe:	e047      	b.n	8004d50 <transmit_voltages+0x394>
		case 4:
			can_transmit(CAN_M4_V1_ID, msgV1);
 8004cc0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8004cc4:	4619      	mov	r1, r3
 8004cc6:	f240 30fd 	movw	r0, #1021	@ 0x3fd
 8004cca:	f7ff fc59 	bl	8004580 <can_transmit>
			can_transmit(CAN_M4_V2_ID, msgV2);
 8004cce:	f107 0320 	add.w	r3, r7, #32
 8004cd2:	4619      	mov	r1, r3
 8004cd4:	f240 30fe 	movw	r0, #1022	@ 0x3fe
 8004cd8:	f7ff fc52 	bl	8004580 <can_transmit>
			can_transmit(CAN_M4_V3_ID, msgV3);
 8004cdc:	f107 0318 	add.w	r3, r7, #24
 8004ce0:	4619      	mov	r1, r3
 8004ce2:	f240 30ff 	movw	r0, #1023	@ 0x3ff
 8004ce6:	f7ff fc4b 	bl	8004580 <can_transmit>
			can_transmit(CAN_M4_V4_ID, msgV4);
 8004cea:	f107 0310 	add.w	r3, r7, #16
 8004cee:	4619      	mov	r1, r3
 8004cf0:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8004cf4:	f7ff fc44 	bl	8004580 <can_transmit>
			can_transmit(CAN_M4_V5_ID, msgV5);
 8004cf8:	f107 0308 	add.w	r3, r7, #8
 8004cfc:	4619      	mov	r1, r3
 8004cfe:	f240 4001 	movw	r0, #1025	@ 0x401
 8004d02:	f7ff fc3d 	bl	8004580 <can_transmit>
			break;
 8004d06:	e023      	b.n	8004d50 <transmit_voltages+0x394>
		case 5:
			can_transmit(CAN_M5_V1_ID, msgV1);
 8004d08:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8004d0c:	4619      	mov	r1, r3
 8004d0e:	f240 4002 	movw	r0, #1026	@ 0x402
 8004d12:	f7ff fc35 	bl	8004580 <can_transmit>
			can_transmit(CAN_M5_V2_ID, msgV2);
 8004d16:	f107 0320 	add.w	r3, r7, #32
 8004d1a:	4619      	mov	r1, r3
 8004d1c:	f240 4003 	movw	r0, #1027	@ 0x403
 8004d20:	f7ff fc2e 	bl	8004580 <can_transmit>
			can_transmit(CAN_M5_V3_ID, msgV3);
 8004d24:	f107 0318 	add.w	r3, r7, #24
 8004d28:	4619      	mov	r1, r3
 8004d2a:	f240 4004 	movw	r0, #1028	@ 0x404
 8004d2e:	f7ff fc27 	bl	8004580 <can_transmit>
			can_transmit(CAN_M5_V4_ID, msgV4);
 8004d32:	f107 0310 	add.w	r3, r7, #16
 8004d36:	4619      	mov	r1, r3
 8004d38:	f240 4005 	movw	r0, #1029	@ 0x405
 8004d3c:	f7ff fc20 	bl	8004580 <can_transmit>
			can_transmit(CAN_M5_V5_ID, msgV5);
 8004d40:	f107 0308 	add.w	r3, r7, #8
 8004d44:	4619      	mov	r1, r3
 8004d46:	f240 4006 	movw	r0, #1030	@ 0x406
 8004d4a:	f7ff fc19 	bl	8004580 <can_transmit>
			break;
 8004d4e:	bf00      	nop
	}
}
 8004d50:	bf00      	nop
 8004d52:	3730      	adds	r7, #48	@ 0x30
 8004d54:	46bd      	mov	sp, r7
 8004d56:	bd80      	pop	{r7, pc}
 8004d58:	0800ea9c 	.word	0x0800ea9c

08004d5c <transmit_temperatures>:


void transmit_temperatures(float *temperatures)
{
 8004d5c:	b580      	push	{r7, lr}
 8004d5e:	b098      	sub	sp, #96	@ 0x60
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	6078      	str	r0, [r7, #4]
	uint8_t msgT1[8];
	uint8_t msgT2[8];
	uint8_t msgT3[8];
	uint8_t msgT4[8];
	uint8_t msgT5[8];
	float tempScale = 1000.0f;
 8004d64:	4bc4      	ldr	r3, [pc, #784]	@ (8005078 <transmit_temperatures+0x31c>)
 8004d66:	65bb      	str	r3, [r7, #88]	@ 0x58
	uint16_t intTemps[THERM_QTY];

	for(uint8_t i = 0; i < THERM_QTY; i++) {
 8004d68:	2300      	movs	r3, #0
 8004d6a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8004d6e:	e01b      	b.n	8004da8 <transmit_temperatures+0x4c>
		intTemps[i] = (uint16_t)(*(temperatures + i) * tempScale);
 8004d70:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8004d74:	009b      	lsls	r3, r3, #2
 8004d76:	687a      	ldr	r2, [r7, #4]
 8004d78:	4413      	add	r3, r2
 8004d7a:	ed93 7a00 	vldr	s14, [r3]
 8004d7e:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 8004d82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d86:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8004d8a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004d8e:	ee17 2a90 	vmov	r2, s15
 8004d92:	b292      	uxth	r2, r2
 8004d94:	005b      	lsls	r3, r3, #1
 8004d96:	3360      	adds	r3, #96	@ 0x60
 8004d98:	443b      	add	r3, r7
 8004d9a:	f823 2c54 	strh.w	r2, [r3, #-84]
	for(uint8_t i = 0; i < THERM_QTY; i++) {
 8004d9e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8004da2:	3301      	adds	r3, #1
 8004da4:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8004da8:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8004dac:	2b11      	cmp	r3, #17
 8004dae:	d9df      	bls.n	8004d70 <transmit_temperatures+0x14>
	}

	msgT1[0] = (uint8_t)(intTemps[0] & 0xFF);
 8004db0:	89bb      	ldrh	r3, [r7, #12]
 8004db2:	b2db      	uxtb	r3, r3
 8004db4:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
	msgT1[1] = (uint8_t)((intTemps[0] >> 8) & 0xFF);
 8004db8:	89bb      	ldrh	r3, [r7, #12]
 8004dba:	0a1b      	lsrs	r3, r3, #8
 8004dbc:	b29b      	uxth	r3, r3
 8004dbe:	b2db      	uxtb	r3, r3
 8004dc0:	f887 3051 	strb.w	r3, [r7, #81]	@ 0x51
	msgT1[2] = (uint8_t)(intTemps[1] & 0xFF);
 8004dc4:	89fb      	ldrh	r3, [r7, #14]
 8004dc6:	b2db      	uxtb	r3, r3
 8004dc8:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
	msgT1[3] = (uint8_t)((intTemps[1] >> 8) & 0xFF);
 8004dcc:	89fb      	ldrh	r3, [r7, #14]
 8004dce:	0a1b      	lsrs	r3, r3, #8
 8004dd0:	b29b      	uxth	r3, r3
 8004dd2:	b2db      	uxtb	r3, r3
 8004dd4:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
	msgT1[4] = (uint8_t)(intTemps[2] & 0xFF);
 8004dd8:	8a3b      	ldrh	r3, [r7, #16]
 8004dda:	b2db      	uxtb	r3, r3
 8004ddc:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
	msgT1[5] = (uint8_t)((intTemps[2] >> 8) & 0xFF);
 8004de0:	8a3b      	ldrh	r3, [r7, #16]
 8004de2:	0a1b      	lsrs	r3, r3, #8
 8004de4:	b29b      	uxth	r3, r3
 8004de6:	b2db      	uxtb	r3, r3
 8004de8:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
	msgT1[6] = (uint8_t)(intTemps[3] & 0xFF);
 8004dec:	8a7b      	ldrh	r3, [r7, #18]
 8004dee:	b2db      	uxtb	r3, r3
 8004df0:	f887 3056 	strb.w	r3, [r7, #86]	@ 0x56
	msgT1[7] = (uint8_t)((intTemps[3] >> 8) & 0xFF);
 8004df4:	8a7b      	ldrh	r3, [r7, #18]
 8004df6:	0a1b      	lsrs	r3, r3, #8
 8004df8:	b29b      	uxth	r3, r3
 8004dfa:	b2db      	uxtb	r3, r3
 8004dfc:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

	msgT2[0] = (uint8_t)(intTemps[4] & 0xFF);
 8004e00:	8abb      	ldrh	r3, [r7, #20]
 8004e02:	b2db      	uxtb	r3, r3
 8004e04:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
	msgT2[1] = (uint8_t)((intTemps[4] >> 8) & 0xFF);
 8004e08:	8abb      	ldrh	r3, [r7, #20]
 8004e0a:	0a1b      	lsrs	r3, r3, #8
 8004e0c:	b29b      	uxth	r3, r3
 8004e0e:	b2db      	uxtb	r3, r3
 8004e10:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
	msgT2[2] = (uint8_t)(intTemps[5] & 0xFF);
 8004e14:	8afb      	ldrh	r3, [r7, #22]
 8004e16:	b2db      	uxtb	r3, r3
 8004e18:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
	msgT2[3] = (uint8_t)((intTemps[5] >> 8) & 0xFF);
 8004e1c:	8afb      	ldrh	r3, [r7, #22]
 8004e1e:	0a1b      	lsrs	r3, r3, #8
 8004e20:	b29b      	uxth	r3, r3
 8004e22:	b2db      	uxtb	r3, r3
 8004e24:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
	msgT2[4] = (uint8_t)(intTemps[6] & 0xFF);
 8004e28:	8b3b      	ldrh	r3, [r7, #24]
 8004e2a:	b2db      	uxtb	r3, r3
 8004e2c:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
	msgT2[5] = (uint8_t)((intTemps[6] >> 8) & 0xFF);
 8004e30:	8b3b      	ldrh	r3, [r7, #24]
 8004e32:	0a1b      	lsrs	r3, r3, #8
 8004e34:	b29b      	uxth	r3, r3
 8004e36:	b2db      	uxtb	r3, r3
 8004e38:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d
	msgT2[6] = (uint8_t)(intTemps[7] & 0xFF);
 8004e3c:	8b7b      	ldrh	r3, [r7, #26]
 8004e3e:	b2db      	uxtb	r3, r3
 8004e40:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
	msgT2[7] = (uint8_t)((intTemps[7] >> 8) & 0xFF);
 8004e44:	8b7b      	ldrh	r3, [r7, #26]
 8004e46:	0a1b      	lsrs	r3, r3, #8
 8004e48:	b29b      	uxth	r3, r3
 8004e4a:	b2db      	uxtb	r3, r3
 8004e4c:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

	msgT3[0] = (uint8_t)(intTemps[8] & 0xFF);
 8004e50:	8bbb      	ldrh	r3, [r7, #28]
 8004e52:	b2db      	uxtb	r3, r3
 8004e54:	f887 3040 	strb.w	r3, [r7, #64]	@ 0x40
	msgT3[1] = (uint8_t)((intTemps[8] >> 8) & 0xFF);
 8004e58:	8bbb      	ldrh	r3, [r7, #28]
 8004e5a:	0a1b      	lsrs	r3, r3, #8
 8004e5c:	b29b      	uxth	r3, r3
 8004e5e:	b2db      	uxtb	r3, r3
 8004e60:	f887 3041 	strb.w	r3, [r7, #65]	@ 0x41
	msgT3[2] = (uint8_t)(intTemps[9] & 0xFF);
 8004e64:	8bfb      	ldrh	r3, [r7, #30]
 8004e66:	b2db      	uxtb	r3, r3
 8004e68:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
	msgT3[3] = (uint8_t)((intTemps[9] >> 8) & 0xFF);
 8004e6c:	8bfb      	ldrh	r3, [r7, #30]
 8004e6e:	0a1b      	lsrs	r3, r3, #8
 8004e70:	b29b      	uxth	r3, r3
 8004e72:	b2db      	uxtb	r3, r3
 8004e74:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
	msgT3[4] = (uint8_t)(intTemps[10] & 0xFF);
 8004e78:	8c3b      	ldrh	r3, [r7, #32]
 8004e7a:	b2db      	uxtb	r3, r3
 8004e7c:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
	msgT3[5] = (uint8_t)((intTemps[10] >> 8) & 0xFF);
 8004e80:	8c3b      	ldrh	r3, [r7, #32]
 8004e82:	0a1b      	lsrs	r3, r3, #8
 8004e84:	b29b      	uxth	r3, r3
 8004e86:	b2db      	uxtb	r3, r3
 8004e88:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
	msgT3[6] = (uint8_t)(intTemps[11] & 0xFF);
 8004e8c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8004e8e:	b2db      	uxtb	r3, r3
 8004e90:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
	msgT3[7] = (uint8_t)((intTemps[11] >> 8) & 0xFF);
 8004e94:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8004e96:	0a1b      	lsrs	r3, r3, #8
 8004e98:	b29b      	uxth	r3, r3
 8004e9a:	b2db      	uxtb	r3, r3
 8004e9c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47

	msgT4[0] = (uint8_t)(intTemps[12] & 0xFF);
 8004ea0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004ea2:	b2db      	uxtb	r3, r3
 8004ea4:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
	msgT4[1] = (uint8_t)((intTemps[12] >> 8) & 0xFF);
 8004ea8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004eaa:	0a1b      	lsrs	r3, r3, #8
 8004eac:	b29b      	uxth	r3, r3
 8004eae:	b2db      	uxtb	r3, r3
 8004eb0:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
	msgT4[2] = (uint8_t)(intTemps[13] & 0xFF);
 8004eb4:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8004eb6:	b2db      	uxtb	r3, r3
 8004eb8:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
	msgT4[3] = (uint8_t)((intTemps[13] >> 8) & 0xFF);
 8004ebc:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8004ebe:	0a1b      	lsrs	r3, r3, #8
 8004ec0:	b29b      	uxth	r3, r3
 8004ec2:	b2db      	uxtb	r3, r3
 8004ec4:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
	msgT4[4] = (uint8_t)(intTemps[14] & 0xFF);
 8004ec8:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8004eca:	b2db      	uxtb	r3, r3
 8004ecc:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
	msgT4[5] = (uint8_t)((intTemps[14] >> 8) & 0xFF);
 8004ed0:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8004ed2:	0a1b      	lsrs	r3, r3, #8
 8004ed4:	b29b      	uxth	r3, r3
 8004ed6:	b2db      	uxtb	r3, r3
 8004ed8:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
	msgT4[6] = (uint8_t)(intTemps[15] & 0xFF);
 8004edc:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8004ede:	b2db      	uxtb	r3, r3
 8004ee0:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
	msgT4[7] = (uint8_t)((intTemps[15] >> 8) & 0xFF);
 8004ee4:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8004ee6:	0a1b      	lsrs	r3, r3, #8
 8004ee8:	b29b      	uxth	r3, r3
 8004eea:	b2db      	uxtb	r3, r3
 8004eec:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f

	msgT5[0] = (uint8_t)(intTemps[16] & 0xFF);
 8004ef0:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8004ef2:	b2db      	uxtb	r3, r3
 8004ef4:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
	msgT5[1] = (uint8_t)((intTemps[16] >> 8) & 0xFF);
 8004ef8:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8004efa:	0a1b      	lsrs	r3, r3, #8
 8004efc:	b29b      	uxth	r3, r3
 8004efe:	b2db      	uxtb	r3, r3
 8004f00:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
	msgT5[2] = (uint8_t)(intTemps[17] & 0xFF);
 8004f04:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8004f06:	b2db      	uxtb	r3, r3
 8004f08:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
	msgT5[3] = (uint8_t)((intTemps[17] >> 8) & 0xFF);
 8004f0c:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8004f0e:	0a1b      	lsrs	r3, r3, #8
 8004f10:	b29b      	uxth	r3, r3
 8004f12:	b2db      	uxtb	r3, r3
 8004f14:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
	msgT5[4] = 0;
 8004f18:	2300      	movs	r3, #0
 8004f1a:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
	msgT5[5] = 0;
 8004f1e:	2300      	movs	r3, #0
 8004f20:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
	msgT5[6] = 0;
 8004f24:	2300      	movs	r3, #0
 8004f26:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
	msgT5[7] = 0;
 8004f2a:	2300      	movs	r3, #0
 8004f2c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

	switch(moduleID) {
 8004f30:	4b52      	ldr	r3, [pc, #328]	@ (800507c <transmit_temperatures+0x320>)
 8004f32:	781b      	ldrb	r3, [r3, #0]
 8004f34:	3b01      	subs	r3, #1
 8004f36:	2b04      	cmp	r3, #4
 8004f38:	f200 80c6 	bhi.w	80050c8 <transmit_temperatures+0x36c>
 8004f3c:	a201      	add	r2, pc, #4	@ (adr r2, 8004f44 <transmit_temperatures+0x1e8>)
 8004f3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f42:	bf00      	nop
 8004f44:	08004f59 	.word	0x08004f59
 8004f48:	08004fa1 	.word	0x08004fa1
 8004f4c:	08004fe9 	.word	0x08004fe9
 8004f50:	08005031 	.word	0x08005031
 8004f54:	08005081 	.word	0x08005081
		case 1:
			can_transmit(CAN_M1_T1_ID, msgT1);
 8004f58:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8004f5c:	4619      	mov	r1, r3
 8004f5e:	f240 4007 	movw	r0, #1031	@ 0x407
 8004f62:	f7ff fb0d 	bl	8004580 <can_transmit>
			can_transmit(CAN_M1_T2_ID, msgT2);
 8004f66:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8004f6a:	4619      	mov	r1, r3
 8004f6c:	f44f 6081 	mov.w	r0, #1032	@ 0x408
 8004f70:	f7ff fb06 	bl	8004580 <can_transmit>
			can_transmit(CAN_M1_T3_ID, msgT3);
 8004f74:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8004f78:	4619      	mov	r1, r3
 8004f7a:	f240 4009 	movw	r0, #1033	@ 0x409
 8004f7e:	f7ff faff 	bl	8004580 <can_transmit>
			can_transmit(CAN_M1_T4_ID, msgT4);
 8004f82:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8004f86:	4619      	mov	r1, r3
 8004f88:	f240 400a 	movw	r0, #1034	@ 0x40a
 8004f8c:	f7ff faf8 	bl	8004580 <can_transmit>
			can_transmit(CAN_M1_T5_ID, msgT5);
 8004f90:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8004f94:	4619      	mov	r1, r3
 8004f96:	f240 400b 	movw	r0, #1035	@ 0x40b
 8004f9a:	f7ff faf1 	bl	8004580 <can_transmit>
			break;
 8004f9e:	e093      	b.n	80050c8 <transmit_temperatures+0x36c>
		case 2:
			can_transmit(CAN_M2_T1_ID, msgT1);
 8004fa0:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8004fa4:	4619      	mov	r1, r3
 8004fa6:	f240 400c 	movw	r0, #1036	@ 0x40c
 8004faa:	f7ff fae9 	bl	8004580 <can_transmit>
			can_transmit(CAN_M2_T2_ID, msgT2);
 8004fae:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8004fb2:	4619      	mov	r1, r3
 8004fb4:	f240 400d 	movw	r0, #1037	@ 0x40d
 8004fb8:	f7ff fae2 	bl	8004580 <can_transmit>
			can_transmit(CAN_M2_T3_ID, msgT3);
 8004fbc:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8004fc0:	4619      	mov	r1, r3
 8004fc2:	f240 400e 	movw	r0, #1038	@ 0x40e
 8004fc6:	f7ff fadb 	bl	8004580 <can_transmit>
			can_transmit(CAN_M2_T4_ID, msgT4);
 8004fca:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8004fce:	4619      	mov	r1, r3
 8004fd0:	f240 400f 	movw	r0, #1039	@ 0x40f
 8004fd4:	f7ff fad4 	bl	8004580 <can_transmit>
			can_transmit(CAN_M2_T5_ID, msgT5);
 8004fd8:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8004fdc:	4619      	mov	r1, r3
 8004fde:	f44f 6082 	mov.w	r0, #1040	@ 0x410
 8004fe2:	f7ff facd 	bl	8004580 <can_transmit>
			break;
 8004fe6:	e06f      	b.n	80050c8 <transmit_temperatures+0x36c>
		case 3:
			can_transmit(CAN_M3_T1_ID, msgT1);
 8004fe8:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8004fec:	4619      	mov	r1, r3
 8004fee:	f240 4011 	movw	r0, #1041	@ 0x411
 8004ff2:	f7ff fac5 	bl	8004580 <can_transmit>
			can_transmit(CAN_M3_T2_ID, msgT2);
 8004ff6:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8004ffa:	4619      	mov	r1, r3
 8004ffc:	f240 4012 	movw	r0, #1042	@ 0x412
 8005000:	f7ff fabe 	bl	8004580 <can_transmit>
			can_transmit(CAN_M3_T3_ID, msgT3);
 8005004:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8005008:	4619      	mov	r1, r3
 800500a:	f240 4013 	movw	r0, #1043	@ 0x413
 800500e:	f7ff fab7 	bl	8004580 <can_transmit>
			can_transmit(CAN_M3_T4_ID, msgT4);
 8005012:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8005016:	4619      	mov	r1, r3
 8005018:	f240 4014 	movw	r0, #1044	@ 0x414
 800501c:	f7ff fab0 	bl	8004580 <can_transmit>
			can_transmit(CAN_M3_T5_ID, msgT5);
 8005020:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8005024:	4619      	mov	r1, r3
 8005026:	f240 4015 	movw	r0, #1045	@ 0x415
 800502a:	f7ff faa9 	bl	8004580 <can_transmit>
			break;
 800502e:	e04b      	b.n	80050c8 <transmit_temperatures+0x36c>
		case 4:
			can_transmit(CAN_M4_T1_ID, msgT1);
 8005030:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8005034:	4619      	mov	r1, r3
 8005036:	f240 4016 	movw	r0, #1046	@ 0x416
 800503a:	f7ff faa1 	bl	8004580 <can_transmit>
			can_transmit(CAN_M4_T2_ID, msgT2);
 800503e:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8005042:	4619      	mov	r1, r3
 8005044:	f240 4017 	movw	r0, #1047	@ 0x417
 8005048:	f7ff fa9a 	bl	8004580 <can_transmit>
			can_transmit(CAN_M4_T3_ID, msgT3);
 800504c:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8005050:	4619      	mov	r1, r3
 8005052:	f44f 6083 	mov.w	r0, #1048	@ 0x418
 8005056:	f7ff fa93 	bl	8004580 <can_transmit>
			can_transmit(CAN_M4_T4_ID, msgT4);
 800505a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800505e:	4619      	mov	r1, r3
 8005060:	f240 4019 	movw	r0, #1049	@ 0x419
 8005064:	f7ff fa8c 	bl	8004580 <can_transmit>
			can_transmit(CAN_M4_T5_ID, msgT5);
 8005068:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800506c:	4619      	mov	r1, r3
 800506e:	f240 401a 	movw	r0, #1050	@ 0x41a
 8005072:	f7ff fa85 	bl	8004580 <can_transmit>
			break;
 8005076:	e027      	b.n	80050c8 <transmit_temperatures+0x36c>
 8005078:	447a0000 	.word	0x447a0000
 800507c:	0800ea9c 	.word	0x0800ea9c
		case 5:
			can_transmit(CAN_M5_T1_ID, msgT1);
 8005080:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8005084:	4619      	mov	r1, r3
 8005086:	f240 401b 	movw	r0, #1051	@ 0x41b
 800508a:	f7ff fa79 	bl	8004580 <can_transmit>
			can_transmit(CAN_M5_T2_ID, msgT2);
 800508e:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8005092:	4619      	mov	r1, r3
 8005094:	f240 401c 	movw	r0, #1052	@ 0x41c
 8005098:	f7ff fa72 	bl	8004580 <can_transmit>
			can_transmit(CAN_M5_T3_ID, msgT3);
 800509c:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80050a0:	4619      	mov	r1, r3
 80050a2:	f240 401d 	movw	r0, #1053	@ 0x41d
 80050a6:	f7ff fa6b 	bl	8004580 <can_transmit>
			can_transmit(CAN_M5_T4_ID, msgT4);
 80050aa:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80050ae:	4619      	mov	r1, r3
 80050b0:	f240 401e 	movw	r0, #1054	@ 0x41e
 80050b4:	f7ff fa64 	bl	8004580 <can_transmit>
			can_transmit(CAN_M5_T5_ID, msgT5);
 80050b8:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80050bc:	4619      	mov	r1, r3
 80050be:	f240 401f 	movw	r0, #1055	@ 0x41f
 80050c2:	f7ff fa5d 	bl	8004580 <can_transmit>
			break;
 80050c6:	bf00      	nop
	}
}
 80050c8:	bf00      	nop
 80050ca:	3760      	adds	r7, #96	@ 0x60
 80050cc:	46bd      	mov	sp, r7
 80050ce:	bd80      	pop	{r7, pc}

080050d0 <diagnosis>:
#include "torch_temperature.h"
#include <math.h>


void diagnosis(void)
{
 80050d0:	b580      	push	{r7, lr}
 80050d2:	af00      	add	r7, sp, #0
	// Signify diagnostic state (turn on all LEDs)
	active_led_on();
 80050d4:	f004 f916 	bl	8009304 <active_led_on>
	charge_led_on();
 80050d8:	f004 f92c 	bl	8009334 <charge_led_on>
	balance_led_on();
 80050dc:	f004 f942 	bl	8009364 <balance_led_on>
	hot_led_on();
 80050e0:	f004 f958 	bl	8009394 <hot_led_on>

	mux_test();
 80050e4:	f001 f86a 	bl	80061bc <mux_test>
	wait(10);
 80050e8:	200a      	movs	r0, #10
 80050ea:	f004 f8a5 	bl	8009238 <wait>
	cell_register_test();
 80050ee:	f001 fb20 	bl	8006732 <cell_register_test>
	wait(10);
 80050f2:	200a      	movs	r0, #10
 80050f4:	f004 f8a0 	bl	8009238 <wait>
	aux_register_test();
 80050f8:	f001 ff94 	bl	8007024 <aux_register_test>
	wait(10);
 80050fc:	200a      	movs	r0, #10
 80050fe:	f004 f89b 	bl	8009238 <wait>
	stat_register_test();
 8005102:	f001 f8d7 	bl	80062b4 <stat_register_test>
	wait(10);
 8005106:	200a      	movs	r0, #10
 8005108:	f004 f896 	bl	8009238 <wait>
	overlap_cell_measurement_test();
 800510c:	f002 fba3 	bl	8007856 <overlap_cell_measurement_test>
	wait(10);
 8005110:	200a      	movs	r0, #10
 8005112:	f004 f891 	bl	8009238 <wait>
	ltc6813_analog_supply_check();
 8005116:	f000 f821 	bl	800515c <ltc6813_analog_supply_check>
	wait(10);
 800511a:	200a      	movs	r0, #10
 800511c:	f004 f88c 	bl	8009238 <wait>
	ltc6813_digital_supply_check();
 8005120:	f000 f8a8 	bl	8005274 <ltc6813_digital_supply_check>
	wait(10);
 8005124:	200a      	movs	r0, #10
 8005126:	f004 f887 	bl	8009238 <wait>
	ltc6813_reference_check();
 800512a:	f000 f92f 	bl	800538c <ltc6813_reference_check>
	wait(10);
 800512e:	200a      	movs	r0, #10
 8005130:	f004 f882 	bl	8009238 <wait>
	ltc6813_temperature_check();
 8005134:	f000 f9bc 	bl	80054b0 <ltc6813_temperature_check>
	wait(10);
 8005138:	200a      	movs	r0, #10
 800513a:	f004 f87d 	bl	8009238 <wait>
	open_cell_check();
 800513e:	f000 fa73 	bl	8005628 <open_cell_check>
	wait(10);
 8005142:	200a      	movs	r0, #10
 8005144:	f004 f878 	bl	8009238 <wait>
	open_thermistor_check();
 8005148:	f001 f804 	bl	8006154 <open_thermistor_check>

	balance_led_off();
 800514c:	f004 f916 	bl	800937c <balance_led_off>
	hot_led_off();
 8005150:	f004 f92a 	bl	80093a8 <hot_led_off>
	charge_led_off();
 8005154:	f004 f8fa 	bl	800934c <charge_led_off>
}
 8005158:	bf00      	nop
 800515a:	bd80      	pop	{r7, pc}

0800515c <ltc6813_analog_supply_check>:


void ltc6813_analog_supply_check(void)
{
 800515c:	b580      	push	{r7, lr}
 800515e:	b086      	sub	sp, #24
 8005160:	af00      	add	r7, sp, #0
	uint8_t attempts = 0;
 8005162:	2300      	movs	r3, #0
 8005164:	75fb      	strb	r3, [r7, #23]
	uint8_t subAttempts = 0;
 8005166:	2300      	movs	r3, #0
 8005168:	75bb      	strb	r3, [r7, #22]
	uint8_t sideB_statA[8];

	uint8_t sideA_statA_PECflag;
	uint8_t sideB_statA_PECflag;

	while(attempts < ATTEMPT_LIMIT) {
 800516a:	e074      	b.n	8005256 <ltc6813_analog_supply_check+0xfa>
		while(subAttempts < ATTEMPT_LIMIT) {
			CLRSTAT(SIDE_A);
 800516c:	2001      	movs	r0, #1
 800516e:	f003 fa6f 	bl	8008650 <CLRSTAT>
			CLRSTAT(SIDE_B);
 8005172:	2000      	movs	r0, #0
 8005174:	f003 fa6c 	bl	8008650 <CLRSTAT>
			wait(3);
 8005178:	2003      	movs	r0, #3
 800517a:	f004 f85d 	bl	8009238 <wait>

			ADSTATD(SIDE_A);
 800517e:	2001      	movs	r0, #1
 8005180:	f003 f9b7 	bl	80084f2 <ADSTATD>
			ADSTATD(SIDE_B);
 8005184:	2000      	movs	r0, #0
 8005186:	f003 f9b4 	bl	80084f2 <ADSTATD>
			wait(3);
 800518a:	2003      	movs	r0, #3
 800518c:	f004 f854 	bl	8009238 <wait>

			RDSTATA(sideA_statA, SIDE_A);
 8005190:	f107 0308 	add.w	r3, r7, #8
 8005194:	2101      	movs	r1, #1
 8005196:	4618      	mov	r0, r3
 8005198:	f002 ffd4 	bl	8008144 <RDSTATA>
			RDSTATA(sideB_statA, SIDE_B);
 800519c:	463b      	mov	r3, r7
 800519e:	2100      	movs	r1, #0
 80051a0:	4618      	mov	r0, r3
 80051a2:	f002 ffcf 	bl	8008144 <RDSTATA>

			sideA_statA_PECflag = verify_PEC15(sideA_statA);
 80051a6:	f107 0308 	add.w	r3, r7, #8
 80051aa:	4618      	mov	r0, r3
 80051ac:	f002 fd49 	bl	8007c42 <verify_PEC15>
 80051b0:	4603      	mov	r3, r0
 80051b2:	747b      	strb	r3, [r7, #17]
			sideB_statA_PECflag = verify_PEC15(sideB_statA);
 80051b4:	463b      	mov	r3, r7
 80051b6:	4618      	mov	r0, r3
 80051b8:	f002 fd43 	bl	8007c42 <verify_PEC15>
 80051bc:	4603      	mov	r3, r0
 80051be:	743b      	strb	r3, [r7, #16]

			if(sideA_statA_PECflag == 2 && sideB_statA_PECflag == 2) { subAttempts = 13; }
 80051c0:	7c7b      	ldrb	r3, [r7, #17]
 80051c2:	2b02      	cmp	r3, #2
 80051c4:	d105      	bne.n	80051d2 <ltc6813_analog_supply_check+0x76>
 80051c6:	7c3b      	ldrb	r3, [r7, #16]
 80051c8:	2b02      	cmp	r3, #2
 80051ca:	d102      	bne.n	80051d2 <ltc6813_analog_supply_check+0x76>
 80051cc:	230d      	movs	r3, #13
 80051ce:	75bb      	strb	r3, [r7, #22]
 80051d0:	e005      	b.n	80051de <ltc6813_analog_supply_check+0x82>

			else {
				subAttempts++;
 80051d2:	7dbb      	ldrb	r3, [r7, #22]
 80051d4:	3301      	adds	r3, #1
 80051d6:	75bb      	strb	r3, [r7, #22]
				wait(1);
 80051d8:	2001      	movs	r0, #1
 80051da:	f004 f82d 	bl	8009238 <wait>
		while(subAttempts < ATTEMPT_LIMIT) {
 80051de:	7dbb      	ldrb	r3, [r7, #22]
 80051e0:	2b09      	cmp	r3, #9
 80051e2:	d9c3      	bls.n	800516c <ltc6813_analog_supply_check+0x10>
			}
		}
		if(subAttempts != 13) { error_loop(ERROR_PEC, 0, 0); }
 80051e4:	7dbb      	ldrb	r3, [r7, #22]
 80051e6:	2b0d      	cmp	r3, #13
 80051e8:	d004      	beq.n	80051f4 <ltc6813_analog_supply_check+0x98>
 80051ea:	2200      	movs	r2, #0
 80051ec:	2100      	movs	r1, #0
 80051ee:	2056      	movs	r0, #86	@ 0x56
 80051f0:	f7ff fa38 	bl	8004664 <error_loop>

		sideA_VA = (sideA_statA[5] << 8) | sideA_statA[4];
 80051f4:	7b7b      	ldrb	r3, [r7, #13]
 80051f6:	b21b      	sxth	r3, r3
 80051f8:	021b      	lsls	r3, r3, #8
 80051fa:	b21a      	sxth	r2, r3
 80051fc:	7b3b      	ldrb	r3, [r7, #12]
 80051fe:	b21b      	sxth	r3, r3
 8005200:	4313      	orrs	r3, r2
 8005202:	b21b      	sxth	r3, r3
 8005204:	82bb      	strh	r3, [r7, #20]
		sideB_VA = (sideB_statA[5] << 8) | sideB_statA[4];
 8005206:	797b      	ldrb	r3, [r7, #5]
 8005208:	b21b      	sxth	r3, r3
 800520a:	021b      	lsls	r3, r3, #8
 800520c:	b21a      	sxth	r2, r3
 800520e:	793b      	ldrb	r3, [r7, #4]
 8005210:	b21b      	sxth	r3, r3
 8005212:	4313      	orrs	r3, r2
 8005214:	b21b      	sxth	r3, r3
 8005216:	827b      	strh	r3, [r7, #18]

		if(sideA_VA >= VA_MIN && sideA_VA <= VA_MAX && sideB_VA >= VA_MIN && sideB_VA <= VA_MAX) { attempts = 13; }
 8005218:	8abb      	ldrh	r3, [r7, #20]
 800521a:	f64a 32df 	movw	r2, #43999	@ 0xabdf
 800521e:	4293      	cmp	r3, r2
 8005220:	d911      	bls.n	8005246 <ltc6813_analog_supply_check+0xea>
 8005222:	8abb      	ldrh	r3, [r7, #20]
 8005224:	f64d 22c0 	movw	r2, #56000	@ 0xdac0
 8005228:	4293      	cmp	r3, r2
 800522a:	d80c      	bhi.n	8005246 <ltc6813_analog_supply_check+0xea>
 800522c:	8a7b      	ldrh	r3, [r7, #18]
 800522e:	f64a 32df 	movw	r2, #43999	@ 0xabdf
 8005232:	4293      	cmp	r3, r2
 8005234:	d907      	bls.n	8005246 <ltc6813_analog_supply_check+0xea>
 8005236:	8a7b      	ldrh	r3, [r7, #18]
 8005238:	f64d 22c0 	movw	r2, #56000	@ 0xdac0
 800523c:	4293      	cmp	r3, r2
 800523e:	d802      	bhi.n	8005246 <ltc6813_analog_supply_check+0xea>
 8005240:	230d      	movs	r3, #13
 8005242:	75fb      	strb	r3, [r7, #23]
 8005244:	e007      	b.n	8005256 <ltc6813_analog_supply_check+0xfa>

		else {
			attempts++;
 8005246:	7dfb      	ldrb	r3, [r7, #23]
 8005248:	3301      	adds	r3, #1
 800524a:	75fb      	strb	r3, [r7, #23]
			subAttempts = 0;
 800524c:	2300      	movs	r3, #0
 800524e:	75bb      	strb	r3, [r7, #22]
			wait(1);
 8005250:	2001      	movs	r0, #1
 8005252:	f003 fff1 	bl	8009238 <wait>
	while(attempts < ATTEMPT_LIMIT) {
 8005256:	7dfb      	ldrb	r3, [r7, #23]
 8005258:	2b09      	cmp	r3, #9
 800525a:	d9c0      	bls.n	80051de <ltc6813_analog_supply_check+0x82>
		}
	}
	if(attempts != 13) { error_loop(ERROR_OUT_OF_RANGE_VA, 0, 0); }
 800525c:	7dfb      	ldrb	r3, [r7, #23]
 800525e:	2b0d      	cmp	r3, #13
 8005260:	d004      	beq.n	800526c <ltc6813_analog_supply_check+0x110>
 8005262:	2200      	movs	r2, #0
 8005264:	2100      	movs	r1, #0
 8005266:	2050      	movs	r0, #80	@ 0x50
 8005268:	f7ff f9fc 	bl	8004664 <error_loop>
}
 800526c:	bf00      	nop
 800526e:	3718      	adds	r7, #24
 8005270:	46bd      	mov	sp, r7
 8005272:	bd80      	pop	{r7, pc}

08005274 <ltc6813_digital_supply_check>:


void ltc6813_digital_supply_check(void)
{
 8005274:	b580      	push	{r7, lr}
 8005276:	b086      	sub	sp, #24
 8005278:	af00      	add	r7, sp, #0
	uint8_t attempts = 0;
 800527a:	2300      	movs	r3, #0
 800527c:	75fb      	strb	r3, [r7, #23]
	uint8_t subAttempts = 0;
 800527e:	2300      	movs	r3, #0
 8005280:	75bb      	strb	r3, [r7, #22]
	uint8_t sideB_statB[8];

	uint8_t sideA_statB_PECflag;
	uint8_t sideB_statB_PECflag;

	while(attempts < ATTEMPT_LIMIT) {
 8005282:	e074      	b.n	800536e <ltc6813_digital_supply_check+0xfa>
		while(subAttempts < ATTEMPT_LIMIT) {
			CLRSTAT(SIDE_A);
 8005284:	2001      	movs	r0, #1
 8005286:	f003 f9e3 	bl	8008650 <CLRSTAT>
			CLRSTAT(SIDE_B);
 800528a:	2000      	movs	r0, #0
 800528c:	f003 f9e0 	bl	8008650 <CLRSTAT>
			wait(3);
 8005290:	2003      	movs	r0, #3
 8005292:	f003 ffd1 	bl	8009238 <wait>

			ADSTATD(SIDE_A);
 8005296:	2001      	movs	r0, #1
 8005298:	f003 f92b 	bl	80084f2 <ADSTATD>
			ADSTATD(SIDE_B);
 800529c:	2000      	movs	r0, #0
 800529e:	f003 f928 	bl	80084f2 <ADSTATD>
			wait(3);
 80052a2:	2003      	movs	r0, #3
 80052a4:	f003 ffc8 	bl	8009238 <wait>

			RDSTATB(sideA_statB, SIDE_A);
 80052a8:	f107 0308 	add.w	r3, r7, #8
 80052ac:	2101      	movs	r1, #1
 80052ae:	4618      	mov	r0, r3
 80052b0:	f002 ff6c 	bl	800818c <RDSTATB>
			RDSTATB(sideB_statB, SIDE_B);
 80052b4:	463b      	mov	r3, r7
 80052b6:	2100      	movs	r1, #0
 80052b8:	4618      	mov	r0, r3
 80052ba:	f002 ff67 	bl	800818c <RDSTATB>

			sideA_statB_PECflag = verify_PEC15(sideA_statB);
 80052be:	f107 0308 	add.w	r3, r7, #8
 80052c2:	4618      	mov	r0, r3
 80052c4:	f002 fcbd 	bl	8007c42 <verify_PEC15>
 80052c8:	4603      	mov	r3, r0
 80052ca:	747b      	strb	r3, [r7, #17]
			sideB_statB_PECflag = verify_PEC15(sideB_statB);
 80052cc:	463b      	mov	r3, r7
 80052ce:	4618      	mov	r0, r3
 80052d0:	f002 fcb7 	bl	8007c42 <verify_PEC15>
 80052d4:	4603      	mov	r3, r0
 80052d6:	743b      	strb	r3, [r7, #16]

			if(sideA_statB_PECflag == 2 && sideB_statB_PECflag == 2) { subAttempts = 13; }
 80052d8:	7c7b      	ldrb	r3, [r7, #17]
 80052da:	2b02      	cmp	r3, #2
 80052dc:	d105      	bne.n	80052ea <ltc6813_digital_supply_check+0x76>
 80052de:	7c3b      	ldrb	r3, [r7, #16]
 80052e0:	2b02      	cmp	r3, #2
 80052e2:	d102      	bne.n	80052ea <ltc6813_digital_supply_check+0x76>
 80052e4:	230d      	movs	r3, #13
 80052e6:	75bb      	strb	r3, [r7, #22]
 80052e8:	e005      	b.n	80052f6 <ltc6813_digital_supply_check+0x82>

			else {
				subAttempts++;
 80052ea:	7dbb      	ldrb	r3, [r7, #22]
 80052ec:	3301      	adds	r3, #1
 80052ee:	75bb      	strb	r3, [r7, #22]
				wait(1);
 80052f0:	2001      	movs	r0, #1
 80052f2:	f003 ffa1 	bl	8009238 <wait>
		while(subAttempts < ATTEMPT_LIMIT) {
 80052f6:	7dbb      	ldrb	r3, [r7, #22]
 80052f8:	2b09      	cmp	r3, #9
 80052fa:	d9c3      	bls.n	8005284 <ltc6813_digital_supply_check+0x10>
			}
		}
		if(subAttempts != 13) { error_loop(ERROR_PEC, 0, 0); }
 80052fc:	7dbb      	ldrb	r3, [r7, #22]
 80052fe:	2b0d      	cmp	r3, #13
 8005300:	d004      	beq.n	800530c <ltc6813_digital_supply_check+0x98>
 8005302:	2200      	movs	r2, #0
 8005304:	2100      	movs	r1, #0
 8005306:	2056      	movs	r0, #86	@ 0x56
 8005308:	f7ff f9ac 	bl	8004664 <error_loop>

		sideA_VD = (sideA_statB[1] << 8) | sideA_statB[0];
 800530c:	7a7b      	ldrb	r3, [r7, #9]
 800530e:	b21b      	sxth	r3, r3
 8005310:	021b      	lsls	r3, r3, #8
 8005312:	b21a      	sxth	r2, r3
 8005314:	7a3b      	ldrb	r3, [r7, #8]
 8005316:	b21b      	sxth	r3, r3
 8005318:	4313      	orrs	r3, r2
 800531a:	b21b      	sxth	r3, r3
 800531c:	82bb      	strh	r3, [r7, #20]
		sideB_VD = (sideB_statB[1] << 8) | sideB_statB[0];
 800531e:	787b      	ldrb	r3, [r7, #1]
 8005320:	b21b      	sxth	r3, r3
 8005322:	021b      	lsls	r3, r3, #8
 8005324:	b21a      	sxth	r2, r3
 8005326:	783b      	ldrb	r3, [r7, #0]
 8005328:	b21b      	sxth	r3, r3
 800532a:	4313      	orrs	r3, r2
 800532c:	b21b      	sxth	r3, r3
 800532e:	827b      	strh	r3, [r7, #18]

		if(sideA_VD >= VD_MIN &&
 8005330:	8abb      	ldrh	r3, [r7, #20]
 8005332:	f246 528f 	movw	r2, #25999	@ 0x658f
 8005336:	4293      	cmp	r3, r2
 8005338:	d911      	bls.n	800535e <ltc6813_digital_supply_check+0xea>
 800533a:	8abb      	ldrh	r3, [r7, #20]
 800533c:	f249 0288 	movw	r2, #37000	@ 0x9088
 8005340:	4293      	cmp	r3, r2
 8005342:	d80c      	bhi.n	800535e <ltc6813_digital_supply_check+0xea>
		   sideA_VD <= VD_MAX &&
 8005344:	8a7b      	ldrh	r3, [r7, #18]
 8005346:	f246 528f 	movw	r2, #25999	@ 0x658f
 800534a:	4293      	cmp	r3, r2
 800534c:	d907      	bls.n	800535e <ltc6813_digital_supply_check+0xea>
		   sideB_VD >= VD_MIN &&
 800534e:	8a7b      	ldrh	r3, [r7, #18]
 8005350:	f249 0288 	movw	r2, #37000	@ 0x9088
 8005354:	4293      	cmp	r3, r2
 8005356:	d802      	bhi.n	800535e <ltc6813_digital_supply_check+0xea>
		   sideB_VD <= VD_MAX)
		{
			attempts = 13;
 8005358:	230d      	movs	r3, #13
 800535a:	75fb      	strb	r3, [r7, #23]
 800535c:	e007      	b.n	800536e <ltc6813_digital_supply_check+0xfa>
		}

		else {
			attempts++;
 800535e:	7dfb      	ldrb	r3, [r7, #23]
 8005360:	3301      	adds	r3, #1
 8005362:	75fb      	strb	r3, [r7, #23]
			subAttempts = 0;
 8005364:	2300      	movs	r3, #0
 8005366:	75bb      	strb	r3, [r7, #22]
			wait(1);
 8005368:	2001      	movs	r0, #1
 800536a:	f003 ff65 	bl	8009238 <wait>
	while(attempts < ATTEMPT_LIMIT) {
 800536e:	7dfb      	ldrb	r3, [r7, #23]
 8005370:	2b09      	cmp	r3, #9
 8005372:	d9c0      	bls.n	80052f6 <ltc6813_digital_supply_check+0x82>
		}
	}
	if(attempts != 13) { error_loop(ERROR_OUT_OF_RANGE_VD, 0, 0); }
 8005374:	7dfb      	ldrb	r3, [r7, #23]
 8005376:	2b0d      	cmp	r3, #13
 8005378:	d004      	beq.n	8005384 <ltc6813_digital_supply_check+0x110>
 800537a:	2200      	movs	r2, #0
 800537c:	2100      	movs	r1, #0
 800537e:	2051      	movs	r0, #81	@ 0x51
 8005380:	f7ff f970 	bl	8004664 <error_loop>
}
 8005384:	bf00      	nop
 8005386:	3718      	adds	r7, #24
 8005388:	46bd      	mov	sp, r7
 800538a:	bd80      	pop	{r7, pc}

0800538c <ltc6813_reference_check>:


void ltc6813_reference_check(void)
{
 800538c:	b580      	push	{r7, lr}
 800538e:	b086      	sub	sp, #24
 8005390:	af00      	add	r7, sp, #0
	uint8_t attempts = 0;
 8005392:	2300      	movs	r3, #0
 8005394:	75fb      	strb	r3, [r7, #23]
	uint8_t subAttempts = 0;
 8005396:	2300      	movs	r3, #0
 8005398:	75bb      	strb	r3, [r7, #22]
	uint8_t sideB_auxB[8];

	uint8_t sideA_auxB_PECflag;
	uint8_t sideB_auxB_PECflag;

	while(attempts < ATTEMPT_LIMIT) {
 800539a:	e07a      	b.n	8005492 <ltc6813_reference_check+0x106>
		while(subAttempts < ATTEMPT_LIMIT) {
			CLRAUX(SIDE_A);
 800539c:	2001      	movs	r0, #1
 800539e:	f003 f934 	bl	800860a <CLRAUX>
			CLRAUX(SIDE_B);
 80053a2:	2000      	movs	r0, #0
 80053a4:	f003 f931 	bl	800860a <CLRAUX>
			wait(3);
 80053a8:	2003      	movs	r0, #3
 80053aa:	f003 ff45 	bl	8009238 <wait>

			ADAXD(SIDE_A);
 80053ae:	2001      	movs	r0, #1
 80053b0:	f003 f8c2 	bl	8008538 <ADAXD>
			ADAXD(SIDE_B);
 80053b4:	2000      	movs	r0, #0
 80053b6:	f003 f8bf 	bl	8008538 <ADAXD>
			wait(3);
 80053ba:	2003      	movs	r0, #3
 80053bc:	f003 ff3c 	bl	8009238 <wait>

			RDAUXB(sideA_auxB, SIDE_A);
 80053c0:	f107 0308 	add.w	r3, r7, #8
 80053c4:	2101      	movs	r1, #1
 80053c6:	4618      	mov	r0, r3
 80053c8:	f002 ff28 	bl	800821c <RDAUXB>
			RDAUXB(sideB_auxB, SIDE_B);
 80053cc:	463b      	mov	r3, r7
 80053ce:	2100      	movs	r1, #0
 80053d0:	4618      	mov	r0, r3
 80053d2:	f002 ff23 	bl	800821c <RDAUXB>

			sideA_auxB_PECflag = verify_PEC15(sideA_auxB);
 80053d6:	f107 0308 	add.w	r3, r7, #8
 80053da:	4618      	mov	r0, r3
 80053dc:	f002 fc31 	bl	8007c42 <verify_PEC15>
 80053e0:	4603      	mov	r3, r0
 80053e2:	747b      	strb	r3, [r7, #17]
			sideB_auxB_PECflag = verify_PEC15(sideB_auxB);
 80053e4:	463b      	mov	r3, r7
 80053e6:	4618      	mov	r0, r3
 80053e8:	f002 fc2b 	bl	8007c42 <verify_PEC15>
 80053ec:	4603      	mov	r3, r0
 80053ee:	743b      	strb	r3, [r7, #16]

			if(sideA_auxB_PECflag == 2 &&
 80053f0:	7c7b      	ldrb	r3, [r7, #17]
 80053f2:	2b02      	cmp	r3, #2
 80053f4:	d10b      	bne.n	800540e <ltc6813_reference_check+0x82>
 80053f6:	7c3b      	ldrb	r3, [r7, #16]
 80053f8:	2b02      	cmp	r3, #2
 80053fa:	d108      	bne.n	800540e <ltc6813_reference_check+0x82>
			   sideB_auxB_PECflag == 2 &&
			   sideA_auxB[5] != 0xFF &&
 80053fc:	7b7b      	ldrb	r3, [r7, #13]
			   sideB_auxB_PECflag == 2 &&
 80053fe:	2bff      	cmp	r3, #255	@ 0xff
 8005400:	d005      	beq.n	800540e <ltc6813_reference_check+0x82>
			   sideB_auxB[5] != 0xFF)
 8005402:	797b      	ldrb	r3, [r7, #5]
			   sideA_auxB[5] != 0xFF &&
 8005404:	2bff      	cmp	r3, #255	@ 0xff
 8005406:	d002      	beq.n	800540e <ltc6813_reference_check+0x82>
			{
				subAttempts = 13;
 8005408:	230d      	movs	r3, #13
 800540a:	75bb      	strb	r3, [r7, #22]
 800540c:	e005      	b.n	800541a <ltc6813_reference_check+0x8e>
			}
			else {
				subAttempts++;
 800540e:	7dbb      	ldrb	r3, [r7, #22]
 8005410:	3301      	adds	r3, #1
 8005412:	75bb      	strb	r3, [r7, #22]
				wait(1);
 8005414:	2001      	movs	r0, #1
 8005416:	f003 ff0f 	bl	8009238 <wait>
		while(subAttempts < ATTEMPT_LIMIT) {
 800541a:	7dbb      	ldrb	r3, [r7, #22]
 800541c:	2b09      	cmp	r3, #9
 800541e:	d9bd      	bls.n	800539c <ltc6813_reference_check+0x10>
			}
		}
		if(subAttempts != 13) { error_loop(ERROR_PEC, 0, 0); }
 8005420:	7dbb      	ldrb	r3, [r7, #22]
 8005422:	2b0d      	cmp	r3, #13
 8005424:	d004      	beq.n	8005430 <ltc6813_reference_check+0xa4>
 8005426:	2200      	movs	r2, #0
 8005428:	2100      	movs	r1, #0
 800542a:	2056      	movs	r0, #86	@ 0x56
 800542c:	f7ff f91a 	bl	8004664 <error_loop>

		sideA_ref2 = (sideA_auxB[5] << 8) | sideA_auxB[4];
 8005430:	7b7b      	ldrb	r3, [r7, #13]
 8005432:	b21b      	sxth	r3, r3
 8005434:	021b      	lsls	r3, r3, #8
 8005436:	b21a      	sxth	r2, r3
 8005438:	7b3b      	ldrb	r3, [r7, #12]
 800543a:	b21b      	sxth	r3, r3
 800543c:	4313      	orrs	r3, r2
 800543e:	b21b      	sxth	r3, r3
 8005440:	82bb      	strh	r3, [r7, #20]
		sideB_ref2 = (sideB_auxB[5] << 8) | sideB_auxB[4];
 8005442:	797b      	ldrb	r3, [r7, #5]
 8005444:	b21b      	sxth	r3, r3
 8005446:	021b      	lsls	r3, r3, #8
 8005448:	b21a      	sxth	r2, r3
 800544a:	793b      	ldrb	r3, [r7, #4]
 800544c:	b21b      	sxth	r3, r3
 800544e:	4313      	orrs	r3, r2
 8005450:	b21b      	sxth	r3, r3
 8005452:	827b      	strh	r3, [r7, #18]

		if(sideA_ref2 >= REF2_MIN &&
 8005454:	8abb      	ldrh	r3, [r7, #20]
 8005456:	f247 02e3 	movw	r2, #28899	@ 0x70e3
 800545a:	4293      	cmp	r3, r2
 800545c:	d911      	bls.n	8005482 <ltc6813_reference_check+0xf6>
 800545e:	8abb      	ldrh	r3, [r7, #20]
 8005460:	f647 12a4 	movw	r2, #31140	@ 0x79a4
 8005464:	4293      	cmp	r3, r2
 8005466:	d80c      	bhi.n	8005482 <ltc6813_reference_check+0xf6>
		   sideA_ref2 <= REF2_MAX &&
 8005468:	8a7b      	ldrh	r3, [r7, #18]
 800546a:	f247 02e3 	movw	r2, #28899	@ 0x70e3
 800546e:	4293      	cmp	r3, r2
 8005470:	d907      	bls.n	8005482 <ltc6813_reference_check+0xf6>
		   sideB_ref2 >= REF2_MIN &&
 8005472:	8a7b      	ldrh	r3, [r7, #18]
 8005474:	f647 12a4 	movw	r2, #31140	@ 0x79a4
 8005478:	4293      	cmp	r3, r2
 800547a:	d802      	bhi.n	8005482 <ltc6813_reference_check+0xf6>
		   sideB_ref2 <= REF2_MAX)
		{
			attempts = 13;
 800547c:	230d      	movs	r3, #13
 800547e:	75fb      	strb	r3, [r7, #23]
 8005480:	e007      	b.n	8005492 <ltc6813_reference_check+0x106>
		}
		else {
			attempts++;
 8005482:	7dfb      	ldrb	r3, [r7, #23]
 8005484:	3301      	adds	r3, #1
 8005486:	75fb      	strb	r3, [r7, #23]
			subAttempts = 0;
 8005488:	2300      	movs	r3, #0
 800548a:	75bb      	strb	r3, [r7, #22]
			wait(1);
 800548c:	2001      	movs	r0, #1
 800548e:	f003 fed3 	bl	8009238 <wait>
	while(attempts < ATTEMPT_LIMIT) {
 8005492:	7dfb      	ldrb	r3, [r7, #23]
 8005494:	2b09      	cmp	r3, #9
 8005496:	d9c0      	bls.n	800541a <ltc6813_reference_check+0x8e>
		}
	}
	if(attempts != 13) { error_loop(ERROR_OUT_OF_RANGE_REF2, 0, 0); }
 8005498:	7dfb      	ldrb	r3, [r7, #23]
 800549a:	2b0d      	cmp	r3, #13
 800549c:	d004      	beq.n	80054a8 <ltc6813_reference_check+0x11c>
 800549e:	2200      	movs	r2, #0
 80054a0:	2100      	movs	r1, #0
 80054a2:	2052      	movs	r0, #82	@ 0x52
 80054a4:	f7ff f8de 	bl	8004664 <error_loop>
}
 80054a8:	bf00      	nop
 80054aa:	3718      	adds	r7, #24
 80054ac:	46bd      	mov	sp, r7
 80054ae:	bd80      	pop	{r7, pc}

080054b0 <ltc6813_temperature_check>:


void ltc6813_temperature_check(void)
{
 80054b0:	b580      	push	{r7, lr}
 80054b2:	b08a      	sub	sp, #40	@ 0x28
 80054b4:	af00      	add	r7, sp, #0
	uint8_t attempts = 0;
 80054b6:	2300      	movs	r3, #0
 80054b8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	uint8_t subAttempts = 0;
 80054bc:	2300      	movs	r3, #0
 80054be:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	uint8_t sideB_statA[8];

	uint8_t sideA_statA_PECflag;
	uint8_t sideB_statA_PECflag;

	while(attempts < ATTEMPT_LIMIT) {
 80054c2:	e099      	b.n	80055f8 <ltc6813_temperature_check+0x148>
		while(subAttempts < ATTEMPT_LIMIT) {
			CLRSTAT(SIDE_A);
 80054c4:	2001      	movs	r0, #1
 80054c6:	f003 f8c3 	bl	8008650 <CLRSTAT>
			CLRSTAT(SIDE_B);
 80054ca:	2000      	movs	r0, #0
 80054cc:	f003 f8c0 	bl	8008650 <CLRSTAT>
			wait(3);
 80054d0:	2003      	movs	r0, #3
 80054d2:	f003 feb1 	bl	8009238 <wait>

			ADSTATD(SIDE_A);
 80054d6:	2001      	movs	r0, #1
 80054d8:	f003 f80b 	bl	80084f2 <ADSTATD>
			ADSTATD(SIDE_B);
 80054dc:	2000      	movs	r0, #0
 80054de:	f003 f808 	bl	80084f2 <ADSTATD>
			wait(3);
 80054e2:	2003      	movs	r0, #3
 80054e4:	f003 fea8 	bl	8009238 <wait>

			RDSTATA(sideA_statA, SIDE_A);
 80054e8:	f107 030c 	add.w	r3, r7, #12
 80054ec:	2101      	movs	r1, #1
 80054ee:	4618      	mov	r0, r3
 80054f0:	f002 fe28 	bl	8008144 <RDSTATA>
			RDSTATA(sideB_statA, SIDE_B);
 80054f4:	1d3b      	adds	r3, r7, #4
 80054f6:	2100      	movs	r1, #0
 80054f8:	4618      	mov	r0, r3
 80054fa:	f002 fe23 	bl	8008144 <RDSTATA>

			sideA_statA_PECflag = verify_PEC15(sideA_statA);
 80054fe:	f107 030c 	add.w	r3, r7, #12
 8005502:	4618      	mov	r0, r3
 8005504:	f002 fb9d 	bl	8007c42 <verify_PEC15>
 8005508:	4603      	mov	r3, r0
 800550a:	75fb      	strb	r3, [r7, #23]
			sideB_statA_PECflag = verify_PEC15(sideB_statA);
 800550c:	1d3b      	adds	r3, r7, #4
 800550e:	4618      	mov	r0, r3
 8005510:	f002 fb97 	bl	8007c42 <verify_PEC15>
 8005514:	4603      	mov	r3, r0
 8005516:	75bb      	strb	r3, [r7, #22]

			if(sideA_statA_PECflag == 2 && sideB_statA_PECflag == 2) { subAttempts = 13; }
 8005518:	7dfb      	ldrb	r3, [r7, #23]
 800551a:	2b02      	cmp	r3, #2
 800551c:	d106      	bne.n	800552c <ltc6813_temperature_check+0x7c>
 800551e:	7dbb      	ldrb	r3, [r7, #22]
 8005520:	2b02      	cmp	r3, #2
 8005522:	d103      	bne.n	800552c <ltc6813_temperature_check+0x7c>
 8005524:	230d      	movs	r3, #13
 8005526:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800552a:	e007      	b.n	800553c <ltc6813_temperature_check+0x8c>

			else {
				subAttempts++;
 800552c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8005530:	3301      	adds	r3, #1
 8005532:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
				wait(1);
 8005536:	2001      	movs	r0, #1
 8005538:	f003 fe7e 	bl	8009238 <wait>
		while(subAttempts < ATTEMPT_LIMIT) {
 800553c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8005540:	2b09      	cmp	r3, #9
 8005542:	d9bf      	bls.n	80054c4 <ltc6813_temperature_check+0x14>
			}
		}
		if(subAttempts != 13) { error_loop(ERROR_PEC, 0, 0); }
 8005544:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8005548:	2b0d      	cmp	r3, #13
 800554a:	d004      	beq.n	8005556 <ltc6813_temperature_check+0xa6>
 800554c:	2200      	movs	r2, #0
 800554e:	2100      	movs	r1, #0
 8005550:	2056      	movs	r0, #86	@ 0x56
 8005552:	f7ff f887 	bl	8004664 <error_loop>

		sideA_ITMP = (sideA_statA[3] << 8) | sideA_statA[2];
 8005556:	7bfb      	ldrb	r3, [r7, #15]
 8005558:	b21b      	sxth	r3, r3
 800555a:	021b      	lsls	r3, r3, #8
 800555c:	b21a      	sxth	r2, r3
 800555e:	7bbb      	ldrb	r3, [r7, #14]
 8005560:	b21b      	sxth	r3, r3
 8005562:	4313      	orrs	r3, r2
 8005564:	b21b      	sxth	r3, r3
 8005566:	84bb      	strh	r3, [r7, #36]	@ 0x24
		sideB_ITMP = (sideB_statA[3] << 8) | sideB_statA[2];
 8005568:	79fb      	ldrb	r3, [r7, #7]
 800556a:	b21b      	sxth	r3, r3
 800556c:	021b      	lsls	r3, r3, #8
 800556e:	b21a      	sxth	r2, r3
 8005570:	79bb      	ldrb	r3, [r7, #6]
 8005572:	b21b      	sxth	r3, r3
 8005574:	4313      	orrs	r3, r2
 8005576:	b21b      	sxth	r3, r3
 8005578:	847b      	strh	r3, [r7, #34]	@ 0x22

		// Following 2 lines use LTC6813 internal temperature formula (page 27 on LTC6813 data sheet)
		sideA_LTC6813Temperature = (float)sideA_ITMP*(0.0001f/0.0076f) - 276.0f;
 800557a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800557c:	ee07 3a90 	vmov	s15, r3
 8005580:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005584:	ed9f 7a25 	vldr	s14, [pc, #148]	@ 800561c <ltc6813_temperature_check+0x16c>
 8005588:	ee67 7a87 	vmul.f32	s15, s15, s14
 800558c:	ed9f 7a24 	vldr	s14, [pc, #144]	@ 8005620 <ltc6813_temperature_check+0x170>
 8005590:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005594:	edc7 7a07 	vstr	s15, [r7, #28]
		sideB_LTC6813Temperature = (float)sideB_ITMP*(0.0001f/0.0076f) - 276.0f;
 8005598:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800559a:	ee07 3a90 	vmov	s15, r3
 800559e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80055a2:	ed9f 7a1e 	vldr	s14, [pc, #120]	@ 800561c <ltc6813_temperature_check+0x16c>
 80055a6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80055aa:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 8005620 <ltc6813_temperature_check+0x170>
 80055ae:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80055b2:	edc7 7a06 	vstr	s15, [r7, #24]

		if(sideA_LTC6813Temperature < LTC6813_TEMPERATURE_LIMIT && sideB_LTC6813Temperature < LTC6813_TEMPERATURE_LIMIT) { attempts = 13; }
 80055b6:	edd7 7a07 	vldr	s15, [r7, #28]
 80055ba:	ed9f 7a1a 	vldr	s14, [pc, #104]	@ 8005624 <ltc6813_temperature_check+0x174>
 80055be:	eef4 7ac7 	vcmpe.f32	s15, s14
 80055c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80055c6:	d50c      	bpl.n	80055e2 <ltc6813_temperature_check+0x132>
 80055c8:	edd7 7a06 	vldr	s15, [r7, #24]
 80055cc:	ed9f 7a15 	vldr	s14, [pc, #84]	@ 8005624 <ltc6813_temperature_check+0x174>
 80055d0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80055d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80055d8:	d503      	bpl.n	80055e2 <ltc6813_temperature_check+0x132>
 80055da:	230d      	movs	r3, #13
 80055dc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80055e0:	e00a      	b.n	80055f8 <ltc6813_temperature_check+0x148>

		else {
			attempts++;
 80055e2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80055e6:	3301      	adds	r3, #1
 80055e8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			subAttempts = 0;
 80055ec:	2300      	movs	r3, #0
 80055ee:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
			wait(1);
 80055f2:	2001      	movs	r0, #1
 80055f4:	f003 fe20 	bl	8009238 <wait>
	while(attempts < ATTEMPT_LIMIT) {
 80055f8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80055fc:	2b09      	cmp	r3, #9
 80055fe:	d99d      	bls.n	800553c <ltc6813_temperature_check+0x8c>
		}
	}
	if(attempts != 13) { error_loop(ERROR_LTC6813_OVERHEAT, 0, 0); }
 8005600:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005604:	2b0d      	cmp	r3, #13
 8005606:	d004      	beq.n	8005612 <ltc6813_temperature_check+0x162>
 8005608:	2200      	movs	r2, #0
 800560a:	2100      	movs	r1, #0
 800560c:	2053      	movs	r0, #83	@ 0x53
 800560e:	f7ff f829 	bl	8004664 <error_loop>
}
 8005612:	bf00      	nop
 8005614:	3728      	adds	r7, #40	@ 0x28
 8005616:	46bd      	mov	sp, r7
 8005618:	bd80      	pop	{r7, pc}
 800561a:	bf00      	nop
 800561c:	3c579435 	.word	0x3c579435
 8005620:	438a0000 	.word	0x438a0000
 8005624:	430c0000 	.word	0x430c0000

08005628 <open_cell_check>:


void open_cell_check(void)
{
 8005628:	b580      	push	{r7, lr}
 800562a:	b0ba      	sub	sp, #232	@ 0xe8
 800562c:	af00      	add	r7, sp, #0
	uint8_t attempts = 0;
 800562e:	2300      	movs	r3, #0
 8005630:	f887 30e7 	strb.w	r3, [r7, #231]	@ 0xe7
	uint8_t sideB_cellVoltageB_PECflag;
	uint8_t sideB_cellVoltageC_PECflag;
	uint8_t sideB_cellVoltageD_PECflag;

	// Step 1
	while(attempts < ATTEMPT_LIMIT) {
 8005634:	e11b      	b.n	800586e <open_cell_check+0x246>
		for(uint8_t i = 0; i < 3; i++) {
 8005636:	2300      	movs	r3, #0
 8005638:	f887 30e6 	strb.w	r3, [r7, #230]	@ 0xe6
 800563c:	e018      	b.n	8005670 <open_cell_check+0x48>
			CLRCELL(SIDE_A);
 800563e:	2001      	movs	r0, #1
 8005640:	f002 ffc0 	bl	80085c4 <CLRCELL>
			CLRCELL(SIDE_B);
 8005644:	2000      	movs	r0, #0
 8005646:	f002 ffbd 	bl	80085c4 <CLRCELL>
			wait(3);
 800564a:	2003      	movs	r0, #3
 800564c:	f003 fdf4 	bl	8009238 <wait>

			ADOW(PU, SIDE_A);
 8005650:	2101      	movs	r1, #1
 8005652:	2000      	movs	r0, #0
 8005654:	f002 fe72 	bl	800833c <ADOW>
			ADOW(PU, SIDE_B);
 8005658:	2100      	movs	r1, #0
 800565a:	2000      	movs	r0, #0
 800565c:	f002 fe6e 	bl	800833c <ADOW>
			wait(3);
 8005660:	2003      	movs	r0, #3
 8005662:	f003 fde9 	bl	8009238 <wait>
		for(uint8_t i = 0; i < 3; i++) {
 8005666:	f897 30e6 	ldrb.w	r3, [r7, #230]	@ 0xe6
 800566a:	3301      	adds	r3, #1
 800566c:	f887 30e6 	strb.w	r3, [r7, #230]	@ 0xe6
 8005670:	f897 30e6 	ldrb.w	r3, [r7, #230]	@ 0xe6
 8005674:	2b02      	cmp	r3, #2
 8005676:	d9e2      	bls.n	800563e <open_cell_check+0x16>
		}
		RDCVA(sideA_cellVoltageA, SIDE_A);
 8005678:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800567c:	2101      	movs	r1, #1
 800567e:	4618      	mov	r0, r3
 8005680:	f002 fcac 	bl	8007fdc <RDCVA>
		RDCVA(sideB_cellVoltageA, SIDE_B);
 8005684:	f107 031c 	add.w	r3, r7, #28
 8005688:	2100      	movs	r1, #0
 800568a:	4618      	mov	r0, r3
 800568c:	f002 fca6 	bl	8007fdc <RDCVA>
		wait(1);
 8005690:	2001      	movs	r0, #1
 8005692:	f003 fdd1 	bl	8009238 <wait>
		RDCVB(sideA_cellVoltageB, SIDE_A);
 8005696:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800569a:	2101      	movs	r1, #1
 800569c:	4618      	mov	r0, r3
 800569e:	f002 fcc1 	bl	8008024 <RDCVB>
		RDCVB(sideB_cellVoltageB, SIDE_B);
 80056a2:	f107 0314 	add.w	r3, r7, #20
 80056a6:	2100      	movs	r1, #0
 80056a8:	4618      	mov	r0, r3
 80056aa:	f002 fcbb 	bl	8008024 <RDCVB>
		wait(1);
 80056ae:	2001      	movs	r0, #1
 80056b0:	f003 fdc2 	bl	8009238 <wait>
		RDCVC(sideA_cellVoltageC, SIDE_A);
 80056b4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80056b8:	2101      	movs	r1, #1
 80056ba:	4618      	mov	r0, r3
 80056bc:	f002 fcd6 	bl	800806c <RDCVC>
		RDCVC(sideB_cellVoltageC, SIDE_B);
 80056c0:	f107 030c 	add.w	r3, r7, #12
 80056c4:	2100      	movs	r1, #0
 80056c6:	4618      	mov	r0, r3
 80056c8:	f002 fcd0 	bl	800806c <RDCVC>
		wait(1);
 80056cc:	2001      	movs	r0, #1
 80056ce:	f003 fdb3 	bl	8009238 <wait>
		RDCVD(sideA_cellVoltageD, SIDE_A);
 80056d2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80056d6:	2101      	movs	r1, #1
 80056d8:	4618      	mov	r0, r3
 80056da:	f002 fceb 	bl	80080b4 <RDCVD>
		RDCVD(sideB_cellVoltageD, SIDE_B);
 80056de:	1d3b      	adds	r3, r7, #4
 80056e0:	2100      	movs	r1, #0
 80056e2:	4618      	mov	r0, r3
 80056e4:	f002 fce6 	bl	80080b4 <RDCVD>
		wait(1);
 80056e8:	2001      	movs	r0, #1
 80056ea:	f003 fda5 	bl	8009238 <wait>

		sideA_cellVoltageA_PECflag = verify_PEC15(sideA_cellVoltageA);
 80056ee:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80056f2:	4618      	mov	r0, r3
 80056f4:	f002 faa5 	bl	8007c42 <verify_PEC15>
 80056f8:	4603      	mov	r3, r0
 80056fa:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
		sideA_cellVoltageB_PECflag = verify_PEC15(sideA_cellVoltageB);
 80056fe:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8005702:	4618      	mov	r0, r3
 8005704:	f002 fa9d 	bl	8007c42 <verify_PEC15>
 8005708:	4603      	mov	r3, r0
 800570a:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
		sideA_cellVoltageC_PECflag = verify_PEC15(sideA_cellVoltageC);
 800570e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8005712:	4618      	mov	r0, r3
 8005714:	f002 fa95 	bl	8007c42 <verify_PEC15>
 8005718:	4603      	mov	r3, r0
 800571a:	f887 30d9 	strb.w	r3, [r7, #217]	@ 0xd9
		sideA_cellVoltageD_PECflag = verify_PEC15(sideA_cellVoltageD);
 800571e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005722:	4618      	mov	r0, r3
 8005724:	f002 fa8d 	bl	8007c42 <verify_PEC15>
 8005728:	4603      	mov	r3, r0
 800572a:	f887 30d8 	strb.w	r3, [r7, #216]	@ 0xd8

		sideB_cellVoltageA_PECflag = verify_PEC15(sideB_cellVoltageA);
 800572e:	f107 031c 	add.w	r3, r7, #28
 8005732:	4618      	mov	r0, r3
 8005734:	f002 fa85 	bl	8007c42 <verify_PEC15>
 8005738:	4603      	mov	r3, r0
 800573a:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
		sideB_cellVoltageB_PECflag = verify_PEC15(sideB_cellVoltageB);
 800573e:	f107 0314 	add.w	r3, r7, #20
 8005742:	4618      	mov	r0, r3
 8005744:	f002 fa7d 	bl	8007c42 <verify_PEC15>
 8005748:	4603      	mov	r3, r0
 800574a:	f887 30d6 	strb.w	r3, [r7, #214]	@ 0xd6
		sideB_cellVoltageC_PECflag = verify_PEC15(sideB_cellVoltageC);
 800574e:	f107 030c 	add.w	r3, r7, #12
 8005752:	4618      	mov	r0, r3
 8005754:	f002 fa75 	bl	8007c42 <verify_PEC15>
 8005758:	4603      	mov	r3, r0
 800575a:	f887 30d5 	strb.w	r3, [r7, #213]	@ 0xd5
		sideB_cellVoltageD_PECflag = verify_PEC15(sideB_cellVoltageD);
 800575e:	1d3b      	adds	r3, r7, #4
 8005760:	4618      	mov	r0, r3
 8005762:	f002 fa6e 	bl	8007c42 <verify_PEC15>
 8005766:	4603      	mov	r3, r0
 8005768:	f887 30d4 	strb.w	r3, [r7, #212]	@ 0xd4

		if(sideA_cellVoltageA_PECflag == 2 &&
 800576c:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8005770:	2b02      	cmp	r3, #2
 8005772:	d174      	bne.n	800585e <open_cell_check+0x236>
 8005774:	f897 30da 	ldrb.w	r3, [r7, #218]	@ 0xda
 8005778:	2b02      	cmp	r3, #2
 800577a:	d170      	bne.n	800585e <open_cell_check+0x236>
		   sideA_cellVoltageB_PECflag == 2 &&
 800577c:	f897 30d9 	ldrb.w	r3, [r7, #217]	@ 0xd9
 8005780:	2b02      	cmp	r3, #2
 8005782:	d16c      	bne.n	800585e <open_cell_check+0x236>
		   sideA_cellVoltageC_PECflag == 2 &&
 8005784:	f897 30d8 	ldrb.w	r3, [r7, #216]	@ 0xd8
 8005788:	2b02      	cmp	r3, #2
 800578a:	d168      	bne.n	800585e <open_cell_check+0x236>
		   sideA_cellVoltageD_PECflag == 2 &&
 800578c:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
 8005790:	2b02      	cmp	r3, #2
 8005792:	d164      	bne.n	800585e <open_cell_check+0x236>
		   sideB_cellVoltageA_PECflag == 2 &&
 8005794:	f897 30d6 	ldrb.w	r3, [r7, #214]	@ 0xd6
 8005798:	2b02      	cmp	r3, #2
 800579a:	d160      	bne.n	800585e <open_cell_check+0x236>
		   sideB_cellVoltageB_PECflag == 2 &&
 800579c:	f897 30d5 	ldrb.w	r3, [r7, #213]	@ 0xd5
 80057a0:	2b02      	cmp	r3, #2
 80057a2:	d15c      	bne.n	800585e <open_cell_check+0x236>
		   sideB_cellVoltageC_PECflag == 2 &&
 80057a4:	f897 30d4 	ldrb.w	r3, [r7, #212]	@ 0xd4
 80057a8:	2b02      	cmp	r3, #2
 80057aa:	d158      	bne.n	800585e <open_cell_check+0x236>
		   sideB_cellVoltageD_PECflag == 2 &&
		   sideA_cellVoltageA[1] != 0xFF &&
 80057ac:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
		   sideB_cellVoltageD_PECflag == 2 &&
 80057b0:	2bff      	cmp	r3, #255	@ 0xff
 80057b2:	d054      	beq.n	800585e <open_cell_check+0x236>
		   sideA_cellVoltageA[3] != 0xFF &&
 80057b4:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
		   sideA_cellVoltageA[1] != 0xFF &&
 80057b8:	2bff      	cmp	r3, #255	@ 0xff
 80057ba:	d050      	beq.n	800585e <open_cell_check+0x236>
		   sideA_cellVoltageA[5] != 0xFF &&
 80057bc:	f897 3041 	ldrb.w	r3, [r7, #65]	@ 0x41
		   sideA_cellVoltageA[3] != 0xFF &&
 80057c0:	2bff      	cmp	r3, #255	@ 0xff
 80057c2:	d04c      	beq.n	800585e <open_cell_check+0x236>
		   sideB_cellVoltageA[1] != 0xFF &&
 80057c4:	7f7b      	ldrb	r3, [r7, #29]
		   sideA_cellVoltageA[5] != 0xFF &&
 80057c6:	2bff      	cmp	r3, #255	@ 0xff
 80057c8:	d049      	beq.n	800585e <open_cell_check+0x236>
		   sideB_cellVoltageA[3] != 0xFF &&
 80057ca:	7ffb      	ldrb	r3, [r7, #31]
		   sideB_cellVoltageA[1] != 0xFF &&
 80057cc:	2bff      	cmp	r3, #255	@ 0xff
 80057ce:	d046      	beq.n	800585e <open_cell_check+0x236>
		   sideB_cellVoltageA[5] != 0xFF &&
 80057d0:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
		   sideB_cellVoltageA[3] != 0xFF &&
 80057d4:	2bff      	cmp	r3, #255	@ 0xff
 80057d6:	d042      	beq.n	800585e <open_cell_check+0x236>
		   sideA_cellVoltageB[1] != 0xFF &&
 80057d8:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
		   sideB_cellVoltageA[5] != 0xFF &&
 80057dc:	2bff      	cmp	r3, #255	@ 0xff
 80057de:	d03e      	beq.n	800585e <open_cell_check+0x236>
		   sideA_cellVoltageB[3] != 0xFF &&
 80057e0:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
		   sideA_cellVoltageB[1] != 0xFF &&
 80057e4:	2bff      	cmp	r3, #255	@ 0xff
 80057e6:	d03a      	beq.n	800585e <open_cell_check+0x236>
		   sideA_cellVoltageB[5] != 0xFF &&
 80057e8:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
		   sideA_cellVoltageB[3] != 0xFF &&
 80057ec:	2bff      	cmp	r3, #255	@ 0xff
 80057ee:	d036      	beq.n	800585e <open_cell_check+0x236>
		   sideB_cellVoltageB[1] != 0xFF &&
 80057f0:	7d7b      	ldrb	r3, [r7, #21]
		   sideA_cellVoltageB[5] != 0xFF &&
 80057f2:	2bff      	cmp	r3, #255	@ 0xff
 80057f4:	d033      	beq.n	800585e <open_cell_check+0x236>
		   sideB_cellVoltageB[3] != 0xFF &&
 80057f6:	7dfb      	ldrb	r3, [r7, #23]
		   sideB_cellVoltageB[1] != 0xFF &&
 80057f8:	2bff      	cmp	r3, #255	@ 0xff
 80057fa:	d030      	beq.n	800585e <open_cell_check+0x236>
		   sideB_cellVoltageB[5] != 0xFF &&
 80057fc:	7e7b      	ldrb	r3, [r7, #25]
		   sideB_cellVoltageB[3] != 0xFF &&
 80057fe:	2bff      	cmp	r3, #255	@ 0xff
 8005800:	d02d      	beq.n	800585e <open_cell_check+0x236>
		   sideA_cellVoltageC[1] != 0xFF &&
 8005802:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
		   sideB_cellVoltageB[5] != 0xFF &&
 8005806:	2bff      	cmp	r3, #255	@ 0xff
 8005808:	d029      	beq.n	800585e <open_cell_check+0x236>
		   sideA_cellVoltageC[3] != 0xFF &&
 800580a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
		   sideA_cellVoltageC[1] != 0xFF &&
 800580e:	2bff      	cmp	r3, #255	@ 0xff
 8005810:	d025      	beq.n	800585e <open_cell_check+0x236>
		   sideA_cellVoltageC[5] != 0xFF &&
 8005812:	f897 3031 	ldrb.w	r3, [r7, #49]	@ 0x31
		   sideA_cellVoltageC[3] != 0xFF &&
 8005816:	2bff      	cmp	r3, #255	@ 0xff
 8005818:	d021      	beq.n	800585e <open_cell_check+0x236>
		   sideB_cellVoltageC[1] != 0xFF &&
 800581a:	7b7b      	ldrb	r3, [r7, #13]
		   sideA_cellVoltageC[5] != 0xFF &&
 800581c:	2bff      	cmp	r3, #255	@ 0xff
 800581e:	d01e      	beq.n	800585e <open_cell_check+0x236>
		   sideB_cellVoltageC[3] != 0xFF &&
 8005820:	7bfb      	ldrb	r3, [r7, #15]
		   sideB_cellVoltageC[1] != 0xFF &&
 8005822:	2bff      	cmp	r3, #255	@ 0xff
 8005824:	d01b      	beq.n	800585e <open_cell_check+0x236>
		   sideB_cellVoltageC[5] != 0xFF &&
 8005826:	7c7b      	ldrb	r3, [r7, #17]
		   sideB_cellVoltageC[3] != 0xFF &&
 8005828:	2bff      	cmp	r3, #255	@ 0xff
 800582a:	d018      	beq.n	800585e <open_cell_check+0x236>
		   sideA_cellVoltageD[1] != 0xFF &&
 800582c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
		   sideB_cellVoltageC[5] != 0xFF &&
 8005830:	2bff      	cmp	r3, #255	@ 0xff
 8005832:	d014      	beq.n	800585e <open_cell_check+0x236>
		   sideA_cellVoltageD[3] != 0xFF &&
 8005834:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
		   sideA_cellVoltageD[1] != 0xFF &&
 8005838:	2bff      	cmp	r3, #255	@ 0xff
 800583a:	d010      	beq.n	800585e <open_cell_check+0x236>
		   sideA_cellVoltageD[5] != 0xFF &&
 800583c:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
		   sideA_cellVoltageD[3] != 0xFF &&
 8005840:	2bff      	cmp	r3, #255	@ 0xff
 8005842:	d00c      	beq.n	800585e <open_cell_check+0x236>
		   sideB_cellVoltageD[1] != 0xFF &&
 8005844:	797b      	ldrb	r3, [r7, #5]
		   sideA_cellVoltageD[5] != 0xFF &&
 8005846:	2bff      	cmp	r3, #255	@ 0xff
 8005848:	d009      	beq.n	800585e <open_cell_check+0x236>
		   sideB_cellVoltageD[3] != 0xFF &&
 800584a:	79fb      	ldrb	r3, [r7, #7]
		   sideB_cellVoltageD[1] != 0xFF &&
 800584c:	2bff      	cmp	r3, #255	@ 0xff
 800584e:	d006      	beq.n	800585e <open_cell_check+0x236>
		   sideB_cellVoltageD[5] != 0xFF)
 8005850:	7a7b      	ldrb	r3, [r7, #9]
		   sideB_cellVoltageD[3] != 0xFF &&
 8005852:	2bff      	cmp	r3, #255	@ 0xff
 8005854:	d003      	beq.n	800585e <open_cell_check+0x236>
		{
			attempts = 13;
 8005856:	230d      	movs	r3, #13
 8005858:	f887 30e7 	strb.w	r3, [r7, #231]	@ 0xe7
 800585c:	e007      	b.n	800586e <open_cell_check+0x246>
		}
		else {
			attempts++;
 800585e:	f897 30e7 	ldrb.w	r3, [r7, #231]	@ 0xe7
 8005862:	3301      	adds	r3, #1
 8005864:	f887 30e7 	strb.w	r3, [r7, #231]	@ 0xe7
			wait(1);
 8005868:	2001      	movs	r0, #1
 800586a:	f003 fce5 	bl	8009238 <wait>
	while(attempts < ATTEMPT_LIMIT) {
 800586e:	f897 30e7 	ldrb.w	r3, [r7, #231]	@ 0xe7
 8005872:	2b09      	cmp	r3, #9
 8005874:	f67f aedf 	bls.w	8005636 <open_cell_check+0xe>
		}
	}
	if(attempts != 13) { error_loop(ERROR_PEC, 0, 0); }
 8005878:	f897 30e7 	ldrb.w	r3, [r7, #231]	@ 0xe7
 800587c:	2b0d      	cmp	r3, #13
 800587e:	d004      	beq.n	800588a <open_cell_check+0x262>
 8005880:	2200      	movs	r2, #0
 8005882:	2100      	movs	r1, #0
 8005884:	2056      	movs	r0, #86	@ 0x56
 8005886:	f7fe feed 	bl	8004664 <error_loop>

	sideA_cellPU[0] = (sideA_cellVoltageA[1] << 8) | sideA_cellVoltageA[0];
 800588a:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 800588e:	b21b      	sxth	r3, r3
 8005890:	021b      	lsls	r3, r3, #8
 8005892:	b21a      	sxth	r2, r3
 8005894:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 8005898:	b21b      	sxth	r3, r3
 800589a:	4313      	orrs	r3, r2
 800589c:	b21b      	sxth	r3, r3
 800589e:	b29b      	uxth	r3, r3
 80058a0:	f8a7 30bc 	strh.w	r3, [r7, #188]	@ 0xbc
	sideA_cellPU[1] = (sideA_cellVoltageA[3] << 8) | sideA_cellVoltageA[2];
 80058a4:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80058a8:	b21b      	sxth	r3, r3
 80058aa:	021b      	lsls	r3, r3, #8
 80058ac:	b21a      	sxth	r2, r3
 80058ae:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 80058b2:	b21b      	sxth	r3, r3
 80058b4:	4313      	orrs	r3, r2
 80058b6:	b21b      	sxth	r3, r3
 80058b8:	b29b      	uxth	r3, r3
 80058ba:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
	sideA_cellPU[2] = (sideA_cellVoltageA[5] << 8) | sideA_cellVoltageA[4];
 80058be:	f897 3041 	ldrb.w	r3, [r7, #65]	@ 0x41
 80058c2:	b21b      	sxth	r3, r3
 80058c4:	021b      	lsls	r3, r3, #8
 80058c6:	b21a      	sxth	r2, r3
 80058c8:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 80058cc:	b21b      	sxth	r3, r3
 80058ce:	4313      	orrs	r3, r2
 80058d0:	b21b      	sxth	r3, r3
 80058d2:	b29b      	uxth	r3, r3
 80058d4:	f8a7 30c0 	strh.w	r3, [r7, #192]	@ 0xc0
	sideA_cellPU[3] = (sideA_cellVoltageB[1] << 8) | sideA_cellVoltageB[0];
 80058d8:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 80058dc:	b21b      	sxth	r3, r3
 80058de:	021b      	lsls	r3, r3, #8
 80058e0:	b21a      	sxth	r2, r3
 80058e2:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 80058e6:	b21b      	sxth	r3, r3
 80058e8:	4313      	orrs	r3, r2
 80058ea:	b21b      	sxth	r3, r3
 80058ec:	b29b      	uxth	r3, r3
 80058ee:	f8a7 30c2 	strh.w	r3, [r7, #194]	@ 0xc2
	sideA_cellPU[4] = (sideA_cellVoltageB[3] << 8) | sideA_cellVoltageB[2];
 80058f2:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80058f6:	b21b      	sxth	r3, r3
 80058f8:	021b      	lsls	r3, r3, #8
 80058fa:	b21a      	sxth	r2, r3
 80058fc:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8005900:	b21b      	sxth	r3, r3
 8005902:	4313      	orrs	r3, r2
 8005904:	b21b      	sxth	r3, r3
 8005906:	b29b      	uxth	r3, r3
 8005908:	f8a7 30c4 	strh.w	r3, [r7, #196]	@ 0xc4
	sideA_cellPU[5] = (sideA_cellVoltageB[5] << 8) | sideA_cellVoltageB[4];
 800590c:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8005910:	b21b      	sxth	r3, r3
 8005912:	021b      	lsls	r3, r3, #8
 8005914:	b21a      	sxth	r2, r3
 8005916:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 800591a:	b21b      	sxth	r3, r3
 800591c:	4313      	orrs	r3, r2
 800591e:	b21b      	sxth	r3, r3
 8005920:	b29b      	uxth	r3, r3
 8005922:	f8a7 30c6 	strh.w	r3, [r7, #198]	@ 0xc6
	sideA_cellPU[6] = (sideA_cellVoltageC[1] << 8) | sideA_cellVoltageC[0];
 8005926:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 800592a:	b21b      	sxth	r3, r3
 800592c:	021b      	lsls	r3, r3, #8
 800592e:	b21a      	sxth	r2, r3
 8005930:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8005934:	b21b      	sxth	r3, r3
 8005936:	4313      	orrs	r3, r2
 8005938:	b21b      	sxth	r3, r3
 800593a:	b29b      	uxth	r3, r3
 800593c:	f8a7 30c8 	strh.w	r3, [r7, #200]	@ 0xc8
	sideA_cellPU[7] = (sideA_cellVoltageC[3] << 8) | sideA_cellVoltageC[2];
 8005940:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005944:	b21b      	sxth	r3, r3
 8005946:	021b      	lsls	r3, r3, #8
 8005948:	b21a      	sxth	r2, r3
 800594a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800594e:	b21b      	sxth	r3, r3
 8005950:	4313      	orrs	r3, r2
 8005952:	b21b      	sxth	r3, r3
 8005954:	b29b      	uxth	r3, r3
 8005956:	f8a7 30ca 	strh.w	r3, [r7, #202]	@ 0xca
	sideA_cellPU[8] = (sideA_cellVoltageC[5] << 8) | sideA_cellVoltageC[4];
 800595a:	f897 3031 	ldrb.w	r3, [r7, #49]	@ 0x31
 800595e:	b21b      	sxth	r3, r3
 8005960:	021b      	lsls	r3, r3, #8
 8005962:	b21a      	sxth	r2, r3
 8005964:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8005968:	b21b      	sxth	r3, r3
 800596a:	4313      	orrs	r3, r2
 800596c:	b21b      	sxth	r3, r3
 800596e:	b29b      	uxth	r3, r3
 8005970:	f8a7 30cc 	strh.w	r3, [r7, #204]	@ 0xcc
	sideA_cellPU[9] = (sideA_cellVoltageD[1] << 8) | sideA_cellVoltageD[0];
 8005974:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8005978:	b21b      	sxth	r3, r3
 800597a:	021b      	lsls	r3, r3, #8
 800597c:	b21a      	sxth	r2, r3
 800597e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8005982:	b21b      	sxth	r3, r3
 8005984:	4313      	orrs	r3, r2
 8005986:	b21b      	sxth	r3, r3
 8005988:	b29b      	uxth	r3, r3
 800598a:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
	sideA_cellPU[10] = (sideA_cellVoltageD[3] << 8) | sideA_cellVoltageD[2];
 800598e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005992:	b21b      	sxth	r3, r3
 8005994:	021b      	lsls	r3, r3, #8
 8005996:	b21a      	sxth	r2, r3
 8005998:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800599c:	b21b      	sxth	r3, r3
 800599e:	4313      	orrs	r3, r2
 80059a0:	b21b      	sxth	r3, r3
 80059a2:	b29b      	uxth	r3, r3
 80059a4:	f8a7 30d0 	strh.w	r3, [r7, #208]	@ 0xd0
	sideA_cellPU[11] = (sideA_cellVoltageD[5] << 8) | sideA_cellVoltageD[4];
 80059a8:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80059ac:	b21b      	sxth	r3, r3
 80059ae:	021b      	lsls	r3, r3, #8
 80059b0:	b21a      	sxth	r2, r3
 80059b2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80059b6:	b21b      	sxth	r3, r3
 80059b8:	4313      	orrs	r3, r2
 80059ba:	b21b      	sxth	r3, r3
 80059bc:	b29b      	uxth	r3, r3
 80059be:	f8a7 30d2 	strh.w	r3, [r7, #210]	@ 0xd2

	sideB_cellPU[0] = (sideB_cellVoltageA[1] << 8) | sideB_cellVoltageA[0];
 80059c2:	7f7b      	ldrb	r3, [r7, #29]
 80059c4:	b21b      	sxth	r3, r3
 80059c6:	021b      	lsls	r3, r3, #8
 80059c8:	b21a      	sxth	r2, r3
 80059ca:	7f3b      	ldrb	r3, [r7, #28]
 80059cc:	b21b      	sxth	r3, r3
 80059ce:	4313      	orrs	r3, r2
 80059d0:	b21b      	sxth	r3, r3
 80059d2:	b29b      	uxth	r3, r3
 80059d4:	f8a7 3074 	strh.w	r3, [r7, #116]	@ 0x74
	sideB_cellPU[1] = (sideB_cellVoltageA[3] << 8) | sideB_cellVoltageA[2];
 80059d8:	7ffb      	ldrb	r3, [r7, #31]
 80059da:	b21b      	sxth	r3, r3
 80059dc:	021b      	lsls	r3, r3, #8
 80059de:	b21a      	sxth	r2, r3
 80059e0:	7fbb      	ldrb	r3, [r7, #30]
 80059e2:	b21b      	sxth	r3, r3
 80059e4:	4313      	orrs	r3, r2
 80059e6:	b21b      	sxth	r3, r3
 80059e8:	b29b      	uxth	r3, r3
 80059ea:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76
	sideB_cellPU[2] = (sideB_cellVoltageA[5] << 8) | sideB_cellVoltageA[4];
 80059ee:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80059f2:	b21b      	sxth	r3, r3
 80059f4:	021b      	lsls	r3, r3, #8
 80059f6:	b21a      	sxth	r2, r3
 80059f8:	f897 3020 	ldrb.w	r3, [r7, #32]
 80059fc:	b21b      	sxth	r3, r3
 80059fe:	4313      	orrs	r3, r2
 8005a00:	b21b      	sxth	r3, r3
 8005a02:	b29b      	uxth	r3, r3
 8005a04:	f8a7 3078 	strh.w	r3, [r7, #120]	@ 0x78
	sideB_cellPU[3] = (sideB_cellVoltageB[1] << 8) | sideB_cellVoltageB[0];
 8005a08:	7d7b      	ldrb	r3, [r7, #21]
 8005a0a:	b21b      	sxth	r3, r3
 8005a0c:	021b      	lsls	r3, r3, #8
 8005a0e:	b21a      	sxth	r2, r3
 8005a10:	7d3b      	ldrb	r3, [r7, #20]
 8005a12:	b21b      	sxth	r3, r3
 8005a14:	4313      	orrs	r3, r2
 8005a16:	b21b      	sxth	r3, r3
 8005a18:	b29b      	uxth	r3, r3
 8005a1a:	f8a7 307a 	strh.w	r3, [r7, #122]	@ 0x7a
	sideB_cellPU[4] = (sideB_cellVoltageB[3] << 8) | sideB_cellVoltageB[2];
 8005a1e:	7dfb      	ldrb	r3, [r7, #23]
 8005a20:	b21b      	sxth	r3, r3
 8005a22:	021b      	lsls	r3, r3, #8
 8005a24:	b21a      	sxth	r2, r3
 8005a26:	7dbb      	ldrb	r3, [r7, #22]
 8005a28:	b21b      	sxth	r3, r3
 8005a2a:	4313      	orrs	r3, r2
 8005a2c:	b21b      	sxth	r3, r3
 8005a2e:	b29b      	uxth	r3, r3
 8005a30:	f8a7 307c 	strh.w	r3, [r7, #124]	@ 0x7c
	sideB_cellPU[5] = (sideB_cellVoltageB[5] << 8) | sideB_cellVoltageB[4];
 8005a34:	7e7b      	ldrb	r3, [r7, #25]
 8005a36:	b21b      	sxth	r3, r3
 8005a38:	021b      	lsls	r3, r3, #8
 8005a3a:	b21a      	sxth	r2, r3
 8005a3c:	7e3b      	ldrb	r3, [r7, #24]
 8005a3e:	b21b      	sxth	r3, r3
 8005a40:	4313      	orrs	r3, r2
 8005a42:	b21b      	sxth	r3, r3
 8005a44:	b29b      	uxth	r3, r3
 8005a46:	f8a7 307e 	strh.w	r3, [r7, #126]	@ 0x7e
	sideB_cellPU[6] = (sideB_cellVoltageC[1] << 8) | sideB_cellVoltageC[0];
 8005a4a:	7b7b      	ldrb	r3, [r7, #13]
 8005a4c:	b21b      	sxth	r3, r3
 8005a4e:	021b      	lsls	r3, r3, #8
 8005a50:	b21a      	sxth	r2, r3
 8005a52:	7b3b      	ldrb	r3, [r7, #12]
 8005a54:	b21b      	sxth	r3, r3
 8005a56:	4313      	orrs	r3, r2
 8005a58:	b21b      	sxth	r3, r3
 8005a5a:	b29b      	uxth	r3, r3
 8005a5c:	f8a7 3080 	strh.w	r3, [r7, #128]	@ 0x80
	sideB_cellPU[7] = (sideB_cellVoltageC[3] << 8) | sideB_cellVoltageC[2];
 8005a60:	7bfb      	ldrb	r3, [r7, #15]
 8005a62:	b21b      	sxth	r3, r3
 8005a64:	021b      	lsls	r3, r3, #8
 8005a66:	b21a      	sxth	r2, r3
 8005a68:	7bbb      	ldrb	r3, [r7, #14]
 8005a6a:	b21b      	sxth	r3, r3
 8005a6c:	4313      	orrs	r3, r2
 8005a6e:	b21b      	sxth	r3, r3
 8005a70:	b29b      	uxth	r3, r3
 8005a72:	f8a7 3082 	strh.w	r3, [r7, #130]	@ 0x82
	sideB_cellPU[8] = (sideB_cellVoltageC[5] << 8) | sideB_cellVoltageC[4];
 8005a76:	7c7b      	ldrb	r3, [r7, #17]
 8005a78:	b21b      	sxth	r3, r3
 8005a7a:	021b      	lsls	r3, r3, #8
 8005a7c:	b21a      	sxth	r2, r3
 8005a7e:	7c3b      	ldrb	r3, [r7, #16]
 8005a80:	b21b      	sxth	r3, r3
 8005a82:	4313      	orrs	r3, r2
 8005a84:	b21b      	sxth	r3, r3
 8005a86:	b29b      	uxth	r3, r3
 8005a88:	f8a7 3084 	strh.w	r3, [r7, #132]	@ 0x84
	sideB_cellPU[9] = (sideB_cellVoltageD[1] << 8) | sideB_cellVoltageD[0];
 8005a8c:	797b      	ldrb	r3, [r7, #5]
 8005a8e:	b21b      	sxth	r3, r3
 8005a90:	021b      	lsls	r3, r3, #8
 8005a92:	b21a      	sxth	r2, r3
 8005a94:	793b      	ldrb	r3, [r7, #4]
 8005a96:	b21b      	sxth	r3, r3
 8005a98:	4313      	orrs	r3, r2
 8005a9a:	b21b      	sxth	r3, r3
 8005a9c:	b29b      	uxth	r3, r3
 8005a9e:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
	sideB_cellPU[10] = (sideB_cellVoltageD[3] << 8) | sideB_cellVoltageD[2];
 8005aa2:	79fb      	ldrb	r3, [r7, #7]
 8005aa4:	b21b      	sxth	r3, r3
 8005aa6:	021b      	lsls	r3, r3, #8
 8005aa8:	b21a      	sxth	r2, r3
 8005aaa:	79bb      	ldrb	r3, [r7, #6]
 8005aac:	b21b      	sxth	r3, r3
 8005aae:	4313      	orrs	r3, r2
 8005ab0:	b21b      	sxth	r3, r3
 8005ab2:	b29b      	uxth	r3, r3
 8005ab4:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88
	sideB_cellPU[11] = (sideB_cellVoltageD[5] << 8) | sideB_cellVoltageD[4];
 8005ab8:	7a7b      	ldrb	r3, [r7, #9]
 8005aba:	b21b      	sxth	r3, r3
 8005abc:	021b      	lsls	r3, r3, #8
 8005abe:	b21a      	sxth	r2, r3
 8005ac0:	7a3b      	ldrb	r3, [r7, #8]
 8005ac2:	b21b      	sxth	r3, r3
 8005ac4:	4313      	orrs	r3, r2
 8005ac6:	b21b      	sxth	r3, r3
 8005ac8:	b29b      	uxth	r3, r3
 8005aca:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a


	// Step 2
	attempts = 0;
 8005ace:	2300      	movs	r3, #0
 8005ad0:	f887 30e7 	strb.w	r3, [r7, #231]	@ 0xe7
	while(attempts < ATTEMPT_LIMIT) {
 8005ad4:	e118      	b.n	8005d08 <open_cell_check+0x6e0>
		for(uint8_t i = 0; i < 3; i++) {
 8005ad6:	2300      	movs	r3, #0
 8005ad8:	f887 30e5 	strb.w	r3, [r7, #229]	@ 0xe5
 8005adc:	e018      	b.n	8005b10 <open_cell_check+0x4e8>
			CLRCELL(SIDE_A);
 8005ade:	2001      	movs	r0, #1
 8005ae0:	f002 fd70 	bl	80085c4 <CLRCELL>
			CLRCELL(SIDE_B);
 8005ae4:	2000      	movs	r0, #0
 8005ae6:	f002 fd6d 	bl	80085c4 <CLRCELL>
			wait(3);
 8005aea:	2003      	movs	r0, #3
 8005aec:	f003 fba4 	bl	8009238 <wait>

			ADOW(PD, SIDE_A);
 8005af0:	2101      	movs	r1, #1
 8005af2:	2001      	movs	r0, #1
 8005af4:	f002 fc22 	bl	800833c <ADOW>
			ADOW(PD, SIDE_B);
 8005af8:	2100      	movs	r1, #0
 8005afa:	2001      	movs	r0, #1
 8005afc:	f002 fc1e 	bl	800833c <ADOW>
			wait(3);
 8005b00:	2003      	movs	r0, #3
 8005b02:	f003 fb99 	bl	8009238 <wait>
		for(uint8_t i = 0; i < 3; i++) {
 8005b06:	f897 30e5 	ldrb.w	r3, [r7, #229]	@ 0xe5
 8005b0a:	3301      	adds	r3, #1
 8005b0c:	f887 30e5 	strb.w	r3, [r7, #229]	@ 0xe5
 8005b10:	f897 30e5 	ldrb.w	r3, [r7, #229]	@ 0xe5
 8005b14:	2b02      	cmp	r3, #2
 8005b16:	d9e2      	bls.n	8005ade <open_cell_check+0x4b6>
		}
		RDCVA(sideA_cellVoltageA, SIDE_A);
 8005b18:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8005b1c:	2101      	movs	r1, #1
 8005b1e:	4618      	mov	r0, r3
 8005b20:	f002 fa5c 	bl	8007fdc <RDCVA>
		RDCVA(sideB_cellVoltageA, SIDE_B);
 8005b24:	f107 031c 	add.w	r3, r7, #28
 8005b28:	2100      	movs	r1, #0
 8005b2a:	4618      	mov	r0, r3
 8005b2c:	f002 fa56 	bl	8007fdc <RDCVA>
		wait(1);
 8005b30:	2001      	movs	r0, #1
 8005b32:	f003 fb81 	bl	8009238 <wait>
		RDCVB(sideA_cellVoltageB, SIDE_A);
 8005b36:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8005b3a:	2101      	movs	r1, #1
 8005b3c:	4618      	mov	r0, r3
 8005b3e:	f002 fa71 	bl	8008024 <RDCVB>
		RDCVB(sideB_cellVoltageB, SIDE_B);
 8005b42:	f107 0314 	add.w	r3, r7, #20
 8005b46:	2100      	movs	r1, #0
 8005b48:	4618      	mov	r0, r3
 8005b4a:	f002 fa6b 	bl	8008024 <RDCVB>
		wait(1);
 8005b4e:	2001      	movs	r0, #1
 8005b50:	f003 fb72 	bl	8009238 <wait>
		RDCVC(sideA_cellVoltageC, SIDE_A);
 8005b54:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8005b58:	2101      	movs	r1, #1
 8005b5a:	4618      	mov	r0, r3
 8005b5c:	f002 fa86 	bl	800806c <RDCVC>
		RDCVC(sideB_cellVoltageC, SIDE_B);
 8005b60:	f107 030c 	add.w	r3, r7, #12
 8005b64:	2100      	movs	r1, #0
 8005b66:	4618      	mov	r0, r3
 8005b68:	f002 fa80 	bl	800806c <RDCVC>
		wait(1);
 8005b6c:	2001      	movs	r0, #1
 8005b6e:	f003 fb63 	bl	8009238 <wait>
		RDCVD(sideA_cellVoltageD, SIDE_A);
 8005b72:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005b76:	2101      	movs	r1, #1
 8005b78:	4618      	mov	r0, r3
 8005b7a:	f002 fa9b 	bl	80080b4 <RDCVD>
		RDCVD(sideB_cellVoltageD, SIDE_B);
 8005b7e:	1d3b      	adds	r3, r7, #4
 8005b80:	2100      	movs	r1, #0
 8005b82:	4618      	mov	r0, r3
 8005b84:	f002 fa96 	bl	80080b4 <RDCVD>

		sideA_cellVoltageA_PECflag = verify_PEC15(sideA_cellVoltageA);
 8005b88:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8005b8c:	4618      	mov	r0, r3
 8005b8e:	f002 f858 	bl	8007c42 <verify_PEC15>
 8005b92:	4603      	mov	r3, r0
 8005b94:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
		sideA_cellVoltageB_PECflag = verify_PEC15(sideA_cellVoltageB);
 8005b98:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8005b9c:	4618      	mov	r0, r3
 8005b9e:	f002 f850 	bl	8007c42 <verify_PEC15>
 8005ba2:	4603      	mov	r3, r0
 8005ba4:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
		sideA_cellVoltageC_PECflag = verify_PEC15(sideA_cellVoltageC);
 8005ba8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8005bac:	4618      	mov	r0, r3
 8005bae:	f002 f848 	bl	8007c42 <verify_PEC15>
 8005bb2:	4603      	mov	r3, r0
 8005bb4:	f887 30d9 	strb.w	r3, [r7, #217]	@ 0xd9
		sideA_cellVoltageD_PECflag = verify_PEC15(sideA_cellVoltageD);
 8005bb8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005bbc:	4618      	mov	r0, r3
 8005bbe:	f002 f840 	bl	8007c42 <verify_PEC15>
 8005bc2:	4603      	mov	r3, r0
 8005bc4:	f887 30d8 	strb.w	r3, [r7, #216]	@ 0xd8

		sideB_cellVoltageA_PECflag = verify_PEC15(sideB_cellVoltageA);
 8005bc8:	f107 031c 	add.w	r3, r7, #28
 8005bcc:	4618      	mov	r0, r3
 8005bce:	f002 f838 	bl	8007c42 <verify_PEC15>
 8005bd2:	4603      	mov	r3, r0
 8005bd4:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
		sideB_cellVoltageB_PECflag = verify_PEC15(sideB_cellVoltageB);
 8005bd8:	f107 0314 	add.w	r3, r7, #20
 8005bdc:	4618      	mov	r0, r3
 8005bde:	f002 f830 	bl	8007c42 <verify_PEC15>
 8005be2:	4603      	mov	r3, r0
 8005be4:	f887 30d6 	strb.w	r3, [r7, #214]	@ 0xd6
		sideB_cellVoltageC_PECflag = verify_PEC15(sideB_cellVoltageC);
 8005be8:	f107 030c 	add.w	r3, r7, #12
 8005bec:	4618      	mov	r0, r3
 8005bee:	f002 f828 	bl	8007c42 <verify_PEC15>
 8005bf2:	4603      	mov	r3, r0
 8005bf4:	f887 30d5 	strb.w	r3, [r7, #213]	@ 0xd5
		sideB_cellVoltageD_PECflag = verify_PEC15(sideB_cellVoltageD);
 8005bf8:	1d3b      	adds	r3, r7, #4
 8005bfa:	4618      	mov	r0, r3
 8005bfc:	f002 f821 	bl	8007c42 <verify_PEC15>
 8005c00:	4603      	mov	r3, r0
 8005c02:	f887 30d4 	strb.w	r3, [r7, #212]	@ 0xd4

		if(sideA_cellVoltageA_PECflag == 2 &&
 8005c06:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8005c0a:	2b02      	cmp	r3, #2
 8005c0c:	d174      	bne.n	8005cf8 <open_cell_check+0x6d0>
 8005c0e:	f897 30da 	ldrb.w	r3, [r7, #218]	@ 0xda
 8005c12:	2b02      	cmp	r3, #2
 8005c14:	d170      	bne.n	8005cf8 <open_cell_check+0x6d0>
		   sideA_cellVoltageB_PECflag == 2 &&
 8005c16:	f897 30d9 	ldrb.w	r3, [r7, #217]	@ 0xd9
 8005c1a:	2b02      	cmp	r3, #2
 8005c1c:	d16c      	bne.n	8005cf8 <open_cell_check+0x6d0>
		   sideA_cellVoltageC_PECflag == 2 &&
 8005c1e:	f897 30d8 	ldrb.w	r3, [r7, #216]	@ 0xd8
 8005c22:	2b02      	cmp	r3, #2
 8005c24:	d168      	bne.n	8005cf8 <open_cell_check+0x6d0>
		   sideA_cellVoltageD_PECflag == 2 &&
 8005c26:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
 8005c2a:	2b02      	cmp	r3, #2
 8005c2c:	d164      	bne.n	8005cf8 <open_cell_check+0x6d0>
		   sideB_cellVoltageA_PECflag == 2 &&
 8005c2e:	f897 30d6 	ldrb.w	r3, [r7, #214]	@ 0xd6
 8005c32:	2b02      	cmp	r3, #2
 8005c34:	d160      	bne.n	8005cf8 <open_cell_check+0x6d0>
		   sideB_cellVoltageB_PECflag == 2 &&
 8005c36:	f897 30d5 	ldrb.w	r3, [r7, #213]	@ 0xd5
 8005c3a:	2b02      	cmp	r3, #2
 8005c3c:	d15c      	bne.n	8005cf8 <open_cell_check+0x6d0>
		   sideB_cellVoltageC_PECflag == 2 &&
 8005c3e:	f897 30d4 	ldrb.w	r3, [r7, #212]	@ 0xd4
 8005c42:	2b02      	cmp	r3, #2
 8005c44:	d158      	bne.n	8005cf8 <open_cell_check+0x6d0>
		   sideB_cellVoltageD_PECflag == 2 &&
		   sideA_cellVoltageA[1] != 0xFF &&
 8005c46:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
		   sideB_cellVoltageD_PECflag == 2 &&
 8005c4a:	2bff      	cmp	r3, #255	@ 0xff
 8005c4c:	d054      	beq.n	8005cf8 <open_cell_check+0x6d0>
		   sideA_cellVoltageA[3] != 0xFF &&
 8005c4e:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
		   sideA_cellVoltageA[1] != 0xFF &&
 8005c52:	2bff      	cmp	r3, #255	@ 0xff
 8005c54:	d050      	beq.n	8005cf8 <open_cell_check+0x6d0>
		   sideA_cellVoltageA[5] != 0xFF &&
 8005c56:	f897 3041 	ldrb.w	r3, [r7, #65]	@ 0x41
		   sideA_cellVoltageA[3] != 0xFF &&
 8005c5a:	2bff      	cmp	r3, #255	@ 0xff
 8005c5c:	d04c      	beq.n	8005cf8 <open_cell_check+0x6d0>
		   sideB_cellVoltageA[1] != 0xFF &&
 8005c5e:	7f7b      	ldrb	r3, [r7, #29]
		   sideA_cellVoltageA[5] != 0xFF &&
 8005c60:	2bff      	cmp	r3, #255	@ 0xff
 8005c62:	d049      	beq.n	8005cf8 <open_cell_check+0x6d0>
		   sideB_cellVoltageA[3] != 0xFF &&
 8005c64:	7ffb      	ldrb	r3, [r7, #31]
		   sideB_cellVoltageA[1] != 0xFF &&
 8005c66:	2bff      	cmp	r3, #255	@ 0xff
 8005c68:	d046      	beq.n	8005cf8 <open_cell_check+0x6d0>
		   sideB_cellVoltageA[5] != 0xFF &&
 8005c6a:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
		   sideB_cellVoltageA[3] != 0xFF &&
 8005c6e:	2bff      	cmp	r3, #255	@ 0xff
 8005c70:	d042      	beq.n	8005cf8 <open_cell_check+0x6d0>
		   sideA_cellVoltageB[1] != 0xFF &&
 8005c72:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
		   sideB_cellVoltageA[5] != 0xFF &&
 8005c76:	2bff      	cmp	r3, #255	@ 0xff
 8005c78:	d03e      	beq.n	8005cf8 <open_cell_check+0x6d0>
		   sideA_cellVoltageB[3] != 0xFF &&
 8005c7a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
		   sideA_cellVoltageB[1] != 0xFF &&
 8005c7e:	2bff      	cmp	r3, #255	@ 0xff
 8005c80:	d03a      	beq.n	8005cf8 <open_cell_check+0x6d0>
		   sideA_cellVoltageB[5] != 0xFF &&
 8005c82:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
		   sideA_cellVoltageB[3] != 0xFF &&
 8005c86:	2bff      	cmp	r3, #255	@ 0xff
 8005c88:	d036      	beq.n	8005cf8 <open_cell_check+0x6d0>
		   sideB_cellVoltageB[1] != 0xFF &&
 8005c8a:	7d7b      	ldrb	r3, [r7, #21]
		   sideA_cellVoltageB[5] != 0xFF &&
 8005c8c:	2bff      	cmp	r3, #255	@ 0xff
 8005c8e:	d033      	beq.n	8005cf8 <open_cell_check+0x6d0>
		   sideB_cellVoltageB[3] != 0xFF &&
 8005c90:	7dfb      	ldrb	r3, [r7, #23]
		   sideB_cellVoltageB[1] != 0xFF &&
 8005c92:	2bff      	cmp	r3, #255	@ 0xff
 8005c94:	d030      	beq.n	8005cf8 <open_cell_check+0x6d0>
		   sideB_cellVoltageB[5] != 0xFF &&
 8005c96:	7e7b      	ldrb	r3, [r7, #25]
		   sideB_cellVoltageB[3] != 0xFF &&
 8005c98:	2bff      	cmp	r3, #255	@ 0xff
 8005c9a:	d02d      	beq.n	8005cf8 <open_cell_check+0x6d0>
		   sideA_cellVoltageC[1] != 0xFF &&
 8005c9c:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
		   sideB_cellVoltageB[5] != 0xFF &&
 8005ca0:	2bff      	cmp	r3, #255	@ 0xff
 8005ca2:	d029      	beq.n	8005cf8 <open_cell_check+0x6d0>
		   sideA_cellVoltageC[3] != 0xFF &&
 8005ca4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
		   sideA_cellVoltageC[1] != 0xFF &&
 8005ca8:	2bff      	cmp	r3, #255	@ 0xff
 8005caa:	d025      	beq.n	8005cf8 <open_cell_check+0x6d0>
		   sideA_cellVoltageC[5] != 0xFF &&
 8005cac:	f897 3031 	ldrb.w	r3, [r7, #49]	@ 0x31
		   sideA_cellVoltageC[3] != 0xFF &&
 8005cb0:	2bff      	cmp	r3, #255	@ 0xff
 8005cb2:	d021      	beq.n	8005cf8 <open_cell_check+0x6d0>
		   sideB_cellVoltageC[1] != 0xFF &&
 8005cb4:	7b7b      	ldrb	r3, [r7, #13]
		   sideA_cellVoltageC[5] != 0xFF &&
 8005cb6:	2bff      	cmp	r3, #255	@ 0xff
 8005cb8:	d01e      	beq.n	8005cf8 <open_cell_check+0x6d0>
		   sideB_cellVoltageC[3] != 0xFF &&
 8005cba:	7bfb      	ldrb	r3, [r7, #15]
		   sideB_cellVoltageC[1] != 0xFF &&
 8005cbc:	2bff      	cmp	r3, #255	@ 0xff
 8005cbe:	d01b      	beq.n	8005cf8 <open_cell_check+0x6d0>
		   sideB_cellVoltageC[5] != 0xFF &&
 8005cc0:	7c7b      	ldrb	r3, [r7, #17]
		   sideB_cellVoltageC[3] != 0xFF &&
 8005cc2:	2bff      	cmp	r3, #255	@ 0xff
 8005cc4:	d018      	beq.n	8005cf8 <open_cell_check+0x6d0>
		   sideA_cellVoltageD[1] != 0xFF &&
 8005cc6:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
		   sideB_cellVoltageC[5] != 0xFF &&
 8005cca:	2bff      	cmp	r3, #255	@ 0xff
 8005ccc:	d014      	beq.n	8005cf8 <open_cell_check+0x6d0>
		   sideA_cellVoltageD[3] != 0xFF &&
 8005cce:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
		   sideA_cellVoltageD[1] != 0xFF &&
 8005cd2:	2bff      	cmp	r3, #255	@ 0xff
 8005cd4:	d010      	beq.n	8005cf8 <open_cell_check+0x6d0>
		   sideA_cellVoltageD[5] != 0xFF &&
 8005cd6:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
		   sideA_cellVoltageD[3] != 0xFF &&
 8005cda:	2bff      	cmp	r3, #255	@ 0xff
 8005cdc:	d00c      	beq.n	8005cf8 <open_cell_check+0x6d0>
		   sideB_cellVoltageD[1] != 0xFF &&
 8005cde:	797b      	ldrb	r3, [r7, #5]
		   sideA_cellVoltageD[5] != 0xFF &&
 8005ce0:	2bff      	cmp	r3, #255	@ 0xff
 8005ce2:	d009      	beq.n	8005cf8 <open_cell_check+0x6d0>
		   sideB_cellVoltageD[3] != 0xFF &&
 8005ce4:	79fb      	ldrb	r3, [r7, #7]
		   sideB_cellVoltageD[1] != 0xFF &&
 8005ce6:	2bff      	cmp	r3, #255	@ 0xff
 8005ce8:	d006      	beq.n	8005cf8 <open_cell_check+0x6d0>
		   sideB_cellVoltageD[5] != 0xFF)
 8005cea:	7a7b      	ldrb	r3, [r7, #9]
		   sideB_cellVoltageD[3] != 0xFF &&
 8005cec:	2bff      	cmp	r3, #255	@ 0xff
 8005cee:	d003      	beq.n	8005cf8 <open_cell_check+0x6d0>
		{
			attempts = 13;
 8005cf0:	230d      	movs	r3, #13
 8005cf2:	f887 30e7 	strb.w	r3, [r7, #231]	@ 0xe7
 8005cf6:	e007      	b.n	8005d08 <open_cell_check+0x6e0>
		}
		else {
			attempts++;
 8005cf8:	f897 30e7 	ldrb.w	r3, [r7, #231]	@ 0xe7
 8005cfc:	3301      	adds	r3, #1
 8005cfe:	f887 30e7 	strb.w	r3, [r7, #231]	@ 0xe7
			wait(1);
 8005d02:	2001      	movs	r0, #1
 8005d04:	f003 fa98 	bl	8009238 <wait>
	while(attempts < ATTEMPT_LIMIT) {
 8005d08:	f897 30e7 	ldrb.w	r3, [r7, #231]	@ 0xe7
 8005d0c:	2b09      	cmp	r3, #9
 8005d0e:	f67f aee2 	bls.w	8005ad6 <open_cell_check+0x4ae>
		}
	}
	if(attempts != 13) {
 8005d12:	f897 30e7 	ldrb.w	r3, [r7, #231]	@ 0xe7
 8005d16:	2b0d      	cmp	r3, #13
 8005d18:	d004      	beq.n	8005d24 <open_cell_check+0x6fc>
		error_loop(ERROR_PEC, 0, 0);
 8005d1a:	2200      	movs	r2, #0
 8005d1c:	2100      	movs	r1, #0
 8005d1e:	2056      	movs	r0, #86	@ 0x56
 8005d20:	f7fe fca0 	bl	8004664 <error_loop>
	}
	sideA_cellPD[0] = (sideA_cellVoltageA[1] << 8) | sideA_cellVoltageA[0];
 8005d24:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 8005d28:	b21b      	sxth	r3, r3
 8005d2a:	021b      	lsls	r3, r3, #8
 8005d2c:	b21a      	sxth	r2, r3
 8005d2e:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 8005d32:	b21b      	sxth	r3, r3
 8005d34:	4313      	orrs	r3, r2
 8005d36:	b21b      	sxth	r3, r3
 8005d38:	b29b      	uxth	r3, r3
 8005d3a:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
	sideA_cellPD[1] = (sideA_cellVoltageA[3] << 8) | sideA_cellVoltageA[2];
 8005d3e:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8005d42:	b21b      	sxth	r3, r3
 8005d44:	021b      	lsls	r3, r3, #8
 8005d46:	b21a      	sxth	r2, r3
 8005d48:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8005d4c:	b21b      	sxth	r3, r3
 8005d4e:	4313      	orrs	r3, r2
 8005d50:	b21b      	sxth	r3, r3
 8005d52:	b29b      	uxth	r3, r3
 8005d54:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
	sideA_cellPD[2] = (sideA_cellVoltageA[5] << 8) | sideA_cellVoltageA[4];
 8005d58:	f897 3041 	ldrb.w	r3, [r7, #65]	@ 0x41
 8005d5c:	b21b      	sxth	r3, r3
 8005d5e:	021b      	lsls	r3, r3, #8
 8005d60:	b21a      	sxth	r2, r3
 8005d62:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8005d66:	b21b      	sxth	r3, r3
 8005d68:	4313      	orrs	r3, r2
 8005d6a:	b21b      	sxth	r3, r3
 8005d6c:	b29b      	uxth	r3, r3
 8005d6e:	f8a7 30a8 	strh.w	r3, [r7, #168]	@ 0xa8
	sideA_cellPD[3] = (sideA_cellVoltageB[1] << 8) | sideA_cellVoltageB[0];
 8005d72:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8005d76:	b21b      	sxth	r3, r3
 8005d78:	021b      	lsls	r3, r3, #8
 8005d7a:	b21a      	sxth	r2, r3
 8005d7c:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8005d80:	b21b      	sxth	r3, r3
 8005d82:	4313      	orrs	r3, r2
 8005d84:	b21b      	sxth	r3, r3
 8005d86:	b29b      	uxth	r3, r3
 8005d88:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
	sideA_cellPD[4] = (sideA_cellVoltageB[3] << 8) | sideA_cellVoltageB[2];
 8005d8c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8005d90:	b21b      	sxth	r3, r3
 8005d92:	021b      	lsls	r3, r3, #8
 8005d94:	b21a      	sxth	r2, r3
 8005d96:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8005d9a:	b21b      	sxth	r3, r3
 8005d9c:	4313      	orrs	r3, r2
 8005d9e:	b21b      	sxth	r3, r3
 8005da0:	b29b      	uxth	r3, r3
 8005da2:	f8a7 30ac 	strh.w	r3, [r7, #172]	@ 0xac
	sideA_cellPD[5] = (sideA_cellVoltageB[5] << 8) | sideA_cellVoltageB[4];
 8005da6:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8005daa:	b21b      	sxth	r3, r3
 8005dac:	021b      	lsls	r3, r3, #8
 8005dae:	b21a      	sxth	r2, r3
 8005db0:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 8005db4:	b21b      	sxth	r3, r3
 8005db6:	4313      	orrs	r3, r2
 8005db8:	b21b      	sxth	r3, r3
 8005dba:	b29b      	uxth	r3, r3
 8005dbc:	f8a7 30ae 	strh.w	r3, [r7, #174]	@ 0xae
	sideA_cellPD[6] = (sideA_cellVoltageC[1] << 8) | sideA_cellVoltageC[0];
 8005dc0:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8005dc4:	b21b      	sxth	r3, r3
 8005dc6:	021b      	lsls	r3, r3, #8
 8005dc8:	b21a      	sxth	r2, r3
 8005dca:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8005dce:	b21b      	sxth	r3, r3
 8005dd0:	4313      	orrs	r3, r2
 8005dd2:	b21b      	sxth	r3, r3
 8005dd4:	b29b      	uxth	r3, r3
 8005dd6:	f8a7 30b0 	strh.w	r3, [r7, #176]	@ 0xb0
	sideA_cellPD[7] = (sideA_cellVoltageC[3] << 8) | sideA_cellVoltageC[2];
 8005dda:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005dde:	b21b      	sxth	r3, r3
 8005de0:	021b      	lsls	r3, r3, #8
 8005de2:	b21a      	sxth	r2, r3
 8005de4:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005de8:	b21b      	sxth	r3, r3
 8005dea:	4313      	orrs	r3, r2
 8005dec:	b21b      	sxth	r3, r3
 8005dee:	b29b      	uxth	r3, r3
 8005df0:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
	sideA_cellPD[8] = (sideA_cellVoltageC[5] << 8) | sideA_cellVoltageC[4];
 8005df4:	f897 3031 	ldrb.w	r3, [r7, #49]	@ 0x31
 8005df8:	b21b      	sxth	r3, r3
 8005dfa:	021b      	lsls	r3, r3, #8
 8005dfc:	b21a      	sxth	r2, r3
 8005dfe:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8005e02:	b21b      	sxth	r3, r3
 8005e04:	4313      	orrs	r3, r2
 8005e06:	b21b      	sxth	r3, r3
 8005e08:	b29b      	uxth	r3, r3
 8005e0a:	f8a7 30b4 	strh.w	r3, [r7, #180]	@ 0xb4
	sideA_cellPD[9] = (sideA_cellVoltageD[1] << 8) | sideA_cellVoltageD[0];
 8005e0e:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8005e12:	b21b      	sxth	r3, r3
 8005e14:	021b      	lsls	r3, r3, #8
 8005e16:	b21a      	sxth	r2, r3
 8005e18:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8005e1c:	b21b      	sxth	r3, r3
 8005e1e:	4313      	orrs	r3, r2
 8005e20:	b21b      	sxth	r3, r3
 8005e22:	b29b      	uxth	r3, r3
 8005e24:	f8a7 30b6 	strh.w	r3, [r7, #182]	@ 0xb6
	sideA_cellPD[10] = (sideA_cellVoltageD[3] << 8) | sideA_cellVoltageD[2];
 8005e28:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005e2c:	b21b      	sxth	r3, r3
 8005e2e:	021b      	lsls	r3, r3, #8
 8005e30:	b21a      	sxth	r2, r3
 8005e32:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8005e36:	b21b      	sxth	r3, r3
 8005e38:	4313      	orrs	r3, r2
 8005e3a:	b21b      	sxth	r3, r3
 8005e3c:	b29b      	uxth	r3, r3
 8005e3e:	f8a7 30b8 	strh.w	r3, [r7, #184]	@ 0xb8
	sideA_cellPD[11] = (sideA_cellVoltageD[5] << 8) | sideA_cellVoltageD[4];
 8005e42:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8005e46:	b21b      	sxth	r3, r3
 8005e48:	021b      	lsls	r3, r3, #8
 8005e4a:	b21a      	sxth	r2, r3
 8005e4c:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005e50:	b21b      	sxth	r3, r3
 8005e52:	4313      	orrs	r3, r2
 8005e54:	b21b      	sxth	r3, r3
 8005e56:	b29b      	uxth	r3, r3
 8005e58:	f8a7 30ba 	strh.w	r3, [r7, #186]	@ 0xba

	sideB_cellPD[0] = (sideB_cellVoltageA[1] << 8) | sideB_cellVoltageA[0];
 8005e5c:	7f7b      	ldrb	r3, [r7, #29]
 8005e5e:	b21b      	sxth	r3, r3
 8005e60:	021b      	lsls	r3, r3, #8
 8005e62:	b21a      	sxth	r2, r3
 8005e64:	7f3b      	ldrb	r3, [r7, #28]
 8005e66:	b21b      	sxth	r3, r3
 8005e68:	4313      	orrs	r3, r2
 8005e6a:	b21b      	sxth	r3, r3
 8005e6c:	b29b      	uxth	r3, r3
 8005e6e:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c
	sideB_cellPD[1] = (sideB_cellVoltageA[3] << 8) | sideB_cellVoltageA[2];
 8005e72:	7ffb      	ldrb	r3, [r7, #31]
 8005e74:	b21b      	sxth	r3, r3
 8005e76:	021b      	lsls	r3, r3, #8
 8005e78:	b21a      	sxth	r2, r3
 8005e7a:	7fbb      	ldrb	r3, [r7, #30]
 8005e7c:	b21b      	sxth	r3, r3
 8005e7e:	4313      	orrs	r3, r2
 8005e80:	b21b      	sxth	r3, r3
 8005e82:	b29b      	uxth	r3, r3
 8005e84:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
	sideB_cellPD[2] = (sideB_cellVoltageA[5] << 8) | sideB_cellVoltageA[4];
 8005e88:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8005e8c:	b21b      	sxth	r3, r3
 8005e8e:	021b      	lsls	r3, r3, #8
 8005e90:	b21a      	sxth	r2, r3
 8005e92:	f897 3020 	ldrb.w	r3, [r7, #32]
 8005e96:	b21b      	sxth	r3, r3
 8005e98:	4313      	orrs	r3, r2
 8005e9a:	b21b      	sxth	r3, r3
 8005e9c:	b29b      	uxth	r3, r3
 8005e9e:	f8a7 3060 	strh.w	r3, [r7, #96]	@ 0x60
	sideB_cellPD[3] = (sideB_cellVoltageB[1] << 8) | sideB_cellVoltageB[0];
 8005ea2:	7d7b      	ldrb	r3, [r7, #21]
 8005ea4:	b21b      	sxth	r3, r3
 8005ea6:	021b      	lsls	r3, r3, #8
 8005ea8:	b21a      	sxth	r2, r3
 8005eaa:	7d3b      	ldrb	r3, [r7, #20]
 8005eac:	b21b      	sxth	r3, r3
 8005eae:	4313      	orrs	r3, r2
 8005eb0:	b21b      	sxth	r3, r3
 8005eb2:	b29b      	uxth	r3, r3
 8005eb4:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
	sideB_cellPD[4] = (sideB_cellVoltageB[3] << 8) | sideB_cellVoltageB[2];
 8005eb8:	7dfb      	ldrb	r3, [r7, #23]
 8005eba:	b21b      	sxth	r3, r3
 8005ebc:	021b      	lsls	r3, r3, #8
 8005ebe:	b21a      	sxth	r2, r3
 8005ec0:	7dbb      	ldrb	r3, [r7, #22]
 8005ec2:	b21b      	sxth	r3, r3
 8005ec4:	4313      	orrs	r3, r2
 8005ec6:	b21b      	sxth	r3, r3
 8005ec8:	b29b      	uxth	r3, r3
 8005eca:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
	sideB_cellPD[5] = (sideB_cellVoltageB[5] << 8) | sideB_cellVoltageB[4];
 8005ece:	7e7b      	ldrb	r3, [r7, #25]
 8005ed0:	b21b      	sxth	r3, r3
 8005ed2:	021b      	lsls	r3, r3, #8
 8005ed4:	b21a      	sxth	r2, r3
 8005ed6:	7e3b      	ldrb	r3, [r7, #24]
 8005ed8:	b21b      	sxth	r3, r3
 8005eda:	4313      	orrs	r3, r2
 8005edc:	b21b      	sxth	r3, r3
 8005ede:	b29b      	uxth	r3, r3
 8005ee0:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
	sideB_cellPD[6] = (sideB_cellVoltageC[1] << 8) | sideB_cellVoltageC[0];
 8005ee4:	7b7b      	ldrb	r3, [r7, #13]
 8005ee6:	b21b      	sxth	r3, r3
 8005ee8:	021b      	lsls	r3, r3, #8
 8005eea:	b21a      	sxth	r2, r3
 8005eec:	7b3b      	ldrb	r3, [r7, #12]
 8005eee:	b21b      	sxth	r3, r3
 8005ef0:	4313      	orrs	r3, r2
 8005ef2:	b21b      	sxth	r3, r3
 8005ef4:	b29b      	uxth	r3, r3
 8005ef6:	f8a7 3068 	strh.w	r3, [r7, #104]	@ 0x68
	sideB_cellPD[7] = (sideB_cellVoltageC[3] << 8) | sideB_cellVoltageC[2];
 8005efa:	7bfb      	ldrb	r3, [r7, #15]
 8005efc:	b21b      	sxth	r3, r3
 8005efe:	021b      	lsls	r3, r3, #8
 8005f00:	b21a      	sxth	r2, r3
 8005f02:	7bbb      	ldrb	r3, [r7, #14]
 8005f04:	b21b      	sxth	r3, r3
 8005f06:	4313      	orrs	r3, r2
 8005f08:	b21b      	sxth	r3, r3
 8005f0a:	b29b      	uxth	r3, r3
 8005f0c:	f8a7 306a 	strh.w	r3, [r7, #106]	@ 0x6a
	sideB_cellPD[8] = (sideB_cellVoltageC[5] << 8) | sideB_cellVoltageC[4];
 8005f10:	7c7b      	ldrb	r3, [r7, #17]
 8005f12:	b21b      	sxth	r3, r3
 8005f14:	021b      	lsls	r3, r3, #8
 8005f16:	b21a      	sxth	r2, r3
 8005f18:	7c3b      	ldrb	r3, [r7, #16]
 8005f1a:	b21b      	sxth	r3, r3
 8005f1c:	4313      	orrs	r3, r2
 8005f1e:	b21b      	sxth	r3, r3
 8005f20:	b29b      	uxth	r3, r3
 8005f22:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
	sideB_cellPD[9] = (sideB_cellVoltageD[1] << 8) | sideB_cellVoltageD[0];
 8005f26:	797b      	ldrb	r3, [r7, #5]
 8005f28:	b21b      	sxth	r3, r3
 8005f2a:	021b      	lsls	r3, r3, #8
 8005f2c:	b21a      	sxth	r2, r3
 8005f2e:	793b      	ldrb	r3, [r7, #4]
 8005f30:	b21b      	sxth	r3, r3
 8005f32:	4313      	orrs	r3, r2
 8005f34:	b21b      	sxth	r3, r3
 8005f36:	b29b      	uxth	r3, r3
 8005f38:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
	sideB_cellPD[10] = (sideB_cellVoltageD[3] << 8) | sideB_cellVoltageD[2];
 8005f3c:	79fb      	ldrb	r3, [r7, #7]
 8005f3e:	b21b      	sxth	r3, r3
 8005f40:	021b      	lsls	r3, r3, #8
 8005f42:	b21a      	sxth	r2, r3
 8005f44:	79bb      	ldrb	r3, [r7, #6]
 8005f46:	b21b      	sxth	r3, r3
 8005f48:	4313      	orrs	r3, r2
 8005f4a:	b21b      	sxth	r3, r3
 8005f4c:	b29b      	uxth	r3, r3
 8005f4e:	f8a7 3070 	strh.w	r3, [r7, #112]	@ 0x70
	sideB_cellPD[11] = (sideB_cellVoltageD[5] << 8) | sideB_cellVoltageD[4];
 8005f52:	7a7b      	ldrb	r3, [r7, #9]
 8005f54:	b21b      	sxth	r3, r3
 8005f56:	021b      	lsls	r3, r3, #8
 8005f58:	b21a      	sxth	r2, r3
 8005f5a:	7a3b      	ldrb	r3, [r7, #8]
 8005f5c:	b21b      	sxth	r3, r3
 8005f5e:	4313      	orrs	r3, r2
 8005f60:	b21b      	sxth	r3, r3
 8005f62:	b29b      	uxth	r3, r3
 8005f64:	f8a7 3072 	strh.w	r3, [r7, #114]	@ 0x72

	// Step 3
	for(uint8_t i = 0; i < 12; i++) { sideA_cellDelta[i] = sideA_cellPU[i] - sideA_cellPD[i]; }
 8005f68:	2300      	movs	r3, #0
 8005f6a:	f887 30e4 	strb.w	r3, [r7, #228]	@ 0xe4
 8005f6e:	e01c      	b.n	8005faa <open_cell_check+0x982>
 8005f70:	f897 30e4 	ldrb.w	r3, [r7, #228]	@ 0xe4
 8005f74:	005b      	lsls	r3, r3, #1
 8005f76:	33e8      	adds	r3, #232	@ 0xe8
 8005f78:	443b      	add	r3, r7
 8005f7a:	f833 2c2c 	ldrh.w	r2, [r3, #-44]
 8005f7e:	f897 30e4 	ldrb.w	r3, [r7, #228]	@ 0xe4
 8005f82:	005b      	lsls	r3, r3, #1
 8005f84:	33e8      	adds	r3, #232	@ 0xe8
 8005f86:	443b      	add	r3, r7
 8005f88:	f833 3c44 	ldrh.w	r3, [r3, #-68]
 8005f8c:	1ad3      	subs	r3, r2, r3
 8005f8e:	b29a      	uxth	r2, r3
 8005f90:	f897 30e4 	ldrb.w	r3, [r7, #228]	@ 0xe4
 8005f94:	b212      	sxth	r2, r2
 8005f96:	005b      	lsls	r3, r3, #1
 8005f98:	33e8      	adds	r3, #232	@ 0xe8
 8005f9a:	443b      	add	r3, r7
 8005f9c:	f823 2c5c 	strh.w	r2, [r3, #-92]
 8005fa0:	f897 30e4 	ldrb.w	r3, [r7, #228]	@ 0xe4
 8005fa4:	3301      	adds	r3, #1
 8005fa6:	f887 30e4 	strb.w	r3, [r7, #228]	@ 0xe4
 8005faa:	f897 30e4 	ldrb.w	r3, [r7, #228]	@ 0xe4
 8005fae:	2b0b      	cmp	r3, #11
 8005fb0:	d9de      	bls.n	8005f70 <open_cell_check+0x948>

	for(uint8_t i = 0; i < 12; i++) { sideB_cellDelta[i] = sideB_cellPU[i] - sideB_cellPD[i]; }
 8005fb2:	2300      	movs	r3, #0
 8005fb4:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
 8005fb8:	e01c      	b.n	8005ff4 <open_cell_check+0x9cc>
 8005fba:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005fbe:	005b      	lsls	r3, r3, #1
 8005fc0:	33e8      	adds	r3, #232	@ 0xe8
 8005fc2:	443b      	add	r3, r7
 8005fc4:	f833 2c74 	ldrh.w	r2, [r3, #-116]
 8005fc8:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005fcc:	005b      	lsls	r3, r3, #1
 8005fce:	33e8      	adds	r3, #232	@ 0xe8
 8005fd0:	443b      	add	r3, r7
 8005fd2:	f833 3c8c 	ldrh.w	r3, [r3, #-140]
 8005fd6:	1ad3      	subs	r3, r2, r3
 8005fd8:	b29a      	uxth	r2, r3
 8005fda:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005fde:	b212      	sxth	r2, r2
 8005fe0:	005b      	lsls	r3, r3, #1
 8005fe2:	33e8      	adds	r3, #232	@ 0xe8
 8005fe4:	443b      	add	r3, r7
 8005fe6:	f823 2ca4 	strh.w	r2, [r3, #-164]
 8005fea:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005fee:	3301      	adds	r3, #1
 8005ff0:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
 8005ff4:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005ff8:	2b0b      	cmp	r3, #11
 8005ffa:	d9de      	bls.n	8005fba <open_cell_check+0x992>

	// Step 4
	uint8_t openCellIndex = 13;
 8005ffc:	230d      	movs	r3, #13
 8005ffe:	f887 30de 	strb.w	r3, [r7, #222]	@ 0xde
	uint8_t sideA_openCellFlag = 0;
 8006002:	2300      	movs	r3, #0
 8006004:	f887 30dd 	strb.w	r3, [r7, #221]	@ 0xdd
	uint8_t sideB_openCellFlag = 0;
 8006008:	2300      	movs	r3, #0
 800600a:	f887 30dc 	strb.w	r3, [r7, #220]	@ 0xdc

	// Two if-statements below check for open grounds.
	if(sideA_cellPU[0] == 0) {
 800600e:	f8b7 30bc 	ldrh.w	r3, [r7, #188]	@ 0xbc
 8006012:	2b00      	cmp	r3, #0
 8006014:	d105      	bne.n	8006022 <open_cell_check+0x9fa>
		openCellIndex = 0;
 8006016:	2300      	movs	r3, #0
 8006018:	f887 30de 	strb.w	r3, [r7, #222]	@ 0xde
		sideA_openCellFlag = 1;
 800601c:	2301      	movs	r3, #1
 800601e:	f887 30dd 	strb.w	r3, [r7, #221]	@ 0xdd
	}
	if(sideB_cellPU[0] == 0) {
 8006022:	f8b7 3074 	ldrh.w	r3, [r7, #116]	@ 0x74
 8006026:	2b00      	cmp	r3, #0
 8006028:	d105      	bne.n	8006036 <open_cell_check+0xa0e>
		openCellIndex = 0;
 800602a:	2300      	movs	r3, #0
 800602c:	f887 30de 	strb.w	r3, [r7, #222]	@ 0xde
		sideB_openCellFlag = 1;
 8006030:	2301      	movs	r3, #1
 8006032:	f887 30dc 	strb.w	r3, [r7, #220]	@ 0xdc
	}

	// Two for-loops below check for open cells that show zero volts (complete disconnect).
	for(uint8_t i = 0; i < 10; i++) {
 8006036:	2300      	movs	r3, #0
 8006038:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
 800603c:	e01e      	b.n	800607c <open_cell_check+0xa54>
		if(sideA_cellPU[i] == 0 || sideA_cellPD[i] == 0) {
 800603e:	f897 30e2 	ldrb.w	r3, [r7, #226]	@ 0xe2
 8006042:	005b      	lsls	r3, r3, #1
 8006044:	33e8      	adds	r3, #232	@ 0xe8
 8006046:	443b      	add	r3, r7
 8006048:	f833 3c2c 	ldrh.w	r3, [r3, #-44]
 800604c:	2b00      	cmp	r3, #0
 800604e:	d008      	beq.n	8006062 <open_cell_check+0xa3a>
 8006050:	f897 30e2 	ldrb.w	r3, [r7, #226]	@ 0xe2
 8006054:	005b      	lsls	r3, r3, #1
 8006056:	33e8      	adds	r3, #232	@ 0xe8
 8006058:	443b      	add	r3, r7
 800605a:	f833 3c44 	ldrh.w	r3, [r3, #-68]
 800605e:	2b00      	cmp	r3, #0
 8006060:	d107      	bne.n	8006072 <open_cell_check+0xa4a>
			openCellIndex = i + 1;
 8006062:	f897 30e2 	ldrb.w	r3, [r7, #226]	@ 0xe2
 8006066:	3301      	adds	r3, #1
 8006068:	f887 30de 	strb.w	r3, [r7, #222]	@ 0xde
			sideA_openCellFlag = 1;
 800606c:	2301      	movs	r3, #1
 800606e:	f887 30dd 	strb.w	r3, [r7, #221]	@ 0xdd
	for(uint8_t i = 0; i < 10; i++) {
 8006072:	f897 30e2 	ldrb.w	r3, [r7, #226]	@ 0xe2
 8006076:	3301      	adds	r3, #1
 8006078:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
 800607c:	f897 30e2 	ldrb.w	r3, [r7, #226]	@ 0xe2
 8006080:	2b09      	cmp	r3, #9
 8006082:	d9dc      	bls.n	800603e <open_cell_check+0xa16>
		}
	}
	for(uint8_t i = 0; i < 10; i++) {
 8006084:	2300      	movs	r3, #0
 8006086:	f887 30e1 	strb.w	r3, [r7, #225]	@ 0xe1
 800608a:	e01e      	b.n	80060ca <open_cell_check+0xaa2>
		if(sideB_cellPU[i] == 0 || sideB_cellPD[i] == 0) {
 800608c:	f897 30e1 	ldrb.w	r3, [r7, #225]	@ 0xe1
 8006090:	005b      	lsls	r3, r3, #1
 8006092:	33e8      	adds	r3, #232	@ 0xe8
 8006094:	443b      	add	r3, r7
 8006096:	f833 3c74 	ldrh.w	r3, [r3, #-116]
 800609a:	2b00      	cmp	r3, #0
 800609c:	d008      	beq.n	80060b0 <open_cell_check+0xa88>
 800609e:	f897 30e1 	ldrb.w	r3, [r7, #225]	@ 0xe1
 80060a2:	005b      	lsls	r3, r3, #1
 80060a4:	33e8      	adds	r3, #232	@ 0xe8
 80060a6:	443b      	add	r3, r7
 80060a8:	f833 3c8c 	ldrh.w	r3, [r3, #-140]
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d107      	bne.n	80060c0 <open_cell_check+0xa98>
			openCellIndex = i + 1;
 80060b0:	f897 30e1 	ldrb.w	r3, [r7, #225]	@ 0xe1
 80060b4:	3301      	adds	r3, #1
 80060b6:	f887 30de 	strb.w	r3, [r7, #222]	@ 0xde
			sideB_openCellFlag = 1;
 80060ba:	2301      	movs	r3, #1
 80060bc:	f887 30dc 	strb.w	r3, [r7, #220]	@ 0xdc
	for(uint8_t i = 0; i < 10; i++) {
 80060c0:	f897 30e1 	ldrb.w	r3, [r7, #225]	@ 0xe1
 80060c4:	3301      	adds	r3, #1
 80060c6:	f887 30e1 	strb.w	r3, [r7, #225]	@ 0xe1
 80060ca:	f897 30e1 	ldrb.w	r3, [r7, #225]	@ 0xe1
 80060ce:	2b09      	cmp	r3, #9
 80060d0:	d9dc      	bls.n	800608c <open_cell_check+0xa64>
		}
	}

	// Two for-loops below check for open cells that do not show zero volts ('floating' disconnect).
	for(uint8_t i = 1; i < 11; i++) {
 80060d2:	2301      	movs	r3, #1
 80060d4:	f887 30e0 	strb.w	r3, [r7, #224]	@ 0xe0
 80060d8:	e015      	b.n	8006106 <open_cell_check+0xade>
		if(sideA_cellDelta[i] < OPEN_CELL_THRESHOLD) {
 80060da:	f897 30e0 	ldrb.w	r3, [r7, #224]	@ 0xe0
 80060de:	005b      	lsls	r3, r3, #1
 80060e0:	33e8      	adds	r3, #232	@ 0xe8
 80060e2:	443b      	add	r3, r7
 80060e4:	f933 3c5c 	ldrsh.w	r3, [r3, #-92]
 80060e8:	f513 6f7a 	cmn.w	r3, #4000	@ 0xfa0
 80060ec:	da06      	bge.n	80060fc <open_cell_check+0xad4>
			openCellIndex = i;
 80060ee:	f897 30e0 	ldrb.w	r3, [r7, #224]	@ 0xe0
 80060f2:	f887 30de 	strb.w	r3, [r7, #222]	@ 0xde
			sideA_openCellFlag = 1;
 80060f6:	2301      	movs	r3, #1
 80060f8:	f887 30dd 	strb.w	r3, [r7, #221]	@ 0xdd
	for(uint8_t i = 1; i < 11; i++) {
 80060fc:	f897 30e0 	ldrb.w	r3, [r7, #224]	@ 0xe0
 8006100:	3301      	adds	r3, #1
 8006102:	f887 30e0 	strb.w	r3, [r7, #224]	@ 0xe0
 8006106:	f897 30e0 	ldrb.w	r3, [r7, #224]	@ 0xe0
 800610a:	2b0a      	cmp	r3, #10
 800610c:	d9e5      	bls.n	80060da <open_cell_check+0xab2>
		}
	}
	for(uint8_t i = 1; i < 11; i++) {
 800610e:	2301      	movs	r3, #1
 8006110:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
 8006114:	e015      	b.n	8006142 <open_cell_check+0xb1a>
		if(sideB_cellDelta[i] < OPEN_CELL_THRESHOLD) {
 8006116:	f897 30df 	ldrb.w	r3, [r7, #223]	@ 0xdf
 800611a:	005b      	lsls	r3, r3, #1
 800611c:	33e8      	adds	r3, #232	@ 0xe8
 800611e:	443b      	add	r3, r7
 8006120:	f933 3ca4 	ldrsh.w	r3, [r3, #-164]
 8006124:	f513 6f7a 	cmn.w	r3, #4000	@ 0xfa0
 8006128:	da06      	bge.n	8006138 <open_cell_check+0xb10>
			openCellIndex = i;
 800612a:	f897 30df 	ldrb.w	r3, [r7, #223]	@ 0xdf
 800612e:	f887 30de 	strb.w	r3, [r7, #222]	@ 0xde
			sideB_openCellFlag = 1;
 8006132:	2301      	movs	r3, #1
 8006134:	f887 30dc 	strb.w	r3, [r7, #220]	@ 0xdc
	for(uint8_t i = 1; i < 11; i++) {
 8006138:	f897 30df 	ldrb.w	r3, [r7, #223]	@ 0xdf
 800613c:	3301      	adds	r3, #1
 800613e:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
 8006142:	f897 30df 	ldrb.w	r3, [r7, #223]	@ 0xdf
 8006146:	2b0a      	cmp	r3, #10
 8006148:	d9e5      	bls.n	8006116 <open_cell_check+0xaee>
		}
	}

}
 800614a:	bf00      	nop
 800614c:	bf00      	nop
 800614e:	37e8      	adds	r7, #232	@ 0xe8
 8006150:	46bd      	mov	sp, r7
 8006152:	bd80      	pop	{r7, pc}

08006154 <open_thermistor_check>:


void open_thermistor_check(void)
{
 8006154:	b580      	push	{r7, lr}
 8006156:	b094      	sub	sp, #80	@ 0x50
 8006158:	af00      	add	r7, sp, #0
	float thermistorVoltages[18];

	read_thermistors(thermistorVoltages);
 800615a:	1d3b      	adds	r3, r7, #4
 800615c:	4618      	mov	r0, r3
 800615e:	f003 fba3 	bl	80098a8 <read_thermistors>

	for(uint8_t i = 0; i < 18; i++) {
 8006162:	2300      	movs	r3, #0
 8006164:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 8006168:	e01c      	b.n	80061a4 <open_thermistor_check+0x50>
		if(thermistorVoltages[i] > THERMISTOR_OPEN_CIRCUIT_THRESHOLD) { error_loop(ERROR_THERMISTOR_OPEN, 0, i + 1); }
 800616a:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800616e:	009b      	lsls	r3, r3, #2
 8006170:	3350      	adds	r3, #80	@ 0x50
 8006172:	443b      	add	r3, r7
 8006174:	3b4c      	subs	r3, #76	@ 0x4c
 8006176:	edd3 7a00 	vldr	s15, [r3]
 800617a:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 80061b8 <open_thermistor_check+0x64>
 800617e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006182:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006186:	dd08      	ble.n	800619a <open_thermistor_check+0x46>
 8006188:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800618c:	3301      	adds	r3, #1
 800618e:	b2db      	uxtb	r3, r3
 8006190:	461a      	mov	r2, r3
 8006192:	2100      	movs	r1, #0
 8006194:	2049      	movs	r0, #73	@ 0x49
 8006196:	f7fe fa65 	bl	8004664 <error_loop>
	for(uint8_t i = 0; i < 18; i++) {
 800619a:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800619e:	3301      	adds	r3, #1
 80061a0:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 80061a4:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80061a8:	2b11      	cmp	r3, #17
 80061aa:	d9de      	bls.n	800616a <open_thermistor_check+0x16>
	}
}
 80061ac:	bf00      	nop
 80061ae:	bf00      	nop
 80061b0:	3750      	adds	r7, #80	@ 0x50
 80061b2:	46bd      	mov	sp, r7
 80061b4:	bd80      	pop	{r7, pc}
 80061b6:	bf00      	nop
 80061b8:	404ccccd 	.word	0x404ccccd

080061bc <mux_test>:


void mux_test(void)
{
 80061bc:	b580      	push	{r7, lr}
 80061be:	b086      	sub	sp, #24
 80061c0:	af00      	add	r7, sp, #0
	uint8_t attempts = 0;
 80061c2:	2300      	movs	r3, #0
 80061c4:	75fb      	strb	r3, [r7, #23]
	uint8_t subAttempts = 0;
 80061c6:	2300      	movs	r3, #0
 80061c8:	75bb      	strb	r3, [r7, #22]

	uint8_t sideA_statusB[8];
	uint8_t sideB_statusB[8];

	uint8_t sideA_statusB_PECflag = 0;
 80061ca:	2300      	movs	r3, #0
 80061cc:	757b      	strb	r3, [r7, #21]
	uint8_t sideB_statusB_PECflag = 0;
 80061ce:	2300      	movs	r3, #0
 80061d0:	753b      	strb	r3, [r7, #20]

	uint8_t sideA_muxFailBit;
	uint8_t sideB_muxFailBit;

	while(attempts < ATTEMPT_LIMIT) {
 80061d2:	e060      	b.n	8006296 <mux_test+0xda>
		while(subAttempts < ATTEMPT_LIMIT) {
			CLRSTAT(SIDE_A);
 80061d4:	2001      	movs	r0, #1
 80061d6:	f002 fa3b 	bl	8008650 <CLRSTAT>
			CLRSTAT(SIDE_B);
 80061da:	2000      	movs	r0, #0
 80061dc:	f002 fa38 	bl	8008650 <CLRSTAT>
			wait(3);
 80061e0:	2003      	movs	r0, #3
 80061e2:	f003 f829 	bl	8009238 <wait>

			DIAGN(SIDE_A);
 80061e6:	2001      	movs	r0, #1
 80061e8:	f002 fa55 	bl	8008696 <DIAGN>
			DIAGN(SIDE_B);
 80061ec:	2000      	movs	r0, #0
 80061ee:	f002 fa52 	bl	8008696 <DIAGN>
			wait(3);
 80061f2:	2003      	movs	r0, #3
 80061f4:	f003 f820 	bl	8009238 <wait>

			RDSTATB(sideA_statusB, SIDE_A);
 80061f8:	f107 0308 	add.w	r3, r7, #8
 80061fc:	2101      	movs	r1, #1
 80061fe:	4618      	mov	r0, r3
 8006200:	f001 ffc4 	bl	800818c <RDSTATB>
			RDSTATB(sideB_statusB, SIDE_B);
 8006204:	463b      	mov	r3, r7
 8006206:	2100      	movs	r1, #0
 8006208:	4618      	mov	r0, r3
 800620a:	f001 ffbf 	bl	800818c <RDSTATB>

			sideA_statusB_PECflag = verify_PEC15(sideA_statusB);
 800620e:	f107 0308 	add.w	r3, r7, #8
 8006212:	4618      	mov	r0, r3
 8006214:	f001 fd15 	bl	8007c42 <verify_PEC15>
 8006218:	4603      	mov	r3, r0
 800621a:	757b      	strb	r3, [r7, #21]
			sideB_statusB_PECflag = verify_PEC15(sideB_statusB);
 800621c:	463b      	mov	r3, r7
 800621e:	4618      	mov	r0, r3
 8006220:	f001 fd0f 	bl	8007c42 <verify_PEC15>
 8006224:	4603      	mov	r3, r0
 8006226:	753b      	strb	r3, [r7, #20]

			if(sideA_statusB_PECflag == 2 && sideB_statusB_PECflag == 2) { subAttempts = 13; }
 8006228:	7d7b      	ldrb	r3, [r7, #21]
 800622a:	2b02      	cmp	r3, #2
 800622c:	d105      	bne.n	800623a <mux_test+0x7e>
 800622e:	7d3b      	ldrb	r3, [r7, #20]
 8006230:	2b02      	cmp	r3, #2
 8006232:	d102      	bne.n	800623a <mux_test+0x7e>
 8006234:	230d      	movs	r3, #13
 8006236:	75bb      	strb	r3, [r7, #22]
 8006238:	e005      	b.n	8006246 <mux_test+0x8a>

			else {
				subAttempts++;
 800623a:	7dbb      	ldrb	r3, [r7, #22]
 800623c:	3301      	adds	r3, #1
 800623e:	75bb      	strb	r3, [r7, #22]
				wait(1);
 8006240:	2001      	movs	r0, #1
 8006242:	f002 fff9 	bl	8009238 <wait>
		while(subAttempts < ATTEMPT_LIMIT) {
 8006246:	7dbb      	ldrb	r3, [r7, #22]
 8006248:	2b09      	cmp	r3, #9
 800624a:	d9c3      	bls.n	80061d4 <mux_test+0x18>
			}
		}
		if(subAttempts != 13) { error_loop(ERROR_PEC, 0, 0); }
 800624c:	7dbb      	ldrb	r3, [r7, #22]
 800624e:	2b0d      	cmp	r3, #13
 8006250:	d004      	beq.n	800625c <mux_test+0xa0>
 8006252:	2200      	movs	r2, #0
 8006254:	2100      	movs	r1, #0
 8006256:	2056      	movs	r0, #86	@ 0x56
 8006258:	f7fe fa04 	bl	8004664 <error_loop>

		sideA_muxFailBit = (sideA_statusB[5] >> 1) & 0x01;
 800625c:	7b7b      	ldrb	r3, [r7, #13]
 800625e:	085b      	lsrs	r3, r3, #1
 8006260:	b2db      	uxtb	r3, r3
 8006262:	f003 0301 	and.w	r3, r3, #1
 8006266:	74fb      	strb	r3, [r7, #19]
		sideB_muxFailBit = (sideB_statusB[5] >> 1) & 0x01;
 8006268:	797b      	ldrb	r3, [r7, #5]
 800626a:	085b      	lsrs	r3, r3, #1
 800626c:	b2db      	uxtb	r3, r3
 800626e:	f003 0301 	and.w	r3, r3, #1
 8006272:	74bb      	strb	r3, [r7, #18]

		if(sideA_muxFailBit == 0 && sideB_muxFailBit == 0) { attempts = 13; }
 8006274:	7cfb      	ldrb	r3, [r7, #19]
 8006276:	2b00      	cmp	r3, #0
 8006278:	d105      	bne.n	8006286 <mux_test+0xca>
 800627a:	7cbb      	ldrb	r3, [r7, #18]
 800627c:	2b00      	cmp	r3, #0
 800627e:	d102      	bne.n	8006286 <mux_test+0xca>
 8006280:	230d      	movs	r3, #13
 8006282:	75fb      	strb	r3, [r7, #23]
 8006284:	e007      	b.n	8006296 <mux_test+0xda>

		else {
			attempts++;
 8006286:	7dfb      	ldrb	r3, [r7, #23]
 8006288:	3301      	adds	r3, #1
 800628a:	75fb      	strb	r3, [r7, #23]
			subAttempts = 0;
 800628c:	2300      	movs	r3, #0
 800628e:	75bb      	strb	r3, [r7, #22]
			wait(1);
 8006290:	2001      	movs	r0, #1
 8006292:	f002 ffd1 	bl	8009238 <wait>
	while(attempts < ATTEMPT_LIMIT) {
 8006296:	7dfb      	ldrb	r3, [r7, #23]
 8006298:	2b09      	cmp	r3, #9
 800629a:	d9d4      	bls.n	8006246 <mux_test+0x8a>
		}
	}
	if(attempts != 13) { error_loop(ERROR_DIAGN, 0, 0); }
 800629c:	7dfb      	ldrb	r3, [r7, #23]
 800629e:	2b0d      	cmp	r3, #13
 80062a0:	d004      	beq.n	80062ac <mux_test+0xf0>
 80062a2:	2200      	movs	r2, #0
 80062a4:	2100      	movs	r1, #0
 80062a6:	204a      	movs	r0, #74	@ 0x4a
 80062a8:	f7fe f9dc 	bl	8004664 <error_loop>
}
 80062ac:	bf00      	nop
 80062ae:	3718      	adds	r7, #24
 80062b0:	46bd      	mov	sp, r7
 80062b2:	bd80      	pop	{r7, pc}

080062b4 <stat_register_test>:


void stat_register_test(void)
{
 80062b4:	b580      	push	{r7, lr}
 80062b6:	b090      	sub	sp, #64	@ 0x40
 80062b8:	af00      	add	r7, sp, #0
	uint8_t attempts = 0;
 80062ba:	2300      	movs	r3, #0
 80062bc:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	uint8_t subAttempts = 0;
 80062c0:	2300      	movs	r3, #0
 80062c2:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e

	uint8_t sideB_statA_PECflag;
	uint8_t sideB_statB_PECflag;

	// Test with first variant of STATST command
	while(attempts < ATTEMPT_LIMIT) {
 80062c6:	e106      	b.n	80064d6 <stat_register_test+0x222>
		while(subAttempts < ATTEMPT_LIMIT) {
			CLRSTAT(SIDE_A);
 80062c8:	2001      	movs	r0, #1
 80062ca:	f002 f9c1 	bl	8008650 <CLRSTAT>
			CLRSTAT(SIDE_B);
 80062ce:	2000      	movs	r0, #0
 80062d0:	f002 f9be 	bl	8008650 <CLRSTAT>
			wait(3);
 80062d4:	2003      	movs	r0, #3
 80062d6:	f002 ffaf 	bl	8009238 <wait>

			STATST(1, SIDE_A);
 80062da:	2101      	movs	r1, #1
 80062dc:	2001      	movs	r0, #1
 80062de:	f002 f8da 	bl	8008496 <STATST>
			STATST(1, SIDE_B);
 80062e2:	2100      	movs	r1, #0
 80062e4:	2001      	movs	r0, #1
 80062e6:	f002 f8d6 	bl	8008496 <STATST>
			wait(3);
 80062ea:	2003      	movs	r0, #3
 80062ec:	f002 ffa4 	bl	8009238 <wait>

			RDSTATA(sideA_statA, SIDE_A);
 80062f0:	f107 031c 	add.w	r3, r7, #28
 80062f4:	2101      	movs	r1, #1
 80062f6:	4618      	mov	r0, r3
 80062f8:	f001 ff24 	bl	8008144 <RDSTATA>
			RDSTATA(sideB_statA, SIDE_B);
 80062fc:	f107 030c 	add.w	r3, r7, #12
 8006300:	2100      	movs	r1, #0
 8006302:	4618      	mov	r0, r3
 8006304:	f001 ff1e 	bl	8008144 <RDSTATA>
			wait(1);
 8006308:	2001      	movs	r0, #1
 800630a:	f002 ff95 	bl	8009238 <wait>
			RDSTATB(sideA_statB, SIDE_A);
 800630e:	f107 0314 	add.w	r3, r7, #20
 8006312:	2101      	movs	r1, #1
 8006314:	4618      	mov	r0, r3
 8006316:	f001 ff39 	bl	800818c <RDSTATB>
			RDSTATB(sideB_statB, SIDE_B);
 800631a:	1d3b      	adds	r3, r7, #4
 800631c:	2100      	movs	r1, #0
 800631e:	4618      	mov	r0, r3
 8006320:	f001 ff34 	bl	800818c <RDSTATB>

			sideA_statA_PECflag = verify_PEC15(sideA_statA);
 8006324:	f107 031c 	add.w	r3, r7, #28
 8006328:	4618      	mov	r0, r3
 800632a:	f001 fc8a 	bl	8007c42 <verify_PEC15>
 800632e:	4603      	mov	r3, r0
 8006330:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
			sideB_statA_PECflag = verify_PEC15(sideB_statA);
 8006334:	f107 030c 	add.w	r3, r7, #12
 8006338:	4618      	mov	r0, r3
 800633a:	f001 fc82 	bl	8007c42 <verify_PEC15>
 800633e:	4603      	mov	r3, r0
 8006340:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38

			sideA_statB_PECflag = verify_PEC15(sideA_statB);
 8006344:	f107 0314 	add.w	r3, r7, #20
 8006348:	4618      	mov	r0, r3
 800634a:	f001 fc7a 	bl	8007c42 <verify_PEC15>
 800634e:	4603      	mov	r3, r0
 8006350:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
			sideB_statB_PECflag = verify_PEC15(sideB_statB);
 8006354:	1d3b      	adds	r3, r7, #4
 8006356:	4618      	mov	r0, r3
 8006358:	f001 fc73 	bl	8007c42 <verify_PEC15>
 800635c:	4603      	mov	r3, r0
 800635e:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

			if(sideA_statA_PECflag == 2 &&
 8006362:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8006366:	2b02      	cmp	r3, #2
 8006368:	d10f      	bne.n	800638a <stat_register_test+0xd6>
 800636a:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 800636e:	2b02      	cmp	r3, #2
 8006370:	d10b      	bne.n	800638a <stat_register_test+0xd6>
			   sideB_statA_PECflag == 2 &&
 8006372:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8006376:	2b02      	cmp	r3, #2
 8006378:	d107      	bne.n	800638a <stat_register_test+0xd6>
			   sideA_statB_PECflag == 2 &&
 800637a:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800637e:	2b02      	cmp	r3, #2
 8006380:	d103      	bne.n	800638a <stat_register_test+0xd6>
			   sideB_statB_PECflag == 2)
			{
				subAttempts = 13;
 8006382:	230d      	movs	r3, #13
 8006384:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
 8006388:	e007      	b.n	800639a <stat_register_test+0xe6>
			}
			else {
				subAttempts++;
 800638a:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 800638e:	3301      	adds	r3, #1
 8006390:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
				wait(1);
 8006394:	2001      	movs	r0, #1
 8006396:	f002 ff4f 	bl	8009238 <wait>
		while(subAttempts < ATTEMPT_LIMIT) {
 800639a:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 800639e:	2b09      	cmp	r3, #9
 80063a0:	d992      	bls.n	80062c8 <stat_register_test+0x14>
			}
		}
		if(subAttempts != 13) { error_loop(ERROR_PEC, 0, 0); }
 80063a2:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 80063a6:	2b0d      	cmp	r3, #13
 80063a8:	d004      	beq.n	80063b4 <stat_register_test+0x100>
 80063aa:	2200      	movs	r2, #0
 80063ac:	2100      	movs	r1, #0
 80063ae:	2056      	movs	r0, #86	@ 0x56
 80063b0:	f7fe f958 	bl	8004664 <error_loop>

		sideA_statContents[0] = (sideA_statA[1] << 8) | sideA_statA[0];			// SC value
 80063b4:	7f7b      	ldrb	r3, [r7, #29]
 80063b6:	b21b      	sxth	r3, r3
 80063b8:	021b      	lsls	r3, r3, #8
 80063ba:	b21a      	sxth	r2, r3
 80063bc:	7f3b      	ldrb	r3, [r7, #28]
 80063be:	b21b      	sxth	r3, r3
 80063c0:	4313      	orrs	r3, r2
 80063c2:	b21b      	sxth	r3, r3
 80063c4:	b29b      	uxth	r3, r3
 80063c6:	85bb      	strh	r3, [r7, #44]	@ 0x2c
		sideA_statContents[1] = (sideA_statA[3] << 8) | sideA_statA[2];			// ITMP value
 80063c8:	7ffb      	ldrb	r3, [r7, #31]
 80063ca:	b21b      	sxth	r3, r3
 80063cc:	021b      	lsls	r3, r3, #8
 80063ce:	b21a      	sxth	r2, r3
 80063d0:	7fbb      	ldrb	r3, [r7, #30]
 80063d2:	b21b      	sxth	r3, r3
 80063d4:	4313      	orrs	r3, r2
 80063d6:	b21b      	sxth	r3, r3
 80063d8:	b29b      	uxth	r3, r3
 80063da:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		sideA_statContents[2] = (sideA_statA[5] << 8) | sideA_statA[4];			// VA value
 80063dc:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80063e0:	b21b      	sxth	r3, r3
 80063e2:	021b      	lsls	r3, r3, #8
 80063e4:	b21a      	sxth	r2, r3
 80063e6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80063ea:	b21b      	sxth	r3, r3
 80063ec:	4313      	orrs	r3, r2
 80063ee:	b21b      	sxth	r3, r3
 80063f0:	b29b      	uxth	r3, r3
 80063f2:	863b      	strh	r3, [r7, #48]	@ 0x30
		sideA_statContents[3] = (sideA_statB[1] << 8) | sideA_statB[0];			// VD value
 80063f4:	7d7b      	ldrb	r3, [r7, #21]
 80063f6:	b21b      	sxth	r3, r3
 80063f8:	021b      	lsls	r3, r3, #8
 80063fa:	b21a      	sxth	r2, r3
 80063fc:	7d3b      	ldrb	r3, [r7, #20]
 80063fe:	b21b      	sxth	r3, r3
 8006400:	4313      	orrs	r3, r2
 8006402:	b21b      	sxth	r3, r3
 8006404:	b29b      	uxth	r3, r3
 8006406:	867b      	strh	r3, [r7, #50]	@ 0x32

		sideB_statContents[0] = (sideB_statA[1] << 8) | sideB_statA[0];			// SC value
 8006408:	7b7b      	ldrb	r3, [r7, #13]
 800640a:	b21b      	sxth	r3, r3
 800640c:	021b      	lsls	r3, r3, #8
 800640e:	b21a      	sxth	r2, r3
 8006410:	7b3b      	ldrb	r3, [r7, #12]
 8006412:	b21b      	sxth	r3, r3
 8006414:	4313      	orrs	r3, r2
 8006416:	b21b      	sxth	r3, r3
 8006418:	b29b      	uxth	r3, r3
 800641a:	84bb      	strh	r3, [r7, #36]	@ 0x24
		sideB_statContents[1] = (sideB_statA[3] << 8) | sideB_statA[2];			// ITMP value
 800641c:	7bfb      	ldrb	r3, [r7, #15]
 800641e:	b21b      	sxth	r3, r3
 8006420:	021b      	lsls	r3, r3, #8
 8006422:	b21a      	sxth	r2, r3
 8006424:	7bbb      	ldrb	r3, [r7, #14]
 8006426:	b21b      	sxth	r3, r3
 8006428:	4313      	orrs	r3, r2
 800642a:	b21b      	sxth	r3, r3
 800642c:	b29b      	uxth	r3, r3
 800642e:	84fb      	strh	r3, [r7, #38]	@ 0x26
		sideB_statContents[2] = (sideB_statA[5] << 8) | sideB_statA[4];			// VA value
 8006430:	7c7b      	ldrb	r3, [r7, #17]
 8006432:	b21b      	sxth	r3, r3
 8006434:	021b      	lsls	r3, r3, #8
 8006436:	b21a      	sxth	r2, r3
 8006438:	7c3b      	ldrb	r3, [r7, #16]
 800643a:	b21b      	sxth	r3, r3
 800643c:	4313      	orrs	r3, r2
 800643e:	b21b      	sxth	r3, r3
 8006440:	b29b      	uxth	r3, r3
 8006442:	853b      	strh	r3, [r7, #40]	@ 0x28
		sideB_statContents[3] = (sideB_statB[1] << 8) | sideB_statB[0];			// VD value
 8006444:	797b      	ldrb	r3, [r7, #5]
 8006446:	b21b      	sxth	r3, r3
 8006448:	021b      	lsls	r3, r3, #8
 800644a:	b21a      	sxth	r2, r3
 800644c:	793b      	ldrb	r3, [r7, #4]
 800644e:	b21b      	sxth	r3, r3
 8006450:	4313      	orrs	r3, r2
 8006452:	b21b      	sxth	r3, r3
 8006454:	b29b      	uxth	r3, r3
 8006456:	857b      	strh	r3, [r7, #42]	@ 0x2a

		uint8_t badOutputFlag = 0;
 8006458:	2300      	movs	r3, #0
 800645a:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
		for(uint8_t i = 0; i < 4; i++) {
 800645e:	2300      	movs	r3, #0
 8006460:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
 8006464:	e020      	b.n	80064a8 <stat_register_test+0x1f4>
			if(sideA_statContents[i] != 0x9555) { badOutputFlag = 1; }
 8006466:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 800646a:	005b      	lsls	r3, r3, #1
 800646c:	3340      	adds	r3, #64	@ 0x40
 800646e:	443b      	add	r3, r7
 8006470:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8006474:	f249 5255 	movw	r2, #38229	@ 0x9555
 8006478:	4293      	cmp	r3, r2
 800647a:	d002      	beq.n	8006482 <stat_register_test+0x1ce>
 800647c:	2301      	movs	r3, #1
 800647e:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d

			if(sideB_statContents[i] != 0x9555) { badOutputFlag = 1; }
 8006482:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 8006486:	005b      	lsls	r3, r3, #1
 8006488:	3340      	adds	r3, #64	@ 0x40
 800648a:	443b      	add	r3, r7
 800648c:	f833 3c1c 	ldrh.w	r3, [r3, #-28]
 8006490:	f249 5255 	movw	r2, #38229	@ 0x9555
 8006494:	4293      	cmp	r3, r2
 8006496:	d002      	beq.n	800649e <stat_register_test+0x1ea>
 8006498:	2301      	movs	r3, #1
 800649a:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
		for(uint8_t i = 0; i < 4; i++) {
 800649e:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 80064a2:	3301      	adds	r3, #1
 80064a4:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
 80064a8:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 80064ac:	2b03      	cmp	r3, #3
 80064ae:	d9da      	bls.n	8006466 <stat_register_test+0x1b2>
		}

		if(!badOutputFlag) { attempts = 13; }
 80064b0:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d103      	bne.n	80064c0 <stat_register_test+0x20c>
 80064b8:	230d      	movs	r3, #13
 80064ba:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 80064be:	e00a      	b.n	80064d6 <stat_register_test+0x222>

		else {
			attempts++;
 80064c0:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80064c4:	3301      	adds	r3, #1
 80064c6:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
			subAttempts = 0;
 80064ca:	2300      	movs	r3, #0
 80064cc:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
			wait(1);
 80064d0:	2001      	movs	r0, #1
 80064d2:	f002 feb1 	bl	8009238 <wait>
	while(attempts < ATTEMPT_LIMIT) {
 80064d6:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80064da:	2b09      	cmp	r3, #9
 80064dc:	f67f af5d 	bls.w	800639a <stat_register_test+0xe6>
		}
	}
	if(attempts != 13) { error_loop(ERROR_STATST, 0, 0); }
 80064e0:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80064e4:	2b0d      	cmp	r3, #13
 80064e6:	d004      	beq.n	80064f2 <stat_register_test+0x23e>
 80064e8:	2200      	movs	r2, #0
 80064ea:	2100      	movs	r1, #0
 80064ec:	204d      	movs	r0, #77	@ 0x4d
 80064ee:	f7fe f8b9 	bl	8004664 <error_loop>

	// Test with second variant of STATST command
	attempts = 0;
 80064f2:	2300      	movs	r3, #0
 80064f4:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	subAttempts = 0;
 80064f8:	2300      	movs	r3, #0
 80064fa:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
	while(attempts < ATTEMPT_LIMIT) {
 80064fe:	e106      	b.n	800670e <stat_register_test+0x45a>
		while(subAttempts < ATTEMPT_LIMIT) {
			CLRSTAT(SIDE_A);
 8006500:	2001      	movs	r0, #1
 8006502:	f002 f8a5 	bl	8008650 <CLRSTAT>
			CLRSTAT(SIDE_B);
 8006506:	2000      	movs	r0, #0
 8006508:	f002 f8a2 	bl	8008650 <CLRSTAT>
			wait(3);
 800650c:	2003      	movs	r0, #3
 800650e:	f002 fe93 	bl	8009238 <wait>

			STATST(0, SIDE_A);
 8006512:	2101      	movs	r1, #1
 8006514:	2000      	movs	r0, #0
 8006516:	f001 ffbe 	bl	8008496 <STATST>
			STATST(0, SIDE_B);
 800651a:	2100      	movs	r1, #0
 800651c:	2000      	movs	r0, #0
 800651e:	f001 ffba 	bl	8008496 <STATST>
			wait(3);
 8006522:	2003      	movs	r0, #3
 8006524:	f002 fe88 	bl	8009238 <wait>

			RDSTATA(sideA_statA, SIDE_A);
 8006528:	f107 031c 	add.w	r3, r7, #28
 800652c:	2101      	movs	r1, #1
 800652e:	4618      	mov	r0, r3
 8006530:	f001 fe08 	bl	8008144 <RDSTATA>
			RDSTATA(sideB_statA, SIDE_B);
 8006534:	f107 030c 	add.w	r3, r7, #12
 8006538:	2100      	movs	r1, #0
 800653a:	4618      	mov	r0, r3
 800653c:	f001 fe02 	bl	8008144 <RDSTATA>
			wait(1);
 8006540:	2001      	movs	r0, #1
 8006542:	f002 fe79 	bl	8009238 <wait>
			RDSTATB(sideA_statB, SIDE_A);
 8006546:	f107 0314 	add.w	r3, r7, #20
 800654a:	2101      	movs	r1, #1
 800654c:	4618      	mov	r0, r3
 800654e:	f001 fe1d 	bl	800818c <RDSTATB>
			RDSTATB(sideB_statB, SIDE_B);
 8006552:	1d3b      	adds	r3, r7, #4
 8006554:	2100      	movs	r1, #0
 8006556:	4618      	mov	r0, r3
 8006558:	f001 fe18 	bl	800818c <RDSTATB>

			sideA_statA_PECflag = verify_PEC15(sideA_statA);
 800655c:	f107 031c 	add.w	r3, r7, #28
 8006560:	4618      	mov	r0, r3
 8006562:	f001 fb6e 	bl	8007c42 <verify_PEC15>
 8006566:	4603      	mov	r3, r0
 8006568:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
			sideB_statA_PECflag = verify_PEC15(sideB_statA);
 800656c:	f107 030c 	add.w	r3, r7, #12
 8006570:	4618      	mov	r0, r3
 8006572:	f001 fb66 	bl	8007c42 <verify_PEC15>
 8006576:	4603      	mov	r3, r0
 8006578:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38

			sideA_statB_PECflag = verify_PEC15(sideA_statB);
 800657c:	f107 0314 	add.w	r3, r7, #20
 8006580:	4618      	mov	r0, r3
 8006582:	f001 fb5e 	bl	8007c42 <verify_PEC15>
 8006586:	4603      	mov	r3, r0
 8006588:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
			sideB_statB_PECflag = verify_PEC15(sideB_statB);
 800658c:	1d3b      	adds	r3, r7, #4
 800658e:	4618      	mov	r0, r3
 8006590:	f001 fb57 	bl	8007c42 <verify_PEC15>
 8006594:	4603      	mov	r3, r0
 8006596:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

			if(sideA_statA_PECflag == 2 &&
 800659a:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 800659e:	2b02      	cmp	r3, #2
 80065a0:	d10f      	bne.n	80065c2 <stat_register_test+0x30e>
 80065a2:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 80065a6:	2b02      	cmp	r3, #2
 80065a8:	d10b      	bne.n	80065c2 <stat_register_test+0x30e>
			   sideB_statA_PECflag == 2 &&
 80065aa:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80065ae:	2b02      	cmp	r3, #2
 80065b0:	d107      	bne.n	80065c2 <stat_register_test+0x30e>
			   sideA_statB_PECflag == 2 &&
 80065b2:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 80065b6:	2b02      	cmp	r3, #2
 80065b8:	d103      	bne.n	80065c2 <stat_register_test+0x30e>
			   sideB_statB_PECflag == 2)
			{
				subAttempts = 13;
 80065ba:	230d      	movs	r3, #13
 80065bc:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
 80065c0:	e007      	b.n	80065d2 <stat_register_test+0x31e>
			}
			else {
				subAttempts++;
 80065c2:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 80065c6:	3301      	adds	r3, #1
 80065c8:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
				wait(1);
 80065cc:	2001      	movs	r0, #1
 80065ce:	f002 fe33 	bl	8009238 <wait>
		while(subAttempts < ATTEMPT_LIMIT) {
 80065d2:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 80065d6:	2b09      	cmp	r3, #9
 80065d8:	d992      	bls.n	8006500 <stat_register_test+0x24c>
			}
		}
		if(subAttempts != 13) { error_loop(ERROR_PEC, 0, 0); }
 80065da:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 80065de:	2b0d      	cmp	r3, #13
 80065e0:	d004      	beq.n	80065ec <stat_register_test+0x338>
 80065e2:	2200      	movs	r2, #0
 80065e4:	2100      	movs	r1, #0
 80065e6:	2056      	movs	r0, #86	@ 0x56
 80065e8:	f7fe f83c 	bl	8004664 <error_loop>

		sideA_statContents[0] = (sideA_statA[1] << 8) | sideA_statA[0];			// SC value
 80065ec:	7f7b      	ldrb	r3, [r7, #29]
 80065ee:	b21b      	sxth	r3, r3
 80065f0:	021b      	lsls	r3, r3, #8
 80065f2:	b21a      	sxth	r2, r3
 80065f4:	7f3b      	ldrb	r3, [r7, #28]
 80065f6:	b21b      	sxth	r3, r3
 80065f8:	4313      	orrs	r3, r2
 80065fa:	b21b      	sxth	r3, r3
 80065fc:	b29b      	uxth	r3, r3
 80065fe:	85bb      	strh	r3, [r7, #44]	@ 0x2c
		sideA_statContents[1] = (sideA_statA[3] << 8) | sideA_statA[2];			// ITMP value
 8006600:	7ffb      	ldrb	r3, [r7, #31]
 8006602:	b21b      	sxth	r3, r3
 8006604:	021b      	lsls	r3, r3, #8
 8006606:	b21a      	sxth	r2, r3
 8006608:	7fbb      	ldrb	r3, [r7, #30]
 800660a:	b21b      	sxth	r3, r3
 800660c:	4313      	orrs	r3, r2
 800660e:	b21b      	sxth	r3, r3
 8006610:	b29b      	uxth	r3, r3
 8006612:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		sideA_statContents[2] = (sideA_statA[5] << 8) | sideA_statA[4];			// VA value
 8006614:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8006618:	b21b      	sxth	r3, r3
 800661a:	021b      	lsls	r3, r3, #8
 800661c:	b21a      	sxth	r2, r3
 800661e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8006622:	b21b      	sxth	r3, r3
 8006624:	4313      	orrs	r3, r2
 8006626:	b21b      	sxth	r3, r3
 8006628:	b29b      	uxth	r3, r3
 800662a:	863b      	strh	r3, [r7, #48]	@ 0x30
		sideA_statContents[3] = (sideA_statB[1] << 8) | sideA_statB[0];			// VD value
 800662c:	7d7b      	ldrb	r3, [r7, #21]
 800662e:	b21b      	sxth	r3, r3
 8006630:	021b      	lsls	r3, r3, #8
 8006632:	b21a      	sxth	r2, r3
 8006634:	7d3b      	ldrb	r3, [r7, #20]
 8006636:	b21b      	sxth	r3, r3
 8006638:	4313      	orrs	r3, r2
 800663a:	b21b      	sxth	r3, r3
 800663c:	b29b      	uxth	r3, r3
 800663e:	867b      	strh	r3, [r7, #50]	@ 0x32

		sideB_statContents[0] = (sideB_statA[1] << 8) | sideB_statA[0];			// SC value
 8006640:	7b7b      	ldrb	r3, [r7, #13]
 8006642:	b21b      	sxth	r3, r3
 8006644:	021b      	lsls	r3, r3, #8
 8006646:	b21a      	sxth	r2, r3
 8006648:	7b3b      	ldrb	r3, [r7, #12]
 800664a:	b21b      	sxth	r3, r3
 800664c:	4313      	orrs	r3, r2
 800664e:	b21b      	sxth	r3, r3
 8006650:	b29b      	uxth	r3, r3
 8006652:	84bb      	strh	r3, [r7, #36]	@ 0x24
		sideB_statContents[1] = (sideB_statA[3] << 8) | sideB_statA[2];			// ITMP value
 8006654:	7bfb      	ldrb	r3, [r7, #15]
 8006656:	b21b      	sxth	r3, r3
 8006658:	021b      	lsls	r3, r3, #8
 800665a:	b21a      	sxth	r2, r3
 800665c:	7bbb      	ldrb	r3, [r7, #14]
 800665e:	b21b      	sxth	r3, r3
 8006660:	4313      	orrs	r3, r2
 8006662:	b21b      	sxth	r3, r3
 8006664:	b29b      	uxth	r3, r3
 8006666:	84fb      	strh	r3, [r7, #38]	@ 0x26
		sideB_statContents[2] = (sideB_statA[5] << 8) | sideB_statA[4];			// VA value
 8006668:	7c7b      	ldrb	r3, [r7, #17]
 800666a:	b21b      	sxth	r3, r3
 800666c:	021b      	lsls	r3, r3, #8
 800666e:	b21a      	sxth	r2, r3
 8006670:	7c3b      	ldrb	r3, [r7, #16]
 8006672:	b21b      	sxth	r3, r3
 8006674:	4313      	orrs	r3, r2
 8006676:	b21b      	sxth	r3, r3
 8006678:	b29b      	uxth	r3, r3
 800667a:	853b      	strh	r3, [r7, #40]	@ 0x28
		sideB_statContents[3] = (sideB_statB[1] << 8) | sideB_statB[0];			// VD value
 800667c:	797b      	ldrb	r3, [r7, #5]
 800667e:	b21b      	sxth	r3, r3
 8006680:	021b      	lsls	r3, r3, #8
 8006682:	b21a      	sxth	r2, r3
 8006684:	793b      	ldrb	r3, [r7, #4]
 8006686:	b21b      	sxth	r3, r3
 8006688:	4313      	orrs	r3, r2
 800668a:	b21b      	sxth	r3, r3
 800668c:	b29b      	uxth	r3, r3
 800668e:	857b      	strh	r3, [r7, #42]	@ 0x2a

		uint8_t badOutputFlag = 0;
 8006690:	2300      	movs	r3, #0
 8006692:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
		for(uint8_t i = 0; i < 4; i++) {
 8006696:	2300      	movs	r3, #0
 8006698:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
 800669c:	e020      	b.n	80066e0 <stat_register_test+0x42c>
			if(sideA_statContents[i] != 0x6AAA) { badOutputFlag = 1; }
 800669e:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 80066a2:	005b      	lsls	r3, r3, #1
 80066a4:	3340      	adds	r3, #64	@ 0x40
 80066a6:	443b      	add	r3, r7
 80066a8:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 80066ac:	f646 22aa 	movw	r2, #27306	@ 0x6aaa
 80066b0:	4293      	cmp	r3, r2
 80066b2:	d002      	beq.n	80066ba <stat_register_test+0x406>
 80066b4:	2301      	movs	r3, #1
 80066b6:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b

			if(sideB_statContents[i] != 0x6AAA) { badOutputFlag = 1; }
 80066ba:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 80066be:	005b      	lsls	r3, r3, #1
 80066c0:	3340      	adds	r3, #64	@ 0x40
 80066c2:	443b      	add	r3, r7
 80066c4:	f833 3c1c 	ldrh.w	r3, [r3, #-28]
 80066c8:	f646 22aa 	movw	r2, #27306	@ 0x6aaa
 80066cc:	4293      	cmp	r3, r2
 80066ce:	d002      	beq.n	80066d6 <stat_register_test+0x422>
 80066d0:	2301      	movs	r3, #1
 80066d2:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
		for(uint8_t i = 0; i < 4; i++) {
 80066d6:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 80066da:	3301      	adds	r3, #1
 80066dc:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
 80066e0:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 80066e4:	2b03      	cmp	r3, #3
 80066e6:	d9da      	bls.n	800669e <stat_register_test+0x3ea>
		}

		if(!badOutputFlag) { attempts = 13; }
 80066e8:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d103      	bne.n	80066f8 <stat_register_test+0x444>
 80066f0:	230d      	movs	r3, #13
 80066f2:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 80066f6:	e00a      	b.n	800670e <stat_register_test+0x45a>

		else {
			attempts++;
 80066f8:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80066fc:	3301      	adds	r3, #1
 80066fe:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
			subAttempts = 0;
 8006702:	2300      	movs	r3, #0
 8006704:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
			wait(1);
 8006708:	2001      	movs	r0, #1
 800670a:	f002 fd95 	bl	8009238 <wait>
	while(attempts < ATTEMPT_LIMIT) {
 800670e:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8006712:	2b09      	cmp	r3, #9
 8006714:	f67f af5d 	bls.w	80065d2 <stat_register_test+0x31e>
		}
	}
	if(attempts != 13) { error_loop(ERROR_STATST, 0, 0); }
 8006718:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800671c:	2b0d      	cmp	r3, #13
 800671e:	d004      	beq.n	800672a <stat_register_test+0x476>
 8006720:	2200      	movs	r2, #0
 8006722:	2100      	movs	r1, #0
 8006724:	204d      	movs	r0, #77	@ 0x4d
 8006726:	f7fd ff9d 	bl	8004664 <error_loop>
}
 800672a:	bf00      	nop
 800672c:	3740      	adds	r7, #64	@ 0x40
 800672e:	46bd      	mov	sp, r7
 8006730:	bd80      	pop	{r7, pc}

08006732 <cell_register_test>:


void cell_register_test(void)
{
 8006732:	b580      	push	{r7, lr}
 8006734:	b0a0      	sub	sp, #128	@ 0x80
 8006736:	af00      	add	r7, sp, #0
	uint8_t attempts = 0;
 8006738:	2300      	movs	r3, #0
 800673a:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
	uint8_t subAttempts = 0;
 800673e:	2300      	movs	r3, #0
 8006740:	f887 307e 	strb.w	r3, [r7, #126]	@ 0x7e
	uint8_t sideB_cellVoltageB_PECflag;
	uint8_t sideB_cellVoltageC_PECflag;
	uint8_t sideB_cellVoltageD_PECflag;

	// Test with first variant of CVST command
	while(attempts < ATTEMPT_LIMIT) {
 8006744:	e223      	b.n	8006b8e <cell_register_test+0x45c>
		while(subAttempts < ATTEMPT_LIMIT) {
			CLRCELL(SIDE_A);
 8006746:	2001      	movs	r0, #1
 8006748:	f001 ff3c 	bl	80085c4 <CLRCELL>
			CLRCELL(SIDE_B);
 800674c:	2000      	movs	r0, #0
 800674e:	f001 ff39 	bl	80085c4 <CLRCELL>
			wait(3);
 8006752:	2003      	movs	r0, #3
 8006754:	f002 fd70 	bl	8009238 <wait>

			CVST(1, SIDE_A);
 8006758:	2101      	movs	r1, #1
 800675a:	2001      	movs	r0, #1
 800675c:	f001 fe3f 	bl	80083de <CVST>
			CVST(1, SIDE_B);
 8006760:	2100      	movs	r1, #0
 8006762:	2001      	movs	r0, #1
 8006764:	f001 fe3b 	bl	80083de <CVST>
			wait(3);
 8006768:	2003      	movs	r0, #3
 800676a:	f002 fd65 	bl	8009238 <wait>

			RDCVA(sideA_cellVoltageA, SIDE_A);
 800676e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8006772:	2101      	movs	r1, #1
 8006774:	4618      	mov	r0, r3
 8006776:	f001 fc31 	bl	8007fdc <RDCVA>
			RDCVA(sideB_cellVoltageA, SIDE_B);
 800677a:	f107 0318 	add.w	r3, r7, #24
 800677e:	2100      	movs	r1, #0
 8006780:	4618      	mov	r0, r3
 8006782:	f001 fc2b 	bl	8007fdc <RDCVA>
			wait(1);
 8006786:	2001      	movs	r0, #1
 8006788:	f002 fd56 	bl	8009238 <wait>
			RDCVB(sideA_cellVoltageB, SIDE_A);
 800678c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8006790:	2101      	movs	r1, #1
 8006792:	4618      	mov	r0, r3
 8006794:	f001 fc46 	bl	8008024 <RDCVB>
			RDCVB(sideB_cellVoltageB, SIDE_B);
 8006798:	f107 0310 	add.w	r3, r7, #16
 800679c:	2100      	movs	r1, #0
 800679e:	4618      	mov	r0, r3
 80067a0:	f001 fc40 	bl	8008024 <RDCVB>
			wait(1);
 80067a4:	2001      	movs	r0, #1
 80067a6:	f002 fd47 	bl	8009238 <wait>
			RDCVC(sideA_cellVoltageC, SIDE_A);
 80067aa:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80067ae:	2101      	movs	r1, #1
 80067b0:	4618      	mov	r0, r3
 80067b2:	f001 fc5b 	bl	800806c <RDCVC>
			RDCVC(sideB_cellVoltageC, SIDE_B);
 80067b6:	f107 0308 	add.w	r3, r7, #8
 80067ba:	2100      	movs	r1, #0
 80067bc:	4618      	mov	r0, r3
 80067be:	f001 fc55 	bl	800806c <RDCVC>
			wait(1);
 80067c2:	2001      	movs	r0, #1
 80067c4:	f002 fd38 	bl	8009238 <wait>
			RDCVD(sideA_cellVoltageD, SIDE_A);
 80067c8:	f107 0320 	add.w	r3, r7, #32
 80067cc:	2101      	movs	r1, #1
 80067ce:	4618      	mov	r0, r3
 80067d0:	f001 fc70 	bl	80080b4 <RDCVD>
			RDCVD(sideB_cellVoltageD, SIDE_B);
 80067d4:	463b      	mov	r3, r7
 80067d6:	2100      	movs	r1, #0
 80067d8:	4618      	mov	r0, r3
 80067da:	f001 fc6b 	bl	80080b4 <RDCVD>

			sideA_cellVoltageA_PECflag = verify_PEC15(sideA_cellVoltageA);
 80067de:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80067e2:	4618      	mov	r0, r3
 80067e4:	f001 fa2d 	bl	8007c42 <verify_PEC15>
 80067e8:	4603      	mov	r3, r0
 80067ea:	f887 3079 	strb.w	r3, [r7, #121]	@ 0x79
			sideA_cellVoltageB_PECflag = verify_PEC15(sideA_cellVoltageB);
 80067ee:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80067f2:	4618      	mov	r0, r3
 80067f4:	f001 fa25 	bl	8007c42 <verify_PEC15>
 80067f8:	4603      	mov	r3, r0
 80067fa:	f887 3078 	strb.w	r3, [r7, #120]	@ 0x78
			sideA_cellVoltageC_PECflag = verify_PEC15(sideA_cellVoltageC);
 80067fe:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8006802:	4618      	mov	r0, r3
 8006804:	f001 fa1d 	bl	8007c42 <verify_PEC15>
 8006808:	4603      	mov	r3, r0
 800680a:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
			sideA_cellVoltageD_PECflag = verify_PEC15(sideA_cellVoltageD);
 800680e:	f107 0320 	add.w	r3, r7, #32
 8006812:	4618      	mov	r0, r3
 8006814:	f001 fa15 	bl	8007c42 <verify_PEC15>
 8006818:	4603      	mov	r3, r0
 800681a:	f887 3076 	strb.w	r3, [r7, #118]	@ 0x76

			sideB_cellVoltageA_PECflag = verify_PEC15(sideB_cellVoltageA);
 800681e:	f107 0318 	add.w	r3, r7, #24
 8006822:	4618      	mov	r0, r3
 8006824:	f001 fa0d 	bl	8007c42 <verify_PEC15>
 8006828:	4603      	mov	r3, r0
 800682a:	f887 3075 	strb.w	r3, [r7, #117]	@ 0x75
			sideB_cellVoltageB_PECflag = verify_PEC15(sideB_cellVoltageB);
 800682e:	f107 0310 	add.w	r3, r7, #16
 8006832:	4618      	mov	r0, r3
 8006834:	f001 fa05 	bl	8007c42 <verify_PEC15>
 8006838:	4603      	mov	r3, r0
 800683a:	f887 3074 	strb.w	r3, [r7, #116]	@ 0x74
			sideB_cellVoltageC_PECflag = verify_PEC15(sideB_cellVoltageC);
 800683e:	f107 0308 	add.w	r3, r7, #8
 8006842:	4618      	mov	r0, r3
 8006844:	f001 f9fd 	bl	8007c42 <verify_PEC15>
 8006848:	4603      	mov	r3, r0
 800684a:	f887 3073 	strb.w	r3, [r7, #115]	@ 0x73
			sideB_cellVoltageD_PECflag = verify_PEC15(sideB_cellVoltageD);
 800684e:	463b      	mov	r3, r7
 8006850:	4618      	mov	r0, r3
 8006852:	f001 f9f6 	bl	8007c42 <verify_PEC15>
 8006856:	4603      	mov	r3, r0
 8006858:	f887 3072 	strb.w	r3, [r7, #114]	@ 0x72

			if(sideA_cellVoltageA_PECflag == 2 &&
 800685c:	f897 3079 	ldrb.w	r3, [r7, #121]	@ 0x79
 8006860:	2b02      	cmp	r3, #2
 8006862:	d11f      	bne.n	80068a4 <cell_register_test+0x172>
 8006864:	f897 3078 	ldrb.w	r3, [r7, #120]	@ 0x78
 8006868:	2b02      	cmp	r3, #2
 800686a:	d11b      	bne.n	80068a4 <cell_register_test+0x172>
			   sideA_cellVoltageB_PECflag == 2 &&
 800686c:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8006870:	2b02      	cmp	r3, #2
 8006872:	d117      	bne.n	80068a4 <cell_register_test+0x172>
			   sideA_cellVoltageC_PECflag == 2 &&
 8006874:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 8006878:	2b02      	cmp	r3, #2
 800687a:	d113      	bne.n	80068a4 <cell_register_test+0x172>
			   sideA_cellVoltageD_PECflag == 2 &&
 800687c:	f897 3075 	ldrb.w	r3, [r7, #117]	@ 0x75
 8006880:	2b02      	cmp	r3, #2
 8006882:	d10f      	bne.n	80068a4 <cell_register_test+0x172>
			   sideB_cellVoltageA_PECflag == 2 &&
 8006884:	f897 3074 	ldrb.w	r3, [r7, #116]	@ 0x74
 8006888:	2b02      	cmp	r3, #2
 800688a:	d10b      	bne.n	80068a4 <cell_register_test+0x172>
			   sideB_cellVoltageB_PECflag == 2 &&
 800688c:	f897 3073 	ldrb.w	r3, [r7, #115]	@ 0x73
 8006890:	2b02      	cmp	r3, #2
 8006892:	d107      	bne.n	80068a4 <cell_register_test+0x172>
			   sideB_cellVoltageC_PECflag == 2 &&
 8006894:	f897 3072 	ldrb.w	r3, [r7, #114]	@ 0x72
 8006898:	2b02      	cmp	r3, #2
 800689a:	d103      	bne.n	80068a4 <cell_register_test+0x172>
			   sideB_cellVoltageD_PECflag == 2)
			{
				subAttempts = 13;
 800689c:	230d      	movs	r3, #13
 800689e:	f887 307e 	strb.w	r3, [r7, #126]	@ 0x7e
 80068a2:	e007      	b.n	80068b4 <cell_register_test+0x182>
			}
			else {
				subAttempts++;
 80068a4:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 80068a8:	3301      	adds	r3, #1
 80068aa:	f887 307e 	strb.w	r3, [r7, #126]	@ 0x7e
				wait(1);
 80068ae:	2001      	movs	r0, #1
 80068b0:	f002 fcc2 	bl	8009238 <wait>
		while(subAttempts < ATTEMPT_LIMIT) {
 80068b4:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 80068b8:	2b09      	cmp	r3, #9
 80068ba:	f67f af44 	bls.w	8006746 <cell_register_test+0x14>
			}
		}
		if(subAttempts != 13) { error_loop(ERROR_PEC, 0, 0); }
 80068be:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 80068c2:	2b0d      	cmp	r3, #13
 80068c4:	d004      	beq.n	80068d0 <cell_register_test+0x19e>
 80068c6:	2200      	movs	r2, #0
 80068c8:	2100      	movs	r1, #0
 80068ca:	2056      	movs	r0, #86	@ 0x56
 80068cc:	f7fd feca 	bl	8004664 <error_loop>

		sideA_cellVoltages[0] = (sideA_cellVoltageA[1] << 8) | sideA_cellVoltageA[0];
 80068d0:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 80068d4:	b21b      	sxth	r3, r3
 80068d6:	021b      	lsls	r3, r3, #8
 80068d8:	b21a      	sxth	r2, r3
 80068da:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 80068de:	b21b      	sxth	r3, r3
 80068e0:	4313      	orrs	r3, r2
 80068e2:	b21b      	sxth	r3, r3
 80068e4:	b29b      	uxth	r3, r3
 80068e6:	f8a7 3058 	strh.w	r3, [r7, #88]	@ 0x58
		sideA_cellVoltages[1] = (sideA_cellVoltageA[3] << 8) | sideA_cellVoltageA[2];
 80068ea:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 80068ee:	b21b      	sxth	r3, r3
 80068f0:	021b      	lsls	r3, r3, #8
 80068f2:	b21a      	sxth	r2, r3
 80068f4:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 80068f8:	b21b      	sxth	r3, r3
 80068fa:	4313      	orrs	r3, r2
 80068fc:	b21b      	sxth	r3, r3
 80068fe:	b29b      	uxth	r3, r3
 8006900:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
		sideA_cellVoltages[2] = (sideA_cellVoltageA[5] << 8) | sideA_cellVoltageA[4];
 8006904:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 8006908:	b21b      	sxth	r3, r3
 800690a:	021b      	lsls	r3, r3, #8
 800690c:	b21a      	sxth	r2, r3
 800690e:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 8006912:	b21b      	sxth	r3, r3
 8006914:	4313      	orrs	r3, r2
 8006916:	b21b      	sxth	r3, r3
 8006918:	b29b      	uxth	r3, r3
 800691a:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c
		sideA_cellVoltages[3] = (sideA_cellVoltageB[1] << 8) | sideA_cellVoltageB[0];
 800691e:	f897 3031 	ldrb.w	r3, [r7, #49]	@ 0x31
 8006922:	b21b      	sxth	r3, r3
 8006924:	021b      	lsls	r3, r3, #8
 8006926:	b21a      	sxth	r2, r3
 8006928:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 800692c:	b21b      	sxth	r3, r3
 800692e:	4313      	orrs	r3, r2
 8006930:	b21b      	sxth	r3, r3
 8006932:	b29b      	uxth	r3, r3
 8006934:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
		sideA_cellVoltages[4] = (sideA_cellVoltageB[3] << 8) | sideA_cellVoltageB[2];
 8006938:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800693c:	b21b      	sxth	r3, r3
 800693e:	021b      	lsls	r3, r3, #8
 8006940:	b21a      	sxth	r2, r3
 8006942:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8006946:	b21b      	sxth	r3, r3
 8006948:	4313      	orrs	r3, r2
 800694a:	b21b      	sxth	r3, r3
 800694c:	b29b      	uxth	r3, r3
 800694e:	f8a7 3060 	strh.w	r3, [r7, #96]	@ 0x60
		sideA_cellVoltages[5] = (sideA_cellVoltageB[5] << 8) | sideA_cellVoltageB[4];
 8006952:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8006956:	b21b      	sxth	r3, r3
 8006958:	021b      	lsls	r3, r3, #8
 800695a:	b21a      	sxth	r2, r3
 800695c:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8006960:	b21b      	sxth	r3, r3
 8006962:	4313      	orrs	r3, r2
 8006964:	b21b      	sxth	r3, r3
 8006966:	b29b      	uxth	r3, r3
 8006968:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
		sideA_cellVoltages[6] = (sideA_cellVoltageC[1] << 8) | sideA_cellVoltageC[0];
 800696c:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8006970:	b21b      	sxth	r3, r3
 8006972:	021b      	lsls	r3, r3, #8
 8006974:	b21a      	sxth	r2, r3
 8006976:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800697a:	b21b      	sxth	r3, r3
 800697c:	4313      	orrs	r3, r2
 800697e:	b21b      	sxth	r3, r3
 8006980:	b29b      	uxth	r3, r3
 8006982:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
		sideA_cellVoltages[7] = (sideA_cellVoltageC[3] << 8) | sideA_cellVoltageC[2];
 8006986:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800698a:	b21b      	sxth	r3, r3
 800698c:	021b      	lsls	r3, r3, #8
 800698e:	b21a      	sxth	r2, r3
 8006990:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8006994:	b21b      	sxth	r3, r3
 8006996:	4313      	orrs	r3, r2
 8006998:	b21b      	sxth	r3, r3
 800699a:	b29b      	uxth	r3, r3
 800699c:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
		sideA_cellVoltages[8] = (sideA_cellVoltageC[5] << 8) | sideA_cellVoltageC[4];
 80069a0:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 80069a4:	b21b      	sxth	r3, r3
 80069a6:	021b      	lsls	r3, r3, #8
 80069a8:	b21a      	sxth	r2, r3
 80069aa:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80069ae:	b21b      	sxth	r3, r3
 80069b0:	4313      	orrs	r3, r2
 80069b2:	b21b      	sxth	r3, r3
 80069b4:	b29b      	uxth	r3, r3
 80069b6:	f8a7 3068 	strh.w	r3, [r7, #104]	@ 0x68
		sideA_cellVoltages[9] = (sideA_cellVoltageD[1] << 8) | sideA_cellVoltageD[0];
 80069ba:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80069be:	b21b      	sxth	r3, r3
 80069c0:	021b      	lsls	r3, r3, #8
 80069c2:	b21a      	sxth	r2, r3
 80069c4:	f897 3020 	ldrb.w	r3, [r7, #32]
 80069c8:	b21b      	sxth	r3, r3
 80069ca:	4313      	orrs	r3, r2
 80069cc:	b21b      	sxth	r3, r3
 80069ce:	b29b      	uxth	r3, r3
 80069d0:	f8a7 306a 	strh.w	r3, [r7, #106]	@ 0x6a
		sideA_cellVoltages[10] = (sideA_cellVoltageD[3] << 8) | sideA_cellVoltageD[2];
 80069d4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80069d8:	b21b      	sxth	r3, r3
 80069da:	021b      	lsls	r3, r3, #8
 80069dc:	b21a      	sxth	r2, r3
 80069de:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 80069e2:	b21b      	sxth	r3, r3
 80069e4:	4313      	orrs	r3, r2
 80069e6:	b21b      	sxth	r3, r3
 80069e8:	b29b      	uxth	r3, r3
 80069ea:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
		sideA_cellVoltages[11] = (sideA_cellVoltageD[5] << 8) | sideA_cellVoltageD[4];
 80069ee:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80069f2:	b21b      	sxth	r3, r3
 80069f4:	021b      	lsls	r3, r3, #8
 80069f6:	b21a      	sxth	r2, r3
 80069f8:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80069fc:	b21b      	sxth	r3, r3
 80069fe:	4313      	orrs	r3, r2
 8006a00:	b21b      	sxth	r3, r3
 8006a02:	b29b      	uxth	r3, r3
 8006a04:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e

		sideB_cellVoltages[0] = (sideB_cellVoltageA[1] << 8) | sideB_cellVoltageA[0];
 8006a08:	7e7b      	ldrb	r3, [r7, #25]
 8006a0a:	b21b      	sxth	r3, r3
 8006a0c:	021b      	lsls	r3, r3, #8
 8006a0e:	b21a      	sxth	r2, r3
 8006a10:	7e3b      	ldrb	r3, [r7, #24]
 8006a12:	b21b      	sxth	r3, r3
 8006a14:	4313      	orrs	r3, r2
 8006a16:	b21b      	sxth	r3, r3
 8006a18:	b29b      	uxth	r3, r3
 8006a1a:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
		sideB_cellVoltages[1] = (sideB_cellVoltageA[3] << 8) | sideB_cellVoltageA[2];
 8006a1e:	7efb      	ldrb	r3, [r7, #27]
 8006a20:	b21b      	sxth	r3, r3
 8006a22:	021b      	lsls	r3, r3, #8
 8006a24:	b21a      	sxth	r2, r3
 8006a26:	7ebb      	ldrb	r3, [r7, #26]
 8006a28:	b21b      	sxth	r3, r3
 8006a2a:	4313      	orrs	r3, r2
 8006a2c:	b21b      	sxth	r3, r3
 8006a2e:	b29b      	uxth	r3, r3
 8006a30:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
		sideB_cellVoltages[2] = (sideB_cellVoltageA[5] << 8) | sideB_cellVoltageA[4];
 8006a34:	7f7b      	ldrb	r3, [r7, #29]
 8006a36:	b21b      	sxth	r3, r3
 8006a38:	021b      	lsls	r3, r3, #8
 8006a3a:	b21a      	sxth	r2, r3
 8006a3c:	7f3b      	ldrb	r3, [r7, #28]
 8006a3e:	b21b      	sxth	r3, r3
 8006a40:	4313      	orrs	r3, r2
 8006a42:	b21b      	sxth	r3, r3
 8006a44:	b29b      	uxth	r3, r3
 8006a46:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
		sideB_cellVoltages[3] = (sideB_cellVoltageB[1] << 8) | sideB_cellVoltageB[0];
 8006a4a:	7c7b      	ldrb	r3, [r7, #17]
 8006a4c:	b21b      	sxth	r3, r3
 8006a4e:	021b      	lsls	r3, r3, #8
 8006a50:	b21a      	sxth	r2, r3
 8006a52:	7c3b      	ldrb	r3, [r7, #16]
 8006a54:	b21b      	sxth	r3, r3
 8006a56:	4313      	orrs	r3, r2
 8006a58:	b21b      	sxth	r3, r3
 8006a5a:	b29b      	uxth	r3, r3
 8006a5c:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
		sideB_cellVoltages[4] = (sideB_cellVoltageB[3] << 8) | sideB_cellVoltageB[2];
 8006a60:	7cfb      	ldrb	r3, [r7, #19]
 8006a62:	b21b      	sxth	r3, r3
 8006a64:	021b      	lsls	r3, r3, #8
 8006a66:	b21a      	sxth	r2, r3
 8006a68:	7cbb      	ldrb	r3, [r7, #18]
 8006a6a:	b21b      	sxth	r3, r3
 8006a6c:	4313      	orrs	r3, r2
 8006a6e:	b21b      	sxth	r3, r3
 8006a70:	b29b      	uxth	r3, r3
 8006a72:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
		sideB_cellVoltages[5] = (sideB_cellVoltageB[5] << 8) | sideB_cellVoltageB[4];
 8006a76:	7d7b      	ldrb	r3, [r7, #21]
 8006a78:	b21b      	sxth	r3, r3
 8006a7a:	021b      	lsls	r3, r3, #8
 8006a7c:	b21a      	sxth	r2, r3
 8006a7e:	7d3b      	ldrb	r3, [r7, #20]
 8006a80:	b21b      	sxth	r3, r3
 8006a82:	4313      	orrs	r3, r2
 8006a84:	b21b      	sxth	r3, r3
 8006a86:	b29b      	uxth	r3, r3
 8006a88:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
		sideB_cellVoltages[6] = (sideB_cellVoltageC[1] << 8) | sideB_cellVoltageC[0];
 8006a8c:	7a7b      	ldrb	r3, [r7, #9]
 8006a8e:	b21b      	sxth	r3, r3
 8006a90:	021b      	lsls	r3, r3, #8
 8006a92:	b21a      	sxth	r2, r3
 8006a94:	7a3b      	ldrb	r3, [r7, #8]
 8006a96:	b21b      	sxth	r3, r3
 8006a98:	4313      	orrs	r3, r2
 8006a9a:	b21b      	sxth	r3, r3
 8006a9c:	b29b      	uxth	r3, r3
 8006a9e:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
		sideB_cellVoltages[7] = (sideB_cellVoltageC[3] << 8) | sideB_cellVoltageC[2];
 8006aa2:	7afb      	ldrb	r3, [r7, #11]
 8006aa4:	b21b      	sxth	r3, r3
 8006aa6:	021b      	lsls	r3, r3, #8
 8006aa8:	b21a      	sxth	r2, r3
 8006aaa:	7abb      	ldrb	r3, [r7, #10]
 8006aac:	b21b      	sxth	r3, r3
 8006aae:	4313      	orrs	r3, r2
 8006ab0:	b21b      	sxth	r3, r3
 8006ab2:	b29b      	uxth	r3, r3
 8006ab4:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
		sideB_cellVoltages[8] = (sideB_cellVoltageC[5] << 8) | sideB_cellVoltageC[4];
 8006ab8:	7b7b      	ldrb	r3, [r7, #13]
 8006aba:	b21b      	sxth	r3, r3
 8006abc:	021b      	lsls	r3, r3, #8
 8006abe:	b21a      	sxth	r2, r3
 8006ac0:	7b3b      	ldrb	r3, [r7, #12]
 8006ac2:	b21b      	sxth	r3, r3
 8006ac4:	4313      	orrs	r3, r2
 8006ac6:	b21b      	sxth	r3, r3
 8006ac8:	b29b      	uxth	r3, r3
 8006aca:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
		sideB_cellVoltages[9] = (sideB_cellVoltageD[1] << 8) | sideB_cellVoltageD[0];
 8006ace:	787b      	ldrb	r3, [r7, #1]
 8006ad0:	b21b      	sxth	r3, r3
 8006ad2:	021b      	lsls	r3, r3, #8
 8006ad4:	b21a      	sxth	r2, r3
 8006ad6:	783b      	ldrb	r3, [r7, #0]
 8006ad8:	b21b      	sxth	r3, r3
 8006ada:	4313      	orrs	r3, r2
 8006adc:	b21b      	sxth	r3, r3
 8006ade:	b29b      	uxth	r3, r3
 8006ae0:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
		sideB_cellVoltages[10] = (sideB_cellVoltageD[3] << 8) | sideB_cellVoltageD[2];
 8006ae4:	78fb      	ldrb	r3, [r7, #3]
 8006ae6:	b21b      	sxth	r3, r3
 8006ae8:	021b      	lsls	r3, r3, #8
 8006aea:	b21a      	sxth	r2, r3
 8006aec:	78bb      	ldrb	r3, [r7, #2]
 8006aee:	b21b      	sxth	r3, r3
 8006af0:	4313      	orrs	r3, r2
 8006af2:	b21b      	sxth	r3, r3
 8006af4:	b29b      	uxth	r3, r3
 8006af6:	f8a7 3054 	strh.w	r3, [r7, #84]	@ 0x54
		sideB_cellVoltages[11] = (sideB_cellVoltageD[5] << 8) | sideB_cellVoltageD[4];
 8006afa:	797b      	ldrb	r3, [r7, #5]
 8006afc:	b21b      	sxth	r3, r3
 8006afe:	021b      	lsls	r3, r3, #8
 8006b00:	b21a      	sxth	r2, r3
 8006b02:	793b      	ldrb	r3, [r7, #4]
 8006b04:	b21b      	sxth	r3, r3
 8006b06:	4313      	orrs	r3, r2
 8006b08:	b21b      	sxth	r3, r3
 8006b0a:	b29b      	uxth	r3, r3
 8006b0c:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56

		uint8_t badOutputFlag = 0;
 8006b10:	2300      	movs	r3, #0
 8006b12:	f887 307d 	strb.w	r3, [r7, #125]	@ 0x7d
		for(uint8_t i = 0; i < 12; i++) {
 8006b16:	2300      	movs	r3, #0
 8006b18:	f887 307c 	strb.w	r3, [r7, #124]	@ 0x7c
 8006b1c:	e020      	b.n	8006b60 <cell_register_test+0x42e>
			if(sideA_cellVoltages[i] != 0x9555) { badOutputFlag = 1; }
 8006b1e:	f897 307c 	ldrb.w	r3, [r7, #124]	@ 0x7c
 8006b22:	005b      	lsls	r3, r3, #1
 8006b24:	3380      	adds	r3, #128	@ 0x80
 8006b26:	443b      	add	r3, r7
 8006b28:	f833 3c28 	ldrh.w	r3, [r3, #-40]
 8006b2c:	f249 5255 	movw	r2, #38229	@ 0x9555
 8006b30:	4293      	cmp	r3, r2
 8006b32:	d002      	beq.n	8006b3a <cell_register_test+0x408>
 8006b34:	2301      	movs	r3, #1
 8006b36:	f887 307d 	strb.w	r3, [r7, #125]	@ 0x7d

			if(sideB_cellVoltages[i] != 0x9555) { badOutputFlag = 1; }
 8006b3a:	f897 307c 	ldrb.w	r3, [r7, #124]	@ 0x7c
 8006b3e:	005b      	lsls	r3, r3, #1
 8006b40:	3380      	adds	r3, #128	@ 0x80
 8006b42:	443b      	add	r3, r7
 8006b44:	f833 3c40 	ldrh.w	r3, [r3, #-64]
 8006b48:	f249 5255 	movw	r2, #38229	@ 0x9555
 8006b4c:	4293      	cmp	r3, r2
 8006b4e:	d002      	beq.n	8006b56 <cell_register_test+0x424>
 8006b50:	2301      	movs	r3, #1
 8006b52:	f887 307d 	strb.w	r3, [r7, #125]	@ 0x7d
		for(uint8_t i = 0; i < 12; i++) {
 8006b56:	f897 307c 	ldrb.w	r3, [r7, #124]	@ 0x7c
 8006b5a:	3301      	adds	r3, #1
 8006b5c:	f887 307c 	strb.w	r3, [r7, #124]	@ 0x7c
 8006b60:	f897 307c 	ldrb.w	r3, [r7, #124]	@ 0x7c
 8006b64:	2b0b      	cmp	r3, #11
 8006b66:	d9da      	bls.n	8006b1e <cell_register_test+0x3ec>
		}

		if(!badOutputFlag) { attempts = 13; }
 8006b68:	f897 307d 	ldrb.w	r3, [r7, #125]	@ 0x7d
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d103      	bne.n	8006b78 <cell_register_test+0x446>
 8006b70:	230d      	movs	r3, #13
 8006b72:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8006b76:	e00a      	b.n	8006b8e <cell_register_test+0x45c>

		else {
			attempts++;
 8006b78:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8006b7c:	3301      	adds	r3, #1
 8006b7e:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
			subAttempts = 0;
 8006b82:	2300      	movs	r3, #0
 8006b84:	f887 307e 	strb.w	r3, [r7, #126]	@ 0x7e
			wait(1);
 8006b88:	2001      	movs	r0, #1
 8006b8a:	f002 fb55 	bl	8009238 <wait>
	while(attempts < ATTEMPT_LIMIT) {
 8006b8e:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8006b92:	2b09      	cmp	r3, #9
 8006b94:	f67f ae8e 	bls.w	80068b4 <cell_register_test+0x182>
		}
	}
	if(attempts != 13) { error_loop(ERROR_CVST, 0, 0); }
 8006b98:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8006b9c:	2b0d      	cmp	r3, #13
 8006b9e:	d004      	beq.n	8006baa <cell_register_test+0x478>
 8006ba0:	2200      	movs	r2, #0
 8006ba2:	2100      	movs	r1, #0
 8006ba4:	204c      	movs	r0, #76	@ 0x4c
 8006ba6:	f7fd fd5d 	bl	8004664 <error_loop>

	// Test with second variant of CVST command
	attempts = 0;
 8006baa:	2300      	movs	r3, #0
 8006bac:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
	subAttempts = 0;
 8006bb0:	2300      	movs	r3, #0
 8006bb2:	f887 307e 	strb.w	r3, [r7, #126]	@ 0x7e
	while(attempts < ATTEMPT_LIMIT) {
 8006bb6:	e223      	b.n	8007000 <cell_register_test+0x8ce>
		while(subAttempts < ATTEMPT_LIMIT) {
			CLRCELL(SIDE_A);
 8006bb8:	2001      	movs	r0, #1
 8006bba:	f001 fd03 	bl	80085c4 <CLRCELL>
			CLRCELL(SIDE_B);
 8006bbe:	2000      	movs	r0, #0
 8006bc0:	f001 fd00 	bl	80085c4 <CLRCELL>
			wait(3);
 8006bc4:	2003      	movs	r0, #3
 8006bc6:	f002 fb37 	bl	8009238 <wait>

			CVST(0, SIDE_A);
 8006bca:	2101      	movs	r1, #1
 8006bcc:	2000      	movs	r0, #0
 8006bce:	f001 fc06 	bl	80083de <CVST>
			CVST(0, SIDE_B);
 8006bd2:	2100      	movs	r1, #0
 8006bd4:	2000      	movs	r0, #0
 8006bd6:	f001 fc02 	bl	80083de <CVST>
			wait(3);
 8006bda:	2003      	movs	r0, #3
 8006bdc:	f002 fb2c 	bl	8009238 <wait>

			RDCVA(sideA_cellVoltageA, SIDE_A);
 8006be0:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8006be4:	2101      	movs	r1, #1
 8006be6:	4618      	mov	r0, r3
 8006be8:	f001 f9f8 	bl	8007fdc <RDCVA>
			RDCVA(sideB_cellVoltageA, SIDE_B);
 8006bec:	f107 0318 	add.w	r3, r7, #24
 8006bf0:	2100      	movs	r1, #0
 8006bf2:	4618      	mov	r0, r3
 8006bf4:	f001 f9f2 	bl	8007fdc <RDCVA>
			wait(1);
 8006bf8:	2001      	movs	r0, #1
 8006bfa:	f002 fb1d 	bl	8009238 <wait>
			RDCVB(sideA_cellVoltageB, SIDE_A);
 8006bfe:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8006c02:	2101      	movs	r1, #1
 8006c04:	4618      	mov	r0, r3
 8006c06:	f001 fa0d 	bl	8008024 <RDCVB>
			RDCVB(sideB_cellVoltageB, SIDE_B);
 8006c0a:	f107 0310 	add.w	r3, r7, #16
 8006c0e:	2100      	movs	r1, #0
 8006c10:	4618      	mov	r0, r3
 8006c12:	f001 fa07 	bl	8008024 <RDCVB>
			wait(1);
 8006c16:	2001      	movs	r0, #1
 8006c18:	f002 fb0e 	bl	8009238 <wait>
			RDCVC(sideA_cellVoltageC, SIDE_A);
 8006c1c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8006c20:	2101      	movs	r1, #1
 8006c22:	4618      	mov	r0, r3
 8006c24:	f001 fa22 	bl	800806c <RDCVC>
			RDCVC(sideB_cellVoltageC, SIDE_B);
 8006c28:	f107 0308 	add.w	r3, r7, #8
 8006c2c:	2100      	movs	r1, #0
 8006c2e:	4618      	mov	r0, r3
 8006c30:	f001 fa1c 	bl	800806c <RDCVC>
			wait(1);
 8006c34:	2001      	movs	r0, #1
 8006c36:	f002 faff 	bl	8009238 <wait>
			RDCVD(sideA_cellVoltageD, SIDE_A);
 8006c3a:	f107 0320 	add.w	r3, r7, #32
 8006c3e:	2101      	movs	r1, #1
 8006c40:	4618      	mov	r0, r3
 8006c42:	f001 fa37 	bl	80080b4 <RDCVD>
			RDCVD(sideB_cellVoltageD, SIDE_B);
 8006c46:	463b      	mov	r3, r7
 8006c48:	2100      	movs	r1, #0
 8006c4a:	4618      	mov	r0, r3
 8006c4c:	f001 fa32 	bl	80080b4 <RDCVD>

			sideA_cellVoltageA_PECflag = verify_PEC15(sideA_cellVoltageA);
 8006c50:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8006c54:	4618      	mov	r0, r3
 8006c56:	f000 fff4 	bl	8007c42 <verify_PEC15>
 8006c5a:	4603      	mov	r3, r0
 8006c5c:	f887 3079 	strb.w	r3, [r7, #121]	@ 0x79
			sideA_cellVoltageB_PECflag = verify_PEC15(sideA_cellVoltageB);
 8006c60:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8006c64:	4618      	mov	r0, r3
 8006c66:	f000 ffec 	bl	8007c42 <verify_PEC15>
 8006c6a:	4603      	mov	r3, r0
 8006c6c:	f887 3078 	strb.w	r3, [r7, #120]	@ 0x78
			sideA_cellVoltageC_PECflag = verify_PEC15(sideA_cellVoltageC);
 8006c70:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8006c74:	4618      	mov	r0, r3
 8006c76:	f000 ffe4 	bl	8007c42 <verify_PEC15>
 8006c7a:	4603      	mov	r3, r0
 8006c7c:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
			sideA_cellVoltageD_PECflag = verify_PEC15(sideA_cellVoltageD);
 8006c80:	f107 0320 	add.w	r3, r7, #32
 8006c84:	4618      	mov	r0, r3
 8006c86:	f000 ffdc 	bl	8007c42 <verify_PEC15>
 8006c8a:	4603      	mov	r3, r0
 8006c8c:	f887 3076 	strb.w	r3, [r7, #118]	@ 0x76

			sideB_cellVoltageA_PECflag = verify_PEC15(sideB_cellVoltageA);
 8006c90:	f107 0318 	add.w	r3, r7, #24
 8006c94:	4618      	mov	r0, r3
 8006c96:	f000 ffd4 	bl	8007c42 <verify_PEC15>
 8006c9a:	4603      	mov	r3, r0
 8006c9c:	f887 3075 	strb.w	r3, [r7, #117]	@ 0x75
			sideB_cellVoltageB_PECflag = verify_PEC15(sideB_cellVoltageB);
 8006ca0:	f107 0310 	add.w	r3, r7, #16
 8006ca4:	4618      	mov	r0, r3
 8006ca6:	f000 ffcc 	bl	8007c42 <verify_PEC15>
 8006caa:	4603      	mov	r3, r0
 8006cac:	f887 3074 	strb.w	r3, [r7, #116]	@ 0x74
			sideB_cellVoltageC_PECflag = verify_PEC15(sideB_cellVoltageC);
 8006cb0:	f107 0308 	add.w	r3, r7, #8
 8006cb4:	4618      	mov	r0, r3
 8006cb6:	f000 ffc4 	bl	8007c42 <verify_PEC15>
 8006cba:	4603      	mov	r3, r0
 8006cbc:	f887 3073 	strb.w	r3, [r7, #115]	@ 0x73
			sideB_cellVoltageD_PECflag = verify_PEC15(sideB_cellVoltageD);
 8006cc0:	463b      	mov	r3, r7
 8006cc2:	4618      	mov	r0, r3
 8006cc4:	f000 ffbd 	bl	8007c42 <verify_PEC15>
 8006cc8:	4603      	mov	r3, r0
 8006cca:	f887 3072 	strb.w	r3, [r7, #114]	@ 0x72

			if(sideA_cellVoltageA_PECflag == 2 &&
 8006cce:	f897 3079 	ldrb.w	r3, [r7, #121]	@ 0x79
 8006cd2:	2b02      	cmp	r3, #2
 8006cd4:	d11f      	bne.n	8006d16 <cell_register_test+0x5e4>
 8006cd6:	f897 3078 	ldrb.w	r3, [r7, #120]	@ 0x78
 8006cda:	2b02      	cmp	r3, #2
 8006cdc:	d11b      	bne.n	8006d16 <cell_register_test+0x5e4>
			   sideA_cellVoltageB_PECflag == 2 &&
 8006cde:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8006ce2:	2b02      	cmp	r3, #2
 8006ce4:	d117      	bne.n	8006d16 <cell_register_test+0x5e4>
			   sideA_cellVoltageC_PECflag == 2 &&
 8006ce6:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 8006cea:	2b02      	cmp	r3, #2
 8006cec:	d113      	bne.n	8006d16 <cell_register_test+0x5e4>
			   sideA_cellVoltageD_PECflag == 2 &&
 8006cee:	f897 3075 	ldrb.w	r3, [r7, #117]	@ 0x75
 8006cf2:	2b02      	cmp	r3, #2
 8006cf4:	d10f      	bne.n	8006d16 <cell_register_test+0x5e4>
			   sideB_cellVoltageA_PECflag == 2 &&
 8006cf6:	f897 3074 	ldrb.w	r3, [r7, #116]	@ 0x74
 8006cfa:	2b02      	cmp	r3, #2
 8006cfc:	d10b      	bne.n	8006d16 <cell_register_test+0x5e4>
			   sideB_cellVoltageB_PECflag == 2 &&
 8006cfe:	f897 3073 	ldrb.w	r3, [r7, #115]	@ 0x73
 8006d02:	2b02      	cmp	r3, #2
 8006d04:	d107      	bne.n	8006d16 <cell_register_test+0x5e4>
			   sideB_cellVoltageC_PECflag == 2 &&
 8006d06:	f897 3072 	ldrb.w	r3, [r7, #114]	@ 0x72
 8006d0a:	2b02      	cmp	r3, #2
 8006d0c:	d103      	bne.n	8006d16 <cell_register_test+0x5e4>
			   sideB_cellVoltageD_PECflag == 2)
			{
				subAttempts = 13;
 8006d0e:	230d      	movs	r3, #13
 8006d10:	f887 307e 	strb.w	r3, [r7, #126]	@ 0x7e
 8006d14:	e007      	b.n	8006d26 <cell_register_test+0x5f4>
			}
			else {
				subAttempts++;
 8006d16:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 8006d1a:	3301      	adds	r3, #1
 8006d1c:	f887 307e 	strb.w	r3, [r7, #126]	@ 0x7e
				wait(1);
 8006d20:	2001      	movs	r0, #1
 8006d22:	f002 fa89 	bl	8009238 <wait>
		while(subAttempts < ATTEMPT_LIMIT) {
 8006d26:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 8006d2a:	2b09      	cmp	r3, #9
 8006d2c:	f67f af44 	bls.w	8006bb8 <cell_register_test+0x486>
			}
		}
		if(subAttempts != 13) { error_loop(ERROR_PEC, 0, 0); }
 8006d30:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 8006d34:	2b0d      	cmp	r3, #13
 8006d36:	d004      	beq.n	8006d42 <cell_register_test+0x610>
 8006d38:	2200      	movs	r2, #0
 8006d3a:	2100      	movs	r1, #0
 8006d3c:	2056      	movs	r0, #86	@ 0x56
 8006d3e:	f7fd fc91 	bl	8004664 <error_loop>

		sideA_cellVoltages[0] = (sideA_cellVoltageA[1] << 8) | sideA_cellVoltageA[0];
 8006d42:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8006d46:	b21b      	sxth	r3, r3
 8006d48:	021b      	lsls	r3, r3, #8
 8006d4a:	b21a      	sxth	r2, r3
 8006d4c:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 8006d50:	b21b      	sxth	r3, r3
 8006d52:	4313      	orrs	r3, r2
 8006d54:	b21b      	sxth	r3, r3
 8006d56:	b29b      	uxth	r3, r3
 8006d58:	f8a7 3058 	strh.w	r3, [r7, #88]	@ 0x58
		sideA_cellVoltages[1] = (sideA_cellVoltageA[3] << 8) | sideA_cellVoltageA[2];
 8006d5c:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8006d60:	b21b      	sxth	r3, r3
 8006d62:	021b      	lsls	r3, r3, #8
 8006d64:	b21a      	sxth	r2, r3
 8006d66:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 8006d6a:	b21b      	sxth	r3, r3
 8006d6c:	4313      	orrs	r3, r2
 8006d6e:	b21b      	sxth	r3, r3
 8006d70:	b29b      	uxth	r3, r3
 8006d72:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
		sideA_cellVoltages[2] = (sideA_cellVoltageA[5] << 8) | sideA_cellVoltageA[4];
 8006d76:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 8006d7a:	b21b      	sxth	r3, r3
 8006d7c:	021b      	lsls	r3, r3, #8
 8006d7e:	b21a      	sxth	r2, r3
 8006d80:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 8006d84:	b21b      	sxth	r3, r3
 8006d86:	4313      	orrs	r3, r2
 8006d88:	b21b      	sxth	r3, r3
 8006d8a:	b29b      	uxth	r3, r3
 8006d8c:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c
		sideA_cellVoltages[3] = (sideA_cellVoltageB[1] << 8) | sideA_cellVoltageB[0];
 8006d90:	f897 3031 	ldrb.w	r3, [r7, #49]	@ 0x31
 8006d94:	b21b      	sxth	r3, r3
 8006d96:	021b      	lsls	r3, r3, #8
 8006d98:	b21a      	sxth	r2, r3
 8006d9a:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8006d9e:	b21b      	sxth	r3, r3
 8006da0:	4313      	orrs	r3, r2
 8006da2:	b21b      	sxth	r3, r3
 8006da4:	b29b      	uxth	r3, r3
 8006da6:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
		sideA_cellVoltages[4] = (sideA_cellVoltageB[3] << 8) | sideA_cellVoltageB[2];
 8006daa:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8006dae:	b21b      	sxth	r3, r3
 8006db0:	021b      	lsls	r3, r3, #8
 8006db2:	b21a      	sxth	r2, r3
 8006db4:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8006db8:	b21b      	sxth	r3, r3
 8006dba:	4313      	orrs	r3, r2
 8006dbc:	b21b      	sxth	r3, r3
 8006dbe:	b29b      	uxth	r3, r3
 8006dc0:	f8a7 3060 	strh.w	r3, [r7, #96]	@ 0x60
		sideA_cellVoltages[5] = (sideA_cellVoltageB[5] << 8) | sideA_cellVoltageB[4];
 8006dc4:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8006dc8:	b21b      	sxth	r3, r3
 8006dca:	021b      	lsls	r3, r3, #8
 8006dcc:	b21a      	sxth	r2, r3
 8006dce:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8006dd2:	b21b      	sxth	r3, r3
 8006dd4:	4313      	orrs	r3, r2
 8006dd6:	b21b      	sxth	r3, r3
 8006dd8:	b29b      	uxth	r3, r3
 8006dda:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
		sideA_cellVoltages[6] = (sideA_cellVoltageC[1] << 8) | sideA_cellVoltageC[0];
 8006dde:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8006de2:	b21b      	sxth	r3, r3
 8006de4:	021b      	lsls	r3, r3, #8
 8006de6:	b21a      	sxth	r2, r3
 8006de8:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006dec:	b21b      	sxth	r3, r3
 8006dee:	4313      	orrs	r3, r2
 8006df0:	b21b      	sxth	r3, r3
 8006df2:	b29b      	uxth	r3, r3
 8006df4:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
		sideA_cellVoltages[7] = (sideA_cellVoltageC[3] << 8) | sideA_cellVoltageC[2];
 8006df8:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006dfc:	b21b      	sxth	r3, r3
 8006dfe:	021b      	lsls	r3, r3, #8
 8006e00:	b21a      	sxth	r2, r3
 8006e02:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8006e06:	b21b      	sxth	r3, r3
 8006e08:	4313      	orrs	r3, r2
 8006e0a:	b21b      	sxth	r3, r3
 8006e0c:	b29b      	uxth	r3, r3
 8006e0e:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
		sideA_cellVoltages[8] = (sideA_cellVoltageC[5] << 8) | sideA_cellVoltageC[4];
 8006e12:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8006e16:	b21b      	sxth	r3, r3
 8006e18:	021b      	lsls	r3, r3, #8
 8006e1a:	b21a      	sxth	r2, r3
 8006e1c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8006e20:	b21b      	sxth	r3, r3
 8006e22:	4313      	orrs	r3, r2
 8006e24:	b21b      	sxth	r3, r3
 8006e26:	b29b      	uxth	r3, r3
 8006e28:	f8a7 3068 	strh.w	r3, [r7, #104]	@ 0x68
		sideA_cellVoltages[9] = (sideA_cellVoltageD[1] << 8) | sideA_cellVoltageD[0];
 8006e2c:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8006e30:	b21b      	sxth	r3, r3
 8006e32:	021b      	lsls	r3, r3, #8
 8006e34:	b21a      	sxth	r2, r3
 8006e36:	f897 3020 	ldrb.w	r3, [r7, #32]
 8006e3a:	b21b      	sxth	r3, r3
 8006e3c:	4313      	orrs	r3, r2
 8006e3e:	b21b      	sxth	r3, r3
 8006e40:	b29b      	uxth	r3, r3
 8006e42:	f8a7 306a 	strh.w	r3, [r7, #106]	@ 0x6a
		sideA_cellVoltages[10] = (sideA_cellVoltageD[3] << 8) | sideA_cellVoltageD[2];
 8006e46:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006e4a:	b21b      	sxth	r3, r3
 8006e4c:	021b      	lsls	r3, r3, #8
 8006e4e:	b21a      	sxth	r2, r3
 8006e50:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8006e54:	b21b      	sxth	r3, r3
 8006e56:	4313      	orrs	r3, r2
 8006e58:	b21b      	sxth	r3, r3
 8006e5a:	b29b      	uxth	r3, r3
 8006e5c:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
		sideA_cellVoltages[11] = (sideA_cellVoltageD[5] << 8) | sideA_cellVoltageD[4];
 8006e60:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8006e64:	b21b      	sxth	r3, r3
 8006e66:	021b      	lsls	r3, r3, #8
 8006e68:	b21a      	sxth	r2, r3
 8006e6a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8006e6e:	b21b      	sxth	r3, r3
 8006e70:	4313      	orrs	r3, r2
 8006e72:	b21b      	sxth	r3, r3
 8006e74:	b29b      	uxth	r3, r3
 8006e76:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e

		sideB_cellVoltages[0] = (sideB_cellVoltageA[1] << 8) | sideB_cellVoltageA[0];
 8006e7a:	7e7b      	ldrb	r3, [r7, #25]
 8006e7c:	b21b      	sxth	r3, r3
 8006e7e:	021b      	lsls	r3, r3, #8
 8006e80:	b21a      	sxth	r2, r3
 8006e82:	7e3b      	ldrb	r3, [r7, #24]
 8006e84:	b21b      	sxth	r3, r3
 8006e86:	4313      	orrs	r3, r2
 8006e88:	b21b      	sxth	r3, r3
 8006e8a:	b29b      	uxth	r3, r3
 8006e8c:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
		sideB_cellVoltages[1] = (sideB_cellVoltageA[3] << 8) | sideB_cellVoltageA[2];
 8006e90:	7efb      	ldrb	r3, [r7, #27]
 8006e92:	b21b      	sxth	r3, r3
 8006e94:	021b      	lsls	r3, r3, #8
 8006e96:	b21a      	sxth	r2, r3
 8006e98:	7ebb      	ldrb	r3, [r7, #26]
 8006e9a:	b21b      	sxth	r3, r3
 8006e9c:	4313      	orrs	r3, r2
 8006e9e:	b21b      	sxth	r3, r3
 8006ea0:	b29b      	uxth	r3, r3
 8006ea2:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
		sideB_cellVoltages[2] = (sideB_cellVoltageA[5] << 8) | sideB_cellVoltageA[4];
 8006ea6:	7f7b      	ldrb	r3, [r7, #29]
 8006ea8:	b21b      	sxth	r3, r3
 8006eaa:	021b      	lsls	r3, r3, #8
 8006eac:	b21a      	sxth	r2, r3
 8006eae:	7f3b      	ldrb	r3, [r7, #28]
 8006eb0:	b21b      	sxth	r3, r3
 8006eb2:	4313      	orrs	r3, r2
 8006eb4:	b21b      	sxth	r3, r3
 8006eb6:	b29b      	uxth	r3, r3
 8006eb8:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
		sideB_cellVoltages[3] = (sideB_cellVoltageB[1] << 8) | sideB_cellVoltageB[0];
 8006ebc:	7c7b      	ldrb	r3, [r7, #17]
 8006ebe:	b21b      	sxth	r3, r3
 8006ec0:	021b      	lsls	r3, r3, #8
 8006ec2:	b21a      	sxth	r2, r3
 8006ec4:	7c3b      	ldrb	r3, [r7, #16]
 8006ec6:	b21b      	sxth	r3, r3
 8006ec8:	4313      	orrs	r3, r2
 8006eca:	b21b      	sxth	r3, r3
 8006ecc:	b29b      	uxth	r3, r3
 8006ece:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
		sideB_cellVoltages[4] = (sideB_cellVoltageB[3] << 8) | sideB_cellVoltageB[2];
 8006ed2:	7cfb      	ldrb	r3, [r7, #19]
 8006ed4:	b21b      	sxth	r3, r3
 8006ed6:	021b      	lsls	r3, r3, #8
 8006ed8:	b21a      	sxth	r2, r3
 8006eda:	7cbb      	ldrb	r3, [r7, #18]
 8006edc:	b21b      	sxth	r3, r3
 8006ede:	4313      	orrs	r3, r2
 8006ee0:	b21b      	sxth	r3, r3
 8006ee2:	b29b      	uxth	r3, r3
 8006ee4:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
		sideB_cellVoltages[5] = (sideB_cellVoltageB[5] << 8) | sideB_cellVoltageB[4];
 8006ee8:	7d7b      	ldrb	r3, [r7, #21]
 8006eea:	b21b      	sxth	r3, r3
 8006eec:	021b      	lsls	r3, r3, #8
 8006eee:	b21a      	sxth	r2, r3
 8006ef0:	7d3b      	ldrb	r3, [r7, #20]
 8006ef2:	b21b      	sxth	r3, r3
 8006ef4:	4313      	orrs	r3, r2
 8006ef6:	b21b      	sxth	r3, r3
 8006ef8:	b29b      	uxth	r3, r3
 8006efa:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
		sideB_cellVoltages[6] = (sideB_cellVoltageC[1] << 8) | sideB_cellVoltageC[0];
 8006efe:	7a7b      	ldrb	r3, [r7, #9]
 8006f00:	b21b      	sxth	r3, r3
 8006f02:	021b      	lsls	r3, r3, #8
 8006f04:	b21a      	sxth	r2, r3
 8006f06:	7a3b      	ldrb	r3, [r7, #8]
 8006f08:	b21b      	sxth	r3, r3
 8006f0a:	4313      	orrs	r3, r2
 8006f0c:	b21b      	sxth	r3, r3
 8006f0e:	b29b      	uxth	r3, r3
 8006f10:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
		sideB_cellVoltages[7] = (sideB_cellVoltageC[3] << 8) | sideB_cellVoltageC[2];
 8006f14:	7afb      	ldrb	r3, [r7, #11]
 8006f16:	b21b      	sxth	r3, r3
 8006f18:	021b      	lsls	r3, r3, #8
 8006f1a:	b21a      	sxth	r2, r3
 8006f1c:	7abb      	ldrb	r3, [r7, #10]
 8006f1e:	b21b      	sxth	r3, r3
 8006f20:	4313      	orrs	r3, r2
 8006f22:	b21b      	sxth	r3, r3
 8006f24:	b29b      	uxth	r3, r3
 8006f26:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
		sideB_cellVoltages[8] = (sideB_cellVoltageC[5] << 8) | sideB_cellVoltageC[4];
 8006f2a:	7b7b      	ldrb	r3, [r7, #13]
 8006f2c:	b21b      	sxth	r3, r3
 8006f2e:	021b      	lsls	r3, r3, #8
 8006f30:	b21a      	sxth	r2, r3
 8006f32:	7b3b      	ldrb	r3, [r7, #12]
 8006f34:	b21b      	sxth	r3, r3
 8006f36:	4313      	orrs	r3, r2
 8006f38:	b21b      	sxth	r3, r3
 8006f3a:	b29b      	uxth	r3, r3
 8006f3c:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
		sideB_cellVoltages[9] = (sideB_cellVoltageD[1] << 8) | sideB_cellVoltageD[0];
 8006f40:	787b      	ldrb	r3, [r7, #1]
 8006f42:	b21b      	sxth	r3, r3
 8006f44:	021b      	lsls	r3, r3, #8
 8006f46:	b21a      	sxth	r2, r3
 8006f48:	783b      	ldrb	r3, [r7, #0]
 8006f4a:	b21b      	sxth	r3, r3
 8006f4c:	4313      	orrs	r3, r2
 8006f4e:	b21b      	sxth	r3, r3
 8006f50:	b29b      	uxth	r3, r3
 8006f52:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
		sideB_cellVoltages[10] = (sideB_cellVoltageD[3] << 8) | sideB_cellVoltageD[2];
 8006f56:	78fb      	ldrb	r3, [r7, #3]
 8006f58:	b21b      	sxth	r3, r3
 8006f5a:	021b      	lsls	r3, r3, #8
 8006f5c:	b21a      	sxth	r2, r3
 8006f5e:	78bb      	ldrb	r3, [r7, #2]
 8006f60:	b21b      	sxth	r3, r3
 8006f62:	4313      	orrs	r3, r2
 8006f64:	b21b      	sxth	r3, r3
 8006f66:	b29b      	uxth	r3, r3
 8006f68:	f8a7 3054 	strh.w	r3, [r7, #84]	@ 0x54
		sideB_cellVoltages[11] = (sideB_cellVoltageD[5] << 8) | sideB_cellVoltageD[4];
 8006f6c:	797b      	ldrb	r3, [r7, #5]
 8006f6e:	b21b      	sxth	r3, r3
 8006f70:	021b      	lsls	r3, r3, #8
 8006f72:	b21a      	sxth	r2, r3
 8006f74:	793b      	ldrb	r3, [r7, #4]
 8006f76:	b21b      	sxth	r3, r3
 8006f78:	4313      	orrs	r3, r2
 8006f7a:	b21b      	sxth	r3, r3
 8006f7c:	b29b      	uxth	r3, r3
 8006f7e:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56

		uint8_t badOutputFlag = 0;
 8006f82:	2300      	movs	r3, #0
 8006f84:	f887 307b 	strb.w	r3, [r7, #123]	@ 0x7b
		for(uint8_t i = 0; i < 12; i++) {
 8006f88:	2300      	movs	r3, #0
 8006f8a:	f887 307a 	strb.w	r3, [r7, #122]	@ 0x7a
 8006f8e:	e020      	b.n	8006fd2 <cell_register_test+0x8a0>
			if(sideA_cellVoltages[i] != 0x6AAA) { badOutputFlag = 1; }
 8006f90:	f897 307a 	ldrb.w	r3, [r7, #122]	@ 0x7a
 8006f94:	005b      	lsls	r3, r3, #1
 8006f96:	3380      	adds	r3, #128	@ 0x80
 8006f98:	443b      	add	r3, r7
 8006f9a:	f833 3c28 	ldrh.w	r3, [r3, #-40]
 8006f9e:	f646 22aa 	movw	r2, #27306	@ 0x6aaa
 8006fa2:	4293      	cmp	r3, r2
 8006fa4:	d002      	beq.n	8006fac <cell_register_test+0x87a>
 8006fa6:	2301      	movs	r3, #1
 8006fa8:	f887 307b 	strb.w	r3, [r7, #123]	@ 0x7b

			if(sideB_cellVoltages[i] != 0x6AAA) { badOutputFlag = 1; }
 8006fac:	f897 307a 	ldrb.w	r3, [r7, #122]	@ 0x7a
 8006fb0:	005b      	lsls	r3, r3, #1
 8006fb2:	3380      	adds	r3, #128	@ 0x80
 8006fb4:	443b      	add	r3, r7
 8006fb6:	f833 3c40 	ldrh.w	r3, [r3, #-64]
 8006fba:	f646 22aa 	movw	r2, #27306	@ 0x6aaa
 8006fbe:	4293      	cmp	r3, r2
 8006fc0:	d002      	beq.n	8006fc8 <cell_register_test+0x896>
 8006fc2:	2301      	movs	r3, #1
 8006fc4:	f887 307b 	strb.w	r3, [r7, #123]	@ 0x7b
		for(uint8_t i = 0; i < 12; i++) {
 8006fc8:	f897 307a 	ldrb.w	r3, [r7, #122]	@ 0x7a
 8006fcc:	3301      	adds	r3, #1
 8006fce:	f887 307a 	strb.w	r3, [r7, #122]	@ 0x7a
 8006fd2:	f897 307a 	ldrb.w	r3, [r7, #122]	@ 0x7a
 8006fd6:	2b0b      	cmp	r3, #11
 8006fd8:	d9da      	bls.n	8006f90 <cell_register_test+0x85e>
		}

		if(!badOutputFlag) { attempts = 13; }
 8006fda:	f897 307b 	ldrb.w	r3, [r7, #123]	@ 0x7b
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d103      	bne.n	8006fea <cell_register_test+0x8b8>
 8006fe2:	230d      	movs	r3, #13
 8006fe4:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8006fe8:	e00a      	b.n	8007000 <cell_register_test+0x8ce>

		else {
			attempts++;
 8006fea:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8006fee:	3301      	adds	r3, #1
 8006ff0:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
			subAttempts = 0;
 8006ff4:	2300      	movs	r3, #0
 8006ff6:	f887 307e 	strb.w	r3, [r7, #126]	@ 0x7e
			wait(1);
 8006ffa:	2001      	movs	r0, #1
 8006ffc:	f002 f91c 	bl	8009238 <wait>
	while(attempts < ATTEMPT_LIMIT) {
 8007000:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8007004:	2b09      	cmp	r3, #9
 8007006:	f67f ae8e 	bls.w	8006d26 <cell_register_test+0x5f4>
		}
	}
	if(attempts != 13) { error_loop(ERROR_CVST, 0, 0); }
 800700a:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800700e:	2b0d      	cmp	r3, #13
 8007010:	d004      	beq.n	800701c <cell_register_test+0x8ea>
 8007012:	2200      	movs	r2, #0
 8007014:	2100      	movs	r1, #0
 8007016:	204c      	movs	r0, #76	@ 0x4c
 8007018:	f7fd fb24 	bl	8004664 <error_loop>
}
 800701c:	bf00      	nop
 800701e:	3780      	adds	r7, #128	@ 0x80
 8007020:	46bd      	mov	sp, r7
 8007022:	bd80      	pop	{r7, pc}

08007024 <aux_register_test>:


void aux_register_test(void)
{
 8007024:	b580      	push	{r7, lr}
 8007026:	b09e      	sub	sp, #120	@ 0x78
 8007028:	af00      	add	r7, sp, #0
	uint8_t attempts = 0;
 800702a:	2300      	movs	r3, #0
 800702c:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
	uint8_t subAttempts = 0;
 8007030:	2300      	movs	r3, #0
 8007032:	f887 3076 	strb.w	r3, [r7, #118]	@ 0x76
	uint8_t sideB_auxB_PECflag;
	uint8_t sideB_auxC_PECflag;
	uint8_t sideB_auxD_PECflag;

	// Test with first variant of AXST command
	while(attempts < ATTEMPT_LIMIT) {
 8007036:	e1f3      	b.n	8007420 <aux_register_test+0x3fc>
		while(subAttempts < ATTEMPT_LIMIT) {
			CLRAUX(SIDE_A);
 8007038:	2001      	movs	r0, #1
 800703a:	f001 fae6 	bl	800860a <CLRAUX>
			CLRAUX(SIDE_B);
 800703e:	2000      	movs	r0, #0
 8007040:	f001 fae3 	bl	800860a <CLRAUX>
			wait(3);
 8007044:	2003      	movs	r0, #3
 8007046:	f002 f8f7 	bl	8009238 <wait>

			AXST(1, SIDE_A);
 800704a:	2101      	movs	r1, #1
 800704c:	2001      	movs	r0, #1
 800704e:	f001 f9f4 	bl	800843a <AXST>
			AXST(1, SIDE_B);
 8007052:	2100      	movs	r1, #0
 8007054:	2001      	movs	r0, #1
 8007056:	f001 f9f0 	bl	800843a <AXST>
			wait(3);
 800705a:	2003      	movs	r0, #3
 800705c:	f002 f8ec 	bl	8009238 <wait>

			RDAUXA(sideA_auxA, SIDE_A);
 8007060:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8007064:	2101      	movs	r1, #1
 8007066:	4618      	mov	r0, r3
 8007068:	f001 f8b4 	bl	80081d4 <RDAUXA>
			RDAUXA(sideB_auxA, SIDE_B);
 800706c:	f107 0318 	add.w	r3, r7, #24
 8007070:	2100      	movs	r1, #0
 8007072:	4618      	mov	r0, r3
 8007074:	f001 f8ae 	bl	80081d4 <RDAUXA>
			wait(1);
 8007078:	2001      	movs	r0, #1
 800707a:	f002 f8dd 	bl	8009238 <wait>
			RDAUXB(sideA_auxB, SIDE_A);
 800707e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8007082:	2101      	movs	r1, #1
 8007084:	4618      	mov	r0, r3
 8007086:	f001 f8c9 	bl	800821c <RDAUXB>
			RDAUXB(sideB_auxB, SIDE_B);
 800708a:	f107 0310 	add.w	r3, r7, #16
 800708e:	2100      	movs	r1, #0
 8007090:	4618      	mov	r0, r3
 8007092:	f001 f8c3 	bl	800821c <RDAUXB>
			wait(1);
 8007096:	2001      	movs	r0, #1
 8007098:	f002 f8ce 	bl	8009238 <wait>
			RDAUXC(sideA_auxC, SIDE_A);
 800709c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80070a0:	2101      	movs	r1, #1
 80070a2:	4618      	mov	r0, r3
 80070a4:	f001 f8de 	bl	8008264 <RDAUXC>
			RDAUXC(sideB_auxC, SIDE_B);
 80070a8:	f107 0308 	add.w	r3, r7, #8
 80070ac:	2100      	movs	r1, #0
 80070ae:	4618      	mov	r0, r3
 80070b0:	f001 f8d8 	bl	8008264 <RDAUXC>
			wait(1);
 80070b4:	2001      	movs	r0, #1
 80070b6:	f002 f8bf 	bl	8009238 <wait>
			RDAUXD(sideA_auxD, SIDE_A);
 80070ba:	f107 0320 	add.w	r3, r7, #32
 80070be:	2101      	movs	r1, #1
 80070c0:	4618      	mov	r0, r3
 80070c2:	f001 f8f3 	bl	80082ac <RDAUXD>
			RDAUXD(sideB_auxD, SIDE_B);
 80070c6:	463b      	mov	r3, r7
 80070c8:	2100      	movs	r1, #0
 80070ca:	4618      	mov	r0, r3
 80070cc:	f001 f8ee 	bl	80082ac <RDAUXD>

			sideA_auxA_PECflag = verify_PEC15(sideA_auxA);
 80070d0:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80070d4:	4618      	mov	r0, r3
 80070d6:	f000 fdb4 	bl	8007c42 <verify_PEC15>
 80070da:	4603      	mov	r3, r0
 80070dc:	f887 3071 	strb.w	r3, [r7, #113]	@ 0x71
			sideA_auxB_PECflag = verify_PEC15(sideA_auxB);
 80070e0:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80070e4:	4618      	mov	r0, r3
 80070e6:	f000 fdac 	bl	8007c42 <verify_PEC15>
 80070ea:	4603      	mov	r3, r0
 80070ec:	f887 3070 	strb.w	r3, [r7, #112]	@ 0x70
			sideA_auxC_PECflag = verify_PEC15(sideA_auxC);
 80070f0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80070f4:	4618      	mov	r0, r3
 80070f6:	f000 fda4 	bl	8007c42 <verify_PEC15>
 80070fa:	4603      	mov	r3, r0
 80070fc:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
			sideA_auxD_PECflag = verify_PEC15(sideA_auxD);
 8007100:	f107 0320 	add.w	r3, r7, #32
 8007104:	4618      	mov	r0, r3
 8007106:	f000 fd9c 	bl	8007c42 <verify_PEC15>
 800710a:	4603      	mov	r3, r0
 800710c:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e

			sideB_auxA_PECflag = verify_PEC15(sideB_auxA);
 8007110:	f107 0318 	add.w	r3, r7, #24
 8007114:	4618      	mov	r0, r3
 8007116:	f000 fd94 	bl	8007c42 <verify_PEC15>
 800711a:	4603      	mov	r3, r0
 800711c:	f887 306d 	strb.w	r3, [r7, #109]	@ 0x6d
			sideB_auxB_PECflag = verify_PEC15(sideB_auxB);
 8007120:	f107 0310 	add.w	r3, r7, #16
 8007124:	4618      	mov	r0, r3
 8007126:	f000 fd8c 	bl	8007c42 <verify_PEC15>
 800712a:	4603      	mov	r3, r0
 800712c:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
			sideB_auxC_PECflag = verify_PEC15(sideB_auxC);
 8007130:	f107 0308 	add.w	r3, r7, #8
 8007134:	4618      	mov	r0, r3
 8007136:	f000 fd84 	bl	8007c42 <verify_PEC15>
 800713a:	4603      	mov	r3, r0
 800713c:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
			sideB_auxD_PECflag = verify_PEC15(sideB_auxD);
 8007140:	463b      	mov	r3, r7
 8007142:	4618      	mov	r0, r3
 8007144:	f000 fd7d 	bl	8007c42 <verify_PEC15>
 8007148:	4603      	mov	r3, r0
 800714a:	f887 306a 	strb.w	r3, [r7, #106]	@ 0x6a

			if(sideA_auxA_PECflag == 2 &&
 800714e:	f897 3071 	ldrb.w	r3, [r7, #113]	@ 0x71
 8007152:	2b02      	cmp	r3, #2
 8007154:	d11f      	bne.n	8007196 <aux_register_test+0x172>
 8007156:	f897 3070 	ldrb.w	r3, [r7, #112]	@ 0x70
 800715a:	2b02      	cmp	r3, #2
 800715c:	d11b      	bne.n	8007196 <aux_register_test+0x172>
			   sideA_auxB_PECflag == 2 &&
 800715e:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8007162:	2b02      	cmp	r3, #2
 8007164:	d117      	bne.n	8007196 <aux_register_test+0x172>
			   sideA_auxC_PECflag == 2 &&
 8007166:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 800716a:	2b02      	cmp	r3, #2
 800716c:	d113      	bne.n	8007196 <aux_register_test+0x172>
			   sideA_auxD_PECflag == 2 &&
 800716e:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8007172:	2b02      	cmp	r3, #2
 8007174:	d10f      	bne.n	8007196 <aux_register_test+0x172>
			   sideB_auxA_PECflag == 2 &&
 8007176:	f897 306c 	ldrb.w	r3, [r7, #108]	@ 0x6c
 800717a:	2b02      	cmp	r3, #2
 800717c:	d10b      	bne.n	8007196 <aux_register_test+0x172>
			   sideB_auxB_PECflag == 2 &&
 800717e:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 8007182:	2b02      	cmp	r3, #2
 8007184:	d107      	bne.n	8007196 <aux_register_test+0x172>
			   sideB_auxC_PECflag == 2 &&
 8007186:	f897 306a 	ldrb.w	r3, [r7, #106]	@ 0x6a
 800718a:	2b02      	cmp	r3, #2
 800718c:	d103      	bne.n	8007196 <aux_register_test+0x172>
			   sideB_auxD_PECflag == 2)
			{
				subAttempts = 13;
 800718e:	230d      	movs	r3, #13
 8007190:	f887 3076 	strb.w	r3, [r7, #118]	@ 0x76
 8007194:	e007      	b.n	80071a6 <aux_register_test+0x182>
			}
			else {
				subAttempts++;
 8007196:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 800719a:	3301      	adds	r3, #1
 800719c:	f887 3076 	strb.w	r3, [r7, #118]	@ 0x76
				wait(1);
 80071a0:	2001      	movs	r0, #1
 80071a2:	f002 f849 	bl	8009238 <wait>
		while(subAttempts < ATTEMPT_LIMIT) {
 80071a6:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 80071aa:	2b09      	cmp	r3, #9
 80071ac:	f67f af44 	bls.w	8007038 <aux_register_test+0x14>
			}
		}
		if(subAttempts != 13) { error_loop(ERROR_PEC, 0, 0); }
 80071b0:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 80071b4:	2b0d      	cmp	r3, #13
 80071b6:	d004      	beq.n	80071c2 <aux_register_test+0x19e>
 80071b8:	2200      	movs	r2, #0
 80071ba:	2100      	movs	r1, #0
 80071bc:	2056      	movs	r0, #86	@ 0x56
 80071be:	f7fd fa51 	bl	8004664 <error_loop>

		sideA_gpio[0] = (sideA_auxA[1] << 8) | sideA_auxA[0];
 80071c2:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 80071c6:	b21b      	sxth	r3, r3
 80071c8:	021b      	lsls	r3, r3, #8
 80071ca:	b21a      	sxth	r2, r3
 80071cc:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 80071d0:	b21b      	sxth	r3, r3
 80071d2:	4313      	orrs	r3, r2
 80071d4:	b21b      	sxth	r3, r3
 80071d6:	b29b      	uxth	r3, r3
 80071d8:	f8a7 3054 	strh.w	r3, [r7, #84]	@ 0x54
		sideA_gpio[1] = (sideA_auxA[3] << 8) | sideA_auxA[2];
 80071dc:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 80071e0:	b21b      	sxth	r3, r3
 80071e2:	021b      	lsls	r3, r3, #8
 80071e4:	b21a      	sxth	r2, r3
 80071e6:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 80071ea:	b21b      	sxth	r3, r3
 80071ec:	4313      	orrs	r3, r2
 80071ee:	b21b      	sxth	r3, r3
 80071f0:	b29b      	uxth	r3, r3
 80071f2:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
		sideA_gpio[2] = (sideA_auxA[5] << 8) | sideA_auxA[4];
 80071f6:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 80071fa:	b21b      	sxth	r3, r3
 80071fc:	021b      	lsls	r3, r3, #8
 80071fe:	b21a      	sxth	r2, r3
 8007200:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 8007204:	b21b      	sxth	r3, r3
 8007206:	4313      	orrs	r3, r2
 8007208:	b21b      	sxth	r3, r3
 800720a:	b29b      	uxth	r3, r3
 800720c:	f8a7 3058 	strh.w	r3, [r7, #88]	@ 0x58
		sideA_gpio[3] = (sideA_auxB[1] << 8) | sideA_auxB[0];
 8007210:	f897 3031 	ldrb.w	r3, [r7, #49]	@ 0x31
 8007214:	b21b      	sxth	r3, r3
 8007216:	021b      	lsls	r3, r3, #8
 8007218:	b21a      	sxth	r2, r3
 800721a:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 800721e:	b21b      	sxth	r3, r3
 8007220:	4313      	orrs	r3, r2
 8007222:	b21b      	sxth	r3, r3
 8007224:	b29b      	uxth	r3, r3
 8007226:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
		sideA_gpio[4] = (sideA_auxB[3] << 8) | sideA_auxB[2];
 800722a:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800722e:	b21b      	sxth	r3, r3
 8007230:	021b      	lsls	r3, r3, #8
 8007232:	b21a      	sxth	r2, r3
 8007234:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8007238:	b21b      	sxth	r3, r3
 800723a:	4313      	orrs	r3, r2
 800723c:	b21b      	sxth	r3, r3
 800723e:	b29b      	uxth	r3, r3
 8007240:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c
		sideA_gpio[5] = (sideA_auxB[5] << 8) | sideA_auxB[4];
 8007244:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8007248:	b21b      	sxth	r3, r3
 800724a:	021b      	lsls	r3, r3, #8
 800724c:	b21a      	sxth	r2, r3
 800724e:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8007252:	b21b      	sxth	r3, r3
 8007254:	4313      	orrs	r3, r2
 8007256:	b21b      	sxth	r3, r3
 8007258:	b29b      	uxth	r3, r3
 800725a:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
		sideA_gpio[6] = (sideA_auxC[1] << 8) | sideA_auxC[0];
 800725e:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8007262:	b21b      	sxth	r3, r3
 8007264:	021b      	lsls	r3, r3, #8
 8007266:	b21a      	sxth	r2, r3
 8007268:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800726c:	b21b      	sxth	r3, r3
 800726e:	4313      	orrs	r3, r2
 8007270:	b21b      	sxth	r3, r3
 8007272:	b29b      	uxth	r3, r3
 8007274:	f8a7 3060 	strh.w	r3, [r7, #96]	@ 0x60
		sideA_gpio[7] = (sideA_auxC[3] << 8) | sideA_auxC[2];
 8007278:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800727c:	b21b      	sxth	r3, r3
 800727e:	021b      	lsls	r3, r3, #8
 8007280:	b21a      	sxth	r2, r3
 8007282:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8007286:	b21b      	sxth	r3, r3
 8007288:	4313      	orrs	r3, r2
 800728a:	b21b      	sxth	r3, r3
 800728c:	b29b      	uxth	r3, r3
 800728e:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
		sideA_gpio[8] = (sideA_auxC[5] << 8) | sideA_auxC[4];
 8007292:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8007296:	b21b      	sxth	r3, r3
 8007298:	021b      	lsls	r3, r3, #8
 800729a:	b21a      	sxth	r2, r3
 800729c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80072a0:	b21b      	sxth	r3, r3
 80072a2:	4313      	orrs	r3, r2
 80072a4:	b21b      	sxth	r3, r3
 80072a6:	b29b      	uxth	r3, r3
 80072a8:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
		sideA_gpio[9] = (sideA_auxD[1] << 8) | sideA_auxD[0];
 80072ac:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80072b0:	b21b      	sxth	r3, r3
 80072b2:	021b      	lsls	r3, r3, #8
 80072b4:	b21a      	sxth	r2, r3
 80072b6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80072ba:	b21b      	sxth	r3, r3
 80072bc:	4313      	orrs	r3, r2
 80072be:	b21b      	sxth	r3, r3
 80072c0:	b29b      	uxth	r3, r3
 80072c2:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66

		sideB_gpio[0] = (sideB_auxA[1] << 8) | sideB_auxA[0];
 80072c6:	7e7b      	ldrb	r3, [r7, #25]
 80072c8:	b21b      	sxth	r3, r3
 80072ca:	021b      	lsls	r3, r3, #8
 80072cc:	b21a      	sxth	r2, r3
 80072ce:	7e3b      	ldrb	r3, [r7, #24]
 80072d0:	b21b      	sxth	r3, r3
 80072d2:	4313      	orrs	r3, r2
 80072d4:	b21b      	sxth	r3, r3
 80072d6:	b29b      	uxth	r3, r3
 80072d8:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
		sideB_gpio[1] = (sideB_auxA[3] << 8) | sideB_auxA[2];
 80072dc:	7efb      	ldrb	r3, [r7, #27]
 80072de:	b21b      	sxth	r3, r3
 80072e0:	021b      	lsls	r3, r3, #8
 80072e2:	b21a      	sxth	r2, r3
 80072e4:	7ebb      	ldrb	r3, [r7, #26]
 80072e6:	b21b      	sxth	r3, r3
 80072e8:	4313      	orrs	r3, r2
 80072ea:	b21b      	sxth	r3, r3
 80072ec:	b29b      	uxth	r3, r3
 80072ee:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
		sideB_gpio[2] = (sideB_auxA[5] << 8) | sideB_auxA[4];
 80072f2:	7f7b      	ldrb	r3, [r7, #29]
 80072f4:	b21b      	sxth	r3, r3
 80072f6:	021b      	lsls	r3, r3, #8
 80072f8:	b21a      	sxth	r2, r3
 80072fa:	7f3b      	ldrb	r3, [r7, #28]
 80072fc:	b21b      	sxth	r3, r3
 80072fe:	4313      	orrs	r3, r2
 8007300:	b21b      	sxth	r3, r3
 8007302:	b29b      	uxth	r3, r3
 8007304:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
		sideB_gpio[3] = (sideB_auxB[1] << 8) | sideB_auxB[0];
 8007308:	7c7b      	ldrb	r3, [r7, #17]
 800730a:	b21b      	sxth	r3, r3
 800730c:	021b      	lsls	r3, r3, #8
 800730e:	b21a      	sxth	r2, r3
 8007310:	7c3b      	ldrb	r3, [r7, #16]
 8007312:	b21b      	sxth	r3, r3
 8007314:	4313      	orrs	r3, r2
 8007316:	b21b      	sxth	r3, r3
 8007318:	b29b      	uxth	r3, r3
 800731a:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
		sideB_gpio[4] = (sideB_auxB[3] << 8) | sideB_auxB[2];
 800731e:	7cfb      	ldrb	r3, [r7, #19]
 8007320:	b21b      	sxth	r3, r3
 8007322:	021b      	lsls	r3, r3, #8
 8007324:	b21a      	sxth	r2, r3
 8007326:	7cbb      	ldrb	r3, [r7, #18]
 8007328:	b21b      	sxth	r3, r3
 800732a:	4313      	orrs	r3, r2
 800732c:	b21b      	sxth	r3, r3
 800732e:	b29b      	uxth	r3, r3
 8007330:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
		sideB_gpio[5] = (sideB_auxB[5] << 8) | sideB_auxB[4];
 8007334:	7d7b      	ldrb	r3, [r7, #21]
 8007336:	b21b      	sxth	r3, r3
 8007338:	021b      	lsls	r3, r3, #8
 800733a:	b21a      	sxth	r2, r3
 800733c:	7d3b      	ldrb	r3, [r7, #20]
 800733e:	b21b      	sxth	r3, r3
 8007340:	4313      	orrs	r3, r2
 8007342:	b21b      	sxth	r3, r3
 8007344:	b29b      	uxth	r3, r3
 8007346:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
		sideB_gpio[6] = (sideB_auxC[1] << 8) | sideB_auxC[0];
 800734a:	7a7b      	ldrb	r3, [r7, #9]
 800734c:	b21b      	sxth	r3, r3
 800734e:	021b      	lsls	r3, r3, #8
 8007350:	b21a      	sxth	r2, r3
 8007352:	7a3b      	ldrb	r3, [r7, #8]
 8007354:	b21b      	sxth	r3, r3
 8007356:	4313      	orrs	r3, r2
 8007358:	b21b      	sxth	r3, r3
 800735a:	b29b      	uxth	r3, r3
 800735c:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
		sideB_gpio[7] = (sideB_auxC[3] << 8) | sideB_auxC[2];
 8007360:	7afb      	ldrb	r3, [r7, #11]
 8007362:	b21b      	sxth	r3, r3
 8007364:	021b      	lsls	r3, r3, #8
 8007366:	b21a      	sxth	r2, r3
 8007368:	7abb      	ldrb	r3, [r7, #10]
 800736a:	b21b      	sxth	r3, r3
 800736c:	4313      	orrs	r3, r2
 800736e:	b21b      	sxth	r3, r3
 8007370:	b29b      	uxth	r3, r3
 8007372:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
		sideB_gpio[8] = (sideB_auxC[5] << 8) | sideB_auxC[4];
 8007376:	7b7b      	ldrb	r3, [r7, #13]
 8007378:	b21b      	sxth	r3, r3
 800737a:	021b      	lsls	r3, r3, #8
 800737c:	b21a      	sxth	r2, r3
 800737e:	7b3b      	ldrb	r3, [r7, #12]
 8007380:	b21b      	sxth	r3, r3
 8007382:	4313      	orrs	r3, r2
 8007384:	b21b      	sxth	r3, r3
 8007386:	b29b      	uxth	r3, r3
 8007388:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
		sideB_gpio[9] = (sideB_auxD[1] << 8) | sideB_auxD[0];
 800738c:	787b      	ldrb	r3, [r7, #1]
 800738e:	b21b      	sxth	r3, r3
 8007390:	021b      	lsls	r3, r3, #8
 8007392:	b21a      	sxth	r2, r3
 8007394:	783b      	ldrb	r3, [r7, #0]
 8007396:	b21b      	sxth	r3, r3
 8007398:	4313      	orrs	r3, r2
 800739a:	b21b      	sxth	r3, r3
 800739c:	b29b      	uxth	r3, r3
 800739e:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52

		uint8_t badOutputFlag = 0;
 80073a2:	2300      	movs	r3, #0
 80073a4:	f887 3075 	strb.w	r3, [r7, #117]	@ 0x75
		for(uint8_t i = 0; i < 10; i++) {
 80073a8:	2300      	movs	r3, #0
 80073aa:	f887 3074 	strb.w	r3, [r7, #116]	@ 0x74
 80073ae:	e020      	b.n	80073f2 <aux_register_test+0x3ce>
			if(sideA_gpio[i] != 0x9555) { badOutputFlag = 1; }
 80073b0:	f897 3074 	ldrb.w	r3, [r7, #116]	@ 0x74
 80073b4:	005b      	lsls	r3, r3, #1
 80073b6:	3378      	adds	r3, #120	@ 0x78
 80073b8:	443b      	add	r3, r7
 80073ba:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 80073be:	f249 5255 	movw	r2, #38229	@ 0x9555
 80073c2:	4293      	cmp	r3, r2
 80073c4:	d002      	beq.n	80073cc <aux_register_test+0x3a8>
 80073c6:	2301      	movs	r3, #1
 80073c8:	f887 3075 	strb.w	r3, [r7, #117]	@ 0x75

			if(sideB_gpio[i] != 0x9555) { badOutputFlag = 1; }
 80073cc:	f897 3074 	ldrb.w	r3, [r7, #116]	@ 0x74
 80073d0:	005b      	lsls	r3, r3, #1
 80073d2:	3378      	adds	r3, #120	@ 0x78
 80073d4:	443b      	add	r3, r7
 80073d6:	f833 3c38 	ldrh.w	r3, [r3, #-56]
 80073da:	f249 5255 	movw	r2, #38229	@ 0x9555
 80073de:	4293      	cmp	r3, r2
 80073e0:	d002      	beq.n	80073e8 <aux_register_test+0x3c4>
 80073e2:	2301      	movs	r3, #1
 80073e4:	f887 3075 	strb.w	r3, [r7, #117]	@ 0x75
		for(uint8_t i = 0; i < 10; i++) {
 80073e8:	f897 3074 	ldrb.w	r3, [r7, #116]	@ 0x74
 80073ec:	3301      	adds	r3, #1
 80073ee:	f887 3074 	strb.w	r3, [r7, #116]	@ 0x74
 80073f2:	f897 3074 	ldrb.w	r3, [r7, #116]	@ 0x74
 80073f6:	2b09      	cmp	r3, #9
 80073f8:	d9da      	bls.n	80073b0 <aux_register_test+0x38c>
		}

		if(!badOutputFlag) { attempts = 13; }
 80073fa:	f897 3075 	ldrb.w	r3, [r7, #117]	@ 0x75
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d103      	bne.n	800740a <aux_register_test+0x3e6>
 8007402:	230d      	movs	r3, #13
 8007404:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 8007408:	e00a      	b.n	8007420 <aux_register_test+0x3fc>

		else {
			attempts++;
 800740a:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800740e:	3301      	adds	r3, #1
 8007410:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
			subAttempts = 0;
 8007414:	2300      	movs	r3, #0
 8007416:	f887 3076 	strb.w	r3, [r7, #118]	@ 0x76
			wait(1);
 800741a:	2001      	movs	r0, #1
 800741c:	f001 ff0c 	bl	8009238 <wait>
	while(attempts < ATTEMPT_LIMIT) {
 8007420:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8007424:	2b09      	cmp	r3, #9
 8007426:	f67f aebe 	bls.w	80071a6 <aux_register_test+0x182>
		}
	}
	if(attempts != 13) { error_loop(ERROR_AXST, 0, 0); }
 800742a:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800742e:	2b0d      	cmp	r3, #13
 8007430:	d004      	beq.n	800743c <aux_register_test+0x418>
 8007432:	2200      	movs	r2, #0
 8007434:	2100      	movs	r1, #0
 8007436:	204e      	movs	r0, #78	@ 0x4e
 8007438:	f7fd f914 	bl	8004664 <error_loop>

	// Test with second variant of AXST command
	attempts = 0;
 800743c:	2300      	movs	r3, #0
 800743e:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
	subAttempts = 0;
 8007442:	2300      	movs	r3, #0
 8007444:	f887 3076 	strb.w	r3, [r7, #118]	@ 0x76
	while(attempts < ATTEMPT_LIMIT) {
 8007448:	e1f3      	b.n	8007832 <aux_register_test+0x80e>
		while(subAttempts < ATTEMPT_LIMIT) {
			CLRAUX(SIDE_A);
 800744a:	2001      	movs	r0, #1
 800744c:	f001 f8dd 	bl	800860a <CLRAUX>
			CLRAUX(SIDE_B);
 8007450:	2000      	movs	r0, #0
 8007452:	f001 f8da 	bl	800860a <CLRAUX>
			wait(3);
 8007456:	2003      	movs	r0, #3
 8007458:	f001 feee 	bl	8009238 <wait>

			AXST(0, SIDE_A);
 800745c:	2101      	movs	r1, #1
 800745e:	2000      	movs	r0, #0
 8007460:	f000 ffeb 	bl	800843a <AXST>
			AXST(0, SIDE_B);
 8007464:	2100      	movs	r1, #0
 8007466:	2000      	movs	r0, #0
 8007468:	f000 ffe7 	bl	800843a <AXST>
			wait(3);
 800746c:	2003      	movs	r0, #3
 800746e:	f001 fee3 	bl	8009238 <wait>

			RDAUXA(sideA_auxA, SIDE_A);
 8007472:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8007476:	2101      	movs	r1, #1
 8007478:	4618      	mov	r0, r3
 800747a:	f000 feab 	bl	80081d4 <RDAUXA>
			RDAUXA(sideB_auxA, SIDE_B);
 800747e:	f107 0318 	add.w	r3, r7, #24
 8007482:	2100      	movs	r1, #0
 8007484:	4618      	mov	r0, r3
 8007486:	f000 fea5 	bl	80081d4 <RDAUXA>
			wait(1);
 800748a:	2001      	movs	r0, #1
 800748c:	f001 fed4 	bl	8009238 <wait>
			RDAUXB(sideA_auxB, SIDE_A);
 8007490:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8007494:	2101      	movs	r1, #1
 8007496:	4618      	mov	r0, r3
 8007498:	f000 fec0 	bl	800821c <RDAUXB>
			RDAUXB(sideB_auxB, SIDE_B);
 800749c:	f107 0310 	add.w	r3, r7, #16
 80074a0:	2100      	movs	r1, #0
 80074a2:	4618      	mov	r0, r3
 80074a4:	f000 feba 	bl	800821c <RDAUXB>
			wait(1);
 80074a8:	2001      	movs	r0, #1
 80074aa:	f001 fec5 	bl	8009238 <wait>
			RDAUXC(sideA_auxC, SIDE_A);
 80074ae:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80074b2:	2101      	movs	r1, #1
 80074b4:	4618      	mov	r0, r3
 80074b6:	f000 fed5 	bl	8008264 <RDAUXC>
			RDAUXC(sideB_auxC, SIDE_B);
 80074ba:	f107 0308 	add.w	r3, r7, #8
 80074be:	2100      	movs	r1, #0
 80074c0:	4618      	mov	r0, r3
 80074c2:	f000 fecf 	bl	8008264 <RDAUXC>
			wait(1);
 80074c6:	2001      	movs	r0, #1
 80074c8:	f001 feb6 	bl	8009238 <wait>
			RDAUXD(sideA_auxD, SIDE_A);
 80074cc:	f107 0320 	add.w	r3, r7, #32
 80074d0:	2101      	movs	r1, #1
 80074d2:	4618      	mov	r0, r3
 80074d4:	f000 feea 	bl	80082ac <RDAUXD>
			RDAUXD(sideB_auxD, SIDE_B);
 80074d8:	463b      	mov	r3, r7
 80074da:	2100      	movs	r1, #0
 80074dc:	4618      	mov	r0, r3
 80074de:	f000 fee5 	bl	80082ac <RDAUXD>

			sideA_auxA_PECflag = verify_PEC15(sideA_auxA);
 80074e2:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80074e6:	4618      	mov	r0, r3
 80074e8:	f000 fbab 	bl	8007c42 <verify_PEC15>
 80074ec:	4603      	mov	r3, r0
 80074ee:	f887 3071 	strb.w	r3, [r7, #113]	@ 0x71
			sideA_auxB_PECflag = verify_PEC15(sideA_auxB);
 80074f2:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80074f6:	4618      	mov	r0, r3
 80074f8:	f000 fba3 	bl	8007c42 <verify_PEC15>
 80074fc:	4603      	mov	r3, r0
 80074fe:	f887 3070 	strb.w	r3, [r7, #112]	@ 0x70
			sideA_auxC_PECflag = verify_PEC15(sideA_auxC);
 8007502:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8007506:	4618      	mov	r0, r3
 8007508:	f000 fb9b 	bl	8007c42 <verify_PEC15>
 800750c:	4603      	mov	r3, r0
 800750e:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
			sideA_auxD_PECflag = verify_PEC15(sideA_auxD);
 8007512:	f107 0320 	add.w	r3, r7, #32
 8007516:	4618      	mov	r0, r3
 8007518:	f000 fb93 	bl	8007c42 <verify_PEC15>
 800751c:	4603      	mov	r3, r0
 800751e:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e

			sideB_auxA_PECflag = verify_PEC15(sideB_auxA);
 8007522:	f107 0318 	add.w	r3, r7, #24
 8007526:	4618      	mov	r0, r3
 8007528:	f000 fb8b 	bl	8007c42 <verify_PEC15>
 800752c:	4603      	mov	r3, r0
 800752e:	f887 306d 	strb.w	r3, [r7, #109]	@ 0x6d
			sideB_auxB_PECflag = verify_PEC15(sideB_auxB);
 8007532:	f107 0310 	add.w	r3, r7, #16
 8007536:	4618      	mov	r0, r3
 8007538:	f000 fb83 	bl	8007c42 <verify_PEC15>
 800753c:	4603      	mov	r3, r0
 800753e:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
			sideB_auxC_PECflag = verify_PEC15(sideB_auxC);
 8007542:	f107 0308 	add.w	r3, r7, #8
 8007546:	4618      	mov	r0, r3
 8007548:	f000 fb7b 	bl	8007c42 <verify_PEC15>
 800754c:	4603      	mov	r3, r0
 800754e:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
			sideB_auxD_PECflag = verify_PEC15(sideB_auxD);
 8007552:	463b      	mov	r3, r7
 8007554:	4618      	mov	r0, r3
 8007556:	f000 fb74 	bl	8007c42 <verify_PEC15>
 800755a:	4603      	mov	r3, r0
 800755c:	f887 306a 	strb.w	r3, [r7, #106]	@ 0x6a

			if(sideA_auxA_PECflag == 2 &&
 8007560:	f897 3071 	ldrb.w	r3, [r7, #113]	@ 0x71
 8007564:	2b02      	cmp	r3, #2
 8007566:	d11f      	bne.n	80075a8 <aux_register_test+0x584>
 8007568:	f897 3070 	ldrb.w	r3, [r7, #112]	@ 0x70
 800756c:	2b02      	cmp	r3, #2
 800756e:	d11b      	bne.n	80075a8 <aux_register_test+0x584>
			   sideA_auxB_PECflag == 2 &&
 8007570:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8007574:	2b02      	cmp	r3, #2
 8007576:	d117      	bne.n	80075a8 <aux_register_test+0x584>
			   sideA_auxC_PECflag == 2 &&
 8007578:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 800757c:	2b02      	cmp	r3, #2
 800757e:	d113      	bne.n	80075a8 <aux_register_test+0x584>
			   sideA_auxD_PECflag == 2 &&
 8007580:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8007584:	2b02      	cmp	r3, #2
 8007586:	d10f      	bne.n	80075a8 <aux_register_test+0x584>
			   sideB_auxA_PECflag == 2 &&
 8007588:	f897 306c 	ldrb.w	r3, [r7, #108]	@ 0x6c
 800758c:	2b02      	cmp	r3, #2
 800758e:	d10b      	bne.n	80075a8 <aux_register_test+0x584>
			   sideB_auxB_PECflag == 2 &&
 8007590:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 8007594:	2b02      	cmp	r3, #2
 8007596:	d107      	bne.n	80075a8 <aux_register_test+0x584>
			   sideB_auxC_PECflag == 2 &&
 8007598:	f897 306a 	ldrb.w	r3, [r7, #106]	@ 0x6a
 800759c:	2b02      	cmp	r3, #2
 800759e:	d103      	bne.n	80075a8 <aux_register_test+0x584>
			   sideB_auxD_PECflag == 2)
			{
				subAttempts = 13;
 80075a0:	230d      	movs	r3, #13
 80075a2:	f887 3076 	strb.w	r3, [r7, #118]	@ 0x76
 80075a6:	e007      	b.n	80075b8 <aux_register_test+0x594>
			}
			else {
				subAttempts++;
 80075a8:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 80075ac:	3301      	adds	r3, #1
 80075ae:	f887 3076 	strb.w	r3, [r7, #118]	@ 0x76
				wait(1);
 80075b2:	2001      	movs	r0, #1
 80075b4:	f001 fe40 	bl	8009238 <wait>
		while(subAttempts < ATTEMPT_LIMIT) {
 80075b8:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 80075bc:	2b09      	cmp	r3, #9
 80075be:	f67f af44 	bls.w	800744a <aux_register_test+0x426>
			}
		}
		if(subAttempts != 13) { error_loop(ERROR_PEC, 0, 0); }
 80075c2:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 80075c6:	2b0d      	cmp	r3, #13
 80075c8:	d004      	beq.n	80075d4 <aux_register_test+0x5b0>
 80075ca:	2200      	movs	r2, #0
 80075cc:	2100      	movs	r1, #0
 80075ce:	2056      	movs	r0, #86	@ 0x56
 80075d0:	f7fd f848 	bl	8004664 <error_loop>

		sideA_gpio[0] = (sideA_auxA[1] << 8) | sideA_auxA[0];
 80075d4:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 80075d8:	b21b      	sxth	r3, r3
 80075da:	021b      	lsls	r3, r3, #8
 80075dc:	b21a      	sxth	r2, r3
 80075de:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 80075e2:	b21b      	sxth	r3, r3
 80075e4:	4313      	orrs	r3, r2
 80075e6:	b21b      	sxth	r3, r3
 80075e8:	b29b      	uxth	r3, r3
 80075ea:	f8a7 3054 	strh.w	r3, [r7, #84]	@ 0x54
		sideA_gpio[1] = (sideA_auxA[3] << 8) | sideA_auxA[2];
 80075ee:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 80075f2:	b21b      	sxth	r3, r3
 80075f4:	021b      	lsls	r3, r3, #8
 80075f6:	b21a      	sxth	r2, r3
 80075f8:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 80075fc:	b21b      	sxth	r3, r3
 80075fe:	4313      	orrs	r3, r2
 8007600:	b21b      	sxth	r3, r3
 8007602:	b29b      	uxth	r3, r3
 8007604:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
		sideA_gpio[2] = (sideA_auxA[5] << 8) | sideA_auxA[4];
 8007608:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 800760c:	b21b      	sxth	r3, r3
 800760e:	021b      	lsls	r3, r3, #8
 8007610:	b21a      	sxth	r2, r3
 8007612:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 8007616:	b21b      	sxth	r3, r3
 8007618:	4313      	orrs	r3, r2
 800761a:	b21b      	sxth	r3, r3
 800761c:	b29b      	uxth	r3, r3
 800761e:	f8a7 3058 	strh.w	r3, [r7, #88]	@ 0x58
		sideA_gpio[3] = (sideA_auxB[1] << 8) | sideA_auxB[0];
 8007622:	f897 3031 	ldrb.w	r3, [r7, #49]	@ 0x31
 8007626:	b21b      	sxth	r3, r3
 8007628:	021b      	lsls	r3, r3, #8
 800762a:	b21a      	sxth	r2, r3
 800762c:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8007630:	b21b      	sxth	r3, r3
 8007632:	4313      	orrs	r3, r2
 8007634:	b21b      	sxth	r3, r3
 8007636:	b29b      	uxth	r3, r3
 8007638:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
		sideA_gpio[4] = (sideA_auxB[3] << 8) | sideA_auxB[2];
 800763c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8007640:	b21b      	sxth	r3, r3
 8007642:	021b      	lsls	r3, r3, #8
 8007644:	b21a      	sxth	r2, r3
 8007646:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 800764a:	b21b      	sxth	r3, r3
 800764c:	4313      	orrs	r3, r2
 800764e:	b21b      	sxth	r3, r3
 8007650:	b29b      	uxth	r3, r3
 8007652:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c
		sideA_gpio[5] = (sideA_auxB[5] << 8) | sideA_auxB[4];
 8007656:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 800765a:	b21b      	sxth	r3, r3
 800765c:	021b      	lsls	r3, r3, #8
 800765e:	b21a      	sxth	r2, r3
 8007660:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8007664:	b21b      	sxth	r3, r3
 8007666:	4313      	orrs	r3, r2
 8007668:	b21b      	sxth	r3, r3
 800766a:	b29b      	uxth	r3, r3
 800766c:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
		sideA_gpio[6] = (sideA_auxC[1] << 8) | sideA_auxC[0];
 8007670:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8007674:	b21b      	sxth	r3, r3
 8007676:	021b      	lsls	r3, r3, #8
 8007678:	b21a      	sxth	r2, r3
 800767a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800767e:	b21b      	sxth	r3, r3
 8007680:	4313      	orrs	r3, r2
 8007682:	b21b      	sxth	r3, r3
 8007684:	b29b      	uxth	r3, r3
 8007686:	f8a7 3060 	strh.w	r3, [r7, #96]	@ 0x60
		sideA_gpio[7] = (sideA_auxC[3] << 8) | sideA_auxC[2];
 800768a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800768e:	b21b      	sxth	r3, r3
 8007690:	021b      	lsls	r3, r3, #8
 8007692:	b21a      	sxth	r2, r3
 8007694:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8007698:	b21b      	sxth	r3, r3
 800769a:	4313      	orrs	r3, r2
 800769c:	b21b      	sxth	r3, r3
 800769e:	b29b      	uxth	r3, r3
 80076a0:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
		sideA_gpio[8] = (sideA_auxC[5] << 8) | sideA_auxC[4];
 80076a4:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 80076a8:	b21b      	sxth	r3, r3
 80076aa:	021b      	lsls	r3, r3, #8
 80076ac:	b21a      	sxth	r2, r3
 80076ae:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80076b2:	b21b      	sxth	r3, r3
 80076b4:	4313      	orrs	r3, r2
 80076b6:	b21b      	sxth	r3, r3
 80076b8:	b29b      	uxth	r3, r3
 80076ba:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
		sideA_gpio[9] = (sideA_auxD[1] << 8) | sideA_auxD[0];
 80076be:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80076c2:	b21b      	sxth	r3, r3
 80076c4:	021b      	lsls	r3, r3, #8
 80076c6:	b21a      	sxth	r2, r3
 80076c8:	f897 3020 	ldrb.w	r3, [r7, #32]
 80076cc:	b21b      	sxth	r3, r3
 80076ce:	4313      	orrs	r3, r2
 80076d0:	b21b      	sxth	r3, r3
 80076d2:	b29b      	uxth	r3, r3
 80076d4:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66

		sideB_gpio[0] = (sideB_auxA[1] << 8) | sideB_auxA[0];
 80076d8:	7e7b      	ldrb	r3, [r7, #25]
 80076da:	b21b      	sxth	r3, r3
 80076dc:	021b      	lsls	r3, r3, #8
 80076de:	b21a      	sxth	r2, r3
 80076e0:	7e3b      	ldrb	r3, [r7, #24]
 80076e2:	b21b      	sxth	r3, r3
 80076e4:	4313      	orrs	r3, r2
 80076e6:	b21b      	sxth	r3, r3
 80076e8:	b29b      	uxth	r3, r3
 80076ea:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
		sideB_gpio[1] = (sideB_auxA[3] << 8) | sideB_auxA[2];
 80076ee:	7efb      	ldrb	r3, [r7, #27]
 80076f0:	b21b      	sxth	r3, r3
 80076f2:	021b      	lsls	r3, r3, #8
 80076f4:	b21a      	sxth	r2, r3
 80076f6:	7ebb      	ldrb	r3, [r7, #26]
 80076f8:	b21b      	sxth	r3, r3
 80076fa:	4313      	orrs	r3, r2
 80076fc:	b21b      	sxth	r3, r3
 80076fe:	b29b      	uxth	r3, r3
 8007700:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
		sideB_gpio[2] = (sideB_auxA[5] << 8) | sideB_auxA[4];
 8007704:	7f7b      	ldrb	r3, [r7, #29]
 8007706:	b21b      	sxth	r3, r3
 8007708:	021b      	lsls	r3, r3, #8
 800770a:	b21a      	sxth	r2, r3
 800770c:	7f3b      	ldrb	r3, [r7, #28]
 800770e:	b21b      	sxth	r3, r3
 8007710:	4313      	orrs	r3, r2
 8007712:	b21b      	sxth	r3, r3
 8007714:	b29b      	uxth	r3, r3
 8007716:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
		sideB_gpio[3] = (sideB_auxB[1] << 8) | sideB_auxB[0];
 800771a:	7c7b      	ldrb	r3, [r7, #17]
 800771c:	b21b      	sxth	r3, r3
 800771e:	021b      	lsls	r3, r3, #8
 8007720:	b21a      	sxth	r2, r3
 8007722:	7c3b      	ldrb	r3, [r7, #16]
 8007724:	b21b      	sxth	r3, r3
 8007726:	4313      	orrs	r3, r2
 8007728:	b21b      	sxth	r3, r3
 800772a:	b29b      	uxth	r3, r3
 800772c:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
		sideB_gpio[4] = (sideB_auxB[3] << 8) | sideB_auxB[2];
 8007730:	7cfb      	ldrb	r3, [r7, #19]
 8007732:	b21b      	sxth	r3, r3
 8007734:	021b      	lsls	r3, r3, #8
 8007736:	b21a      	sxth	r2, r3
 8007738:	7cbb      	ldrb	r3, [r7, #18]
 800773a:	b21b      	sxth	r3, r3
 800773c:	4313      	orrs	r3, r2
 800773e:	b21b      	sxth	r3, r3
 8007740:	b29b      	uxth	r3, r3
 8007742:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
		sideB_gpio[5] = (sideB_auxB[5] << 8) | sideB_auxB[4];
 8007746:	7d7b      	ldrb	r3, [r7, #21]
 8007748:	b21b      	sxth	r3, r3
 800774a:	021b      	lsls	r3, r3, #8
 800774c:	b21a      	sxth	r2, r3
 800774e:	7d3b      	ldrb	r3, [r7, #20]
 8007750:	b21b      	sxth	r3, r3
 8007752:	4313      	orrs	r3, r2
 8007754:	b21b      	sxth	r3, r3
 8007756:	b29b      	uxth	r3, r3
 8007758:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
		sideB_gpio[6] = (sideB_auxC[1] << 8) | sideB_auxC[0];
 800775c:	7a7b      	ldrb	r3, [r7, #9]
 800775e:	b21b      	sxth	r3, r3
 8007760:	021b      	lsls	r3, r3, #8
 8007762:	b21a      	sxth	r2, r3
 8007764:	7a3b      	ldrb	r3, [r7, #8]
 8007766:	b21b      	sxth	r3, r3
 8007768:	4313      	orrs	r3, r2
 800776a:	b21b      	sxth	r3, r3
 800776c:	b29b      	uxth	r3, r3
 800776e:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
		sideB_gpio[7] = (sideB_auxC[3] << 8) | sideB_auxC[2];
 8007772:	7afb      	ldrb	r3, [r7, #11]
 8007774:	b21b      	sxth	r3, r3
 8007776:	021b      	lsls	r3, r3, #8
 8007778:	b21a      	sxth	r2, r3
 800777a:	7abb      	ldrb	r3, [r7, #10]
 800777c:	b21b      	sxth	r3, r3
 800777e:	4313      	orrs	r3, r2
 8007780:	b21b      	sxth	r3, r3
 8007782:	b29b      	uxth	r3, r3
 8007784:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
		sideB_gpio[8] = (sideB_auxC[5] << 8) | sideB_auxC[4];
 8007788:	7b7b      	ldrb	r3, [r7, #13]
 800778a:	b21b      	sxth	r3, r3
 800778c:	021b      	lsls	r3, r3, #8
 800778e:	b21a      	sxth	r2, r3
 8007790:	7b3b      	ldrb	r3, [r7, #12]
 8007792:	b21b      	sxth	r3, r3
 8007794:	4313      	orrs	r3, r2
 8007796:	b21b      	sxth	r3, r3
 8007798:	b29b      	uxth	r3, r3
 800779a:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
		sideB_gpio[9] = (sideB_auxD[1] << 8) | sideB_auxD[0];
 800779e:	787b      	ldrb	r3, [r7, #1]
 80077a0:	b21b      	sxth	r3, r3
 80077a2:	021b      	lsls	r3, r3, #8
 80077a4:	b21a      	sxth	r2, r3
 80077a6:	783b      	ldrb	r3, [r7, #0]
 80077a8:	b21b      	sxth	r3, r3
 80077aa:	4313      	orrs	r3, r2
 80077ac:	b21b      	sxth	r3, r3
 80077ae:	b29b      	uxth	r3, r3
 80077b0:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52

		uint8_t badOutputFlag = 0;
 80077b4:	2300      	movs	r3, #0
 80077b6:	f887 3073 	strb.w	r3, [r7, #115]	@ 0x73
		for(uint8_t i = 0; i < 10; i++) {
 80077ba:	2300      	movs	r3, #0
 80077bc:	f887 3072 	strb.w	r3, [r7, #114]	@ 0x72
 80077c0:	e020      	b.n	8007804 <aux_register_test+0x7e0>
			if(sideA_gpio[i] != 0x6AAA) { badOutputFlag = 1; }
 80077c2:	f897 3072 	ldrb.w	r3, [r7, #114]	@ 0x72
 80077c6:	005b      	lsls	r3, r3, #1
 80077c8:	3378      	adds	r3, #120	@ 0x78
 80077ca:	443b      	add	r3, r7
 80077cc:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 80077d0:	f646 22aa 	movw	r2, #27306	@ 0x6aaa
 80077d4:	4293      	cmp	r3, r2
 80077d6:	d002      	beq.n	80077de <aux_register_test+0x7ba>
 80077d8:	2301      	movs	r3, #1
 80077da:	f887 3073 	strb.w	r3, [r7, #115]	@ 0x73

			if(sideB_gpio[i] != 0x6AAA) { badOutputFlag = 1; }
 80077de:	f897 3072 	ldrb.w	r3, [r7, #114]	@ 0x72
 80077e2:	005b      	lsls	r3, r3, #1
 80077e4:	3378      	adds	r3, #120	@ 0x78
 80077e6:	443b      	add	r3, r7
 80077e8:	f833 3c38 	ldrh.w	r3, [r3, #-56]
 80077ec:	f646 22aa 	movw	r2, #27306	@ 0x6aaa
 80077f0:	4293      	cmp	r3, r2
 80077f2:	d002      	beq.n	80077fa <aux_register_test+0x7d6>
 80077f4:	2301      	movs	r3, #1
 80077f6:	f887 3073 	strb.w	r3, [r7, #115]	@ 0x73
		for(uint8_t i = 0; i < 10; i++) {
 80077fa:	f897 3072 	ldrb.w	r3, [r7, #114]	@ 0x72
 80077fe:	3301      	adds	r3, #1
 8007800:	f887 3072 	strb.w	r3, [r7, #114]	@ 0x72
 8007804:	f897 3072 	ldrb.w	r3, [r7, #114]	@ 0x72
 8007808:	2b09      	cmp	r3, #9
 800780a:	d9da      	bls.n	80077c2 <aux_register_test+0x79e>
		}

		if(!badOutputFlag) { attempts = 13; }
 800780c:	f897 3073 	ldrb.w	r3, [r7, #115]	@ 0x73
 8007810:	2b00      	cmp	r3, #0
 8007812:	d103      	bne.n	800781c <aux_register_test+0x7f8>
 8007814:	230d      	movs	r3, #13
 8007816:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 800781a:	e00a      	b.n	8007832 <aux_register_test+0x80e>

		else {
			attempts++;
 800781c:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8007820:	3301      	adds	r3, #1
 8007822:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
			subAttempts = 0;
 8007826:	2300      	movs	r3, #0
 8007828:	f887 3076 	strb.w	r3, [r7, #118]	@ 0x76
			wait(1);
 800782c:	2001      	movs	r0, #1
 800782e:	f001 fd03 	bl	8009238 <wait>
	while(attempts < ATTEMPT_LIMIT) {
 8007832:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8007836:	2b09      	cmp	r3, #9
 8007838:	f67f aebe 	bls.w	80075b8 <aux_register_test+0x594>
		}
	}
	if(attempts != 13) { error_loop(ERROR_AXST, 0, 0); }
 800783c:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8007840:	2b0d      	cmp	r3, #13
 8007842:	d004      	beq.n	800784e <aux_register_test+0x82a>
 8007844:	2200      	movs	r2, #0
 8007846:	2100      	movs	r1, #0
 8007848:	204e      	movs	r0, #78	@ 0x4e
 800784a:	f7fc ff0b 	bl	8004664 <error_loop>
}
 800784e:	bf00      	nop
 8007850:	3778      	adds	r7, #120	@ 0x78
 8007852:	46bd      	mov	sp, r7
 8007854:	bd80      	pop	{r7, pc}

08007856 <overlap_cell_measurement_test>:


void overlap_cell_measurement_test(void)
{
 8007856:	b580      	push	{r7, lr}
 8007858:	b090      	sub	sp, #64	@ 0x40
 800785a:	af00      	add	r7, sp, #0
	uint8_t attempts = 0;
 800785c:	2300      	movs	r3, #0
 800785e:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	uint8_t subAttempts = 0;
 8007862:	2300      	movs	r3, #0
 8007864:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
	uint8_t sideA_cellVoltageE_PECflag;

	uint8_t sideB_cellVoltageC_PECflag;
	uint8_t sideB_cellVoltageE_PECflag;

	while(attempts < ATTEMPT_LIMIT) {
 8007868:	e14a      	b.n	8007b00 <overlap_cell_measurement_test+0x2aa>
		while(subAttempts < ATTEMPT_LIMIT) {
			CLRCELL(SIDE_A);
 800786a:	2001      	movs	r0, #1
 800786c:	f000 feaa 	bl	80085c4 <CLRCELL>
			CLRCELL(SIDE_B);
 8007870:	2000      	movs	r0, #0
 8007872:	f000 fea7 	bl	80085c4 <CLRCELL>
			wait(3);
 8007876:	2003      	movs	r0, #3
 8007878:	f001 fcde 	bl	8009238 <wait>

			ADOL(SIDE_A);
 800787c:	2001      	movs	r0, #1
 800787e:	f000 fd8b 	bl	8008398 <ADOL>
			ADOL(SIDE_B);
 8007882:	2000      	movs	r0, #0
 8007884:	f000 fd88 	bl	8008398 <ADOL>
			wait(3);
 8007888:	2003      	movs	r0, #3
 800788a:	f001 fcd5 	bl	8009238 <wait>

			RDCVC(sideA_cellVoltageC, SIDE_A);
 800788e:	f107 0318 	add.w	r3, r7, #24
 8007892:	2101      	movs	r1, #1
 8007894:	4618      	mov	r0, r3
 8007896:	f000 fbe9 	bl	800806c <RDCVC>
			RDCVC(sideB_cellVoltageC, SIDE_B);
 800789a:	f107 0308 	add.w	r3, r7, #8
 800789e:	2100      	movs	r1, #0
 80078a0:	4618      	mov	r0, r3
 80078a2:	f000 fbe3 	bl	800806c <RDCVC>
			wait(1);
 80078a6:	2001      	movs	r0, #1
 80078a8:	f001 fcc6 	bl	8009238 <wait>
			RDCVE(sideA_cellVoltageE, SIDE_A);
 80078ac:	f107 0310 	add.w	r3, r7, #16
 80078b0:	2101      	movs	r1, #1
 80078b2:	4618      	mov	r0, r3
 80078b4:	f000 fc22 	bl	80080fc <RDCVE>
			RDCVE(sideB_cellVoltageE, SIDE_B);
 80078b8:	463b      	mov	r3, r7
 80078ba:	2100      	movs	r1, #0
 80078bc:	4618      	mov	r0, r3
 80078be:	f000 fc1d 	bl	80080fc <RDCVE>
			wait(1);
 80078c2:	2001      	movs	r0, #1
 80078c4:	f001 fcb8 	bl	8009238 <wait>

			sideA_cellVoltageC_PECflag = verify_PEC15(sideA_cellVoltageC);
 80078c8:	f107 0318 	add.w	r3, r7, #24
 80078cc:	4618      	mov	r0, r3
 80078ce:	f000 f9b8 	bl	8007c42 <verify_PEC15>
 80078d2:	4603      	mov	r3, r0
 80078d4:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
			sideA_cellVoltageE_PECflag = verify_PEC15(sideA_cellVoltageE);
 80078d8:	f107 0310 	add.w	r3, r7, #16
 80078dc:	4618      	mov	r0, r3
 80078de:	f000 f9b0 	bl	8007c42 <verify_PEC15>
 80078e2:	4603      	mov	r3, r0
 80078e4:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
			sideB_cellVoltageC_PECflag = verify_PEC15(sideB_cellVoltageC);
 80078e8:	f107 0308 	add.w	r3, r7, #8
 80078ec:	4618      	mov	r0, r3
 80078ee:	f000 f9a8 	bl	8007c42 <verify_PEC15>
 80078f2:	4603      	mov	r3, r0
 80078f4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
			sideB_cellVoltageE_PECflag = verify_PEC15(sideB_cellVoltageE);
 80078f8:	463b      	mov	r3, r7
 80078fa:	4618      	mov	r0, r3
 80078fc:	f000 f9a1 	bl	8007c42 <verify_PEC15>
 8007900:	4603      	mov	r3, r0
 8007902:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22

			if(sideA_cellVoltageC_PECflag == 2 &&
 8007906:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800790a:	2b02      	cmp	r3, #2
 800790c:	d133      	bne.n	8007976 <overlap_cell_measurement_test+0x120>
 800790e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8007912:	2b02      	cmp	r3, #2
 8007914:	d12f      	bne.n	8007976 <overlap_cell_measurement_test+0x120>
			   sideA_cellVoltageE_PECflag == 2 &&
 8007916:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800791a:	2b02      	cmp	r3, #2
 800791c:	d12b      	bne.n	8007976 <overlap_cell_measurement_test+0x120>
			   sideB_cellVoltageC_PECflag == 2 &&
 800791e:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8007922:	2b02      	cmp	r3, #2
 8007924:	d127      	bne.n	8007976 <overlap_cell_measurement_test+0x120>
			   sideB_cellVoltageE_PECflag == 2 &&
			   sideA_cellVoltageC[1] != 0xFF &&
 8007926:	7e7b      	ldrb	r3, [r7, #25]
			   sideB_cellVoltageE_PECflag == 2 &&
 8007928:	2bff      	cmp	r3, #255	@ 0xff
 800792a:	d024      	beq.n	8007976 <overlap_cell_measurement_test+0x120>
			   sideA_cellVoltageC[3] != 0xFF &&
 800792c:	7efb      	ldrb	r3, [r7, #27]
			   sideA_cellVoltageC[1] != 0xFF &&
 800792e:	2bff      	cmp	r3, #255	@ 0xff
 8007930:	d021      	beq.n	8007976 <overlap_cell_measurement_test+0x120>
			   sideA_cellVoltageC[5] != 0xFF &&
 8007932:	7f7b      	ldrb	r3, [r7, #29]
			   sideA_cellVoltageC[3] != 0xFF &&
 8007934:	2bff      	cmp	r3, #255	@ 0xff
 8007936:	d01e      	beq.n	8007976 <overlap_cell_measurement_test+0x120>
			   sideB_cellVoltageC[1] != 0xFF &&
 8007938:	7a7b      	ldrb	r3, [r7, #9]
			   sideA_cellVoltageC[5] != 0xFF &&
 800793a:	2bff      	cmp	r3, #255	@ 0xff
 800793c:	d01b      	beq.n	8007976 <overlap_cell_measurement_test+0x120>
			   sideB_cellVoltageC[3] != 0xFF &&
 800793e:	7afb      	ldrb	r3, [r7, #11]
			   sideB_cellVoltageC[1] != 0xFF &&
 8007940:	2bff      	cmp	r3, #255	@ 0xff
 8007942:	d018      	beq.n	8007976 <overlap_cell_measurement_test+0x120>
			   sideB_cellVoltageC[5] != 0xFF &&
 8007944:	7b7b      	ldrb	r3, [r7, #13]
			   sideB_cellVoltageC[3] != 0xFF &&
 8007946:	2bff      	cmp	r3, #255	@ 0xff
 8007948:	d015      	beq.n	8007976 <overlap_cell_measurement_test+0x120>
			   sideA_cellVoltageE[1] != 0xFF &&
 800794a:	7c7b      	ldrb	r3, [r7, #17]
			   sideB_cellVoltageC[5] != 0xFF &&
 800794c:	2bff      	cmp	r3, #255	@ 0xff
 800794e:	d012      	beq.n	8007976 <overlap_cell_measurement_test+0x120>
			   sideA_cellVoltageE[3] != 0xFF &&
 8007950:	7cfb      	ldrb	r3, [r7, #19]
			   sideA_cellVoltageE[1] != 0xFF &&
 8007952:	2bff      	cmp	r3, #255	@ 0xff
 8007954:	d00f      	beq.n	8007976 <overlap_cell_measurement_test+0x120>
			   sideA_cellVoltageE[5] != 0xFF &&
 8007956:	7d7b      	ldrb	r3, [r7, #21]
			   sideA_cellVoltageE[3] != 0xFF &&
 8007958:	2bff      	cmp	r3, #255	@ 0xff
 800795a:	d00c      	beq.n	8007976 <overlap_cell_measurement_test+0x120>
			   sideB_cellVoltageE[1] != 0xFF &&
 800795c:	787b      	ldrb	r3, [r7, #1]
			   sideA_cellVoltageE[5] != 0xFF &&
 800795e:	2bff      	cmp	r3, #255	@ 0xff
 8007960:	d009      	beq.n	8007976 <overlap_cell_measurement_test+0x120>
			   sideB_cellVoltageE[3] != 0xFF &&
 8007962:	78fb      	ldrb	r3, [r7, #3]
			   sideB_cellVoltageE[1] != 0xFF &&
 8007964:	2bff      	cmp	r3, #255	@ 0xff
 8007966:	d006      	beq.n	8007976 <overlap_cell_measurement_test+0x120>
			   sideB_cellVoltageE[5] != 0xFF)
 8007968:	797b      	ldrb	r3, [r7, #5]
			   sideB_cellVoltageE[3] != 0xFF &&
 800796a:	2bff      	cmp	r3, #255	@ 0xff
 800796c:	d003      	beq.n	8007976 <overlap_cell_measurement_test+0x120>
			{
				subAttempts = 13;
 800796e:	230d      	movs	r3, #13
 8007970:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
 8007974:	e007      	b.n	8007986 <overlap_cell_measurement_test+0x130>
			}
			else {
				subAttempts++;
 8007976:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 800797a:	3301      	adds	r3, #1
 800797c:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
				wait(1);
 8007980:	2001      	movs	r0, #1
 8007982:	f001 fc59 	bl	8009238 <wait>
		while(subAttempts < ATTEMPT_LIMIT) {
 8007986:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 800798a:	2b09      	cmp	r3, #9
 800798c:	f67f af6d 	bls.w	800786a <overlap_cell_measurement_test+0x14>
			}
		}
		if(subAttempts != 13) { error_loop(ERROR_PEC, 0, 0); }
 8007990:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8007994:	2b0d      	cmp	r3, #13
 8007996:	d004      	beq.n	80079a2 <overlap_cell_measurement_test+0x14c>
 8007998:	2200      	movs	r2, #0
 800799a:	2100      	movs	r1, #0
 800799c:	2056      	movs	r0, #86	@ 0x56
 800799e:	f7fc fe61 	bl	8004664 <error_loop>

		sideA_cell7_adc1 = (sideA_cellVoltageC[3] << 8) | sideA_cellVoltageC[2];
 80079a2:	7efb      	ldrb	r3, [r7, #27]
 80079a4:	b21b      	sxth	r3, r3
 80079a6:	021b      	lsls	r3, r3, #8
 80079a8:	b21a      	sxth	r2, r3
 80079aa:	7ebb      	ldrb	r3, [r7, #26]
 80079ac:	b21b      	sxth	r3, r3
 80079ae:	4313      	orrs	r3, r2
 80079b0:	b21b      	sxth	r3, r3
 80079b2:	87bb      	strh	r3, [r7, #60]	@ 0x3c
		sideA_cell7_adc2 = (sideA_cellVoltageC[1] << 8) | sideA_cellVoltageC[0];
 80079b4:	7e7b      	ldrb	r3, [r7, #25]
 80079b6:	b21b      	sxth	r3, r3
 80079b8:	021b      	lsls	r3, r3, #8
 80079ba:	b21a      	sxth	r2, r3
 80079bc:	7e3b      	ldrb	r3, [r7, #24]
 80079be:	b21b      	sxth	r3, r3
 80079c0:	4313      	orrs	r3, r2
 80079c2:	b21b      	sxth	r3, r3
 80079c4:	877b      	strh	r3, [r7, #58]	@ 0x3a
		sideA_cell13_adc2 = (sideA_cellVoltageE[3] << 8) | sideA_cellVoltageE[2];
 80079c6:	7cfb      	ldrb	r3, [r7, #19]
 80079c8:	b21b      	sxth	r3, r3
 80079ca:	021b      	lsls	r3, r3, #8
 80079cc:	b21a      	sxth	r2, r3
 80079ce:	7cbb      	ldrb	r3, [r7, #18]
 80079d0:	b21b      	sxth	r3, r3
 80079d2:	4313      	orrs	r3, r2
 80079d4:	b21b      	sxth	r3, r3
 80079d6:	873b      	strh	r3, [r7, #56]	@ 0x38
		sideA_cell13_adc3 = (sideA_cellVoltageE[1] << 8) | sideA_cellVoltageE[0];
 80079d8:	7c7b      	ldrb	r3, [r7, #17]
 80079da:	b21b      	sxth	r3, r3
 80079dc:	021b      	lsls	r3, r3, #8
 80079de:	b21a      	sxth	r2, r3
 80079e0:	7c3b      	ldrb	r3, [r7, #16]
 80079e2:	b21b      	sxth	r3, r3
 80079e4:	4313      	orrs	r3, r2
 80079e6:	b21b      	sxth	r3, r3
 80079e8:	86fb      	strh	r3, [r7, #54]	@ 0x36

		sideB_cell7_adc1 = (sideB_cellVoltageC[3] << 8) | sideB_cellVoltageC[2];
 80079ea:	7afb      	ldrb	r3, [r7, #11]
 80079ec:	b21b      	sxth	r3, r3
 80079ee:	021b      	lsls	r3, r3, #8
 80079f0:	b21a      	sxth	r2, r3
 80079f2:	7abb      	ldrb	r3, [r7, #10]
 80079f4:	b21b      	sxth	r3, r3
 80079f6:	4313      	orrs	r3, r2
 80079f8:	b21b      	sxth	r3, r3
 80079fa:	86bb      	strh	r3, [r7, #52]	@ 0x34
		sideB_cell7_adc2 = (sideB_cellVoltageC[1] << 8) | sideB_cellVoltageC[0];
 80079fc:	7a7b      	ldrb	r3, [r7, #9]
 80079fe:	b21b      	sxth	r3, r3
 8007a00:	021b      	lsls	r3, r3, #8
 8007a02:	b21a      	sxth	r2, r3
 8007a04:	7a3b      	ldrb	r3, [r7, #8]
 8007a06:	b21b      	sxth	r3, r3
 8007a08:	4313      	orrs	r3, r2
 8007a0a:	b21b      	sxth	r3, r3
 8007a0c:	867b      	strh	r3, [r7, #50]	@ 0x32
		sideB_cell13_adc2 = (sideB_cellVoltageE[3] << 8) | sideB_cellVoltageE[2];
 8007a0e:	78fb      	ldrb	r3, [r7, #3]
 8007a10:	b21b      	sxth	r3, r3
 8007a12:	021b      	lsls	r3, r3, #8
 8007a14:	b21a      	sxth	r2, r3
 8007a16:	78bb      	ldrb	r3, [r7, #2]
 8007a18:	b21b      	sxth	r3, r3
 8007a1a:	4313      	orrs	r3, r2
 8007a1c:	b21b      	sxth	r3, r3
 8007a1e:	863b      	strh	r3, [r7, #48]	@ 0x30
		sideB_cell13_adc3 = (sideB_cellVoltageE[1] << 8) | sideB_cellVoltageE[0];
 8007a20:	787b      	ldrb	r3, [r7, #1]
 8007a22:	b21b      	sxth	r3, r3
 8007a24:	021b      	lsls	r3, r3, #8
 8007a26:	b21a      	sxth	r2, r3
 8007a28:	783b      	ldrb	r3, [r7, #0]
 8007a2a:	b21b      	sxth	r3, r3
 8007a2c:	4313      	orrs	r3, r2
 8007a2e:	b21b      	sxth	r3, r3
 8007a30:	85fb      	strh	r3, [r7, #46]	@ 0x2e

		sideA_cell7_difference = (uint16_t)fabsf((float)sideA_cell7_adc1 - (float)sideA_cell7_adc2);
 8007a32:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8007a34:	ee07 3a90 	vmov	s15, r3
 8007a38:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007a3c:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8007a3e:	ee07 3a90 	vmov	s15, r3
 8007a42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a46:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007a4a:	eef0 7ae7 	vabs.f32	s15, s15
 8007a4e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007a52:	ee17 3a90 	vmov	r3, s15
 8007a56:	85bb      	strh	r3, [r7, #44]	@ 0x2c
		sideA_cell13_difference = (uint16_t)fabsf((float)sideA_cell13_adc2 - (float)sideA_cell13_adc3);
 8007a58:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8007a5a:	ee07 3a90 	vmov	s15, r3
 8007a5e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007a62:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8007a64:	ee07 3a90 	vmov	s15, r3
 8007a68:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a6c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007a70:	eef0 7ae7 	vabs.f32	s15, s15
 8007a74:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007a78:	ee17 3a90 	vmov	r3, s15
 8007a7c:	857b      	strh	r3, [r7, #42]	@ 0x2a
		sideB_cell7_difference = (uint16_t)fabsf((float)sideB_cell7_adc1 - (float)sideB_cell7_adc2);
 8007a7e:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8007a80:	ee07 3a90 	vmov	s15, r3
 8007a84:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007a88:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8007a8a:	ee07 3a90 	vmov	s15, r3
 8007a8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a92:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007a96:	eef0 7ae7 	vabs.f32	s15, s15
 8007a9a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007a9e:	ee17 3a90 	vmov	r3, s15
 8007aa2:	853b      	strh	r3, [r7, #40]	@ 0x28
		sideB_cell13_difference = (uint16_t)fabsf((float)sideB_cell13_adc2 - (float)sideB_cell13_adc3);
 8007aa4:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8007aa6:	ee07 3a90 	vmov	s15, r3
 8007aaa:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007aae:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8007ab0:	ee07 3a90 	vmov	s15, r3
 8007ab4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ab8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007abc:	eef0 7ae7 	vabs.f32	s15, s15
 8007ac0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007ac4:	ee17 3a90 	vmov	r3, s15
 8007ac8:	84fb      	strh	r3, [r7, #38]	@ 0x26

		if(sideA_cell7_difference <= MAX_ADC_DELTA &&
 8007aca:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8007acc:	2b16      	cmp	r3, #22
 8007ace:	d80c      	bhi.n	8007aea <overlap_cell_measurement_test+0x294>
 8007ad0:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8007ad2:	2b16      	cmp	r3, #22
 8007ad4:	d809      	bhi.n	8007aea <overlap_cell_measurement_test+0x294>
		   sideA_cell13_difference <= MAX_ADC_DELTA &&
 8007ad6:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8007ad8:	2b16      	cmp	r3, #22
 8007ada:	d806      	bhi.n	8007aea <overlap_cell_measurement_test+0x294>
		   sideB_cell7_difference <= MAX_ADC_DELTA &&
 8007adc:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8007ade:	2b16      	cmp	r3, #22
 8007ae0:	d803      	bhi.n	8007aea <overlap_cell_measurement_test+0x294>
		   sideB_cell13_difference <= MAX_ADC_DELTA)
		{
			attempts = 13;
 8007ae2:	230d      	movs	r3, #13
 8007ae4:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8007ae8:	e00a      	b.n	8007b00 <overlap_cell_measurement_test+0x2aa>
		}
		else {
			attempts++;
 8007aea:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8007aee:	3301      	adds	r3, #1
 8007af0:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
			subAttempts = 0;
 8007af4:	2300      	movs	r3, #0
 8007af6:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
			wait(1);
 8007afa:	2001      	movs	r0, #1
 8007afc:	f001 fb9c 	bl	8009238 <wait>
	while(attempts < ATTEMPT_LIMIT) {
 8007b00:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8007b04:	2b09      	cmp	r3, #9
 8007b06:	f67f af3e 	bls.w	8007986 <overlap_cell_measurement_test+0x130>
		}
	}
	if(attempts != 13) { error_loop(ERROR_ADOL, 0, 0); }
 8007b0a:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8007b0e:	2b0d      	cmp	r3, #13
 8007b10:	d004      	beq.n	8007b1c <overlap_cell_measurement_test+0x2c6>
 8007b12:	2200      	movs	r2, #0
 8007b14:	2100      	movs	r1, #0
 8007b16:	204f      	movs	r0, #79	@ 0x4f
 8007b18:	f7fc fda4 	bl	8004664 <error_loop>
}
 8007b1c:	bf00      	nop
 8007b1e:	3740      	adds	r7, #64	@ 0x40
 8007b20:	46bd      	mov	sp, r7
 8007b22:	bd80      	pop	{r7, pc}

08007b24 <setup_PEC15>:
uint16_t PEC15_table[256];
uint16_t CRC15_Poly = 0x4599;


void setup_PEC15(void)
{
 8007b24:	b480      	push	{r7}
 8007b26:	b083      	sub	sp, #12
 8007b28:	af00      	add	r7, sp, #0
  uint16_t PEC15_seed = 16;
 8007b2a:	2310      	movs	r3, #16
 8007b2c:	80fb      	strh	r3, [r7, #6]

  for (uint16_t i = 0; i < 256; i++) {
 8007b2e:	2300      	movs	r3, #0
 8007b30:	80bb      	strh	r3, [r7, #4]
 8007b32:	e024      	b.n	8007b7e <setup_PEC15+0x5a>
    PEC15_seed = i << 7;
 8007b34:	88bb      	ldrh	r3, [r7, #4]
 8007b36:	01db      	lsls	r3, r3, #7
 8007b38:	80fb      	strh	r3, [r7, #6]

    for (uint8_t bit = 8; bit > 0; bit--){
 8007b3a:	2308      	movs	r3, #8
 8007b3c:	70fb      	strb	r3, [r7, #3]
 8007b3e:	e013      	b.n	8007b68 <setup_PEC15+0x44>
      if (PEC15_seed & 0x4000) {
 8007b40:	88fb      	ldrh	r3, [r7, #6]
 8007b42:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d008      	beq.n	8007b5c <setup_PEC15+0x38>
        PEC15_seed = ((PEC15_seed << 1));
 8007b4a:	88fb      	ldrh	r3, [r7, #6]
 8007b4c:	005b      	lsls	r3, r3, #1
 8007b4e:	80fb      	strh	r3, [r7, #6]
        PEC15_seed = (PEC15_seed ^ CRC15_Poly);
 8007b50:	4b10      	ldr	r3, [pc, #64]	@ (8007b94 <setup_PEC15+0x70>)
 8007b52:	881a      	ldrh	r2, [r3, #0]
 8007b54:	88fb      	ldrh	r3, [r7, #6]
 8007b56:	4053      	eors	r3, r2
 8007b58:	80fb      	strh	r3, [r7, #6]
 8007b5a:	e002      	b.n	8007b62 <setup_PEC15+0x3e>
      }
      else {
        PEC15_seed = ((PEC15_seed << 1));
 8007b5c:	88fb      	ldrh	r3, [r7, #6]
 8007b5e:	005b      	lsls	r3, r3, #1
 8007b60:	80fb      	strh	r3, [r7, #6]
    for (uint8_t bit = 8; bit > 0; bit--){
 8007b62:	78fb      	ldrb	r3, [r7, #3]
 8007b64:	3b01      	subs	r3, #1
 8007b66:	70fb      	strb	r3, [r7, #3]
 8007b68:	78fb      	ldrb	r3, [r7, #3]
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d1e8      	bne.n	8007b40 <setup_PEC15+0x1c>
      }
    }
    PEC15_table[i] = PEC15_seed & 0xFFFF;
 8007b6e:	88bb      	ldrh	r3, [r7, #4]
 8007b70:	4909      	ldr	r1, [pc, #36]	@ (8007b98 <setup_PEC15+0x74>)
 8007b72:	88fa      	ldrh	r2, [r7, #6]
 8007b74:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
  for (uint16_t i = 0; i < 256; i++) {
 8007b78:	88bb      	ldrh	r3, [r7, #4]
 8007b7a:	3301      	adds	r3, #1
 8007b7c:	80bb      	strh	r3, [r7, #4]
 8007b7e:	88bb      	ldrh	r3, [r7, #4]
 8007b80:	2bff      	cmp	r3, #255	@ 0xff
 8007b82:	d9d7      	bls.n	8007b34 <setup_PEC15+0x10>
  }
}
 8007b84:	bf00      	nop
 8007b86:	bf00      	nop
 8007b88:	370c      	adds	r7, #12
 8007b8a:	46bd      	mov	sp, r7
 8007b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b90:	4770      	bx	lr
 8007b92:	bf00      	nop
 8007b94:	20000004 	.word	0x20000004
 8007b98:	200001e4 	.word	0x200001e4

08007b9c <compute_PEC15>:


uint16_t compute_PEC15(uint8_t *data_ptr, uint8_t len)
{
 8007b9c:	b480      	push	{r7}
 8007b9e:	b085      	sub	sp, #20
 8007ba0:	af00      	add	r7, sp, #0
 8007ba2:	6078      	str	r0, [r7, #4]
 8007ba4:	460b      	mov	r3, r1
 8007ba6:	70fb      	strb	r3, [r7, #3]
  uint16_t PEC15_seed = 16;
 8007ba8:	2310      	movs	r3, #16
 8007baa:	81fb      	strh	r3, [r7, #14]
  uint16_t address;

  for (uint16_t i = 0; i < len; i++) {
 8007bac:	2300      	movs	r3, #0
 8007bae:	81bb      	strh	r3, [r7, #12]
 8007bb0:	e019      	b.n	8007be6 <compute_PEC15+0x4a>
    address = ((PEC15_seed >> 7) ^ data_ptr[i]) & 0xFF;
 8007bb2:	89fb      	ldrh	r3, [r7, #14]
 8007bb4:	09db      	lsrs	r3, r3, #7
 8007bb6:	b29b      	uxth	r3, r3
 8007bb8:	89ba      	ldrh	r2, [r7, #12]
 8007bba:	6879      	ldr	r1, [r7, #4]
 8007bbc:	440a      	add	r2, r1
 8007bbe:	7812      	ldrb	r2, [r2, #0]
 8007bc0:	4053      	eors	r3, r2
 8007bc2:	b29b      	uxth	r3, r3
 8007bc4:	b2db      	uxtb	r3, r3
 8007bc6:	817b      	strh	r3, [r7, #10]
    PEC15_seed = (PEC15_seed << 8 ) ^ PEC15_table[address];
 8007bc8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8007bcc:	021b      	lsls	r3, r3, #8
 8007bce:	b21a      	sxth	r2, r3
 8007bd0:	897b      	ldrh	r3, [r7, #10]
 8007bd2:	490c      	ldr	r1, [pc, #48]	@ (8007c04 <compute_PEC15+0x68>)
 8007bd4:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8007bd8:	b21b      	sxth	r3, r3
 8007bda:	4053      	eors	r3, r2
 8007bdc:	b21b      	sxth	r3, r3
 8007bde:	81fb      	strh	r3, [r7, #14]
  for (uint16_t i = 0; i < len; i++) {
 8007be0:	89bb      	ldrh	r3, [r7, #12]
 8007be2:	3301      	adds	r3, #1
 8007be4:	81bb      	strh	r3, [r7, #12]
 8007be6:	78fb      	ldrb	r3, [r7, #3]
 8007be8:	b29b      	uxth	r3, r3
 8007bea:	89ba      	ldrh	r2, [r7, #12]
 8007bec:	429a      	cmp	r2, r3
 8007bee:	d3e0      	bcc.n	8007bb2 <compute_PEC15+0x16>
  }
  return (PEC15_seed * 2);
 8007bf0:	89fb      	ldrh	r3, [r7, #14]
 8007bf2:	005b      	lsls	r3, r3, #1
 8007bf4:	b29b      	uxth	r3, r3
}
 8007bf6:	4618      	mov	r0, r3
 8007bf8:	3714      	adds	r7, #20
 8007bfa:	46bd      	mov	sp, r7
 8007bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c00:	4770      	bx	lr
 8007c02:	bf00      	nop
 8007c04:	200001e4 	.word	0x200001e4

08007c08 <append_PEC>:


void append_PEC(uint8_t *data_ptr, uint8_t len, uint16_t PEC)
{
 8007c08:	b480      	push	{r7}
 8007c0a:	b083      	sub	sp, #12
 8007c0c:	af00      	add	r7, sp, #0
 8007c0e:	6078      	str	r0, [r7, #4]
 8007c10:	460b      	mov	r3, r1
 8007c12:	70fb      	strb	r3, [r7, #3]
 8007c14:	4613      	mov	r3, r2
 8007c16:	803b      	strh	r3, [r7, #0]
  data_ptr[len] = (PEC >> 8) & 0xFF;
 8007c18:	883b      	ldrh	r3, [r7, #0]
 8007c1a:	0a1b      	lsrs	r3, r3, #8
 8007c1c:	b299      	uxth	r1, r3
 8007c1e:	78fb      	ldrb	r3, [r7, #3]
 8007c20:	687a      	ldr	r2, [r7, #4]
 8007c22:	4413      	add	r3, r2
 8007c24:	b2ca      	uxtb	r2, r1
 8007c26:	701a      	strb	r2, [r3, #0]
  data_ptr[len + 1] = PEC & 0xFF;
 8007c28:	78fb      	ldrb	r3, [r7, #3]
 8007c2a:	3301      	adds	r3, #1
 8007c2c:	687a      	ldr	r2, [r7, #4]
 8007c2e:	4413      	add	r3, r2
 8007c30:	883a      	ldrh	r2, [r7, #0]
 8007c32:	b2d2      	uxtb	r2, r2
 8007c34:	701a      	strb	r2, [r3, #0]
}
 8007c36:	bf00      	nop
 8007c38:	370c      	adds	r7, #12
 8007c3a:	46bd      	mov	sp, r7
 8007c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c40:	4770      	bx	lr

08007c42 <verify_PEC15>:


uint8_t verify_PEC15(uint8_t *receivedData_ptr)
{
 8007c42:	b580      	push	{r7, lr}
 8007c44:	b084      	sub	sp, #16
 8007c46:	af00      	add	r7, sp, #0
 8007c48:	6078      	str	r0, [r7, #4]
	uint16_t receivedPEC = (receivedData_ptr[PAYLOAD_LEN - 2] << 8) | receivedData_ptr[PAYLOAD_LEN - 1];
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	3306      	adds	r3, #6
 8007c4e:	781b      	ldrb	r3, [r3, #0]
 8007c50:	b21b      	sxth	r3, r3
 8007c52:	021b      	lsls	r3, r3, #8
 8007c54:	b21a      	sxth	r2, r3
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	3307      	adds	r3, #7
 8007c5a:	781b      	ldrb	r3, [r3, #0]
 8007c5c:	b21b      	sxth	r3, r3
 8007c5e:	4313      	orrs	r3, r2
 8007c60:	b21b      	sxth	r3, r3
 8007c62:	81fb      	strh	r3, [r7, #14]

	uint16_t calculatedPEC = compute_PEC15(receivedData_ptr, PAYLOAD_LEN - 2);
 8007c64:	2106      	movs	r1, #6
 8007c66:	6878      	ldr	r0, [r7, #4]
 8007c68:	f7ff ff98 	bl	8007b9c <compute_PEC15>
 8007c6c:	4603      	mov	r3, r0
 8007c6e:	81bb      	strh	r3, [r7, #12]

	if (receivedPEC == calculatedPEC) { return 2; }
 8007c70:	89fa      	ldrh	r2, [r7, #14]
 8007c72:	89bb      	ldrh	r3, [r7, #12]
 8007c74:	429a      	cmp	r2, r3
 8007c76:	d101      	bne.n	8007c7c <verify_PEC15+0x3a>
 8007c78:	2302      	movs	r3, #2
 8007c7a:	e000      	b.n	8007c7e <verify_PEC15+0x3c>

	else { return 1; }
 8007c7c:	2301      	movs	r3, #1
}
 8007c7e:	4618      	mov	r0, r3
 8007c80:	3710      	adds	r7, #16
 8007c82:	46bd      	mov	sp, r7
 8007c84:	bd80      	pop	{r7, pc}
	...

08007c88 <action_cmd>:


void action_cmd(uint8_t *cmd_ptr, uint8_t sideA)
{
 8007c88:	b580      	push	{r7, lr}
 8007c8a:	b082      	sub	sp, #8
 8007c8c:	af00      	add	r7, sp, #0
 8007c8e:	6078      	str	r0, [r7, #4]
 8007c90:	460b      	mov	r3, r1
 8007c92:	70fb      	strb	r3, [r7, #3]
	// TO LTC SIDE A (CELL 1 to 10)
	if (sideA) {
 8007c94:	78fb      	ldrb	r3, [r7, #3]
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d011      	beq.n	8007cbe <action_cmd+0x36>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8007c9a:	2200      	movs	r2, #0
 8007c9c:	2110      	movs	r1, #16
 8007c9e:	4813      	ldr	r0, [pc, #76]	@ (8007cec <action_cmd+0x64>)
 8007ca0:	f004 fb30 	bl	800c304 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi1, cmd_ptr, CMD_LEN, HAL_MAX_DELAY);
 8007ca4:	f04f 33ff 	mov.w	r3, #4294967295
 8007ca8:	2204      	movs	r2, #4
 8007caa:	6879      	ldr	r1, [r7, #4]
 8007cac:	4810      	ldr	r0, [pc, #64]	@ (8007cf0 <action_cmd+0x68>)
 8007cae:	f005 f97e 	bl	800cfae <HAL_SPI_Transmit>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8007cb2:	2201      	movs	r2, #1
 8007cb4:	2110      	movs	r1, #16
 8007cb6:	480d      	ldr	r0, [pc, #52]	@ (8007cec <action_cmd+0x64>)
 8007cb8:	f004 fb24 	bl	800c304 <HAL_GPIO_WritePin>
	else {
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
		HAL_SPI_Transmit(&hspi3, cmd_ptr, CMD_LEN, HAL_MAX_DELAY);
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET);
	}
}
 8007cbc:	e012      	b.n	8007ce4 <action_cmd+0x5c>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 8007cbe:	2200      	movs	r2, #0
 8007cc0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8007cc4:	4809      	ldr	r0, [pc, #36]	@ (8007cec <action_cmd+0x64>)
 8007cc6:	f004 fb1d 	bl	800c304 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi3, cmd_ptr, CMD_LEN, HAL_MAX_DELAY);
 8007cca:	f04f 33ff 	mov.w	r3, #4294967295
 8007cce:	2204      	movs	r2, #4
 8007cd0:	6879      	ldr	r1, [r7, #4]
 8007cd2:	4808      	ldr	r0, [pc, #32]	@ (8007cf4 <action_cmd+0x6c>)
 8007cd4:	f005 f96b 	bl	800cfae <HAL_SPI_Transmit>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET);
 8007cd8:	2201      	movs	r2, #1
 8007cda:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8007cde:	4803      	ldr	r0, [pc, #12]	@ (8007cec <action_cmd+0x64>)
 8007ce0:	f004 fb10 	bl	800c304 <HAL_GPIO_WritePin>
}
 8007ce4:	bf00      	nop
 8007ce6:	3708      	adds	r7, #8
 8007ce8:	46bd      	mov	sp, r7
 8007cea:	bd80      	pop	{r7, pc}
 8007cec:	40020000 	.word	0x40020000
 8007cf0:	200000ec 	.word	0x200000ec
 8007cf4:	20000144 	.word	0x20000144

08007cf8 <write_cmd>:


void write_cmd(uint8_t *cmd_ptr, uint8_t *payload_ptr, uint8_t sideA)
{
 8007cf8:	b580      	push	{r7, lr}
 8007cfa:	b084      	sub	sp, #16
 8007cfc:	af00      	add	r7, sp, #0
 8007cfe:	60f8      	str	r0, [r7, #12]
 8007d00:	60b9      	str	r1, [r7, #8]
 8007d02:	4613      	mov	r3, r2
 8007d04:	71fb      	strb	r3, [r7, #7]
	// TO LTC SIDE A (CELL 1 to 10)
	if (sideA) {
 8007d06:	79fb      	ldrb	r3, [r7, #7]
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d018      	beq.n	8007d3e <write_cmd+0x46>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8007d0c:	2200      	movs	r2, #0
 8007d0e:	2110      	movs	r1, #16
 8007d10:	481a      	ldr	r0, [pc, #104]	@ (8007d7c <write_cmd+0x84>)
 8007d12:	f004 faf7 	bl	800c304 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi1, cmd_ptr, CMD_LEN, HAL_MAX_DELAY);
 8007d16:	f04f 33ff 	mov.w	r3, #4294967295
 8007d1a:	2204      	movs	r2, #4
 8007d1c:	68f9      	ldr	r1, [r7, #12]
 8007d1e:	4818      	ldr	r0, [pc, #96]	@ (8007d80 <write_cmd+0x88>)
 8007d20:	f005 f945 	bl	800cfae <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi1, payload_ptr, PAYLOAD_LEN, HAL_MAX_DELAY);
 8007d24:	f04f 33ff 	mov.w	r3, #4294967295
 8007d28:	2208      	movs	r2, #8
 8007d2a:	68b9      	ldr	r1, [r7, #8]
 8007d2c:	4814      	ldr	r0, [pc, #80]	@ (8007d80 <write_cmd+0x88>)
 8007d2e:	f005 f93e 	bl	800cfae <HAL_SPI_Transmit>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8007d32:	2201      	movs	r2, #1
 8007d34:	2110      	movs	r1, #16
 8007d36:	4811      	ldr	r0, [pc, #68]	@ (8007d7c <write_cmd+0x84>)
 8007d38:	f004 fae4 	bl	800c304 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
		HAL_SPI_Transmit(&hspi3, cmd_ptr, CMD_LEN, HAL_MAX_DELAY);
		HAL_SPI_Transmit(&hspi3, payload_ptr, PAYLOAD_LEN, HAL_MAX_DELAY);
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET);
	}
}
 8007d3c:	e019      	b.n	8007d72 <write_cmd+0x7a>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 8007d3e:	2200      	movs	r2, #0
 8007d40:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8007d44:	480d      	ldr	r0, [pc, #52]	@ (8007d7c <write_cmd+0x84>)
 8007d46:	f004 fadd 	bl	800c304 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi3, cmd_ptr, CMD_LEN, HAL_MAX_DELAY);
 8007d4a:	f04f 33ff 	mov.w	r3, #4294967295
 8007d4e:	2204      	movs	r2, #4
 8007d50:	68f9      	ldr	r1, [r7, #12]
 8007d52:	480c      	ldr	r0, [pc, #48]	@ (8007d84 <write_cmd+0x8c>)
 8007d54:	f005 f92b 	bl	800cfae <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi3, payload_ptr, PAYLOAD_LEN, HAL_MAX_DELAY);
 8007d58:	f04f 33ff 	mov.w	r3, #4294967295
 8007d5c:	2208      	movs	r2, #8
 8007d5e:	68b9      	ldr	r1, [r7, #8]
 8007d60:	4808      	ldr	r0, [pc, #32]	@ (8007d84 <write_cmd+0x8c>)
 8007d62:	f005 f924 	bl	800cfae <HAL_SPI_Transmit>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET);
 8007d66:	2201      	movs	r2, #1
 8007d68:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8007d6c:	4803      	ldr	r0, [pc, #12]	@ (8007d7c <write_cmd+0x84>)
 8007d6e:	f004 fac9 	bl	800c304 <HAL_GPIO_WritePin>
}
 8007d72:	bf00      	nop
 8007d74:	3710      	adds	r7, #16
 8007d76:	46bd      	mov	sp, r7
 8007d78:	bd80      	pop	{r7, pc}
 8007d7a:	bf00      	nop
 8007d7c:	40020000 	.word	0x40020000
 8007d80:	200000ec 	.word	0x200000ec
 8007d84:	20000144 	.word	0x20000144

08007d88 <read_cmd>:

void read_cmd(uint8_t *cmd_ptr, uint8_t *receivedPayload_ptr, uint8_t sideA)
{
 8007d88:	b580      	push	{r7, lr}
 8007d8a:	b088      	sub	sp, #32
 8007d8c:	af02      	add	r7, sp, #8
 8007d8e:	60f8      	str	r0, [r7, #12]
 8007d90:	60b9      	str	r1, [r7, #8]
 8007d92:	4613      	mov	r3, r2
 8007d94:	71fb      	strb	r3, [r7, #7]
	uint8_t dummies[8] = {0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF};
 8007d96:	4a23      	ldr	r2, [pc, #140]	@ (8007e24 <read_cmd+0x9c>)
 8007d98:	f107 0310 	add.w	r3, r7, #16
 8007d9c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007da0:	e883 0003 	stmia.w	r3, {r0, r1}

	// TO LTC SIDE A (CELL 1 to 10)
	if (sideA) {
 8007da4:	79fb      	ldrb	r3, [r7, #7]
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d01b      	beq.n	8007de2 <read_cmd+0x5a>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8007daa:	2200      	movs	r2, #0
 8007dac:	2110      	movs	r1, #16
 8007dae:	481e      	ldr	r0, [pc, #120]	@ (8007e28 <read_cmd+0xa0>)
 8007db0:	f004 faa8 	bl	800c304 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi1, cmd_ptr, CMD_LEN, HAL_MAX_DELAY);
 8007db4:	f04f 33ff 	mov.w	r3, #4294967295
 8007db8:	2204      	movs	r2, #4
 8007dba:	68f9      	ldr	r1, [r7, #12]
 8007dbc:	481b      	ldr	r0, [pc, #108]	@ (8007e2c <read_cmd+0xa4>)
 8007dbe:	f005 f8f6 	bl	800cfae <HAL_SPI_Transmit>
		HAL_SPI_TransmitReceive(&hspi1, dummies, receivedPayload_ptr, PAYLOAD_LEN, HAL_MAX_DELAY);
 8007dc2:	f107 0110 	add.w	r1, r7, #16
 8007dc6:	f04f 33ff 	mov.w	r3, #4294967295
 8007dca:	9300      	str	r3, [sp, #0]
 8007dcc:	2308      	movs	r3, #8
 8007dce:	68ba      	ldr	r2, [r7, #8]
 8007dd0:	4816      	ldr	r0, [pc, #88]	@ (8007e2c <read_cmd+0xa4>)
 8007dd2:	f005 fa30 	bl	800d236 <HAL_SPI_TransmitReceive>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8007dd6:	2201      	movs	r2, #1
 8007dd8:	2110      	movs	r1, #16
 8007dda:	4813      	ldr	r0, [pc, #76]	@ (8007e28 <read_cmd+0xa0>)
 8007ddc:	f004 fa92 	bl	800c304 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
		HAL_SPI_Transmit(&hspi3, cmd_ptr, CMD_LEN, HAL_MAX_DELAY);
		HAL_SPI_TransmitReceive(&hspi3, dummies, receivedPayload_ptr, PAYLOAD_LEN, HAL_MAX_DELAY);
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET);
	}
}
 8007de0:	e01c      	b.n	8007e1c <read_cmd+0x94>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 8007de2:	2200      	movs	r2, #0
 8007de4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8007de8:	480f      	ldr	r0, [pc, #60]	@ (8007e28 <read_cmd+0xa0>)
 8007dea:	f004 fa8b 	bl	800c304 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi3, cmd_ptr, CMD_LEN, HAL_MAX_DELAY);
 8007dee:	f04f 33ff 	mov.w	r3, #4294967295
 8007df2:	2204      	movs	r2, #4
 8007df4:	68f9      	ldr	r1, [r7, #12]
 8007df6:	480e      	ldr	r0, [pc, #56]	@ (8007e30 <read_cmd+0xa8>)
 8007df8:	f005 f8d9 	bl	800cfae <HAL_SPI_Transmit>
		HAL_SPI_TransmitReceive(&hspi3, dummies, receivedPayload_ptr, PAYLOAD_LEN, HAL_MAX_DELAY);
 8007dfc:	f107 0110 	add.w	r1, r7, #16
 8007e00:	f04f 33ff 	mov.w	r3, #4294967295
 8007e04:	9300      	str	r3, [sp, #0]
 8007e06:	2308      	movs	r3, #8
 8007e08:	68ba      	ldr	r2, [r7, #8]
 8007e0a:	4809      	ldr	r0, [pc, #36]	@ (8007e30 <read_cmd+0xa8>)
 8007e0c:	f005 fa13 	bl	800d236 <HAL_SPI_TransmitReceive>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET);
 8007e10:	2201      	movs	r2, #1
 8007e12:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8007e16:	4804      	ldr	r0, [pc, #16]	@ (8007e28 <read_cmd+0xa0>)
 8007e18:	f004 fa74 	bl	800c304 <HAL_GPIO_WritePin>
}
 8007e1c:	bf00      	nop
 8007e1e:	3718      	adds	r7, #24
 8007e20:	46bd      	mov	sp, r7
 8007e22:	bd80      	pop	{r7, pc}
 8007e24:	0800ea84 	.word	0x0800ea84
 8007e28:	40020000 	.word	0x40020000
 8007e2c:	200000ec 	.word	0x200000ec
 8007e30:	20000144 	.word	0x20000144

08007e34 <WRCFGA>:

// *** WRITE COMMANDS ***
void WRCFGA(uint8_t *payload_ptr, uint8_t side)
{
 8007e34:	b580      	push	{r7, lr}
 8007e36:	b088      	sub	sp, #32
 8007e38:	af00      	add	r7, sp, #0
 8007e3a:	6078      	str	r0, [r7, #4]
 8007e3c:	460b      	mov	r3, r1
 8007e3e:	70fb      	strb	r3, [r7, #3]
	uint8_t cmd[4];
	uint16_t cmd_PEC;
	uint8_t configRegisterGroupA[8];
	uint16_t configRegisterGroupA_PEC;

	cmd[0] = 0x00;
 8007e40:	2300      	movs	r3, #0
 8007e42:	753b      	strb	r3, [r7, #20]
	cmd[1] = 0x01;
 8007e44:	2301      	movs	r3, #1
 8007e46:	757b      	strb	r3, [r7, #21]
	cmd_PEC = compute_PEC15(cmd, 2);
 8007e48:	f107 0314 	add.w	r3, r7, #20
 8007e4c:	2102      	movs	r1, #2
 8007e4e:	4618      	mov	r0, r3
 8007e50:	f7ff fea4 	bl	8007b9c <compute_PEC15>
 8007e54:	4603      	mov	r3, r0
 8007e56:	83bb      	strh	r3, [r7, #28]
	append_PEC(cmd, 2, cmd_PEC);
 8007e58:	8bba      	ldrh	r2, [r7, #28]
 8007e5a:	f107 0314 	add.w	r3, r7, #20
 8007e5e:	2102      	movs	r1, #2
 8007e60:	4618      	mov	r0, r3
 8007e62:	f7ff fed1 	bl	8007c08 <append_PEC>

	for(uint8_t i = 0; i < 6; i ++) {
 8007e66:	2300      	movs	r3, #0
 8007e68:	77fb      	strb	r3, [r7, #31]
 8007e6a:	e00b      	b.n	8007e84 <WRCFGA+0x50>
		configRegisterGroupA[i] = *(payload_ptr + i);
 8007e6c:	7ffb      	ldrb	r3, [r7, #31]
 8007e6e:	687a      	ldr	r2, [r7, #4]
 8007e70:	441a      	add	r2, r3
 8007e72:	7ffb      	ldrb	r3, [r7, #31]
 8007e74:	7812      	ldrb	r2, [r2, #0]
 8007e76:	3320      	adds	r3, #32
 8007e78:	443b      	add	r3, r7
 8007e7a:	f803 2c14 	strb.w	r2, [r3, #-20]
	for(uint8_t i = 0; i < 6; i ++) {
 8007e7e:	7ffb      	ldrb	r3, [r7, #31]
 8007e80:	3301      	adds	r3, #1
 8007e82:	77fb      	strb	r3, [r7, #31]
 8007e84:	7ffb      	ldrb	r3, [r7, #31]
 8007e86:	2b05      	cmp	r3, #5
 8007e88:	d9f0      	bls.n	8007e6c <WRCFGA+0x38>
	}
	configRegisterGroupA_PEC = compute_PEC15(configRegisterGroupA, 6);
 8007e8a:	f107 030c 	add.w	r3, r7, #12
 8007e8e:	2106      	movs	r1, #6
 8007e90:	4618      	mov	r0, r3
 8007e92:	f7ff fe83 	bl	8007b9c <compute_PEC15>
 8007e96:	4603      	mov	r3, r0
 8007e98:	837b      	strh	r3, [r7, #26]
	append_PEC(configRegisterGroupA, 6, configRegisterGroupA_PEC);
 8007e9a:	8b7a      	ldrh	r2, [r7, #26]
 8007e9c:	f107 030c 	add.w	r3, r7, #12
 8007ea0:	2106      	movs	r1, #6
 8007ea2:	4618      	mov	r0, r3
 8007ea4:	f7ff feb0 	bl	8007c08 <append_PEC>

	write_cmd(cmd, configRegisterGroupA, side);
 8007ea8:	78fa      	ldrb	r2, [r7, #3]
 8007eaa:	f107 010c 	add.w	r1, r7, #12
 8007eae:	f107 0314 	add.w	r3, r7, #20
 8007eb2:	4618      	mov	r0, r3
 8007eb4:	f7ff ff20 	bl	8007cf8 <write_cmd>
}
 8007eb8:	bf00      	nop
 8007eba:	3720      	adds	r7, #32
 8007ebc:	46bd      	mov	sp, r7
 8007ebe:	bd80      	pop	{r7, pc}

08007ec0 <WRPWM>:
	write_cmd(cmd, registerGroupSControl, side);
}


void WRPWM(uint8_t *payload_ptr, uint8_t side)
{
 8007ec0:	b580      	push	{r7, lr}
 8007ec2:	b088      	sub	sp, #32
 8007ec4:	af00      	add	r7, sp, #0
 8007ec6:	6078      	str	r0, [r7, #4]
 8007ec8:	460b      	mov	r3, r1
 8007eca:	70fb      	strb	r3, [r7, #3]
	uint8_t cmd[4];
	uint16_t cmd_PEC;
	uint8_t registerGroupPWM[8];
	uint16_t registerGroupPWM_PEC;

	cmd[0] = 0x00;
 8007ecc:	2300      	movs	r3, #0
 8007ece:	753b      	strb	r3, [r7, #20]
	cmd[1] = 0x20;
 8007ed0:	2320      	movs	r3, #32
 8007ed2:	757b      	strb	r3, [r7, #21]
	cmd_PEC = compute_PEC15(cmd, 2);
 8007ed4:	f107 0314 	add.w	r3, r7, #20
 8007ed8:	2102      	movs	r1, #2
 8007eda:	4618      	mov	r0, r3
 8007edc:	f7ff fe5e 	bl	8007b9c <compute_PEC15>
 8007ee0:	4603      	mov	r3, r0
 8007ee2:	83bb      	strh	r3, [r7, #28]
	append_PEC(cmd, 2, cmd_PEC);
 8007ee4:	8bba      	ldrh	r2, [r7, #28]
 8007ee6:	f107 0314 	add.w	r3, r7, #20
 8007eea:	2102      	movs	r1, #2
 8007eec:	4618      	mov	r0, r3
 8007eee:	f7ff fe8b 	bl	8007c08 <append_PEC>

	for(uint8_t i = 0; i < 6; i ++) {
 8007ef2:	2300      	movs	r3, #0
 8007ef4:	77fb      	strb	r3, [r7, #31]
 8007ef6:	e00b      	b.n	8007f10 <WRPWM+0x50>
		registerGroupPWM[i] = *(payload_ptr + i);
 8007ef8:	7ffb      	ldrb	r3, [r7, #31]
 8007efa:	687a      	ldr	r2, [r7, #4]
 8007efc:	441a      	add	r2, r3
 8007efe:	7ffb      	ldrb	r3, [r7, #31]
 8007f00:	7812      	ldrb	r2, [r2, #0]
 8007f02:	3320      	adds	r3, #32
 8007f04:	443b      	add	r3, r7
 8007f06:	f803 2c14 	strb.w	r2, [r3, #-20]
	for(uint8_t i = 0; i < 6; i ++) {
 8007f0a:	7ffb      	ldrb	r3, [r7, #31]
 8007f0c:	3301      	adds	r3, #1
 8007f0e:	77fb      	strb	r3, [r7, #31]
 8007f10:	7ffb      	ldrb	r3, [r7, #31]
 8007f12:	2b05      	cmp	r3, #5
 8007f14:	d9f0      	bls.n	8007ef8 <WRPWM+0x38>
	}
	registerGroupPWM_PEC = compute_PEC15(registerGroupPWM, 6);
 8007f16:	f107 030c 	add.w	r3, r7, #12
 8007f1a:	2106      	movs	r1, #6
 8007f1c:	4618      	mov	r0, r3
 8007f1e:	f7ff fe3d 	bl	8007b9c <compute_PEC15>
 8007f22:	4603      	mov	r3, r0
 8007f24:	837b      	strh	r3, [r7, #26]
	append_PEC(registerGroupPWM, 6, registerGroupPWM_PEC);
 8007f26:	8b7a      	ldrh	r2, [r7, #26]
 8007f28:	f107 030c 	add.w	r3, r7, #12
 8007f2c:	2106      	movs	r1, #6
 8007f2e:	4618      	mov	r0, r3
 8007f30:	f7ff fe6a 	bl	8007c08 <append_PEC>

	write_cmd(cmd, registerGroupPWM, side);
 8007f34:	78fa      	ldrb	r2, [r7, #3]
 8007f36:	f107 010c 	add.w	r1, r7, #12
 8007f3a:	f107 0314 	add.w	r3, r7, #20
 8007f3e:	4618      	mov	r0, r3
 8007f40:	f7ff feda 	bl	8007cf8 <write_cmd>
}
 8007f44:	bf00      	nop
 8007f46:	3720      	adds	r7, #32
 8007f48:	46bd      	mov	sp, r7
 8007f4a:	bd80      	pop	{r7, pc}

08007f4c <RDCFGA>:
// *** END WRITE COMMANDS ***


// *** READ COMMANDS ***
void RDCFGA(uint8_t *configRegisterGroupA_ptr, uint8_t side)
{
 8007f4c:	b580      	push	{r7, lr}
 8007f4e:	b084      	sub	sp, #16
 8007f50:	af00      	add	r7, sp, #0
 8007f52:	6078      	str	r0, [r7, #4]
 8007f54:	460b      	mov	r3, r1
 8007f56:	70fb      	strb	r3, [r7, #3]
	uint8_t cmd[4];
	uint16_t cmd_PEC;

	cmd[0] = 0x00;
 8007f58:	2300      	movs	r3, #0
 8007f5a:	723b      	strb	r3, [r7, #8]
	cmd[1] = 0x02;
 8007f5c:	2302      	movs	r3, #2
 8007f5e:	727b      	strb	r3, [r7, #9]
	cmd_PEC = compute_PEC15(cmd, 2);
 8007f60:	f107 0308 	add.w	r3, r7, #8
 8007f64:	2102      	movs	r1, #2
 8007f66:	4618      	mov	r0, r3
 8007f68:	f7ff fe18 	bl	8007b9c <compute_PEC15>
 8007f6c:	4603      	mov	r3, r0
 8007f6e:	81fb      	strh	r3, [r7, #14]
	append_PEC(cmd, 2, cmd_PEC);
 8007f70:	89fa      	ldrh	r2, [r7, #14]
 8007f72:	f107 0308 	add.w	r3, r7, #8
 8007f76:	2102      	movs	r1, #2
 8007f78:	4618      	mov	r0, r3
 8007f7a:	f7ff fe45 	bl	8007c08 <append_PEC>

	read_cmd(cmd, configRegisterGroupA_ptr, side);
 8007f7e:	78fa      	ldrb	r2, [r7, #3]
 8007f80:	f107 0308 	add.w	r3, r7, #8
 8007f84:	6879      	ldr	r1, [r7, #4]
 8007f86:	4618      	mov	r0, r3
 8007f88:	f7ff fefe 	bl	8007d88 <read_cmd>
}
 8007f8c:	bf00      	nop
 8007f8e:	3710      	adds	r7, #16
 8007f90:	46bd      	mov	sp, r7
 8007f92:	bd80      	pop	{r7, pc}

08007f94 <RDCFGB>:


void RDCFGB(uint8_t *configRegisterGroupB_ptr, uint8_t side)
{
 8007f94:	b580      	push	{r7, lr}
 8007f96:	b084      	sub	sp, #16
 8007f98:	af00      	add	r7, sp, #0
 8007f9a:	6078      	str	r0, [r7, #4]
 8007f9c:	460b      	mov	r3, r1
 8007f9e:	70fb      	strb	r3, [r7, #3]
	uint8_t cmd[4];
	uint16_t cmd_PEC;

	cmd[0] = 0x00;
 8007fa0:	2300      	movs	r3, #0
 8007fa2:	723b      	strb	r3, [r7, #8]
	cmd[1] = 0x26;
 8007fa4:	2326      	movs	r3, #38	@ 0x26
 8007fa6:	727b      	strb	r3, [r7, #9]
	cmd_PEC = compute_PEC15(cmd, 2);
 8007fa8:	f107 0308 	add.w	r3, r7, #8
 8007fac:	2102      	movs	r1, #2
 8007fae:	4618      	mov	r0, r3
 8007fb0:	f7ff fdf4 	bl	8007b9c <compute_PEC15>
 8007fb4:	4603      	mov	r3, r0
 8007fb6:	81fb      	strh	r3, [r7, #14]
	append_PEC(cmd, 2, cmd_PEC);
 8007fb8:	89fa      	ldrh	r2, [r7, #14]
 8007fba:	f107 0308 	add.w	r3, r7, #8
 8007fbe:	2102      	movs	r1, #2
 8007fc0:	4618      	mov	r0, r3
 8007fc2:	f7ff fe21 	bl	8007c08 <append_PEC>

	read_cmd(cmd, configRegisterGroupB_ptr, side);
 8007fc6:	78fa      	ldrb	r2, [r7, #3]
 8007fc8:	f107 0308 	add.w	r3, r7, #8
 8007fcc:	6879      	ldr	r1, [r7, #4]
 8007fce:	4618      	mov	r0, r3
 8007fd0:	f7ff feda 	bl	8007d88 <read_cmd>
}
 8007fd4:	bf00      	nop
 8007fd6:	3710      	adds	r7, #16
 8007fd8:	46bd      	mov	sp, r7
 8007fda:	bd80      	pop	{r7, pc}

08007fdc <RDCVA>:


void RDCVA(uint8_t *cellVoltageRegisterGroupA_ptr, uint8_t side)
{
 8007fdc:	b580      	push	{r7, lr}
 8007fde:	b084      	sub	sp, #16
 8007fe0:	af00      	add	r7, sp, #0
 8007fe2:	6078      	str	r0, [r7, #4]
 8007fe4:	460b      	mov	r3, r1
 8007fe6:	70fb      	strb	r3, [r7, #3]
	uint8_t cmd[4];
	uint16_t cmd_PEC;

	cmd[0] = 0x00;
 8007fe8:	2300      	movs	r3, #0
 8007fea:	723b      	strb	r3, [r7, #8]
	cmd[1] = 0x04;
 8007fec:	2304      	movs	r3, #4
 8007fee:	727b      	strb	r3, [r7, #9]
	cmd_PEC = compute_PEC15(cmd, 2);
 8007ff0:	f107 0308 	add.w	r3, r7, #8
 8007ff4:	2102      	movs	r1, #2
 8007ff6:	4618      	mov	r0, r3
 8007ff8:	f7ff fdd0 	bl	8007b9c <compute_PEC15>
 8007ffc:	4603      	mov	r3, r0
 8007ffe:	81fb      	strh	r3, [r7, #14]
	append_PEC(cmd, 2, cmd_PEC);
 8008000:	89fa      	ldrh	r2, [r7, #14]
 8008002:	f107 0308 	add.w	r3, r7, #8
 8008006:	2102      	movs	r1, #2
 8008008:	4618      	mov	r0, r3
 800800a:	f7ff fdfd 	bl	8007c08 <append_PEC>

	read_cmd(cmd, cellVoltageRegisterGroupA_ptr, side);
 800800e:	78fa      	ldrb	r2, [r7, #3]
 8008010:	f107 0308 	add.w	r3, r7, #8
 8008014:	6879      	ldr	r1, [r7, #4]
 8008016:	4618      	mov	r0, r3
 8008018:	f7ff feb6 	bl	8007d88 <read_cmd>
}
 800801c:	bf00      	nop
 800801e:	3710      	adds	r7, #16
 8008020:	46bd      	mov	sp, r7
 8008022:	bd80      	pop	{r7, pc}

08008024 <RDCVB>:


void RDCVB(uint8_t *cellVoltageRegisterGroupB_ptr, uint8_t side)
{
 8008024:	b580      	push	{r7, lr}
 8008026:	b084      	sub	sp, #16
 8008028:	af00      	add	r7, sp, #0
 800802a:	6078      	str	r0, [r7, #4]
 800802c:	460b      	mov	r3, r1
 800802e:	70fb      	strb	r3, [r7, #3]
	uint8_t cmd[4];
	uint16_t cmd_PEC;

	cmd[0] = 0x00;
 8008030:	2300      	movs	r3, #0
 8008032:	723b      	strb	r3, [r7, #8]
	cmd[1] = 0x06;
 8008034:	2306      	movs	r3, #6
 8008036:	727b      	strb	r3, [r7, #9]
	cmd_PEC = compute_PEC15(cmd, 2);
 8008038:	f107 0308 	add.w	r3, r7, #8
 800803c:	2102      	movs	r1, #2
 800803e:	4618      	mov	r0, r3
 8008040:	f7ff fdac 	bl	8007b9c <compute_PEC15>
 8008044:	4603      	mov	r3, r0
 8008046:	81fb      	strh	r3, [r7, #14]
	append_PEC(cmd, 2, cmd_PEC);
 8008048:	89fa      	ldrh	r2, [r7, #14]
 800804a:	f107 0308 	add.w	r3, r7, #8
 800804e:	2102      	movs	r1, #2
 8008050:	4618      	mov	r0, r3
 8008052:	f7ff fdd9 	bl	8007c08 <append_PEC>

	read_cmd(cmd, cellVoltageRegisterGroupB_ptr, side);
 8008056:	78fa      	ldrb	r2, [r7, #3]
 8008058:	f107 0308 	add.w	r3, r7, #8
 800805c:	6879      	ldr	r1, [r7, #4]
 800805e:	4618      	mov	r0, r3
 8008060:	f7ff fe92 	bl	8007d88 <read_cmd>
}
 8008064:	bf00      	nop
 8008066:	3710      	adds	r7, #16
 8008068:	46bd      	mov	sp, r7
 800806a:	bd80      	pop	{r7, pc}

0800806c <RDCVC>:


void RDCVC(uint8_t *cellVoltageRegisterGroupC_ptr, uint8_t side)
{
 800806c:	b580      	push	{r7, lr}
 800806e:	b084      	sub	sp, #16
 8008070:	af00      	add	r7, sp, #0
 8008072:	6078      	str	r0, [r7, #4]
 8008074:	460b      	mov	r3, r1
 8008076:	70fb      	strb	r3, [r7, #3]
	uint8_t cmd[4];
	uint16_t cmd_PEC;

	cmd[0] = 0x00;
 8008078:	2300      	movs	r3, #0
 800807a:	723b      	strb	r3, [r7, #8]
	cmd[1] = 0x08;
 800807c:	2308      	movs	r3, #8
 800807e:	727b      	strb	r3, [r7, #9]
	cmd_PEC = compute_PEC15(cmd, 2);
 8008080:	f107 0308 	add.w	r3, r7, #8
 8008084:	2102      	movs	r1, #2
 8008086:	4618      	mov	r0, r3
 8008088:	f7ff fd88 	bl	8007b9c <compute_PEC15>
 800808c:	4603      	mov	r3, r0
 800808e:	81fb      	strh	r3, [r7, #14]
	append_PEC(cmd, 2, cmd_PEC);
 8008090:	89fa      	ldrh	r2, [r7, #14]
 8008092:	f107 0308 	add.w	r3, r7, #8
 8008096:	2102      	movs	r1, #2
 8008098:	4618      	mov	r0, r3
 800809a:	f7ff fdb5 	bl	8007c08 <append_PEC>

	read_cmd(cmd, cellVoltageRegisterGroupC_ptr, side);
 800809e:	78fa      	ldrb	r2, [r7, #3]
 80080a0:	f107 0308 	add.w	r3, r7, #8
 80080a4:	6879      	ldr	r1, [r7, #4]
 80080a6:	4618      	mov	r0, r3
 80080a8:	f7ff fe6e 	bl	8007d88 <read_cmd>
}
 80080ac:	bf00      	nop
 80080ae:	3710      	adds	r7, #16
 80080b0:	46bd      	mov	sp, r7
 80080b2:	bd80      	pop	{r7, pc}

080080b4 <RDCVD>:


void RDCVD(uint8_t *cellVoltageRegisterGroupD_ptr, uint8_t side)
{
 80080b4:	b580      	push	{r7, lr}
 80080b6:	b084      	sub	sp, #16
 80080b8:	af00      	add	r7, sp, #0
 80080ba:	6078      	str	r0, [r7, #4]
 80080bc:	460b      	mov	r3, r1
 80080be:	70fb      	strb	r3, [r7, #3]
	uint8_t cmd[4];
	uint16_t cmd_PEC;

	cmd[0] = 0x00;
 80080c0:	2300      	movs	r3, #0
 80080c2:	723b      	strb	r3, [r7, #8]
	cmd[1] = 0x0A;
 80080c4:	230a      	movs	r3, #10
 80080c6:	727b      	strb	r3, [r7, #9]
	cmd_PEC = compute_PEC15(cmd, 2);
 80080c8:	f107 0308 	add.w	r3, r7, #8
 80080cc:	2102      	movs	r1, #2
 80080ce:	4618      	mov	r0, r3
 80080d0:	f7ff fd64 	bl	8007b9c <compute_PEC15>
 80080d4:	4603      	mov	r3, r0
 80080d6:	81fb      	strh	r3, [r7, #14]
	append_PEC(cmd, 2, cmd_PEC);
 80080d8:	89fa      	ldrh	r2, [r7, #14]
 80080da:	f107 0308 	add.w	r3, r7, #8
 80080de:	2102      	movs	r1, #2
 80080e0:	4618      	mov	r0, r3
 80080e2:	f7ff fd91 	bl	8007c08 <append_PEC>

	read_cmd(cmd, cellVoltageRegisterGroupD_ptr, side);
 80080e6:	78fa      	ldrb	r2, [r7, #3]
 80080e8:	f107 0308 	add.w	r3, r7, #8
 80080ec:	6879      	ldr	r1, [r7, #4]
 80080ee:	4618      	mov	r0, r3
 80080f0:	f7ff fe4a 	bl	8007d88 <read_cmd>
}
 80080f4:	bf00      	nop
 80080f6:	3710      	adds	r7, #16
 80080f8:	46bd      	mov	sp, r7
 80080fa:	bd80      	pop	{r7, pc}

080080fc <RDCVE>:


void RDCVE(uint8_t *cellVoltageRegisterGroupE_ptr, uint8_t side)
{
 80080fc:	b580      	push	{r7, lr}
 80080fe:	b084      	sub	sp, #16
 8008100:	af00      	add	r7, sp, #0
 8008102:	6078      	str	r0, [r7, #4]
 8008104:	460b      	mov	r3, r1
 8008106:	70fb      	strb	r3, [r7, #3]
	uint8_t cmd[4];
	uint16_t cmd_PEC;

	cmd[0] = 0x00;
 8008108:	2300      	movs	r3, #0
 800810a:	723b      	strb	r3, [r7, #8]
	cmd[1] = 0x09;
 800810c:	2309      	movs	r3, #9
 800810e:	727b      	strb	r3, [r7, #9]
	cmd_PEC = compute_PEC15(cmd, 2);
 8008110:	f107 0308 	add.w	r3, r7, #8
 8008114:	2102      	movs	r1, #2
 8008116:	4618      	mov	r0, r3
 8008118:	f7ff fd40 	bl	8007b9c <compute_PEC15>
 800811c:	4603      	mov	r3, r0
 800811e:	81fb      	strh	r3, [r7, #14]
	append_PEC(cmd, 2, cmd_PEC);
 8008120:	89fa      	ldrh	r2, [r7, #14]
 8008122:	f107 0308 	add.w	r3, r7, #8
 8008126:	2102      	movs	r1, #2
 8008128:	4618      	mov	r0, r3
 800812a:	f7ff fd6d 	bl	8007c08 <append_PEC>

	read_cmd(cmd, cellVoltageRegisterGroupE_ptr, side);
 800812e:	78fa      	ldrb	r2, [r7, #3]
 8008130:	f107 0308 	add.w	r3, r7, #8
 8008134:	6879      	ldr	r1, [r7, #4]
 8008136:	4618      	mov	r0, r3
 8008138:	f7ff fe26 	bl	8007d88 <read_cmd>
}
 800813c:	bf00      	nop
 800813e:	3710      	adds	r7, #16
 8008140:	46bd      	mov	sp, r7
 8008142:	bd80      	pop	{r7, pc}

08008144 <RDSTATA>:
	read_cmd(cmd, cellVoltageRegisterGroupF_ptr, side);
}


void RDSTATA(uint8_t *statusRegisterGroupA_ptr, uint8_t side)
{
 8008144:	b580      	push	{r7, lr}
 8008146:	b084      	sub	sp, #16
 8008148:	af00      	add	r7, sp, #0
 800814a:	6078      	str	r0, [r7, #4]
 800814c:	460b      	mov	r3, r1
 800814e:	70fb      	strb	r3, [r7, #3]
	uint8_t cmd[4];
	uint16_t cmd_PEC;

	cmd[0] = 0x00;
 8008150:	2300      	movs	r3, #0
 8008152:	723b      	strb	r3, [r7, #8]
	cmd[1] = 0x10;
 8008154:	2310      	movs	r3, #16
 8008156:	727b      	strb	r3, [r7, #9]
	cmd_PEC = compute_PEC15(cmd, 2);
 8008158:	f107 0308 	add.w	r3, r7, #8
 800815c:	2102      	movs	r1, #2
 800815e:	4618      	mov	r0, r3
 8008160:	f7ff fd1c 	bl	8007b9c <compute_PEC15>
 8008164:	4603      	mov	r3, r0
 8008166:	81fb      	strh	r3, [r7, #14]
	append_PEC(cmd, 2, cmd_PEC);
 8008168:	89fa      	ldrh	r2, [r7, #14]
 800816a:	f107 0308 	add.w	r3, r7, #8
 800816e:	2102      	movs	r1, #2
 8008170:	4618      	mov	r0, r3
 8008172:	f7ff fd49 	bl	8007c08 <append_PEC>

	read_cmd(cmd, statusRegisterGroupA_ptr, side);
 8008176:	78fa      	ldrb	r2, [r7, #3]
 8008178:	f107 0308 	add.w	r3, r7, #8
 800817c:	6879      	ldr	r1, [r7, #4]
 800817e:	4618      	mov	r0, r3
 8008180:	f7ff fe02 	bl	8007d88 <read_cmd>
}
 8008184:	bf00      	nop
 8008186:	3710      	adds	r7, #16
 8008188:	46bd      	mov	sp, r7
 800818a:	bd80      	pop	{r7, pc}

0800818c <RDSTATB>:


void RDSTATB(uint8_t *statusRegisterGroupB_ptr, uint8_t side)
{
 800818c:	b580      	push	{r7, lr}
 800818e:	b084      	sub	sp, #16
 8008190:	af00      	add	r7, sp, #0
 8008192:	6078      	str	r0, [r7, #4]
 8008194:	460b      	mov	r3, r1
 8008196:	70fb      	strb	r3, [r7, #3]
	uint8_t cmd[4];
	uint16_t cmd_PEC;

	cmd[0] = 0x00;
 8008198:	2300      	movs	r3, #0
 800819a:	723b      	strb	r3, [r7, #8]
	cmd[1] = 0x12;
 800819c:	2312      	movs	r3, #18
 800819e:	727b      	strb	r3, [r7, #9]
	cmd_PEC = compute_PEC15(cmd, 2);
 80081a0:	f107 0308 	add.w	r3, r7, #8
 80081a4:	2102      	movs	r1, #2
 80081a6:	4618      	mov	r0, r3
 80081a8:	f7ff fcf8 	bl	8007b9c <compute_PEC15>
 80081ac:	4603      	mov	r3, r0
 80081ae:	81fb      	strh	r3, [r7, #14]
	append_PEC(cmd, 2, cmd_PEC);
 80081b0:	89fa      	ldrh	r2, [r7, #14]
 80081b2:	f107 0308 	add.w	r3, r7, #8
 80081b6:	2102      	movs	r1, #2
 80081b8:	4618      	mov	r0, r3
 80081ba:	f7ff fd25 	bl	8007c08 <append_PEC>

	read_cmd(cmd, statusRegisterGroupB_ptr, side);
 80081be:	78fa      	ldrb	r2, [r7, #3]
 80081c0:	f107 0308 	add.w	r3, r7, #8
 80081c4:	6879      	ldr	r1, [r7, #4]
 80081c6:	4618      	mov	r0, r3
 80081c8:	f7ff fdde 	bl	8007d88 <read_cmd>
}
 80081cc:	bf00      	nop
 80081ce:	3710      	adds	r7, #16
 80081d0:	46bd      	mov	sp, r7
 80081d2:	bd80      	pop	{r7, pc}

080081d4 <RDAUXA>:


void RDAUXA(uint8_t *auxiliaryRegisterGroupA_ptr, uint8_t side)
{
 80081d4:	b580      	push	{r7, lr}
 80081d6:	b084      	sub	sp, #16
 80081d8:	af00      	add	r7, sp, #0
 80081da:	6078      	str	r0, [r7, #4]
 80081dc:	460b      	mov	r3, r1
 80081de:	70fb      	strb	r3, [r7, #3]
	uint8_t cmd[4];
	uint16_t cmd_PEC;

	cmd[0] = 0x00;
 80081e0:	2300      	movs	r3, #0
 80081e2:	723b      	strb	r3, [r7, #8]
	cmd[1] = 0x0C;
 80081e4:	230c      	movs	r3, #12
 80081e6:	727b      	strb	r3, [r7, #9]
	cmd_PEC = compute_PEC15(cmd, 2);
 80081e8:	f107 0308 	add.w	r3, r7, #8
 80081ec:	2102      	movs	r1, #2
 80081ee:	4618      	mov	r0, r3
 80081f0:	f7ff fcd4 	bl	8007b9c <compute_PEC15>
 80081f4:	4603      	mov	r3, r0
 80081f6:	81fb      	strh	r3, [r7, #14]
	append_PEC(cmd, 2, cmd_PEC);
 80081f8:	89fa      	ldrh	r2, [r7, #14]
 80081fa:	f107 0308 	add.w	r3, r7, #8
 80081fe:	2102      	movs	r1, #2
 8008200:	4618      	mov	r0, r3
 8008202:	f7ff fd01 	bl	8007c08 <append_PEC>

	read_cmd(cmd, auxiliaryRegisterGroupA_ptr, side);
 8008206:	78fa      	ldrb	r2, [r7, #3]
 8008208:	f107 0308 	add.w	r3, r7, #8
 800820c:	6879      	ldr	r1, [r7, #4]
 800820e:	4618      	mov	r0, r3
 8008210:	f7ff fdba 	bl	8007d88 <read_cmd>
}
 8008214:	bf00      	nop
 8008216:	3710      	adds	r7, #16
 8008218:	46bd      	mov	sp, r7
 800821a:	bd80      	pop	{r7, pc}

0800821c <RDAUXB>:


void RDAUXB(uint8_t *auxiliaryRegisterGroupB_ptr, uint8_t side)
{
 800821c:	b580      	push	{r7, lr}
 800821e:	b084      	sub	sp, #16
 8008220:	af00      	add	r7, sp, #0
 8008222:	6078      	str	r0, [r7, #4]
 8008224:	460b      	mov	r3, r1
 8008226:	70fb      	strb	r3, [r7, #3]
	uint8_t cmd[4];
	uint16_t cmd_PEC;

	cmd[0] = 0x00;
 8008228:	2300      	movs	r3, #0
 800822a:	723b      	strb	r3, [r7, #8]
	cmd[1] = 0x0E;
 800822c:	230e      	movs	r3, #14
 800822e:	727b      	strb	r3, [r7, #9]
	cmd_PEC = compute_PEC15(cmd, 2);
 8008230:	f107 0308 	add.w	r3, r7, #8
 8008234:	2102      	movs	r1, #2
 8008236:	4618      	mov	r0, r3
 8008238:	f7ff fcb0 	bl	8007b9c <compute_PEC15>
 800823c:	4603      	mov	r3, r0
 800823e:	81fb      	strh	r3, [r7, #14]
	append_PEC(cmd, 2, cmd_PEC);
 8008240:	89fa      	ldrh	r2, [r7, #14]
 8008242:	f107 0308 	add.w	r3, r7, #8
 8008246:	2102      	movs	r1, #2
 8008248:	4618      	mov	r0, r3
 800824a:	f7ff fcdd 	bl	8007c08 <append_PEC>

	read_cmd(cmd, auxiliaryRegisterGroupB_ptr, side);
 800824e:	78fa      	ldrb	r2, [r7, #3]
 8008250:	f107 0308 	add.w	r3, r7, #8
 8008254:	6879      	ldr	r1, [r7, #4]
 8008256:	4618      	mov	r0, r3
 8008258:	f7ff fd96 	bl	8007d88 <read_cmd>
}
 800825c:	bf00      	nop
 800825e:	3710      	adds	r7, #16
 8008260:	46bd      	mov	sp, r7
 8008262:	bd80      	pop	{r7, pc}

08008264 <RDAUXC>:


void RDAUXC(uint8_t *auxiliaryRegisterGroupC_ptr, uint8_t side)
{
 8008264:	b580      	push	{r7, lr}
 8008266:	b084      	sub	sp, #16
 8008268:	af00      	add	r7, sp, #0
 800826a:	6078      	str	r0, [r7, #4]
 800826c:	460b      	mov	r3, r1
 800826e:	70fb      	strb	r3, [r7, #3]
	uint8_t cmd[4];
	uint16_t cmd_PEC;

	cmd[0] = 0x00;
 8008270:	2300      	movs	r3, #0
 8008272:	723b      	strb	r3, [r7, #8]
	cmd[1] = 0x0D;
 8008274:	230d      	movs	r3, #13
 8008276:	727b      	strb	r3, [r7, #9]
	cmd_PEC = compute_PEC15(cmd, 2);
 8008278:	f107 0308 	add.w	r3, r7, #8
 800827c:	2102      	movs	r1, #2
 800827e:	4618      	mov	r0, r3
 8008280:	f7ff fc8c 	bl	8007b9c <compute_PEC15>
 8008284:	4603      	mov	r3, r0
 8008286:	81fb      	strh	r3, [r7, #14]
	append_PEC(cmd, 2, cmd_PEC);
 8008288:	89fa      	ldrh	r2, [r7, #14]
 800828a:	f107 0308 	add.w	r3, r7, #8
 800828e:	2102      	movs	r1, #2
 8008290:	4618      	mov	r0, r3
 8008292:	f7ff fcb9 	bl	8007c08 <append_PEC>

	read_cmd(cmd, auxiliaryRegisterGroupC_ptr, side);
 8008296:	78fa      	ldrb	r2, [r7, #3]
 8008298:	f107 0308 	add.w	r3, r7, #8
 800829c:	6879      	ldr	r1, [r7, #4]
 800829e:	4618      	mov	r0, r3
 80082a0:	f7ff fd72 	bl	8007d88 <read_cmd>
}
 80082a4:	bf00      	nop
 80082a6:	3710      	adds	r7, #16
 80082a8:	46bd      	mov	sp, r7
 80082aa:	bd80      	pop	{r7, pc}

080082ac <RDAUXD>:


void RDAUXD(uint8_t *auxiliaryRegisterGroupD_ptr, uint8_t side)
{
 80082ac:	b580      	push	{r7, lr}
 80082ae:	b084      	sub	sp, #16
 80082b0:	af00      	add	r7, sp, #0
 80082b2:	6078      	str	r0, [r7, #4]
 80082b4:	460b      	mov	r3, r1
 80082b6:	70fb      	strb	r3, [r7, #3]
	uint8_t cmd[4];
	uint16_t cmd_PEC;

	cmd[0] = 0x00;
 80082b8:	2300      	movs	r3, #0
 80082ba:	723b      	strb	r3, [r7, #8]
	cmd[1] = 0x0F;
 80082bc:	230f      	movs	r3, #15
 80082be:	727b      	strb	r3, [r7, #9]
	cmd_PEC = compute_PEC15(cmd, 2);
 80082c0:	f107 0308 	add.w	r3, r7, #8
 80082c4:	2102      	movs	r1, #2
 80082c6:	4618      	mov	r0, r3
 80082c8:	f7ff fc68 	bl	8007b9c <compute_PEC15>
 80082cc:	4603      	mov	r3, r0
 80082ce:	81fb      	strh	r3, [r7, #14]
	append_PEC(cmd, 2, cmd_PEC);
 80082d0:	89fa      	ldrh	r2, [r7, #14]
 80082d2:	f107 0308 	add.w	r3, r7, #8
 80082d6:	2102      	movs	r1, #2
 80082d8:	4618      	mov	r0, r3
 80082da:	f7ff fc95 	bl	8007c08 <append_PEC>

	read_cmd(cmd, auxiliaryRegisterGroupD_ptr, side);
 80082de:	78fa      	ldrb	r2, [r7, #3]
 80082e0:	f107 0308 	add.w	r3, r7, #8
 80082e4:	6879      	ldr	r1, [r7, #4]
 80082e6:	4618      	mov	r0, r3
 80082e8:	f7ff fd4e 	bl	8007d88 <read_cmd>
}
 80082ec:	bf00      	nop
 80082ee:	3710      	adds	r7, #16
 80082f0:	46bd      	mov	sp, r7
 80082f2:	bd80      	pop	{r7, pc}

080082f4 <RDPWM>:
	read_cmd(cmd, SControlRegisterGroup_ptr, side);
}


void RDPWM(uint8_t *PWMRegisterGroup_ptr, uint8_t side)
{
 80082f4:	b580      	push	{r7, lr}
 80082f6:	b084      	sub	sp, #16
 80082f8:	af00      	add	r7, sp, #0
 80082fa:	6078      	str	r0, [r7, #4]
 80082fc:	460b      	mov	r3, r1
 80082fe:	70fb      	strb	r3, [r7, #3]
	uint8_t cmd[4];
	uint16_t cmd_PEC;

	cmd[0] = 0x00;
 8008300:	2300      	movs	r3, #0
 8008302:	723b      	strb	r3, [r7, #8]
	cmd[1] = 0x22;
 8008304:	2322      	movs	r3, #34	@ 0x22
 8008306:	727b      	strb	r3, [r7, #9]
	cmd_PEC = compute_PEC15(cmd, 2);
 8008308:	f107 0308 	add.w	r3, r7, #8
 800830c:	2102      	movs	r1, #2
 800830e:	4618      	mov	r0, r3
 8008310:	f7ff fc44 	bl	8007b9c <compute_PEC15>
 8008314:	4603      	mov	r3, r0
 8008316:	81fb      	strh	r3, [r7, #14]
	append_PEC(cmd, 2, cmd_PEC);
 8008318:	89fa      	ldrh	r2, [r7, #14]
 800831a:	f107 0308 	add.w	r3, r7, #8
 800831e:	2102      	movs	r1, #2
 8008320:	4618      	mov	r0, r3
 8008322:	f7ff fc71 	bl	8007c08 <append_PEC>

	read_cmd(cmd, PWMRegisterGroup_ptr, side);
 8008326:	78fa      	ldrb	r2, [r7, #3]
 8008328:	f107 0308 	add.w	r3, r7, #8
 800832c:	6879      	ldr	r1, [r7, #4]
 800832e:	4618      	mov	r0, r3
 8008330:	f7ff fd2a 	bl	8007d88 <read_cmd>
}
 8008334:	bf00      	nop
 8008336:	3710      	adds	r7, #16
 8008338:	46bd      	mov	sp, r7
 800833a:	bd80      	pop	{r7, pc}

0800833c <ADOW>:
	action_cmd(cmd, side);
}


void ADOW(uint8_t variant, uint8_t side)
{
 800833c:	b580      	push	{r7, lr}
 800833e:	b084      	sub	sp, #16
 8008340:	af00      	add	r7, sp, #0
 8008342:	4603      	mov	r3, r0
 8008344:	460a      	mov	r2, r1
 8008346:	71fb      	strb	r3, [r7, #7]
 8008348:	4613      	mov	r3, r2
 800834a:	71bb      	strb	r3, [r7, #6]
	uint8_t cmd[4];
	uint16_t cmd_PEC;

	if(variant) {			// PUP = 0
 800834c:	79fb      	ldrb	r3, [r7, #7]
 800834e:	2b00      	cmp	r3, #0
 8008350:	d004      	beq.n	800835c <ADOW+0x20>
		cmd[0] = 0x03;
 8008352:	2303      	movs	r3, #3
 8008354:	723b      	strb	r3, [r7, #8]
		cmd[1] = 0x38;
 8008356:	2338      	movs	r3, #56	@ 0x38
 8008358:	727b      	strb	r3, [r7, #9]
 800835a:	e003      	b.n	8008364 <ADOW+0x28>
	}
	else {					// PUP = 1
		cmd[0] = 0x03;
 800835c:	2303      	movs	r3, #3
 800835e:	723b      	strb	r3, [r7, #8]
		cmd[1] = 0x78;
 8008360:	2378      	movs	r3, #120	@ 0x78
 8008362:	727b      	strb	r3, [r7, #9]
	}

	cmd_PEC = compute_PEC15(cmd, 2);
 8008364:	f107 0308 	add.w	r3, r7, #8
 8008368:	2102      	movs	r1, #2
 800836a:	4618      	mov	r0, r3
 800836c:	f7ff fc16 	bl	8007b9c <compute_PEC15>
 8008370:	4603      	mov	r3, r0
 8008372:	81fb      	strh	r3, [r7, #14]
	append_PEC(cmd, 2, cmd_PEC);
 8008374:	89fa      	ldrh	r2, [r7, #14]
 8008376:	f107 0308 	add.w	r3, r7, #8
 800837a:	2102      	movs	r1, #2
 800837c:	4618      	mov	r0, r3
 800837e:	f7ff fc43 	bl	8007c08 <append_PEC>

	action_cmd(cmd, side);
 8008382:	79ba      	ldrb	r2, [r7, #6]
 8008384:	f107 0308 	add.w	r3, r7, #8
 8008388:	4611      	mov	r1, r2
 800838a:	4618      	mov	r0, r3
 800838c:	f7ff fc7c 	bl	8007c88 <action_cmd>
}
 8008390:	bf00      	nop
 8008392:	3710      	adds	r7, #16
 8008394:	46bd      	mov	sp, r7
 8008396:	bd80      	pop	{r7, pc}

08008398 <ADOL>:


void ADOL(uint8_t side)
{
 8008398:	b580      	push	{r7, lr}
 800839a:	b084      	sub	sp, #16
 800839c:	af00      	add	r7, sp, #0
 800839e:	4603      	mov	r3, r0
 80083a0:	71fb      	strb	r3, [r7, #7]
	uint8_t cmd[4];
	uint16_t cmd_PEC;

	cmd[0] = 0x03;
 80083a2:	2303      	movs	r3, #3
 80083a4:	723b      	strb	r3, [r7, #8]
	cmd[1] = 0x01;
 80083a6:	2301      	movs	r3, #1
 80083a8:	727b      	strb	r3, [r7, #9]
	cmd_PEC = compute_PEC15(cmd, 2);
 80083aa:	f107 0308 	add.w	r3, r7, #8
 80083ae:	2102      	movs	r1, #2
 80083b0:	4618      	mov	r0, r3
 80083b2:	f7ff fbf3 	bl	8007b9c <compute_PEC15>
 80083b6:	4603      	mov	r3, r0
 80083b8:	81fb      	strh	r3, [r7, #14]
	append_PEC(cmd, 2, cmd_PEC);
 80083ba:	89fa      	ldrh	r2, [r7, #14]
 80083bc:	f107 0308 	add.w	r3, r7, #8
 80083c0:	2102      	movs	r1, #2
 80083c2:	4618      	mov	r0, r3
 80083c4:	f7ff fc20 	bl	8007c08 <append_PEC>

	action_cmd(cmd, side);
 80083c8:	79fa      	ldrb	r2, [r7, #7]
 80083ca:	f107 0308 	add.w	r3, r7, #8
 80083ce:	4611      	mov	r1, r2
 80083d0:	4618      	mov	r0, r3
 80083d2:	f7ff fc59 	bl	8007c88 <action_cmd>
}
 80083d6:	bf00      	nop
 80083d8:	3710      	adds	r7, #16
 80083da:	46bd      	mov	sp, r7
 80083dc:	bd80      	pop	{r7, pc}

080083de <CVST>:


void CVST(uint8_t variant, uint8_t side)
{
 80083de:	b580      	push	{r7, lr}
 80083e0:	b084      	sub	sp, #16
 80083e2:	af00      	add	r7, sp, #0
 80083e4:	4603      	mov	r3, r0
 80083e6:	460a      	mov	r2, r1
 80083e8:	71fb      	strb	r3, [r7, #7]
 80083ea:	4613      	mov	r3, r2
 80083ec:	71bb      	strb	r3, [r7, #6]
	uint8_t cmd[4];
	uint16_t cmd_PEC;

	if(variant) {
 80083ee:	79fb      	ldrb	r3, [r7, #7]
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d004      	beq.n	80083fe <CVST+0x20>
		cmd[0] = 0x03;
 80083f4:	2303      	movs	r3, #3
 80083f6:	723b      	strb	r3, [r7, #8]
		cmd[1] = 0x27;
 80083f8:	2327      	movs	r3, #39	@ 0x27
 80083fa:	727b      	strb	r3, [r7, #9]
 80083fc:	e003      	b.n	8008406 <CVST+0x28>
	}
	else {
		cmd[0] = 0x03;
 80083fe:	2303      	movs	r3, #3
 8008400:	723b      	strb	r3, [r7, #8]
		cmd[1] = 0x47;
 8008402:	2347      	movs	r3, #71	@ 0x47
 8008404:	727b      	strb	r3, [r7, #9]
	}

	cmd_PEC = compute_PEC15(cmd, 2);
 8008406:	f107 0308 	add.w	r3, r7, #8
 800840a:	2102      	movs	r1, #2
 800840c:	4618      	mov	r0, r3
 800840e:	f7ff fbc5 	bl	8007b9c <compute_PEC15>
 8008412:	4603      	mov	r3, r0
 8008414:	81fb      	strh	r3, [r7, #14]
	append_PEC(cmd, 2, cmd_PEC);
 8008416:	89fa      	ldrh	r2, [r7, #14]
 8008418:	f107 0308 	add.w	r3, r7, #8
 800841c:	2102      	movs	r1, #2
 800841e:	4618      	mov	r0, r3
 8008420:	f7ff fbf2 	bl	8007c08 <append_PEC>

	action_cmd(cmd, side);
 8008424:	79ba      	ldrb	r2, [r7, #6]
 8008426:	f107 0308 	add.w	r3, r7, #8
 800842a:	4611      	mov	r1, r2
 800842c:	4618      	mov	r0, r3
 800842e:	f7ff fc2b 	bl	8007c88 <action_cmd>
}
 8008432:	bf00      	nop
 8008434:	3710      	adds	r7, #16
 8008436:	46bd      	mov	sp, r7
 8008438:	bd80      	pop	{r7, pc}

0800843a <AXST>:


void AXST(uint8_t variant, uint8_t side)
{
 800843a:	b580      	push	{r7, lr}
 800843c:	b084      	sub	sp, #16
 800843e:	af00      	add	r7, sp, #0
 8008440:	4603      	mov	r3, r0
 8008442:	460a      	mov	r2, r1
 8008444:	71fb      	strb	r3, [r7, #7]
 8008446:	4613      	mov	r3, r2
 8008448:	71bb      	strb	r3, [r7, #6]
	uint8_t cmd[4];
	uint16_t cmd_PEC;

	if(variant) {
 800844a:	79fb      	ldrb	r3, [r7, #7]
 800844c:	2b00      	cmp	r3, #0
 800844e:	d004      	beq.n	800845a <AXST+0x20>
		cmd[0] = 0x05;
 8008450:	2305      	movs	r3, #5
 8008452:	723b      	strb	r3, [r7, #8]
		cmd[1] = 0x27;
 8008454:	2327      	movs	r3, #39	@ 0x27
 8008456:	727b      	strb	r3, [r7, #9]
 8008458:	e003      	b.n	8008462 <AXST+0x28>
	}
	else {
		cmd[0] = 0x05;
 800845a:	2305      	movs	r3, #5
 800845c:	723b      	strb	r3, [r7, #8]
		cmd[1] = 0x47;
 800845e:	2347      	movs	r3, #71	@ 0x47
 8008460:	727b      	strb	r3, [r7, #9]
	}

	cmd_PEC = compute_PEC15(cmd, 2);
 8008462:	f107 0308 	add.w	r3, r7, #8
 8008466:	2102      	movs	r1, #2
 8008468:	4618      	mov	r0, r3
 800846a:	f7ff fb97 	bl	8007b9c <compute_PEC15>
 800846e:	4603      	mov	r3, r0
 8008470:	81fb      	strh	r3, [r7, #14]
	append_PEC(cmd, 2, cmd_PEC);
 8008472:	89fa      	ldrh	r2, [r7, #14]
 8008474:	f107 0308 	add.w	r3, r7, #8
 8008478:	2102      	movs	r1, #2
 800847a:	4618      	mov	r0, r3
 800847c:	f7ff fbc4 	bl	8007c08 <append_PEC>

	action_cmd(cmd, side);
 8008480:	79ba      	ldrb	r2, [r7, #6]
 8008482:	f107 0308 	add.w	r3, r7, #8
 8008486:	4611      	mov	r1, r2
 8008488:	4618      	mov	r0, r3
 800848a:	f7ff fbfd 	bl	8007c88 <action_cmd>
}
 800848e:	bf00      	nop
 8008490:	3710      	adds	r7, #16
 8008492:	46bd      	mov	sp, r7
 8008494:	bd80      	pop	{r7, pc}

08008496 <STATST>:


void STATST(uint8_t variant, uint8_t side)
{
 8008496:	b580      	push	{r7, lr}
 8008498:	b084      	sub	sp, #16
 800849a:	af00      	add	r7, sp, #0
 800849c:	4603      	mov	r3, r0
 800849e:	460a      	mov	r2, r1
 80084a0:	71fb      	strb	r3, [r7, #7]
 80084a2:	4613      	mov	r3, r2
 80084a4:	71bb      	strb	r3, [r7, #6]
	uint8_t cmd[4];
	uint16_t cmd_PEC;

	if (variant) {
 80084a6:	79fb      	ldrb	r3, [r7, #7]
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d004      	beq.n	80084b6 <STATST+0x20>
		cmd[0] = 0x05;
 80084ac:	2305      	movs	r3, #5
 80084ae:	723b      	strb	r3, [r7, #8]
		cmd[1] = 0x2F;
 80084b0:	232f      	movs	r3, #47	@ 0x2f
 80084b2:	727b      	strb	r3, [r7, #9]
 80084b4:	e003      	b.n	80084be <STATST+0x28>
	}
	else {
		cmd[0] = 0x05;
 80084b6:	2305      	movs	r3, #5
 80084b8:	723b      	strb	r3, [r7, #8]
		cmd[1] = 0x4F;
 80084ba:	234f      	movs	r3, #79	@ 0x4f
 80084bc:	727b      	strb	r3, [r7, #9]
	}

	cmd_PEC = compute_PEC15(cmd, 2);
 80084be:	f107 0308 	add.w	r3, r7, #8
 80084c2:	2102      	movs	r1, #2
 80084c4:	4618      	mov	r0, r3
 80084c6:	f7ff fb69 	bl	8007b9c <compute_PEC15>
 80084ca:	4603      	mov	r3, r0
 80084cc:	81fb      	strh	r3, [r7, #14]
	append_PEC(cmd, 2, cmd_PEC);
 80084ce:	89fa      	ldrh	r2, [r7, #14]
 80084d0:	f107 0308 	add.w	r3, r7, #8
 80084d4:	2102      	movs	r1, #2
 80084d6:	4618      	mov	r0, r3
 80084d8:	f7ff fb96 	bl	8007c08 <append_PEC>

	action_cmd(cmd, side);
 80084dc:	79ba      	ldrb	r2, [r7, #6]
 80084de:	f107 0308 	add.w	r3, r7, #8
 80084e2:	4611      	mov	r1, r2
 80084e4:	4618      	mov	r0, r3
 80084e6:	f7ff fbcf 	bl	8007c88 <action_cmd>
}
 80084ea:	bf00      	nop
 80084ec:	3710      	adds	r7, #16
 80084ee:	46bd      	mov	sp, r7
 80084f0:	bd80      	pop	{r7, pc}

080084f2 <ADSTATD>:


void ADSTATD(uint8_t side)
{
 80084f2:	b580      	push	{r7, lr}
 80084f4:	b084      	sub	sp, #16
 80084f6:	af00      	add	r7, sp, #0
 80084f8:	4603      	mov	r3, r0
 80084fa:	71fb      	strb	r3, [r7, #7]
	uint8_t cmd[4];
	uint16_t cmd_PEC;

	cmd[0] = 0x05;
 80084fc:	2305      	movs	r3, #5
 80084fe:	723b      	strb	r3, [r7, #8]
	cmd[1] = 0x08;
 8008500:	2308      	movs	r3, #8
 8008502:	727b      	strb	r3, [r7, #9]
	cmd_PEC = compute_PEC15(cmd, 2);
 8008504:	f107 0308 	add.w	r3, r7, #8
 8008508:	2102      	movs	r1, #2
 800850a:	4618      	mov	r0, r3
 800850c:	f7ff fb46 	bl	8007b9c <compute_PEC15>
 8008510:	4603      	mov	r3, r0
 8008512:	81fb      	strh	r3, [r7, #14]
	append_PEC(cmd, 2, cmd_PEC);
 8008514:	89fa      	ldrh	r2, [r7, #14]
 8008516:	f107 0308 	add.w	r3, r7, #8
 800851a:	2102      	movs	r1, #2
 800851c:	4618      	mov	r0, r3
 800851e:	f7ff fb73 	bl	8007c08 <append_PEC>

	action_cmd(cmd, side);
 8008522:	79fa      	ldrb	r2, [r7, #7]
 8008524:	f107 0308 	add.w	r3, r7, #8
 8008528:	4611      	mov	r1, r2
 800852a:	4618      	mov	r0, r3
 800852c:	f7ff fbac 	bl	8007c88 <action_cmd>
}
 8008530:	bf00      	nop
 8008532:	3710      	adds	r7, #16
 8008534:	46bd      	mov	sp, r7
 8008536:	bd80      	pop	{r7, pc}

08008538 <ADAXD>:


void ADAXD(uint8_t side)
{
 8008538:	b580      	push	{r7, lr}
 800853a:	b084      	sub	sp, #16
 800853c:	af00      	add	r7, sp, #0
 800853e:	4603      	mov	r3, r0
 8008540:	71fb      	strb	r3, [r7, #7]
	uint8_t cmd[4];
	uint16_t cmd_PEC;

	cmd[0] = 0x05;
 8008542:	2305      	movs	r3, #5
 8008544:	723b      	strb	r3, [r7, #8]
	cmd[1] = 0x00;
 8008546:	2300      	movs	r3, #0
 8008548:	727b      	strb	r3, [r7, #9]
	cmd_PEC = compute_PEC15(cmd, 2);
 800854a:	f107 0308 	add.w	r3, r7, #8
 800854e:	2102      	movs	r1, #2
 8008550:	4618      	mov	r0, r3
 8008552:	f7ff fb23 	bl	8007b9c <compute_PEC15>
 8008556:	4603      	mov	r3, r0
 8008558:	81fb      	strh	r3, [r7, #14]
	append_PEC(cmd, 2, cmd_PEC);
 800855a:	89fa      	ldrh	r2, [r7, #14]
 800855c:	f107 0308 	add.w	r3, r7, #8
 8008560:	2102      	movs	r1, #2
 8008562:	4618      	mov	r0, r3
 8008564:	f7ff fb50 	bl	8007c08 <append_PEC>

	action_cmd(cmd, side);
 8008568:	79fa      	ldrb	r2, [r7, #7]
 800856a:	f107 0308 	add.w	r3, r7, #8
 800856e:	4611      	mov	r1, r2
 8008570:	4618      	mov	r0, r3
 8008572:	f7ff fb89 	bl	8007c88 <action_cmd>
}
 8008576:	bf00      	nop
 8008578:	3710      	adds	r7, #16
 800857a:	46bd      	mov	sp, r7
 800857c:	bd80      	pop	{r7, pc}

0800857e <ADCV>:


void ADCV(uint8_t side)
{
 800857e:	b580      	push	{r7, lr}
 8008580:	b084      	sub	sp, #16
 8008582:	af00      	add	r7, sp, #0
 8008584:	4603      	mov	r3, r0
 8008586:	71fb      	strb	r3, [r7, #7]
	uint8_t cmd[4];
	uint16_t cmd_PEC;

	cmd[0] = 0x03;
 8008588:	2303      	movs	r3, #3
 800858a:	723b      	strb	r3, [r7, #8]
	cmd[1] = 0x70;
 800858c:	2370      	movs	r3, #112	@ 0x70
 800858e:	727b      	strb	r3, [r7, #9]
	cmd_PEC = compute_PEC15(cmd, 2);
 8008590:	f107 0308 	add.w	r3, r7, #8
 8008594:	2102      	movs	r1, #2
 8008596:	4618      	mov	r0, r3
 8008598:	f7ff fb00 	bl	8007b9c <compute_PEC15>
 800859c:	4603      	mov	r3, r0
 800859e:	81fb      	strh	r3, [r7, #14]
	append_PEC(cmd, 2, cmd_PEC);
 80085a0:	89fa      	ldrh	r2, [r7, #14]
 80085a2:	f107 0308 	add.w	r3, r7, #8
 80085a6:	2102      	movs	r1, #2
 80085a8:	4618      	mov	r0, r3
 80085aa:	f7ff fb2d 	bl	8007c08 <append_PEC>

	action_cmd(cmd, side);
 80085ae:	79fa      	ldrb	r2, [r7, #7]
 80085b0:	f107 0308 	add.w	r3, r7, #8
 80085b4:	4611      	mov	r1, r2
 80085b6:	4618      	mov	r0, r3
 80085b8:	f7ff fb66 	bl	8007c88 <action_cmd>
}
 80085bc:	bf00      	nop
 80085be:	3710      	adds	r7, #16
 80085c0:	46bd      	mov	sp, r7
 80085c2:	bd80      	pop	{r7, pc}

080085c4 <CLRCELL>:


void CLRCELL(uint8_t side)
{
 80085c4:	b580      	push	{r7, lr}
 80085c6:	b084      	sub	sp, #16
 80085c8:	af00      	add	r7, sp, #0
 80085ca:	4603      	mov	r3, r0
 80085cc:	71fb      	strb	r3, [r7, #7]
	uint8_t cmd[4];
	uint16_t cmd_PEC;

	cmd[0] = 0x07;
 80085ce:	2307      	movs	r3, #7
 80085d0:	723b      	strb	r3, [r7, #8]
	cmd[1] = 0x11;
 80085d2:	2311      	movs	r3, #17
 80085d4:	727b      	strb	r3, [r7, #9]
	cmd_PEC = compute_PEC15(cmd, 2);
 80085d6:	f107 0308 	add.w	r3, r7, #8
 80085da:	2102      	movs	r1, #2
 80085dc:	4618      	mov	r0, r3
 80085de:	f7ff fadd 	bl	8007b9c <compute_PEC15>
 80085e2:	4603      	mov	r3, r0
 80085e4:	81fb      	strh	r3, [r7, #14]
	append_PEC(cmd, 2, cmd_PEC);
 80085e6:	89fa      	ldrh	r2, [r7, #14]
 80085e8:	f107 0308 	add.w	r3, r7, #8
 80085ec:	2102      	movs	r1, #2
 80085ee:	4618      	mov	r0, r3
 80085f0:	f7ff fb0a 	bl	8007c08 <append_PEC>

	action_cmd(cmd, side);
 80085f4:	79fa      	ldrb	r2, [r7, #7]
 80085f6:	f107 0308 	add.w	r3, r7, #8
 80085fa:	4611      	mov	r1, r2
 80085fc:	4618      	mov	r0, r3
 80085fe:	f7ff fb43 	bl	8007c88 <action_cmd>
}
 8008602:	bf00      	nop
 8008604:	3710      	adds	r7, #16
 8008606:	46bd      	mov	sp, r7
 8008608:	bd80      	pop	{r7, pc}

0800860a <CLRAUX>:


void CLRAUX(uint8_t side)
{
 800860a:	b580      	push	{r7, lr}
 800860c:	b084      	sub	sp, #16
 800860e:	af00      	add	r7, sp, #0
 8008610:	4603      	mov	r3, r0
 8008612:	71fb      	strb	r3, [r7, #7]
	uint8_t cmd[4];
	uint16_t cmd_PEC;

	cmd[0] = 0x07;
 8008614:	2307      	movs	r3, #7
 8008616:	723b      	strb	r3, [r7, #8]
	cmd[1] = 0x12;
 8008618:	2312      	movs	r3, #18
 800861a:	727b      	strb	r3, [r7, #9]
	cmd_PEC = compute_PEC15(cmd, 2);
 800861c:	f107 0308 	add.w	r3, r7, #8
 8008620:	2102      	movs	r1, #2
 8008622:	4618      	mov	r0, r3
 8008624:	f7ff faba 	bl	8007b9c <compute_PEC15>
 8008628:	4603      	mov	r3, r0
 800862a:	81fb      	strh	r3, [r7, #14]
	append_PEC(cmd, 2, cmd_PEC);
 800862c:	89fa      	ldrh	r2, [r7, #14]
 800862e:	f107 0308 	add.w	r3, r7, #8
 8008632:	2102      	movs	r1, #2
 8008634:	4618      	mov	r0, r3
 8008636:	f7ff fae7 	bl	8007c08 <append_PEC>

	action_cmd(cmd, side);
 800863a:	79fa      	ldrb	r2, [r7, #7]
 800863c:	f107 0308 	add.w	r3, r7, #8
 8008640:	4611      	mov	r1, r2
 8008642:	4618      	mov	r0, r3
 8008644:	f7ff fb20 	bl	8007c88 <action_cmd>
}
 8008648:	bf00      	nop
 800864a:	3710      	adds	r7, #16
 800864c:	46bd      	mov	sp, r7
 800864e:	bd80      	pop	{r7, pc}

08008650 <CLRSTAT>:


void CLRSTAT(uint8_t side)
{
 8008650:	b580      	push	{r7, lr}
 8008652:	b084      	sub	sp, #16
 8008654:	af00      	add	r7, sp, #0
 8008656:	4603      	mov	r3, r0
 8008658:	71fb      	strb	r3, [r7, #7]
	uint8_t cmd[4];
	uint16_t cmd_PEC;

	cmd[0] = 0x07;
 800865a:	2307      	movs	r3, #7
 800865c:	723b      	strb	r3, [r7, #8]
	cmd[1] = 0x13;
 800865e:	2313      	movs	r3, #19
 8008660:	727b      	strb	r3, [r7, #9]
	cmd_PEC = compute_PEC15(cmd, 2);
 8008662:	f107 0308 	add.w	r3, r7, #8
 8008666:	2102      	movs	r1, #2
 8008668:	4618      	mov	r0, r3
 800866a:	f7ff fa97 	bl	8007b9c <compute_PEC15>
 800866e:	4603      	mov	r3, r0
 8008670:	81fb      	strh	r3, [r7, #14]
	append_PEC(cmd, 2, cmd_PEC);
 8008672:	89fa      	ldrh	r2, [r7, #14]
 8008674:	f107 0308 	add.w	r3, r7, #8
 8008678:	2102      	movs	r1, #2
 800867a:	4618      	mov	r0, r3
 800867c:	f7ff fac4 	bl	8007c08 <append_PEC>

	action_cmd(cmd, side);
 8008680:	79fa      	ldrb	r2, [r7, #7]
 8008682:	f107 0308 	add.w	r3, r7, #8
 8008686:	4611      	mov	r1, r2
 8008688:	4618      	mov	r0, r3
 800868a:	f7ff fafd 	bl	8007c88 <action_cmd>
}
 800868e:	bf00      	nop
 8008690:	3710      	adds	r7, #16
 8008692:	46bd      	mov	sp, r7
 8008694:	bd80      	pop	{r7, pc}

08008696 <DIAGN>:


void DIAGN(uint8_t side)
{
 8008696:	b580      	push	{r7, lr}
 8008698:	b084      	sub	sp, #16
 800869a:	af00      	add	r7, sp, #0
 800869c:	4603      	mov	r3, r0
 800869e:	71fb      	strb	r3, [r7, #7]
	uint8_t cmd[4];
	uint16_t cmd_PEC;

	cmd[0] = 0x07;
 80086a0:	2307      	movs	r3, #7
 80086a2:	723b      	strb	r3, [r7, #8]
	cmd[1] = 0x15;
 80086a4:	2315      	movs	r3, #21
 80086a6:	727b      	strb	r3, [r7, #9]
	cmd_PEC = compute_PEC15(cmd, 2);
 80086a8:	f107 0308 	add.w	r3, r7, #8
 80086ac:	2102      	movs	r1, #2
 80086ae:	4618      	mov	r0, r3
 80086b0:	f7ff fa74 	bl	8007b9c <compute_PEC15>
 80086b4:	4603      	mov	r3, r0
 80086b6:	81fb      	strh	r3, [r7, #14]
	append_PEC(cmd, 2, cmd_PEC);
 80086b8:	89fa      	ldrh	r2, [r7, #14]
 80086ba:	f107 0308 	add.w	r3, r7, #8
 80086be:	2102      	movs	r1, #2
 80086c0:	4618      	mov	r0, r3
 80086c2:	f7ff faa1 	bl	8007c08 <append_PEC>

	action_cmd(cmd, side);
 80086c6:	79fa      	ldrb	r2, [r7, #7]
 80086c8:	f107 0308 	add.w	r3, r7, #8
 80086cc:	4611      	mov	r1, r2
 80086ce:	4618      	mov	r0, r3
 80086d0:	f7ff fada 	bl	8007c88 <action_cmd>
}
 80086d4:	bf00      	nop
 80086d6:	3710      	adds	r7, #16
 80086d8:	46bd      	mov	sp, r7
 80086da:	bd80      	pop	{r7, pc}

080086dc <MUTE>:


void MUTE(uint8_t side)
{
 80086dc:	b580      	push	{r7, lr}
 80086de:	b084      	sub	sp, #16
 80086e0:	af00      	add	r7, sp, #0
 80086e2:	4603      	mov	r3, r0
 80086e4:	71fb      	strb	r3, [r7, #7]
	uint8_t cmd[4];
	uint16_t cmd_PEC;

	cmd[0] = 0x00;
 80086e6:	2300      	movs	r3, #0
 80086e8:	723b      	strb	r3, [r7, #8]
	cmd[1] = 0x28;
 80086ea:	2328      	movs	r3, #40	@ 0x28
 80086ec:	727b      	strb	r3, [r7, #9]
	cmd_PEC = compute_PEC15(cmd, 2);
 80086ee:	f107 0308 	add.w	r3, r7, #8
 80086f2:	2102      	movs	r1, #2
 80086f4:	4618      	mov	r0, r3
 80086f6:	f7ff fa51 	bl	8007b9c <compute_PEC15>
 80086fa:	4603      	mov	r3, r0
 80086fc:	81fb      	strh	r3, [r7, #14]
	append_PEC(cmd, 2, cmd_PEC);
 80086fe:	89fa      	ldrh	r2, [r7, #14]
 8008700:	f107 0308 	add.w	r3, r7, #8
 8008704:	2102      	movs	r1, #2
 8008706:	4618      	mov	r0, r3
 8008708:	f7ff fa7e 	bl	8007c08 <append_PEC>

	action_cmd(cmd, side);
 800870c:	79fa      	ldrb	r2, [r7, #7]
 800870e:	f107 0308 	add.w	r3, r7, #8
 8008712:	4611      	mov	r1, r2
 8008714:	4618      	mov	r0, r3
 8008716:	f7ff fab7 	bl	8007c88 <action_cmd>
}
 800871a:	bf00      	nop
 800871c:	3710      	adds	r7, #16
 800871e:	46bd      	mov	sp, r7
 8008720:	bd80      	pop	{r7, pc}

08008722 <UNMUTE>:


void UNMUTE(uint8_t side)
{
 8008722:	b580      	push	{r7, lr}
 8008724:	b084      	sub	sp, #16
 8008726:	af00      	add	r7, sp, #0
 8008728:	4603      	mov	r3, r0
 800872a:	71fb      	strb	r3, [r7, #7]
	uint8_t cmd[4];
	uint16_t cmd_PEC;

	cmd[0] = 0x00;
 800872c:	2300      	movs	r3, #0
 800872e:	723b      	strb	r3, [r7, #8]
	cmd[1] = 0x29;
 8008730:	2329      	movs	r3, #41	@ 0x29
 8008732:	727b      	strb	r3, [r7, #9]
	cmd_PEC = compute_PEC15(cmd, 2);
 8008734:	f107 0308 	add.w	r3, r7, #8
 8008738:	2102      	movs	r1, #2
 800873a:	4618      	mov	r0, r3
 800873c:	f7ff fa2e 	bl	8007b9c <compute_PEC15>
 8008740:	4603      	mov	r3, r0
 8008742:	81fb      	strh	r3, [r7, #14]
	append_PEC(cmd, 2, cmd_PEC);
 8008744:	89fa      	ldrh	r2, [r7, #14]
 8008746:	f107 0308 	add.w	r3, r7, #8
 800874a:	2102      	movs	r1, #2
 800874c:	4618      	mov	r0, r3
 800874e:	f7ff fa5b 	bl	8007c08 <append_PEC>

	action_cmd(cmd, side);
 8008752:	79fa      	ldrb	r2, [r7, #7]
 8008754:	f107 0308 	add.w	r3, r7, #8
 8008758:	4611      	mov	r1, r2
 800875a:	4618      	mov	r0, r3
 800875c:	f7ff fa94 	bl	8007c88 <action_cmd>
}
 8008760:	bf00      	nop
 8008762:	3710      	adds	r7, #16
 8008764:	46bd      	mov	sp, r7
 8008766:	bd80      	pop	{r7, pc}

08008768 <force_refup>:
// *** END ACTION COMMANDS ***

void force_refup(void)
{
 8008768:	b580      	push	{r7, lr}
 800876a:	b084      	sub	sp, #16
 800876c:	af00      	add	r7, sp, #0
	uint8_t attempts = 0;
 800876e:	2300      	movs	r3, #0
 8008770:	73fb      	strb	r3, [r7, #15]

	uint8_t payloadRegisterA[8];

	payloadRegisterA[0] = 0xFE;
 8008772:	23fe      	movs	r3, #254	@ 0xfe
 8008774:	713b      	strb	r3, [r7, #4]
	payloadRegisterA[1] = 0x00;
 8008776:	2300      	movs	r3, #0
 8008778:	717b      	strb	r3, [r7, #5]
	payloadRegisterA[2] = 0x00;
 800877a:	2300      	movs	r3, #0
 800877c:	71bb      	strb	r3, [r7, #6]
	payloadRegisterA[3] = 0x00;
 800877e:	2300      	movs	r3, #0
 8008780:	71fb      	strb	r3, [r7, #7]
	payloadRegisterA[4] = 0x00;
 8008782:	2300      	movs	r3, #0
 8008784:	723b      	strb	r3, [r7, #8]
	payloadRegisterA[5] = 0x00;
 8008786:	2300      	movs	r3, #0
 8008788:	727b      	strb	r3, [r7, #9]

	while(attempts < ATTEMPT_LIMIT) {
 800878a:	e01a      	b.n	80087c2 <force_refup+0x5a>
		WRCFGA(payloadRegisterA, SIDE_A);
 800878c:	1d3b      	adds	r3, r7, #4
 800878e:	2101      	movs	r1, #1
 8008790:	4618      	mov	r0, r3
 8008792:	f7ff fb4f 	bl	8007e34 <WRCFGA>
		WRCFGA(payloadRegisterA, SIDE_B);
 8008796:	1d3b      	adds	r3, r7, #4
 8008798:	2100      	movs	r1, #0
 800879a:	4618      	mov	r0, r3
 800879c:	f7ff fb4a 	bl	8007e34 <WRCFGA>
		wait(1);
 80087a0:	2001      	movs	r0, #1
 80087a2:	f000 fd49 	bl	8009238 <wait>

		if(refup_check()) { attempts = 13; }
 80087a6:	f000 f81b 	bl	80087e0 <refup_check>
 80087aa:	4603      	mov	r3, r0
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	d002      	beq.n	80087b6 <force_refup+0x4e>
 80087b0:	230d      	movs	r3, #13
 80087b2:	73fb      	strb	r3, [r7, #15]
 80087b4:	e005      	b.n	80087c2 <force_refup+0x5a>

		else {
			attempts++;
 80087b6:	7bfb      	ldrb	r3, [r7, #15]
 80087b8:	3301      	adds	r3, #1
 80087ba:	73fb      	strb	r3, [r7, #15]
			wait(1);
 80087bc:	2001      	movs	r0, #1
 80087be:	f000 fd3b 	bl	8009238 <wait>
	while(attempts < ATTEMPT_LIMIT) {
 80087c2:	7bfb      	ldrb	r3, [r7, #15]
 80087c4:	2b09      	cmp	r3, #9
 80087c6:	d9e1      	bls.n	800878c <force_refup+0x24>
		}
	}
	if(attempts != 13) {
 80087c8:	7bfb      	ldrb	r3, [r7, #15]
 80087ca:	2b0d      	cmp	r3, #13
 80087cc:	d004      	beq.n	80087d8 <force_refup+0x70>
		error_loop(ERROR_PEC, 0, 0);
 80087ce:	2200      	movs	r2, #0
 80087d0:	2100      	movs	r1, #0
 80087d2:	2056      	movs	r0, #86	@ 0x56
 80087d4:	f7fb ff46 	bl	8004664 <error_loop>
	}
}
 80087d8:	bf00      	nop
 80087da:	3710      	adds	r7, #16
 80087dc:	46bd      	mov	sp, r7
 80087de:	bd80      	pop	{r7, pc}

080087e0 <refup_check>:


uint8_t refup_check(void)
{
 80087e0:	b580      	push	{r7, lr}
 80087e2:	b086      	sub	sp, #24
 80087e4:	af00      	add	r7, sp, #0
	uint8_t attempts = 0;
 80087e6:	2300      	movs	r3, #0
 80087e8:	75fb      	strb	r3, [r7, #23]

	uint8_t sideA_configRegisterA[8];
	uint8_t sideB_configRegisterA[8];

	uint8_t sideA_configRegisterA_PECflag = 0;
 80087ea:	2300      	movs	r3, #0
 80087ec:	753b      	strb	r3, [r7, #20]
	uint8_t sideB_configRegisterA_PECflag = 0;
 80087ee:	2300      	movs	r3, #0
 80087f0:	74fb      	strb	r3, [r7, #19]

	uint8_t sideA_refonBit;
	uint8_t sideB_refonBit;

	while(attempts < ATTEMPT_LIMIT) {
 80087f2:	e032      	b.n	800885a <refup_check+0x7a>
		RDCFGA(sideA_configRegisterA, SIDE_A);
 80087f4:	f107 0308 	add.w	r3, r7, #8
 80087f8:	2101      	movs	r1, #1
 80087fa:	4618      	mov	r0, r3
 80087fc:	f7ff fba6 	bl	8007f4c <RDCFGA>
		RDCFGA(sideB_configRegisterA, SIDE_B);
 8008800:	463b      	mov	r3, r7
 8008802:	2100      	movs	r1, #0
 8008804:	4618      	mov	r0, r3
 8008806:	f7ff fba1 	bl	8007f4c <RDCFGA>

		sideA_configRegisterA_PECflag = verify_PEC15(sideA_configRegisterA);
 800880a:	f107 0308 	add.w	r3, r7, #8
 800880e:	4618      	mov	r0, r3
 8008810:	f7ff fa17 	bl	8007c42 <verify_PEC15>
 8008814:	4603      	mov	r3, r0
 8008816:	753b      	strb	r3, [r7, #20]
		sideB_configRegisterA_PECflag = verify_PEC15(sideB_configRegisterA);
 8008818:	463b      	mov	r3, r7
 800881a:	4618      	mov	r0, r3
 800881c:	f7ff fa11 	bl	8007c42 <verify_PEC15>
 8008820:	4603      	mov	r3, r0
 8008822:	74fb      	strb	r3, [r7, #19]

		sideA_refonBit = (sideA_configRegisterA[0] >> 2) & 0x01;
 8008824:	7a3b      	ldrb	r3, [r7, #8]
 8008826:	089b      	lsrs	r3, r3, #2
 8008828:	b2db      	uxtb	r3, r3
 800882a:	f003 0301 	and.w	r3, r3, #1
 800882e:	75bb      	strb	r3, [r7, #22]
		sideB_refonBit = (sideB_configRegisterA[0] >> 2) & 0x01;
 8008830:	783b      	ldrb	r3, [r7, #0]
 8008832:	089b      	lsrs	r3, r3, #2
 8008834:	b2db      	uxtb	r3, r3
 8008836:	f003 0301 	and.w	r3, r3, #1
 800883a:	757b      	strb	r3, [r7, #21]

		if(sideA_configRegisterA_PECflag == 2 && sideB_configRegisterA_PECflag == 2) { attempts = 13; }
 800883c:	7d3b      	ldrb	r3, [r7, #20]
 800883e:	2b02      	cmp	r3, #2
 8008840:	d105      	bne.n	800884e <refup_check+0x6e>
 8008842:	7cfb      	ldrb	r3, [r7, #19]
 8008844:	2b02      	cmp	r3, #2
 8008846:	d102      	bne.n	800884e <refup_check+0x6e>
 8008848:	230d      	movs	r3, #13
 800884a:	75fb      	strb	r3, [r7, #23]
 800884c:	e005      	b.n	800885a <refup_check+0x7a>

		else {
			attempts++;
 800884e:	7dfb      	ldrb	r3, [r7, #23]
 8008850:	3301      	adds	r3, #1
 8008852:	75fb      	strb	r3, [r7, #23]
			wait(1);
 8008854:	2001      	movs	r0, #1
 8008856:	f000 fcef 	bl	8009238 <wait>
	while(attempts < ATTEMPT_LIMIT) {
 800885a:	7dfb      	ldrb	r3, [r7, #23]
 800885c:	2b09      	cmp	r3, #9
 800885e:	d9c9      	bls.n	80087f4 <refup_check+0x14>
		}
	}
	if(attempts != 13) { error_loop(ERROR_PEC, 0, 0); }
 8008860:	7dfb      	ldrb	r3, [r7, #23]
 8008862:	2b0d      	cmp	r3, #13
 8008864:	d004      	beq.n	8008870 <refup_check+0x90>
 8008866:	2200      	movs	r2, #0
 8008868:	2100      	movs	r1, #0
 800886a:	2056      	movs	r0, #86	@ 0x56
 800886c:	f7fb fefa 	bl	8004664 <error_loop>

	if(sideA_refonBit == 1 && sideB_refonBit == 1) { return 1; }
 8008870:	7dbb      	ldrb	r3, [r7, #22]
 8008872:	2b01      	cmp	r3, #1
 8008874:	d104      	bne.n	8008880 <refup_check+0xa0>
 8008876:	7d7b      	ldrb	r3, [r7, #21]
 8008878:	2b01      	cmp	r3, #1
 800887a:	d101      	bne.n	8008880 <refup_check+0xa0>
 800887c:	2301      	movs	r3, #1
 800887e:	e000      	b.n	8008882 <refup_check+0xa2>

	else { return 0; }
 8008880:	2300      	movs	r3, #0
}
 8008882:	4618      	mov	r0, r3
 8008884:	3718      	adds	r7, #24
 8008886:	46bd      	mov	sp, r7
 8008888:	bd80      	pop	{r7, pc}

0800888a <force_mute>:


void force_mute(void)
{
 800888a:	b580      	push	{r7, lr}
 800888c:	b086      	sub	sp, #24
 800888e:	af00      	add	r7, sp, #0
	uint8_t attempts = 0;
 8008890:	2300      	movs	r3, #0
 8008892:	75fb      	strb	r3, [r7, #23]
	uint8_t subAttempts = 0;
 8008894:	2300      	movs	r3, #0
 8008896:	75bb      	strb	r3, [r7, #22]

	uint8_t sideA_receivedRegisterB[8];
	uint8_t sideB_receivedRegisterB[8];

	uint8_t sideA_registerB_PECflag = 0;
 8008898:	2300      	movs	r3, #0
 800889a:	757b      	strb	r3, [r7, #21]
	uint8_t sideB_registerB_PECflag = 0;
 800889c:	2300      	movs	r3, #0
 800889e:	753b      	strb	r3, [r7, #20]

	uint8_t sideA_muteBit;
	uint8_t sideB_muteBit;

	while(attempts < ATTEMPT_LIMIT) {
 80088a0:	e05a      	b.n	8008958 <force_mute+0xce>
		while(subAttempts < ATTEMPT_LIMIT) {
			MUTE(SIDE_A);
 80088a2:	2001      	movs	r0, #1
 80088a4:	f7ff ff1a 	bl	80086dc <MUTE>
			MUTE(SIDE_B);
 80088a8:	2000      	movs	r0, #0
 80088aa:	f7ff ff17 	bl	80086dc <MUTE>
			wait(1);
 80088ae:	2001      	movs	r0, #1
 80088b0:	f000 fcc2 	bl	8009238 <wait>
			MUTE(SIDE_A);
 80088b4:	2001      	movs	r0, #1
 80088b6:	f7ff ff11 	bl	80086dc <MUTE>
			MUTE(SIDE_B);
 80088ba:	2000      	movs	r0, #0
 80088bc:	f7ff ff0e 	bl	80086dc <MUTE>
			wait(1);
 80088c0:	2001      	movs	r0, #1
 80088c2:	f000 fcb9 	bl	8009238 <wait>

			RDCFGB(sideA_receivedRegisterB, SIDE_A);
 80088c6:	f107 0308 	add.w	r3, r7, #8
 80088ca:	2101      	movs	r1, #1
 80088cc:	4618      	mov	r0, r3
 80088ce:	f7ff fb61 	bl	8007f94 <RDCFGB>
			RDCFGB(sideB_receivedRegisterB, SIDE_B);
 80088d2:	463b      	mov	r3, r7
 80088d4:	2100      	movs	r1, #0
 80088d6:	4618      	mov	r0, r3
 80088d8:	f7ff fb5c 	bl	8007f94 <RDCFGB>

			sideA_registerB_PECflag = verify_PEC15(sideA_receivedRegisterB);
 80088dc:	f107 0308 	add.w	r3, r7, #8
 80088e0:	4618      	mov	r0, r3
 80088e2:	f7ff f9ae 	bl	8007c42 <verify_PEC15>
 80088e6:	4603      	mov	r3, r0
 80088e8:	757b      	strb	r3, [r7, #21]
			sideB_registerB_PECflag = verify_PEC15(sideB_receivedRegisterB);
 80088ea:	463b      	mov	r3, r7
 80088ec:	4618      	mov	r0, r3
 80088ee:	f7ff f9a8 	bl	8007c42 <verify_PEC15>
 80088f2:	4603      	mov	r3, r0
 80088f4:	753b      	strb	r3, [r7, #20]

			if(sideA_registerB_PECflag == 2 && sideB_registerB_PECflag == 2) { subAttempts = 13; }
 80088f6:	7d7b      	ldrb	r3, [r7, #21]
 80088f8:	2b02      	cmp	r3, #2
 80088fa:	d105      	bne.n	8008908 <force_mute+0x7e>
 80088fc:	7d3b      	ldrb	r3, [r7, #20]
 80088fe:	2b02      	cmp	r3, #2
 8008900:	d102      	bne.n	8008908 <force_mute+0x7e>
 8008902:	230d      	movs	r3, #13
 8008904:	75bb      	strb	r3, [r7, #22]
 8008906:	e005      	b.n	8008914 <force_mute+0x8a>

			else {
				subAttempts++;
 8008908:	7dbb      	ldrb	r3, [r7, #22]
 800890a:	3301      	adds	r3, #1
 800890c:	75bb      	strb	r3, [r7, #22]
				wait(1);
 800890e:	2001      	movs	r0, #1
 8008910:	f000 fc92 	bl	8009238 <wait>
		while(subAttempts < ATTEMPT_LIMIT) {
 8008914:	7dbb      	ldrb	r3, [r7, #22]
 8008916:	2b09      	cmp	r3, #9
 8008918:	d9c3      	bls.n	80088a2 <force_mute+0x18>
			}
		}
		if(subAttempts != 13) { error_loop(ERROR_PEC, 0, 0); }
 800891a:	7dbb      	ldrb	r3, [r7, #22]
 800891c:	2b0d      	cmp	r3, #13
 800891e:	d004      	beq.n	800892a <force_mute+0xa0>
 8008920:	2200      	movs	r2, #0
 8008922:	2100      	movs	r1, #0
 8008924:	2056      	movs	r0, #86	@ 0x56
 8008926:	f7fb fe9d 	bl	8004664 <error_loop>

		sideA_muteBit = (sideA_receivedRegisterB[1] >> 7) & 0x01;
 800892a:	7a7b      	ldrb	r3, [r7, #9]
 800892c:	09db      	lsrs	r3, r3, #7
 800892e:	74fb      	strb	r3, [r7, #19]
		sideB_muteBit = (sideB_receivedRegisterB[1] >> 7) & 0x01;
 8008930:	787b      	ldrb	r3, [r7, #1]
 8008932:	09db      	lsrs	r3, r3, #7
 8008934:	74bb      	strb	r3, [r7, #18]

		if(sideA_muteBit == 1 && sideB_muteBit == 1) { attempts = 13; }
 8008936:	7cfb      	ldrb	r3, [r7, #19]
 8008938:	2b01      	cmp	r3, #1
 800893a:	d105      	bne.n	8008948 <force_mute+0xbe>
 800893c:	7cbb      	ldrb	r3, [r7, #18]
 800893e:	2b01      	cmp	r3, #1
 8008940:	d102      	bne.n	8008948 <force_mute+0xbe>
 8008942:	230d      	movs	r3, #13
 8008944:	75fb      	strb	r3, [r7, #23]
 8008946:	e007      	b.n	8008958 <force_mute+0xce>

		else {
			attempts++;
 8008948:	7dfb      	ldrb	r3, [r7, #23]
 800894a:	3301      	adds	r3, #1
 800894c:	75fb      	strb	r3, [r7, #23]
			subAttempts = 0;
 800894e:	2300      	movs	r3, #0
 8008950:	75bb      	strb	r3, [r7, #22]
			wait(1);
 8008952:	2001      	movs	r0, #1
 8008954:	f000 fc70 	bl	8009238 <wait>
	while(attempts < ATTEMPT_LIMIT) {
 8008958:	7dfb      	ldrb	r3, [r7, #23]
 800895a:	2b09      	cmp	r3, #9
 800895c:	d9da      	bls.n	8008914 <force_mute+0x8a>
		}
	}
	if(attempts != 13) { error_loop(ERROR_MUTE, 0, 0); }
 800895e:	7dfb      	ldrb	r3, [r7, #23]
 8008960:	2b0d      	cmp	r3, #13
 8008962:	d004      	beq.n	800896e <force_mute+0xe4>
 8008964:	2200      	movs	r2, #0
 8008966:	2100      	movs	r1, #0
 8008968:	204b      	movs	r0, #75	@ 0x4b
 800896a:	f7fb fe7b 	bl	8004664 <error_loop>
}
 800896e:	bf00      	nop
 8008970:	3718      	adds	r7, #24
 8008972:	46bd      	mov	sp, r7
 8008974:	bd80      	pop	{r7, pc}

08008976 <force_unmute>:


void force_unmute(void)
{
 8008976:	b580      	push	{r7, lr}
 8008978:	b086      	sub	sp, #24
 800897a:	af00      	add	r7, sp, #0
	uint8_t attempts = 0;
 800897c:	2300      	movs	r3, #0
 800897e:	75fb      	strb	r3, [r7, #23]
	uint8_t subAttempts = 0;
 8008980:	2300      	movs	r3, #0
 8008982:	75bb      	strb	r3, [r7, #22]

	uint8_t sideA_receivedRegisterB[8];
	uint8_t sideB_receivedRegisterB[8];

	uint8_t sideA_registerB_PECflag = 0;
 8008984:	2300      	movs	r3, #0
 8008986:	757b      	strb	r3, [r7, #21]
	uint8_t sideB_registerB_PECflag = 0;
 8008988:	2300      	movs	r3, #0
 800898a:	753b      	strb	r3, [r7, #20]

	uint8_t sideA_muteBit;
	uint8_t sideB_muteBit;

	while(attempts < ATTEMPT_LIMIT) {
 800898c:	e05a      	b.n	8008a44 <force_unmute+0xce>
		while(subAttempts < ATTEMPT_LIMIT) {
			UNMUTE(SIDE_A);
 800898e:	2001      	movs	r0, #1
 8008990:	f7ff fec7 	bl	8008722 <UNMUTE>
			UNMUTE(SIDE_B);
 8008994:	2000      	movs	r0, #0
 8008996:	f7ff fec4 	bl	8008722 <UNMUTE>
			wait(1);
 800899a:	2001      	movs	r0, #1
 800899c:	f000 fc4c 	bl	8009238 <wait>
			UNMUTE(SIDE_A);
 80089a0:	2001      	movs	r0, #1
 80089a2:	f7ff febe 	bl	8008722 <UNMUTE>
			UNMUTE(SIDE_B);
 80089a6:	2000      	movs	r0, #0
 80089a8:	f7ff febb 	bl	8008722 <UNMUTE>
			wait(1);
 80089ac:	2001      	movs	r0, #1
 80089ae:	f000 fc43 	bl	8009238 <wait>

			RDCFGB(sideA_receivedRegisterB, SIDE_A);
 80089b2:	f107 0308 	add.w	r3, r7, #8
 80089b6:	2101      	movs	r1, #1
 80089b8:	4618      	mov	r0, r3
 80089ba:	f7ff faeb 	bl	8007f94 <RDCFGB>
			RDCFGB(sideB_receivedRegisterB, SIDE_B);
 80089be:	463b      	mov	r3, r7
 80089c0:	2100      	movs	r1, #0
 80089c2:	4618      	mov	r0, r3
 80089c4:	f7ff fae6 	bl	8007f94 <RDCFGB>

			sideA_registerB_PECflag = verify_PEC15(sideA_receivedRegisterB);
 80089c8:	f107 0308 	add.w	r3, r7, #8
 80089cc:	4618      	mov	r0, r3
 80089ce:	f7ff f938 	bl	8007c42 <verify_PEC15>
 80089d2:	4603      	mov	r3, r0
 80089d4:	757b      	strb	r3, [r7, #21]
			sideB_registerB_PECflag = verify_PEC15(sideB_receivedRegisterB);
 80089d6:	463b      	mov	r3, r7
 80089d8:	4618      	mov	r0, r3
 80089da:	f7ff f932 	bl	8007c42 <verify_PEC15>
 80089de:	4603      	mov	r3, r0
 80089e0:	753b      	strb	r3, [r7, #20]

			if(sideA_registerB_PECflag == 2 && sideB_registerB_PECflag == 2) { subAttempts = 13; }
 80089e2:	7d7b      	ldrb	r3, [r7, #21]
 80089e4:	2b02      	cmp	r3, #2
 80089e6:	d105      	bne.n	80089f4 <force_unmute+0x7e>
 80089e8:	7d3b      	ldrb	r3, [r7, #20]
 80089ea:	2b02      	cmp	r3, #2
 80089ec:	d102      	bne.n	80089f4 <force_unmute+0x7e>
 80089ee:	230d      	movs	r3, #13
 80089f0:	75bb      	strb	r3, [r7, #22]
 80089f2:	e005      	b.n	8008a00 <force_unmute+0x8a>

			else {
				subAttempts++;
 80089f4:	7dbb      	ldrb	r3, [r7, #22]
 80089f6:	3301      	adds	r3, #1
 80089f8:	75bb      	strb	r3, [r7, #22]
				wait(1);
 80089fa:	2001      	movs	r0, #1
 80089fc:	f000 fc1c 	bl	8009238 <wait>
		while(subAttempts < ATTEMPT_LIMIT) {
 8008a00:	7dbb      	ldrb	r3, [r7, #22]
 8008a02:	2b09      	cmp	r3, #9
 8008a04:	d9c3      	bls.n	800898e <force_unmute+0x18>
			}
		}
		if(subAttempts != 13) { error_loop(ERROR_PEC, 0, 0); }
 8008a06:	7dbb      	ldrb	r3, [r7, #22]
 8008a08:	2b0d      	cmp	r3, #13
 8008a0a:	d004      	beq.n	8008a16 <force_unmute+0xa0>
 8008a0c:	2200      	movs	r2, #0
 8008a0e:	2100      	movs	r1, #0
 8008a10:	2056      	movs	r0, #86	@ 0x56
 8008a12:	f7fb fe27 	bl	8004664 <error_loop>

		sideA_muteBit = (sideA_receivedRegisterB[1] >> 7) & 0x01;
 8008a16:	7a7b      	ldrb	r3, [r7, #9]
 8008a18:	09db      	lsrs	r3, r3, #7
 8008a1a:	74fb      	strb	r3, [r7, #19]
		sideB_muteBit = (sideB_receivedRegisterB[1] >> 7) & 0x01;
 8008a1c:	787b      	ldrb	r3, [r7, #1]
 8008a1e:	09db      	lsrs	r3, r3, #7
 8008a20:	74bb      	strb	r3, [r7, #18]

		if(sideA_muteBit == 0 && sideB_muteBit == 0) { attempts = 13; }
 8008a22:	7cfb      	ldrb	r3, [r7, #19]
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	d105      	bne.n	8008a34 <force_unmute+0xbe>
 8008a28:	7cbb      	ldrb	r3, [r7, #18]
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d102      	bne.n	8008a34 <force_unmute+0xbe>
 8008a2e:	230d      	movs	r3, #13
 8008a30:	75fb      	strb	r3, [r7, #23]
 8008a32:	e007      	b.n	8008a44 <force_unmute+0xce>

		else {
			attempts++;
 8008a34:	7dfb      	ldrb	r3, [r7, #23]
 8008a36:	3301      	adds	r3, #1
 8008a38:	75fb      	strb	r3, [r7, #23]
			subAttempts = 0;
 8008a3a:	2300      	movs	r3, #0
 8008a3c:	75bb      	strb	r3, [r7, #22]
			wait(1);
 8008a3e:	2001      	movs	r0, #1
 8008a40:	f000 fbfa 	bl	8009238 <wait>
	while(attempts < ATTEMPT_LIMIT) {
 8008a44:	7dfb      	ldrb	r3, [r7, #23]
 8008a46:	2b09      	cmp	r3, #9
 8008a48:	d9da      	bls.n	8008a00 <force_unmute+0x8a>
		}
	}
	if(attempts != 13) { error_loop(ERROR_MUTE, 0, 0); }
 8008a4a:	7dfb      	ldrb	r3, [r7, #23]
 8008a4c:	2b0d      	cmp	r3, #13
 8008a4e:	d004      	beq.n	8008a5a <force_unmute+0xe4>
 8008a50:	2200      	movs	r2, #0
 8008a52:	2100      	movs	r1, #0
 8008a54:	204b      	movs	r0, #75	@ 0x4b
 8008a56:	f7fb fe05 	bl	8004664 <error_loop>
}
 8008a5a:	bf00      	nop
 8008a5c:	3718      	adds	r7, #24
 8008a5e:	46bd      	mov	sp, r7
 8008a60:	bd80      	pop	{r7, pc}
	...

08008a64 <torch_main>:
volatile uint32_t balanceCounter;
volatile uint32_t transientCounter;


void torch_main(void)
{
 8008a64:	b580      	push	{r7, lr}
 8008a66:	b0b4      	sub	sp, #208	@ 0xd0
 8008a68:	af00      	add	r7, sp, #0
	uint8_t RxData[8];

	uint16_t cellVoltages[CELL_QTY];				// Holds all cell voltages within a module
	float moduleTemperatures[MODULE_THERM_QTY];		// Holds all module thermistor temperatures

	uint8_t cellsToBalance[CELL_QTY] = {0};
 8008a6a:	1d3b      	adds	r3, r7, #4
 8008a6c:	2200      	movs	r2, #0
 8008a6e:	601a      	str	r2, [r3, #0]
 8008a70:	605a      	str	r2, [r3, #4]
 8008a72:	609a      	str	r2, [r3, #8]
 8008a74:	60da      	str	r2, [r3, #12]
 8008a76:	611a      	str	r2, [r3, #16]
	uint8_t cellsToBalanceQty = 0;
 8008a78:	2300      	movs	r3, #0
 8008a7a:	f887 30cf 	strb.w	r3, [r7, #207]	@ 0xcf

	uint16_t absMinCellVoltage = 0;
 8008a7e:	2300      	movs	r3, #0
 8008a80:	807b      	strh	r3, [r7, #2]

	uint8_t overheatFlag = 0;
 8008a82:	2300      	movs	r3, #0
 8008a84:	f887 30ce 	strb.w	r3, [r7, #206]	@ 0xce
	uint8_t overheatCount = 0;
 8008a88:	2300      	movs	r3, #0
 8008a8a:	f887 30cd 	strb.w	r3, [r7, #205]	@ 0xcd

	uint8_t overvoltFlag = 0;
 8008a8e:	2300      	movs	r3, #0
 8008a90:	f887 30cc 	strb.w	r3, [r7, #204]	@ 0xcc
	uint8_t overvoltCount = 0;
 8008a94:	2300      	movs	r3, #0
 8008a96:	f887 30cb 	strb.w	r3, [r7, #203]	@ 0xcb

	uint8_t undervoltFlag = 0;
 8008a9a:	2300      	movs	r3, #0
 8008a9c:	f887 30ca 	strb.w	r3, [r7, #202]	@ 0xca
	uint8_t undervoltCount = 0;
 8008aa0:	2300      	movs	r3, #0
 8008aa2:	f887 30c9 	strb.w	r3, [r7, #201]	@ 0xc9
	uint8_t faultingThermistorIndex;
	float faultingTemperature;
	uint8_t faultingCellIndex;
	uint16_t faultingCellVoltage;

	uint8_t measureFlag = 0;
 8008aa6:	2300      	movs	r3, #0
 8008aa8:	f887 30bf 	strb.w	r3, [r7, #191]	@ 0xbf
			transmissionDelay = 800;
			break;
	}
	*/

	switch(moduleID) {
 8008aac:	2301      	movs	r3, #1
 8008aae:	3b01      	subs	r3, #1
 8008ab0:	2b04      	cmp	r3, #4
 8008ab2:	d826      	bhi.n	8008b02 <torch_main+0x9e>
 8008ab4:	a201      	add	r2, pc, #4	@ (adr r2, 8008abc <torch_main+0x58>)
 8008ab6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008aba:	bf00      	nop
 8008abc:	08008ad1 	.word	0x08008ad1
 8008ac0:	08008adb 	.word	0x08008adb
 8008ac4:	08008ae5 	.word	0x08008ae5
 8008ac8:	08008aef 	.word	0x08008aef
 8008acc:	08008af9 	.word	0x08008af9
		case 1:
			transmissionDelay = 1000;
 8008ad0:	4bbb      	ldr	r3, [pc, #748]	@ (8008dc0 <torch_main+0x35c>)
 8008ad2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8008ad6:	801a      	strh	r2, [r3, #0]
			break;
 8008ad8:	e013      	b.n	8008b02 <torch_main+0x9e>
		case 2:
			transmissionDelay = 1025;
 8008ada:	4bb9      	ldr	r3, [pc, #740]	@ (8008dc0 <torch_main+0x35c>)
 8008adc:	f240 4201 	movw	r2, #1025	@ 0x401
 8008ae0:	801a      	strh	r2, [r3, #0]
			break;
 8008ae2:	e00e      	b.n	8008b02 <torch_main+0x9e>
		case 3:
			transmissionDelay = 1050;
 8008ae4:	4bb6      	ldr	r3, [pc, #728]	@ (8008dc0 <torch_main+0x35c>)
 8008ae6:	f240 421a 	movw	r2, #1050	@ 0x41a
 8008aea:	801a      	strh	r2, [r3, #0]
			break;
 8008aec:	e009      	b.n	8008b02 <torch_main+0x9e>
		case 4:
			transmissionDelay = 1075;
 8008aee:	4bb4      	ldr	r3, [pc, #720]	@ (8008dc0 <torch_main+0x35c>)
 8008af0:	f240 4233 	movw	r2, #1075	@ 0x433
 8008af4:	801a      	strh	r2, [r3, #0]
			break;
 8008af6:	e004      	b.n	8008b02 <torch_main+0x9e>
		case 5:
			transmissionDelay = 1100;
 8008af8:	4bb1      	ldr	r3, [pc, #708]	@ (8008dc0 <torch_main+0x35c>)
 8008afa:	f240 424c 	movw	r2, #1100	@ 0x44c
 8008afe:	801a      	strh	r2, [r3, #0]
			break;
 8008b00:	bf00      	nop
	}

	if(bmsMode == 1) {
 8008b02:	2301      	movs	r3, #1
 8008b04:	2b01      	cmp	r3, #1
 8008b06:	f040 82f7 	bne.w	80090f8 <torch_main+0x694>
		pull_low(GPIOA, GPIO_PIN_4);		// LTC6820 side A !SS
 8008b0a:	2110      	movs	r1, #16
 8008b0c:	48ad      	ldr	r0, [pc, #692]	@ (8008dc4 <torch_main+0x360>)
 8008b0e:	f000 fb73 	bl	80091f8 <pull_low>
		pull_low(GPIOA, GPIO_PIN_15);		// LTC6820 side B !SS
 8008b12:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8008b16:	48ab      	ldr	r0, [pc, #684]	@ (8008dc4 <torch_main+0x360>)
 8008b18:	f000 fb6e 	bl	80091f8 <pull_low>
		pull_high(GPIOC, GPIO_PIN_4);		// LTC6820 side A force EN
 8008b1c:	2110      	movs	r1, #16
 8008b1e:	48aa      	ldr	r0, [pc, #680]	@ (8008dc8 <torch_main+0x364>)
 8008b20:	f000 fb7a 	bl	8009218 <pull_high>
		pull_high(GPIOD, GPIO_PIN_2);		// LTC6820 side B force EN
 8008b24:	2104      	movs	r1, #4
 8008b26:	48a9      	ldr	r0, [pc, #676]	@ (8008dcc <torch_main+0x368>)
 8008b28:	f000 fb76 	bl	8009218 <pull_high>

		HAL_CAN_Start(&hcan1);
 8008b2c:	48a8      	ldr	r0, [pc, #672]	@ (8008dd0 <torch_main+0x36c>)
 8008b2e:	f002 fcab 	bl	800b488 <HAL_CAN_Start>
		start_timer(&htim2);
 8008b32:	48a8      	ldr	r0, [pc, #672]	@ (8008dd4 <torch_main+0x370>)
 8008b34:	f000 fb8c 	bl	8009250 <start_timer>
		setup_PEC15();
 8008b38:	f7fe fff4 	bl	8007b24 <setup_PEC15>

		active_led_on();
 8008b3c:	f000 fbe2 	bl	8009304 <active_led_on>

		force_mute();
 8008b40:	f7ff fea3 	bl	800888a <force_mute>
		wait(1);
 8008b44:	2001      	movs	r0, #1
 8008b46:	f000 fb77 	bl	8009238 <wait>
		force_refup();
 8008b4a:	f7ff fe0d 	bl	8008768 <force_refup>
		wait(1);
 8008b4e:	2001      	movs	r0, #1
 8008b50:	f000 fb72 	bl	8009238 <wait>
		diagnosis();
 8008b54:	f7fc fabc 	bl	80050d0 <diagnosis>

		transmitCounter = 0;
 8008b58:	4b9f      	ldr	r3, [pc, #636]	@ (8008dd8 <torch_main+0x374>)
 8008b5a:	2200      	movs	r2, #0
 8008b5c:	601a      	str	r2, [r3, #0]
		measureCounter = 0;
 8008b5e:	4b9f      	ldr	r3, [pc, #636]	@ (8008ddc <torch_main+0x378>)
 8008b60:	2200      	movs	r2, #0
 8008b62:	601a      	str	r2, [r3, #0]
			while(1) {

				// Measuring interrupt: reads cell voltages and module temperatures every 100 ms.
				if(measureCounter > 100) {
 8008b64:	4b9d      	ldr	r3, [pc, #628]	@ (8008ddc <torch_main+0x378>)
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	2b64      	cmp	r3, #100	@ 0x64
 8008b6a:	f240 8108 	bls.w	8008d7e <torch_main+0x31a>
					// We first want to ensure that 6813 is in REFUP state. If it's not, we force it to enter it.
					if(!refup_check()) {
 8008b6e:	f7ff fe37 	bl	80087e0 <refup_check>
 8008b72:	4603      	mov	r3, r0
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d104      	bne.n	8008b82 <torch_main+0x11e>
						force_refup();
 8008b78:	f7ff fdf6 	bl	8008768 <force_refup>
						wait(1);
 8008b7c:	2001      	movs	r0, #1
 8008b7e:	f000 fb5b 	bl	8009238 <wait>
					}

					temperature_sense(moduleTemperatures);			// Get all 18 temperature sensors
 8008b82:	f107 0318 	add.w	r3, r7, #24
 8008b86:	4618      	mov	r0, r3
 8008b88:	f000 fd72 	bl	8009670 <temperature_sense>
					voltage_sense(cellVoltages);					// Get all 20 cell voltages
 8008b8c:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8008b90:	4618      	mov	r0, r3
 8008b92:	f001 fb99 	bl	800a2c8 <voltage_sense>

					// For-loop below checks if any thermistor's >60 C. If it finds one, its temperature and index are noted.
					for(uint8_t i = 0; i < THERM_QTY; i++) {
 8008b96:	2300      	movs	r3, #0
 8008b98:	f887 30be 	strb.w	r3, [r7, #190]	@ 0xbe
 8008b9c:	e024      	b.n	8008be8 <torch_main+0x184>
						if(moduleTemperatures[i] > MAX_TEMPERATURE) {
 8008b9e:	f897 30be 	ldrb.w	r3, [r7, #190]	@ 0xbe
 8008ba2:	009b      	lsls	r3, r3, #2
 8008ba4:	33d0      	adds	r3, #208	@ 0xd0
 8008ba6:	443b      	add	r3, r7
 8008ba8:	3bb8      	subs	r3, #184	@ 0xb8
 8008baa:	edd3 7a00 	vldr	s15, [r3]
 8008bae:	ed9f 7a8c 	vldr	s14, [pc, #560]	@ 8008de0 <torch_main+0x37c>
 8008bb2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008bb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008bba:	dd10      	ble.n	8008bde <torch_main+0x17a>
							overheatFlag = 1;
 8008bbc:	2301      	movs	r3, #1
 8008bbe:	f887 30ce 	strb.w	r3, [r7, #206]	@ 0xce
							faultingThermistorIndex = i + 1;
 8008bc2:	f897 30be 	ldrb.w	r3, [r7, #190]	@ 0xbe
 8008bc6:	3301      	adds	r3, #1
 8008bc8:	f887 30c8 	strb.w	r3, [r7, #200]	@ 0xc8
							faultingTemperature = moduleTemperatures[i];
 8008bcc:	f897 30be 	ldrb.w	r3, [r7, #190]	@ 0xbe
 8008bd0:	009b      	lsls	r3, r3, #2
 8008bd2:	33d0      	adds	r3, #208	@ 0xd0
 8008bd4:	443b      	add	r3, r7
 8008bd6:	3bb8      	subs	r3, #184	@ 0xb8
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
					for(uint8_t i = 0; i < THERM_QTY; i++) {
 8008bde:	f897 30be 	ldrb.w	r3, [r7, #190]	@ 0xbe
 8008be2:	3301      	adds	r3, #1
 8008be4:	f887 30be 	strb.w	r3, [r7, #190]	@ 0xbe
 8008be8:	f897 30be 	ldrb.w	r3, [r7, #190]	@ 0xbe
 8008bec:	2b11      	cmp	r3, #17
 8008bee:	d9d6      	bls.n	8008b9e <torch_main+0x13a>
						}
					}
					// If at least one sensor read >60 C, the overheat counter increases by one.
					if(overheatFlag) { overheatCount++; }
 8008bf0:	f897 30ce 	ldrb.w	r3, [r7, #206]	@ 0xce
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	d005      	beq.n	8008c04 <torch_main+0x1a0>
 8008bf8:	f897 30cd 	ldrb.w	r3, [r7, #205]	@ 0xcd
 8008bfc:	3301      	adds	r3, #1
 8008bfe:	f887 30cd 	strb.w	r3, [r7, #205]	@ 0xcd
 8008c02:	e008      	b.n	8008c16 <torch_main+0x1b2>

					// If all sensors read <60 C, we decrease the overheat counter IF it has already been incremented before.
					else {
						if(overheatCount > 0) { overheatCount--; }
 8008c04:	f897 30cd 	ldrb.w	r3, [r7, #205]	@ 0xcd
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d004      	beq.n	8008c16 <torch_main+0x1b2>
 8008c0c:	f897 30cd 	ldrb.w	r3, [r7, #205]	@ 0xcd
 8008c10:	3b01      	subs	r3, #1
 8008c12:	f887 30cd 	strb.w	r3, [r7, #205]	@ 0xcd
					}

					// If at least one sensor has been >60 C for more than 10 interpretations, then it's time to fault!
					if(overheatCount > ATTEMPT_LIMIT) {
 8008c16:	f897 30cd 	ldrb.w	r3, [r7, #205]	@ 0xcd
 8008c1a:	2b0a      	cmp	r3, #10
 8008c1c:	d916      	bls.n	8008c4c <torch_main+0x1e8>
						// Two lines below convert the faulting temperature sensor from type 'float' to type 'uint16_t' (required for CAN transmission).
						float tempScale = 1000.0f;
 8008c1e:	4b71      	ldr	r3, [pc, #452]	@ (8008de4 <torch_main+0x380>)
 8008c20:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
						uint16_t intFaultingTemperature = (uint16_t)(faultingTemperature*tempScale);
 8008c24:	ed97 7a31 	vldr	s14, [r7, #196]	@ 0xc4
 8008c28:	edd7 7a2c 	vldr	s15, [r7, #176]	@ 0xb0
 8008c2c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008c30:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008c34:	ee17 3a90 	vmov	r3, s15
 8008c38:	f8a7 30ae 	strh.w	r3, [r7, #174]	@ 0xae

						error_loop(ERROR_OVERHEAT, intFaultingTemperature, faultingThermistorIndex);
 8008c3c:	f897 20c8 	ldrb.w	r2, [r7, #200]	@ 0xc8
 8008c40:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	@ 0xae
 8008c44:	4619      	mov	r1, r3
 8008c46:	2045      	movs	r0, #69	@ 0x45
 8008c48:	f7fb fd0c 	bl	8004664 <error_loop>
					}

					// For-loop below checks if any cell voltage is out of bounds. Like before, the voltage and index are noted if it finds one.
					for(uint8_t i = 0; i < CELL_QTY; i++) {
 8008c4c:	2300      	movs	r3, #0
 8008c4e:	f887 30bd 	strb.w	r3, [r7, #189]	@ 0xbd
 8008c52:	e03d      	b.n	8008cd0 <torch_main+0x26c>
						if(cellVoltages[i] > MAX_CELL_VOLTAGE) {
 8008c54:	f897 30bd 	ldrb.w	r3, [r7, #189]	@ 0xbd
 8008c58:	005b      	lsls	r3, r3, #1
 8008c5a:	33d0      	adds	r3, #208	@ 0xd0
 8008c5c:	443b      	add	r3, r7
 8008c5e:	f833 3c70 	ldrh.w	r3, [r3, #-112]
 8008c62:	f24a 4210 	movw	r2, #42000	@ 0xa410
 8008c66:	4293      	cmp	r3, r2
 8008c68:	d911      	bls.n	8008c8e <torch_main+0x22a>
							overvoltFlag = 1;
 8008c6a:	2301      	movs	r3, #1
 8008c6c:	f887 30cc 	strb.w	r3, [r7, #204]	@ 0xcc
							faultingCellIndex = i + 1;
 8008c70:	f897 30bd 	ldrb.w	r3, [r7, #189]	@ 0xbd
 8008c74:	3301      	adds	r3, #1
 8008c76:	f887 30c3 	strb.w	r3, [r7, #195]	@ 0xc3
							faultingCellVoltage = cellVoltages[i];
 8008c7a:	f897 30bd 	ldrb.w	r3, [r7, #189]	@ 0xbd
 8008c7e:	005b      	lsls	r3, r3, #1
 8008c80:	33d0      	adds	r3, #208	@ 0xd0
 8008c82:	443b      	add	r3, r7
 8008c84:	f833 3c70 	ldrh.w	r3, [r3, #-112]
 8008c88:	f8a7 30c0 	strh.w	r3, [r7, #192]	@ 0xc0
 8008c8c:	e01b      	b.n	8008cc6 <torch_main+0x262>
						}
						else if(cellVoltages[i] < MIN_CELL_VOLTAGE) {
 8008c8e:	f897 30bd 	ldrb.w	r3, [r7, #189]	@ 0xbd
 8008c92:	005b      	lsls	r3, r3, #1
 8008c94:	33d0      	adds	r3, #208	@ 0xd0
 8008c96:	443b      	add	r3, r7
 8008c98:	f833 3c70 	ldrh.w	r3, [r3, #-112]
 8008c9c:	f246 12a7 	movw	r2, #24999	@ 0x61a7
 8008ca0:	4293      	cmp	r3, r2
 8008ca2:	d810      	bhi.n	8008cc6 <torch_main+0x262>
							undervoltFlag = 1;
 8008ca4:	2301      	movs	r3, #1
 8008ca6:	f887 30ca 	strb.w	r3, [r7, #202]	@ 0xca
							faultingCellIndex = i + 1;
 8008caa:	f897 30bd 	ldrb.w	r3, [r7, #189]	@ 0xbd
 8008cae:	3301      	adds	r3, #1
 8008cb0:	f887 30c3 	strb.w	r3, [r7, #195]	@ 0xc3
							faultingCellVoltage = cellVoltages[i];
 8008cb4:	f897 30bd 	ldrb.w	r3, [r7, #189]	@ 0xbd
 8008cb8:	005b      	lsls	r3, r3, #1
 8008cba:	33d0      	adds	r3, #208	@ 0xd0
 8008cbc:	443b      	add	r3, r7
 8008cbe:	f833 3c70 	ldrh.w	r3, [r3, #-112]
 8008cc2:	f8a7 30c0 	strh.w	r3, [r7, #192]	@ 0xc0
					for(uint8_t i = 0; i < CELL_QTY; i++) {
 8008cc6:	f897 30bd 	ldrb.w	r3, [r7, #189]	@ 0xbd
 8008cca:	3301      	adds	r3, #1
 8008ccc:	f887 30bd 	strb.w	r3, [r7, #189]	@ 0xbd
 8008cd0:	f897 30bd 	ldrb.w	r3, [r7, #189]	@ 0xbd
 8008cd4:	2b13      	cmp	r3, #19
 8008cd6:	d9bd      	bls.n	8008c54 <torch_main+0x1f0>
						}
					}
					// If at least one cell's above 4.2 V, the overvolt counter increases by one.
					if(overvoltFlag) { overvoltCount++; }
 8008cd8:	f897 30cc 	ldrb.w	r3, [r7, #204]	@ 0xcc
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d004      	beq.n	8008cea <torch_main+0x286>
 8008ce0:	f897 30cb 	ldrb.w	r3, [r7, #203]	@ 0xcb
 8008ce4:	3301      	adds	r3, #1
 8008ce6:	f887 30cb 	strb.w	r3, [r7, #203]	@ 0xcb

					// If at least one cell's below 2.5 V, the undervolt counter increases by one.
					if(undervoltFlag) { undervoltCount++; }
 8008cea:	f897 30ca 	ldrb.w	r3, [r7, #202]	@ 0xca
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d004      	beq.n	8008cfc <torch_main+0x298>
 8008cf2:	f897 30c9 	ldrb.w	r3, [r7, #201]	@ 0xc9
 8008cf6:	3301      	adds	r3, #1
 8008cf8:	f887 30c9 	strb.w	r3, [r7, #201]	@ 0xc9

					// If all cell voltages are within appropriate range, we decrease the over/undervolt counters IF they've already been incremented.
					if(overvoltFlag == 0 && undervoltFlag == 0) {
 8008cfc:	f897 30cc 	ldrb.w	r3, [r7, #204]	@ 0xcc
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	d115      	bne.n	8008d30 <torch_main+0x2cc>
 8008d04:	f897 30ca 	ldrb.w	r3, [r7, #202]	@ 0xca
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	d111      	bne.n	8008d30 <torch_main+0x2cc>
						if(overvoltCount > 0) { overvoltCount--; }
 8008d0c:	f897 30cb 	ldrb.w	r3, [r7, #203]	@ 0xcb
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d004      	beq.n	8008d1e <torch_main+0x2ba>
 8008d14:	f897 30cb 	ldrb.w	r3, [r7, #203]	@ 0xcb
 8008d18:	3b01      	subs	r3, #1
 8008d1a:	f887 30cb 	strb.w	r3, [r7, #203]	@ 0xcb

						if(undervoltCount > 0) { undervoltCount--; }
 8008d1e:	f897 30c9 	ldrb.w	r3, [r7, #201]	@ 0xc9
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	d004      	beq.n	8008d30 <torch_main+0x2cc>
 8008d26:	f897 30c9 	ldrb.w	r3, [r7, #201]	@ 0xc9
 8008d2a:	3b01      	subs	r3, #1
 8008d2c:	f887 30c9 	strb.w	r3, [r7, #201]	@ 0xc9
					}

					// If at least one cell is >4.2 V or <2.5 V for more than 10 interpretations, then it's time to fault!
					if(overvoltCount > ATTEMPT_LIMIT) { error_loop(ERROR_OVERVOLT, faultingCellVoltage, faultingCellIndex); }
 8008d30:	f897 30cb 	ldrb.w	r3, [r7, #203]	@ 0xcb
 8008d34:	2b0a      	cmp	r3, #10
 8008d36:	d907      	bls.n	8008d48 <torch_main+0x2e4>
 8008d38:	f897 20c3 	ldrb.w	r2, [r7, #195]	@ 0xc3
 8008d3c:	f8b7 30c0 	ldrh.w	r3, [r7, #192]	@ 0xc0
 8008d40:	4619      	mov	r1, r3
 8008d42:	2047      	movs	r0, #71	@ 0x47
 8008d44:	f7fb fc8e 	bl	8004664 <error_loop>

					if(undervoltCount > ATTEMPT_LIMIT) { error_loop(ERROR_UNDERVOLT, faultingCellVoltage, faultingCellIndex); }
 8008d48:	f897 30c9 	ldrb.w	r3, [r7, #201]	@ 0xc9
 8008d4c:	2b0a      	cmp	r3, #10
 8008d4e:	d907      	bls.n	8008d60 <torch_main+0x2fc>
 8008d50:	f897 20c3 	ldrb.w	r2, [r7, #195]	@ 0xc3
 8008d54:	f8b7 30c0 	ldrh.w	r3, [r7, #192]	@ 0xc0
 8008d58:	4619      	mov	r1, r3
 8008d5a:	2046      	movs	r0, #70	@ 0x46
 8008d5c:	f7fb fc82 	bl	8004664 <error_loop>

					// Reset the three status flags to 0 before starting a new measurement cycle.
					overheatFlag = 0;
 8008d60:	2300      	movs	r3, #0
 8008d62:	f887 30ce 	strb.w	r3, [r7, #206]	@ 0xce
					overvoltFlag = 0;
 8008d66:	2300      	movs	r3, #0
 8008d68:	f887 30cc 	strb.w	r3, [r7, #204]	@ 0xcc
					undervoltFlag = 0;
 8008d6c:	2300      	movs	r3, #0
 8008d6e:	f887 30ca 	strb.w	r3, [r7, #202]	@ 0xca

					measureCounter = 0;		// Reset the measurement counter back to 0.
 8008d72:	4b1a      	ldr	r3, [pc, #104]	@ (8008ddc <torch_main+0x378>)
 8008d74:	2200      	movs	r2, #0
 8008d76:	601a      	str	r2, [r3, #0]
					measureFlag = 1;		// Signifies that this module has completed at least one measurement.
 8008d78:	2301      	movs	r3, #1
 8008d7a:	f887 30bf 	strb.w	r3, [r7, #191]	@ 0xbf
				}

				// Transmission interrupt: Broadcast cell voltages and module temperatures over CAN every X ms (X depends on the module ID).
				if(transmitCounter > transmissionDelay) {
 8008d7e:	4b10      	ldr	r3, [pc, #64]	@ (8008dc0 <torch_main+0x35c>)
 8008d80:	881b      	ldrh	r3, [r3, #0]
 8008d82:	461a      	mov	r2, r3
 8008d84:	4b14      	ldr	r3, [pc, #80]	@ (8008dd8 <torch_main+0x374>)
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	429a      	cmp	r2, r3
 8008d8a:	d20c      	bcs.n	8008da6 <torch_main+0x342>
					// Two functions below package the data and send the CAN messages.
					transmit_voltages(cellVoltages);
 8008d8c:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8008d90:	4618      	mov	r0, r3
 8008d92:	f7fb fe13 	bl	80049bc <transmit_voltages>
					transmit_temperatures(moduleTemperatures);
 8008d96:	f107 0318 	add.w	r3, r7, #24
 8008d9a:	4618      	mov	r0, r3
 8008d9c:	f7fb ffde 	bl	8004d5c <transmit_temperatures>

					// Reset the transmission counter back to 0.
					transmitCounter = 0;
 8008da0:	4b0d      	ldr	r3, [pc, #52]	@ (8008dd8 <torch_main+0x374>)
 8008da2:	2200      	movs	r2, #0
 8008da4:	601a      	str	r2, [r3, #0]
				}

				// CAN FIFO0 filter poll: Check if a fault message or absolute minimum cell voltage message have been received.
				if(HAL_CAN_GetRxFifoFillLevel(&hcan1, CAN_RX_FIFO0) > 0) {
 8008da6:	2100      	movs	r1, #0
 8008da8:	4809      	ldr	r0, [pc, #36]	@ (8008dd0 <torch_main+0x36c>)
 8008daa:	f002 fda3 	bl	800b8f4 <HAL_CAN_GetRxFifoFillLevel>
 8008dae:	4603      	mov	r3, r0
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	f000 808b 	beq.w	8008ecc <torch_main+0x468>
					uint8_t attempts = 0;
 8008db6:	2300      	movs	r3, #0
 8008db8:	f887 30bc 	strb.w	r3, [r7, #188]	@ 0xbc

					// While-loop tries extracting and interpreting the CAN message up to 10 times.
					while(attempts < ATTEMPT_LIMIT) {
 8008dbc:	e079      	b.n	8008eb2 <torch_main+0x44e>
 8008dbe:	bf00      	nop
 8008dc0:	200003e4 	.word	0x200003e4
 8008dc4:	40020000 	.word	0x40020000
 8008dc8:	40020800 	.word	0x40020800
 8008dcc:	40020c00 	.word	0x40020c00
 8008dd0:	200000c4 	.word	0x200000c4
 8008dd4:	2000019c 	.word	0x2000019c
 8008dd8:	200003e8 	.word	0x200003e8
 8008ddc:	200003ec 	.word	0x200003ec
 8008de0:	42700000 	.word	0x42700000
 8008de4:	447a0000 	.word	0x447a0000
						// If-block below executes if the CAN message has been successfully interpreted.
						if(HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &RxHeader, RxData) == HAL_OK) {
 8008de8:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 8008dec:	f107 0290 	add.w	r2, r7, #144	@ 0x90
 8008df0:	2100      	movs	r1, #0
 8008df2:	48bb      	ldr	r0, [pc, #748]	@ (80090e0 <torch_main+0x67c>)
 8008df4:	f002 fc5c 	bl	800b6b0 <HAL_CAN_GetRxMessage>
 8008df8:	4603      	mov	r3, r0
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	d151      	bne.n	8008ea2 <torch_main+0x43e>

							// Enter fault loop if motherboard OR another module are sending a fault message.
							if(RxHeader.StdId == CAN_FAULT_ID) { silent_error_loop(); }
 8008dfe:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8008e02:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008e06:	d101      	bne.n	8008e0c <torch_main+0x3a8>
 8008e08:	f7fb fbde 	bl	80045c8 <silent_error_loop>

							// Store the absolute minimum cell voltage. This message will initiate balancing.
							if(RxHeader.StdId == CAN_MIN_VCELL_ID) { absMinCellVoltage = (uint16_t)RxData[0] | ((uint16_t)RxData[1] << 8); }
 8008e0c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8008e10:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8008e14:	4293      	cmp	r3, r2
 8008e16:	d10b      	bne.n	8008e30 <torch_main+0x3cc>
 8008e18:	f897 3088 	ldrb.w	r3, [r7, #136]	@ 0x88
 8008e1c:	b21a      	sxth	r2, r3
 8008e1e:	f897 3089 	ldrb.w	r3, [r7, #137]	@ 0x89
 8008e22:	b21b      	sxth	r3, r3
 8008e24:	021b      	lsls	r3, r3, #8
 8008e26:	b21b      	sxth	r3, r3
 8008e28:	4313      	orrs	r3, r2
 8008e2a:	b21b      	sxth	r3, r3
 8008e2c:	b29b      	uxth	r3, r3
 8008e2e:	807b      	strh	r3, [r7, #2]

							if(RxHeader.StdId == CAN_EXTRACT_VMIN_ID && moduleID != 1 && measureFlag) {
 8008e30:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8008e34:	2b45      	cmp	r3, #69	@ 0x45
 8008e36:	d130      	bne.n	8008e9a <torch_main+0x436>
 8008e38:	2301      	movs	r3, #1
 8008e3a:	2b01      	cmp	r3, #1
 8008e3c:	d02d      	beq.n	8008e9a <torch_main+0x436>
 8008e3e:	f897 30bf 	ldrb.w	r3, [r7, #191]	@ 0xbf
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d029      	beq.n	8008e9a <torch_main+0x436>
								uint16_t localMinCellVoltage = cellVoltages[0];
 8008e46:	f8b7 3060 	ldrh.w	r3, [r7, #96]	@ 0x60
 8008e4a:	f8a7 30ba 	strh.w	r3, [r7, #186]	@ 0xba

								for(uint8_t i = 0; i < CELL_QTY; i++) {
 8008e4e:	2300      	movs	r3, #0
 8008e50:	f887 30b9 	strb.w	r3, [r7, #185]	@ 0xb9
 8008e54:	e018      	b.n	8008e88 <torch_main+0x424>
									if(cellVoltages[i] < localMinCellVoltage) {
 8008e56:	f897 30b9 	ldrb.w	r3, [r7, #185]	@ 0xb9
 8008e5a:	005b      	lsls	r3, r3, #1
 8008e5c:	33d0      	adds	r3, #208	@ 0xd0
 8008e5e:	443b      	add	r3, r7
 8008e60:	f833 3c70 	ldrh.w	r3, [r3, #-112]
 8008e64:	f8b7 20ba 	ldrh.w	r2, [r7, #186]	@ 0xba
 8008e68:	429a      	cmp	r2, r3
 8008e6a:	d908      	bls.n	8008e7e <torch_main+0x41a>
										localMinCellVoltage = cellVoltages[i];
 8008e6c:	f897 30b9 	ldrb.w	r3, [r7, #185]	@ 0xb9
 8008e70:	005b      	lsls	r3, r3, #1
 8008e72:	33d0      	adds	r3, #208	@ 0xd0
 8008e74:	443b      	add	r3, r7
 8008e76:	f833 3c70 	ldrh.w	r3, [r3, #-112]
 8008e7a:	f8a7 30ba 	strh.w	r3, [r7, #186]	@ 0xba
								for(uint8_t i = 0; i < CELL_QTY; i++) {
 8008e7e:	f897 30b9 	ldrb.w	r3, [r7, #185]	@ 0xb9
 8008e82:	3301      	adds	r3, #1
 8008e84:	f887 30b9 	strb.w	r3, [r7, #185]	@ 0xb9
 8008e88:	f897 30b9 	ldrb.w	r3, [r7, #185]	@ 0xb9
 8008e8c:	2b13      	cmp	r3, #19
 8008e8e:	d9e2      	bls.n	8008e56 <torch_main+0x3f2>
									}
								}
								transmit_vmin(localMinCellVoltage);
 8008e90:	f8b7 30ba 	ldrh.w	r3, [r7, #186]	@ 0xba
 8008e94:	4618      	mov	r0, r3
 8008e96:	f7fb fd3d 	bl	8004914 <transmit_vmin>
							}

							attempts = 13;
 8008e9a:	230d      	movs	r3, #13
 8008e9c:	f887 30bc 	strb.w	r3, [r7, #188]	@ 0xbc
 8008ea0:	e007      	b.n	8008eb2 <torch_main+0x44e>
						}
						// If there's a problem with reading the CAN message, the 'attempts' counter will increment.
						else {
							attempts++;
 8008ea2:	f897 30bc 	ldrb.w	r3, [r7, #188]	@ 0xbc
 8008ea6:	3301      	adds	r3, #1
 8008ea8:	f887 30bc 	strb.w	r3, [r7, #188]	@ 0xbc
							wait(5);
 8008eac:	2005      	movs	r0, #5
 8008eae:	f000 f9c3 	bl	8009238 <wait>
					while(attempts < ATTEMPT_LIMIT) {
 8008eb2:	f897 30bc 	ldrb.w	r3, [r7, #188]	@ 0xbc
 8008eb6:	2b09      	cmp	r3, #9
 8008eb8:	d996      	bls.n	8008de8 <torch_main+0x384>
						}
					}
					// If the STM32 fails to read the CAN message 10 times in a row, fault!
					if(attempts != 13) { error_loop(ERROR_CAN_READ, 0, 0); }
 8008eba:	f897 30bc 	ldrb.w	r3, [r7, #188]	@ 0xbc
 8008ebe:	2b0d      	cmp	r3, #13
 8008ec0:	d004      	beq.n	8008ecc <torch_main+0x468>
 8008ec2:	2200      	movs	r2, #0
 8008ec4:	2100      	movs	r1, #0
 8008ec6:	2057      	movs	r0, #87	@ 0x57
 8008ec8:	f7fb fbcc 	bl	8004664 <error_loop>
				}

				// CAN FIFO1 filter poll: Check if the pack status message has been received.
				if(HAL_CAN_GetRxFifoFillLevel(&hcan1, CAN_RX_FIFO1) > 0) {
 8008ecc:	2101      	movs	r1, #1
 8008ece:	4884      	ldr	r0, [pc, #528]	@ (80090e0 <torch_main+0x67c>)
 8008ed0:	f002 fd10 	bl	800b8f4 <HAL_CAN_GetRxFifoFillLevel>
 8008ed4:	4603      	mov	r3, r0
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d040      	beq.n	8008f5c <torch_main+0x4f8>
					uint8_t attempts = 0;
 8008eda:	2300      	movs	r3, #0
 8008edc:	f887 30b8 	strb.w	r3, [r7, #184]	@ 0xb8

					// While-loop tries extracting and interpreting the CAN message up to 10 times.
					while(attempts < ATTEMPT_LIMIT) {
 8008ee0:	e02f      	b.n	8008f42 <torch_main+0x4de>
						// If-block below executes if the CAN message has been successfully interpreted.
						if(HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO1, &RxHeader, RxData) == HAL_OK) {
 8008ee2:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 8008ee6:	f107 0290 	add.w	r2, r7, #144	@ 0x90
 8008eea:	2101      	movs	r1, #1
 8008eec:	487c      	ldr	r0, [pc, #496]	@ (80090e0 <torch_main+0x67c>)
 8008eee:	f002 fbdf 	bl	800b6b0 <HAL_CAN_GetRxMessage>
 8008ef2:	4603      	mov	r3, r0
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d11c      	bne.n	8008f32 <torch_main+0x4ce>
							// If-block below checks if the message is the PackStatus message.
								// This is a little redundant... since the FIFO1 filter is configured to only accept the PackStatus message anyway.
							if(RxHeader.StdId == CAN_PACK_STAT_ID) {
 8008ef8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8008efc:	f5b3 6f84 	cmp.w	r3, #1056	@ 0x420
 8008f00:	d113      	bne.n	8008f2a <torch_main+0x4c6>
								switch(RxData[5]) {
 8008f02:	f897 308d 	ldrb.w	r3, [r7, #141]	@ 0x8d
 8008f06:	2b04      	cmp	r3, #4
 8008f08:	d002      	beq.n	8008f10 <torch_main+0x4ac>
 8008f0a:	2b06      	cmp	r3, #6
 8008f0c:	d005      	beq.n	8008f1a <torch_main+0x4b6>
 8008f0e:	e007      	b.n	8008f20 <torch_main+0x4bc>
									case PACK_STATUS_CHARGING:
										charge_led_on();
 8008f10:	f000 fa10 	bl	8009334 <charge_led_on>
										active_led_off();
 8008f14:	f000 fa02 	bl	800931c <active_led_off>
										break;
 8008f18:	e007      	b.n	8008f2a <torch_main+0x4c6>
									case PACK_STATUS_FAULT:
										silent_error_loop();
 8008f1a:	f7fb fb55 	bl	80045c8 <silent_error_loop>
										break;
 8008f1e:	e004      	b.n	8008f2a <torch_main+0x4c6>
									default:
										active_led_on();
 8008f20:	f000 f9f0 	bl	8009304 <active_led_on>
										charge_led_off();
 8008f24:	f000 fa12 	bl	800934c <charge_led_off>
										break;
 8008f28:	bf00      	nop
								}
							}
							attempts = 13;
 8008f2a:	230d      	movs	r3, #13
 8008f2c:	f887 30b8 	strb.w	r3, [r7, #184]	@ 0xb8
 8008f30:	e007      	b.n	8008f42 <torch_main+0x4de>
						}
						// If there's a problem with reading the CAN message, the 'attempts' counter will increment.
						else {
							attempts++;
 8008f32:	f897 30b8 	ldrb.w	r3, [r7, #184]	@ 0xb8
 8008f36:	3301      	adds	r3, #1
 8008f38:	f887 30b8 	strb.w	r3, [r7, #184]	@ 0xb8
							wait(5);
 8008f3c:	2005      	movs	r0, #5
 8008f3e:	f000 f97b 	bl	8009238 <wait>
					while(attempts < ATTEMPT_LIMIT) {
 8008f42:	f897 30b8 	ldrb.w	r3, [r7, #184]	@ 0xb8
 8008f46:	2b09      	cmp	r3, #9
 8008f48:	d9cb      	bls.n	8008ee2 <torch_main+0x47e>
						}
					}
					// If the STM32 fails to read the CAN message 10 times in a row, fault!
					if(attempts != 13) { error_loop(ERROR_CAN_READ, 0, 0); }
 8008f4a:	f897 30b8 	ldrb.w	r3, [r7, #184]	@ 0xb8
 8008f4e:	2b0d      	cmp	r3, #13
 8008f50:	d004      	beq.n	8008f5c <torch_main+0x4f8>
 8008f52:	2200      	movs	r2, #0
 8008f54:	2100      	movs	r1, #0
 8008f56:	2057      	movs	r0, #87	@ 0x57
 8008f58:	f7fb fb84 	bl	8004664 <error_loop>
				}

				// Balance check poll: If there's a value that's >0 for the absolute minimum cell voltage OR force balance is enabled, begin balancing.
				if(absMinCellVoltage > 0 || forceBalance) {
 8008f5c:	887b      	ldrh	r3, [r7, #2]
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	d104      	bne.n	8008f6c <torch_main+0x508>
 8008f62:	4b60      	ldr	r3, [pc, #384]	@ (80090e4 <torch_main+0x680>)
 8008f64:	781b      	ldrb	r3, [r3, #0]
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	f000 80b6 	beq.w	80090d8 <torch_main+0x674>

					if(forceBalance && moduleID == 1) {
 8008f6c:	4b5d      	ldr	r3, [pc, #372]	@ (80090e4 <torch_main+0x680>)
 8008f6e:	781b      	ldrb	r3, [r3, #0]
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d04c      	beq.n	800900e <torch_main+0x5aa>
 8008f74:	2301      	movs	r3, #1
 8008f76:	2b01      	cmp	r3, #1
 8008f78:	d149      	bne.n	800900e <torch_main+0x5aa>
						extract_min_cell_voltage(&absMinCellVoltage);
 8008f7a:	1cbb      	adds	r3, r7, #2
 8008f7c:	4618      	mov	r0, r3
 8008f7e:	f7f8 fefd 	bl	8001d7c <extract_min_cell_voltage>

						transmitCounter = 0;
 8008f82:	4b59      	ldr	r3, [pc, #356]	@ (80090e8 <torch_main+0x684>)
 8008f84:	2200      	movs	r2, #0
 8008f86:	601a      	str	r2, [r3, #0]
						measureCounter = 0;
 8008f88:	4b58      	ldr	r3, [pc, #352]	@ (80090ec <torch_main+0x688>)
 8008f8a:	2200      	movs	r2, #0
 8008f8c:	601a      	str	r2, [r3, #0]
						transientCounter = 0;
 8008f8e:	4b58      	ldr	r3, [pc, #352]	@ (80090f0 <torch_main+0x68c>)
 8008f90:	2200      	movs	r2, #0
 8008f92:	601a      	str	r2, [r3, #0]
						while(transientCounter < 5000) {
 8008f94:	e035      	b.n	8009002 <torch_main+0x59e>
							if(measureCounter > 100) {
 8008f96:	4b55      	ldr	r3, [pc, #340]	@ (80090ec <torch_main+0x688>)
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	2b64      	cmp	r3, #100	@ 0x64
 8008f9c:	d916      	bls.n	8008fcc <torch_main+0x568>
								if(!refup_check()) {
 8008f9e:	f7ff fc1f 	bl	80087e0 <refup_check>
 8008fa2:	4603      	mov	r3, r0
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	d104      	bne.n	8008fb2 <torch_main+0x54e>
									force_refup();
 8008fa8:	f7ff fbde 	bl	8008768 <force_refup>
									wait(1);
 8008fac:	2001      	movs	r0, #1
 8008fae:	f000 f943 	bl	8009238 <wait>
								}

								temperature_sense(moduleTemperatures);
 8008fb2:	f107 0318 	add.w	r3, r7, #24
 8008fb6:	4618      	mov	r0, r3
 8008fb8:	f000 fb5a 	bl	8009670 <temperature_sense>
								voltage_sense(cellVoltages);
 8008fbc:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8008fc0:	4618      	mov	r0, r3
 8008fc2:	f001 f981 	bl	800a2c8 <voltage_sense>

								measureCounter = 0;
 8008fc6:	4b49      	ldr	r3, [pc, #292]	@ (80090ec <torch_main+0x688>)
 8008fc8:	2200      	movs	r2, #0
 8008fca:	601a      	str	r2, [r3, #0]
							}

							if(transmitCounter > transmissionDelay) {
 8008fcc:	4b49      	ldr	r3, [pc, #292]	@ (80090f4 <torch_main+0x690>)
 8008fce:	881b      	ldrh	r3, [r3, #0]
 8008fd0:	461a      	mov	r2, r3
 8008fd2:	4b45      	ldr	r3, [pc, #276]	@ (80090e8 <torch_main+0x684>)
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	429a      	cmp	r2, r3
 8008fd8:	d210      	bcs.n	8008ffc <torch_main+0x598>
								transmit_voltages(cellVoltages);
 8008fda:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8008fde:	4618      	mov	r0, r3
 8008fe0:	f7fb fcec 	bl	80049bc <transmit_voltages>
								transmit_temperatures(moduleTemperatures);
 8008fe4:	f107 0318 	add.w	r3, r7, #24
 8008fe8:	4618      	mov	r0, r3
 8008fea:	f7fb feb7 	bl	8004d5c <transmit_temperatures>
								transmit_balance_initiation(absMinCellVoltage);
 8008fee:	887b      	ldrh	r3, [r7, #2]
 8008ff0:	4618      	mov	r0, r3
 8008ff2:	f7fb fc71 	bl	80048d8 <transmit_balance_initiation>

								transmitCounter = 0;
 8008ff6:	4b3c      	ldr	r3, [pc, #240]	@ (80090e8 <torch_main+0x684>)
 8008ff8:	2200      	movs	r2, #0
 8008ffa:	601a      	str	r2, [r3, #0]
							}
							wait(1);
 8008ffc:	2001      	movs	r0, #1
 8008ffe:	f000 f91b 	bl	8009238 <wait>
						while(transientCounter < 5000) {
 8009002:	4b3b      	ldr	r3, [pc, #236]	@ (80090f0 <torch_main+0x68c>)
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	f241 3287 	movw	r2, #4999	@ 0x1387
 800900a:	4293      	cmp	r3, r2
 800900c:	d9c3      	bls.n	8008f96 <torch_main+0x532>
						}
					}

					// Check that 6813 is in REFUP state. If it's not, we force it to enter it.
					if(!refup_check()) {
 800900e:	f7ff fbe7 	bl	80087e0 <refup_check>
 8009012:	4603      	mov	r3, r0
 8009014:	2b00      	cmp	r3, #0
 8009016:	d104      	bne.n	8009022 <torch_main+0x5be>
						force_refup();
 8009018:	f7ff fba6 	bl	8008768 <force_refup>
						wait(1);
 800901c:	2001      	movs	r0, #1
 800901e:	f000 f90b 	bl	8009238 <wait>
					}
					// Get a fresh set of cell voltages. This'll be used to determine which cells need to be balanced.
					voltage_sense(cellVoltages);
 8009022:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8009026:	4618      	mov	r0, r3
 8009028:	f001 f94e 	bl	800a2c8 <voltage_sense>

					// Check which cells need to be balanced. Quantity and cell indexes are recorded.
					cellsToBalanceQty = balance_check(cellsToBalance, cellVoltages, absMinCellVoltage);
 800902c:	887a      	ldrh	r2, [r7, #2]
 800902e:	f107 0160 	add.w	r1, r7, #96	@ 0x60
 8009032:	1d3b      	adds	r3, r7, #4
 8009034:	4618      	mov	r0, r3
 8009036:	f7f8 fe3d 	bl	8001cb4 <balance_check>
 800903a:	4603      	mov	r3, r0
 800903c:	f887 30cf 	strb.w	r3, [r7, #207]	@ 0xcf

					// If-block below executes if at least one cell needs to be balanced.
					if(cellsToBalanceQty > 0) {
 8009040:	f897 30cf 	ldrb.w	r3, [r7, #207]	@ 0xcf
 8009044:	2b00      	cmp	r3, #0
 8009046:	d040      	beq.n	80090ca <torch_main+0x666>
						uint8_t balanceFlag = 1;
 8009048:	2301      	movs	r3, #1
 800904a:	f887 30b7 	strb.w	r3, [r7, #183]	@ 0xb7

						// This while-loop is the balancing loop. The BMS will stay here as long as the cells remain out of balance.
						while(balanceFlag) {
 800904e:	e038      	b.n	80090c2 <torch_main+0x65e>

							balance_cycle(cellsToBalance, cellsToBalanceQty, absMinCellVoltage);
 8009050:	887a      	ldrh	r2, [r7, #2]
 8009052:	f897 10cf 	ldrb.w	r1, [r7, #207]	@ 0xcf
 8009056:	1d3b      	adds	r3, r7, #4
 8009058:	4618      	mov	r0, r3
 800905a:	f7f8 ffcb 	bl	8001ff4 <balance_cycle>

							force_refup();
 800905e:	f7ff fb83 	bl	8008768 <force_refup>
							wait(1);
 8009062:	2001      	movs	r0, #1
 8009064:	f000 f8e8 	bl	8009238 <wait>
							voltage_sense(cellVoltages);
 8009068:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800906c:	4618      	mov	r0, r3
 800906e:	f001 f92b 	bl	800a2c8 <voltage_sense>

							cellsToBalanceQty = 0;
 8009072:	2300      	movs	r3, #0
 8009074:	f887 30cf 	strb.w	r3, [r7, #207]	@ 0xcf
							for(uint8_t i = 0; i < CELL_QTY; i++) { cellsToBalance[i] = 0; }
 8009078:	2300      	movs	r3, #0
 800907a:	f887 30b6 	strb.w	r3, [r7, #182]	@ 0xb6
 800907e:	e00b      	b.n	8009098 <torch_main+0x634>
 8009080:	f897 30b6 	ldrb.w	r3, [r7, #182]	@ 0xb6
 8009084:	33d0      	adds	r3, #208	@ 0xd0
 8009086:	443b      	add	r3, r7
 8009088:	2200      	movs	r2, #0
 800908a:	f803 2ccc 	strb.w	r2, [r3, #-204]
 800908e:	f897 30b6 	ldrb.w	r3, [r7, #182]	@ 0xb6
 8009092:	3301      	adds	r3, #1
 8009094:	f887 30b6 	strb.w	r3, [r7, #182]	@ 0xb6
 8009098:	f897 30b6 	ldrb.w	r3, [r7, #182]	@ 0xb6
 800909c:	2b13      	cmp	r3, #19
 800909e:	d9ef      	bls.n	8009080 <torch_main+0x61c>

							cellsToBalanceQty = balance_check(cellsToBalance, cellVoltages, absMinCellVoltage);
 80090a0:	887a      	ldrh	r2, [r7, #2]
 80090a2:	f107 0160 	add.w	r1, r7, #96	@ 0x60
 80090a6:	1d3b      	adds	r3, r7, #4
 80090a8:	4618      	mov	r0, r3
 80090aa:	f7f8 fe03 	bl	8001cb4 <balance_check>
 80090ae:	4603      	mov	r3, r0
 80090b0:	f887 30cf 	strb.w	r3, [r7, #207]	@ 0xcf

							if(cellsToBalanceQty == 0) { balanceFlag = 0; }
 80090b4:	f897 30cf 	ldrb.w	r3, [r7, #207]	@ 0xcf
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	d102      	bne.n	80090c2 <torch_main+0x65e>
 80090bc:	2300      	movs	r3, #0
 80090be:	f887 30b7 	strb.w	r3, [r7, #183]	@ 0xb7
						while(balanceFlag) {
 80090c2:	f897 30b7 	ldrb.w	r3, [r7, #183]	@ 0xb7
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d1c2      	bne.n	8009050 <torch_main+0x5ec>
						}
					}
					absMinCellVoltage = 0;
 80090ca:	2300      	movs	r3, #0
 80090cc:	807b      	strh	r3, [r7, #2]
					forceBalance = 0;
 80090ce:	4b05      	ldr	r3, [pc, #20]	@ (80090e4 <torch_main+0x680>)
 80090d0:	2200      	movs	r2, #0
 80090d2:	701a      	strb	r2, [r3, #0]
					low_power_state();
 80090d4:	f000 f856 	bl	8009184 <low_power_state>
				}
				wait(1);
 80090d8:	2001      	movs	r0, #1
 80090da:	f000 f8ad 	bl	8009238 <wait>
				if(measureCounter > 100) {
 80090de:	e541      	b.n	8008b64 <torch_main+0x100>
 80090e0:	200000c4 	.word	0x200000c4
 80090e4:	20000006 	.word	0x20000006
 80090e8:	200003e8 	.word	0x200003e8
 80090ec:	200003ec 	.word	0x200003ec
 80090f0:	200003f4 	.word	0x200003f4
 80090f4:	200003e4 	.word	0x200003e4
			}
	}

	if(bmsMode == 0) {
 80090f8:	2301      	movs	r3, #1
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	d137      	bne.n	800916e <torch_main+0x70a>
		pull_low(GPIOC, GPIO_PIN_4);		// LTC6820 side A force !EN
 80090fe:	2110      	movs	r1, #16
 8009100:	481d      	ldr	r0, [pc, #116]	@ (8009178 <torch_main+0x714>)
 8009102:	f000 f879 	bl	80091f8 <pull_low>
		pull_low(GPIOD, GPIO_PIN_2);		// LTC6820 side B force !EN
 8009106:	2104      	movs	r1, #4
 8009108:	481c      	ldr	r0, [pc, #112]	@ (800917c <torch_main+0x718>)
 800910a:	f000 f875 	bl	80091f8 <pull_low>

		while(1) {
			pull_high(GPIOA, GPIO_PIN_8);		// ACTIVE LED
 800910e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8009112:	481b      	ldr	r0, [pc, #108]	@ (8009180 <torch_main+0x71c>)
 8009114:	f000 f880 	bl	8009218 <pull_high>
			pull_high(GPIOC, GPIO_PIN_9);		// CHARGE LED
 8009118:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800911c:	4816      	ldr	r0, [pc, #88]	@ (8009178 <torch_main+0x714>)
 800911e:	f000 f87b 	bl	8009218 <pull_high>
			pull_high(GPIOC, GPIO_PIN_8);		// BALANCE LED
 8009122:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8009126:	4814      	ldr	r0, [pc, #80]	@ (8009178 <torch_main+0x714>)
 8009128:	f000 f876 	bl	8009218 <pull_high>
			pull_high(GPIOC, GPIO_PIN_7);		// HOT LED
 800912c:	2180      	movs	r1, #128	@ 0x80
 800912e:	4812      	ldr	r0, [pc, #72]	@ (8009178 <torch_main+0x714>)
 8009130:	f000 f872 	bl	8009218 <pull_high>
			wait(1000);
 8009134:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8009138:	f000 f87e 	bl	8009238 <wait>
			pull_low(GPIOA, GPIO_PIN_8);
 800913c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8009140:	480f      	ldr	r0, [pc, #60]	@ (8009180 <torch_main+0x71c>)
 8009142:	f000 f859 	bl	80091f8 <pull_low>
			pull_low(GPIOC, GPIO_PIN_9);
 8009146:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800914a:	480b      	ldr	r0, [pc, #44]	@ (8009178 <torch_main+0x714>)
 800914c:	f000 f854 	bl	80091f8 <pull_low>
			pull_low(GPIOC, GPIO_PIN_8);
 8009150:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8009154:	4808      	ldr	r0, [pc, #32]	@ (8009178 <torch_main+0x714>)
 8009156:	f000 f84f 	bl	80091f8 <pull_low>
			pull_low(GPIOC, GPIO_PIN_7);
 800915a:	2180      	movs	r1, #128	@ 0x80
 800915c:	4806      	ldr	r0, [pc, #24]	@ (8009178 <torch_main+0x714>)
 800915e:	f000 f84b 	bl	80091f8 <pull_low>
			wait(1000);
 8009162:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8009166:	f000 f867 	bl	8009238 <wait>
			pull_high(GPIOA, GPIO_PIN_8);		// ACTIVE LED
 800916a:	bf00      	nop
 800916c:	e7cf      	b.n	800910e <torch_main+0x6aa>
		}
	}
}
 800916e:	bf00      	nop
 8009170:	37d0      	adds	r7, #208	@ 0xd0
 8009172:	46bd      	mov	sp, r7
 8009174:	bd80      	pop	{r7, pc}
 8009176:	bf00      	nop
 8009178:	40020800 	.word	0x40020800
 800917c:	40020c00 	.word	0x40020c00
 8009180:	40020000 	.word	0x40020000

08009184 <low_power_state>:

volatile uint32_t Counter = 0;


void low_power_state(void)
{
 8009184:	b580      	push	{r7, lr}
 8009186:	af00      	add	r7, sp, #0
	pull_low(GPIOC, GPIO_PIN_4);		// LTC6820 side A go sleep
 8009188:	2110      	movs	r1, #16
 800918a:	480a      	ldr	r0, [pc, #40]	@ (80091b4 <low_power_state+0x30>)
 800918c:	f000 f834 	bl	80091f8 <pull_low>
	pull_low(GPIOD, GPIO_PIN_2);		// LTC6820 side B go sleep
 8009190:	2104      	movs	r1, #4
 8009192:	4809      	ldr	r0, [pc, #36]	@ (80091b8 <low_power_state+0x34>)
 8009194:	f000 f830 	bl	80091f8 <pull_low>
	pull_high(GPIOA, GPIO_PIN_4);		// LTC6820 side A !SS
 8009198:	2110      	movs	r1, #16
 800919a:	4808      	ldr	r0, [pc, #32]	@ (80091bc <low_power_state+0x38>)
 800919c:	f000 f83c 	bl	8009218 <pull_high>
	pull_high(GPIOA, GPIO_PIN_15);		// LTC6820 side B !SS
 80091a0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80091a4:	4805      	ldr	r0, [pc, #20]	@ (80091bc <low_power_state+0x38>)
 80091a6:	f000 f837 	bl	8009218 <pull_high>

	blink();
 80091aa:	f000 f809 	bl	80091c0 <blink>
}
 80091ae:	bf00      	nop
 80091b0:	bd80      	pop	{r7, pc}
 80091b2:	bf00      	nop
 80091b4:	40020800 	.word	0x40020800
 80091b8:	40020c00 	.word	0x40020c00
 80091bc:	40020000 	.word	0x40020000

080091c0 <blink>:


void blink(void)
{
 80091c0:	b580      	push	{r7, lr}
 80091c2:	af00      	add	r7, sp, #0
	while(1) {
		active_led_off();
 80091c4:	f000 f8aa 	bl	800931c <active_led_off>
		charge_led_off();
 80091c8:	f000 f8c0 	bl	800934c <charge_led_off>
		hot_led_off();
 80091cc:	f000 f8ec 	bl	80093a8 <hot_led_off>
		balance_led_off();
 80091d0:	f000 f8d4 	bl	800937c <balance_led_off>
		wait(1000);
 80091d4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80091d8:	f000 f82e 	bl	8009238 <wait>
		active_led_on();
 80091dc:	f000 f892 	bl	8009304 <active_led_on>
		charge_led_on();
 80091e0:	f000 f8a8 	bl	8009334 <charge_led_on>
		hot_led_on();
 80091e4:	f000 f8d6 	bl	8009394 <hot_led_on>
		balance_led_on();
 80091e8:	f000 f8bc 	bl	8009364 <balance_led_on>
		wait(1000);
 80091ec:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80091f0:	f000 f822 	bl	8009238 <wait>
		active_led_off();
 80091f4:	bf00      	nop
 80091f6:	e7e5      	b.n	80091c4 <blink+0x4>

080091f8 <pull_low>:
	}
}


void pull_low(GPIO_TypeDef *port, uint16_t pin)
{
 80091f8:	b580      	push	{r7, lr}
 80091fa:	b082      	sub	sp, #8
 80091fc:	af00      	add	r7, sp, #0
 80091fe:	6078      	str	r0, [r7, #4]
 8009200:	460b      	mov	r3, r1
 8009202:	807b      	strh	r3, [r7, #2]
	HAL_GPIO_WritePin(port, pin, GPIO_PIN_RESET);
 8009204:	887b      	ldrh	r3, [r7, #2]
 8009206:	2200      	movs	r2, #0
 8009208:	4619      	mov	r1, r3
 800920a:	6878      	ldr	r0, [r7, #4]
 800920c:	f003 f87a 	bl	800c304 <HAL_GPIO_WritePin>
}
 8009210:	bf00      	nop
 8009212:	3708      	adds	r7, #8
 8009214:	46bd      	mov	sp, r7
 8009216:	bd80      	pop	{r7, pc}

08009218 <pull_high>:


void pull_high(GPIO_TypeDef *port, uint16_t pin)
{
 8009218:	b580      	push	{r7, lr}
 800921a:	b082      	sub	sp, #8
 800921c:	af00      	add	r7, sp, #0
 800921e:	6078      	str	r0, [r7, #4]
 8009220:	460b      	mov	r3, r1
 8009222:	807b      	strh	r3, [r7, #2]
	HAL_GPIO_WritePin(port, pin, GPIO_PIN_SET);
 8009224:	887b      	ldrh	r3, [r7, #2]
 8009226:	2201      	movs	r2, #1
 8009228:	4619      	mov	r1, r3
 800922a:	6878      	ldr	r0, [r7, #4]
 800922c:	f003 f86a 	bl	800c304 <HAL_GPIO_WritePin>
}
 8009230:	bf00      	nop
 8009232:	3708      	adds	r7, #8
 8009234:	46bd      	mov	sp, r7
 8009236:	bd80      	pop	{r7, pc}

08009238 <wait>:


void wait(uint32_t msDelay)
{
 8009238:	b580      	push	{r7, lr}
 800923a:	b082      	sub	sp, #8
 800923c:	af00      	add	r7, sp, #0
 800923e:	6078      	str	r0, [r7, #4]
	HAL_Delay(msDelay);
 8009240:	6878      	ldr	r0, [r7, #4]
 8009242:	f001 fb11 	bl	800a868 <HAL_Delay>
}
 8009246:	bf00      	nop
 8009248:	3708      	adds	r7, #8
 800924a:	46bd      	mov	sp, r7
 800924c:	bd80      	pop	{r7, pc}
	...

08009250 <start_timer>:
	else { return 1; }
}


void start_timer(TIM_HandleTypeDef *htim)
{
 8009250:	b580      	push	{r7, lr}
 8009252:	b084      	sub	sp, #16
 8009254:	af00      	add	r7, sp, #0
 8009256:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef status;										// status indicates whether the reception was successful or not
	uint8_t attempts = 0;											// 5 attempts
 8009258:	2300      	movs	r3, #0
 800925a:	73fb      	strb	r3, [r7, #15]

	Counter = 0;
 800925c:	4b26      	ldr	r3, [pc, #152]	@ (80092f8 <start_timer+0xa8>)
 800925e:	2200      	movs	r2, #0
 8009260:	601a      	str	r2, [r3, #0]

	while(attempts < 5) {
 8009262:	e010      	b.n	8009286 <start_timer+0x36>
		status = HAL_TIM_Base_Start_IT(htim);
 8009264:	6878      	ldr	r0, [r7, #4]
 8009266:	f004 fabb 	bl	800d7e0 <HAL_TIM_Base_Start_IT>
 800926a:	4603      	mov	r3, r0
 800926c:	73bb      	strb	r3, [r7, #14]

		if(status == HAL_OK) { attempts = 10; }
 800926e:	7bbb      	ldrb	r3, [r7, #14]
 8009270:	2b00      	cmp	r3, #0
 8009272:	d102      	bne.n	800927a <start_timer+0x2a>
 8009274:	230a      	movs	r3, #10
 8009276:	73fb      	strb	r3, [r7, #15]
 8009278:	e005      	b.n	8009286 <start_timer+0x36>

		else {
			attempts++;
 800927a:	7bfb      	ldrb	r3, [r7, #15]
 800927c:	3301      	adds	r3, #1
 800927e:	73fb      	strb	r3, [r7, #15]
			wait(1);
 8009280:	2001      	movs	r0, #1
 8009282:	f7ff ffd9 	bl	8009238 <wait>
	while(attempts < 5) {
 8009286:	7bfb      	ldrb	r3, [r7, #15]
 8009288:	2b04      	cmp	r3, #4
 800928a:	d9eb      	bls.n	8009264 <start_timer+0x14>
		}
	}
	if(attempts != 10) {
 800928c:	7bfb      	ldrb	r3, [r7, #15]
 800928e:	2b0a      	cmp	r3, #10
 8009290:	d02d      	beq.n	80092ee <start_timer+0x9e>
		// STM ERROR (INTERNAL)
		while(1) {
			  pull_high(GPIOA, GPIO_PIN_8);
 8009292:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8009296:	4819      	ldr	r0, [pc, #100]	@ (80092fc <start_timer+0xac>)
 8009298:	f7ff ffbe 	bl	8009218 <pull_high>
			  pull_high(GPIOC, GPIO_PIN_9);
 800929c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80092a0:	4817      	ldr	r0, [pc, #92]	@ (8009300 <start_timer+0xb0>)
 80092a2:	f7ff ffb9 	bl	8009218 <pull_high>
			  pull_high(GPIOC, GPIO_PIN_8);
 80092a6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80092aa:	4815      	ldr	r0, [pc, #84]	@ (8009300 <start_timer+0xb0>)
 80092ac:	f7ff ffb4 	bl	8009218 <pull_high>
			  pull_high(GPIOC, GPIO_PIN_7);
 80092b0:	2180      	movs	r1, #128	@ 0x80
 80092b2:	4813      	ldr	r0, [pc, #76]	@ (8009300 <start_timer+0xb0>)
 80092b4:	f7ff ffb0 	bl	8009218 <pull_high>
			  wait(250);
 80092b8:	20fa      	movs	r0, #250	@ 0xfa
 80092ba:	f7ff ffbd 	bl	8009238 <wait>
			  pull_low(GPIOA, GPIO_PIN_8);
 80092be:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80092c2:	480e      	ldr	r0, [pc, #56]	@ (80092fc <start_timer+0xac>)
 80092c4:	f7ff ff98 	bl	80091f8 <pull_low>
			  pull_low(GPIOC, GPIO_PIN_9);
 80092c8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80092cc:	480c      	ldr	r0, [pc, #48]	@ (8009300 <start_timer+0xb0>)
 80092ce:	f7ff ff93 	bl	80091f8 <pull_low>
			  pull_low(GPIOC, GPIO_PIN_8);
 80092d2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80092d6:	480a      	ldr	r0, [pc, #40]	@ (8009300 <start_timer+0xb0>)
 80092d8:	f7ff ff8e 	bl	80091f8 <pull_low>
			  pull_low(GPIOC, GPIO_PIN_7);
 80092dc:	2180      	movs	r1, #128	@ 0x80
 80092de:	4808      	ldr	r0, [pc, #32]	@ (8009300 <start_timer+0xb0>)
 80092e0:	f7ff ff8a 	bl	80091f8 <pull_low>
			  wait(250);
 80092e4:	20fa      	movs	r0, #250	@ 0xfa
 80092e6:	f7ff ffa7 	bl	8009238 <wait>
			  pull_high(GPIOA, GPIO_PIN_8);
 80092ea:	bf00      	nop
 80092ec:	e7d1      	b.n	8009292 <start_timer+0x42>
			  // ADD CAN MESSAGE SPAM
		}
	}
}
 80092ee:	bf00      	nop
 80092f0:	3710      	adds	r7, #16
 80092f2:	46bd      	mov	sp, r7
 80092f4:	bd80      	pop	{r7, pc}
 80092f6:	bf00      	nop
 80092f8:	200003f8 	.word	0x200003f8
 80092fc:	40020000 	.word	0x40020000
 8009300:	40020800 	.word	0x40020800

08009304 <active_led_on>:
	}
}


void active_led_on(void)
{
 8009304:	b580      	push	{r7, lr}
 8009306:	af00      	add	r7, sp, #0
	pull_high(GPIOA, GPIO_PIN_8);
 8009308:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800930c:	4802      	ldr	r0, [pc, #8]	@ (8009318 <active_led_on+0x14>)
 800930e:	f7ff ff83 	bl	8009218 <pull_high>
}
 8009312:	bf00      	nop
 8009314:	bd80      	pop	{r7, pc}
 8009316:	bf00      	nop
 8009318:	40020000 	.word	0x40020000

0800931c <active_led_off>:


void active_led_off(void)
{
 800931c:	b580      	push	{r7, lr}
 800931e:	af00      	add	r7, sp, #0
	pull_low(GPIOA, GPIO_PIN_8);
 8009320:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8009324:	4802      	ldr	r0, [pc, #8]	@ (8009330 <active_led_off+0x14>)
 8009326:	f7ff ff67 	bl	80091f8 <pull_low>
}
 800932a:	bf00      	nop
 800932c:	bd80      	pop	{r7, pc}
 800932e:	bf00      	nop
 8009330:	40020000 	.word	0x40020000

08009334 <charge_led_on>:


void charge_led_on(void)
{
 8009334:	b580      	push	{r7, lr}
 8009336:	af00      	add	r7, sp, #0
	pull_high(GPIOC, GPIO_PIN_9);
 8009338:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800933c:	4802      	ldr	r0, [pc, #8]	@ (8009348 <charge_led_on+0x14>)
 800933e:	f7ff ff6b 	bl	8009218 <pull_high>
}
 8009342:	bf00      	nop
 8009344:	bd80      	pop	{r7, pc}
 8009346:	bf00      	nop
 8009348:	40020800 	.word	0x40020800

0800934c <charge_led_off>:


void charge_led_off(void)
{
 800934c:	b580      	push	{r7, lr}
 800934e:	af00      	add	r7, sp, #0
	pull_low(GPIOC, GPIO_PIN_9);
 8009350:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8009354:	4802      	ldr	r0, [pc, #8]	@ (8009360 <charge_led_off+0x14>)
 8009356:	f7ff ff4f 	bl	80091f8 <pull_low>
}
 800935a:	bf00      	nop
 800935c:	bd80      	pop	{r7, pc}
 800935e:	bf00      	nop
 8009360:	40020800 	.word	0x40020800

08009364 <balance_led_on>:


void balance_led_on(void)
{
 8009364:	b580      	push	{r7, lr}
 8009366:	af00      	add	r7, sp, #0
	pull_high(GPIOC, GPIO_PIN_8);
 8009368:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800936c:	4802      	ldr	r0, [pc, #8]	@ (8009378 <balance_led_on+0x14>)
 800936e:	f7ff ff53 	bl	8009218 <pull_high>
}
 8009372:	bf00      	nop
 8009374:	bd80      	pop	{r7, pc}
 8009376:	bf00      	nop
 8009378:	40020800 	.word	0x40020800

0800937c <balance_led_off>:


void balance_led_off(void)
{
 800937c:	b580      	push	{r7, lr}
 800937e:	af00      	add	r7, sp, #0
	pull_low(GPIOC, GPIO_PIN_8);
 8009380:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8009384:	4802      	ldr	r0, [pc, #8]	@ (8009390 <balance_led_off+0x14>)
 8009386:	f7ff ff37 	bl	80091f8 <pull_low>
}
 800938a:	bf00      	nop
 800938c:	bd80      	pop	{r7, pc}
 800938e:	bf00      	nop
 8009390:	40020800 	.word	0x40020800

08009394 <hot_led_on>:


void hot_led_on(void)
{
 8009394:	b580      	push	{r7, lr}
 8009396:	af00      	add	r7, sp, #0
	pull_high(GPIOC, GPIO_PIN_7);
 8009398:	2180      	movs	r1, #128	@ 0x80
 800939a:	4802      	ldr	r0, [pc, #8]	@ (80093a4 <hot_led_on+0x10>)
 800939c:	f7ff ff3c 	bl	8009218 <pull_high>
}
 80093a0:	bf00      	nop
 80093a2:	bd80      	pop	{r7, pc}
 80093a4:	40020800 	.word	0x40020800

080093a8 <hot_led_off>:


void hot_led_off(void)
{
 80093a8:	b580      	push	{r7, lr}
 80093aa:	af00      	add	r7, sp, #0
	pull_low(GPIOC, GPIO_PIN_7);
 80093ac:	2180      	movs	r1, #128	@ 0x80
 80093ae:	4802      	ldr	r0, [pc, #8]	@ (80093b8 <hot_led_off+0x10>)
 80093b0:	f7ff ff22 	bl	80091f8 <pull_low>
}
 80093b4:	bf00      	nop
 80093b6:	bd80      	pop	{r7, pc}
 80093b8:	40020800 	.word	0x40020800
 80093bc:	00000000 	.word	0x00000000

080093c0 <compute_resistance>:
#include "torch_stm32.h"
#include <math.h>


void compute_resistance(float *thermistorVoltage_ptr)
{
 80093c0:	b5b0      	push	{r4, r5, r7, lr}
 80093c2:	b09a      	sub	sp, #104	@ 0x68
 80093c4:	af00      	add	r7, sp, #0
 80093c6:	6078      	str	r0, [r7, #4]
	float thermistorResistance[THERM_QTY];
	uint16_t Rpu = 10000;			// Thermistor pull up resistor
 80093c8:	f242 7310 	movw	r3, #10000	@ 0x2710
 80093cc:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
	float Rmw = 0;					// Trace resistance on module board (UPDATE; different for each thermistor)
 80093d0:	f04f 0300 	mov.w	r3, #0
 80093d4:	663b      	str	r3, [r7, #96]	@ 0x60
	float Rmc = 0.03;				// Module board connector resistance
 80093d6:	4b3e      	ldr	r3, [pc, #248]	@ (80094d0 <compute_resistance+0x110>)
 80093d8:	65fb      	str	r3, [r7, #92]	@ 0x5c
	float Rec = 0.03;				// Embedded board connector resistance
 80093da:	4b3d      	ldr	r3, [pc, #244]	@ (80094d0 <compute_resistance+0x110>)
 80093dc:	65bb      	str	r3, [r7, #88]	@ 0x58
	float Rew = 0;					// Trace resistance on embedded board (UPDATE; different for each thermistor)
 80093de:	f04f 0300 	mov.w	r3, #0
 80093e2:	657b      	str	r3, [r7, #84]	@ 0x54
	float Req = Rpu + Rmc + Rec;	// Equivalent resistance (UPDATE; different for each thermistor)
 80093e4:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 80093e8:	ee07 3a90 	vmov	s15, r3
 80093ec:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80093f0:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 80093f4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80093f8:	ed97 7a16 	vldr	s14, [r7, #88]	@ 0x58
 80093fc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009400:	edc7 7a14 	vstr	s15, [r7, #80]	@ 0x50

	// MAKE i < THERM_QTY instead of i < 16 on final board
	for(uint8_t i = 0; i < 18; i++) { thermistorResistance[i] = (*(thermistorVoltage_ptr + i)*Req)/(3.3 - *(thermistorVoltage_ptr + i)); }
 8009404:	2300      	movs	r3, #0
 8009406:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800940a:	e039      	b.n	8009480 <compute_resistance+0xc0>
 800940c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8009410:	009b      	lsls	r3, r3, #2
 8009412:	687a      	ldr	r2, [r7, #4]
 8009414:	4413      	add	r3, r2
 8009416:	ed93 7a00 	vldr	s14, [r3]
 800941a:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 800941e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009422:	ee17 0a90 	vmov	r0, s15
 8009426:	f7f7 f853 	bl	80004d0 <__aeabi_f2d>
 800942a:	4604      	mov	r4, r0
 800942c:	460d      	mov	r5, r1
 800942e:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8009432:	009b      	lsls	r3, r3, #2
 8009434:	687a      	ldr	r2, [r7, #4]
 8009436:	4413      	add	r3, r2
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	4618      	mov	r0, r3
 800943c:	f7f7 f848 	bl	80004d0 <__aeabi_f2d>
 8009440:	4602      	mov	r2, r0
 8009442:	460b      	mov	r3, r1
 8009444:	a120      	add	r1, pc, #128	@ (adr r1, 80094c8 <compute_resistance+0x108>)
 8009446:	e9d1 0100 	ldrd	r0, r1, [r1]
 800944a:	f7f6 fee1 	bl	8000210 <__aeabi_dsub>
 800944e:	4602      	mov	r2, r0
 8009450:	460b      	mov	r3, r1
 8009452:	4620      	mov	r0, r4
 8009454:	4629      	mov	r1, r5
 8009456:	f7f7 f9bd 	bl	80007d4 <__aeabi_ddiv>
 800945a:	4602      	mov	r2, r0
 800945c:	460b      	mov	r3, r1
 800945e:	f897 4067 	ldrb.w	r4, [r7, #103]	@ 0x67
 8009462:	4610      	mov	r0, r2
 8009464:	4619      	mov	r1, r3
 8009466:	f7f7 fa9d 	bl	80009a4 <__aeabi_d2f>
 800946a:	4602      	mov	r2, r0
 800946c:	00a3      	lsls	r3, r4, #2
 800946e:	3368      	adds	r3, #104	@ 0x68
 8009470:	443b      	add	r3, r7
 8009472:	3b60      	subs	r3, #96	@ 0x60
 8009474:	601a      	str	r2, [r3, #0]
 8009476:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800947a:	3301      	adds	r3, #1
 800947c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8009480:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8009484:	2b11      	cmp	r3, #17
 8009486:	d9c1      	bls.n	800940c <compute_resistance+0x4c>

	// MAKE i < THERM_QTY instead of i < 16 on final board
	for(uint8_t i = 0; i < 18; i++) { *(thermistorVoltage_ptr + i) = thermistorResistance[i]; }
 8009488:	2300      	movs	r3, #0
 800948a:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
 800948e:	e011      	b.n	80094b4 <compute_resistance+0xf4>
 8009490:	f897 2066 	ldrb.w	r2, [r7, #102]	@ 0x66
 8009494:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 8009498:	009b      	lsls	r3, r3, #2
 800949a:	6879      	ldr	r1, [r7, #4]
 800949c:	440b      	add	r3, r1
 800949e:	0092      	lsls	r2, r2, #2
 80094a0:	3268      	adds	r2, #104	@ 0x68
 80094a2:	443a      	add	r2, r7
 80094a4:	3a60      	subs	r2, #96	@ 0x60
 80094a6:	6812      	ldr	r2, [r2, #0]
 80094a8:	601a      	str	r2, [r3, #0]
 80094aa:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 80094ae:	3301      	adds	r3, #1
 80094b0:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
 80094b4:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 80094b8:	2b11      	cmp	r3, #17
 80094ba:	d9e9      	bls.n	8009490 <compute_resistance+0xd0>
}
 80094bc:	bf00      	nop
 80094be:	bf00      	nop
 80094c0:	3768      	adds	r7, #104	@ 0x68
 80094c2:	46bd      	mov	sp, r7
 80094c4:	bdb0      	pop	{r4, r5, r7, pc}
 80094c6:	bf00      	nop
 80094c8:	66666666 	.word	0x66666666
 80094cc:	400a6666 	.word	0x400a6666
 80094d0:	3cf5c28f 	.word	0x3cf5c28f
 80094d4:	00000000 	.word	0x00000000

080094d8 <compute_temperature>:


void compute_temperature(float *thermistorResistance_ptr)
{
 80094d8:	b590      	push	{r4, r7, lr}
 80094da:	ed2d 8b02 	vpush	{d8}
 80094de:	b09b      	sub	sp, #108	@ 0x6c
 80094e0:	af00      	add	r7, sp, #0
 80094e2:	6078      	str	r0, [r7, #4]
	float temperature[THERM_QTY];
	float A = 0.003354016;
 80094e4:	4b5e      	ldr	r3, [pc, #376]	@ (8009660 <compute_temperature+0x188>)
 80094e6:	663b      	str	r3, [r7, #96]	@ 0x60
	float B = 0.000256985;
 80094e8:	4b5e      	ldr	r3, [pc, #376]	@ (8009664 <compute_temperature+0x18c>)
 80094ea:	65fb      	str	r3, [r7, #92]	@ 0x5c
	float C = 0.000002620131;
 80094ec:	4b5e      	ldr	r3, [pc, #376]	@ (8009668 <compute_temperature+0x190>)
 80094ee:	65bb      	str	r3, [r7, #88]	@ 0x58
	float D = 0.00000006383091;
 80094f0:	4b5e      	ldr	r3, [pc, #376]	@ (800966c <compute_temperature+0x194>)
 80094f2:	657b      	str	r3, [r7, #84]	@ 0x54
	uint16_t R25 = 10000;
 80094f4:	f242 7310 	movw	r3, #10000	@ 0x2710
 80094f8:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52


	for(uint8_t i = 0; i < 18; i++) {
 80094fc:	2300      	movs	r3, #0
 80094fe:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8009502:	e082      	b.n	800960a <compute_temperature+0x132>
		temperature[i] = (1/(A +
							 B*logf(*(thermistorResistance_ptr + i)/R25) +
 8009504:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8009508:	009b      	lsls	r3, r3, #2
 800950a:	687a      	ldr	r2, [r7, #4]
 800950c:	4413      	add	r3, r2
 800950e:	ed93 7a00 	vldr	s14, [r3]
 8009512:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 8009516:	ee07 3a90 	vmov	s15, r3
 800951a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800951e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8009522:	eeb0 0a66 	vmov.f32	s0, s13
 8009526:	f004 fdb3 	bl	800e090 <logf>
 800952a:	eeb0 7a40 	vmov.f32	s14, s0
 800952e:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 8009532:	ee27 7a27 	vmul.f32	s14, s14, s15
		temperature[i] = (1/(A +
 8009536:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 800953a:	ee37 8a27 	vadd.f32	s16, s14, s15
							 C*powf(logf(*(thermistorResistance_ptr + i)/R25), 2) +
 800953e:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8009542:	009b      	lsls	r3, r3, #2
 8009544:	687a      	ldr	r2, [r7, #4]
 8009546:	4413      	add	r3, r2
 8009548:	ed93 7a00 	vldr	s14, [r3]
 800954c:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 8009550:	ee07 3a90 	vmov	s15, r3
 8009554:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009558:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800955c:	eeb0 0a66 	vmov.f32	s0, s13
 8009560:	f004 fd96 	bl	800e090 <logf>
 8009564:	eef0 7a40 	vmov.f32	s15, s0
 8009568:	eef0 0a00 	vmov.f32	s1, #0	@ 0x40000000  2.0
 800956c:	eeb0 0a67 	vmov.f32	s0, s15
 8009570:	f004 fdbc 	bl	800e0ec <powf>
 8009574:	eeb0 7a40 	vmov.f32	s14, s0
 8009578:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 800957c:	ee67 7a27 	vmul.f32	s15, s14, s15
							 B*logf(*(thermistorResistance_ptr + i)/R25) +
 8009580:	ee38 8a27 	vadd.f32	s16, s16, s15
							 D*powf(logf(*(thermistorResistance_ptr + i)/R25), 3))) - 273.15;
 8009584:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8009588:	009b      	lsls	r3, r3, #2
 800958a:	687a      	ldr	r2, [r7, #4]
 800958c:	4413      	add	r3, r2
 800958e:	ed93 7a00 	vldr	s14, [r3]
 8009592:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 8009596:	ee07 3a90 	vmov	s15, r3
 800959a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800959e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80095a2:	eeb0 0a66 	vmov.f32	s0, s13
 80095a6:	f004 fd73 	bl	800e090 <logf>
 80095aa:	eef0 7a40 	vmov.f32	s15, s0
 80095ae:	eef0 0a08 	vmov.f32	s1, #8	@ 0x40400000  3.0
 80095b2:	eeb0 0a67 	vmov.f32	s0, s15
 80095b6:	f004 fd99 	bl	800e0ec <powf>
 80095ba:	eeb0 7a40 	vmov.f32	s14, s0
 80095be:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 80095c2:	ee67 7a27 	vmul.f32	s15, s14, s15
							 C*powf(logf(*(thermistorResistance_ptr + i)/R25), 2) +
 80095c6:	ee78 7a27 	vadd.f32	s15, s16, s15
		temperature[i] = (1/(A +
 80095ca:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80095ce:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80095d2:	ee16 0a90 	vmov	r0, s13
 80095d6:	f7f6 ff7b 	bl	80004d0 <__aeabi_f2d>
							 D*powf(logf(*(thermistorResistance_ptr + i)/R25), 3))) - 273.15;
 80095da:	a31f      	add	r3, pc, #124	@ (adr r3, 8009658 <compute_temperature+0x180>)
 80095dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095e0:	f7f6 fe16 	bl	8000210 <__aeabi_dsub>
 80095e4:	4602      	mov	r2, r0
 80095e6:	460b      	mov	r3, r1
		temperature[i] = (1/(A +
 80095e8:	f897 4067 	ldrb.w	r4, [r7, #103]	@ 0x67
							 D*powf(logf(*(thermistorResistance_ptr + i)/R25), 3))) - 273.15;
 80095ec:	4610      	mov	r0, r2
 80095ee:	4619      	mov	r1, r3
 80095f0:	f7f7 f9d8 	bl	80009a4 <__aeabi_d2f>
 80095f4:	4602      	mov	r2, r0
		temperature[i] = (1/(A +
 80095f6:	00a3      	lsls	r3, r4, #2
 80095f8:	3368      	adds	r3, #104	@ 0x68
 80095fa:	443b      	add	r3, r7
 80095fc:	3b60      	subs	r3, #96	@ 0x60
 80095fe:	601a      	str	r2, [r3, #0]
	for(uint8_t i = 0; i < 18; i++) {
 8009600:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8009604:	3301      	adds	r3, #1
 8009606:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800960a:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800960e:	2b11      	cmp	r3, #17
 8009610:	f67f af78 	bls.w	8009504 <compute_temperature+0x2c>
	}
	// MAKE i < THERM_QTY instead of i < 16 on final board
	for(uint8_t i = 0; i < 18; i++) { *(thermistorResistance_ptr + i) = temperature[i]; }
 8009614:	2300      	movs	r3, #0
 8009616:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
 800961a:	e011      	b.n	8009640 <compute_temperature+0x168>
 800961c:	f897 2066 	ldrb.w	r2, [r7, #102]	@ 0x66
 8009620:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 8009624:	009b      	lsls	r3, r3, #2
 8009626:	6879      	ldr	r1, [r7, #4]
 8009628:	440b      	add	r3, r1
 800962a:	0092      	lsls	r2, r2, #2
 800962c:	3268      	adds	r2, #104	@ 0x68
 800962e:	443a      	add	r2, r7
 8009630:	3a60      	subs	r2, #96	@ 0x60
 8009632:	6812      	ldr	r2, [r2, #0]
 8009634:	601a      	str	r2, [r3, #0]
 8009636:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 800963a:	3301      	adds	r3, #1
 800963c:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
 8009640:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 8009644:	2b11      	cmp	r3, #17
 8009646:	d9e9      	bls.n	800961c <compute_temperature+0x144>
}
 8009648:	bf00      	nop
 800964a:	bf00      	nop
 800964c:	376c      	adds	r7, #108	@ 0x6c
 800964e:	46bd      	mov	sp, r7
 8009650:	ecbd 8b02 	vpop	{d8}
 8009654:	bd90      	pop	{r4, r7, pc}
 8009656:	bf00      	nop
 8009658:	66666666 	.word	0x66666666
 800965c:	40711266 	.word	0x40711266
 8009660:	3b5bcf0d 	.word	0x3b5bcf0d
 8009664:	3986bbf1 	.word	0x3986bbf1
 8009668:	362fd582 	.word	0x362fd582
 800966c:	3389136a 	.word	0x3389136a

08009670 <temperature_sense>:


void temperature_sense(float *temperature_ptr)
{
 8009670:	b580      	push	{r7, lr}
 8009672:	b096      	sub	sp, #88	@ 0x58
 8009674:	af00      	add	r7, sp, #0
 8009676:	6078      	str	r0, [r7, #4]
	float thermistorArray[THERM_QTY];

	read_thermistors(thermistorArray);
 8009678:	f107 030c 	add.w	r3, r7, #12
 800967c:	4618      	mov	r0, r3
 800967e:	f000 f913 	bl	80098a8 <read_thermistors>

	compute_resistance(thermistorArray);
 8009682:	f107 030c 	add.w	r3, r7, #12
 8009686:	4618      	mov	r0, r3
 8009688:	f7ff fe9a 	bl	80093c0 <compute_resistance>

	compute_temperature(thermistorArray);
 800968c:	f107 030c 	add.w	r3, r7, #12
 8009690:	4618      	mov	r0, r3
 8009692:	f7ff ff21 	bl	80094d8 <compute_temperature>

	for(uint8_t i = 0; i < 18; i++) { *(temperature_ptr + i) = thermistorArray[i]; }
 8009696:	2300      	movs	r3, #0
 8009698:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
 800969c:	e011      	b.n	80096c2 <temperature_sense+0x52>
 800969e:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 80096a2:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80096a6:	009b      	lsls	r3, r3, #2
 80096a8:	6879      	ldr	r1, [r7, #4]
 80096aa:	440b      	add	r3, r1
 80096ac:	0092      	lsls	r2, r2, #2
 80096ae:	3258      	adds	r2, #88	@ 0x58
 80096b0:	443a      	add	r2, r7
 80096b2:	3a4c      	subs	r2, #76	@ 0x4c
 80096b4:	6812      	ldr	r2, [r2, #0]
 80096b6:	601a      	str	r2, [r3, #0]
 80096b8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80096bc:	3301      	adds	r3, #1
 80096be:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
 80096c2:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80096c6:	2b11      	cmp	r3, #17
 80096c8:	d9e9      	bls.n	800969e <temperature_sense+0x2e>
}
 80096ca:	bf00      	nop
 80096cc:	bf00      	nop
 80096ce:	3758      	adds	r7, #88	@ 0x58
 80096d0:	46bd      	mov	sp, r7
 80096d2:	bd80      	pop	{r7, pc}
 80096d4:	0000      	movs	r0, r0
	...

080096d8 <board_temperature_sense>:


void board_temperature_sense(float *boardThermistorVoltages, float VREF2, float *boardTemperatures)
{
 80096d8:	b590      	push	{r4, r7, lr}
 80096da:	ed2d 8b02 	vpush	{d8}
 80096de:	b095      	sub	sp, #84	@ 0x54
 80096e0:	af00      	add	r7, sp, #0
 80096e2:	60f8      	str	r0, [r7, #12]
 80096e4:	ed87 0a02 	vstr	s0, [r7, #8]
 80096e8:	6079      	str	r1, [r7, #4]
	float thermistorResistance[9];
	uint16_t Rpu = 10000;
 80096ea:	f242 7310 	movw	r3, #10000	@ 0x2710
 80096ee:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c

	float A = 0.003354016;
 80096f2:	4b69      	ldr	r3, [pc, #420]	@ (8009898 <board_temperature_sense+0x1c0>)
 80096f4:	64bb      	str	r3, [r7, #72]	@ 0x48
	float B = 0.000256985;
 80096f6:	4b69      	ldr	r3, [pc, #420]	@ (800989c <board_temperature_sense+0x1c4>)
 80096f8:	647b      	str	r3, [r7, #68]	@ 0x44
	float C = 0.000002620131;
 80096fa:	4b69      	ldr	r3, [pc, #420]	@ (80098a0 <board_temperature_sense+0x1c8>)
 80096fc:	643b      	str	r3, [r7, #64]	@ 0x40
	float D = 0.00000006383091;
 80096fe:	4b69      	ldr	r3, [pc, #420]	@ (80098a4 <board_temperature_sense+0x1cc>)
 8009700:	63fb      	str	r3, [r7, #60]	@ 0x3c
	uint16_t R25 = 10000;
 8009702:	f242 7310 	movw	r3, #10000	@ 0x2710
 8009706:	877b      	strh	r3, [r7, #58]	@ 0x3a

	for(uint8_t i = 0; i < 9; i++) {
 8009708:	2300      	movs	r3, #0
 800970a:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 800970e:	e028      	b.n	8009762 <board_temperature_sense+0x8a>
		thermistorResistance[i] = (*(boardThermistorVoltages + i)*Rpu)/(VREF2 - *(boardThermistorVoltages + i));
 8009710:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8009714:	009b      	lsls	r3, r3, #2
 8009716:	68fa      	ldr	r2, [r7, #12]
 8009718:	4413      	add	r3, r2
 800971a:	ed93 7a00 	vldr	s14, [r3]
 800971e:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8009722:	ee07 3a90 	vmov	s15, r3
 8009726:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800972a:	ee67 6a27 	vmul.f32	s13, s14, s15
 800972e:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8009732:	009b      	lsls	r3, r3, #2
 8009734:	68fa      	ldr	r2, [r7, #12]
 8009736:	4413      	add	r3, r2
 8009738:	edd3 7a00 	vldr	s15, [r3]
 800973c:	ed97 7a02 	vldr	s14, [r7, #8]
 8009740:	ee37 7a67 	vsub.f32	s14, s14, s15
 8009744:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8009748:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800974c:	009b      	lsls	r3, r3, #2
 800974e:	3350      	adds	r3, #80	@ 0x50
 8009750:	443b      	add	r3, r7
 8009752:	3b3c      	subs	r3, #60	@ 0x3c
 8009754:	edc3 7a00 	vstr	s15, [r3]
	for(uint8_t i = 0; i < 9; i++) {
 8009758:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800975c:	3301      	adds	r3, #1
 800975e:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 8009762:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8009766:	2b08      	cmp	r3, #8
 8009768:	d9d2      	bls.n	8009710 <board_temperature_sense+0x38>
	}

	for(uint8_t i = 0; i < 9; i++) {
 800976a:	2300      	movs	r3, #0
 800976c:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
 8009770:	e081      	b.n	8009876 <board_temperature_sense+0x19e>
		*(boardTemperatures + i) = (1/(A +
									   B*logf(thermistorResistance[i]/R25) +
 8009772:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 8009776:	009b      	lsls	r3, r3, #2
 8009778:	3350      	adds	r3, #80	@ 0x50
 800977a:	443b      	add	r3, r7
 800977c:	3b3c      	subs	r3, #60	@ 0x3c
 800977e:	ed93 7a00 	vldr	s14, [r3]
 8009782:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8009784:	ee07 3a90 	vmov	s15, r3
 8009788:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800978c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8009790:	eeb0 0a66 	vmov.f32	s0, s13
 8009794:	f004 fc7c 	bl	800e090 <logf>
 8009798:	eeb0 7a40 	vmov.f32	s14, s0
 800979c:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 80097a0:	ee27 7a27 	vmul.f32	s14, s14, s15
		*(boardTemperatures + i) = (1/(A +
 80097a4:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 80097a8:	ee37 8a27 	vadd.f32	s16, s14, s15
									   C*powf(logf(thermistorResistance[i]/R25), 2) +
 80097ac:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 80097b0:	009b      	lsls	r3, r3, #2
 80097b2:	3350      	adds	r3, #80	@ 0x50
 80097b4:	443b      	add	r3, r7
 80097b6:	3b3c      	subs	r3, #60	@ 0x3c
 80097b8:	ed93 7a00 	vldr	s14, [r3]
 80097bc:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80097be:	ee07 3a90 	vmov	s15, r3
 80097c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80097c6:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80097ca:	eeb0 0a66 	vmov.f32	s0, s13
 80097ce:	f004 fc5f 	bl	800e090 <logf>
 80097d2:	eef0 7a40 	vmov.f32	s15, s0
 80097d6:	eef0 0a00 	vmov.f32	s1, #0	@ 0x40000000  2.0
 80097da:	eeb0 0a67 	vmov.f32	s0, s15
 80097de:	f004 fc85 	bl	800e0ec <powf>
 80097e2:	eeb0 7a40 	vmov.f32	s14, s0
 80097e6:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 80097ea:	ee67 7a27 	vmul.f32	s15, s14, s15
									   B*logf(thermistorResistance[i]/R25) +
 80097ee:	ee38 8a27 	vadd.f32	s16, s16, s15
									   D*powf(logf(thermistorResistance[i]/R25), 3))) - 273.15;
 80097f2:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 80097f6:	009b      	lsls	r3, r3, #2
 80097f8:	3350      	adds	r3, #80	@ 0x50
 80097fa:	443b      	add	r3, r7
 80097fc:	3b3c      	subs	r3, #60	@ 0x3c
 80097fe:	ed93 7a00 	vldr	s14, [r3]
 8009802:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8009804:	ee07 3a90 	vmov	s15, r3
 8009808:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800980c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8009810:	eeb0 0a66 	vmov.f32	s0, s13
 8009814:	f004 fc3c 	bl	800e090 <logf>
 8009818:	eef0 7a40 	vmov.f32	s15, s0
 800981c:	eef0 0a08 	vmov.f32	s1, #8	@ 0x40400000  3.0
 8009820:	eeb0 0a67 	vmov.f32	s0, s15
 8009824:	f004 fc62 	bl	800e0ec <powf>
 8009828:	eeb0 7a40 	vmov.f32	s14, s0
 800982c:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8009830:	ee67 7a27 	vmul.f32	s15, s14, s15
									   C*powf(logf(thermistorResistance[i]/R25), 2) +
 8009834:	ee78 7a27 	vadd.f32	s15, s16, s15
		*(boardTemperatures + i) = (1/(A +
 8009838:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800983c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8009840:	ee16 0a90 	vmov	r0, s13
 8009844:	f7f6 fe44 	bl	80004d0 <__aeabi_f2d>
									   D*powf(logf(thermistorResistance[i]/R25), 3))) - 273.15;
 8009848:	a311      	add	r3, pc, #68	@ (adr r3, 8009890 <board_temperature_sense+0x1b8>)
 800984a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800984e:	f7f6 fcdf 	bl	8000210 <__aeabi_dsub>
 8009852:	4602      	mov	r2, r0
 8009854:	460b      	mov	r3, r1
 8009856:	4610      	mov	r0, r2
 8009858:	4619      	mov	r1, r3
		*(boardTemperatures + i) = (1/(A +
 800985a:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 800985e:	009b      	lsls	r3, r3, #2
 8009860:	687a      	ldr	r2, [r7, #4]
 8009862:	18d4      	adds	r4, r2, r3
									   D*powf(logf(thermistorResistance[i]/R25), 3))) - 273.15;
 8009864:	f7f7 f89e 	bl	80009a4 <__aeabi_d2f>
 8009868:	4603      	mov	r3, r0
		*(boardTemperatures + i) = (1/(A +
 800986a:	6023      	str	r3, [r4, #0]
	for(uint8_t i = 0; i < 9; i++) {
 800986c:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 8009870:	3301      	adds	r3, #1
 8009872:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
 8009876:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 800987a:	2b08      	cmp	r3, #8
 800987c:	f67f af79 	bls.w	8009772 <board_temperature_sense+0x9a>
	}
}
 8009880:	bf00      	nop
 8009882:	bf00      	nop
 8009884:	3754      	adds	r7, #84	@ 0x54
 8009886:	46bd      	mov	sp, r7
 8009888:	ecbd 8b02 	vpop	{d8}
 800988c:	bd90      	pop	{r4, r7, pc}
 800988e:	bf00      	nop
 8009890:	66666666 	.word	0x66666666
 8009894:	40711266 	.word	0x40711266
 8009898:	3b5bcf0d 	.word	0x3b5bcf0d
 800989c:	3986bbf1 	.word	0x3986bbf1
 80098a0:	362fd582 	.word	0x362fd582
 80098a4:	3389136a 	.word	0x3389136a

080098a8 <read_thermistors>:


void read_thermistors(float *thermistorArray_ptr)
{
 80098a8:	b590      	push	{r4, r7, lr}
 80098aa:	b0a3      	sub	sp, #140	@ 0x8c
 80098ac:	af00      	add	r7, sp, #0
 80098ae:	6078      	str	r0, [r7, #4]
	uint16_t thermistorRawADC[18];
	float thermistorVoltage[18];
	uint16_t ADCSum;

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
 80098b0:	2200      	movs	r2, #0
 80098b2:	2108      	movs	r1, #8
 80098b4:	48c4      	ldr	r0, [pc, #784]	@ (8009bc8 <read_thermistors+0x320>)
 80098b6:	f002 fd25 	bl	800c304 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
 80098ba:	2200      	movs	r2, #0
 80098bc:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80098c0:	48c2      	ldr	r0, [pc, #776]	@ (8009bcc <read_thermistors+0x324>)
 80098c2:	f002 fd1f 	bl	800c304 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 80098c6:	2200      	movs	r2, #0
 80098c8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80098cc:	48c0      	ldr	r0, [pc, #768]	@ (8009bd0 <read_thermistors+0x328>)
 80098ce:	f002 fd19 	bl	800c304 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 80098d2:	2200      	movs	r2, #0
 80098d4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80098d8:	48bd      	ldr	r0, [pc, #756]	@ (8009bd0 <read_thermistors+0x328>)
 80098da:	f002 fd13 	bl	800c304 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80098de:	2001      	movs	r0, #1
 80098e0:	f000 ffc2 	bl	800a868 <HAL_Delay>
	ADCSum = 0;
 80098e4:	2300      	movs	r3, #0
 80098e6:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
	for (uint8_t i = 0; i < FILTER_LEN; i++) {
 80098ea:	2300      	movs	r3, #0
 80098ec:	f887 3085 	strb.w	r3, [r7, #133]	@ 0x85
 80098f0:	e019      	b.n	8009926 <read_thermistors+0x7e>
		HAL_ADC_Start(&hadc1);
 80098f2:	48b8      	ldr	r0, [pc, #736]	@ (8009bd4 <read_thermistors+0x32c>)
 80098f4:	f001 f820 	bl	800a938 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 80098f8:	f04f 31ff 	mov.w	r1, #4294967295
 80098fc:	48b5      	ldr	r0, [pc, #724]	@ (8009bd4 <read_thermistors+0x32c>)
 80098fe:	f001 f920 	bl	800ab42 <HAL_ADC_PollForConversion>
		ADCSum += HAL_ADC_GetValue(&hadc1);
 8009902:	48b4      	ldr	r0, [pc, #720]	@ (8009bd4 <read_thermistors+0x32c>)
 8009904:	f001 f9a8 	bl	800ac58 <HAL_ADC_GetValue>
 8009908:	4603      	mov	r3, r0
 800990a:	b29a      	uxth	r2, r3
 800990c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8009910:	4413      	add	r3, r2
 8009912:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
		HAL_ADC_Stop(&hadc1);
 8009916:	48af      	ldr	r0, [pc, #700]	@ (8009bd4 <read_thermistors+0x32c>)
 8009918:	f001 f8e0 	bl	800aadc <HAL_ADC_Stop>
	for (uint8_t i = 0; i < FILTER_LEN; i++) {
 800991c:	f897 3085 	ldrb.w	r3, [r7, #133]	@ 0x85
 8009920:	3301      	adds	r3, #1
 8009922:	f887 3085 	strb.w	r3, [r7, #133]	@ 0x85
 8009926:	f897 3085 	ldrb.w	r3, [r7, #133]	@ 0x85
 800992a:	2b09      	cmp	r3, #9
 800992c:	d9e1      	bls.n	80098f2 <read_thermistors+0x4a>
	}
	thermistorRawADC[0] = ADCSum / FILTER_LEN;
 800992e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8009932:	4aa9      	ldr	r2, [pc, #676]	@ (8009bd8 <read_thermistors+0x330>)
 8009934:	fba2 2303 	umull	r2, r3, r2, r3
 8009938:	08db      	lsrs	r3, r3, #3
 800993a:	b29b      	uxth	r3, r3
 800993c:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_SET);
 8009940:	2201      	movs	r2, #1
 8009942:	2108      	movs	r1, #8
 8009944:	48a0      	ldr	r0, [pc, #640]	@ (8009bc8 <read_thermistors+0x320>)
 8009946:	f002 fcdd 	bl	800c304 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
 800994a:	2200      	movs	r2, #0
 800994c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8009950:	489e      	ldr	r0, [pc, #632]	@ (8009bcc <read_thermistors+0x324>)
 8009952:	f002 fcd7 	bl	800c304 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 8009956:	2200      	movs	r2, #0
 8009958:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800995c:	489c      	ldr	r0, [pc, #624]	@ (8009bd0 <read_thermistors+0x328>)
 800995e:	f002 fcd1 	bl	800c304 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 8009962:	2200      	movs	r2, #0
 8009964:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8009968:	4899      	ldr	r0, [pc, #612]	@ (8009bd0 <read_thermistors+0x328>)
 800996a:	f002 fccb 	bl	800c304 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 800996e:	2001      	movs	r0, #1
 8009970:	f000 ff7a 	bl	800a868 <HAL_Delay>
	ADCSum = 0;
 8009974:	2300      	movs	r3, #0
 8009976:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
	for (uint8_t i = 0; i < FILTER_LEN; i++) {
 800997a:	2300      	movs	r3, #0
 800997c:	f887 3084 	strb.w	r3, [r7, #132]	@ 0x84
 8009980:	e019      	b.n	80099b6 <read_thermistors+0x10e>
		HAL_ADC_Start(&hadc1);
 8009982:	4894      	ldr	r0, [pc, #592]	@ (8009bd4 <read_thermistors+0x32c>)
 8009984:	f000 ffd8 	bl	800a938 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8009988:	f04f 31ff 	mov.w	r1, #4294967295
 800998c:	4891      	ldr	r0, [pc, #580]	@ (8009bd4 <read_thermistors+0x32c>)
 800998e:	f001 f8d8 	bl	800ab42 <HAL_ADC_PollForConversion>
		ADCSum += HAL_ADC_GetValue(&hadc1);
 8009992:	4890      	ldr	r0, [pc, #576]	@ (8009bd4 <read_thermistors+0x32c>)
 8009994:	f001 f960 	bl	800ac58 <HAL_ADC_GetValue>
 8009998:	4603      	mov	r3, r0
 800999a:	b29a      	uxth	r2, r3
 800999c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80099a0:	4413      	add	r3, r2
 80099a2:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
		HAL_ADC_Stop(&hadc1);
 80099a6:	488b      	ldr	r0, [pc, #556]	@ (8009bd4 <read_thermistors+0x32c>)
 80099a8:	f001 f898 	bl	800aadc <HAL_ADC_Stop>
	for (uint8_t i = 0; i < FILTER_LEN; i++) {
 80099ac:	f897 3084 	ldrb.w	r3, [r7, #132]	@ 0x84
 80099b0:	3301      	adds	r3, #1
 80099b2:	f887 3084 	strb.w	r3, [r7, #132]	@ 0x84
 80099b6:	f897 3084 	ldrb.w	r3, [r7, #132]	@ 0x84
 80099ba:	2b09      	cmp	r3, #9
 80099bc:	d9e1      	bls.n	8009982 <read_thermistors+0xda>
	}
	thermistorRawADC[1] = ADCSum / FILTER_LEN;
 80099be:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80099c2:	4a85      	ldr	r2, [pc, #532]	@ (8009bd8 <read_thermistors+0x330>)
 80099c4:	fba2 2303 	umull	r2, r3, r2, r3
 80099c8:	08db      	lsrs	r3, r3, #3
 80099ca:	b29b      	uxth	r3, r3
 80099cc:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
 80099d0:	2200      	movs	r2, #0
 80099d2:	2108      	movs	r1, #8
 80099d4:	487c      	ldr	r0, [pc, #496]	@ (8009bc8 <read_thermistors+0x320>)
 80099d6:	f002 fc95 	bl	800c304 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_SET);
 80099da:	2201      	movs	r2, #1
 80099dc:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80099e0:	487a      	ldr	r0, [pc, #488]	@ (8009bcc <read_thermistors+0x324>)
 80099e2:	f002 fc8f 	bl	800c304 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 80099e6:	2200      	movs	r2, #0
 80099e8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80099ec:	4878      	ldr	r0, [pc, #480]	@ (8009bd0 <read_thermistors+0x328>)
 80099ee:	f002 fc89 	bl	800c304 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 80099f2:	2200      	movs	r2, #0
 80099f4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80099f8:	4875      	ldr	r0, [pc, #468]	@ (8009bd0 <read_thermistors+0x328>)
 80099fa:	f002 fc83 	bl	800c304 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80099fe:	2001      	movs	r0, #1
 8009a00:	f000 ff32 	bl	800a868 <HAL_Delay>
	ADCSum = 0;
 8009a04:	2300      	movs	r3, #0
 8009a06:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
	for (uint8_t i = 0; i < FILTER_LEN; i++) {
 8009a0a:	2300      	movs	r3, #0
 8009a0c:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
 8009a10:	e019      	b.n	8009a46 <read_thermistors+0x19e>
		HAL_ADC_Start(&hadc1);
 8009a12:	4870      	ldr	r0, [pc, #448]	@ (8009bd4 <read_thermistors+0x32c>)
 8009a14:	f000 ff90 	bl	800a938 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8009a18:	f04f 31ff 	mov.w	r1, #4294967295
 8009a1c:	486d      	ldr	r0, [pc, #436]	@ (8009bd4 <read_thermistors+0x32c>)
 8009a1e:	f001 f890 	bl	800ab42 <HAL_ADC_PollForConversion>
		ADCSum += HAL_ADC_GetValue(&hadc1);
 8009a22:	486c      	ldr	r0, [pc, #432]	@ (8009bd4 <read_thermistors+0x32c>)
 8009a24:	f001 f918 	bl	800ac58 <HAL_ADC_GetValue>
 8009a28:	4603      	mov	r3, r0
 8009a2a:	b29a      	uxth	r2, r3
 8009a2c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8009a30:	4413      	add	r3, r2
 8009a32:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
		HAL_ADC_Stop(&hadc1);
 8009a36:	4867      	ldr	r0, [pc, #412]	@ (8009bd4 <read_thermistors+0x32c>)
 8009a38:	f001 f850 	bl	800aadc <HAL_ADC_Stop>
	for (uint8_t i = 0; i < FILTER_LEN; i++) {
 8009a3c:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 8009a40:	3301      	adds	r3, #1
 8009a42:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
 8009a46:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 8009a4a:	2b09      	cmp	r3, #9
 8009a4c:	d9e1      	bls.n	8009a12 <read_thermistors+0x16a>
	}
	thermistorRawADC[2] = ADCSum / FILTER_LEN;
 8009a4e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8009a52:	4a61      	ldr	r2, [pc, #388]	@ (8009bd8 <read_thermistors+0x330>)
 8009a54:	fba2 2303 	umull	r2, r3, r2, r3
 8009a58:	08db      	lsrs	r3, r3, #3
 8009a5a:	b29b      	uxth	r3, r3
 8009a5c:	f8a7 3054 	strh.w	r3, [r7, #84]	@ 0x54

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_SET);
 8009a60:	2201      	movs	r2, #1
 8009a62:	2108      	movs	r1, #8
 8009a64:	4858      	ldr	r0, [pc, #352]	@ (8009bc8 <read_thermistors+0x320>)
 8009a66:	f002 fc4d 	bl	800c304 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_SET);
 8009a6a:	2201      	movs	r2, #1
 8009a6c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8009a70:	4856      	ldr	r0, [pc, #344]	@ (8009bcc <read_thermistors+0x324>)
 8009a72:	f002 fc47 	bl	800c304 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 8009a76:	2200      	movs	r2, #0
 8009a78:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8009a7c:	4854      	ldr	r0, [pc, #336]	@ (8009bd0 <read_thermistors+0x328>)
 8009a7e:	f002 fc41 	bl	800c304 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 8009a82:	2200      	movs	r2, #0
 8009a84:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8009a88:	4851      	ldr	r0, [pc, #324]	@ (8009bd0 <read_thermistors+0x328>)
 8009a8a:	f002 fc3b 	bl	800c304 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8009a8e:	2001      	movs	r0, #1
 8009a90:	f000 feea 	bl	800a868 <HAL_Delay>
	ADCSum = 0;
 8009a94:	2300      	movs	r3, #0
 8009a96:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
	for (uint8_t i = 0; i < FILTER_LEN; i++) {
 8009a9a:	2300      	movs	r3, #0
 8009a9c:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
 8009aa0:	e019      	b.n	8009ad6 <read_thermistors+0x22e>
		HAL_ADC_Start(&hadc1);
 8009aa2:	484c      	ldr	r0, [pc, #304]	@ (8009bd4 <read_thermistors+0x32c>)
 8009aa4:	f000 ff48 	bl	800a938 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8009aa8:	f04f 31ff 	mov.w	r1, #4294967295
 8009aac:	4849      	ldr	r0, [pc, #292]	@ (8009bd4 <read_thermistors+0x32c>)
 8009aae:	f001 f848 	bl	800ab42 <HAL_ADC_PollForConversion>
		ADCSum += HAL_ADC_GetValue(&hadc1);
 8009ab2:	4848      	ldr	r0, [pc, #288]	@ (8009bd4 <read_thermistors+0x32c>)
 8009ab4:	f001 f8d0 	bl	800ac58 <HAL_ADC_GetValue>
 8009ab8:	4603      	mov	r3, r0
 8009aba:	b29a      	uxth	r2, r3
 8009abc:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8009ac0:	4413      	add	r3, r2
 8009ac2:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
		HAL_ADC_Stop(&hadc1);
 8009ac6:	4843      	ldr	r0, [pc, #268]	@ (8009bd4 <read_thermistors+0x32c>)
 8009ac8:	f001 f808 	bl	800aadc <HAL_ADC_Stop>
	for (uint8_t i = 0; i < FILTER_LEN; i++) {
 8009acc:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
 8009ad0:	3301      	adds	r3, #1
 8009ad2:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
 8009ad6:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
 8009ada:	2b09      	cmp	r3, #9
 8009adc:	d9e1      	bls.n	8009aa2 <read_thermistors+0x1fa>
	}
	thermistorRawADC[3] = ADCSum / FILTER_LEN;
 8009ade:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8009ae2:	4a3d      	ldr	r2, [pc, #244]	@ (8009bd8 <read_thermistors+0x330>)
 8009ae4:	fba2 2303 	umull	r2, r3, r2, r3
 8009ae8:	08db      	lsrs	r3, r3, #3
 8009aea:	b29b      	uxth	r3, r3
 8009aec:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
 8009af0:	2200      	movs	r2, #0
 8009af2:	2108      	movs	r1, #8
 8009af4:	4834      	ldr	r0, [pc, #208]	@ (8009bc8 <read_thermistors+0x320>)
 8009af6:	f002 fc05 	bl	800c304 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
 8009afa:	2200      	movs	r2, #0
 8009afc:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8009b00:	4832      	ldr	r0, [pc, #200]	@ (8009bcc <read_thermistors+0x324>)
 8009b02:	f002 fbff 	bl	800c304 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 8009b06:	2201      	movs	r2, #1
 8009b08:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8009b0c:	4830      	ldr	r0, [pc, #192]	@ (8009bd0 <read_thermistors+0x328>)
 8009b0e:	f002 fbf9 	bl	800c304 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 8009b12:	2200      	movs	r2, #0
 8009b14:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8009b18:	482d      	ldr	r0, [pc, #180]	@ (8009bd0 <read_thermistors+0x328>)
 8009b1a:	f002 fbf3 	bl	800c304 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8009b1e:	2001      	movs	r0, #1
 8009b20:	f000 fea2 	bl	800a868 <HAL_Delay>
	ADCSum = 0;
 8009b24:	2300      	movs	r3, #0
 8009b26:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
	for (uint8_t i = 0; i <= 10; i++) {
 8009b2a:	2300      	movs	r3, #0
 8009b2c:	f887 3081 	strb.w	r3, [r7, #129]	@ 0x81
 8009b30:	e019      	b.n	8009b66 <read_thermistors+0x2be>
		HAL_ADC_Start(&hadc1);
 8009b32:	4828      	ldr	r0, [pc, #160]	@ (8009bd4 <read_thermistors+0x32c>)
 8009b34:	f000 ff00 	bl	800a938 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8009b38:	f04f 31ff 	mov.w	r1, #4294967295
 8009b3c:	4825      	ldr	r0, [pc, #148]	@ (8009bd4 <read_thermistors+0x32c>)
 8009b3e:	f001 f800 	bl	800ab42 <HAL_ADC_PollForConversion>
		ADCSum += HAL_ADC_GetValue(&hadc1);
 8009b42:	4824      	ldr	r0, [pc, #144]	@ (8009bd4 <read_thermistors+0x32c>)
 8009b44:	f001 f888 	bl	800ac58 <HAL_ADC_GetValue>
 8009b48:	4603      	mov	r3, r0
 8009b4a:	b29a      	uxth	r2, r3
 8009b4c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8009b50:	4413      	add	r3, r2
 8009b52:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
		HAL_ADC_Stop(&hadc1);
 8009b56:	481f      	ldr	r0, [pc, #124]	@ (8009bd4 <read_thermistors+0x32c>)
 8009b58:	f000 ffc0 	bl	800aadc <HAL_ADC_Stop>
	for (uint8_t i = 0; i <= 10; i++) {
 8009b5c:	f897 3081 	ldrb.w	r3, [r7, #129]	@ 0x81
 8009b60:	3301      	adds	r3, #1
 8009b62:	f887 3081 	strb.w	r3, [r7, #129]	@ 0x81
 8009b66:	f897 3081 	ldrb.w	r3, [r7, #129]	@ 0x81
 8009b6a:	2b0a      	cmp	r3, #10
 8009b6c:	d9e1      	bls.n	8009b32 <read_thermistors+0x28a>
	}
	thermistorRawADC[4] = (ADCSum / FILTER_LEN) - 200;
 8009b6e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8009b72:	4a19      	ldr	r2, [pc, #100]	@ (8009bd8 <read_thermistors+0x330>)
 8009b74:	fba2 2303 	umull	r2, r3, r2, r3
 8009b78:	08db      	lsrs	r3, r3, #3
 8009b7a:	b29b      	uxth	r3, r3
 8009b7c:	3bc8      	subs	r3, #200	@ 0xc8
 8009b7e:	b29b      	uxth	r3, r3
 8009b80:	f8a7 3058 	strh.w	r3, [r7, #88]	@ 0x58

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_SET);
 8009b84:	2201      	movs	r2, #1
 8009b86:	2108      	movs	r1, #8
 8009b88:	480f      	ldr	r0, [pc, #60]	@ (8009bc8 <read_thermistors+0x320>)
 8009b8a:	f002 fbbb 	bl	800c304 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
 8009b8e:	2200      	movs	r2, #0
 8009b90:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8009b94:	480d      	ldr	r0, [pc, #52]	@ (8009bcc <read_thermistors+0x324>)
 8009b96:	f002 fbb5 	bl	800c304 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 8009b9a:	2201      	movs	r2, #1
 8009b9c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8009ba0:	480b      	ldr	r0, [pc, #44]	@ (8009bd0 <read_thermistors+0x328>)
 8009ba2:	f002 fbaf 	bl	800c304 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 8009ba6:	2200      	movs	r2, #0
 8009ba8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8009bac:	4808      	ldr	r0, [pc, #32]	@ (8009bd0 <read_thermistors+0x328>)
 8009bae:	f002 fba9 	bl	800c304 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8009bb2:	2001      	movs	r0, #1
 8009bb4:	f000 fe58 	bl	800a868 <HAL_Delay>
	ADCSum = 0;
 8009bb8:	2300      	movs	r3, #0
 8009bba:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
	for (uint8_t i = 0; i < FILTER_LEN; i++) {
 8009bbe:	2300      	movs	r3, #0
 8009bc0:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
 8009bc4:	e024      	b.n	8009c10 <read_thermistors+0x368>
 8009bc6:	bf00      	nop
 8009bc8:	40020000 	.word	0x40020000
 8009bcc:	40020800 	.word	0x40020800
 8009bd0:	40020400 	.word	0x40020400
 8009bd4:	2000007c 	.word	0x2000007c
 8009bd8:	cccccccd 	.word	0xcccccccd
		HAL_ADC_Start(&hadc1);
 8009bdc:	48b4      	ldr	r0, [pc, #720]	@ (8009eb0 <read_thermistors+0x608>)
 8009bde:	f000 feab 	bl	800a938 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8009be2:	f04f 31ff 	mov.w	r1, #4294967295
 8009be6:	48b2      	ldr	r0, [pc, #712]	@ (8009eb0 <read_thermistors+0x608>)
 8009be8:	f000 ffab 	bl	800ab42 <HAL_ADC_PollForConversion>
		ADCSum += HAL_ADC_GetValue(&hadc1);
 8009bec:	48b0      	ldr	r0, [pc, #704]	@ (8009eb0 <read_thermistors+0x608>)
 8009bee:	f001 f833 	bl	800ac58 <HAL_ADC_GetValue>
 8009bf2:	4603      	mov	r3, r0
 8009bf4:	b29a      	uxth	r2, r3
 8009bf6:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8009bfa:	4413      	add	r3, r2
 8009bfc:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
		HAL_ADC_Stop(&hadc1);
 8009c00:	48ab      	ldr	r0, [pc, #684]	@ (8009eb0 <read_thermistors+0x608>)
 8009c02:	f000 ff6b 	bl	800aadc <HAL_ADC_Stop>
	for (uint8_t i = 0; i < FILTER_LEN; i++) {
 8009c06:	f897 3080 	ldrb.w	r3, [r7, #128]	@ 0x80
 8009c0a:	3301      	adds	r3, #1
 8009c0c:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
 8009c10:	f897 3080 	ldrb.w	r3, [r7, #128]	@ 0x80
 8009c14:	2b09      	cmp	r3, #9
 8009c16:	d9e1      	bls.n	8009bdc <read_thermistors+0x334>
	}
	thermistorRawADC[5] = ADCSum / FILTER_LEN;
 8009c18:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8009c1c:	4aa5      	ldr	r2, [pc, #660]	@ (8009eb4 <read_thermistors+0x60c>)
 8009c1e:	fba2 2303 	umull	r2, r3, r2, r3
 8009c22:	08db      	lsrs	r3, r3, #3
 8009c24:	b29b      	uxth	r3, r3
 8009c26:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
 8009c2a:	2200      	movs	r2, #0
 8009c2c:	2108      	movs	r1, #8
 8009c2e:	48a2      	ldr	r0, [pc, #648]	@ (8009eb8 <read_thermistors+0x610>)
 8009c30:	f002 fb68 	bl	800c304 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_SET);
 8009c34:	2201      	movs	r2, #1
 8009c36:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8009c3a:	48a0      	ldr	r0, [pc, #640]	@ (8009ebc <read_thermistors+0x614>)
 8009c3c:	f002 fb62 	bl	800c304 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 8009c40:	2201      	movs	r2, #1
 8009c42:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8009c46:	489e      	ldr	r0, [pc, #632]	@ (8009ec0 <read_thermistors+0x618>)
 8009c48:	f002 fb5c 	bl	800c304 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 8009c4c:	2200      	movs	r2, #0
 8009c4e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8009c52:	489b      	ldr	r0, [pc, #620]	@ (8009ec0 <read_thermistors+0x618>)
 8009c54:	f002 fb56 	bl	800c304 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8009c58:	2001      	movs	r0, #1
 8009c5a:	f000 fe05 	bl	800a868 <HAL_Delay>
	ADCSum = 0;
 8009c5e:	2300      	movs	r3, #0
 8009c60:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
	for (uint8_t i = 0; i <= 10; i++) {
 8009c64:	2300      	movs	r3, #0
 8009c66:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8009c6a:	e019      	b.n	8009ca0 <read_thermistors+0x3f8>
		HAL_ADC_Start(&hadc1);
 8009c6c:	4890      	ldr	r0, [pc, #576]	@ (8009eb0 <read_thermistors+0x608>)
 8009c6e:	f000 fe63 	bl	800a938 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8009c72:	f04f 31ff 	mov.w	r1, #4294967295
 8009c76:	488e      	ldr	r0, [pc, #568]	@ (8009eb0 <read_thermistors+0x608>)
 8009c78:	f000 ff63 	bl	800ab42 <HAL_ADC_PollForConversion>
		ADCSum += HAL_ADC_GetValue(&hadc1);
 8009c7c:	488c      	ldr	r0, [pc, #560]	@ (8009eb0 <read_thermistors+0x608>)
 8009c7e:	f000 ffeb 	bl	800ac58 <HAL_ADC_GetValue>
 8009c82:	4603      	mov	r3, r0
 8009c84:	b29a      	uxth	r2, r3
 8009c86:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8009c8a:	4413      	add	r3, r2
 8009c8c:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
		HAL_ADC_Stop(&hadc1);
 8009c90:	4887      	ldr	r0, [pc, #540]	@ (8009eb0 <read_thermistors+0x608>)
 8009c92:	f000 ff23 	bl	800aadc <HAL_ADC_Stop>
	for (uint8_t i = 0; i <= 10; i++) {
 8009c96:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8009c9a:	3301      	adds	r3, #1
 8009c9c:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8009ca0:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8009ca4:	2b0a      	cmp	r3, #10
 8009ca6:	d9e1      	bls.n	8009c6c <read_thermistors+0x3c4>
	}
	thermistorRawADC[6] = (ADCSum / FILTER_LEN) - 200;
 8009ca8:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8009cac:	4a81      	ldr	r2, [pc, #516]	@ (8009eb4 <read_thermistors+0x60c>)
 8009cae:	fba2 2303 	umull	r2, r3, r2, r3
 8009cb2:	08db      	lsrs	r3, r3, #3
 8009cb4:	b29b      	uxth	r3, r3
 8009cb6:	3bc8      	subs	r3, #200	@ 0xc8
 8009cb8:	b29b      	uxth	r3, r3
 8009cba:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_SET);
 8009cbe:	2201      	movs	r2, #1
 8009cc0:	2108      	movs	r1, #8
 8009cc2:	487d      	ldr	r0, [pc, #500]	@ (8009eb8 <read_thermistors+0x610>)
 8009cc4:	f002 fb1e 	bl	800c304 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_SET);
 8009cc8:	2201      	movs	r2, #1
 8009cca:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8009cce:	487b      	ldr	r0, [pc, #492]	@ (8009ebc <read_thermistors+0x614>)
 8009cd0:	f002 fb18 	bl	800c304 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 8009cd4:	2201      	movs	r2, #1
 8009cd6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8009cda:	4879      	ldr	r0, [pc, #484]	@ (8009ec0 <read_thermistors+0x618>)
 8009cdc:	f002 fb12 	bl	800c304 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 8009ce0:	2200      	movs	r2, #0
 8009ce2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8009ce6:	4876      	ldr	r0, [pc, #472]	@ (8009ec0 <read_thermistors+0x618>)
 8009ce8:	f002 fb0c 	bl	800c304 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8009cec:	2001      	movs	r0, #1
 8009cee:	f000 fdbb 	bl	800a868 <HAL_Delay>
	ADCSum = 0;
 8009cf2:	2300      	movs	r3, #0
 8009cf4:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
	for (uint8_t i = 0; i < FILTER_LEN; i++) {
 8009cf8:	2300      	movs	r3, #0
 8009cfa:	f887 307e 	strb.w	r3, [r7, #126]	@ 0x7e
 8009cfe:	e019      	b.n	8009d34 <read_thermistors+0x48c>
		HAL_ADC_Start(&hadc1);
 8009d00:	486b      	ldr	r0, [pc, #428]	@ (8009eb0 <read_thermistors+0x608>)
 8009d02:	f000 fe19 	bl	800a938 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8009d06:	f04f 31ff 	mov.w	r1, #4294967295
 8009d0a:	4869      	ldr	r0, [pc, #420]	@ (8009eb0 <read_thermistors+0x608>)
 8009d0c:	f000 ff19 	bl	800ab42 <HAL_ADC_PollForConversion>
		ADCSum += HAL_ADC_GetValue(&hadc1);
 8009d10:	4867      	ldr	r0, [pc, #412]	@ (8009eb0 <read_thermistors+0x608>)
 8009d12:	f000 ffa1 	bl	800ac58 <HAL_ADC_GetValue>
 8009d16:	4603      	mov	r3, r0
 8009d18:	b29a      	uxth	r2, r3
 8009d1a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8009d1e:	4413      	add	r3, r2
 8009d20:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
		HAL_ADC_Stop(&hadc1);
 8009d24:	4862      	ldr	r0, [pc, #392]	@ (8009eb0 <read_thermistors+0x608>)
 8009d26:	f000 fed9 	bl	800aadc <HAL_ADC_Stop>
	for (uint8_t i = 0; i < FILTER_LEN; i++) {
 8009d2a:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 8009d2e:	3301      	adds	r3, #1
 8009d30:	f887 307e 	strb.w	r3, [r7, #126]	@ 0x7e
 8009d34:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 8009d38:	2b09      	cmp	r3, #9
 8009d3a:	d9e1      	bls.n	8009d00 <read_thermistors+0x458>
	}
	thermistorRawADC[7] = ADCSum / FILTER_LEN;
 8009d3c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8009d40:	4a5c      	ldr	r2, [pc, #368]	@ (8009eb4 <read_thermistors+0x60c>)
 8009d42:	fba2 2303 	umull	r2, r3, r2, r3
 8009d46:	08db      	lsrs	r3, r3, #3
 8009d48:	b29b      	uxth	r3, r3
 8009d4a:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
 8009d4e:	2200      	movs	r2, #0
 8009d50:	2108      	movs	r1, #8
 8009d52:	4859      	ldr	r0, [pc, #356]	@ (8009eb8 <read_thermistors+0x610>)
 8009d54:	f002 fad6 	bl	800c304 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
 8009d58:	2200      	movs	r2, #0
 8009d5a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8009d5e:	4857      	ldr	r0, [pc, #348]	@ (8009ebc <read_thermistors+0x614>)
 8009d60:	f002 fad0 	bl	800c304 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 8009d64:	2200      	movs	r2, #0
 8009d66:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8009d6a:	4855      	ldr	r0, [pc, #340]	@ (8009ec0 <read_thermistors+0x618>)
 8009d6c:	f002 faca 	bl	800c304 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 8009d70:	2201      	movs	r2, #1
 8009d72:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8009d76:	4852      	ldr	r0, [pc, #328]	@ (8009ec0 <read_thermistors+0x618>)
 8009d78:	f002 fac4 	bl	800c304 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8009d7c:	2001      	movs	r0, #1
 8009d7e:	f000 fd73 	bl	800a868 <HAL_Delay>
	ADCSum = 0;
 8009d82:	2300      	movs	r3, #0
 8009d84:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
	for (uint8_t i = 0; i < FILTER_LEN; i++) {
 8009d88:	2300      	movs	r3, #0
 8009d8a:	f887 307d 	strb.w	r3, [r7, #125]	@ 0x7d
 8009d8e:	e019      	b.n	8009dc4 <read_thermistors+0x51c>
		HAL_ADC_Start(&hadc1);
 8009d90:	4847      	ldr	r0, [pc, #284]	@ (8009eb0 <read_thermistors+0x608>)
 8009d92:	f000 fdd1 	bl	800a938 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8009d96:	f04f 31ff 	mov.w	r1, #4294967295
 8009d9a:	4845      	ldr	r0, [pc, #276]	@ (8009eb0 <read_thermistors+0x608>)
 8009d9c:	f000 fed1 	bl	800ab42 <HAL_ADC_PollForConversion>
		ADCSum += HAL_ADC_GetValue(&hadc1);
 8009da0:	4843      	ldr	r0, [pc, #268]	@ (8009eb0 <read_thermistors+0x608>)
 8009da2:	f000 ff59 	bl	800ac58 <HAL_ADC_GetValue>
 8009da6:	4603      	mov	r3, r0
 8009da8:	b29a      	uxth	r2, r3
 8009daa:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8009dae:	4413      	add	r3, r2
 8009db0:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
		HAL_ADC_Stop(&hadc1);
 8009db4:	483e      	ldr	r0, [pc, #248]	@ (8009eb0 <read_thermistors+0x608>)
 8009db6:	f000 fe91 	bl	800aadc <HAL_ADC_Stop>
	for (uint8_t i = 0; i < FILTER_LEN; i++) {
 8009dba:	f897 307d 	ldrb.w	r3, [r7, #125]	@ 0x7d
 8009dbe:	3301      	adds	r3, #1
 8009dc0:	f887 307d 	strb.w	r3, [r7, #125]	@ 0x7d
 8009dc4:	f897 307d 	ldrb.w	r3, [r7, #125]	@ 0x7d
 8009dc8:	2b09      	cmp	r3, #9
 8009dca:	d9e1      	bls.n	8009d90 <read_thermistors+0x4e8>
	}
	thermistorRawADC[8] = ADCSum / FILTER_LEN;
 8009dcc:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8009dd0:	4a38      	ldr	r2, [pc, #224]	@ (8009eb4 <read_thermistors+0x60c>)
 8009dd2:	fba2 2303 	umull	r2, r3, r2, r3
 8009dd6:	08db      	lsrs	r3, r3, #3
 8009dd8:	b29b      	uxth	r3, r3
 8009dda:	f8a7 3060 	strh.w	r3, [r7, #96]	@ 0x60

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_SET);
 8009dde:	2201      	movs	r2, #1
 8009de0:	2108      	movs	r1, #8
 8009de2:	4835      	ldr	r0, [pc, #212]	@ (8009eb8 <read_thermistors+0x610>)
 8009de4:	f002 fa8e 	bl	800c304 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
 8009de8:	2200      	movs	r2, #0
 8009dea:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8009dee:	4833      	ldr	r0, [pc, #204]	@ (8009ebc <read_thermistors+0x614>)
 8009df0:	f002 fa88 	bl	800c304 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 8009df4:	2200      	movs	r2, #0
 8009df6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8009dfa:	4831      	ldr	r0, [pc, #196]	@ (8009ec0 <read_thermistors+0x618>)
 8009dfc:	f002 fa82 	bl	800c304 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 8009e00:	2201      	movs	r2, #1
 8009e02:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8009e06:	482e      	ldr	r0, [pc, #184]	@ (8009ec0 <read_thermistors+0x618>)
 8009e08:	f002 fa7c 	bl	800c304 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8009e0c:	2001      	movs	r0, #1
 8009e0e:	f000 fd2b 	bl	800a868 <HAL_Delay>
	ADCSum = 0;
 8009e12:	2300      	movs	r3, #0
 8009e14:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
	for (uint8_t i = 0; i < FILTER_LEN; i++) {
 8009e18:	2300      	movs	r3, #0
 8009e1a:	f887 307c 	strb.w	r3, [r7, #124]	@ 0x7c
 8009e1e:	e019      	b.n	8009e54 <read_thermistors+0x5ac>
		HAL_ADC_Start(&hadc1);
 8009e20:	4823      	ldr	r0, [pc, #140]	@ (8009eb0 <read_thermistors+0x608>)
 8009e22:	f000 fd89 	bl	800a938 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8009e26:	f04f 31ff 	mov.w	r1, #4294967295
 8009e2a:	4821      	ldr	r0, [pc, #132]	@ (8009eb0 <read_thermistors+0x608>)
 8009e2c:	f000 fe89 	bl	800ab42 <HAL_ADC_PollForConversion>
		ADCSum += HAL_ADC_GetValue(&hadc1);
 8009e30:	481f      	ldr	r0, [pc, #124]	@ (8009eb0 <read_thermistors+0x608>)
 8009e32:	f000 ff11 	bl	800ac58 <HAL_ADC_GetValue>
 8009e36:	4603      	mov	r3, r0
 8009e38:	b29a      	uxth	r2, r3
 8009e3a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8009e3e:	4413      	add	r3, r2
 8009e40:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
		HAL_ADC_Stop(&hadc1);
 8009e44:	481a      	ldr	r0, [pc, #104]	@ (8009eb0 <read_thermistors+0x608>)
 8009e46:	f000 fe49 	bl	800aadc <HAL_ADC_Stop>
	for (uint8_t i = 0; i < FILTER_LEN; i++) {
 8009e4a:	f897 307c 	ldrb.w	r3, [r7, #124]	@ 0x7c
 8009e4e:	3301      	adds	r3, #1
 8009e50:	f887 307c 	strb.w	r3, [r7, #124]	@ 0x7c
 8009e54:	f897 307c 	ldrb.w	r3, [r7, #124]	@ 0x7c
 8009e58:	2b09      	cmp	r3, #9
 8009e5a:	d9e1      	bls.n	8009e20 <read_thermistors+0x578>
	}
	thermistorRawADC[9] = ADCSum / FILTER_LEN;
 8009e5c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8009e60:	4a14      	ldr	r2, [pc, #80]	@ (8009eb4 <read_thermistors+0x60c>)
 8009e62:	fba2 2303 	umull	r2, r3, r2, r3
 8009e66:	08db      	lsrs	r3, r3, #3
 8009e68:	b29b      	uxth	r3, r3
 8009e6a:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
 8009e6e:	2200      	movs	r2, #0
 8009e70:	2108      	movs	r1, #8
 8009e72:	4811      	ldr	r0, [pc, #68]	@ (8009eb8 <read_thermistors+0x610>)
 8009e74:	f002 fa46 	bl	800c304 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_SET);
 8009e78:	2201      	movs	r2, #1
 8009e7a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8009e7e:	480f      	ldr	r0, [pc, #60]	@ (8009ebc <read_thermistors+0x614>)
 8009e80:	f002 fa40 	bl	800c304 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 8009e84:	2200      	movs	r2, #0
 8009e86:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8009e8a:	480d      	ldr	r0, [pc, #52]	@ (8009ec0 <read_thermistors+0x618>)
 8009e8c:	f002 fa3a 	bl	800c304 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 8009e90:	2201      	movs	r2, #1
 8009e92:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8009e96:	480a      	ldr	r0, [pc, #40]	@ (8009ec0 <read_thermistors+0x618>)
 8009e98:	f002 fa34 	bl	800c304 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8009e9c:	2001      	movs	r0, #1
 8009e9e:	f000 fce3 	bl	800a868 <HAL_Delay>
	ADCSum = 0;
 8009ea2:	2300      	movs	r3, #0
 8009ea4:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
	for (uint8_t i = 0; i < FILTER_LEN; i++) {
 8009ea8:	2300      	movs	r3, #0
 8009eaa:	f887 307b 	strb.w	r3, [r7, #123]	@ 0x7b
 8009eae:	e023      	b.n	8009ef8 <read_thermistors+0x650>
 8009eb0:	2000007c 	.word	0x2000007c
 8009eb4:	cccccccd 	.word	0xcccccccd
 8009eb8:	40020000 	.word	0x40020000
 8009ebc:	40020800 	.word	0x40020800
 8009ec0:	40020400 	.word	0x40020400
		HAL_ADC_Start(&hadc1);
 8009ec4:	48d0      	ldr	r0, [pc, #832]	@ (800a208 <read_thermistors+0x960>)
 8009ec6:	f000 fd37 	bl	800a938 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8009eca:	f04f 31ff 	mov.w	r1, #4294967295
 8009ece:	48ce      	ldr	r0, [pc, #824]	@ (800a208 <read_thermistors+0x960>)
 8009ed0:	f000 fe37 	bl	800ab42 <HAL_ADC_PollForConversion>
		ADCSum += HAL_ADC_GetValue(&hadc1);
 8009ed4:	48cc      	ldr	r0, [pc, #816]	@ (800a208 <read_thermistors+0x960>)
 8009ed6:	f000 febf 	bl	800ac58 <HAL_ADC_GetValue>
 8009eda:	4603      	mov	r3, r0
 8009edc:	b29a      	uxth	r2, r3
 8009ede:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8009ee2:	4413      	add	r3, r2
 8009ee4:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
		HAL_ADC_Stop(&hadc1);
 8009ee8:	48c7      	ldr	r0, [pc, #796]	@ (800a208 <read_thermistors+0x960>)
 8009eea:	f000 fdf7 	bl	800aadc <HAL_ADC_Stop>
	for (uint8_t i = 0; i < FILTER_LEN; i++) {
 8009eee:	f897 307b 	ldrb.w	r3, [r7, #123]	@ 0x7b
 8009ef2:	3301      	adds	r3, #1
 8009ef4:	f887 307b 	strb.w	r3, [r7, #123]	@ 0x7b
 8009ef8:	f897 307b 	ldrb.w	r3, [r7, #123]	@ 0x7b
 8009efc:	2b09      	cmp	r3, #9
 8009efe:	d9e1      	bls.n	8009ec4 <read_thermistors+0x61c>
	}
	thermistorRawADC[10] = ADCSum / FILTER_LEN;
 8009f00:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8009f04:	4ac1      	ldr	r2, [pc, #772]	@ (800a20c <read_thermistors+0x964>)
 8009f06:	fba2 2303 	umull	r2, r3, r2, r3
 8009f0a:	08db      	lsrs	r3, r3, #3
 8009f0c:	b29b      	uxth	r3, r3
 8009f0e:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_SET);
 8009f12:	2201      	movs	r2, #1
 8009f14:	2108      	movs	r1, #8
 8009f16:	48be      	ldr	r0, [pc, #760]	@ (800a210 <read_thermistors+0x968>)
 8009f18:	f002 f9f4 	bl	800c304 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_SET);
 8009f1c:	2201      	movs	r2, #1
 8009f1e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8009f22:	48bc      	ldr	r0, [pc, #752]	@ (800a214 <read_thermistors+0x96c>)
 8009f24:	f002 f9ee 	bl	800c304 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 8009f28:	2200      	movs	r2, #0
 8009f2a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8009f2e:	48ba      	ldr	r0, [pc, #744]	@ (800a218 <read_thermistors+0x970>)
 8009f30:	f002 f9e8 	bl	800c304 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 8009f34:	2201      	movs	r2, #1
 8009f36:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8009f3a:	48b7      	ldr	r0, [pc, #732]	@ (800a218 <read_thermistors+0x970>)
 8009f3c:	f002 f9e2 	bl	800c304 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8009f40:	2001      	movs	r0, #1
 8009f42:	f000 fc91 	bl	800a868 <HAL_Delay>
	ADCSum = 0;
 8009f46:	2300      	movs	r3, #0
 8009f48:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
	for (uint8_t i = 0; i < FILTER_LEN; i++) {
 8009f4c:	2300      	movs	r3, #0
 8009f4e:	f887 307a 	strb.w	r3, [r7, #122]	@ 0x7a
 8009f52:	e019      	b.n	8009f88 <read_thermistors+0x6e0>
		HAL_ADC_Start(&hadc1);
 8009f54:	48ac      	ldr	r0, [pc, #688]	@ (800a208 <read_thermistors+0x960>)
 8009f56:	f000 fcef 	bl	800a938 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8009f5a:	f04f 31ff 	mov.w	r1, #4294967295
 8009f5e:	48aa      	ldr	r0, [pc, #680]	@ (800a208 <read_thermistors+0x960>)
 8009f60:	f000 fdef 	bl	800ab42 <HAL_ADC_PollForConversion>
		ADCSum += HAL_ADC_GetValue(&hadc1);
 8009f64:	48a8      	ldr	r0, [pc, #672]	@ (800a208 <read_thermistors+0x960>)
 8009f66:	f000 fe77 	bl	800ac58 <HAL_ADC_GetValue>
 8009f6a:	4603      	mov	r3, r0
 8009f6c:	b29a      	uxth	r2, r3
 8009f6e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8009f72:	4413      	add	r3, r2
 8009f74:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
		HAL_ADC_Stop(&hadc1);
 8009f78:	48a3      	ldr	r0, [pc, #652]	@ (800a208 <read_thermistors+0x960>)
 8009f7a:	f000 fdaf 	bl	800aadc <HAL_ADC_Stop>
	for (uint8_t i = 0; i < FILTER_LEN; i++) {
 8009f7e:	f897 307a 	ldrb.w	r3, [r7, #122]	@ 0x7a
 8009f82:	3301      	adds	r3, #1
 8009f84:	f887 307a 	strb.w	r3, [r7, #122]	@ 0x7a
 8009f88:	f897 307a 	ldrb.w	r3, [r7, #122]	@ 0x7a
 8009f8c:	2b09      	cmp	r3, #9
 8009f8e:	d9e1      	bls.n	8009f54 <read_thermistors+0x6ac>
	}
	thermistorRawADC[11] = ADCSum / FILTER_LEN;
 8009f90:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8009f94:	4a9d      	ldr	r2, [pc, #628]	@ (800a20c <read_thermistors+0x964>)
 8009f96:	fba2 2303 	umull	r2, r3, r2, r3
 8009f9a:	08db      	lsrs	r3, r3, #3
 8009f9c:	b29b      	uxth	r3, r3
 8009f9e:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
 8009fa2:	2200      	movs	r2, #0
 8009fa4:	2108      	movs	r1, #8
 8009fa6:	489a      	ldr	r0, [pc, #616]	@ (800a210 <read_thermistors+0x968>)
 8009fa8:	f002 f9ac 	bl	800c304 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
 8009fac:	2200      	movs	r2, #0
 8009fae:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8009fb2:	4898      	ldr	r0, [pc, #608]	@ (800a214 <read_thermistors+0x96c>)
 8009fb4:	f002 f9a6 	bl	800c304 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 8009fb8:	2201      	movs	r2, #1
 8009fba:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8009fbe:	4896      	ldr	r0, [pc, #600]	@ (800a218 <read_thermistors+0x970>)
 8009fc0:	f002 f9a0 	bl	800c304 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 8009fc4:	2201      	movs	r2, #1
 8009fc6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8009fca:	4893      	ldr	r0, [pc, #588]	@ (800a218 <read_thermistors+0x970>)
 8009fcc:	f002 f99a 	bl	800c304 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8009fd0:	2001      	movs	r0, #1
 8009fd2:	f000 fc49 	bl	800a868 <HAL_Delay>
	ADCSum = 0;
 8009fd6:	2300      	movs	r3, #0
 8009fd8:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
	for (uint8_t i = 0; i < FILTER_LEN; i++) {
 8009fdc:	2300      	movs	r3, #0
 8009fde:	f887 3079 	strb.w	r3, [r7, #121]	@ 0x79
 8009fe2:	e019      	b.n	800a018 <read_thermistors+0x770>
		HAL_ADC_Start(&hadc1);
 8009fe4:	4888      	ldr	r0, [pc, #544]	@ (800a208 <read_thermistors+0x960>)
 8009fe6:	f000 fca7 	bl	800a938 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8009fea:	f04f 31ff 	mov.w	r1, #4294967295
 8009fee:	4886      	ldr	r0, [pc, #536]	@ (800a208 <read_thermistors+0x960>)
 8009ff0:	f000 fda7 	bl	800ab42 <HAL_ADC_PollForConversion>
		ADCSum += HAL_ADC_GetValue(&hadc1);
 8009ff4:	4884      	ldr	r0, [pc, #528]	@ (800a208 <read_thermistors+0x960>)
 8009ff6:	f000 fe2f 	bl	800ac58 <HAL_ADC_GetValue>
 8009ffa:	4603      	mov	r3, r0
 8009ffc:	b29a      	uxth	r2, r3
 8009ffe:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800a002:	4413      	add	r3, r2
 800a004:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
		HAL_ADC_Stop(&hadc1);
 800a008:	487f      	ldr	r0, [pc, #508]	@ (800a208 <read_thermistors+0x960>)
 800a00a:	f000 fd67 	bl	800aadc <HAL_ADC_Stop>
	for (uint8_t i = 0; i < FILTER_LEN; i++) {
 800a00e:	f897 3079 	ldrb.w	r3, [r7, #121]	@ 0x79
 800a012:	3301      	adds	r3, #1
 800a014:	f887 3079 	strb.w	r3, [r7, #121]	@ 0x79
 800a018:	f897 3079 	ldrb.w	r3, [r7, #121]	@ 0x79
 800a01c:	2b09      	cmp	r3, #9
 800a01e:	d9e1      	bls.n	8009fe4 <read_thermistors+0x73c>
	}
	thermistorRawADC[12] = ADCSum / FILTER_LEN;
 800a020:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800a024:	4a79      	ldr	r2, [pc, #484]	@ (800a20c <read_thermistors+0x964>)
 800a026:	fba2 2303 	umull	r2, r3, r2, r3
 800a02a:	08db      	lsrs	r3, r3, #3
 800a02c:	b29b      	uxth	r3, r3
 800a02e:	f8a7 3068 	strh.w	r3, [r7, #104]	@ 0x68

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_SET);
 800a032:	2201      	movs	r2, #1
 800a034:	2108      	movs	r1, #8
 800a036:	4876      	ldr	r0, [pc, #472]	@ (800a210 <read_thermistors+0x968>)
 800a038:	f002 f964 	bl	800c304 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
 800a03c:	2200      	movs	r2, #0
 800a03e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800a042:	4874      	ldr	r0, [pc, #464]	@ (800a214 <read_thermistors+0x96c>)
 800a044:	f002 f95e 	bl	800c304 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 800a048:	2201      	movs	r2, #1
 800a04a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800a04e:	4872      	ldr	r0, [pc, #456]	@ (800a218 <read_thermistors+0x970>)
 800a050:	f002 f958 	bl	800c304 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 800a054:	2201      	movs	r2, #1
 800a056:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800a05a:	486f      	ldr	r0, [pc, #444]	@ (800a218 <read_thermistors+0x970>)
 800a05c:	f002 f952 	bl	800c304 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 800a060:	2001      	movs	r0, #1
 800a062:	f000 fc01 	bl	800a868 <HAL_Delay>
	ADCSum = 0;
 800a066:	2300      	movs	r3, #0
 800a068:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
	for (uint8_t i = 0; i < FILTER_LEN; i++) {
 800a06c:	2300      	movs	r3, #0
 800a06e:	f887 3078 	strb.w	r3, [r7, #120]	@ 0x78
 800a072:	e019      	b.n	800a0a8 <read_thermistors+0x800>
		HAL_ADC_Start(&hadc1);
 800a074:	4864      	ldr	r0, [pc, #400]	@ (800a208 <read_thermistors+0x960>)
 800a076:	f000 fc5f 	bl	800a938 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 800a07a:	f04f 31ff 	mov.w	r1, #4294967295
 800a07e:	4862      	ldr	r0, [pc, #392]	@ (800a208 <read_thermistors+0x960>)
 800a080:	f000 fd5f 	bl	800ab42 <HAL_ADC_PollForConversion>
		ADCSum += HAL_ADC_GetValue(&hadc1);
 800a084:	4860      	ldr	r0, [pc, #384]	@ (800a208 <read_thermistors+0x960>)
 800a086:	f000 fde7 	bl	800ac58 <HAL_ADC_GetValue>
 800a08a:	4603      	mov	r3, r0
 800a08c:	b29a      	uxth	r2, r3
 800a08e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800a092:	4413      	add	r3, r2
 800a094:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
		HAL_ADC_Stop(&hadc1);
 800a098:	485b      	ldr	r0, [pc, #364]	@ (800a208 <read_thermistors+0x960>)
 800a09a:	f000 fd1f 	bl	800aadc <HAL_ADC_Stop>
	for (uint8_t i = 0; i < FILTER_LEN; i++) {
 800a09e:	f897 3078 	ldrb.w	r3, [r7, #120]	@ 0x78
 800a0a2:	3301      	adds	r3, #1
 800a0a4:	f887 3078 	strb.w	r3, [r7, #120]	@ 0x78
 800a0a8:	f897 3078 	ldrb.w	r3, [r7, #120]	@ 0x78
 800a0ac:	2b09      	cmp	r3, #9
 800a0ae:	d9e1      	bls.n	800a074 <read_thermistors+0x7cc>
	}
	thermistorRawADC[13] = ADCSum / FILTER_LEN;
 800a0b0:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800a0b4:	4a55      	ldr	r2, [pc, #340]	@ (800a20c <read_thermistors+0x964>)
 800a0b6:	fba2 2303 	umull	r2, r3, r2, r3
 800a0ba:	08db      	lsrs	r3, r3, #3
 800a0bc:	b29b      	uxth	r3, r3
 800a0be:	f8a7 306a 	strh.w	r3, [r7, #106]	@ 0x6a

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
 800a0c2:	2200      	movs	r2, #0
 800a0c4:	2108      	movs	r1, #8
 800a0c6:	4852      	ldr	r0, [pc, #328]	@ (800a210 <read_thermistors+0x968>)
 800a0c8:	f002 f91c 	bl	800c304 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_SET);
 800a0cc:	2201      	movs	r2, #1
 800a0ce:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800a0d2:	4850      	ldr	r0, [pc, #320]	@ (800a214 <read_thermistors+0x96c>)
 800a0d4:	f002 f916 	bl	800c304 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 800a0d8:	2201      	movs	r2, #1
 800a0da:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800a0de:	484e      	ldr	r0, [pc, #312]	@ (800a218 <read_thermistors+0x970>)
 800a0e0:	f002 f910 	bl	800c304 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 800a0e4:	2201      	movs	r2, #1
 800a0e6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800a0ea:	484b      	ldr	r0, [pc, #300]	@ (800a218 <read_thermistors+0x970>)
 800a0ec:	f002 f90a 	bl	800c304 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 800a0f0:	2001      	movs	r0, #1
 800a0f2:	f000 fbb9 	bl	800a868 <HAL_Delay>
	ADCSum = 0;
 800a0f6:	2300      	movs	r3, #0
 800a0f8:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
	for (uint8_t i = 0; i <= 10; i++) {
 800a0fc:	2300      	movs	r3, #0
 800a0fe:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 800a102:	e019      	b.n	800a138 <read_thermistors+0x890>
		HAL_ADC_Start(&hadc1);
 800a104:	4840      	ldr	r0, [pc, #256]	@ (800a208 <read_thermistors+0x960>)
 800a106:	f000 fc17 	bl	800a938 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 800a10a:	f04f 31ff 	mov.w	r1, #4294967295
 800a10e:	483e      	ldr	r0, [pc, #248]	@ (800a208 <read_thermistors+0x960>)
 800a110:	f000 fd17 	bl	800ab42 <HAL_ADC_PollForConversion>
		ADCSum += HAL_ADC_GetValue(&hadc1);
 800a114:	483c      	ldr	r0, [pc, #240]	@ (800a208 <read_thermistors+0x960>)
 800a116:	f000 fd9f 	bl	800ac58 <HAL_ADC_GetValue>
 800a11a:	4603      	mov	r3, r0
 800a11c:	b29a      	uxth	r2, r3
 800a11e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800a122:	4413      	add	r3, r2
 800a124:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
		HAL_ADC_Stop(&hadc1);
 800a128:	4837      	ldr	r0, [pc, #220]	@ (800a208 <read_thermistors+0x960>)
 800a12a:	f000 fcd7 	bl	800aadc <HAL_ADC_Stop>
	for (uint8_t i = 0; i <= 10; i++) {
 800a12e:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800a132:	3301      	adds	r3, #1
 800a134:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 800a138:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800a13c:	2b0a      	cmp	r3, #10
 800a13e:	d9e1      	bls.n	800a104 <read_thermistors+0x85c>
	}
	thermistorRawADC[14] = (ADCSum / FILTER_LEN) - 200;
 800a140:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800a144:	4a31      	ldr	r2, [pc, #196]	@ (800a20c <read_thermistors+0x964>)
 800a146:	fba2 2303 	umull	r2, r3, r2, r3
 800a14a:	08db      	lsrs	r3, r3, #3
 800a14c:	b29b      	uxth	r3, r3
 800a14e:	3bc8      	subs	r3, #200	@ 0xc8
 800a150:	b29b      	uxth	r3, r3
 800a152:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
	thermistorRawADC[16] = thermistorRawADC[13] + 22;
 800a156:	f8b7 306a 	ldrh.w	r3, [r7, #106]	@ 0x6a
 800a15a:	3316      	adds	r3, #22
 800a15c:	b29b      	uxth	r3, r3
 800a15e:	f8a7 3070 	strh.w	r3, [r7, #112]	@ 0x70
	thermistorRawADC[17] = thermistorRawADC[11] + 33;
 800a162:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 800a166:	3321      	adds	r3, #33	@ 0x21
 800a168:	b29b      	uxth	r3, r3
 800a16a:	f8a7 3072 	strh.w	r3, [r7, #114]	@ 0x72
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_SET);
 800a16e:	2201      	movs	r2, #1
 800a170:	2108      	movs	r1, #8
 800a172:	4827      	ldr	r0, [pc, #156]	@ (800a210 <read_thermistors+0x968>)
 800a174:	f002 f8c6 	bl	800c304 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_SET);
 800a178:	2201      	movs	r2, #1
 800a17a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800a17e:	4825      	ldr	r0, [pc, #148]	@ (800a214 <read_thermistors+0x96c>)
 800a180:	f002 f8c0 	bl	800c304 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 800a184:	2201      	movs	r2, #1
 800a186:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800a18a:	4823      	ldr	r0, [pc, #140]	@ (800a218 <read_thermistors+0x970>)
 800a18c:	f002 f8ba 	bl	800c304 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 800a190:	2201      	movs	r2, #1
 800a192:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800a196:	4820      	ldr	r0, [pc, #128]	@ (800a218 <read_thermistors+0x970>)
 800a198:	f002 f8b4 	bl	800c304 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 800a19c:	2001      	movs	r0, #1
 800a19e:	f000 fb63 	bl	800a868 <HAL_Delay>
	ADCSum = 0;
 800a1a2:	2300      	movs	r3, #0
 800a1a4:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
	for (uint8_t i = 0; i < FILTER_LEN; i++) {
 800a1a8:	2300      	movs	r3, #0
 800a1aa:	f887 3076 	strb.w	r3, [r7, #118]	@ 0x76
 800a1ae:	e019      	b.n	800a1e4 <read_thermistors+0x93c>
		HAL_ADC_Start(&hadc1);
 800a1b0:	4815      	ldr	r0, [pc, #84]	@ (800a208 <read_thermistors+0x960>)
 800a1b2:	f000 fbc1 	bl	800a938 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 800a1b6:	f04f 31ff 	mov.w	r1, #4294967295
 800a1ba:	4813      	ldr	r0, [pc, #76]	@ (800a208 <read_thermistors+0x960>)
 800a1bc:	f000 fcc1 	bl	800ab42 <HAL_ADC_PollForConversion>
		ADCSum += HAL_ADC_GetValue(&hadc1);
 800a1c0:	4811      	ldr	r0, [pc, #68]	@ (800a208 <read_thermistors+0x960>)
 800a1c2:	f000 fd49 	bl	800ac58 <HAL_ADC_GetValue>
 800a1c6:	4603      	mov	r3, r0
 800a1c8:	b29a      	uxth	r2, r3
 800a1ca:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800a1ce:	4413      	add	r3, r2
 800a1d0:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
		HAL_ADC_Stop(&hadc1);
 800a1d4:	480c      	ldr	r0, [pc, #48]	@ (800a208 <read_thermistors+0x960>)
 800a1d6:	f000 fc81 	bl	800aadc <HAL_ADC_Stop>
	for (uint8_t i = 0; i < FILTER_LEN; i++) {
 800a1da:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 800a1de:	3301      	adds	r3, #1
 800a1e0:	f887 3076 	strb.w	r3, [r7, #118]	@ 0x76
 800a1e4:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 800a1e8:	2b09      	cmp	r3, #9
 800a1ea:	d9e1      	bls.n	800a1b0 <read_thermistors+0x908>
	}
	thermistorRawADC[15] = ADCSum / FILTER_LEN;
 800a1ec:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800a1f0:	4a06      	ldr	r2, [pc, #24]	@ (800a20c <read_thermistors+0x964>)
 800a1f2:	fba2 2303 	umull	r2, r3, r2, r3
 800a1f6:	08db      	lsrs	r3, r3, #3
 800a1f8:	b29b      	uxth	r3, r3
 800a1fa:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e

	for(uint8_t i = 0; i < 18; i++) {
 800a1fe:	2300      	movs	r3, #0
 800a200:	f887 3075 	strb.w	r3, [r7, #117]	@ 0x75
 800a204:	e035      	b.n	800a272 <read_thermistors+0x9ca>
 800a206:	bf00      	nop
 800a208:	2000007c 	.word	0x2000007c
 800a20c:	cccccccd 	.word	0xcccccccd
 800a210:	40020000 	.word	0x40020000
 800a214:	40020800 	.word	0x40020800
 800a218:	40020400 	.word	0x40020400
		thermistorVoltage[i] = (thermistorRawADC[i] / 4095.0) * 3.3;
 800a21c:	f897 3075 	ldrb.w	r3, [r7, #117]	@ 0x75
 800a220:	005b      	lsls	r3, r3, #1
 800a222:	3388      	adds	r3, #136	@ 0x88
 800a224:	443b      	add	r3, r7
 800a226:	f833 3c38 	ldrh.w	r3, [r3, #-56]
 800a22a:	4618      	mov	r0, r3
 800a22c:	f7f6 f93e 	bl	80004ac <__aeabi_i2d>
 800a230:	a321      	add	r3, pc, #132	@ (adr r3, 800a2b8 <read_thermistors+0xa10>)
 800a232:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a236:	f7f6 facd 	bl	80007d4 <__aeabi_ddiv>
 800a23a:	4602      	mov	r2, r0
 800a23c:	460b      	mov	r3, r1
 800a23e:	4610      	mov	r0, r2
 800a240:	4619      	mov	r1, r3
 800a242:	a31f      	add	r3, pc, #124	@ (adr r3, 800a2c0 <read_thermistors+0xa18>)
 800a244:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a248:	f7f6 f99a 	bl	8000580 <__aeabi_dmul>
 800a24c:	4602      	mov	r2, r0
 800a24e:	460b      	mov	r3, r1
 800a250:	f897 4075 	ldrb.w	r4, [r7, #117]	@ 0x75
 800a254:	4610      	mov	r0, r2
 800a256:	4619      	mov	r1, r3
 800a258:	f7f6 fba4 	bl	80009a4 <__aeabi_d2f>
 800a25c:	4602      	mov	r2, r0
 800a25e:	00a3      	lsls	r3, r4, #2
 800a260:	3388      	adds	r3, #136	@ 0x88
 800a262:	443b      	add	r3, r7
 800a264:	3b80      	subs	r3, #128	@ 0x80
 800a266:	601a      	str	r2, [r3, #0]
	for(uint8_t i = 0; i < 18; i++) {
 800a268:	f897 3075 	ldrb.w	r3, [r7, #117]	@ 0x75
 800a26c:	3301      	adds	r3, #1
 800a26e:	f887 3075 	strb.w	r3, [r7, #117]	@ 0x75
 800a272:	f897 3075 	ldrb.w	r3, [r7, #117]	@ 0x75
 800a276:	2b11      	cmp	r3, #17
 800a278:	d9d0      	bls.n	800a21c <read_thermistors+0x974>
	}
	for(uint8_t i = 0; i < 18; i++) {
 800a27a:	2300      	movs	r3, #0
 800a27c:	f887 3074 	strb.w	r3, [r7, #116]	@ 0x74
 800a280:	e011      	b.n	800a2a6 <read_thermistors+0x9fe>
		*(thermistorArray_ptr + i) = thermistorVoltage[i];
 800a282:	f897 2074 	ldrb.w	r2, [r7, #116]	@ 0x74
 800a286:	f897 3074 	ldrb.w	r3, [r7, #116]	@ 0x74
 800a28a:	009b      	lsls	r3, r3, #2
 800a28c:	6879      	ldr	r1, [r7, #4]
 800a28e:	440b      	add	r3, r1
 800a290:	0092      	lsls	r2, r2, #2
 800a292:	3288      	adds	r2, #136	@ 0x88
 800a294:	443a      	add	r2, r7
 800a296:	3a80      	subs	r2, #128	@ 0x80
 800a298:	6812      	ldr	r2, [r2, #0]
 800a29a:	601a      	str	r2, [r3, #0]
	for(uint8_t i = 0; i < 18; i++) {
 800a29c:	f897 3074 	ldrb.w	r3, [r7, #116]	@ 0x74
 800a2a0:	3301      	adds	r3, #1
 800a2a2:	f887 3074 	strb.w	r3, [r7, #116]	@ 0x74
 800a2a6:	f897 3074 	ldrb.w	r3, [r7, #116]	@ 0x74
 800a2aa:	2b11      	cmp	r3, #17
 800a2ac:	d9e9      	bls.n	800a282 <read_thermistors+0x9da>
	}
}
 800a2ae:	bf00      	nop
 800a2b0:	bf00      	nop
 800a2b2:	378c      	adds	r7, #140	@ 0x8c
 800a2b4:	46bd      	mov	sp, r7
 800a2b6:	bd90      	pop	{r4, r7, pc}
 800a2b8:	00000000 	.word	0x00000000
 800a2bc:	40affe00 	.word	0x40affe00
 800a2c0:	66666666 	.word	0x66666666
 800a2c4:	400a6666 	.word	0x400a6666

0800a2c8 <voltage_sense>:
#include "torch_voltage.h"
#include "torch_can.h"


void voltage_sense(uint16_t *cellVoltages)
{
 800a2c8:	b580      	push	{r7, lr}
 800a2ca:	b096      	sub	sp, #88	@ 0x58
 800a2cc:	af00      	add	r7, sp, #0
 800a2ce:	6078      	str	r0, [r7, #4]
	uint8_t attempts = 0;
 800a2d0:	2300      	movs	r3, #0
 800a2d2:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	uint8_t sideB_cellVoltageA_PECflag;
	uint8_t sideB_cellVoltageB_PECflag;
	uint8_t sideB_cellVoltageC_PECflag;
	uint8_t sideB_cellVoltageD_PECflag;

	while(attempts < ATTEMPT_LIMIT) {
 800a2d6:	e10e      	b.n	800a4f6 <voltage_sense+0x22e>
		CLRCELL(SIDE_A);
 800a2d8:	2001      	movs	r0, #1
 800a2da:	f7fe f973 	bl	80085c4 <CLRCELL>
		CLRCELL(SIDE_B);
 800a2de:	2000      	movs	r0, #0
 800a2e0:	f7fe f970 	bl	80085c4 <CLRCELL>
		wait(3);
 800a2e4:	2003      	movs	r0, #3
 800a2e6:	f7fe ffa7 	bl	8009238 <wait>

		ADCV(SIDE_A);
 800a2ea:	2001      	movs	r0, #1
 800a2ec:	f7fe f947 	bl	800857e <ADCV>
		ADCV(SIDE_B);
 800a2f0:	2000      	movs	r0, #0
 800a2f2:	f7fe f944 	bl	800857e <ADCV>
		wait(3);
 800a2f6:	2003      	movs	r0, #3
 800a2f8:	f7fe ff9e 	bl	8009238 <wait>

		RDCVA(sideA_cellVoltageA, SIDE_A);
 800a2fc:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 800a300:	2101      	movs	r1, #1
 800a302:	4618      	mov	r0, r3
 800a304:	f7fd fe6a 	bl	8007fdc <RDCVA>
		RDCVA(sideB_cellVoltageA, SIDE_B);
 800a308:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a30c:	2100      	movs	r1, #0
 800a30e:	4618      	mov	r0, r3
 800a310:	f7fd fe64 	bl	8007fdc <RDCVA>
		wait(1);
 800a314:	2001      	movs	r0, #1
 800a316:	f7fe ff8f 	bl	8009238 <wait>
		RDCVB(sideA_cellVoltageB, SIDE_A);
 800a31a:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800a31e:	2101      	movs	r1, #1
 800a320:	4618      	mov	r0, r3
 800a322:	f7fd fe7f 	bl	8008024 <RDCVB>
		RDCVB(sideB_cellVoltageB, SIDE_B);
 800a326:	f107 031c 	add.w	r3, r7, #28
 800a32a:	2100      	movs	r1, #0
 800a32c:	4618      	mov	r0, r3
 800a32e:	f7fd fe79 	bl	8008024 <RDCVB>
		wait(1);
 800a332:	2001      	movs	r0, #1
 800a334:	f7fe ff80 	bl	8009238 <wait>
		RDCVC(sideA_cellVoltageC, SIDE_A);
 800a338:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800a33c:	2101      	movs	r1, #1
 800a33e:	4618      	mov	r0, r3
 800a340:	f7fd fe94 	bl	800806c <RDCVC>
		RDCVC(sideB_cellVoltageC, SIDE_B);
 800a344:	f107 0314 	add.w	r3, r7, #20
 800a348:	2100      	movs	r1, #0
 800a34a:	4618      	mov	r0, r3
 800a34c:	f7fd fe8e 	bl	800806c <RDCVC>
		wait(1);
 800a350:	2001      	movs	r0, #1
 800a352:	f7fe ff71 	bl	8009238 <wait>
		RDCVD(sideA_cellVoltageD, SIDE_A);
 800a356:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800a35a:	2101      	movs	r1, #1
 800a35c:	4618      	mov	r0, r3
 800a35e:	f7fd fea9 	bl	80080b4 <RDCVD>
		RDCVD(sideB_cellVoltageD, SIDE_B);
 800a362:	f107 030c 	add.w	r3, r7, #12
 800a366:	2100      	movs	r1, #0
 800a368:	4618      	mov	r0, r3
 800a36a:	f7fd fea3 	bl	80080b4 <RDCVD>

		sideA_cellVoltageA_PECflag = verify_PEC15(sideA_cellVoltageA);
 800a36e:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 800a372:	4618      	mov	r0, r3
 800a374:	f7fd fc65 	bl	8007c42 <verify_PEC15>
 800a378:	4603      	mov	r3, r0
 800a37a:	f887 3056 	strb.w	r3, [r7, #86]	@ 0x56
		sideA_cellVoltageB_PECflag = verify_PEC15(sideA_cellVoltageB);
 800a37e:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800a382:	4618      	mov	r0, r3
 800a384:	f7fd fc5d 	bl	8007c42 <verify_PEC15>
 800a388:	4603      	mov	r3, r0
 800a38a:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
		sideA_cellVoltageC_PECflag = verify_PEC15(sideA_cellVoltageC);
 800a38e:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800a392:	4618      	mov	r0, r3
 800a394:	f7fd fc55 	bl	8007c42 <verify_PEC15>
 800a398:	4603      	mov	r3, r0
 800a39a:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
		sideA_cellVoltageD_PECflag = verify_PEC15(sideA_cellVoltageD);
 800a39e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800a3a2:	4618      	mov	r0, r3
 800a3a4:	f7fd fc4d 	bl	8007c42 <verify_PEC15>
 800a3a8:	4603      	mov	r3, r0
 800a3aa:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53

		sideB_cellVoltageA_PECflag = verify_PEC15(sideB_cellVoltageA);
 800a3ae:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a3b2:	4618      	mov	r0, r3
 800a3b4:	f7fd fc45 	bl	8007c42 <verify_PEC15>
 800a3b8:	4603      	mov	r3, r0
 800a3ba:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
		sideB_cellVoltageB_PECflag = verify_PEC15(sideB_cellVoltageB);
 800a3be:	f107 031c 	add.w	r3, r7, #28
 800a3c2:	4618      	mov	r0, r3
 800a3c4:	f7fd fc3d 	bl	8007c42 <verify_PEC15>
 800a3c8:	4603      	mov	r3, r0
 800a3ca:	f887 3051 	strb.w	r3, [r7, #81]	@ 0x51
		sideB_cellVoltageC_PECflag = verify_PEC15(sideB_cellVoltageC);
 800a3ce:	f107 0314 	add.w	r3, r7, #20
 800a3d2:	4618      	mov	r0, r3
 800a3d4:	f7fd fc35 	bl	8007c42 <verify_PEC15>
 800a3d8:	4603      	mov	r3, r0
 800a3da:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
		sideB_cellVoltageD_PECflag = verify_PEC15(sideB_cellVoltageD);
 800a3de:	f107 030c 	add.w	r3, r7, #12
 800a3e2:	4618      	mov	r0, r3
 800a3e4:	f7fd fc2d 	bl	8007c42 <verify_PEC15>
 800a3e8:	4603      	mov	r3, r0
 800a3ea:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

		if(sideA_cellVoltageA_PECflag == 2 &&
 800a3ee:	f897 3056 	ldrb.w	r3, [r7, #86]	@ 0x56
 800a3f2:	2b02      	cmp	r3, #2
 800a3f4:	d177      	bne.n	800a4e6 <voltage_sense+0x21e>
 800a3f6:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 800a3fa:	2b02      	cmp	r3, #2
 800a3fc:	d173      	bne.n	800a4e6 <voltage_sense+0x21e>
		   sideA_cellVoltageB_PECflag == 2 &&
 800a3fe:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 800a402:	2b02      	cmp	r3, #2
 800a404:	d16f      	bne.n	800a4e6 <voltage_sense+0x21e>
		   sideA_cellVoltageC_PECflag == 2 &&
 800a406:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 800a40a:	2b02      	cmp	r3, #2
 800a40c:	d16b      	bne.n	800a4e6 <voltage_sense+0x21e>
		   sideA_cellVoltageD_PECflag == 2 &&
 800a40e:	f897 3052 	ldrb.w	r3, [r7, #82]	@ 0x52
 800a412:	2b02      	cmp	r3, #2
 800a414:	d167      	bne.n	800a4e6 <voltage_sense+0x21e>
		   sideB_cellVoltageA_PECflag == 2 &&
 800a416:	f897 3051 	ldrb.w	r3, [r7, #81]	@ 0x51
 800a41a:	2b02      	cmp	r3, #2
 800a41c:	d163      	bne.n	800a4e6 <voltage_sense+0x21e>
		   sideB_cellVoltageB_PECflag == 2 &&
 800a41e:	f897 3050 	ldrb.w	r3, [r7, #80]	@ 0x50
 800a422:	2b02      	cmp	r3, #2
 800a424:	d15f      	bne.n	800a4e6 <voltage_sense+0x21e>
		   sideB_cellVoltageC_PECflag == 2 &&
 800a426:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800a42a:	2b02      	cmp	r3, #2
 800a42c:	d15b      	bne.n	800a4e6 <voltage_sense+0x21e>
		   sideB_cellVoltageD_PECflag == 2 &&
		   sideA_cellVoltageA[1] != 0xFF &&
 800a42e:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
		   sideB_cellVoltageD_PECflag == 2 &&
 800a432:	2bff      	cmp	r3, #255	@ 0xff
 800a434:	d057      	beq.n	800a4e6 <voltage_sense+0x21e>
		   sideA_cellVoltageA[3] != 0xFF &&
 800a436:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
		   sideA_cellVoltageA[1] != 0xFF &&
 800a43a:	2bff      	cmp	r3, #255	@ 0xff
 800a43c:	d053      	beq.n	800a4e6 <voltage_sense+0x21e>
		   sideA_cellVoltageA[5] != 0xFF &&
 800a43e:	f897 3049 	ldrb.w	r3, [r7, #73]	@ 0x49
		   sideA_cellVoltageA[3] != 0xFF &&
 800a442:	2bff      	cmp	r3, #255	@ 0xff
 800a444:	d04f      	beq.n	800a4e6 <voltage_sense+0x21e>
		   sideB_cellVoltageA[1] != 0xFF &&
 800a446:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
		   sideA_cellVoltageA[5] != 0xFF &&
 800a44a:	2bff      	cmp	r3, #255	@ 0xff
 800a44c:	d04b      	beq.n	800a4e6 <voltage_sense+0x21e>
		   sideB_cellVoltageA[3] != 0xFF &&
 800a44e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
		   sideB_cellVoltageA[1] != 0xFF &&
 800a452:	2bff      	cmp	r3, #255	@ 0xff
 800a454:	d047      	beq.n	800a4e6 <voltage_sense+0x21e>
		   sideB_cellVoltageA[5] != 0xFF &&
 800a456:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
		   sideB_cellVoltageA[3] != 0xFF &&
 800a45a:	2bff      	cmp	r3, #255	@ 0xff
 800a45c:	d043      	beq.n	800a4e6 <voltage_sense+0x21e>
		   sideA_cellVoltageB[1] != 0xFF &&
 800a45e:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
		   sideB_cellVoltageA[5] != 0xFF &&
 800a462:	2bff      	cmp	r3, #255	@ 0xff
 800a464:	d03f      	beq.n	800a4e6 <voltage_sense+0x21e>
		   sideA_cellVoltageB[3] != 0xFF &&
 800a466:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
		   sideA_cellVoltageB[1] != 0xFF &&
 800a46a:	2bff      	cmp	r3, #255	@ 0xff
 800a46c:	d03b      	beq.n	800a4e6 <voltage_sense+0x21e>
		   sideA_cellVoltageB[5] != 0xFF &&
 800a46e:	f897 3041 	ldrb.w	r3, [r7, #65]	@ 0x41
		   sideA_cellVoltageB[3] != 0xFF &&
 800a472:	2bff      	cmp	r3, #255	@ 0xff
 800a474:	d037      	beq.n	800a4e6 <voltage_sense+0x21e>
		   sideB_cellVoltageB[1] != 0xFF &&
 800a476:	7f7b      	ldrb	r3, [r7, #29]
		   sideA_cellVoltageB[5] != 0xFF &&
 800a478:	2bff      	cmp	r3, #255	@ 0xff
 800a47a:	d034      	beq.n	800a4e6 <voltage_sense+0x21e>
		   sideB_cellVoltageB[3] != 0xFF &&
 800a47c:	7ffb      	ldrb	r3, [r7, #31]
		   sideB_cellVoltageB[1] != 0xFF &&
 800a47e:	2bff      	cmp	r3, #255	@ 0xff
 800a480:	d031      	beq.n	800a4e6 <voltage_sense+0x21e>
		   sideB_cellVoltageB[5] != 0xFF &&
 800a482:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
		   sideB_cellVoltageB[3] != 0xFF &&
 800a486:	2bff      	cmp	r3, #255	@ 0xff
 800a488:	d02d      	beq.n	800a4e6 <voltage_sense+0x21e>
		   sideA_cellVoltageC[1] != 0xFF &&
 800a48a:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
		   sideB_cellVoltageB[5] != 0xFF &&
 800a48e:	2bff      	cmp	r3, #255	@ 0xff
 800a490:	d029      	beq.n	800a4e6 <voltage_sense+0x21e>
		   sideA_cellVoltageC[3] != 0xFF &&
 800a492:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
		   sideA_cellVoltageC[1] != 0xFF &&
 800a496:	2bff      	cmp	r3, #255	@ 0xff
 800a498:	d025      	beq.n	800a4e6 <voltage_sense+0x21e>
		   sideA_cellVoltageC[5] != 0xFF &&
 800a49a:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
		   sideA_cellVoltageC[3] != 0xFF &&
 800a49e:	2bff      	cmp	r3, #255	@ 0xff
 800a4a0:	d021      	beq.n	800a4e6 <voltage_sense+0x21e>
		   sideB_cellVoltageC[1] != 0xFF &&
 800a4a2:	7d7b      	ldrb	r3, [r7, #21]
		   sideA_cellVoltageC[5] != 0xFF &&
 800a4a4:	2bff      	cmp	r3, #255	@ 0xff
 800a4a6:	d01e      	beq.n	800a4e6 <voltage_sense+0x21e>
		   sideB_cellVoltageC[3] != 0xFF &&
 800a4a8:	7dfb      	ldrb	r3, [r7, #23]
		   sideB_cellVoltageC[1] != 0xFF &&
 800a4aa:	2bff      	cmp	r3, #255	@ 0xff
 800a4ac:	d01b      	beq.n	800a4e6 <voltage_sense+0x21e>
		   sideB_cellVoltageC[5] != 0xFF &&
 800a4ae:	7e7b      	ldrb	r3, [r7, #25]
		   sideB_cellVoltageC[3] != 0xFF &&
 800a4b0:	2bff      	cmp	r3, #255	@ 0xff
 800a4b2:	d018      	beq.n	800a4e6 <voltage_sense+0x21e>
		   sideA_cellVoltageD[1] != 0xFF &&
 800a4b4:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
		   sideB_cellVoltageC[5] != 0xFF &&
 800a4b8:	2bff      	cmp	r3, #255	@ 0xff
 800a4ba:	d014      	beq.n	800a4e6 <voltage_sense+0x21e>
		   sideA_cellVoltageD[3] != 0xFF &&
 800a4bc:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
		   sideA_cellVoltageD[1] != 0xFF &&
 800a4c0:	2bff      	cmp	r3, #255	@ 0xff
 800a4c2:	d010      	beq.n	800a4e6 <voltage_sense+0x21e>
		   sideA_cellVoltageD[5] != 0xFF &&
 800a4c4:	f897 3031 	ldrb.w	r3, [r7, #49]	@ 0x31
		   sideA_cellVoltageD[3] != 0xFF &&
 800a4c8:	2bff      	cmp	r3, #255	@ 0xff
 800a4ca:	d00c      	beq.n	800a4e6 <voltage_sense+0x21e>
		   sideB_cellVoltageD[1] != 0xFF &&
 800a4cc:	7b7b      	ldrb	r3, [r7, #13]
		   sideA_cellVoltageD[5] != 0xFF &&
 800a4ce:	2bff      	cmp	r3, #255	@ 0xff
 800a4d0:	d009      	beq.n	800a4e6 <voltage_sense+0x21e>
		   sideB_cellVoltageD[3] != 0xFF &&
 800a4d2:	7bfb      	ldrb	r3, [r7, #15]
		   sideB_cellVoltageD[1] != 0xFF &&
 800a4d4:	2bff      	cmp	r3, #255	@ 0xff
 800a4d6:	d006      	beq.n	800a4e6 <voltage_sense+0x21e>
		   sideB_cellVoltageD[5] != 0xFF)
 800a4d8:	7c7b      	ldrb	r3, [r7, #17]
		   sideB_cellVoltageD[3] != 0xFF &&
 800a4da:	2bff      	cmp	r3, #255	@ 0xff
 800a4dc:	d003      	beq.n	800a4e6 <voltage_sense+0x21e>
		{
			attempts = 13;
 800a4de:	230d      	movs	r3, #13
 800a4e0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
 800a4e4:	e007      	b.n	800a4f6 <voltage_sense+0x22e>
		}
		else {
			attempts++;
 800a4e6:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800a4ea:	3301      	adds	r3, #1
 800a4ec:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			wait(1);
 800a4f0:	2001      	movs	r0, #1
 800a4f2:	f7fe fea1 	bl	8009238 <wait>
	while(attempts < ATTEMPT_LIMIT) {
 800a4f6:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800a4fa:	2b09      	cmp	r3, #9
 800a4fc:	f67f aeec 	bls.w	800a2d8 <voltage_sense+0x10>
		}
	}
	if(attempts != 13) { error_loop(ERROR_PEC, 0, 0); }
 800a500:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800a504:	2b0d      	cmp	r3, #13
 800a506:	d004      	beq.n	800a512 <voltage_sense+0x24a>
 800a508:	2200      	movs	r2, #0
 800a50a:	2100      	movs	r1, #0
 800a50c:	2056      	movs	r0, #86	@ 0x56
 800a50e:	f7fa f8a9 	bl	8004664 <error_loop>

	*cellVoltages = (sideA_cellVoltageA[1] << 8) | sideA_cellVoltageA[0];
 800a512:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 800a516:	b21b      	sxth	r3, r3
 800a518:	021b      	lsls	r3, r3, #8
 800a51a:	b21a      	sxth	r2, r3
 800a51c:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 800a520:	b21b      	sxth	r3, r3
 800a522:	4313      	orrs	r3, r2
 800a524:	b21b      	sxth	r3, r3
 800a526:	b29a      	uxth	r2, r3
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	801a      	strh	r2, [r3, #0]
	*(cellVoltages + 1) = (sideA_cellVoltageA[3] << 8) | sideA_cellVoltageA[2];
 800a52c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800a530:	b21b      	sxth	r3, r3
 800a532:	021b      	lsls	r3, r3, #8
 800a534:	b21a      	sxth	r2, r3
 800a536:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800a53a:	b21b      	sxth	r3, r3
 800a53c:	4313      	orrs	r3, r2
 800a53e:	b21a      	sxth	r2, r3
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	3302      	adds	r3, #2
 800a544:	b292      	uxth	r2, r2
 800a546:	801a      	strh	r2, [r3, #0]
	*(cellVoltages + 2) = (sideA_cellVoltageA[5] << 8) | sideA_cellVoltageA[4];
 800a548:	f897 3049 	ldrb.w	r3, [r7, #73]	@ 0x49
 800a54c:	b21b      	sxth	r3, r3
 800a54e:	021b      	lsls	r3, r3, #8
 800a550:	b21a      	sxth	r2, r3
 800a552:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 800a556:	b21b      	sxth	r3, r3
 800a558:	4313      	orrs	r3, r2
 800a55a:	b21a      	sxth	r2, r3
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	3304      	adds	r3, #4
 800a560:	b292      	uxth	r2, r2
 800a562:	801a      	strh	r2, [r3, #0]
	*(cellVoltages + 3) = (sideA_cellVoltageB[1] << 8) | sideA_cellVoltageB[0];
 800a564:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 800a568:	b21b      	sxth	r3, r3
 800a56a:	021b      	lsls	r3, r3, #8
 800a56c:	b21a      	sxth	r2, r3
 800a56e:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 800a572:	b21b      	sxth	r3, r3
 800a574:	4313      	orrs	r3, r2
 800a576:	b21a      	sxth	r2, r3
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	3306      	adds	r3, #6
 800a57c:	b292      	uxth	r2, r2
 800a57e:	801a      	strh	r2, [r3, #0]
	*(cellVoltages + 4) = (sideA_cellVoltageB[3] << 8) | sideA_cellVoltageB[2];
 800a580:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800a584:	b21b      	sxth	r3, r3
 800a586:	021b      	lsls	r3, r3, #8
 800a588:	b21a      	sxth	r2, r3
 800a58a:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 800a58e:	b21b      	sxth	r3, r3
 800a590:	4313      	orrs	r3, r2
 800a592:	b21a      	sxth	r2, r3
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	3308      	adds	r3, #8
 800a598:	b292      	uxth	r2, r2
 800a59a:	801a      	strh	r2, [r3, #0]
	*(cellVoltages + 5) = (sideA_cellVoltageB[5] << 8) | sideA_cellVoltageB[4];
 800a59c:	f897 3041 	ldrb.w	r3, [r7, #65]	@ 0x41
 800a5a0:	b21b      	sxth	r3, r3
 800a5a2:	021b      	lsls	r3, r3, #8
 800a5a4:	b21a      	sxth	r2, r3
 800a5a6:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 800a5aa:	b21b      	sxth	r3, r3
 800a5ac:	4313      	orrs	r3, r2
 800a5ae:	b21a      	sxth	r2, r3
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	330a      	adds	r3, #10
 800a5b4:	b292      	uxth	r2, r2
 800a5b6:	801a      	strh	r2, [r3, #0]
	*(cellVoltages + 6) = (sideA_cellVoltageC[1] << 8) | sideA_cellVoltageC[0];
 800a5b8:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 800a5bc:	b21b      	sxth	r3, r3
 800a5be:	021b      	lsls	r3, r3, #8
 800a5c0:	b21a      	sxth	r2, r3
 800a5c2:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 800a5c6:	b21b      	sxth	r3, r3
 800a5c8:	4313      	orrs	r3, r2
 800a5ca:	b21a      	sxth	r2, r3
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	330c      	adds	r3, #12
 800a5d0:	b292      	uxth	r2, r2
 800a5d2:	801a      	strh	r2, [r3, #0]
	*(cellVoltages + 7) = (sideA_cellVoltageC[3] << 8) | sideA_cellVoltageC[2];
 800a5d4:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800a5d8:	b21b      	sxth	r3, r3
 800a5da:	021b      	lsls	r3, r3, #8
 800a5dc:	b21a      	sxth	r2, r3
 800a5de:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800a5e2:	b21b      	sxth	r3, r3
 800a5e4:	4313      	orrs	r3, r2
 800a5e6:	b21a      	sxth	r2, r3
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	330e      	adds	r3, #14
 800a5ec:	b292      	uxth	r2, r2
 800a5ee:	801a      	strh	r2, [r3, #0]
	*(cellVoltages + 8) = (sideA_cellVoltageC[5] << 8) | sideA_cellVoltageC[4];
 800a5f0:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 800a5f4:	b21b      	sxth	r3, r3
 800a5f6:	021b      	lsls	r3, r3, #8
 800a5f8:	b21a      	sxth	r2, r3
 800a5fa:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 800a5fe:	b21b      	sxth	r3, r3
 800a600:	4313      	orrs	r3, r2
 800a602:	b21a      	sxth	r2, r3
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	3310      	adds	r3, #16
 800a608:	b292      	uxth	r2, r2
 800a60a:	801a      	strh	r2, [r3, #0]
	*(cellVoltages + 9) = (sideA_cellVoltageD[1] << 8) | sideA_cellVoltageD[0];
 800a60c:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 800a610:	b21b      	sxth	r3, r3
 800a612:	021b      	lsls	r3, r3, #8
 800a614:	b21a      	sxth	r2, r3
 800a616:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800a61a:	b21b      	sxth	r3, r3
 800a61c:	4313      	orrs	r3, r2
 800a61e:	b21a      	sxth	r2, r3
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	3312      	adds	r3, #18
 800a624:	b292      	uxth	r2, r2
 800a626:	801a      	strh	r2, [r3, #0]

	*(cellVoltages + 10) = (sideB_cellVoltageA[1] << 8) | sideB_cellVoltageA[0];
 800a628:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800a62c:	b21b      	sxth	r3, r3
 800a62e:	021b      	lsls	r3, r3, #8
 800a630:	b21a      	sxth	r2, r3
 800a632:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800a636:	b21b      	sxth	r3, r3
 800a638:	4313      	orrs	r3, r2
 800a63a:	b21a      	sxth	r2, r3
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	3314      	adds	r3, #20
 800a640:	b292      	uxth	r2, r2
 800a642:	801a      	strh	r2, [r3, #0]
	*(cellVoltages + 11) = (sideB_cellVoltageA[3] << 8) | sideB_cellVoltageA[2];
 800a644:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a648:	b21b      	sxth	r3, r3
 800a64a:	021b      	lsls	r3, r3, #8
 800a64c:	b21a      	sxth	r2, r3
 800a64e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800a652:	b21b      	sxth	r3, r3
 800a654:	4313      	orrs	r3, r2
 800a656:	b21a      	sxth	r2, r3
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	3316      	adds	r3, #22
 800a65c:	b292      	uxth	r2, r2
 800a65e:	801a      	strh	r2, [r3, #0]
	*(cellVoltages + 12) = (sideB_cellVoltageA[5] << 8) | sideB_cellVoltageA[4];
 800a660:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800a664:	b21b      	sxth	r3, r3
 800a666:	021b      	lsls	r3, r3, #8
 800a668:	b21a      	sxth	r2, r3
 800a66a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800a66e:	b21b      	sxth	r3, r3
 800a670:	4313      	orrs	r3, r2
 800a672:	b21a      	sxth	r2, r3
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	3318      	adds	r3, #24
 800a678:	b292      	uxth	r2, r2
 800a67a:	801a      	strh	r2, [r3, #0]
	*(cellVoltages + 13) = (sideB_cellVoltageB[1] << 8) | sideB_cellVoltageB[0];
 800a67c:	7f7b      	ldrb	r3, [r7, #29]
 800a67e:	b21b      	sxth	r3, r3
 800a680:	021b      	lsls	r3, r3, #8
 800a682:	b21a      	sxth	r2, r3
 800a684:	7f3b      	ldrb	r3, [r7, #28]
 800a686:	b21b      	sxth	r3, r3
 800a688:	4313      	orrs	r3, r2
 800a68a:	b21a      	sxth	r2, r3
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	331a      	adds	r3, #26
 800a690:	b292      	uxth	r2, r2
 800a692:	801a      	strh	r2, [r3, #0]
	*(cellVoltages + 14) = (sideB_cellVoltageB[3] << 8) | sideB_cellVoltageB[2];
 800a694:	7ffb      	ldrb	r3, [r7, #31]
 800a696:	b21b      	sxth	r3, r3
 800a698:	021b      	lsls	r3, r3, #8
 800a69a:	b21a      	sxth	r2, r3
 800a69c:	7fbb      	ldrb	r3, [r7, #30]
 800a69e:	b21b      	sxth	r3, r3
 800a6a0:	4313      	orrs	r3, r2
 800a6a2:	b21a      	sxth	r2, r3
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	331c      	adds	r3, #28
 800a6a8:	b292      	uxth	r2, r2
 800a6aa:	801a      	strh	r2, [r3, #0]
	*(cellVoltages + 15) = (sideB_cellVoltageB[5] << 8) | sideB_cellVoltageB[4];
 800a6ac:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800a6b0:	b21b      	sxth	r3, r3
 800a6b2:	021b      	lsls	r3, r3, #8
 800a6b4:	b21a      	sxth	r2, r3
 800a6b6:	f897 3020 	ldrb.w	r3, [r7, #32]
 800a6ba:	b21b      	sxth	r3, r3
 800a6bc:	4313      	orrs	r3, r2
 800a6be:	b21a      	sxth	r2, r3
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	331e      	adds	r3, #30
 800a6c4:	b292      	uxth	r2, r2
 800a6c6:	801a      	strh	r2, [r3, #0]
	*(cellVoltages + 16) = (sideB_cellVoltageC[1] << 8) | sideB_cellVoltageC[0];
 800a6c8:	7d7b      	ldrb	r3, [r7, #21]
 800a6ca:	b21b      	sxth	r3, r3
 800a6cc:	021b      	lsls	r3, r3, #8
 800a6ce:	b21a      	sxth	r2, r3
 800a6d0:	7d3b      	ldrb	r3, [r7, #20]
 800a6d2:	b21b      	sxth	r3, r3
 800a6d4:	4313      	orrs	r3, r2
 800a6d6:	b21a      	sxth	r2, r3
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	3320      	adds	r3, #32
 800a6dc:	b292      	uxth	r2, r2
 800a6de:	801a      	strh	r2, [r3, #0]
	*(cellVoltages + 17) = (sideB_cellVoltageC[3] << 8) | sideB_cellVoltageC[2];
 800a6e0:	7dfb      	ldrb	r3, [r7, #23]
 800a6e2:	b21b      	sxth	r3, r3
 800a6e4:	021b      	lsls	r3, r3, #8
 800a6e6:	b21a      	sxth	r2, r3
 800a6e8:	7dbb      	ldrb	r3, [r7, #22]
 800a6ea:	b21b      	sxth	r3, r3
 800a6ec:	4313      	orrs	r3, r2
 800a6ee:	b21a      	sxth	r2, r3
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	3322      	adds	r3, #34	@ 0x22
 800a6f4:	b292      	uxth	r2, r2
 800a6f6:	801a      	strh	r2, [r3, #0]
	*(cellVoltages + 18) = (sideB_cellVoltageC[5] << 8) | sideB_cellVoltageC[4];
 800a6f8:	7e7b      	ldrb	r3, [r7, #25]
 800a6fa:	b21b      	sxth	r3, r3
 800a6fc:	021b      	lsls	r3, r3, #8
 800a6fe:	b21a      	sxth	r2, r3
 800a700:	7e3b      	ldrb	r3, [r7, #24]
 800a702:	b21b      	sxth	r3, r3
 800a704:	4313      	orrs	r3, r2
 800a706:	b21a      	sxth	r2, r3
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	3324      	adds	r3, #36	@ 0x24
 800a70c:	b292      	uxth	r2, r2
 800a70e:	801a      	strh	r2, [r3, #0]
	*(cellVoltages + 19) = (sideB_cellVoltageD[1] << 8) | sideB_cellVoltageD[0];
 800a710:	7b7b      	ldrb	r3, [r7, #13]
 800a712:	b21b      	sxth	r3, r3
 800a714:	021b      	lsls	r3, r3, #8
 800a716:	b21a      	sxth	r2, r3
 800a718:	7b3b      	ldrb	r3, [r7, #12]
 800a71a:	b21b      	sxth	r3, r3
 800a71c:	4313      	orrs	r3, r2
 800a71e:	b21a      	sxth	r2, r3
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	3326      	adds	r3, #38	@ 0x26
 800a724:	b292      	uxth	r2, r2
 800a726:	801a      	strh	r2, [r3, #0]

}
 800a728:	bf00      	nop
 800a72a:	3758      	adds	r7, #88	@ 0x58
 800a72c:	46bd      	mov	sp, r7
 800a72e:	bd80      	pop	{r7, pc}

0800a730 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800a730:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800a768 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800a734:	f7f7 f800 	bl	8001738 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800a738:	480c      	ldr	r0, [pc, #48]	@ (800a76c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800a73a:	490d      	ldr	r1, [pc, #52]	@ (800a770 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800a73c:	4a0d      	ldr	r2, [pc, #52]	@ (800a774 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800a73e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800a740:	e002      	b.n	800a748 <LoopCopyDataInit>

0800a742 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800a742:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800a744:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800a746:	3304      	adds	r3, #4

0800a748 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800a748:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800a74a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800a74c:	d3f9      	bcc.n	800a742 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800a74e:	4a0a      	ldr	r2, [pc, #40]	@ (800a778 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800a750:	4c0a      	ldr	r4, [pc, #40]	@ (800a77c <LoopFillZerobss+0x22>)
  movs r3, #0
 800a752:	2300      	movs	r3, #0
  b LoopFillZerobss
 800a754:	e001      	b.n	800a75a <LoopFillZerobss>

0800a756 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800a756:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800a758:	3204      	adds	r2, #4

0800a75a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800a75a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800a75c:	d3fb      	bcc.n	800a756 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800a75e:	f003 fc73 	bl	800e048 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800a762:	f7f6 fb05 	bl	8000d70 <main>
  bx  lr    
 800a766:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800a768:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800a76c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800a770:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 800a774:	0800eac8 	.word	0x0800eac8
  ldr r2, =_sbss
 800a778:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 800a77c:	20000538 	.word	0x20000538

0800a780 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800a780:	e7fe      	b.n	800a780 <ADC_IRQHandler>
	...

0800a784 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800a784:	b580      	push	{r7, lr}
 800a786:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800a788:	4b0e      	ldr	r3, [pc, #56]	@ (800a7c4 <HAL_Init+0x40>)
 800a78a:	681b      	ldr	r3, [r3, #0]
 800a78c:	4a0d      	ldr	r2, [pc, #52]	@ (800a7c4 <HAL_Init+0x40>)
 800a78e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800a792:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800a794:	4b0b      	ldr	r3, [pc, #44]	@ (800a7c4 <HAL_Init+0x40>)
 800a796:	681b      	ldr	r3, [r3, #0]
 800a798:	4a0a      	ldr	r2, [pc, #40]	@ (800a7c4 <HAL_Init+0x40>)
 800a79a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800a79e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800a7a0:	4b08      	ldr	r3, [pc, #32]	@ (800a7c4 <HAL_Init+0x40>)
 800a7a2:	681b      	ldr	r3, [r3, #0]
 800a7a4:	4a07      	ldr	r2, [pc, #28]	@ (800a7c4 <HAL_Init+0x40>)
 800a7a6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a7aa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800a7ac:	2003      	movs	r0, #3
 800a7ae:	f001 fbd3 	bl	800bf58 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800a7b2:	200f      	movs	r0, #15
 800a7b4:	f000 f808 	bl	800a7c8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800a7b8:	f7f6 fe18 	bl	80013ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800a7bc:	2300      	movs	r3, #0
}
 800a7be:	4618      	mov	r0, r3
 800a7c0:	bd80      	pop	{r7, pc}
 800a7c2:	bf00      	nop
 800a7c4:	40023c00 	.word	0x40023c00

0800a7c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800a7c8:	b580      	push	{r7, lr}
 800a7ca:	b082      	sub	sp, #8
 800a7cc:	af00      	add	r7, sp, #0
 800a7ce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800a7d0:	4b12      	ldr	r3, [pc, #72]	@ (800a81c <HAL_InitTick+0x54>)
 800a7d2:	681a      	ldr	r2, [r3, #0]
 800a7d4:	4b12      	ldr	r3, [pc, #72]	@ (800a820 <HAL_InitTick+0x58>)
 800a7d6:	781b      	ldrb	r3, [r3, #0]
 800a7d8:	4619      	mov	r1, r3
 800a7da:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800a7de:	fbb3 f3f1 	udiv	r3, r3, r1
 800a7e2:	fbb2 f3f3 	udiv	r3, r2, r3
 800a7e6:	4618      	mov	r0, r3
 800a7e8:	f001 fbeb 	bl	800bfc2 <HAL_SYSTICK_Config>
 800a7ec:	4603      	mov	r3, r0
 800a7ee:	2b00      	cmp	r3, #0
 800a7f0:	d001      	beq.n	800a7f6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800a7f2:	2301      	movs	r3, #1
 800a7f4:	e00e      	b.n	800a814 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	2b0f      	cmp	r3, #15
 800a7fa:	d80a      	bhi.n	800a812 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800a7fc:	2200      	movs	r2, #0
 800a7fe:	6879      	ldr	r1, [r7, #4]
 800a800:	f04f 30ff 	mov.w	r0, #4294967295
 800a804:	f001 fbb3 	bl	800bf6e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800a808:	4a06      	ldr	r2, [pc, #24]	@ (800a824 <HAL_InitTick+0x5c>)
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800a80e:	2300      	movs	r3, #0
 800a810:	e000      	b.n	800a814 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800a812:	2301      	movs	r3, #1
}
 800a814:	4618      	mov	r0, r3
 800a816:	3708      	adds	r7, #8
 800a818:	46bd      	mov	sp, r7
 800a81a:	bd80      	pop	{r7, pc}
 800a81c:	20000000 	.word	0x20000000
 800a820:	2000000c 	.word	0x2000000c
 800a824:	20000008 	.word	0x20000008

0800a828 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800a828:	b480      	push	{r7}
 800a82a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800a82c:	4b06      	ldr	r3, [pc, #24]	@ (800a848 <HAL_IncTick+0x20>)
 800a82e:	781b      	ldrb	r3, [r3, #0]
 800a830:	461a      	mov	r2, r3
 800a832:	4b06      	ldr	r3, [pc, #24]	@ (800a84c <HAL_IncTick+0x24>)
 800a834:	681b      	ldr	r3, [r3, #0]
 800a836:	4413      	add	r3, r2
 800a838:	4a04      	ldr	r2, [pc, #16]	@ (800a84c <HAL_IncTick+0x24>)
 800a83a:	6013      	str	r3, [r2, #0]
}
 800a83c:	bf00      	nop
 800a83e:	46bd      	mov	sp, r7
 800a840:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a844:	4770      	bx	lr
 800a846:	bf00      	nop
 800a848:	2000000c 	.word	0x2000000c
 800a84c:	200003fc 	.word	0x200003fc

0800a850 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800a850:	b480      	push	{r7}
 800a852:	af00      	add	r7, sp, #0
  return uwTick;
 800a854:	4b03      	ldr	r3, [pc, #12]	@ (800a864 <HAL_GetTick+0x14>)
 800a856:	681b      	ldr	r3, [r3, #0]
}
 800a858:	4618      	mov	r0, r3
 800a85a:	46bd      	mov	sp, r7
 800a85c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a860:	4770      	bx	lr
 800a862:	bf00      	nop
 800a864:	200003fc 	.word	0x200003fc

0800a868 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800a868:	b580      	push	{r7, lr}
 800a86a:	b084      	sub	sp, #16
 800a86c:	af00      	add	r7, sp, #0
 800a86e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800a870:	f7ff ffee 	bl	800a850 <HAL_GetTick>
 800a874:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800a87a:	68fb      	ldr	r3, [r7, #12]
 800a87c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a880:	d005      	beq.n	800a88e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800a882:	4b0a      	ldr	r3, [pc, #40]	@ (800a8ac <HAL_Delay+0x44>)
 800a884:	781b      	ldrb	r3, [r3, #0]
 800a886:	461a      	mov	r2, r3
 800a888:	68fb      	ldr	r3, [r7, #12]
 800a88a:	4413      	add	r3, r2
 800a88c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800a88e:	bf00      	nop
 800a890:	f7ff ffde 	bl	800a850 <HAL_GetTick>
 800a894:	4602      	mov	r2, r0
 800a896:	68bb      	ldr	r3, [r7, #8]
 800a898:	1ad3      	subs	r3, r2, r3
 800a89a:	68fa      	ldr	r2, [r7, #12]
 800a89c:	429a      	cmp	r2, r3
 800a89e:	d8f7      	bhi.n	800a890 <HAL_Delay+0x28>
  {
  }
}
 800a8a0:	bf00      	nop
 800a8a2:	bf00      	nop
 800a8a4:	3710      	adds	r7, #16
 800a8a6:	46bd      	mov	sp, r7
 800a8a8:	bd80      	pop	{r7, pc}
 800a8aa:	bf00      	nop
 800a8ac:	2000000c 	.word	0x2000000c

0800a8b0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800a8b0:	b580      	push	{r7, lr}
 800a8b2:	b084      	sub	sp, #16
 800a8b4:	af00      	add	r7, sp, #0
 800a8b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800a8b8:	2300      	movs	r3, #0
 800a8ba:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	2b00      	cmp	r3, #0
 800a8c0:	d101      	bne.n	800a8c6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800a8c2:	2301      	movs	r3, #1
 800a8c4:	e033      	b.n	800a92e <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a8ca:	2b00      	cmp	r3, #0
 800a8cc:	d109      	bne.n	800a8e2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800a8ce:	6878      	ldr	r0, [r7, #4]
 800a8d0:	f7f6 fdb4 	bl	800143c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	2200      	movs	r2, #0
 800a8d8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	2200      	movs	r2, #0
 800a8de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a8e6:	f003 0310 	and.w	r3, r3, #16
 800a8ea:	2b00      	cmp	r3, #0
 800a8ec:	d118      	bne.n	800a920 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a8f2:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800a8f6:	f023 0302 	bic.w	r3, r3, #2
 800a8fa:	f043 0202 	orr.w	r2, r3, #2
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 800a902:	6878      	ldr	r0, [r7, #4]
 800a904:	f000 fae8 	bl	800aed8 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	2200      	movs	r2, #0
 800a90c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a912:	f023 0303 	bic.w	r3, r3, #3
 800a916:	f043 0201 	orr.w	r2, r3, #1
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	641a      	str	r2, [r3, #64]	@ 0x40
 800a91e:	e001      	b.n	800a924 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800a920:	2301      	movs	r3, #1
 800a922:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	2200      	movs	r2, #0
 800a928:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 800a92c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a92e:	4618      	mov	r0, r3
 800a930:	3710      	adds	r7, #16
 800a932:	46bd      	mov	sp, r7
 800a934:	bd80      	pop	{r7, pc}
	...

0800a938 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 800a938:	b480      	push	{r7}
 800a93a:	b085      	sub	sp, #20
 800a93c:	af00      	add	r7, sp, #0
 800a93e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 800a940:	2300      	movs	r3, #0
 800a942:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a94a:	2b01      	cmp	r3, #1
 800a94c:	d101      	bne.n	800a952 <HAL_ADC_Start+0x1a>
 800a94e:	2302      	movs	r3, #2
 800a950:	e0b2      	b.n	800aab8 <HAL_ADC_Start+0x180>
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	2201      	movs	r2, #1
 800a956:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	681b      	ldr	r3, [r3, #0]
 800a95e:	689b      	ldr	r3, [r3, #8]
 800a960:	f003 0301 	and.w	r3, r3, #1
 800a964:	2b01      	cmp	r3, #1
 800a966:	d018      	beq.n	800a99a <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	681b      	ldr	r3, [r3, #0]
 800a96c:	689a      	ldr	r2, [r3, #8]
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	681b      	ldr	r3, [r3, #0]
 800a972:	f042 0201 	orr.w	r2, r2, #1
 800a976:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800a978:	4b52      	ldr	r3, [pc, #328]	@ (800aac4 <HAL_ADC_Start+0x18c>)
 800a97a:	681b      	ldr	r3, [r3, #0]
 800a97c:	4a52      	ldr	r2, [pc, #328]	@ (800aac8 <HAL_ADC_Start+0x190>)
 800a97e:	fba2 2303 	umull	r2, r3, r2, r3
 800a982:	0c9a      	lsrs	r2, r3, #18
 800a984:	4613      	mov	r3, r2
 800a986:	005b      	lsls	r3, r3, #1
 800a988:	4413      	add	r3, r2
 800a98a:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 800a98c:	e002      	b.n	800a994 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800a98e:	68bb      	ldr	r3, [r7, #8]
 800a990:	3b01      	subs	r3, #1
 800a992:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 800a994:	68bb      	ldr	r3, [r7, #8]
 800a996:	2b00      	cmp	r3, #0
 800a998:	d1f9      	bne.n	800a98e <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	681b      	ldr	r3, [r3, #0]
 800a99e:	689b      	ldr	r3, [r3, #8]
 800a9a0:	f003 0301 	and.w	r3, r3, #1
 800a9a4:	2b01      	cmp	r3, #1
 800a9a6:	d17a      	bne.n	800aa9e <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a9ac:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 800a9b0:	f023 0301 	bic.w	r3, r3, #1
 800a9b4:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	681b      	ldr	r3, [r3, #0]
 800a9c0:	685b      	ldr	r3, [r3, #4]
 800a9c2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a9c6:	2b00      	cmp	r3, #0
 800a9c8:	d007      	beq.n	800a9da <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a9ce:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800a9d2:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a9de:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800a9e2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a9e6:	d106      	bne.n	800a9f6 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a9ec:	f023 0206 	bic.w	r2, r3, #6
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	645a      	str	r2, [r3, #68]	@ 0x44
 800a9f4:	e002      	b.n	800a9fc <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	2200      	movs	r2, #0
 800a9fa:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	2200      	movs	r2, #0
 800aa00:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800aa04:	4b31      	ldr	r3, [pc, #196]	@ (800aacc <HAL_ADC_Start+0x194>)
 800aa06:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	681b      	ldr	r3, [r3, #0]
 800aa0c:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 800aa10:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800aa12:	68fb      	ldr	r3, [r7, #12]
 800aa14:	685b      	ldr	r3, [r3, #4]
 800aa16:	f003 031f 	and.w	r3, r3, #31
 800aa1a:	2b00      	cmp	r3, #0
 800aa1c:	d12a      	bne.n	800aa74 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	681b      	ldr	r3, [r3, #0]
 800aa22:	4a2b      	ldr	r2, [pc, #172]	@ (800aad0 <HAL_ADC_Start+0x198>)
 800aa24:	4293      	cmp	r3, r2
 800aa26:	d015      	beq.n	800aa54 <HAL_ADC_Start+0x11c>
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	681b      	ldr	r3, [r3, #0]
 800aa2c:	4a29      	ldr	r2, [pc, #164]	@ (800aad4 <HAL_ADC_Start+0x19c>)
 800aa2e:	4293      	cmp	r3, r2
 800aa30:	d105      	bne.n	800aa3e <HAL_ADC_Start+0x106>
 800aa32:	4b26      	ldr	r3, [pc, #152]	@ (800aacc <HAL_ADC_Start+0x194>)
 800aa34:	685b      	ldr	r3, [r3, #4]
 800aa36:	f003 031f 	and.w	r3, r3, #31
 800aa3a:	2b00      	cmp	r3, #0
 800aa3c:	d00a      	beq.n	800aa54 <HAL_ADC_Start+0x11c>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	681b      	ldr	r3, [r3, #0]
 800aa42:	4a25      	ldr	r2, [pc, #148]	@ (800aad8 <HAL_ADC_Start+0x1a0>)
 800aa44:	4293      	cmp	r3, r2
 800aa46:	d136      	bne.n	800aab6 <HAL_ADC_Start+0x17e>
 800aa48:	4b20      	ldr	r3, [pc, #128]	@ (800aacc <HAL_ADC_Start+0x194>)
 800aa4a:	685b      	ldr	r3, [r3, #4]
 800aa4c:	f003 0310 	and.w	r3, r3, #16
 800aa50:	2b00      	cmp	r3, #0
 800aa52:	d130      	bne.n	800aab6 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	681b      	ldr	r3, [r3, #0]
 800aa58:	689b      	ldr	r3, [r3, #8]
 800aa5a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800aa5e:	2b00      	cmp	r3, #0
 800aa60:	d129      	bne.n	800aab6 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	681b      	ldr	r3, [r3, #0]
 800aa66:	689a      	ldr	r2, [r3, #8]
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	681b      	ldr	r3, [r3, #0]
 800aa6c:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800aa70:	609a      	str	r2, [r3, #8]
 800aa72:	e020      	b.n	800aab6 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	681b      	ldr	r3, [r3, #0]
 800aa78:	4a15      	ldr	r2, [pc, #84]	@ (800aad0 <HAL_ADC_Start+0x198>)
 800aa7a:	4293      	cmp	r3, r2
 800aa7c:	d11b      	bne.n	800aab6 <HAL_ADC_Start+0x17e>
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	681b      	ldr	r3, [r3, #0]
 800aa82:	689b      	ldr	r3, [r3, #8]
 800aa84:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800aa88:	2b00      	cmp	r3, #0
 800aa8a:	d114      	bne.n	800aab6 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	681b      	ldr	r3, [r3, #0]
 800aa90:	689a      	ldr	r2, [r3, #8]
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	681b      	ldr	r3, [r3, #0]
 800aa96:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800aa9a:	609a      	str	r2, [r3, #8]
 800aa9c:	e00b      	b.n	800aab6 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aaa2:	f043 0210 	orr.w	r2, r3, #16
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800aaae:	f043 0201 	orr.w	r2, r3, #1
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 800aab6:	2300      	movs	r3, #0
}
 800aab8:	4618      	mov	r0, r3
 800aaba:	3714      	adds	r7, #20
 800aabc:	46bd      	mov	sp, r7
 800aabe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aac2:	4770      	bx	lr
 800aac4:	20000000 	.word	0x20000000
 800aac8:	431bde83 	.word	0x431bde83
 800aacc:	40012300 	.word	0x40012300
 800aad0:	40012000 	.word	0x40012000
 800aad4:	40012100 	.word	0x40012100
 800aad8:	40012200 	.word	0x40012200

0800aadc <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 800aadc:	b480      	push	{r7}
 800aade:	b083      	sub	sp, #12
 800aae0:	af00      	add	r7, sp, #0
 800aae2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800aaea:	2b01      	cmp	r3, #1
 800aaec:	d101      	bne.n	800aaf2 <HAL_ADC_Stop+0x16>
 800aaee:	2302      	movs	r3, #2
 800aaf0:	e021      	b.n	800ab36 <HAL_ADC_Stop+0x5a>
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	2201      	movs	r2, #1
 800aaf6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	681b      	ldr	r3, [r3, #0]
 800aafe:	689a      	ldr	r2, [r3, #8]
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	681b      	ldr	r3, [r3, #0]
 800ab04:	f022 0201 	bic.w	r2, r2, #1
 800ab08:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	681b      	ldr	r3, [r3, #0]
 800ab0e:	689b      	ldr	r3, [r3, #8]
 800ab10:	f003 0301 	and.w	r3, r3, #1
 800ab14:	2b00      	cmp	r3, #0
 800ab16:	d109      	bne.n	800ab2c <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ab1c:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800ab20:	f023 0301 	bic.w	r3, r3, #1
 800ab24:	f043 0201 	orr.w	r2, r3, #1
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	2200      	movs	r2, #0
 800ab30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 800ab34:	2300      	movs	r3, #0
}
 800ab36:	4618      	mov	r0, r3
 800ab38:	370c      	adds	r7, #12
 800ab3a:	46bd      	mov	sp, r7
 800ab3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab40:	4770      	bx	lr

0800ab42 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 800ab42:	b580      	push	{r7, lr}
 800ab44:	b084      	sub	sp, #16
 800ab46:	af00      	add	r7, sp, #0
 800ab48:	6078      	str	r0, [r7, #4]
 800ab4a:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800ab4c:	2300      	movs	r3, #0
 800ab4e:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	681b      	ldr	r3, [r3, #0]
 800ab54:	689b      	ldr	r3, [r3, #8]
 800ab56:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800ab5a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ab5e:	d113      	bne.n	800ab88 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	681b      	ldr	r3, [r3, #0]
 800ab64:	689b      	ldr	r3, [r3, #8]
 800ab66:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800ab6a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ab6e:	d10b      	bne.n	800ab88 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ab74:	f043 0220 	orr.w	r2, r3, #32
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	2200      	movs	r2, #0
 800ab80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800ab84:	2301      	movs	r3, #1
 800ab86:	e063      	b.n	800ac50 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 800ab88:	f7ff fe62 	bl	800a850 <HAL_GetTick>
 800ab8c:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800ab8e:	e021      	b.n	800abd4 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800ab90:	683b      	ldr	r3, [r7, #0]
 800ab92:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab96:	d01d      	beq.n	800abd4 <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800ab98:	683b      	ldr	r3, [r7, #0]
 800ab9a:	2b00      	cmp	r3, #0
 800ab9c:	d007      	beq.n	800abae <HAL_ADC_PollForConversion+0x6c>
 800ab9e:	f7ff fe57 	bl	800a850 <HAL_GetTick>
 800aba2:	4602      	mov	r2, r0
 800aba4:	68fb      	ldr	r3, [r7, #12]
 800aba6:	1ad3      	subs	r3, r2, r3
 800aba8:	683a      	ldr	r2, [r7, #0]
 800abaa:	429a      	cmp	r2, r3
 800abac:	d212      	bcs.n	800abd4 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	681b      	ldr	r3, [r3, #0]
 800abb2:	681b      	ldr	r3, [r3, #0]
 800abb4:	f003 0302 	and.w	r3, r3, #2
 800abb8:	2b02      	cmp	r3, #2
 800abba:	d00b      	beq.n	800abd4 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800abc0:	f043 0204 	orr.w	r2, r3, #4
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	2200      	movs	r2, #0
 800abcc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 800abd0:	2303      	movs	r3, #3
 800abd2:	e03d      	b.n	800ac50 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	681b      	ldr	r3, [r3, #0]
 800abd8:	681b      	ldr	r3, [r3, #0]
 800abda:	f003 0302 	and.w	r3, r3, #2
 800abde:	2b02      	cmp	r3, #2
 800abe0:	d1d6      	bne.n	800ab90 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	681b      	ldr	r3, [r3, #0]
 800abe6:	f06f 0212 	mvn.w	r2, #18
 800abea:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800abf0:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	681b      	ldr	r3, [r3, #0]
 800abfc:	689b      	ldr	r3, [r3, #8]
 800abfe:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800ac02:	2b00      	cmp	r3, #0
 800ac04:	d123      	bne.n	800ac4e <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800ac0a:	2b00      	cmp	r3, #0
 800ac0c:	d11f      	bne.n	800ac4e <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	681b      	ldr	r3, [r3, #0]
 800ac12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ac14:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800ac18:	2b00      	cmp	r3, #0
 800ac1a:	d006      	beq.n	800ac2a <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	681b      	ldr	r3, [r3, #0]
 800ac20:	689b      	ldr	r3, [r3, #8]
 800ac22:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800ac26:	2b00      	cmp	r3, #0
 800ac28:	d111      	bne.n	800ac4e <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ac2e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ac3a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800ac3e:	2b00      	cmp	r3, #0
 800ac40:	d105      	bne.n	800ac4e <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ac46:	f043 0201 	orr.w	r2, r3, #1
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 800ac4e:	2300      	movs	r3, #0
}
 800ac50:	4618      	mov	r0, r3
 800ac52:	3710      	adds	r7, #16
 800ac54:	46bd      	mov	sp, r7
 800ac56:	bd80      	pop	{r7, pc}

0800ac58 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 800ac58:	b480      	push	{r7}
 800ac5a:	b083      	sub	sp, #12
 800ac5c:	af00      	add	r7, sp, #0
 800ac5e:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	681b      	ldr	r3, [r3, #0]
 800ac64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 800ac66:	4618      	mov	r0, r3
 800ac68:	370c      	adds	r7, #12
 800ac6a:	46bd      	mov	sp, r7
 800ac6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac70:	4770      	bx	lr
	...

0800ac74 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800ac74:	b480      	push	{r7}
 800ac76:	b085      	sub	sp, #20
 800ac78:	af00      	add	r7, sp, #0
 800ac7a:	6078      	str	r0, [r7, #4]
 800ac7c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800ac7e:	2300      	movs	r3, #0
 800ac80:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800ac88:	2b01      	cmp	r3, #1
 800ac8a:	d101      	bne.n	800ac90 <HAL_ADC_ConfigChannel+0x1c>
 800ac8c:	2302      	movs	r3, #2
 800ac8e:	e113      	b.n	800aeb8 <HAL_ADC_ConfigChannel+0x244>
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	2201      	movs	r2, #1
 800ac94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800ac98:	683b      	ldr	r3, [r7, #0]
 800ac9a:	681b      	ldr	r3, [r3, #0]
 800ac9c:	2b09      	cmp	r3, #9
 800ac9e:	d925      	bls.n	800acec <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	681b      	ldr	r3, [r3, #0]
 800aca4:	68d9      	ldr	r1, [r3, #12]
 800aca6:	683b      	ldr	r3, [r7, #0]
 800aca8:	681b      	ldr	r3, [r3, #0]
 800acaa:	b29b      	uxth	r3, r3
 800acac:	461a      	mov	r2, r3
 800acae:	4613      	mov	r3, r2
 800acb0:	005b      	lsls	r3, r3, #1
 800acb2:	4413      	add	r3, r2
 800acb4:	3b1e      	subs	r3, #30
 800acb6:	2207      	movs	r2, #7
 800acb8:	fa02 f303 	lsl.w	r3, r2, r3
 800acbc:	43da      	mvns	r2, r3
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	681b      	ldr	r3, [r3, #0]
 800acc2:	400a      	ands	r2, r1
 800acc4:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	681b      	ldr	r3, [r3, #0]
 800acca:	68d9      	ldr	r1, [r3, #12]
 800accc:	683b      	ldr	r3, [r7, #0]
 800acce:	689a      	ldr	r2, [r3, #8]
 800acd0:	683b      	ldr	r3, [r7, #0]
 800acd2:	681b      	ldr	r3, [r3, #0]
 800acd4:	b29b      	uxth	r3, r3
 800acd6:	4618      	mov	r0, r3
 800acd8:	4603      	mov	r3, r0
 800acda:	005b      	lsls	r3, r3, #1
 800acdc:	4403      	add	r3, r0
 800acde:	3b1e      	subs	r3, #30
 800ace0:	409a      	lsls	r2, r3
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	681b      	ldr	r3, [r3, #0]
 800ace6:	430a      	orrs	r2, r1
 800ace8:	60da      	str	r2, [r3, #12]
 800acea:	e022      	b.n	800ad32 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	681b      	ldr	r3, [r3, #0]
 800acf0:	6919      	ldr	r1, [r3, #16]
 800acf2:	683b      	ldr	r3, [r7, #0]
 800acf4:	681b      	ldr	r3, [r3, #0]
 800acf6:	b29b      	uxth	r3, r3
 800acf8:	461a      	mov	r2, r3
 800acfa:	4613      	mov	r3, r2
 800acfc:	005b      	lsls	r3, r3, #1
 800acfe:	4413      	add	r3, r2
 800ad00:	2207      	movs	r2, #7
 800ad02:	fa02 f303 	lsl.w	r3, r2, r3
 800ad06:	43da      	mvns	r2, r3
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	681b      	ldr	r3, [r3, #0]
 800ad0c:	400a      	ands	r2, r1
 800ad0e:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	681b      	ldr	r3, [r3, #0]
 800ad14:	6919      	ldr	r1, [r3, #16]
 800ad16:	683b      	ldr	r3, [r7, #0]
 800ad18:	689a      	ldr	r2, [r3, #8]
 800ad1a:	683b      	ldr	r3, [r7, #0]
 800ad1c:	681b      	ldr	r3, [r3, #0]
 800ad1e:	b29b      	uxth	r3, r3
 800ad20:	4618      	mov	r0, r3
 800ad22:	4603      	mov	r3, r0
 800ad24:	005b      	lsls	r3, r3, #1
 800ad26:	4403      	add	r3, r0
 800ad28:	409a      	lsls	r2, r3
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	681b      	ldr	r3, [r3, #0]
 800ad2e:	430a      	orrs	r2, r1
 800ad30:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800ad32:	683b      	ldr	r3, [r7, #0]
 800ad34:	685b      	ldr	r3, [r3, #4]
 800ad36:	2b06      	cmp	r3, #6
 800ad38:	d824      	bhi.n	800ad84 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	681b      	ldr	r3, [r3, #0]
 800ad3e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800ad40:	683b      	ldr	r3, [r7, #0]
 800ad42:	685a      	ldr	r2, [r3, #4]
 800ad44:	4613      	mov	r3, r2
 800ad46:	009b      	lsls	r3, r3, #2
 800ad48:	4413      	add	r3, r2
 800ad4a:	3b05      	subs	r3, #5
 800ad4c:	221f      	movs	r2, #31
 800ad4e:	fa02 f303 	lsl.w	r3, r2, r3
 800ad52:	43da      	mvns	r2, r3
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	681b      	ldr	r3, [r3, #0]
 800ad58:	400a      	ands	r2, r1
 800ad5a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	681b      	ldr	r3, [r3, #0]
 800ad60:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800ad62:	683b      	ldr	r3, [r7, #0]
 800ad64:	681b      	ldr	r3, [r3, #0]
 800ad66:	b29b      	uxth	r3, r3
 800ad68:	4618      	mov	r0, r3
 800ad6a:	683b      	ldr	r3, [r7, #0]
 800ad6c:	685a      	ldr	r2, [r3, #4]
 800ad6e:	4613      	mov	r3, r2
 800ad70:	009b      	lsls	r3, r3, #2
 800ad72:	4413      	add	r3, r2
 800ad74:	3b05      	subs	r3, #5
 800ad76:	fa00 f203 	lsl.w	r2, r0, r3
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	681b      	ldr	r3, [r3, #0]
 800ad7e:	430a      	orrs	r2, r1
 800ad80:	635a      	str	r2, [r3, #52]	@ 0x34
 800ad82:	e04c      	b.n	800ae1e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800ad84:	683b      	ldr	r3, [r7, #0]
 800ad86:	685b      	ldr	r3, [r3, #4]
 800ad88:	2b0c      	cmp	r3, #12
 800ad8a:	d824      	bhi.n	800add6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	681b      	ldr	r3, [r3, #0]
 800ad90:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800ad92:	683b      	ldr	r3, [r7, #0]
 800ad94:	685a      	ldr	r2, [r3, #4]
 800ad96:	4613      	mov	r3, r2
 800ad98:	009b      	lsls	r3, r3, #2
 800ad9a:	4413      	add	r3, r2
 800ad9c:	3b23      	subs	r3, #35	@ 0x23
 800ad9e:	221f      	movs	r2, #31
 800ada0:	fa02 f303 	lsl.w	r3, r2, r3
 800ada4:	43da      	mvns	r2, r3
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	681b      	ldr	r3, [r3, #0]
 800adaa:	400a      	ands	r2, r1
 800adac:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	681b      	ldr	r3, [r3, #0]
 800adb2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800adb4:	683b      	ldr	r3, [r7, #0]
 800adb6:	681b      	ldr	r3, [r3, #0]
 800adb8:	b29b      	uxth	r3, r3
 800adba:	4618      	mov	r0, r3
 800adbc:	683b      	ldr	r3, [r7, #0]
 800adbe:	685a      	ldr	r2, [r3, #4]
 800adc0:	4613      	mov	r3, r2
 800adc2:	009b      	lsls	r3, r3, #2
 800adc4:	4413      	add	r3, r2
 800adc6:	3b23      	subs	r3, #35	@ 0x23
 800adc8:	fa00 f203 	lsl.w	r2, r0, r3
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	681b      	ldr	r3, [r3, #0]
 800add0:	430a      	orrs	r2, r1
 800add2:	631a      	str	r2, [r3, #48]	@ 0x30
 800add4:	e023      	b.n	800ae1e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	681b      	ldr	r3, [r3, #0]
 800adda:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800addc:	683b      	ldr	r3, [r7, #0]
 800adde:	685a      	ldr	r2, [r3, #4]
 800ade0:	4613      	mov	r3, r2
 800ade2:	009b      	lsls	r3, r3, #2
 800ade4:	4413      	add	r3, r2
 800ade6:	3b41      	subs	r3, #65	@ 0x41
 800ade8:	221f      	movs	r2, #31
 800adea:	fa02 f303 	lsl.w	r3, r2, r3
 800adee:	43da      	mvns	r2, r3
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	681b      	ldr	r3, [r3, #0]
 800adf4:	400a      	ands	r2, r1
 800adf6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	681b      	ldr	r3, [r3, #0]
 800adfc:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800adfe:	683b      	ldr	r3, [r7, #0]
 800ae00:	681b      	ldr	r3, [r3, #0]
 800ae02:	b29b      	uxth	r3, r3
 800ae04:	4618      	mov	r0, r3
 800ae06:	683b      	ldr	r3, [r7, #0]
 800ae08:	685a      	ldr	r2, [r3, #4]
 800ae0a:	4613      	mov	r3, r2
 800ae0c:	009b      	lsls	r3, r3, #2
 800ae0e:	4413      	add	r3, r2
 800ae10:	3b41      	subs	r3, #65	@ 0x41
 800ae12:	fa00 f203 	lsl.w	r2, r0, r3
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	681b      	ldr	r3, [r3, #0]
 800ae1a:	430a      	orrs	r2, r1
 800ae1c:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800ae1e:	4b29      	ldr	r3, [pc, #164]	@ (800aec4 <HAL_ADC_ConfigChannel+0x250>)
 800ae20:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	681b      	ldr	r3, [r3, #0]
 800ae26:	4a28      	ldr	r2, [pc, #160]	@ (800aec8 <HAL_ADC_ConfigChannel+0x254>)
 800ae28:	4293      	cmp	r3, r2
 800ae2a:	d10f      	bne.n	800ae4c <HAL_ADC_ConfigChannel+0x1d8>
 800ae2c:	683b      	ldr	r3, [r7, #0]
 800ae2e:	681b      	ldr	r3, [r3, #0]
 800ae30:	2b12      	cmp	r3, #18
 800ae32:	d10b      	bne.n	800ae4c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 800ae34:	68fb      	ldr	r3, [r7, #12]
 800ae36:	685b      	ldr	r3, [r3, #4]
 800ae38:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 800ae3c:	68fb      	ldr	r3, [r7, #12]
 800ae3e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800ae40:	68fb      	ldr	r3, [r7, #12]
 800ae42:	685b      	ldr	r3, [r3, #4]
 800ae44:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 800ae48:	68fb      	ldr	r3, [r7, #12]
 800ae4a:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	681b      	ldr	r3, [r3, #0]
 800ae50:	4a1d      	ldr	r2, [pc, #116]	@ (800aec8 <HAL_ADC_ConfigChannel+0x254>)
 800ae52:	4293      	cmp	r3, r2
 800ae54:	d12b      	bne.n	800aeae <HAL_ADC_ConfigChannel+0x23a>
 800ae56:	683b      	ldr	r3, [r7, #0]
 800ae58:	681b      	ldr	r3, [r3, #0]
 800ae5a:	4a1c      	ldr	r2, [pc, #112]	@ (800aecc <HAL_ADC_ConfigChannel+0x258>)
 800ae5c:	4293      	cmp	r3, r2
 800ae5e:	d003      	beq.n	800ae68 <HAL_ADC_ConfigChannel+0x1f4>
 800ae60:	683b      	ldr	r3, [r7, #0]
 800ae62:	681b      	ldr	r3, [r3, #0]
 800ae64:	2b11      	cmp	r3, #17
 800ae66:	d122      	bne.n	800aeae <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 800ae68:	68fb      	ldr	r3, [r7, #12]
 800ae6a:	685b      	ldr	r3, [r3, #4]
 800ae6c:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 800ae70:	68fb      	ldr	r3, [r7, #12]
 800ae72:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800ae74:	68fb      	ldr	r3, [r7, #12]
 800ae76:	685b      	ldr	r3, [r3, #4]
 800ae78:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 800ae7c:	68fb      	ldr	r3, [r7, #12]
 800ae7e:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800ae80:	683b      	ldr	r3, [r7, #0]
 800ae82:	681b      	ldr	r3, [r3, #0]
 800ae84:	4a11      	ldr	r2, [pc, #68]	@ (800aecc <HAL_ADC_ConfigChannel+0x258>)
 800ae86:	4293      	cmp	r3, r2
 800ae88:	d111      	bne.n	800aeae <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800ae8a:	4b11      	ldr	r3, [pc, #68]	@ (800aed0 <HAL_ADC_ConfigChannel+0x25c>)
 800ae8c:	681b      	ldr	r3, [r3, #0]
 800ae8e:	4a11      	ldr	r2, [pc, #68]	@ (800aed4 <HAL_ADC_ConfigChannel+0x260>)
 800ae90:	fba2 2303 	umull	r2, r3, r2, r3
 800ae94:	0c9a      	lsrs	r2, r3, #18
 800ae96:	4613      	mov	r3, r2
 800ae98:	009b      	lsls	r3, r3, #2
 800ae9a:	4413      	add	r3, r2
 800ae9c:	005b      	lsls	r3, r3, #1
 800ae9e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 800aea0:	e002      	b.n	800aea8 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800aea2:	68bb      	ldr	r3, [r7, #8]
 800aea4:	3b01      	subs	r3, #1
 800aea6:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 800aea8:	68bb      	ldr	r3, [r7, #8]
 800aeaa:	2b00      	cmp	r3, #0
 800aeac:	d1f9      	bne.n	800aea2 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	2200      	movs	r2, #0
 800aeb2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 800aeb6:	2300      	movs	r3, #0
}
 800aeb8:	4618      	mov	r0, r3
 800aeba:	3714      	adds	r7, #20
 800aebc:	46bd      	mov	sp, r7
 800aebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aec2:	4770      	bx	lr
 800aec4:	40012300 	.word	0x40012300
 800aec8:	40012000 	.word	0x40012000
 800aecc:	10000012 	.word	0x10000012
 800aed0:	20000000 	.word	0x20000000
 800aed4:	431bde83 	.word	0x431bde83

0800aed8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 800aed8:	b480      	push	{r7}
 800aeda:	b085      	sub	sp, #20
 800aedc:	af00      	add	r7, sp, #0
 800aede:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800aee0:	4b79      	ldr	r3, [pc, #484]	@ (800b0c8 <ADC_Init+0x1f0>)
 800aee2:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800aee4:	68fb      	ldr	r3, [r7, #12]
 800aee6:	685b      	ldr	r3, [r3, #4]
 800aee8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800aeec:	68fb      	ldr	r3, [r7, #12]
 800aeee:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800aef0:	68fb      	ldr	r3, [r7, #12]
 800aef2:	685a      	ldr	r2, [r3, #4]
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	685b      	ldr	r3, [r3, #4]
 800aef8:	431a      	orrs	r2, r3
 800aefa:	68fb      	ldr	r3, [r7, #12]
 800aefc:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	681b      	ldr	r3, [r3, #0]
 800af02:	685a      	ldr	r2, [r3, #4]
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	681b      	ldr	r3, [r3, #0]
 800af08:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800af0c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	681b      	ldr	r3, [r3, #0]
 800af12:	6859      	ldr	r1, [r3, #4]
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	691b      	ldr	r3, [r3, #16]
 800af18:	021a      	lsls	r2, r3, #8
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	681b      	ldr	r3, [r3, #0]
 800af1e:	430a      	orrs	r2, r1
 800af20:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	681b      	ldr	r3, [r3, #0]
 800af26:	685a      	ldr	r2, [r3, #4]
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	681b      	ldr	r3, [r3, #0]
 800af2c:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 800af30:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	681b      	ldr	r3, [r3, #0]
 800af36:	6859      	ldr	r1, [r3, #4]
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	689a      	ldr	r2, [r3, #8]
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	681b      	ldr	r3, [r3, #0]
 800af40:	430a      	orrs	r2, r1
 800af42:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	681b      	ldr	r3, [r3, #0]
 800af48:	689a      	ldr	r2, [r3, #8]
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	681b      	ldr	r3, [r3, #0]
 800af4e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800af52:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	681b      	ldr	r3, [r3, #0]
 800af58:	6899      	ldr	r1, [r3, #8]
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	68da      	ldr	r2, [r3, #12]
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	681b      	ldr	r3, [r3, #0]
 800af62:	430a      	orrs	r2, r1
 800af64:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800af6a:	4a58      	ldr	r2, [pc, #352]	@ (800b0cc <ADC_Init+0x1f4>)
 800af6c:	4293      	cmp	r3, r2
 800af6e:	d022      	beq.n	800afb6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	681b      	ldr	r3, [r3, #0]
 800af74:	689a      	ldr	r2, [r3, #8]
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	681b      	ldr	r3, [r3, #0]
 800af7a:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800af7e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	681b      	ldr	r3, [r3, #0]
 800af84:	6899      	ldr	r1, [r3, #8]
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	681b      	ldr	r3, [r3, #0]
 800af8e:	430a      	orrs	r2, r1
 800af90:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	681b      	ldr	r3, [r3, #0]
 800af96:	689a      	ldr	r2, [r3, #8]
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	681b      	ldr	r3, [r3, #0]
 800af9c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800afa0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	681b      	ldr	r3, [r3, #0]
 800afa6:	6899      	ldr	r1, [r3, #8]
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	681b      	ldr	r3, [r3, #0]
 800afb0:	430a      	orrs	r2, r1
 800afb2:	609a      	str	r2, [r3, #8]
 800afb4:	e00f      	b.n	800afd6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	681b      	ldr	r3, [r3, #0]
 800afba:	689a      	ldr	r2, [r3, #8]
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	681b      	ldr	r3, [r3, #0]
 800afc0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800afc4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	681b      	ldr	r3, [r3, #0]
 800afca:	689a      	ldr	r2, [r3, #8]
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	681b      	ldr	r3, [r3, #0]
 800afd0:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800afd4:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	681b      	ldr	r3, [r3, #0]
 800afda:	689a      	ldr	r2, [r3, #8]
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	681b      	ldr	r3, [r3, #0]
 800afe0:	f022 0202 	bic.w	r2, r2, #2
 800afe4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	681b      	ldr	r3, [r3, #0]
 800afea:	6899      	ldr	r1, [r3, #8]
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	7e1b      	ldrb	r3, [r3, #24]
 800aff0:	005a      	lsls	r2, r3, #1
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	681b      	ldr	r3, [r3, #0]
 800aff6:	430a      	orrs	r2, r1
 800aff8:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	f893 3020 	ldrb.w	r3, [r3, #32]
 800b000:	2b00      	cmp	r3, #0
 800b002:	d01b      	beq.n	800b03c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	681b      	ldr	r3, [r3, #0]
 800b008:	685a      	ldr	r2, [r3, #4]
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	681b      	ldr	r3, [r3, #0]
 800b00e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800b012:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	681b      	ldr	r3, [r3, #0]
 800b018:	685a      	ldr	r2, [r3, #4]
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	681b      	ldr	r3, [r3, #0]
 800b01e:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800b022:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	681b      	ldr	r3, [r3, #0]
 800b028:	6859      	ldr	r1, [r3, #4]
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b02e:	3b01      	subs	r3, #1
 800b030:	035a      	lsls	r2, r3, #13
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	681b      	ldr	r3, [r3, #0]
 800b036:	430a      	orrs	r2, r1
 800b038:	605a      	str	r2, [r3, #4]
 800b03a:	e007      	b.n	800b04c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	681b      	ldr	r3, [r3, #0]
 800b040:	685a      	ldr	r2, [r3, #4]
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	681b      	ldr	r3, [r3, #0]
 800b046:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800b04a:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	681b      	ldr	r3, [r3, #0]
 800b050:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	681b      	ldr	r3, [r3, #0]
 800b056:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800b05a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	681b      	ldr	r3, [r3, #0]
 800b060:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	69db      	ldr	r3, [r3, #28]
 800b066:	3b01      	subs	r3, #1
 800b068:	051a      	lsls	r2, r3, #20
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	681b      	ldr	r3, [r3, #0]
 800b06e:	430a      	orrs	r2, r1
 800b070:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	681b      	ldr	r3, [r3, #0]
 800b076:	689a      	ldr	r2, [r3, #8]
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	681b      	ldr	r3, [r3, #0]
 800b07c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800b080:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	681b      	ldr	r3, [r3, #0]
 800b086:	6899      	ldr	r1, [r3, #8]
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800b08e:	025a      	lsls	r2, r3, #9
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	681b      	ldr	r3, [r3, #0]
 800b094:	430a      	orrs	r2, r1
 800b096:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	681b      	ldr	r3, [r3, #0]
 800b09c:	689a      	ldr	r2, [r3, #8]
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	681b      	ldr	r3, [r3, #0]
 800b0a2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b0a6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	681b      	ldr	r3, [r3, #0]
 800b0ac:	6899      	ldr	r1, [r3, #8]
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	695b      	ldr	r3, [r3, #20]
 800b0b2:	029a      	lsls	r2, r3, #10
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	681b      	ldr	r3, [r3, #0]
 800b0b8:	430a      	orrs	r2, r1
 800b0ba:	609a      	str	r2, [r3, #8]
}
 800b0bc:	bf00      	nop
 800b0be:	3714      	adds	r7, #20
 800b0c0:	46bd      	mov	sp, r7
 800b0c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0c6:	4770      	bx	lr
 800b0c8:	40012300 	.word	0x40012300
 800b0cc:	0f000001 	.word	0x0f000001

0800b0d0 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800b0d0:	b580      	push	{r7, lr}
 800b0d2:	b084      	sub	sp, #16
 800b0d4:	af00      	add	r7, sp, #0
 800b0d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	2b00      	cmp	r3, #0
 800b0dc:	d101      	bne.n	800b0e2 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800b0de:	2301      	movs	r3, #1
 800b0e0:	e0ed      	b.n	800b2be <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	f893 3020 	ldrb.w	r3, [r3, #32]
 800b0e8:	b2db      	uxtb	r3, r3
 800b0ea:	2b00      	cmp	r3, #0
 800b0ec:	d102      	bne.n	800b0f4 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800b0ee:	6878      	ldr	r0, [r7, #4]
 800b0f0:	f7f6 f9e8 	bl	80014c4 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	681b      	ldr	r3, [r3, #0]
 800b0f8:	681a      	ldr	r2, [r3, #0]
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	681b      	ldr	r3, [r3, #0]
 800b0fe:	f042 0201 	orr.w	r2, r2, #1
 800b102:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800b104:	f7ff fba4 	bl	800a850 <HAL_GetTick>
 800b108:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800b10a:	e012      	b.n	800b132 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800b10c:	f7ff fba0 	bl	800a850 <HAL_GetTick>
 800b110:	4602      	mov	r2, r0
 800b112:	68fb      	ldr	r3, [r7, #12]
 800b114:	1ad3      	subs	r3, r2, r3
 800b116:	2b0a      	cmp	r3, #10
 800b118:	d90b      	bls.n	800b132 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b11e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	2205      	movs	r2, #5
 800b12a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800b12e:	2301      	movs	r3, #1
 800b130:	e0c5      	b.n	800b2be <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	681b      	ldr	r3, [r3, #0]
 800b136:	685b      	ldr	r3, [r3, #4]
 800b138:	f003 0301 	and.w	r3, r3, #1
 800b13c:	2b00      	cmp	r3, #0
 800b13e:	d0e5      	beq.n	800b10c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	681b      	ldr	r3, [r3, #0]
 800b144:	681a      	ldr	r2, [r3, #0]
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	681b      	ldr	r3, [r3, #0]
 800b14a:	f022 0202 	bic.w	r2, r2, #2
 800b14e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800b150:	f7ff fb7e 	bl	800a850 <HAL_GetTick>
 800b154:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800b156:	e012      	b.n	800b17e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800b158:	f7ff fb7a 	bl	800a850 <HAL_GetTick>
 800b15c:	4602      	mov	r2, r0
 800b15e:	68fb      	ldr	r3, [r7, #12]
 800b160:	1ad3      	subs	r3, r2, r3
 800b162:	2b0a      	cmp	r3, #10
 800b164:	d90b      	bls.n	800b17e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b16a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	2205      	movs	r2, #5
 800b176:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800b17a:	2301      	movs	r3, #1
 800b17c:	e09f      	b.n	800b2be <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	681b      	ldr	r3, [r3, #0]
 800b182:	685b      	ldr	r3, [r3, #4]
 800b184:	f003 0302 	and.w	r3, r3, #2
 800b188:	2b00      	cmp	r3, #0
 800b18a:	d1e5      	bne.n	800b158 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	7e1b      	ldrb	r3, [r3, #24]
 800b190:	2b01      	cmp	r3, #1
 800b192:	d108      	bne.n	800b1a6 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	681b      	ldr	r3, [r3, #0]
 800b198:	681a      	ldr	r2, [r3, #0]
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	681b      	ldr	r3, [r3, #0]
 800b19e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800b1a2:	601a      	str	r2, [r3, #0]
 800b1a4:	e007      	b.n	800b1b6 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	681b      	ldr	r3, [r3, #0]
 800b1aa:	681a      	ldr	r2, [r3, #0]
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	681b      	ldr	r3, [r3, #0]
 800b1b0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800b1b4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	7e5b      	ldrb	r3, [r3, #25]
 800b1ba:	2b01      	cmp	r3, #1
 800b1bc:	d108      	bne.n	800b1d0 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	681b      	ldr	r3, [r3, #0]
 800b1c2:	681a      	ldr	r2, [r3, #0]
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	681b      	ldr	r3, [r3, #0]
 800b1c8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b1cc:	601a      	str	r2, [r3, #0]
 800b1ce:	e007      	b.n	800b1e0 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	681b      	ldr	r3, [r3, #0]
 800b1d4:	681a      	ldr	r2, [r3, #0]
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	681b      	ldr	r3, [r3, #0]
 800b1da:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800b1de:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	7e9b      	ldrb	r3, [r3, #26]
 800b1e4:	2b01      	cmp	r3, #1
 800b1e6:	d108      	bne.n	800b1fa <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	681b      	ldr	r3, [r3, #0]
 800b1ec:	681a      	ldr	r2, [r3, #0]
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	681b      	ldr	r3, [r3, #0]
 800b1f2:	f042 0220 	orr.w	r2, r2, #32
 800b1f6:	601a      	str	r2, [r3, #0]
 800b1f8:	e007      	b.n	800b20a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	681b      	ldr	r3, [r3, #0]
 800b1fe:	681a      	ldr	r2, [r3, #0]
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	681b      	ldr	r3, [r3, #0]
 800b204:	f022 0220 	bic.w	r2, r2, #32
 800b208:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	7edb      	ldrb	r3, [r3, #27]
 800b20e:	2b01      	cmp	r3, #1
 800b210:	d108      	bne.n	800b224 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	681b      	ldr	r3, [r3, #0]
 800b216:	681a      	ldr	r2, [r3, #0]
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	681b      	ldr	r3, [r3, #0]
 800b21c:	f022 0210 	bic.w	r2, r2, #16
 800b220:	601a      	str	r2, [r3, #0]
 800b222:	e007      	b.n	800b234 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	681b      	ldr	r3, [r3, #0]
 800b228:	681a      	ldr	r2, [r3, #0]
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	681b      	ldr	r3, [r3, #0]
 800b22e:	f042 0210 	orr.w	r2, r2, #16
 800b232:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	7f1b      	ldrb	r3, [r3, #28]
 800b238:	2b01      	cmp	r3, #1
 800b23a:	d108      	bne.n	800b24e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	681b      	ldr	r3, [r3, #0]
 800b240:	681a      	ldr	r2, [r3, #0]
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	681b      	ldr	r3, [r3, #0]
 800b246:	f042 0208 	orr.w	r2, r2, #8
 800b24a:	601a      	str	r2, [r3, #0]
 800b24c:	e007      	b.n	800b25e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	681b      	ldr	r3, [r3, #0]
 800b252:	681a      	ldr	r2, [r3, #0]
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	681b      	ldr	r3, [r3, #0]
 800b258:	f022 0208 	bic.w	r2, r2, #8
 800b25c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	7f5b      	ldrb	r3, [r3, #29]
 800b262:	2b01      	cmp	r3, #1
 800b264:	d108      	bne.n	800b278 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	681b      	ldr	r3, [r3, #0]
 800b26a:	681a      	ldr	r2, [r3, #0]
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	681b      	ldr	r3, [r3, #0]
 800b270:	f042 0204 	orr.w	r2, r2, #4
 800b274:	601a      	str	r2, [r3, #0]
 800b276:	e007      	b.n	800b288 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	681b      	ldr	r3, [r3, #0]
 800b27c:	681a      	ldr	r2, [r3, #0]
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	681b      	ldr	r3, [r3, #0]
 800b282:	f022 0204 	bic.w	r2, r2, #4
 800b286:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	689a      	ldr	r2, [r3, #8]
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	68db      	ldr	r3, [r3, #12]
 800b290:	431a      	orrs	r2, r3
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	691b      	ldr	r3, [r3, #16]
 800b296:	431a      	orrs	r2, r3
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	695b      	ldr	r3, [r3, #20]
 800b29c:	ea42 0103 	orr.w	r1, r2, r3
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	685b      	ldr	r3, [r3, #4]
 800b2a4:	1e5a      	subs	r2, r3, #1
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	681b      	ldr	r3, [r3, #0]
 800b2aa:	430a      	orrs	r2, r1
 800b2ac:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	2200      	movs	r2, #0
 800b2b2:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	2201      	movs	r2, #1
 800b2b8:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800b2bc:	2300      	movs	r3, #0
}
 800b2be:	4618      	mov	r0, r3
 800b2c0:	3710      	adds	r7, #16
 800b2c2:	46bd      	mov	sp, r7
 800b2c4:	bd80      	pop	{r7, pc}
	...

0800b2c8 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 800b2c8:	b480      	push	{r7}
 800b2ca:	b087      	sub	sp, #28
 800b2cc:	af00      	add	r7, sp, #0
 800b2ce:	6078      	str	r0, [r7, #4]
 800b2d0:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	681b      	ldr	r3, [r3, #0]
 800b2d6:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	f893 3020 	ldrb.w	r3, [r3, #32]
 800b2de:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 800b2e0:	7cfb      	ldrb	r3, [r7, #19]
 800b2e2:	2b01      	cmp	r3, #1
 800b2e4:	d003      	beq.n	800b2ee <HAL_CAN_ConfigFilter+0x26>
 800b2e6:	7cfb      	ldrb	r3, [r7, #19]
 800b2e8:	2b02      	cmp	r3, #2
 800b2ea:	f040 80be 	bne.w	800b46a <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 800b2ee:	4b65      	ldr	r3, [pc, #404]	@ (800b484 <HAL_CAN_ConfigFilter+0x1bc>)
 800b2f0:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800b2f2:	697b      	ldr	r3, [r7, #20]
 800b2f4:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800b2f8:	f043 0201 	orr.w	r2, r3, #1
 800b2fc:	697b      	ldr	r3, [r7, #20]
 800b2fe:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 800b302:	697b      	ldr	r3, [r7, #20]
 800b304:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800b308:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 800b30c:	697b      	ldr	r3, [r7, #20]
 800b30e:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 800b312:	697b      	ldr	r3, [r7, #20]
 800b314:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 800b318:	683b      	ldr	r3, [r7, #0]
 800b31a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b31c:	021b      	lsls	r3, r3, #8
 800b31e:	431a      	orrs	r2, r3
 800b320:	697b      	ldr	r3, [r7, #20]
 800b322:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800b326:	683b      	ldr	r3, [r7, #0]
 800b328:	695b      	ldr	r3, [r3, #20]
 800b32a:	f003 031f 	and.w	r3, r3, #31
 800b32e:	2201      	movs	r2, #1
 800b330:	fa02 f303 	lsl.w	r3, r2, r3
 800b334:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800b336:	697b      	ldr	r3, [r7, #20]
 800b338:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 800b33c:	68fb      	ldr	r3, [r7, #12]
 800b33e:	43db      	mvns	r3, r3
 800b340:	401a      	ands	r2, r3
 800b342:	697b      	ldr	r3, [r7, #20]
 800b344:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800b348:	683b      	ldr	r3, [r7, #0]
 800b34a:	69db      	ldr	r3, [r3, #28]
 800b34c:	2b00      	cmp	r3, #0
 800b34e:	d123      	bne.n	800b398 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800b350:	697b      	ldr	r3, [r7, #20]
 800b352:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 800b356:	68fb      	ldr	r3, [r7, #12]
 800b358:	43db      	mvns	r3, r3
 800b35a:	401a      	ands	r2, r3
 800b35c:	697b      	ldr	r3, [r7, #20]
 800b35e:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800b362:	683b      	ldr	r3, [r7, #0]
 800b364:	68db      	ldr	r3, [r3, #12]
 800b366:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800b368:	683b      	ldr	r3, [r7, #0]
 800b36a:	685b      	ldr	r3, [r3, #4]
 800b36c:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800b36e:	683a      	ldr	r2, [r7, #0]
 800b370:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800b372:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800b374:	697b      	ldr	r3, [r7, #20]
 800b376:	3248      	adds	r2, #72	@ 0x48
 800b378:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800b37c:	683b      	ldr	r3, [r7, #0]
 800b37e:	689b      	ldr	r3, [r3, #8]
 800b380:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800b382:	683b      	ldr	r3, [r7, #0]
 800b384:	681b      	ldr	r3, [r3, #0]
 800b386:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800b388:	683b      	ldr	r3, [r7, #0]
 800b38a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800b38c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800b38e:	6979      	ldr	r1, [r7, #20]
 800b390:	3348      	adds	r3, #72	@ 0x48
 800b392:	00db      	lsls	r3, r3, #3
 800b394:	440b      	add	r3, r1
 800b396:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800b398:	683b      	ldr	r3, [r7, #0]
 800b39a:	69db      	ldr	r3, [r3, #28]
 800b39c:	2b01      	cmp	r3, #1
 800b39e:	d122      	bne.n	800b3e6 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800b3a0:	697b      	ldr	r3, [r7, #20]
 800b3a2:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 800b3a6:	68fb      	ldr	r3, [r7, #12]
 800b3a8:	431a      	orrs	r2, r3
 800b3aa:	697b      	ldr	r3, [r7, #20]
 800b3ac:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800b3b0:	683b      	ldr	r3, [r7, #0]
 800b3b2:	681b      	ldr	r3, [r3, #0]
 800b3b4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800b3b6:	683b      	ldr	r3, [r7, #0]
 800b3b8:	685b      	ldr	r3, [r3, #4]
 800b3ba:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800b3bc:	683a      	ldr	r2, [r7, #0]
 800b3be:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800b3c0:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800b3c2:	697b      	ldr	r3, [r7, #20]
 800b3c4:	3248      	adds	r2, #72	@ 0x48
 800b3c6:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800b3ca:	683b      	ldr	r3, [r7, #0]
 800b3cc:	689b      	ldr	r3, [r3, #8]
 800b3ce:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800b3d0:	683b      	ldr	r3, [r7, #0]
 800b3d2:	68db      	ldr	r3, [r3, #12]
 800b3d4:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800b3d6:	683b      	ldr	r3, [r7, #0]
 800b3d8:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800b3da:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800b3dc:	6979      	ldr	r1, [r7, #20]
 800b3de:	3348      	adds	r3, #72	@ 0x48
 800b3e0:	00db      	lsls	r3, r3, #3
 800b3e2:	440b      	add	r3, r1
 800b3e4:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800b3e6:	683b      	ldr	r3, [r7, #0]
 800b3e8:	699b      	ldr	r3, [r3, #24]
 800b3ea:	2b00      	cmp	r3, #0
 800b3ec:	d109      	bne.n	800b402 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800b3ee:	697b      	ldr	r3, [r7, #20]
 800b3f0:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800b3f4:	68fb      	ldr	r3, [r7, #12]
 800b3f6:	43db      	mvns	r3, r3
 800b3f8:	401a      	ands	r2, r3
 800b3fa:	697b      	ldr	r3, [r7, #20]
 800b3fc:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 800b400:	e007      	b.n	800b412 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800b402:	697b      	ldr	r3, [r7, #20]
 800b404:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800b408:	68fb      	ldr	r3, [r7, #12]
 800b40a:	431a      	orrs	r2, r3
 800b40c:	697b      	ldr	r3, [r7, #20]
 800b40e:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800b412:	683b      	ldr	r3, [r7, #0]
 800b414:	691b      	ldr	r3, [r3, #16]
 800b416:	2b00      	cmp	r3, #0
 800b418:	d109      	bne.n	800b42e <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800b41a:	697b      	ldr	r3, [r7, #20]
 800b41c:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 800b420:	68fb      	ldr	r3, [r7, #12]
 800b422:	43db      	mvns	r3, r3
 800b424:	401a      	ands	r2, r3
 800b426:	697b      	ldr	r3, [r7, #20]
 800b428:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 800b42c:	e007      	b.n	800b43e <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800b42e:	697b      	ldr	r3, [r7, #20]
 800b430:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 800b434:	68fb      	ldr	r3, [r7, #12]
 800b436:	431a      	orrs	r2, r3
 800b438:	697b      	ldr	r3, [r7, #20]
 800b43a:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800b43e:	683b      	ldr	r3, [r7, #0]
 800b440:	6a1b      	ldr	r3, [r3, #32]
 800b442:	2b01      	cmp	r3, #1
 800b444:	d107      	bne.n	800b456 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800b446:	697b      	ldr	r3, [r7, #20]
 800b448:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 800b44c:	68fb      	ldr	r3, [r7, #12]
 800b44e:	431a      	orrs	r2, r3
 800b450:	697b      	ldr	r3, [r7, #20]
 800b452:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800b456:	697b      	ldr	r3, [r7, #20]
 800b458:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800b45c:	f023 0201 	bic.w	r2, r3, #1
 800b460:	697b      	ldr	r3, [r7, #20]
 800b462:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 800b466:	2300      	movs	r3, #0
 800b468:	e006      	b.n	800b478 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b46e:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800b476:	2301      	movs	r3, #1
  }
}
 800b478:	4618      	mov	r0, r3
 800b47a:	371c      	adds	r7, #28
 800b47c:	46bd      	mov	sp, r7
 800b47e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b482:	4770      	bx	lr
 800b484:	40006400 	.word	0x40006400

0800b488 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800b488:	b580      	push	{r7, lr}
 800b48a:	b084      	sub	sp, #16
 800b48c:	af00      	add	r7, sp, #0
 800b48e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	f893 3020 	ldrb.w	r3, [r3, #32]
 800b496:	b2db      	uxtb	r3, r3
 800b498:	2b01      	cmp	r3, #1
 800b49a:	d12e      	bne.n	800b4fa <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	2202      	movs	r2, #2
 800b4a0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	681b      	ldr	r3, [r3, #0]
 800b4a8:	681a      	ldr	r2, [r3, #0]
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	681b      	ldr	r3, [r3, #0]
 800b4ae:	f022 0201 	bic.w	r2, r2, #1
 800b4b2:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800b4b4:	f7ff f9cc 	bl	800a850 <HAL_GetTick>
 800b4b8:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800b4ba:	e012      	b.n	800b4e2 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800b4bc:	f7ff f9c8 	bl	800a850 <HAL_GetTick>
 800b4c0:	4602      	mov	r2, r0
 800b4c2:	68fb      	ldr	r3, [r7, #12]
 800b4c4:	1ad3      	subs	r3, r2, r3
 800b4c6:	2b0a      	cmp	r3, #10
 800b4c8:	d90b      	bls.n	800b4e2 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b4ce:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	2205      	movs	r2, #5
 800b4da:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800b4de:	2301      	movs	r3, #1
 800b4e0:	e012      	b.n	800b508 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	681b      	ldr	r3, [r3, #0]
 800b4e6:	685b      	ldr	r3, [r3, #4]
 800b4e8:	f003 0301 	and.w	r3, r3, #1
 800b4ec:	2b00      	cmp	r3, #0
 800b4ee:	d1e5      	bne.n	800b4bc <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	2200      	movs	r2, #0
 800b4f4:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 800b4f6:	2300      	movs	r3, #0
 800b4f8:	e006      	b.n	800b508 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b4fe:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800b506:	2301      	movs	r3, #1
  }
}
 800b508:	4618      	mov	r0, r3
 800b50a:	3710      	adds	r7, #16
 800b50c:	46bd      	mov	sp, r7
 800b50e:	bd80      	pop	{r7, pc}

0800b510 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 800b510:	b480      	push	{r7}
 800b512:	b089      	sub	sp, #36	@ 0x24
 800b514:	af00      	add	r7, sp, #0
 800b516:	60f8      	str	r0, [r7, #12]
 800b518:	60b9      	str	r1, [r7, #8]
 800b51a:	607a      	str	r2, [r7, #4]
 800b51c:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800b51e:	68fb      	ldr	r3, [r7, #12]
 800b520:	f893 3020 	ldrb.w	r3, [r3, #32]
 800b524:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800b526:	68fb      	ldr	r3, [r7, #12]
 800b528:	681b      	ldr	r3, [r3, #0]
 800b52a:	689b      	ldr	r3, [r3, #8]
 800b52c:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800b52e:	7ffb      	ldrb	r3, [r7, #31]
 800b530:	2b01      	cmp	r3, #1
 800b532:	d003      	beq.n	800b53c <HAL_CAN_AddTxMessage+0x2c>
 800b534:	7ffb      	ldrb	r3, [r7, #31]
 800b536:	2b02      	cmp	r3, #2
 800b538:	f040 80ad 	bne.w	800b696 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800b53c:	69bb      	ldr	r3, [r7, #24]
 800b53e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800b542:	2b00      	cmp	r3, #0
 800b544:	d10a      	bne.n	800b55c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800b546:	69bb      	ldr	r3, [r7, #24]
 800b548:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800b54c:	2b00      	cmp	r3, #0
 800b54e:	d105      	bne.n	800b55c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 800b550:	69bb      	ldr	r3, [r7, #24]
 800b552:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800b556:	2b00      	cmp	r3, #0
 800b558:	f000 8095 	beq.w	800b686 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 800b55c:	69bb      	ldr	r3, [r7, #24]
 800b55e:	0e1b      	lsrs	r3, r3, #24
 800b560:	f003 0303 	and.w	r3, r3, #3
 800b564:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 800b566:	2201      	movs	r2, #1
 800b568:	697b      	ldr	r3, [r7, #20]
 800b56a:	409a      	lsls	r2, r3
 800b56c:	683b      	ldr	r3, [r7, #0]
 800b56e:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 800b570:	68bb      	ldr	r3, [r7, #8]
 800b572:	689b      	ldr	r3, [r3, #8]
 800b574:	2b00      	cmp	r3, #0
 800b576:	d10d      	bne.n	800b594 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800b578:	68bb      	ldr	r3, [r7, #8]
 800b57a:	681b      	ldr	r3, [r3, #0]
 800b57c:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 800b57e:	68bb      	ldr	r3, [r7, #8]
 800b580:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800b582:	68f9      	ldr	r1, [r7, #12]
 800b584:	6809      	ldr	r1, [r1, #0]
 800b586:	431a      	orrs	r2, r3
 800b588:	697b      	ldr	r3, [r7, #20]
 800b58a:	3318      	adds	r3, #24
 800b58c:	011b      	lsls	r3, r3, #4
 800b58e:	440b      	add	r3, r1
 800b590:	601a      	str	r2, [r3, #0]
 800b592:	e00f      	b.n	800b5b4 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800b594:	68bb      	ldr	r3, [r7, #8]
 800b596:	685b      	ldr	r3, [r3, #4]
 800b598:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 800b59a:	68bb      	ldr	r3, [r7, #8]
 800b59c:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800b59e:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 800b5a0:	68bb      	ldr	r3, [r7, #8]
 800b5a2:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800b5a4:	68f9      	ldr	r1, [r7, #12]
 800b5a6:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 800b5a8:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800b5aa:	697b      	ldr	r3, [r7, #20]
 800b5ac:	3318      	adds	r3, #24
 800b5ae:	011b      	lsls	r3, r3, #4
 800b5b0:	440b      	add	r3, r1
 800b5b2:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 800b5b4:	68fb      	ldr	r3, [r7, #12]
 800b5b6:	6819      	ldr	r1, [r3, #0]
 800b5b8:	68bb      	ldr	r3, [r7, #8]
 800b5ba:	691a      	ldr	r2, [r3, #16]
 800b5bc:	697b      	ldr	r3, [r7, #20]
 800b5be:	3318      	adds	r3, #24
 800b5c0:	011b      	lsls	r3, r3, #4
 800b5c2:	440b      	add	r3, r1
 800b5c4:	3304      	adds	r3, #4
 800b5c6:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 800b5c8:	68bb      	ldr	r3, [r7, #8]
 800b5ca:	7d1b      	ldrb	r3, [r3, #20]
 800b5cc:	2b01      	cmp	r3, #1
 800b5ce:	d111      	bne.n	800b5f4 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800b5d0:	68fb      	ldr	r3, [r7, #12]
 800b5d2:	681a      	ldr	r2, [r3, #0]
 800b5d4:	697b      	ldr	r3, [r7, #20]
 800b5d6:	3318      	adds	r3, #24
 800b5d8:	011b      	lsls	r3, r3, #4
 800b5da:	4413      	add	r3, r2
 800b5dc:	3304      	adds	r3, #4
 800b5de:	681b      	ldr	r3, [r3, #0]
 800b5e0:	68fa      	ldr	r2, [r7, #12]
 800b5e2:	6811      	ldr	r1, [r2, #0]
 800b5e4:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800b5e8:	697b      	ldr	r3, [r7, #20]
 800b5ea:	3318      	adds	r3, #24
 800b5ec:	011b      	lsls	r3, r3, #4
 800b5ee:	440b      	add	r3, r1
 800b5f0:	3304      	adds	r3, #4
 800b5f2:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	3307      	adds	r3, #7
 800b5f8:	781b      	ldrb	r3, [r3, #0]
 800b5fa:	061a      	lsls	r2, r3, #24
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	3306      	adds	r3, #6
 800b600:	781b      	ldrb	r3, [r3, #0]
 800b602:	041b      	lsls	r3, r3, #16
 800b604:	431a      	orrs	r2, r3
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	3305      	adds	r3, #5
 800b60a:	781b      	ldrb	r3, [r3, #0]
 800b60c:	021b      	lsls	r3, r3, #8
 800b60e:	4313      	orrs	r3, r2
 800b610:	687a      	ldr	r2, [r7, #4]
 800b612:	3204      	adds	r2, #4
 800b614:	7812      	ldrb	r2, [r2, #0]
 800b616:	4610      	mov	r0, r2
 800b618:	68fa      	ldr	r2, [r7, #12]
 800b61a:	6811      	ldr	r1, [r2, #0]
 800b61c:	ea43 0200 	orr.w	r2, r3, r0
 800b620:	697b      	ldr	r3, [r7, #20]
 800b622:	011b      	lsls	r3, r3, #4
 800b624:	440b      	add	r3, r1
 800b626:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 800b62a:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	3303      	adds	r3, #3
 800b630:	781b      	ldrb	r3, [r3, #0]
 800b632:	061a      	lsls	r2, r3, #24
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	3302      	adds	r3, #2
 800b638:	781b      	ldrb	r3, [r3, #0]
 800b63a:	041b      	lsls	r3, r3, #16
 800b63c:	431a      	orrs	r2, r3
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	3301      	adds	r3, #1
 800b642:	781b      	ldrb	r3, [r3, #0]
 800b644:	021b      	lsls	r3, r3, #8
 800b646:	4313      	orrs	r3, r2
 800b648:	687a      	ldr	r2, [r7, #4]
 800b64a:	7812      	ldrb	r2, [r2, #0]
 800b64c:	4610      	mov	r0, r2
 800b64e:	68fa      	ldr	r2, [r7, #12]
 800b650:	6811      	ldr	r1, [r2, #0]
 800b652:	ea43 0200 	orr.w	r2, r3, r0
 800b656:	697b      	ldr	r3, [r7, #20]
 800b658:	011b      	lsls	r3, r3, #4
 800b65a:	440b      	add	r3, r1
 800b65c:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 800b660:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 800b662:	68fb      	ldr	r3, [r7, #12]
 800b664:	681a      	ldr	r2, [r3, #0]
 800b666:	697b      	ldr	r3, [r7, #20]
 800b668:	3318      	adds	r3, #24
 800b66a:	011b      	lsls	r3, r3, #4
 800b66c:	4413      	add	r3, r2
 800b66e:	681b      	ldr	r3, [r3, #0]
 800b670:	68fa      	ldr	r2, [r7, #12]
 800b672:	6811      	ldr	r1, [r2, #0]
 800b674:	f043 0201 	orr.w	r2, r3, #1
 800b678:	697b      	ldr	r3, [r7, #20]
 800b67a:	3318      	adds	r3, #24
 800b67c:	011b      	lsls	r3, r3, #4
 800b67e:	440b      	add	r3, r1
 800b680:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 800b682:	2300      	movs	r3, #0
 800b684:	e00e      	b.n	800b6a4 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800b686:	68fb      	ldr	r3, [r7, #12]
 800b688:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b68a:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800b68e:	68fb      	ldr	r3, [r7, #12]
 800b690:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 800b692:	2301      	movs	r3, #1
 800b694:	e006      	b.n	800b6a4 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800b696:	68fb      	ldr	r3, [r7, #12]
 800b698:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b69a:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800b69e:	68fb      	ldr	r3, [r7, #12]
 800b6a0:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800b6a2:	2301      	movs	r3, #1
  }
}
 800b6a4:	4618      	mov	r0, r3
 800b6a6:	3724      	adds	r7, #36	@ 0x24
 800b6a8:	46bd      	mov	sp, r7
 800b6aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6ae:	4770      	bx	lr

0800b6b0 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800b6b0:	b480      	push	{r7}
 800b6b2:	b087      	sub	sp, #28
 800b6b4:	af00      	add	r7, sp, #0
 800b6b6:	60f8      	str	r0, [r7, #12]
 800b6b8:	60b9      	str	r1, [r7, #8]
 800b6ba:	607a      	str	r2, [r7, #4]
 800b6bc:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800b6be:	68fb      	ldr	r3, [r7, #12]
 800b6c0:	f893 3020 	ldrb.w	r3, [r3, #32]
 800b6c4:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800b6c6:	7dfb      	ldrb	r3, [r7, #23]
 800b6c8:	2b01      	cmp	r3, #1
 800b6ca:	d003      	beq.n	800b6d4 <HAL_CAN_GetRxMessage+0x24>
 800b6cc:	7dfb      	ldrb	r3, [r7, #23]
 800b6ce:	2b02      	cmp	r3, #2
 800b6d0:	f040 8103 	bne.w	800b8da <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800b6d4:	68bb      	ldr	r3, [r7, #8]
 800b6d6:	2b00      	cmp	r3, #0
 800b6d8:	d10e      	bne.n	800b6f8 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800b6da:	68fb      	ldr	r3, [r7, #12]
 800b6dc:	681b      	ldr	r3, [r3, #0]
 800b6de:	68db      	ldr	r3, [r3, #12]
 800b6e0:	f003 0303 	and.w	r3, r3, #3
 800b6e4:	2b00      	cmp	r3, #0
 800b6e6:	d116      	bne.n	800b716 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800b6e8:	68fb      	ldr	r3, [r7, #12]
 800b6ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b6ec:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800b6f0:	68fb      	ldr	r3, [r7, #12]
 800b6f2:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 800b6f4:	2301      	movs	r3, #1
 800b6f6:	e0f7      	b.n	800b8e8 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800b6f8:	68fb      	ldr	r3, [r7, #12]
 800b6fa:	681b      	ldr	r3, [r3, #0]
 800b6fc:	691b      	ldr	r3, [r3, #16]
 800b6fe:	f003 0303 	and.w	r3, r3, #3
 800b702:	2b00      	cmp	r3, #0
 800b704:	d107      	bne.n	800b716 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800b706:	68fb      	ldr	r3, [r7, #12]
 800b708:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b70a:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800b70e:	68fb      	ldr	r3, [r7, #12]
 800b710:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 800b712:	2301      	movs	r3, #1
 800b714:	e0e8      	b.n	800b8e8 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800b716:	68fb      	ldr	r3, [r7, #12]
 800b718:	681a      	ldr	r2, [r3, #0]
 800b71a:	68bb      	ldr	r3, [r7, #8]
 800b71c:	331b      	adds	r3, #27
 800b71e:	011b      	lsls	r3, r3, #4
 800b720:	4413      	add	r3, r2
 800b722:	681b      	ldr	r3, [r3, #0]
 800b724:	f003 0204 	and.w	r2, r3, #4
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	689b      	ldr	r3, [r3, #8]
 800b730:	2b00      	cmp	r3, #0
 800b732:	d10c      	bne.n	800b74e <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800b734:	68fb      	ldr	r3, [r7, #12]
 800b736:	681a      	ldr	r2, [r3, #0]
 800b738:	68bb      	ldr	r3, [r7, #8]
 800b73a:	331b      	adds	r3, #27
 800b73c:	011b      	lsls	r3, r3, #4
 800b73e:	4413      	add	r3, r2
 800b740:	681b      	ldr	r3, [r3, #0]
 800b742:	0d5b      	lsrs	r3, r3, #21
 800b744:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	601a      	str	r2, [r3, #0]
 800b74c:	e00b      	b.n	800b766 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800b74e:	68fb      	ldr	r3, [r7, #12]
 800b750:	681a      	ldr	r2, [r3, #0]
 800b752:	68bb      	ldr	r3, [r7, #8]
 800b754:	331b      	adds	r3, #27
 800b756:	011b      	lsls	r3, r3, #4
 800b758:	4413      	add	r3, r2
 800b75a:	681b      	ldr	r3, [r3, #0]
 800b75c:	08db      	lsrs	r3, r3, #3
 800b75e:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 800b766:	68fb      	ldr	r3, [r7, #12]
 800b768:	681a      	ldr	r2, [r3, #0]
 800b76a:	68bb      	ldr	r3, [r7, #8]
 800b76c:	331b      	adds	r3, #27
 800b76e:	011b      	lsls	r3, r3, #4
 800b770:	4413      	add	r3, r2
 800b772:	681b      	ldr	r3, [r3, #0]
 800b774:	f003 0202 	and.w	r2, r3, #2
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 800b77c:	68fb      	ldr	r3, [r7, #12]
 800b77e:	681a      	ldr	r2, [r3, #0]
 800b780:	68bb      	ldr	r3, [r7, #8]
 800b782:	331b      	adds	r3, #27
 800b784:	011b      	lsls	r3, r3, #4
 800b786:	4413      	add	r3, r2
 800b788:	3304      	adds	r3, #4
 800b78a:	681b      	ldr	r3, [r3, #0]
 800b78c:	f003 0308 	and.w	r3, r3, #8
 800b790:	2b00      	cmp	r3, #0
 800b792:	d003      	beq.n	800b79c <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	2208      	movs	r2, #8
 800b798:	611a      	str	r2, [r3, #16]
 800b79a:	e00b      	b.n	800b7b4 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800b79c:	68fb      	ldr	r3, [r7, #12]
 800b79e:	681a      	ldr	r2, [r3, #0]
 800b7a0:	68bb      	ldr	r3, [r7, #8]
 800b7a2:	331b      	adds	r3, #27
 800b7a4:	011b      	lsls	r3, r3, #4
 800b7a6:	4413      	add	r3, r2
 800b7a8:	3304      	adds	r3, #4
 800b7aa:	681b      	ldr	r3, [r3, #0]
 800b7ac:	f003 020f 	and.w	r2, r3, #15
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800b7b4:	68fb      	ldr	r3, [r7, #12]
 800b7b6:	681a      	ldr	r2, [r3, #0]
 800b7b8:	68bb      	ldr	r3, [r7, #8]
 800b7ba:	331b      	adds	r3, #27
 800b7bc:	011b      	lsls	r3, r3, #4
 800b7be:	4413      	add	r3, r2
 800b7c0:	3304      	adds	r3, #4
 800b7c2:	681b      	ldr	r3, [r3, #0]
 800b7c4:	0a1b      	lsrs	r3, r3, #8
 800b7c6:	b2da      	uxtb	r2, r3
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800b7cc:	68fb      	ldr	r3, [r7, #12]
 800b7ce:	681a      	ldr	r2, [r3, #0]
 800b7d0:	68bb      	ldr	r3, [r7, #8]
 800b7d2:	331b      	adds	r3, #27
 800b7d4:	011b      	lsls	r3, r3, #4
 800b7d6:	4413      	add	r3, r2
 800b7d8:	3304      	adds	r3, #4
 800b7da:	681b      	ldr	r3, [r3, #0]
 800b7dc:	0c1b      	lsrs	r3, r3, #16
 800b7de:	b29a      	uxth	r2, r3
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800b7e4:	68fb      	ldr	r3, [r7, #12]
 800b7e6:	681a      	ldr	r2, [r3, #0]
 800b7e8:	68bb      	ldr	r3, [r7, #8]
 800b7ea:	011b      	lsls	r3, r3, #4
 800b7ec:	4413      	add	r3, r2
 800b7ee:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800b7f2:	681b      	ldr	r3, [r3, #0]
 800b7f4:	b2da      	uxtb	r2, r3
 800b7f6:	683b      	ldr	r3, [r7, #0]
 800b7f8:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800b7fa:	68fb      	ldr	r3, [r7, #12]
 800b7fc:	681a      	ldr	r2, [r3, #0]
 800b7fe:	68bb      	ldr	r3, [r7, #8]
 800b800:	011b      	lsls	r3, r3, #4
 800b802:	4413      	add	r3, r2
 800b804:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800b808:	681b      	ldr	r3, [r3, #0]
 800b80a:	0a1a      	lsrs	r2, r3, #8
 800b80c:	683b      	ldr	r3, [r7, #0]
 800b80e:	3301      	adds	r3, #1
 800b810:	b2d2      	uxtb	r2, r2
 800b812:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800b814:	68fb      	ldr	r3, [r7, #12]
 800b816:	681a      	ldr	r2, [r3, #0]
 800b818:	68bb      	ldr	r3, [r7, #8]
 800b81a:	011b      	lsls	r3, r3, #4
 800b81c:	4413      	add	r3, r2
 800b81e:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800b822:	681b      	ldr	r3, [r3, #0]
 800b824:	0c1a      	lsrs	r2, r3, #16
 800b826:	683b      	ldr	r3, [r7, #0]
 800b828:	3302      	adds	r3, #2
 800b82a:	b2d2      	uxtb	r2, r2
 800b82c:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800b82e:	68fb      	ldr	r3, [r7, #12]
 800b830:	681a      	ldr	r2, [r3, #0]
 800b832:	68bb      	ldr	r3, [r7, #8]
 800b834:	011b      	lsls	r3, r3, #4
 800b836:	4413      	add	r3, r2
 800b838:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800b83c:	681b      	ldr	r3, [r3, #0]
 800b83e:	0e1a      	lsrs	r2, r3, #24
 800b840:	683b      	ldr	r3, [r7, #0]
 800b842:	3303      	adds	r3, #3
 800b844:	b2d2      	uxtb	r2, r2
 800b846:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800b848:	68fb      	ldr	r3, [r7, #12]
 800b84a:	681a      	ldr	r2, [r3, #0]
 800b84c:	68bb      	ldr	r3, [r7, #8]
 800b84e:	011b      	lsls	r3, r3, #4
 800b850:	4413      	add	r3, r2
 800b852:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800b856:	681a      	ldr	r2, [r3, #0]
 800b858:	683b      	ldr	r3, [r7, #0]
 800b85a:	3304      	adds	r3, #4
 800b85c:	b2d2      	uxtb	r2, r2
 800b85e:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800b860:	68fb      	ldr	r3, [r7, #12]
 800b862:	681a      	ldr	r2, [r3, #0]
 800b864:	68bb      	ldr	r3, [r7, #8]
 800b866:	011b      	lsls	r3, r3, #4
 800b868:	4413      	add	r3, r2
 800b86a:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800b86e:	681b      	ldr	r3, [r3, #0]
 800b870:	0a1a      	lsrs	r2, r3, #8
 800b872:	683b      	ldr	r3, [r7, #0]
 800b874:	3305      	adds	r3, #5
 800b876:	b2d2      	uxtb	r2, r2
 800b878:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800b87a:	68fb      	ldr	r3, [r7, #12]
 800b87c:	681a      	ldr	r2, [r3, #0]
 800b87e:	68bb      	ldr	r3, [r7, #8]
 800b880:	011b      	lsls	r3, r3, #4
 800b882:	4413      	add	r3, r2
 800b884:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800b888:	681b      	ldr	r3, [r3, #0]
 800b88a:	0c1a      	lsrs	r2, r3, #16
 800b88c:	683b      	ldr	r3, [r7, #0]
 800b88e:	3306      	adds	r3, #6
 800b890:	b2d2      	uxtb	r2, r2
 800b892:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800b894:	68fb      	ldr	r3, [r7, #12]
 800b896:	681a      	ldr	r2, [r3, #0]
 800b898:	68bb      	ldr	r3, [r7, #8]
 800b89a:	011b      	lsls	r3, r3, #4
 800b89c:	4413      	add	r3, r2
 800b89e:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800b8a2:	681b      	ldr	r3, [r3, #0]
 800b8a4:	0e1a      	lsrs	r2, r3, #24
 800b8a6:	683b      	ldr	r3, [r7, #0]
 800b8a8:	3307      	adds	r3, #7
 800b8aa:	b2d2      	uxtb	r2, r2
 800b8ac:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800b8ae:	68bb      	ldr	r3, [r7, #8]
 800b8b0:	2b00      	cmp	r3, #0
 800b8b2:	d108      	bne.n	800b8c6 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800b8b4:	68fb      	ldr	r3, [r7, #12]
 800b8b6:	681b      	ldr	r3, [r3, #0]
 800b8b8:	68da      	ldr	r2, [r3, #12]
 800b8ba:	68fb      	ldr	r3, [r7, #12]
 800b8bc:	681b      	ldr	r3, [r3, #0]
 800b8be:	f042 0220 	orr.w	r2, r2, #32
 800b8c2:	60da      	str	r2, [r3, #12]
 800b8c4:	e007      	b.n	800b8d6 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800b8c6:	68fb      	ldr	r3, [r7, #12]
 800b8c8:	681b      	ldr	r3, [r3, #0]
 800b8ca:	691a      	ldr	r2, [r3, #16]
 800b8cc:	68fb      	ldr	r3, [r7, #12]
 800b8ce:	681b      	ldr	r3, [r3, #0]
 800b8d0:	f042 0220 	orr.w	r2, r2, #32
 800b8d4:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 800b8d6:	2300      	movs	r3, #0
 800b8d8:	e006      	b.n	800b8e8 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800b8da:	68fb      	ldr	r3, [r7, #12]
 800b8dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b8de:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800b8e2:	68fb      	ldr	r3, [r7, #12]
 800b8e4:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800b8e6:	2301      	movs	r3, #1
  }
}
 800b8e8:	4618      	mov	r0, r3
 800b8ea:	371c      	adds	r7, #28
 800b8ec:	46bd      	mov	sp, r7
 800b8ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8f2:	4770      	bx	lr

0800b8f4 <HAL_CAN_GetRxFifoFillLevel>:
  * @param  RxFifo Rx FIFO.
  *         This parameter can be a value of @arg CAN_receive_FIFO_number.
  * @retval Number of messages available in Rx FIFO.
  */
uint32_t HAL_CAN_GetRxFifoFillLevel(const CAN_HandleTypeDef *hcan, uint32_t RxFifo)
{
 800b8f4:	b480      	push	{r7}
 800b8f6:	b085      	sub	sp, #20
 800b8f8:	af00      	add	r7, sp, #0
 800b8fa:	6078      	str	r0, [r7, #4]
 800b8fc:	6039      	str	r1, [r7, #0]
  uint32_t filllevel = 0U;
 800b8fe:	2300      	movs	r3, #0
 800b900:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	f893 3020 	ldrb.w	r3, [r3, #32]
 800b908:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800b90a:	7afb      	ldrb	r3, [r7, #11]
 800b90c:	2b01      	cmp	r3, #1
 800b90e:	d002      	beq.n	800b916 <HAL_CAN_GetRxFifoFillLevel+0x22>
 800b910:	7afb      	ldrb	r3, [r7, #11]
 800b912:	2b02      	cmp	r3, #2
 800b914:	d10f      	bne.n	800b936 <HAL_CAN_GetRxFifoFillLevel+0x42>
      (state == HAL_CAN_STATE_LISTENING))
  {
    if (RxFifo == CAN_RX_FIFO0)
 800b916:	683b      	ldr	r3, [r7, #0]
 800b918:	2b00      	cmp	r3, #0
 800b91a:	d106      	bne.n	800b92a <HAL_CAN_GetRxFifoFillLevel+0x36>
    {
      filllevel = hcan->Instance->RF0R & CAN_RF0R_FMP0;
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	681b      	ldr	r3, [r3, #0]
 800b920:	68db      	ldr	r3, [r3, #12]
 800b922:	f003 0303 	and.w	r3, r3, #3
 800b926:	60fb      	str	r3, [r7, #12]
 800b928:	e005      	b.n	800b936 <HAL_CAN_GetRxFifoFillLevel+0x42>
    }
    else /* RxFifo == CAN_RX_FIFO1 */
    {
      filllevel = hcan->Instance->RF1R & CAN_RF1R_FMP1;
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	681b      	ldr	r3, [r3, #0]
 800b92e:	691b      	ldr	r3, [r3, #16]
 800b930:	f003 0303 	and.w	r3, r3, #3
 800b934:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Rx FIFO fill level */
  return filllevel;
 800b936:	68fb      	ldr	r3, [r7, #12]
}
 800b938:	4618      	mov	r0, r3
 800b93a:	3714      	adds	r7, #20
 800b93c:	46bd      	mov	sp, r7
 800b93e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b942:	4770      	bx	lr

0800b944 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800b944:	b580      	push	{r7, lr}
 800b946:	b08a      	sub	sp, #40	@ 0x28
 800b948:	af00      	add	r7, sp, #0
 800b94a:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800b94c:	2300      	movs	r3, #0
 800b94e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	681b      	ldr	r3, [r3, #0]
 800b954:	695b      	ldr	r3, [r3, #20]
 800b956:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	681b      	ldr	r3, [r3, #0]
 800b95c:	685b      	ldr	r3, [r3, #4]
 800b95e:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	681b      	ldr	r3, [r3, #0]
 800b964:	689b      	ldr	r3, [r3, #8]
 800b966:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	681b      	ldr	r3, [r3, #0]
 800b96c:	68db      	ldr	r3, [r3, #12]
 800b96e:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	681b      	ldr	r3, [r3, #0]
 800b974:	691b      	ldr	r3, [r3, #16]
 800b976:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	681b      	ldr	r3, [r3, #0]
 800b97c:	699b      	ldr	r3, [r3, #24]
 800b97e:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800b980:	6a3b      	ldr	r3, [r7, #32]
 800b982:	f003 0301 	and.w	r3, r3, #1
 800b986:	2b00      	cmp	r3, #0
 800b988:	d07c      	beq.n	800ba84 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800b98a:	69bb      	ldr	r3, [r7, #24]
 800b98c:	f003 0301 	and.w	r3, r3, #1
 800b990:	2b00      	cmp	r3, #0
 800b992:	d023      	beq.n	800b9dc <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	681b      	ldr	r3, [r3, #0]
 800b998:	2201      	movs	r2, #1
 800b99a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800b99c:	69bb      	ldr	r3, [r7, #24]
 800b99e:	f003 0302 	and.w	r3, r3, #2
 800b9a2:	2b00      	cmp	r3, #0
 800b9a4:	d003      	beq.n	800b9ae <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800b9a6:	6878      	ldr	r0, [r7, #4]
 800b9a8:	f000 f983 	bl	800bcb2 <HAL_CAN_TxMailbox0CompleteCallback>
 800b9ac:	e016      	b.n	800b9dc <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800b9ae:	69bb      	ldr	r3, [r7, #24]
 800b9b0:	f003 0304 	and.w	r3, r3, #4
 800b9b4:	2b00      	cmp	r3, #0
 800b9b6:	d004      	beq.n	800b9c2 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800b9b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b9ba:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800b9be:	627b      	str	r3, [r7, #36]	@ 0x24
 800b9c0:	e00c      	b.n	800b9dc <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800b9c2:	69bb      	ldr	r3, [r7, #24]
 800b9c4:	f003 0308 	and.w	r3, r3, #8
 800b9c8:	2b00      	cmp	r3, #0
 800b9ca:	d004      	beq.n	800b9d6 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800b9cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b9ce:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800b9d2:	627b      	str	r3, [r7, #36]	@ 0x24
 800b9d4:	e002      	b.n	800b9dc <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800b9d6:	6878      	ldr	r0, [r7, #4]
 800b9d8:	f000 f989 	bl	800bcee <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800b9dc:	69bb      	ldr	r3, [r7, #24]
 800b9de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b9e2:	2b00      	cmp	r3, #0
 800b9e4:	d024      	beq.n	800ba30 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	681b      	ldr	r3, [r3, #0]
 800b9ea:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800b9ee:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800b9f0:	69bb      	ldr	r3, [r7, #24]
 800b9f2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800b9f6:	2b00      	cmp	r3, #0
 800b9f8:	d003      	beq.n	800ba02 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800b9fa:	6878      	ldr	r0, [r7, #4]
 800b9fc:	f000 f963 	bl	800bcc6 <HAL_CAN_TxMailbox1CompleteCallback>
 800ba00:	e016      	b.n	800ba30 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800ba02:	69bb      	ldr	r3, [r7, #24]
 800ba04:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800ba08:	2b00      	cmp	r3, #0
 800ba0a:	d004      	beq.n	800ba16 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800ba0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba0e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800ba12:	627b      	str	r3, [r7, #36]	@ 0x24
 800ba14:	e00c      	b.n	800ba30 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800ba16:	69bb      	ldr	r3, [r7, #24]
 800ba18:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800ba1c:	2b00      	cmp	r3, #0
 800ba1e:	d004      	beq.n	800ba2a <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800ba20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba22:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800ba26:	627b      	str	r3, [r7, #36]	@ 0x24
 800ba28:	e002      	b.n	800ba30 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800ba2a:	6878      	ldr	r0, [r7, #4]
 800ba2c:	f000 f969 	bl	800bd02 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800ba30:	69bb      	ldr	r3, [r7, #24]
 800ba32:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800ba36:	2b00      	cmp	r3, #0
 800ba38:	d024      	beq.n	800ba84 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	681b      	ldr	r3, [r3, #0]
 800ba3e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800ba42:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800ba44:	69bb      	ldr	r3, [r7, #24]
 800ba46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ba4a:	2b00      	cmp	r3, #0
 800ba4c:	d003      	beq.n	800ba56 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800ba4e:	6878      	ldr	r0, [r7, #4]
 800ba50:	f000 f943 	bl	800bcda <HAL_CAN_TxMailbox2CompleteCallback>
 800ba54:	e016      	b.n	800ba84 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800ba56:	69bb      	ldr	r3, [r7, #24]
 800ba58:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800ba5c:	2b00      	cmp	r3, #0
 800ba5e:	d004      	beq.n	800ba6a <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800ba60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba62:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ba66:	627b      	str	r3, [r7, #36]	@ 0x24
 800ba68:	e00c      	b.n	800ba84 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800ba6a:	69bb      	ldr	r3, [r7, #24]
 800ba6c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800ba70:	2b00      	cmp	r3, #0
 800ba72:	d004      	beq.n	800ba7e <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800ba74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba76:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800ba7a:	627b      	str	r3, [r7, #36]	@ 0x24
 800ba7c:	e002      	b.n	800ba84 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800ba7e:	6878      	ldr	r0, [r7, #4]
 800ba80:	f000 f949 	bl	800bd16 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800ba84:	6a3b      	ldr	r3, [r7, #32]
 800ba86:	f003 0308 	and.w	r3, r3, #8
 800ba8a:	2b00      	cmp	r3, #0
 800ba8c:	d00c      	beq.n	800baa8 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800ba8e:	697b      	ldr	r3, [r7, #20]
 800ba90:	f003 0310 	and.w	r3, r3, #16
 800ba94:	2b00      	cmp	r3, #0
 800ba96:	d007      	beq.n	800baa8 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800ba98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba9a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800ba9e:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	681b      	ldr	r3, [r3, #0]
 800baa4:	2210      	movs	r2, #16
 800baa6:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800baa8:	6a3b      	ldr	r3, [r7, #32]
 800baaa:	f003 0304 	and.w	r3, r3, #4
 800baae:	2b00      	cmp	r3, #0
 800bab0:	d00b      	beq.n	800baca <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800bab2:	697b      	ldr	r3, [r7, #20]
 800bab4:	f003 0308 	and.w	r3, r3, #8
 800bab8:	2b00      	cmp	r3, #0
 800baba:	d006      	beq.n	800baca <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	681b      	ldr	r3, [r3, #0]
 800bac0:	2208      	movs	r2, #8
 800bac2:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800bac4:	6878      	ldr	r0, [r7, #4]
 800bac6:	f000 f93a 	bl	800bd3e <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800baca:	6a3b      	ldr	r3, [r7, #32]
 800bacc:	f003 0302 	and.w	r3, r3, #2
 800bad0:	2b00      	cmp	r3, #0
 800bad2:	d009      	beq.n	800bae8 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	681b      	ldr	r3, [r3, #0]
 800bad8:	68db      	ldr	r3, [r3, #12]
 800bada:	f003 0303 	and.w	r3, r3, #3
 800bade:	2b00      	cmp	r3, #0
 800bae0:	d002      	beq.n	800bae8 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800bae2:	6878      	ldr	r0, [r7, #4]
 800bae4:	f000 f921 	bl	800bd2a <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800bae8:	6a3b      	ldr	r3, [r7, #32]
 800baea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800baee:	2b00      	cmp	r3, #0
 800baf0:	d00c      	beq.n	800bb0c <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800baf2:	693b      	ldr	r3, [r7, #16]
 800baf4:	f003 0310 	and.w	r3, r3, #16
 800baf8:	2b00      	cmp	r3, #0
 800bafa:	d007      	beq.n	800bb0c <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800bafc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bafe:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800bb02:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	681b      	ldr	r3, [r3, #0]
 800bb08:	2210      	movs	r2, #16
 800bb0a:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800bb0c:	6a3b      	ldr	r3, [r7, #32]
 800bb0e:	f003 0320 	and.w	r3, r3, #32
 800bb12:	2b00      	cmp	r3, #0
 800bb14:	d00b      	beq.n	800bb2e <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800bb16:	693b      	ldr	r3, [r7, #16]
 800bb18:	f003 0308 	and.w	r3, r3, #8
 800bb1c:	2b00      	cmp	r3, #0
 800bb1e:	d006      	beq.n	800bb2e <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	681b      	ldr	r3, [r3, #0]
 800bb24:	2208      	movs	r2, #8
 800bb26:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800bb28:	6878      	ldr	r0, [r7, #4]
 800bb2a:	f000 f91c 	bl	800bd66 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800bb2e:	6a3b      	ldr	r3, [r7, #32]
 800bb30:	f003 0310 	and.w	r3, r3, #16
 800bb34:	2b00      	cmp	r3, #0
 800bb36:	d009      	beq.n	800bb4c <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	681b      	ldr	r3, [r3, #0]
 800bb3c:	691b      	ldr	r3, [r3, #16]
 800bb3e:	f003 0303 	and.w	r3, r3, #3
 800bb42:	2b00      	cmp	r3, #0
 800bb44:	d002      	beq.n	800bb4c <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800bb46:	6878      	ldr	r0, [r7, #4]
 800bb48:	f000 f903 	bl	800bd52 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800bb4c:	6a3b      	ldr	r3, [r7, #32]
 800bb4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800bb52:	2b00      	cmp	r3, #0
 800bb54:	d00b      	beq.n	800bb6e <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800bb56:	69fb      	ldr	r3, [r7, #28]
 800bb58:	f003 0310 	and.w	r3, r3, #16
 800bb5c:	2b00      	cmp	r3, #0
 800bb5e:	d006      	beq.n	800bb6e <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	681b      	ldr	r3, [r3, #0]
 800bb64:	2210      	movs	r2, #16
 800bb66:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800bb68:	6878      	ldr	r0, [r7, #4]
 800bb6a:	f000 f906 	bl	800bd7a <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800bb6e:	6a3b      	ldr	r3, [r7, #32]
 800bb70:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800bb74:	2b00      	cmp	r3, #0
 800bb76:	d00b      	beq.n	800bb90 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800bb78:	69fb      	ldr	r3, [r7, #28]
 800bb7a:	f003 0308 	and.w	r3, r3, #8
 800bb7e:	2b00      	cmp	r3, #0
 800bb80:	d006      	beq.n	800bb90 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	681b      	ldr	r3, [r3, #0]
 800bb86:	2208      	movs	r2, #8
 800bb88:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800bb8a:	6878      	ldr	r0, [r7, #4]
 800bb8c:	f000 f8ff 	bl	800bd8e <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800bb90:	6a3b      	ldr	r3, [r7, #32]
 800bb92:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800bb96:	2b00      	cmp	r3, #0
 800bb98:	d07b      	beq.n	800bc92 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800bb9a:	69fb      	ldr	r3, [r7, #28]
 800bb9c:	f003 0304 	and.w	r3, r3, #4
 800bba0:	2b00      	cmp	r3, #0
 800bba2:	d072      	beq.n	800bc8a <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800bba4:	6a3b      	ldr	r3, [r7, #32]
 800bba6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800bbaa:	2b00      	cmp	r3, #0
 800bbac:	d008      	beq.n	800bbc0 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800bbae:	68fb      	ldr	r3, [r7, #12]
 800bbb0:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800bbb4:	2b00      	cmp	r3, #0
 800bbb6:	d003      	beq.n	800bbc0 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800bbb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bbba:	f043 0301 	orr.w	r3, r3, #1
 800bbbe:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800bbc0:	6a3b      	ldr	r3, [r7, #32]
 800bbc2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800bbc6:	2b00      	cmp	r3, #0
 800bbc8:	d008      	beq.n	800bbdc <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800bbca:	68fb      	ldr	r3, [r7, #12]
 800bbcc:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800bbd0:	2b00      	cmp	r3, #0
 800bbd2:	d003      	beq.n	800bbdc <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800bbd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bbd6:	f043 0302 	orr.w	r3, r3, #2
 800bbda:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800bbdc:	6a3b      	ldr	r3, [r7, #32]
 800bbde:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800bbe2:	2b00      	cmp	r3, #0
 800bbe4:	d008      	beq.n	800bbf8 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800bbe6:	68fb      	ldr	r3, [r7, #12]
 800bbe8:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800bbec:	2b00      	cmp	r3, #0
 800bbee:	d003      	beq.n	800bbf8 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800bbf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bbf2:	f043 0304 	orr.w	r3, r3, #4
 800bbf6:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800bbf8:	6a3b      	ldr	r3, [r7, #32]
 800bbfa:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800bbfe:	2b00      	cmp	r3, #0
 800bc00:	d043      	beq.n	800bc8a <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800bc02:	68fb      	ldr	r3, [r7, #12]
 800bc04:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800bc08:	2b00      	cmp	r3, #0
 800bc0a:	d03e      	beq.n	800bc8a <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 800bc0c:	68fb      	ldr	r3, [r7, #12]
 800bc0e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800bc12:	2b60      	cmp	r3, #96	@ 0x60
 800bc14:	d02b      	beq.n	800bc6e <HAL_CAN_IRQHandler+0x32a>
 800bc16:	2b60      	cmp	r3, #96	@ 0x60
 800bc18:	d82e      	bhi.n	800bc78 <HAL_CAN_IRQHandler+0x334>
 800bc1a:	2b50      	cmp	r3, #80	@ 0x50
 800bc1c:	d022      	beq.n	800bc64 <HAL_CAN_IRQHandler+0x320>
 800bc1e:	2b50      	cmp	r3, #80	@ 0x50
 800bc20:	d82a      	bhi.n	800bc78 <HAL_CAN_IRQHandler+0x334>
 800bc22:	2b40      	cmp	r3, #64	@ 0x40
 800bc24:	d019      	beq.n	800bc5a <HAL_CAN_IRQHandler+0x316>
 800bc26:	2b40      	cmp	r3, #64	@ 0x40
 800bc28:	d826      	bhi.n	800bc78 <HAL_CAN_IRQHandler+0x334>
 800bc2a:	2b30      	cmp	r3, #48	@ 0x30
 800bc2c:	d010      	beq.n	800bc50 <HAL_CAN_IRQHandler+0x30c>
 800bc2e:	2b30      	cmp	r3, #48	@ 0x30
 800bc30:	d822      	bhi.n	800bc78 <HAL_CAN_IRQHandler+0x334>
 800bc32:	2b10      	cmp	r3, #16
 800bc34:	d002      	beq.n	800bc3c <HAL_CAN_IRQHandler+0x2f8>
 800bc36:	2b20      	cmp	r3, #32
 800bc38:	d005      	beq.n	800bc46 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800bc3a:	e01d      	b.n	800bc78 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 800bc3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc3e:	f043 0308 	orr.w	r3, r3, #8
 800bc42:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800bc44:	e019      	b.n	800bc7a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 800bc46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc48:	f043 0310 	orr.w	r3, r3, #16
 800bc4c:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800bc4e:	e014      	b.n	800bc7a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 800bc50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc52:	f043 0320 	orr.w	r3, r3, #32
 800bc56:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800bc58:	e00f      	b.n	800bc7a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 800bc5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc5c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bc60:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800bc62:	e00a      	b.n	800bc7a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 800bc64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc66:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bc6a:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800bc6c:	e005      	b.n	800bc7a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 800bc6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc70:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800bc74:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800bc76:	e000      	b.n	800bc7a <HAL_CAN_IRQHandler+0x336>
            break;
 800bc78:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	681b      	ldr	r3, [r3, #0]
 800bc7e:	699a      	ldr	r2, [r3, #24]
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	681b      	ldr	r3, [r3, #0]
 800bc84:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800bc88:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	681b      	ldr	r3, [r3, #0]
 800bc8e:	2204      	movs	r2, #4
 800bc90:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800bc92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc94:	2b00      	cmp	r3, #0
 800bc96:	d008      	beq.n	800bcaa <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800bc9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc9e:	431a      	orrs	r2, r3
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800bca4:	6878      	ldr	r0, [r7, #4]
 800bca6:	f000 f87c 	bl	800bda2 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800bcaa:	bf00      	nop
 800bcac:	3728      	adds	r7, #40	@ 0x28
 800bcae:	46bd      	mov	sp, r7
 800bcb0:	bd80      	pop	{r7, pc}

0800bcb2 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800bcb2:	b480      	push	{r7}
 800bcb4:	b083      	sub	sp, #12
 800bcb6:	af00      	add	r7, sp, #0
 800bcb8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 800bcba:	bf00      	nop
 800bcbc:	370c      	adds	r7, #12
 800bcbe:	46bd      	mov	sp, r7
 800bcc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcc4:	4770      	bx	lr

0800bcc6 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800bcc6:	b480      	push	{r7}
 800bcc8:	b083      	sub	sp, #12
 800bcca:	af00      	add	r7, sp, #0
 800bccc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 800bcce:	bf00      	nop
 800bcd0:	370c      	adds	r7, #12
 800bcd2:	46bd      	mov	sp, r7
 800bcd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcd8:	4770      	bx	lr

0800bcda <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800bcda:	b480      	push	{r7}
 800bcdc:	b083      	sub	sp, #12
 800bcde:	af00      	add	r7, sp, #0
 800bce0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 800bce2:	bf00      	nop
 800bce4:	370c      	adds	r7, #12
 800bce6:	46bd      	mov	sp, r7
 800bce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcec:	4770      	bx	lr

0800bcee <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800bcee:	b480      	push	{r7}
 800bcf0:	b083      	sub	sp, #12
 800bcf2:	af00      	add	r7, sp, #0
 800bcf4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800bcf6:	bf00      	nop
 800bcf8:	370c      	adds	r7, #12
 800bcfa:	46bd      	mov	sp, r7
 800bcfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd00:	4770      	bx	lr

0800bd02 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800bd02:	b480      	push	{r7}
 800bd04:	b083      	sub	sp, #12
 800bd06:	af00      	add	r7, sp, #0
 800bd08:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800bd0a:	bf00      	nop
 800bd0c:	370c      	adds	r7, #12
 800bd0e:	46bd      	mov	sp, r7
 800bd10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd14:	4770      	bx	lr

0800bd16 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 800bd16:	b480      	push	{r7}
 800bd18:	b083      	sub	sp, #12
 800bd1a:	af00      	add	r7, sp, #0
 800bd1c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800bd1e:	bf00      	nop
 800bd20:	370c      	adds	r7, #12
 800bd22:	46bd      	mov	sp, r7
 800bd24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd28:	4770      	bx	lr

0800bd2a <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800bd2a:	b480      	push	{r7}
 800bd2c:	b083      	sub	sp, #12
 800bd2e:	af00      	add	r7, sp, #0
 800bd30:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 800bd32:	bf00      	nop
 800bd34:	370c      	adds	r7, #12
 800bd36:	46bd      	mov	sp, r7
 800bd38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd3c:	4770      	bx	lr

0800bd3e <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 800bd3e:	b480      	push	{r7}
 800bd40:	b083      	sub	sp, #12
 800bd42:	af00      	add	r7, sp, #0
 800bd44:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800bd46:	bf00      	nop
 800bd48:	370c      	adds	r7, #12
 800bd4a:	46bd      	mov	sp, r7
 800bd4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd50:	4770      	bx	lr

0800bd52 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800bd52:	b480      	push	{r7}
 800bd54:	b083      	sub	sp, #12
 800bd56:	af00      	add	r7, sp, #0
 800bd58:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 800bd5a:	bf00      	nop
 800bd5c:	370c      	adds	r7, #12
 800bd5e:	46bd      	mov	sp, r7
 800bd60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd64:	4770      	bx	lr

0800bd66 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800bd66:	b480      	push	{r7}
 800bd68:	b083      	sub	sp, #12
 800bd6a:	af00      	add	r7, sp, #0
 800bd6c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 800bd6e:	bf00      	nop
 800bd70:	370c      	adds	r7, #12
 800bd72:	46bd      	mov	sp, r7
 800bd74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd78:	4770      	bx	lr

0800bd7a <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800bd7a:	b480      	push	{r7}
 800bd7c:	b083      	sub	sp, #12
 800bd7e:	af00      	add	r7, sp, #0
 800bd80:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800bd82:	bf00      	nop
 800bd84:	370c      	adds	r7, #12
 800bd86:	46bd      	mov	sp, r7
 800bd88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd8c:	4770      	bx	lr

0800bd8e <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 800bd8e:	b480      	push	{r7}
 800bd90:	b083      	sub	sp, #12
 800bd92:	af00      	add	r7, sp, #0
 800bd94:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800bd96:	bf00      	nop
 800bd98:	370c      	adds	r7, #12
 800bd9a:	46bd      	mov	sp, r7
 800bd9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bda0:	4770      	bx	lr

0800bda2 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800bda2:	b480      	push	{r7}
 800bda4:	b083      	sub	sp, #12
 800bda6:	af00      	add	r7, sp, #0
 800bda8:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 800bdaa:	bf00      	nop
 800bdac:	370c      	adds	r7, #12
 800bdae:	46bd      	mov	sp, r7
 800bdb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdb4:	4770      	bx	lr
	...

0800bdb8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800bdb8:	b480      	push	{r7}
 800bdba:	b085      	sub	sp, #20
 800bdbc:	af00      	add	r7, sp, #0
 800bdbe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	f003 0307 	and.w	r3, r3, #7
 800bdc6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800bdc8:	4b0c      	ldr	r3, [pc, #48]	@ (800bdfc <__NVIC_SetPriorityGrouping+0x44>)
 800bdca:	68db      	ldr	r3, [r3, #12]
 800bdcc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800bdce:	68ba      	ldr	r2, [r7, #8]
 800bdd0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800bdd4:	4013      	ands	r3, r2
 800bdd6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800bdd8:	68fb      	ldr	r3, [r7, #12]
 800bdda:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800bddc:	68bb      	ldr	r3, [r7, #8]
 800bdde:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800bde0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800bde4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800bde8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800bdea:	4a04      	ldr	r2, [pc, #16]	@ (800bdfc <__NVIC_SetPriorityGrouping+0x44>)
 800bdec:	68bb      	ldr	r3, [r7, #8]
 800bdee:	60d3      	str	r3, [r2, #12]
}
 800bdf0:	bf00      	nop
 800bdf2:	3714      	adds	r7, #20
 800bdf4:	46bd      	mov	sp, r7
 800bdf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdfa:	4770      	bx	lr
 800bdfc:	e000ed00 	.word	0xe000ed00

0800be00 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800be00:	b480      	push	{r7}
 800be02:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800be04:	4b04      	ldr	r3, [pc, #16]	@ (800be18 <__NVIC_GetPriorityGrouping+0x18>)
 800be06:	68db      	ldr	r3, [r3, #12]
 800be08:	0a1b      	lsrs	r3, r3, #8
 800be0a:	f003 0307 	and.w	r3, r3, #7
}
 800be0e:	4618      	mov	r0, r3
 800be10:	46bd      	mov	sp, r7
 800be12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be16:	4770      	bx	lr
 800be18:	e000ed00 	.word	0xe000ed00

0800be1c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800be1c:	b480      	push	{r7}
 800be1e:	b083      	sub	sp, #12
 800be20:	af00      	add	r7, sp, #0
 800be22:	4603      	mov	r3, r0
 800be24:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800be26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800be2a:	2b00      	cmp	r3, #0
 800be2c:	db0b      	blt.n	800be46 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800be2e:	79fb      	ldrb	r3, [r7, #7]
 800be30:	f003 021f 	and.w	r2, r3, #31
 800be34:	4907      	ldr	r1, [pc, #28]	@ (800be54 <__NVIC_EnableIRQ+0x38>)
 800be36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800be3a:	095b      	lsrs	r3, r3, #5
 800be3c:	2001      	movs	r0, #1
 800be3e:	fa00 f202 	lsl.w	r2, r0, r2
 800be42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800be46:	bf00      	nop
 800be48:	370c      	adds	r7, #12
 800be4a:	46bd      	mov	sp, r7
 800be4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be50:	4770      	bx	lr
 800be52:	bf00      	nop
 800be54:	e000e100 	.word	0xe000e100

0800be58 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800be58:	b480      	push	{r7}
 800be5a:	b083      	sub	sp, #12
 800be5c:	af00      	add	r7, sp, #0
 800be5e:	4603      	mov	r3, r0
 800be60:	6039      	str	r1, [r7, #0]
 800be62:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800be64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800be68:	2b00      	cmp	r3, #0
 800be6a:	db0a      	blt.n	800be82 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800be6c:	683b      	ldr	r3, [r7, #0]
 800be6e:	b2da      	uxtb	r2, r3
 800be70:	490c      	ldr	r1, [pc, #48]	@ (800bea4 <__NVIC_SetPriority+0x4c>)
 800be72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800be76:	0112      	lsls	r2, r2, #4
 800be78:	b2d2      	uxtb	r2, r2
 800be7a:	440b      	add	r3, r1
 800be7c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800be80:	e00a      	b.n	800be98 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800be82:	683b      	ldr	r3, [r7, #0]
 800be84:	b2da      	uxtb	r2, r3
 800be86:	4908      	ldr	r1, [pc, #32]	@ (800bea8 <__NVIC_SetPriority+0x50>)
 800be88:	79fb      	ldrb	r3, [r7, #7]
 800be8a:	f003 030f 	and.w	r3, r3, #15
 800be8e:	3b04      	subs	r3, #4
 800be90:	0112      	lsls	r2, r2, #4
 800be92:	b2d2      	uxtb	r2, r2
 800be94:	440b      	add	r3, r1
 800be96:	761a      	strb	r2, [r3, #24]
}
 800be98:	bf00      	nop
 800be9a:	370c      	adds	r7, #12
 800be9c:	46bd      	mov	sp, r7
 800be9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bea2:	4770      	bx	lr
 800bea4:	e000e100 	.word	0xe000e100
 800bea8:	e000ed00 	.word	0xe000ed00

0800beac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800beac:	b480      	push	{r7}
 800beae:	b089      	sub	sp, #36	@ 0x24
 800beb0:	af00      	add	r7, sp, #0
 800beb2:	60f8      	str	r0, [r7, #12]
 800beb4:	60b9      	str	r1, [r7, #8]
 800beb6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800beb8:	68fb      	ldr	r3, [r7, #12]
 800beba:	f003 0307 	and.w	r3, r3, #7
 800bebe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800bec0:	69fb      	ldr	r3, [r7, #28]
 800bec2:	f1c3 0307 	rsb	r3, r3, #7
 800bec6:	2b04      	cmp	r3, #4
 800bec8:	bf28      	it	cs
 800beca:	2304      	movcs	r3, #4
 800becc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800bece:	69fb      	ldr	r3, [r7, #28]
 800bed0:	3304      	adds	r3, #4
 800bed2:	2b06      	cmp	r3, #6
 800bed4:	d902      	bls.n	800bedc <NVIC_EncodePriority+0x30>
 800bed6:	69fb      	ldr	r3, [r7, #28]
 800bed8:	3b03      	subs	r3, #3
 800beda:	e000      	b.n	800bede <NVIC_EncodePriority+0x32>
 800bedc:	2300      	movs	r3, #0
 800bede:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800bee0:	f04f 32ff 	mov.w	r2, #4294967295
 800bee4:	69bb      	ldr	r3, [r7, #24]
 800bee6:	fa02 f303 	lsl.w	r3, r2, r3
 800beea:	43da      	mvns	r2, r3
 800beec:	68bb      	ldr	r3, [r7, #8]
 800beee:	401a      	ands	r2, r3
 800bef0:	697b      	ldr	r3, [r7, #20]
 800bef2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800bef4:	f04f 31ff 	mov.w	r1, #4294967295
 800bef8:	697b      	ldr	r3, [r7, #20]
 800befa:	fa01 f303 	lsl.w	r3, r1, r3
 800befe:	43d9      	mvns	r1, r3
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800bf04:	4313      	orrs	r3, r2
         );
}
 800bf06:	4618      	mov	r0, r3
 800bf08:	3724      	adds	r7, #36	@ 0x24
 800bf0a:	46bd      	mov	sp, r7
 800bf0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf10:	4770      	bx	lr
	...

0800bf14 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800bf14:	b580      	push	{r7, lr}
 800bf16:	b082      	sub	sp, #8
 800bf18:	af00      	add	r7, sp, #0
 800bf1a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	3b01      	subs	r3, #1
 800bf20:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800bf24:	d301      	bcc.n	800bf2a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800bf26:	2301      	movs	r3, #1
 800bf28:	e00f      	b.n	800bf4a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800bf2a:	4a0a      	ldr	r2, [pc, #40]	@ (800bf54 <SysTick_Config+0x40>)
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	3b01      	subs	r3, #1
 800bf30:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800bf32:	210f      	movs	r1, #15
 800bf34:	f04f 30ff 	mov.w	r0, #4294967295
 800bf38:	f7ff ff8e 	bl	800be58 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800bf3c:	4b05      	ldr	r3, [pc, #20]	@ (800bf54 <SysTick_Config+0x40>)
 800bf3e:	2200      	movs	r2, #0
 800bf40:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800bf42:	4b04      	ldr	r3, [pc, #16]	@ (800bf54 <SysTick_Config+0x40>)
 800bf44:	2207      	movs	r2, #7
 800bf46:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800bf48:	2300      	movs	r3, #0
}
 800bf4a:	4618      	mov	r0, r3
 800bf4c:	3708      	adds	r7, #8
 800bf4e:	46bd      	mov	sp, r7
 800bf50:	bd80      	pop	{r7, pc}
 800bf52:	bf00      	nop
 800bf54:	e000e010 	.word	0xe000e010

0800bf58 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800bf58:	b580      	push	{r7, lr}
 800bf5a:	b082      	sub	sp, #8
 800bf5c:	af00      	add	r7, sp, #0
 800bf5e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800bf60:	6878      	ldr	r0, [r7, #4]
 800bf62:	f7ff ff29 	bl	800bdb8 <__NVIC_SetPriorityGrouping>
}
 800bf66:	bf00      	nop
 800bf68:	3708      	adds	r7, #8
 800bf6a:	46bd      	mov	sp, r7
 800bf6c:	bd80      	pop	{r7, pc}

0800bf6e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800bf6e:	b580      	push	{r7, lr}
 800bf70:	b086      	sub	sp, #24
 800bf72:	af00      	add	r7, sp, #0
 800bf74:	4603      	mov	r3, r0
 800bf76:	60b9      	str	r1, [r7, #8]
 800bf78:	607a      	str	r2, [r7, #4]
 800bf7a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800bf7c:	2300      	movs	r3, #0
 800bf7e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800bf80:	f7ff ff3e 	bl	800be00 <__NVIC_GetPriorityGrouping>
 800bf84:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800bf86:	687a      	ldr	r2, [r7, #4]
 800bf88:	68b9      	ldr	r1, [r7, #8]
 800bf8a:	6978      	ldr	r0, [r7, #20]
 800bf8c:	f7ff ff8e 	bl	800beac <NVIC_EncodePriority>
 800bf90:	4602      	mov	r2, r0
 800bf92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bf96:	4611      	mov	r1, r2
 800bf98:	4618      	mov	r0, r3
 800bf9a:	f7ff ff5d 	bl	800be58 <__NVIC_SetPriority>
}
 800bf9e:	bf00      	nop
 800bfa0:	3718      	adds	r7, #24
 800bfa2:	46bd      	mov	sp, r7
 800bfa4:	bd80      	pop	{r7, pc}

0800bfa6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800bfa6:	b580      	push	{r7, lr}
 800bfa8:	b082      	sub	sp, #8
 800bfaa:	af00      	add	r7, sp, #0
 800bfac:	4603      	mov	r3, r0
 800bfae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800bfb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bfb4:	4618      	mov	r0, r3
 800bfb6:	f7ff ff31 	bl	800be1c <__NVIC_EnableIRQ>
}
 800bfba:	bf00      	nop
 800bfbc:	3708      	adds	r7, #8
 800bfbe:	46bd      	mov	sp, r7
 800bfc0:	bd80      	pop	{r7, pc}

0800bfc2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800bfc2:	b580      	push	{r7, lr}
 800bfc4:	b082      	sub	sp, #8
 800bfc6:	af00      	add	r7, sp, #0
 800bfc8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800bfca:	6878      	ldr	r0, [r7, #4]
 800bfcc:	f7ff ffa2 	bl	800bf14 <SysTick_Config>
 800bfd0:	4603      	mov	r3, r0
}
 800bfd2:	4618      	mov	r0, r3
 800bfd4:	3708      	adds	r7, #8
 800bfd6:	46bd      	mov	sp, r7
 800bfd8:	bd80      	pop	{r7, pc}
	...

0800bfdc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800bfdc:	b480      	push	{r7}
 800bfde:	b089      	sub	sp, #36	@ 0x24
 800bfe0:	af00      	add	r7, sp, #0
 800bfe2:	6078      	str	r0, [r7, #4]
 800bfe4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800bfe6:	2300      	movs	r3, #0
 800bfe8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800bfea:	2300      	movs	r3, #0
 800bfec:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800bfee:	2300      	movs	r3, #0
 800bff0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800bff2:	2300      	movs	r3, #0
 800bff4:	61fb      	str	r3, [r7, #28]
 800bff6:	e165      	b.n	800c2c4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800bff8:	2201      	movs	r2, #1
 800bffa:	69fb      	ldr	r3, [r7, #28]
 800bffc:	fa02 f303 	lsl.w	r3, r2, r3
 800c000:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800c002:	683b      	ldr	r3, [r7, #0]
 800c004:	681b      	ldr	r3, [r3, #0]
 800c006:	697a      	ldr	r2, [r7, #20]
 800c008:	4013      	ands	r3, r2
 800c00a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800c00c:	693a      	ldr	r2, [r7, #16]
 800c00e:	697b      	ldr	r3, [r7, #20]
 800c010:	429a      	cmp	r2, r3
 800c012:	f040 8154 	bne.w	800c2be <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800c016:	683b      	ldr	r3, [r7, #0]
 800c018:	685b      	ldr	r3, [r3, #4]
 800c01a:	f003 0303 	and.w	r3, r3, #3
 800c01e:	2b01      	cmp	r3, #1
 800c020:	d005      	beq.n	800c02e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800c022:	683b      	ldr	r3, [r7, #0]
 800c024:	685b      	ldr	r3, [r3, #4]
 800c026:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800c02a:	2b02      	cmp	r3, #2
 800c02c:	d130      	bne.n	800c090 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	689b      	ldr	r3, [r3, #8]
 800c032:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800c034:	69fb      	ldr	r3, [r7, #28]
 800c036:	005b      	lsls	r3, r3, #1
 800c038:	2203      	movs	r2, #3
 800c03a:	fa02 f303 	lsl.w	r3, r2, r3
 800c03e:	43db      	mvns	r3, r3
 800c040:	69ba      	ldr	r2, [r7, #24]
 800c042:	4013      	ands	r3, r2
 800c044:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800c046:	683b      	ldr	r3, [r7, #0]
 800c048:	68da      	ldr	r2, [r3, #12]
 800c04a:	69fb      	ldr	r3, [r7, #28]
 800c04c:	005b      	lsls	r3, r3, #1
 800c04e:	fa02 f303 	lsl.w	r3, r2, r3
 800c052:	69ba      	ldr	r2, [r7, #24]
 800c054:	4313      	orrs	r3, r2
 800c056:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	69ba      	ldr	r2, [r7, #24]
 800c05c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	685b      	ldr	r3, [r3, #4]
 800c062:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800c064:	2201      	movs	r2, #1
 800c066:	69fb      	ldr	r3, [r7, #28]
 800c068:	fa02 f303 	lsl.w	r3, r2, r3
 800c06c:	43db      	mvns	r3, r3
 800c06e:	69ba      	ldr	r2, [r7, #24]
 800c070:	4013      	ands	r3, r2
 800c072:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800c074:	683b      	ldr	r3, [r7, #0]
 800c076:	685b      	ldr	r3, [r3, #4]
 800c078:	091b      	lsrs	r3, r3, #4
 800c07a:	f003 0201 	and.w	r2, r3, #1
 800c07e:	69fb      	ldr	r3, [r7, #28]
 800c080:	fa02 f303 	lsl.w	r3, r2, r3
 800c084:	69ba      	ldr	r2, [r7, #24]
 800c086:	4313      	orrs	r3, r2
 800c088:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	69ba      	ldr	r2, [r7, #24]
 800c08e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800c090:	683b      	ldr	r3, [r7, #0]
 800c092:	685b      	ldr	r3, [r3, #4]
 800c094:	f003 0303 	and.w	r3, r3, #3
 800c098:	2b03      	cmp	r3, #3
 800c09a:	d017      	beq.n	800c0cc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	68db      	ldr	r3, [r3, #12]
 800c0a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800c0a2:	69fb      	ldr	r3, [r7, #28]
 800c0a4:	005b      	lsls	r3, r3, #1
 800c0a6:	2203      	movs	r2, #3
 800c0a8:	fa02 f303 	lsl.w	r3, r2, r3
 800c0ac:	43db      	mvns	r3, r3
 800c0ae:	69ba      	ldr	r2, [r7, #24]
 800c0b0:	4013      	ands	r3, r2
 800c0b2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800c0b4:	683b      	ldr	r3, [r7, #0]
 800c0b6:	689a      	ldr	r2, [r3, #8]
 800c0b8:	69fb      	ldr	r3, [r7, #28]
 800c0ba:	005b      	lsls	r3, r3, #1
 800c0bc:	fa02 f303 	lsl.w	r3, r2, r3
 800c0c0:	69ba      	ldr	r2, [r7, #24]
 800c0c2:	4313      	orrs	r3, r2
 800c0c4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	69ba      	ldr	r2, [r7, #24]
 800c0ca:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800c0cc:	683b      	ldr	r3, [r7, #0]
 800c0ce:	685b      	ldr	r3, [r3, #4]
 800c0d0:	f003 0303 	and.w	r3, r3, #3
 800c0d4:	2b02      	cmp	r3, #2
 800c0d6:	d123      	bne.n	800c120 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800c0d8:	69fb      	ldr	r3, [r7, #28]
 800c0da:	08da      	lsrs	r2, r3, #3
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	3208      	adds	r2, #8
 800c0e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c0e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800c0e6:	69fb      	ldr	r3, [r7, #28]
 800c0e8:	f003 0307 	and.w	r3, r3, #7
 800c0ec:	009b      	lsls	r3, r3, #2
 800c0ee:	220f      	movs	r2, #15
 800c0f0:	fa02 f303 	lsl.w	r3, r2, r3
 800c0f4:	43db      	mvns	r3, r3
 800c0f6:	69ba      	ldr	r2, [r7, #24]
 800c0f8:	4013      	ands	r3, r2
 800c0fa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800c0fc:	683b      	ldr	r3, [r7, #0]
 800c0fe:	691a      	ldr	r2, [r3, #16]
 800c100:	69fb      	ldr	r3, [r7, #28]
 800c102:	f003 0307 	and.w	r3, r3, #7
 800c106:	009b      	lsls	r3, r3, #2
 800c108:	fa02 f303 	lsl.w	r3, r2, r3
 800c10c:	69ba      	ldr	r2, [r7, #24]
 800c10e:	4313      	orrs	r3, r2
 800c110:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800c112:	69fb      	ldr	r3, [r7, #28]
 800c114:	08da      	lsrs	r2, r3, #3
 800c116:	687b      	ldr	r3, [r7, #4]
 800c118:	3208      	adds	r2, #8
 800c11a:	69b9      	ldr	r1, [r7, #24]
 800c11c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	681b      	ldr	r3, [r3, #0]
 800c124:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800c126:	69fb      	ldr	r3, [r7, #28]
 800c128:	005b      	lsls	r3, r3, #1
 800c12a:	2203      	movs	r2, #3
 800c12c:	fa02 f303 	lsl.w	r3, r2, r3
 800c130:	43db      	mvns	r3, r3
 800c132:	69ba      	ldr	r2, [r7, #24]
 800c134:	4013      	ands	r3, r2
 800c136:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800c138:	683b      	ldr	r3, [r7, #0]
 800c13a:	685b      	ldr	r3, [r3, #4]
 800c13c:	f003 0203 	and.w	r2, r3, #3
 800c140:	69fb      	ldr	r3, [r7, #28]
 800c142:	005b      	lsls	r3, r3, #1
 800c144:	fa02 f303 	lsl.w	r3, r2, r3
 800c148:	69ba      	ldr	r2, [r7, #24]
 800c14a:	4313      	orrs	r3, r2
 800c14c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	69ba      	ldr	r2, [r7, #24]
 800c152:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800c154:	683b      	ldr	r3, [r7, #0]
 800c156:	685b      	ldr	r3, [r3, #4]
 800c158:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800c15c:	2b00      	cmp	r3, #0
 800c15e:	f000 80ae 	beq.w	800c2be <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800c162:	2300      	movs	r3, #0
 800c164:	60fb      	str	r3, [r7, #12]
 800c166:	4b5d      	ldr	r3, [pc, #372]	@ (800c2dc <HAL_GPIO_Init+0x300>)
 800c168:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c16a:	4a5c      	ldr	r2, [pc, #368]	@ (800c2dc <HAL_GPIO_Init+0x300>)
 800c16c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800c170:	6453      	str	r3, [r2, #68]	@ 0x44
 800c172:	4b5a      	ldr	r3, [pc, #360]	@ (800c2dc <HAL_GPIO_Init+0x300>)
 800c174:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c176:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c17a:	60fb      	str	r3, [r7, #12]
 800c17c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800c17e:	4a58      	ldr	r2, [pc, #352]	@ (800c2e0 <HAL_GPIO_Init+0x304>)
 800c180:	69fb      	ldr	r3, [r7, #28]
 800c182:	089b      	lsrs	r3, r3, #2
 800c184:	3302      	adds	r3, #2
 800c186:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c18a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800c18c:	69fb      	ldr	r3, [r7, #28]
 800c18e:	f003 0303 	and.w	r3, r3, #3
 800c192:	009b      	lsls	r3, r3, #2
 800c194:	220f      	movs	r2, #15
 800c196:	fa02 f303 	lsl.w	r3, r2, r3
 800c19a:	43db      	mvns	r3, r3
 800c19c:	69ba      	ldr	r2, [r7, #24]
 800c19e:	4013      	ands	r3, r2
 800c1a0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800c1a2:	687b      	ldr	r3, [r7, #4]
 800c1a4:	4a4f      	ldr	r2, [pc, #316]	@ (800c2e4 <HAL_GPIO_Init+0x308>)
 800c1a6:	4293      	cmp	r3, r2
 800c1a8:	d025      	beq.n	800c1f6 <HAL_GPIO_Init+0x21a>
 800c1aa:	687b      	ldr	r3, [r7, #4]
 800c1ac:	4a4e      	ldr	r2, [pc, #312]	@ (800c2e8 <HAL_GPIO_Init+0x30c>)
 800c1ae:	4293      	cmp	r3, r2
 800c1b0:	d01f      	beq.n	800c1f2 <HAL_GPIO_Init+0x216>
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	4a4d      	ldr	r2, [pc, #308]	@ (800c2ec <HAL_GPIO_Init+0x310>)
 800c1b6:	4293      	cmp	r3, r2
 800c1b8:	d019      	beq.n	800c1ee <HAL_GPIO_Init+0x212>
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	4a4c      	ldr	r2, [pc, #304]	@ (800c2f0 <HAL_GPIO_Init+0x314>)
 800c1be:	4293      	cmp	r3, r2
 800c1c0:	d013      	beq.n	800c1ea <HAL_GPIO_Init+0x20e>
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	4a4b      	ldr	r2, [pc, #300]	@ (800c2f4 <HAL_GPIO_Init+0x318>)
 800c1c6:	4293      	cmp	r3, r2
 800c1c8:	d00d      	beq.n	800c1e6 <HAL_GPIO_Init+0x20a>
 800c1ca:	687b      	ldr	r3, [r7, #4]
 800c1cc:	4a4a      	ldr	r2, [pc, #296]	@ (800c2f8 <HAL_GPIO_Init+0x31c>)
 800c1ce:	4293      	cmp	r3, r2
 800c1d0:	d007      	beq.n	800c1e2 <HAL_GPIO_Init+0x206>
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	4a49      	ldr	r2, [pc, #292]	@ (800c2fc <HAL_GPIO_Init+0x320>)
 800c1d6:	4293      	cmp	r3, r2
 800c1d8:	d101      	bne.n	800c1de <HAL_GPIO_Init+0x202>
 800c1da:	2306      	movs	r3, #6
 800c1dc:	e00c      	b.n	800c1f8 <HAL_GPIO_Init+0x21c>
 800c1de:	2307      	movs	r3, #7
 800c1e0:	e00a      	b.n	800c1f8 <HAL_GPIO_Init+0x21c>
 800c1e2:	2305      	movs	r3, #5
 800c1e4:	e008      	b.n	800c1f8 <HAL_GPIO_Init+0x21c>
 800c1e6:	2304      	movs	r3, #4
 800c1e8:	e006      	b.n	800c1f8 <HAL_GPIO_Init+0x21c>
 800c1ea:	2303      	movs	r3, #3
 800c1ec:	e004      	b.n	800c1f8 <HAL_GPIO_Init+0x21c>
 800c1ee:	2302      	movs	r3, #2
 800c1f0:	e002      	b.n	800c1f8 <HAL_GPIO_Init+0x21c>
 800c1f2:	2301      	movs	r3, #1
 800c1f4:	e000      	b.n	800c1f8 <HAL_GPIO_Init+0x21c>
 800c1f6:	2300      	movs	r3, #0
 800c1f8:	69fa      	ldr	r2, [r7, #28]
 800c1fa:	f002 0203 	and.w	r2, r2, #3
 800c1fe:	0092      	lsls	r2, r2, #2
 800c200:	4093      	lsls	r3, r2
 800c202:	69ba      	ldr	r2, [r7, #24]
 800c204:	4313      	orrs	r3, r2
 800c206:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800c208:	4935      	ldr	r1, [pc, #212]	@ (800c2e0 <HAL_GPIO_Init+0x304>)
 800c20a:	69fb      	ldr	r3, [r7, #28]
 800c20c:	089b      	lsrs	r3, r3, #2
 800c20e:	3302      	adds	r3, #2
 800c210:	69ba      	ldr	r2, [r7, #24]
 800c212:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800c216:	4b3a      	ldr	r3, [pc, #232]	@ (800c300 <HAL_GPIO_Init+0x324>)
 800c218:	689b      	ldr	r3, [r3, #8]
 800c21a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800c21c:	693b      	ldr	r3, [r7, #16]
 800c21e:	43db      	mvns	r3, r3
 800c220:	69ba      	ldr	r2, [r7, #24]
 800c222:	4013      	ands	r3, r2
 800c224:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800c226:	683b      	ldr	r3, [r7, #0]
 800c228:	685b      	ldr	r3, [r3, #4]
 800c22a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800c22e:	2b00      	cmp	r3, #0
 800c230:	d003      	beq.n	800c23a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800c232:	69ba      	ldr	r2, [r7, #24]
 800c234:	693b      	ldr	r3, [r7, #16]
 800c236:	4313      	orrs	r3, r2
 800c238:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800c23a:	4a31      	ldr	r2, [pc, #196]	@ (800c300 <HAL_GPIO_Init+0x324>)
 800c23c:	69bb      	ldr	r3, [r7, #24]
 800c23e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800c240:	4b2f      	ldr	r3, [pc, #188]	@ (800c300 <HAL_GPIO_Init+0x324>)
 800c242:	68db      	ldr	r3, [r3, #12]
 800c244:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800c246:	693b      	ldr	r3, [r7, #16]
 800c248:	43db      	mvns	r3, r3
 800c24a:	69ba      	ldr	r2, [r7, #24]
 800c24c:	4013      	ands	r3, r2
 800c24e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800c250:	683b      	ldr	r3, [r7, #0]
 800c252:	685b      	ldr	r3, [r3, #4]
 800c254:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800c258:	2b00      	cmp	r3, #0
 800c25a:	d003      	beq.n	800c264 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800c25c:	69ba      	ldr	r2, [r7, #24]
 800c25e:	693b      	ldr	r3, [r7, #16]
 800c260:	4313      	orrs	r3, r2
 800c262:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800c264:	4a26      	ldr	r2, [pc, #152]	@ (800c300 <HAL_GPIO_Init+0x324>)
 800c266:	69bb      	ldr	r3, [r7, #24]
 800c268:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800c26a:	4b25      	ldr	r3, [pc, #148]	@ (800c300 <HAL_GPIO_Init+0x324>)
 800c26c:	685b      	ldr	r3, [r3, #4]
 800c26e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800c270:	693b      	ldr	r3, [r7, #16]
 800c272:	43db      	mvns	r3, r3
 800c274:	69ba      	ldr	r2, [r7, #24]
 800c276:	4013      	ands	r3, r2
 800c278:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800c27a:	683b      	ldr	r3, [r7, #0]
 800c27c:	685b      	ldr	r3, [r3, #4]
 800c27e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c282:	2b00      	cmp	r3, #0
 800c284:	d003      	beq.n	800c28e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800c286:	69ba      	ldr	r2, [r7, #24]
 800c288:	693b      	ldr	r3, [r7, #16]
 800c28a:	4313      	orrs	r3, r2
 800c28c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800c28e:	4a1c      	ldr	r2, [pc, #112]	@ (800c300 <HAL_GPIO_Init+0x324>)
 800c290:	69bb      	ldr	r3, [r7, #24]
 800c292:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800c294:	4b1a      	ldr	r3, [pc, #104]	@ (800c300 <HAL_GPIO_Init+0x324>)
 800c296:	681b      	ldr	r3, [r3, #0]
 800c298:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800c29a:	693b      	ldr	r3, [r7, #16]
 800c29c:	43db      	mvns	r3, r3
 800c29e:	69ba      	ldr	r2, [r7, #24]
 800c2a0:	4013      	ands	r3, r2
 800c2a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800c2a4:	683b      	ldr	r3, [r7, #0]
 800c2a6:	685b      	ldr	r3, [r3, #4]
 800c2a8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800c2ac:	2b00      	cmp	r3, #0
 800c2ae:	d003      	beq.n	800c2b8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800c2b0:	69ba      	ldr	r2, [r7, #24]
 800c2b2:	693b      	ldr	r3, [r7, #16]
 800c2b4:	4313      	orrs	r3, r2
 800c2b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800c2b8:	4a11      	ldr	r2, [pc, #68]	@ (800c300 <HAL_GPIO_Init+0x324>)
 800c2ba:	69bb      	ldr	r3, [r7, #24]
 800c2bc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800c2be:	69fb      	ldr	r3, [r7, #28]
 800c2c0:	3301      	adds	r3, #1
 800c2c2:	61fb      	str	r3, [r7, #28]
 800c2c4:	69fb      	ldr	r3, [r7, #28]
 800c2c6:	2b0f      	cmp	r3, #15
 800c2c8:	f67f ae96 	bls.w	800bff8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800c2cc:	bf00      	nop
 800c2ce:	bf00      	nop
 800c2d0:	3724      	adds	r7, #36	@ 0x24
 800c2d2:	46bd      	mov	sp, r7
 800c2d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2d8:	4770      	bx	lr
 800c2da:	bf00      	nop
 800c2dc:	40023800 	.word	0x40023800
 800c2e0:	40013800 	.word	0x40013800
 800c2e4:	40020000 	.word	0x40020000
 800c2e8:	40020400 	.word	0x40020400
 800c2ec:	40020800 	.word	0x40020800
 800c2f0:	40020c00 	.word	0x40020c00
 800c2f4:	40021000 	.word	0x40021000
 800c2f8:	40021400 	.word	0x40021400
 800c2fc:	40021800 	.word	0x40021800
 800c300:	40013c00 	.word	0x40013c00

0800c304 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800c304:	b480      	push	{r7}
 800c306:	b083      	sub	sp, #12
 800c308:	af00      	add	r7, sp, #0
 800c30a:	6078      	str	r0, [r7, #4]
 800c30c:	460b      	mov	r3, r1
 800c30e:	807b      	strh	r3, [r7, #2]
 800c310:	4613      	mov	r3, r2
 800c312:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800c314:	787b      	ldrb	r3, [r7, #1]
 800c316:	2b00      	cmp	r3, #0
 800c318:	d003      	beq.n	800c322 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800c31a:	887a      	ldrh	r2, [r7, #2]
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800c320:	e003      	b.n	800c32a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800c322:	887b      	ldrh	r3, [r7, #2]
 800c324:	041a      	lsls	r2, r3, #16
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	619a      	str	r2, [r3, #24]
}
 800c32a:	bf00      	nop
 800c32c:	370c      	adds	r7, #12
 800c32e:	46bd      	mov	sp, r7
 800c330:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c334:	4770      	bx	lr
	...

0800c338 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800c338:	b580      	push	{r7, lr}
 800c33a:	b084      	sub	sp, #16
 800c33c:	af00      	add	r7, sp, #0
 800c33e:	6078      	str	r0, [r7, #4]
 800c340:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800c342:	687b      	ldr	r3, [r7, #4]
 800c344:	2b00      	cmp	r3, #0
 800c346:	d101      	bne.n	800c34c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800c348:	2301      	movs	r3, #1
 800c34a:	e0cc      	b.n	800c4e6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800c34c:	4b68      	ldr	r3, [pc, #416]	@ (800c4f0 <HAL_RCC_ClockConfig+0x1b8>)
 800c34e:	681b      	ldr	r3, [r3, #0]
 800c350:	f003 030f 	and.w	r3, r3, #15
 800c354:	683a      	ldr	r2, [r7, #0]
 800c356:	429a      	cmp	r2, r3
 800c358:	d90c      	bls.n	800c374 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c35a:	4b65      	ldr	r3, [pc, #404]	@ (800c4f0 <HAL_RCC_ClockConfig+0x1b8>)
 800c35c:	683a      	ldr	r2, [r7, #0]
 800c35e:	b2d2      	uxtb	r2, r2
 800c360:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800c362:	4b63      	ldr	r3, [pc, #396]	@ (800c4f0 <HAL_RCC_ClockConfig+0x1b8>)
 800c364:	681b      	ldr	r3, [r3, #0]
 800c366:	f003 030f 	and.w	r3, r3, #15
 800c36a:	683a      	ldr	r2, [r7, #0]
 800c36c:	429a      	cmp	r2, r3
 800c36e:	d001      	beq.n	800c374 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800c370:	2301      	movs	r3, #1
 800c372:	e0b8      	b.n	800c4e6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	681b      	ldr	r3, [r3, #0]
 800c378:	f003 0302 	and.w	r3, r3, #2
 800c37c:	2b00      	cmp	r3, #0
 800c37e:	d020      	beq.n	800c3c2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c380:	687b      	ldr	r3, [r7, #4]
 800c382:	681b      	ldr	r3, [r3, #0]
 800c384:	f003 0304 	and.w	r3, r3, #4
 800c388:	2b00      	cmp	r3, #0
 800c38a:	d005      	beq.n	800c398 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800c38c:	4b59      	ldr	r3, [pc, #356]	@ (800c4f4 <HAL_RCC_ClockConfig+0x1bc>)
 800c38e:	689b      	ldr	r3, [r3, #8]
 800c390:	4a58      	ldr	r2, [pc, #352]	@ (800c4f4 <HAL_RCC_ClockConfig+0x1bc>)
 800c392:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800c396:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	681b      	ldr	r3, [r3, #0]
 800c39c:	f003 0308 	and.w	r3, r3, #8
 800c3a0:	2b00      	cmp	r3, #0
 800c3a2:	d005      	beq.n	800c3b0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800c3a4:	4b53      	ldr	r3, [pc, #332]	@ (800c4f4 <HAL_RCC_ClockConfig+0x1bc>)
 800c3a6:	689b      	ldr	r3, [r3, #8]
 800c3a8:	4a52      	ldr	r2, [pc, #328]	@ (800c4f4 <HAL_RCC_ClockConfig+0x1bc>)
 800c3aa:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800c3ae:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800c3b0:	4b50      	ldr	r3, [pc, #320]	@ (800c4f4 <HAL_RCC_ClockConfig+0x1bc>)
 800c3b2:	689b      	ldr	r3, [r3, #8]
 800c3b4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	689b      	ldr	r3, [r3, #8]
 800c3bc:	494d      	ldr	r1, [pc, #308]	@ (800c4f4 <HAL_RCC_ClockConfig+0x1bc>)
 800c3be:	4313      	orrs	r3, r2
 800c3c0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800c3c2:	687b      	ldr	r3, [r7, #4]
 800c3c4:	681b      	ldr	r3, [r3, #0]
 800c3c6:	f003 0301 	and.w	r3, r3, #1
 800c3ca:	2b00      	cmp	r3, #0
 800c3cc:	d044      	beq.n	800c458 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	685b      	ldr	r3, [r3, #4]
 800c3d2:	2b01      	cmp	r3, #1
 800c3d4:	d107      	bne.n	800c3e6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800c3d6:	4b47      	ldr	r3, [pc, #284]	@ (800c4f4 <HAL_RCC_ClockConfig+0x1bc>)
 800c3d8:	681b      	ldr	r3, [r3, #0]
 800c3da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c3de:	2b00      	cmp	r3, #0
 800c3e0:	d119      	bne.n	800c416 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800c3e2:	2301      	movs	r3, #1
 800c3e4:	e07f      	b.n	800c4e6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800c3e6:	687b      	ldr	r3, [r7, #4]
 800c3e8:	685b      	ldr	r3, [r3, #4]
 800c3ea:	2b02      	cmp	r3, #2
 800c3ec:	d003      	beq.n	800c3f6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800c3f2:	2b03      	cmp	r3, #3
 800c3f4:	d107      	bne.n	800c406 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800c3f6:	4b3f      	ldr	r3, [pc, #252]	@ (800c4f4 <HAL_RCC_ClockConfig+0x1bc>)
 800c3f8:	681b      	ldr	r3, [r3, #0]
 800c3fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c3fe:	2b00      	cmp	r3, #0
 800c400:	d109      	bne.n	800c416 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800c402:	2301      	movs	r3, #1
 800c404:	e06f      	b.n	800c4e6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800c406:	4b3b      	ldr	r3, [pc, #236]	@ (800c4f4 <HAL_RCC_ClockConfig+0x1bc>)
 800c408:	681b      	ldr	r3, [r3, #0]
 800c40a:	f003 0302 	and.w	r3, r3, #2
 800c40e:	2b00      	cmp	r3, #0
 800c410:	d101      	bne.n	800c416 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800c412:	2301      	movs	r3, #1
 800c414:	e067      	b.n	800c4e6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800c416:	4b37      	ldr	r3, [pc, #220]	@ (800c4f4 <HAL_RCC_ClockConfig+0x1bc>)
 800c418:	689b      	ldr	r3, [r3, #8]
 800c41a:	f023 0203 	bic.w	r2, r3, #3
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	685b      	ldr	r3, [r3, #4]
 800c422:	4934      	ldr	r1, [pc, #208]	@ (800c4f4 <HAL_RCC_ClockConfig+0x1bc>)
 800c424:	4313      	orrs	r3, r2
 800c426:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800c428:	f7fe fa12 	bl	800a850 <HAL_GetTick>
 800c42c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c42e:	e00a      	b.n	800c446 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800c430:	f7fe fa0e 	bl	800a850 <HAL_GetTick>
 800c434:	4602      	mov	r2, r0
 800c436:	68fb      	ldr	r3, [r7, #12]
 800c438:	1ad3      	subs	r3, r2, r3
 800c43a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c43e:	4293      	cmp	r3, r2
 800c440:	d901      	bls.n	800c446 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800c442:	2303      	movs	r3, #3
 800c444:	e04f      	b.n	800c4e6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c446:	4b2b      	ldr	r3, [pc, #172]	@ (800c4f4 <HAL_RCC_ClockConfig+0x1bc>)
 800c448:	689b      	ldr	r3, [r3, #8]
 800c44a:	f003 020c 	and.w	r2, r3, #12
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	685b      	ldr	r3, [r3, #4]
 800c452:	009b      	lsls	r3, r3, #2
 800c454:	429a      	cmp	r2, r3
 800c456:	d1eb      	bne.n	800c430 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800c458:	4b25      	ldr	r3, [pc, #148]	@ (800c4f0 <HAL_RCC_ClockConfig+0x1b8>)
 800c45a:	681b      	ldr	r3, [r3, #0]
 800c45c:	f003 030f 	and.w	r3, r3, #15
 800c460:	683a      	ldr	r2, [r7, #0]
 800c462:	429a      	cmp	r2, r3
 800c464:	d20c      	bcs.n	800c480 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c466:	4b22      	ldr	r3, [pc, #136]	@ (800c4f0 <HAL_RCC_ClockConfig+0x1b8>)
 800c468:	683a      	ldr	r2, [r7, #0]
 800c46a:	b2d2      	uxtb	r2, r2
 800c46c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800c46e:	4b20      	ldr	r3, [pc, #128]	@ (800c4f0 <HAL_RCC_ClockConfig+0x1b8>)
 800c470:	681b      	ldr	r3, [r3, #0]
 800c472:	f003 030f 	and.w	r3, r3, #15
 800c476:	683a      	ldr	r2, [r7, #0]
 800c478:	429a      	cmp	r2, r3
 800c47a:	d001      	beq.n	800c480 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800c47c:	2301      	movs	r3, #1
 800c47e:	e032      	b.n	800c4e6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c480:	687b      	ldr	r3, [r7, #4]
 800c482:	681b      	ldr	r3, [r3, #0]
 800c484:	f003 0304 	and.w	r3, r3, #4
 800c488:	2b00      	cmp	r3, #0
 800c48a:	d008      	beq.n	800c49e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800c48c:	4b19      	ldr	r3, [pc, #100]	@ (800c4f4 <HAL_RCC_ClockConfig+0x1bc>)
 800c48e:	689b      	ldr	r3, [r3, #8]
 800c490:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800c494:	687b      	ldr	r3, [r7, #4]
 800c496:	68db      	ldr	r3, [r3, #12]
 800c498:	4916      	ldr	r1, [pc, #88]	@ (800c4f4 <HAL_RCC_ClockConfig+0x1bc>)
 800c49a:	4313      	orrs	r3, r2
 800c49c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c49e:	687b      	ldr	r3, [r7, #4]
 800c4a0:	681b      	ldr	r3, [r3, #0]
 800c4a2:	f003 0308 	and.w	r3, r3, #8
 800c4a6:	2b00      	cmp	r3, #0
 800c4a8:	d009      	beq.n	800c4be <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800c4aa:	4b12      	ldr	r3, [pc, #72]	@ (800c4f4 <HAL_RCC_ClockConfig+0x1bc>)
 800c4ac:	689b      	ldr	r3, [r3, #8]
 800c4ae:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800c4b2:	687b      	ldr	r3, [r7, #4]
 800c4b4:	691b      	ldr	r3, [r3, #16]
 800c4b6:	00db      	lsls	r3, r3, #3
 800c4b8:	490e      	ldr	r1, [pc, #56]	@ (800c4f4 <HAL_RCC_ClockConfig+0x1bc>)
 800c4ba:	4313      	orrs	r3, r2
 800c4bc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800c4be:	f000 f821 	bl	800c504 <HAL_RCC_GetSysClockFreq>
 800c4c2:	4602      	mov	r2, r0
 800c4c4:	4b0b      	ldr	r3, [pc, #44]	@ (800c4f4 <HAL_RCC_ClockConfig+0x1bc>)
 800c4c6:	689b      	ldr	r3, [r3, #8]
 800c4c8:	091b      	lsrs	r3, r3, #4
 800c4ca:	f003 030f 	and.w	r3, r3, #15
 800c4ce:	490a      	ldr	r1, [pc, #40]	@ (800c4f8 <HAL_RCC_ClockConfig+0x1c0>)
 800c4d0:	5ccb      	ldrb	r3, [r1, r3]
 800c4d2:	fa22 f303 	lsr.w	r3, r2, r3
 800c4d6:	4a09      	ldr	r2, [pc, #36]	@ (800c4fc <HAL_RCC_ClockConfig+0x1c4>)
 800c4d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800c4da:	4b09      	ldr	r3, [pc, #36]	@ (800c500 <HAL_RCC_ClockConfig+0x1c8>)
 800c4dc:	681b      	ldr	r3, [r3, #0]
 800c4de:	4618      	mov	r0, r3
 800c4e0:	f7fe f972 	bl	800a7c8 <HAL_InitTick>

  return HAL_OK;
 800c4e4:	2300      	movs	r3, #0
}
 800c4e6:	4618      	mov	r0, r3
 800c4e8:	3710      	adds	r7, #16
 800c4ea:	46bd      	mov	sp, r7
 800c4ec:	bd80      	pop	{r7, pc}
 800c4ee:	bf00      	nop
 800c4f0:	40023c00 	.word	0x40023c00
 800c4f4:	40023800 	.word	0x40023800
 800c4f8:	0800ea8c 	.word	0x0800ea8c
 800c4fc:	20000000 	.word	0x20000000
 800c500:	20000008 	.word	0x20000008

0800c504 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800c504:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c508:	b0ae      	sub	sp, #184	@ 0xb8
 800c50a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800c50c:	2300      	movs	r3, #0
 800c50e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 800c512:	2300      	movs	r3, #0
 800c514:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 800c518:	2300      	movs	r3, #0
 800c51a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 800c51e:	2300      	movs	r3, #0
 800c520:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 800c524:	2300      	movs	r3, #0
 800c526:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800c52a:	4bcb      	ldr	r3, [pc, #812]	@ (800c858 <HAL_RCC_GetSysClockFreq+0x354>)
 800c52c:	689b      	ldr	r3, [r3, #8]
 800c52e:	f003 030c 	and.w	r3, r3, #12
 800c532:	2b0c      	cmp	r3, #12
 800c534:	f200 8204 	bhi.w	800c940 <HAL_RCC_GetSysClockFreq+0x43c>
 800c538:	a201      	add	r2, pc, #4	@ (adr r2, 800c540 <HAL_RCC_GetSysClockFreq+0x3c>)
 800c53a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c53e:	bf00      	nop
 800c540:	0800c575 	.word	0x0800c575
 800c544:	0800c941 	.word	0x0800c941
 800c548:	0800c941 	.word	0x0800c941
 800c54c:	0800c941 	.word	0x0800c941
 800c550:	0800c57d 	.word	0x0800c57d
 800c554:	0800c941 	.word	0x0800c941
 800c558:	0800c941 	.word	0x0800c941
 800c55c:	0800c941 	.word	0x0800c941
 800c560:	0800c585 	.word	0x0800c585
 800c564:	0800c941 	.word	0x0800c941
 800c568:	0800c941 	.word	0x0800c941
 800c56c:	0800c941 	.word	0x0800c941
 800c570:	0800c775 	.word	0x0800c775
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800c574:	4bb9      	ldr	r3, [pc, #740]	@ (800c85c <HAL_RCC_GetSysClockFreq+0x358>)
 800c576:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800c57a:	e1e5      	b.n	800c948 <HAL_RCC_GetSysClockFreq+0x444>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800c57c:	4bb7      	ldr	r3, [pc, #732]	@ (800c85c <HAL_RCC_GetSysClockFreq+0x358>)
 800c57e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800c582:	e1e1      	b.n	800c948 <HAL_RCC_GetSysClockFreq+0x444>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800c584:	4bb4      	ldr	r3, [pc, #720]	@ (800c858 <HAL_RCC_GetSysClockFreq+0x354>)
 800c586:	685b      	ldr	r3, [r3, #4]
 800c588:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800c58c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800c590:	4bb1      	ldr	r3, [pc, #708]	@ (800c858 <HAL_RCC_GetSysClockFreq+0x354>)
 800c592:	685b      	ldr	r3, [r3, #4]
 800c594:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800c598:	2b00      	cmp	r3, #0
 800c59a:	d071      	beq.n	800c680 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800c59c:	4bae      	ldr	r3, [pc, #696]	@ (800c858 <HAL_RCC_GetSysClockFreq+0x354>)
 800c59e:	685b      	ldr	r3, [r3, #4]
 800c5a0:	099b      	lsrs	r3, r3, #6
 800c5a2:	2200      	movs	r2, #0
 800c5a4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800c5a8:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 800c5ac:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800c5b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c5b4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800c5b8:	2300      	movs	r3, #0
 800c5ba:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800c5be:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800c5c2:	4622      	mov	r2, r4
 800c5c4:	462b      	mov	r3, r5
 800c5c6:	f04f 0000 	mov.w	r0, #0
 800c5ca:	f04f 0100 	mov.w	r1, #0
 800c5ce:	0159      	lsls	r1, r3, #5
 800c5d0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800c5d4:	0150      	lsls	r0, r2, #5
 800c5d6:	4602      	mov	r2, r0
 800c5d8:	460b      	mov	r3, r1
 800c5da:	4621      	mov	r1, r4
 800c5dc:	1a51      	subs	r1, r2, r1
 800c5de:	6439      	str	r1, [r7, #64]	@ 0x40
 800c5e0:	4629      	mov	r1, r5
 800c5e2:	eb63 0301 	sbc.w	r3, r3, r1
 800c5e6:	647b      	str	r3, [r7, #68]	@ 0x44
 800c5e8:	f04f 0200 	mov.w	r2, #0
 800c5ec:	f04f 0300 	mov.w	r3, #0
 800c5f0:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 800c5f4:	4649      	mov	r1, r9
 800c5f6:	018b      	lsls	r3, r1, #6
 800c5f8:	4641      	mov	r1, r8
 800c5fa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800c5fe:	4641      	mov	r1, r8
 800c600:	018a      	lsls	r2, r1, #6
 800c602:	4641      	mov	r1, r8
 800c604:	1a51      	subs	r1, r2, r1
 800c606:	63b9      	str	r1, [r7, #56]	@ 0x38
 800c608:	4649      	mov	r1, r9
 800c60a:	eb63 0301 	sbc.w	r3, r3, r1
 800c60e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c610:	f04f 0200 	mov.w	r2, #0
 800c614:	f04f 0300 	mov.w	r3, #0
 800c618:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 800c61c:	4649      	mov	r1, r9
 800c61e:	00cb      	lsls	r3, r1, #3
 800c620:	4641      	mov	r1, r8
 800c622:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800c626:	4641      	mov	r1, r8
 800c628:	00ca      	lsls	r2, r1, #3
 800c62a:	4610      	mov	r0, r2
 800c62c:	4619      	mov	r1, r3
 800c62e:	4603      	mov	r3, r0
 800c630:	4622      	mov	r2, r4
 800c632:	189b      	adds	r3, r3, r2
 800c634:	633b      	str	r3, [r7, #48]	@ 0x30
 800c636:	462b      	mov	r3, r5
 800c638:	460a      	mov	r2, r1
 800c63a:	eb42 0303 	adc.w	r3, r2, r3
 800c63e:	637b      	str	r3, [r7, #52]	@ 0x34
 800c640:	f04f 0200 	mov.w	r2, #0
 800c644:	f04f 0300 	mov.w	r3, #0
 800c648:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800c64c:	4629      	mov	r1, r5
 800c64e:	028b      	lsls	r3, r1, #10
 800c650:	4621      	mov	r1, r4
 800c652:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800c656:	4621      	mov	r1, r4
 800c658:	028a      	lsls	r2, r1, #10
 800c65a:	4610      	mov	r0, r2
 800c65c:	4619      	mov	r1, r3
 800c65e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c662:	2200      	movs	r2, #0
 800c664:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800c668:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800c66c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 800c670:	f7f4 f9e8 	bl	8000a44 <__aeabi_uldivmod>
 800c674:	4602      	mov	r2, r0
 800c676:	460b      	mov	r3, r1
 800c678:	4613      	mov	r3, r2
 800c67a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800c67e:	e067      	b.n	800c750 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800c680:	4b75      	ldr	r3, [pc, #468]	@ (800c858 <HAL_RCC_GetSysClockFreq+0x354>)
 800c682:	685b      	ldr	r3, [r3, #4]
 800c684:	099b      	lsrs	r3, r3, #6
 800c686:	2200      	movs	r2, #0
 800c688:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800c68c:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 800c690:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800c694:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c698:	67bb      	str	r3, [r7, #120]	@ 0x78
 800c69a:	2300      	movs	r3, #0
 800c69c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800c69e:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 800c6a2:	4622      	mov	r2, r4
 800c6a4:	462b      	mov	r3, r5
 800c6a6:	f04f 0000 	mov.w	r0, #0
 800c6aa:	f04f 0100 	mov.w	r1, #0
 800c6ae:	0159      	lsls	r1, r3, #5
 800c6b0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800c6b4:	0150      	lsls	r0, r2, #5
 800c6b6:	4602      	mov	r2, r0
 800c6b8:	460b      	mov	r3, r1
 800c6ba:	4621      	mov	r1, r4
 800c6bc:	1a51      	subs	r1, r2, r1
 800c6be:	62b9      	str	r1, [r7, #40]	@ 0x28
 800c6c0:	4629      	mov	r1, r5
 800c6c2:	eb63 0301 	sbc.w	r3, r3, r1
 800c6c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c6c8:	f04f 0200 	mov.w	r2, #0
 800c6cc:	f04f 0300 	mov.w	r3, #0
 800c6d0:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 800c6d4:	4649      	mov	r1, r9
 800c6d6:	018b      	lsls	r3, r1, #6
 800c6d8:	4641      	mov	r1, r8
 800c6da:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800c6de:	4641      	mov	r1, r8
 800c6e0:	018a      	lsls	r2, r1, #6
 800c6e2:	4641      	mov	r1, r8
 800c6e4:	ebb2 0a01 	subs.w	sl, r2, r1
 800c6e8:	4649      	mov	r1, r9
 800c6ea:	eb63 0b01 	sbc.w	fp, r3, r1
 800c6ee:	f04f 0200 	mov.w	r2, #0
 800c6f2:	f04f 0300 	mov.w	r3, #0
 800c6f6:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800c6fa:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800c6fe:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800c702:	4692      	mov	sl, r2
 800c704:	469b      	mov	fp, r3
 800c706:	4623      	mov	r3, r4
 800c708:	eb1a 0303 	adds.w	r3, sl, r3
 800c70c:	623b      	str	r3, [r7, #32]
 800c70e:	462b      	mov	r3, r5
 800c710:	eb4b 0303 	adc.w	r3, fp, r3
 800c714:	627b      	str	r3, [r7, #36]	@ 0x24
 800c716:	f04f 0200 	mov.w	r2, #0
 800c71a:	f04f 0300 	mov.w	r3, #0
 800c71e:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800c722:	4629      	mov	r1, r5
 800c724:	028b      	lsls	r3, r1, #10
 800c726:	4621      	mov	r1, r4
 800c728:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800c72c:	4621      	mov	r1, r4
 800c72e:	028a      	lsls	r2, r1, #10
 800c730:	4610      	mov	r0, r2
 800c732:	4619      	mov	r1, r3
 800c734:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c738:	2200      	movs	r2, #0
 800c73a:	673b      	str	r3, [r7, #112]	@ 0x70
 800c73c:	677a      	str	r2, [r7, #116]	@ 0x74
 800c73e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 800c742:	f7f4 f97f 	bl	8000a44 <__aeabi_uldivmod>
 800c746:	4602      	mov	r2, r0
 800c748:	460b      	mov	r3, r1
 800c74a:	4613      	mov	r3, r2
 800c74c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800c750:	4b41      	ldr	r3, [pc, #260]	@ (800c858 <HAL_RCC_GetSysClockFreq+0x354>)
 800c752:	685b      	ldr	r3, [r3, #4]
 800c754:	0c1b      	lsrs	r3, r3, #16
 800c756:	f003 0303 	and.w	r3, r3, #3
 800c75a:	3301      	adds	r3, #1
 800c75c:	005b      	lsls	r3, r3, #1
 800c75e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 800c762:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800c766:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800c76a:	fbb2 f3f3 	udiv	r3, r2, r3
 800c76e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800c772:	e0e9      	b.n	800c948 <HAL_RCC_GetSysClockFreq+0x444>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800c774:	4b38      	ldr	r3, [pc, #224]	@ (800c858 <HAL_RCC_GetSysClockFreq+0x354>)
 800c776:	685b      	ldr	r3, [r3, #4]
 800c778:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800c77c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800c780:	4b35      	ldr	r3, [pc, #212]	@ (800c858 <HAL_RCC_GetSysClockFreq+0x354>)
 800c782:	685b      	ldr	r3, [r3, #4]
 800c784:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800c788:	2b00      	cmp	r3, #0
 800c78a:	d069      	beq.n	800c860 <HAL_RCC_GetSysClockFreq+0x35c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800c78c:	4b32      	ldr	r3, [pc, #200]	@ (800c858 <HAL_RCC_GetSysClockFreq+0x354>)
 800c78e:	685b      	ldr	r3, [r3, #4]
 800c790:	099b      	lsrs	r3, r3, #6
 800c792:	2200      	movs	r2, #0
 800c794:	66bb      	str	r3, [r7, #104]	@ 0x68
 800c796:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800c798:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c79a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c79e:	663b      	str	r3, [r7, #96]	@ 0x60
 800c7a0:	2300      	movs	r3, #0
 800c7a2:	667b      	str	r3, [r7, #100]	@ 0x64
 800c7a4:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 800c7a8:	4622      	mov	r2, r4
 800c7aa:	462b      	mov	r3, r5
 800c7ac:	f04f 0000 	mov.w	r0, #0
 800c7b0:	f04f 0100 	mov.w	r1, #0
 800c7b4:	0159      	lsls	r1, r3, #5
 800c7b6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800c7ba:	0150      	lsls	r0, r2, #5
 800c7bc:	4602      	mov	r2, r0
 800c7be:	460b      	mov	r3, r1
 800c7c0:	4621      	mov	r1, r4
 800c7c2:	1a51      	subs	r1, r2, r1
 800c7c4:	61b9      	str	r1, [r7, #24]
 800c7c6:	4629      	mov	r1, r5
 800c7c8:	eb63 0301 	sbc.w	r3, r3, r1
 800c7cc:	61fb      	str	r3, [r7, #28]
 800c7ce:	f04f 0200 	mov.w	r2, #0
 800c7d2:	f04f 0300 	mov.w	r3, #0
 800c7d6:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800c7da:	4659      	mov	r1, fp
 800c7dc:	018b      	lsls	r3, r1, #6
 800c7de:	4651      	mov	r1, sl
 800c7e0:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800c7e4:	4651      	mov	r1, sl
 800c7e6:	018a      	lsls	r2, r1, #6
 800c7e8:	4651      	mov	r1, sl
 800c7ea:	ebb2 0801 	subs.w	r8, r2, r1
 800c7ee:	4659      	mov	r1, fp
 800c7f0:	eb63 0901 	sbc.w	r9, r3, r1
 800c7f4:	f04f 0200 	mov.w	r2, #0
 800c7f8:	f04f 0300 	mov.w	r3, #0
 800c7fc:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800c800:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800c804:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800c808:	4690      	mov	r8, r2
 800c80a:	4699      	mov	r9, r3
 800c80c:	4623      	mov	r3, r4
 800c80e:	eb18 0303 	adds.w	r3, r8, r3
 800c812:	613b      	str	r3, [r7, #16]
 800c814:	462b      	mov	r3, r5
 800c816:	eb49 0303 	adc.w	r3, r9, r3
 800c81a:	617b      	str	r3, [r7, #20]
 800c81c:	f04f 0200 	mov.w	r2, #0
 800c820:	f04f 0300 	mov.w	r3, #0
 800c824:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800c828:	4629      	mov	r1, r5
 800c82a:	028b      	lsls	r3, r1, #10
 800c82c:	4621      	mov	r1, r4
 800c82e:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800c832:	4621      	mov	r1, r4
 800c834:	028a      	lsls	r2, r1, #10
 800c836:	4610      	mov	r0, r2
 800c838:	4619      	mov	r1, r3
 800c83a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c83e:	2200      	movs	r2, #0
 800c840:	65bb      	str	r3, [r7, #88]	@ 0x58
 800c842:	65fa      	str	r2, [r7, #92]	@ 0x5c
 800c844:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800c848:	f7f4 f8fc 	bl	8000a44 <__aeabi_uldivmod>
 800c84c:	4602      	mov	r2, r0
 800c84e:	460b      	mov	r3, r1
 800c850:	4613      	mov	r3, r2
 800c852:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800c856:	e063      	b.n	800c920 <HAL_RCC_GetSysClockFreq+0x41c>
 800c858:	40023800 	.word	0x40023800
 800c85c:	00f42400 	.word	0x00f42400
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800c860:	4b3d      	ldr	r3, [pc, #244]	@ (800c958 <HAL_RCC_GetSysClockFreq+0x454>)
 800c862:	685b      	ldr	r3, [r3, #4]
 800c864:	099b      	lsrs	r3, r3, #6
 800c866:	2200      	movs	r2, #0
 800c868:	4618      	mov	r0, r3
 800c86a:	4611      	mov	r1, r2
 800c86c:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800c870:	653b      	str	r3, [r7, #80]	@ 0x50
 800c872:	2300      	movs	r3, #0
 800c874:	657b      	str	r3, [r7, #84]	@ 0x54
 800c876:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 800c87a:	4642      	mov	r2, r8
 800c87c:	464b      	mov	r3, r9
 800c87e:	f04f 0000 	mov.w	r0, #0
 800c882:	f04f 0100 	mov.w	r1, #0
 800c886:	0159      	lsls	r1, r3, #5
 800c888:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800c88c:	0150      	lsls	r0, r2, #5
 800c88e:	4602      	mov	r2, r0
 800c890:	460b      	mov	r3, r1
 800c892:	4641      	mov	r1, r8
 800c894:	1a51      	subs	r1, r2, r1
 800c896:	60b9      	str	r1, [r7, #8]
 800c898:	4649      	mov	r1, r9
 800c89a:	eb63 0301 	sbc.w	r3, r3, r1
 800c89e:	60fb      	str	r3, [r7, #12]
 800c8a0:	f04f 0200 	mov.w	r2, #0
 800c8a4:	f04f 0300 	mov.w	r3, #0
 800c8a8:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 800c8ac:	4659      	mov	r1, fp
 800c8ae:	018b      	lsls	r3, r1, #6
 800c8b0:	4651      	mov	r1, sl
 800c8b2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800c8b6:	4651      	mov	r1, sl
 800c8b8:	018a      	lsls	r2, r1, #6
 800c8ba:	4651      	mov	r1, sl
 800c8bc:	1a54      	subs	r4, r2, r1
 800c8be:	4659      	mov	r1, fp
 800c8c0:	eb63 0501 	sbc.w	r5, r3, r1
 800c8c4:	f04f 0200 	mov.w	r2, #0
 800c8c8:	f04f 0300 	mov.w	r3, #0
 800c8cc:	00eb      	lsls	r3, r5, #3
 800c8ce:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800c8d2:	00e2      	lsls	r2, r4, #3
 800c8d4:	4614      	mov	r4, r2
 800c8d6:	461d      	mov	r5, r3
 800c8d8:	4643      	mov	r3, r8
 800c8da:	18e3      	adds	r3, r4, r3
 800c8dc:	603b      	str	r3, [r7, #0]
 800c8de:	464b      	mov	r3, r9
 800c8e0:	eb45 0303 	adc.w	r3, r5, r3
 800c8e4:	607b      	str	r3, [r7, #4]
 800c8e6:	f04f 0200 	mov.w	r2, #0
 800c8ea:	f04f 0300 	mov.w	r3, #0
 800c8ee:	e9d7 4500 	ldrd	r4, r5, [r7]
 800c8f2:	4629      	mov	r1, r5
 800c8f4:	028b      	lsls	r3, r1, #10
 800c8f6:	4621      	mov	r1, r4
 800c8f8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800c8fc:	4621      	mov	r1, r4
 800c8fe:	028a      	lsls	r2, r1, #10
 800c900:	4610      	mov	r0, r2
 800c902:	4619      	mov	r1, r3
 800c904:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c908:	2200      	movs	r2, #0
 800c90a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c90c:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800c90e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800c912:	f7f4 f897 	bl	8000a44 <__aeabi_uldivmod>
 800c916:	4602      	mov	r2, r0
 800c918:	460b      	mov	r3, r1
 800c91a:	4613      	mov	r3, r2
 800c91c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800c920:	4b0d      	ldr	r3, [pc, #52]	@ (800c958 <HAL_RCC_GetSysClockFreq+0x454>)
 800c922:	685b      	ldr	r3, [r3, #4]
 800c924:	0f1b      	lsrs	r3, r3, #28
 800c926:	f003 0307 	and.w	r3, r3, #7
 800c92a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 800c92e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800c932:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800c936:	fbb2 f3f3 	udiv	r3, r2, r3
 800c93a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800c93e:	e003      	b.n	800c948 <HAL_RCC_GetSysClockFreq+0x444>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800c940:	4b06      	ldr	r3, [pc, #24]	@ (800c95c <HAL_RCC_GetSysClockFreq+0x458>)
 800c942:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800c946:	bf00      	nop
    }
  }
  return sysclockfreq;
 800c948:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 800c94c:	4618      	mov	r0, r3
 800c94e:	37b8      	adds	r7, #184	@ 0xb8
 800c950:	46bd      	mov	sp, r7
 800c952:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c956:	bf00      	nop
 800c958:	40023800 	.word	0x40023800
 800c95c:	00f42400 	.word	0x00f42400

0800c960 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800c960:	b580      	push	{r7, lr}
 800c962:	b086      	sub	sp, #24
 800c964:	af00      	add	r7, sp, #0
 800c966:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800c968:	687b      	ldr	r3, [r7, #4]
 800c96a:	2b00      	cmp	r3, #0
 800c96c:	d101      	bne.n	800c972 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800c96e:	2301      	movs	r3, #1
 800c970:	e28d      	b.n	800ce8e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800c972:	687b      	ldr	r3, [r7, #4]
 800c974:	681b      	ldr	r3, [r3, #0]
 800c976:	f003 0301 	and.w	r3, r3, #1
 800c97a:	2b00      	cmp	r3, #0
 800c97c:	f000 8083 	beq.w	800ca86 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800c980:	4b94      	ldr	r3, [pc, #592]	@ (800cbd4 <HAL_RCC_OscConfig+0x274>)
 800c982:	689b      	ldr	r3, [r3, #8]
 800c984:	f003 030c 	and.w	r3, r3, #12
 800c988:	2b04      	cmp	r3, #4
 800c98a:	d019      	beq.n	800c9c0 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800c98c:	4b91      	ldr	r3, [pc, #580]	@ (800cbd4 <HAL_RCC_OscConfig+0x274>)
 800c98e:	689b      	ldr	r3, [r3, #8]
 800c990:	f003 030c 	and.w	r3, r3, #12
        || \
 800c994:	2b08      	cmp	r3, #8
 800c996:	d106      	bne.n	800c9a6 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800c998:	4b8e      	ldr	r3, [pc, #568]	@ (800cbd4 <HAL_RCC_OscConfig+0x274>)
 800c99a:	685b      	ldr	r3, [r3, #4]
 800c99c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800c9a0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800c9a4:	d00c      	beq.n	800c9c0 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800c9a6:	4b8b      	ldr	r3, [pc, #556]	@ (800cbd4 <HAL_RCC_OscConfig+0x274>)
 800c9a8:	689b      	ldr	r3, [r3, #8]
 800c9aa:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800c9ae:	2b0c      	cmp	r3, #12
 800c9b0:	d112      	bne.n	800c9d8 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800c9b2:	4b88      	ldr	r3, [pc, #544]	@ (800cbd4 <HAL_RCC_OscConfig+0x274>)
 800c9b4:	685b      	ldr	r3, [r3, #4]
 800c9b6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800c9ba:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800c9be:	d10b      	bne.n	800c9d8 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c9c0:	4b84      	ldr	r3, [pc, #528]	@ (800cbd4 <HAL_RCC_OscConfig+0x274>)
 800c9c2:	681b      	ldr	r3, [r3, #0]
 800c9c4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c9c8:	2b00      	cmp	r3, #0
 800c9ca:	d05b      	beq.n	800ca84 <HAL_RCC_OscConfig+0x124>
 800c9cc:	687b      	ldr	r3, [r7, #4]
 800c9ce:	685b      	ldr	r3, [r3, #4]
 800c9d0:	2b00      	cmp	r3, #0
 800c9d2:	d157      	bne.n	800ca84 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 800c9d4:	2301      	movs	r3, #1
 800c9d6:	e25a      	b.n	800ce8e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800c9d8:	687b      	ldr	r3, [r7, #4]
 800c9da:	685b      	ldr	r3, [r3, #4]
 800c9dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c9e0:	d106      	bne.n	800c9f0 <HAL_RCC_OscConfig+0x90>
 800c9e2:	4b7c      	ldr	r3, [pc, #496]	@ (800cbd4 <HAL_RCC_OscConfig+0x274>)
 800c9e4:	681b      	ldr	r3, [r3, #0]
 800c9e6:	4a7b      	ldr	r2, [pc, #492]	@ (800cbd4 <HAL_RCC_OscConfig+0x274>)
 800c9e8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800c9ec:	6013      	str	r3, [r2, #0]
 800c9ee:	e01d      	b.n	800ca2c <HAL_RCC_OscConfig+0xcc>
 800c9f0:	687b      	ldr	r3, [r7, #4]
 800c9f2:	685b      	ldr	r3, [r3, #4]
 800c9f4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800c9f8:	d10c      	bne.n	800ca14 <HAL_RCC_OscConfig+0xb4>
 800c9fa:	4b76      	ldr	r3, [pc, #472]	@ (800cbd4 <HAL_RCC_OscConfig+0x274>)
 800c9fc:	681b      	ldr	r3, [r3, #0]
 800c9fe:	4a75      	ldr	r2, [pc, #468]	@ (800cbd4 <HAL_RCC_OscConfig+0x274>)
 800ca00:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800ca04:	6013      	str	r3, [r2, #0]
 800ca06:	4b73      	ldr	r3, [pc, #460]	@ (800cbd4 <HAL_RCC_OscConfig+0x274>)
 800ca08:	681b      	ldr	r3, [r3, #0]
 800ca0a:	4a72      	ldr	r2, [pc, #456]	@ (800cbd4 <HAL_RCC_OscConfig+0x274>)
 800ca0c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800ca10:	6013      	str	r3, [r2, #0]
 800ca12:	e00b      	b.n	800ca2c <HAL_RCC_OscConfig+0xcc>
 800ca14:	4b6f      	ldr	r3, [pc, #444]	@ (800cbd4 <HAL_RCC_OscConfig+0x274>)
 800ca16:	681b      	ldr	r3, [r3, #0]
 800ca18:	4a6e      	ldr	r2, [pc, #440]	@ (800cbd4 <HAL_RCC_OscConfig+0x274>)
 800ca1a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800ca1e:	6013      	str	r3, [r2, #0]
 800ca20:	4b6c      	ldr	r3, [pc, #432]	@ (800cbd4 <HAL_RCC_OscConfig+0x274>)
 800ca22:	681b      	ldr	r3, [r3, #0]
 800ca24:	4a6b      	ldr	r2, [pc, #428]	@ (800cbd4 <HAL_RCC_OscConfig+0x274>)
 800ca26:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800ca2a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	685b      	ldr	r3, [r3, #4]
 800ca30:	2b00      	cmp	r3, #0
 800ca32:	d013      	beq.n	800ca5c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ca34:	f7fd ff0c 	bl	800a850 <HAL_GetTick>
 800ca38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800ca3a:	e008      	b.n	800ca4e <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800ca3c:	f7fd ff08 	bl	800a850 <HAL_GetTick>
 800ca40:	4602      	mov	r2, r0
 800ca42:	693b      	ldr	r3, [r7, #16]
 800ca44:	1ad3      	subs	r3, r2, r3
 800ca46:	2b64      	cmp	r3, #100	@ 0x64
 800ca48:	d901      	bls.n	800ca4e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800ca4a:	2303      	movs	r3, #3
 800ca4c:	e21f      	b.n	800ce8e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800ca4e:	4b61      	ldr	r3, [pc, #388]	@ (800cbd4 <HAL_RCC_OscConfig+0x274>)
 800ca50:	681b      	ldr	r3, [r3, #0]
 800ca52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ca56:	2b00      	cmp	r3, #0
 800ca58:	d0f0      	beq.n	800ca3c <HAL_RCC_OscConfig+0xdc>
 800ca5a:	e014      	b.n	800ca86 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ca5c:	f7fd fef8 	bl	800a850 <HAL_GetTick>
 800ca60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800ca62:	e008      	b.n	800ca76 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800ca64:	f7fd fef4 	bl	800a850 <HAL_GetTick>
 800ca68:	4602      	mov	r2, r0
 800ca6a:	693b      	ldr	r3, [r7, #16]
 800ca6c:	1ad3      	subs	r3, r2, r3
 800ca6e:	2b64      	cmp	r3, #100	@ 0x64
 800ca70:	d901      	bls.n	800ca76 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800ca72:	2303      	movs	r3, #3
 800ca74:	e20b      	b.n	800ce8e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800ca76:	4b57      	ldr	r3, [pc, #348]	@ (800cbd4 <HAL_RCC_OscConfig+0x274>)
 800ca78:	681b      	ldr	r3, [r3, #0]
 800ca7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ca7e:	2b00      	cmp	r3, #0
 800ca80:	d1f0      	bne.n	800ca64 <HAL_RCC_OscConfig+0x104>
 800ca82:	e000      	b.n	800ca86 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800ca84:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800ca86:	687b      	ldr	r3, [r7, #4]
 800ca88:	681b      	ldr	r3, [r3, #0]
 800ca8a:	f003 0302 	and.w	r3, r3, #2
 800ca8e:	2b00      	cmp	r3, #0
 800ca90:	d06f      	beq.n	800cb72 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800ca92:	4b50      	ldr	r3, [pc, #320]	@ (800cbd4 <HAL_RCC_OscConfig+0x274>)
 800ca94:	689b      	ldr	r3, [r3, #8]
 800ca96:	f003 030c 	and.w	r3, r3, #12
 800ca9a:	2b00      	cmp	r3, #0
 800ca9c:	d017      	beq.n	800cace <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800ca9e:	4b4d      	ldr	r3, [pc, #308]	@ (800cbd4 <HAL_RCC_OscConfig+0x274>)
 800caa0:	689b      	ldr	r3, [r3, #8]
 800caa2:	f003 030c 	and.w	r3, r3, #12
        || \
 800caa6:	2b08      	cmp	r3, #8
 800caa8:	d105      	bne.n	800cab6 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800caaa:	4b4a      	ldr	r3, [pc, #296]	@ (800cbd4 <HAL_RCC_OscConfig+0x274>)
 800caac:	685b      	ldr	r3, [r3, #4]
 800caae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800cab2:	2b00      	cmp	r3, #0
 800cab4:	d00b      	beq.n	800cace <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800cab6:	4b47      	ldr	r3, [pc, #284]	@ (800cbd4 <HAL_RCC_OscConfig+0x274>)
 800cab8:	689b      	ldr	r3, [r3, #8]
 800caba:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800cabe:	2b0c      	cmp	r3, #12
 800cac0:	d11c      	bne.n	800cafc <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800cac2:	4b44      	ldr	r3, [pc, #272]	@ (800cbd4 <HAL_RCC_OscConfig+0x274>)
 800cac4:	685b      	ldr	r3, [r3, #4]
 800cac6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800caca:	2b00      	cmp	r3, #0
 800cacc:	d116      	bne.n	800cafc <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800cace:	4b41      	ldr	r3, [pc, #260]	@ (800cbd4 <HAL_RCC_OscConfig+0x274>)
 800cad0:	681b      	ldr	r3, [r3, #0]
 800cad2:	f003 0302 	and.w	r3, r3, #2
 800cad6:	2b00      	cmp	r3, #0
 800cad8:	d005      	beq.n	800cae6 <HAL_RCC_OscConfig+0x186>
 800cada:	687b      	ldr	r3, [r7, #4]
 800cadc:	68db      	ldr	r3, [r3, #12]
 800cade:	2b01      	cmp	r3, #1
 800cae0:	d001      	beq.n	800cae6 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800cae2:	2301      	movs	r3, #1
 800cae4:	e1d3      	b.n	800ce8e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800cae6:	4b3b      	ldr	r3, [pc, #236]	@ (800cbd4 <HAL_RCC_OscConfig+0x274>)
 800cae8:	681b      	ldr	r3, [r3, #0]
 800caea:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800caee:	687b      	ldr	r3, [r7, #4]
 800caf0:	691b      	ldr	r3, [r3, #16]
 800caf2:	00db      	lsls	r3, r3, #3
 800caf4:	4937      	ldr	r1, [pc, #220]	@ (800cbd4 <HAL_RCC_OscConfig+0x274>)
 800caf6:	4313      	orrs	r3, r2
 800caf8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800cafa:	e03a      	b.n	800cb72 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800cafc:	687b      	ldr	r3, [r7, #4]
 800cafe:	68db      	ldr	r3, [r3, #12]
 800cb00:	2b00      	cmp	r3, #0
 800cb02:	d020      	beq.n	800cb46 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800cb04:	4b34      	ldr	r3, [pc, #208]	@ (800cbd8 <HAL_RCC_OscConfig+0x278>)
 800cb06:	2201      	movs	r2, #1
 800cb08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cb0a:	f7fd fea1 	bl	800a850 <HAL_GetTick>
 800cb0e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800cb10:	e008      	b.n	800cb24 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800cb12:	f7fd fe9d 	bl	800a850 <HAL_GetTick>
 800cb16:	4602      	mov	r2, r0
 800cb18:	693b      	ldr	r3, [r7, #16]
 800cb1a:	1ad3      	subs	r3, r2, r3
 800cb1c:	2b02      	cmp	r3, #2
 800cb1e:	d901      	bls.n	800cb24 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800cb20:	2303      	movs	r3, #3
 800cb22:	e1b4      	b.n	800ce8e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800cb24:	4b2b      	ldr	r3, [pc, #172]	@ (800cbd4 <HAL_RCC_OscConfig+0x274>)
 800cb26:	681b      	ldr	r3, [r3, #0]
 800cb28:	f003 0302 	and.w	r3, r3, #2
 800cb2c:	2b00      	cmp	r3, #0
 800cb2e:	d0f0      	beq.n	800cb12 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800cb30:	4b28      	ldr	r3, [pc, #160]	@ (800cbd4 <HAL_RCC_OscConfig+0x274>)
 800cb32:	681b      	ldr	r3, [r3, #0]
 800cb34:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800cb38:	687b      	ldr	r3, [r7, #4]
 800cb3a:	691b      	ldr	r3, [r3, #16]
 800cb3c:	00db      	lsls	r3, r3, #3
 800cb3e:	4925      	ldr	r1, [pc, #148]	@ (800cbd4 <HAL_RCC_OscConfig+0x274>)
 800cb40:	4313      	orrs	r3, r2
 800cb42:	600b      	str	r3, [r1, #0]
 800cb44:	e015      	b.n	800cb72 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800cb46:	4b24      	ldr	r3, [pc, #144]	@ (800cbd8 <HAL_RCC_OscConfig+0x278>)
 800cb48:	2200      	movs	r2, #0
 800cb4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cb4c:	f7fd fe80 	bl	800a850 <HAL_GetTick>
 800cb50:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800cb52:	e008      	b.n	800cb66 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800cb54:	f7fd fe7c 	bl	800a850 <HAL_GetTick>
 800cb58:	4602      	mov	r2, r0
 800cb5a:	693b      	ldr	r3, [r7, #16]
 800cb5c:	1ad3      	subs	r3, r2, r3
 800cb5e:	2b02      	cmp	r3, #2
 800cb60:	d901      	bls.n	800cb66 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800cb62:	2303      	movs	r3, #3
 800cb64:	e193      	b.n	800ce8e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800cb66:	4b1b      	ldr	r3, [pc, #108]	@ (800cbd4 <HAL_RCC_OscConfig+0x274>)
 800cb68:	681b      	ldr	r3, [r3, #0]
 800cb6a:	f003 0302 	and.w	r3, r3, #2
 800cb6e:	2b00      	cmp	r3, #0
 800cb70:	d1f0      	bne.n	800cb54 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800cb72:	687b      	ldr	r3, [r7, #4]
 800cb74:	681b      	ldr	r3, [r3, #0]
 800cb76:	f003 0308 	and.w	r3, r3, #8
 800cb7a:	2b00      	cmp	r3, #0
 800cb7c:	d036      	beq.n	800cbec <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800cb7e:	687b      	ldr	r3, [r7, #4]
 800cb80:	695b      	ldr	r3, [r3, #20]
 800cb82:	2b00      	cmp	r3, #0
 800cb84:	d016      	beq.n	800cbb4 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800cb86:	4b15      	ldr	r3, [pc, #84]	@ (800cbdc <HAL_RCC_OscConfig+0x27c>)
 800cb88:	2201      	movs	r2, #1
 800cb8a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800cb8c:	f7fd fe60 	bl	800a850 <HAL_GetTick>
 800cb90:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800cb92:	e008      	b.n	800cba6 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800cb94:	f7fd fe5c 	bl	800a850 <HAL_GetTick>
 800cb98:	4602      	mov	r2, r0
 800cb9a:	693b      	ldr	r3, [r7, #16]
 800cb9c:	1ad3      	subs	r3, r2, r3
 800cb9e:	2b02      	cmp	r3, #2
 800cba0:	d901      	bls.n	800cba6 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800cba2:	2303      	movs	r3, #3
 800cba4:	e173      	b.n	800ce8e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800cba6:	4b0b      	ldr	r3, [pc, #44]	@ (800cbd4 <HAL_RCC_OscConfig+0x274>)
 800cba8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800cbaa:	f003 0302 	and.w	r3, r3, #2
 800cbae:	2b00      	cmp	r3, #0
 800cbb0:	d0f0      	beq.n	800cb94 <HAL_RCC_OscConfig+0x234>
 800cbb2:	e01b      	b.n	800cbec <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800cbb4:	4b09      	ldr	r3, [pc, #36]	@ (800cbdc <HAL_RCC_OscConfig+0x27c>)
 800cbb6:	2200      	movs	r2, #0
 800cbb8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800cbba:	f7fd fe49 	bl	800a850 <HAL_GetTick>
 800cbbe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800cbc0:	e00e      	b.n	800cbe0 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800cbc2:	f7fd fe45 	bl	800a850 <HAL_GetTick>
 800cbc6:	4602      	mov	r2, r0
 800cbc8:	693b      	ldr	r3, [r7, #16]
 800cbca:	1ad3      	subs	r3, r2, r3
 800cbcc:	2b02      	cmp	r3, #2
 800cbce:	d907      	bls.n	800cbe0 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 800cbd0:	2303      	movs	r3, #3
 800cbd2:	e15c      	b.n	800ce8e <HAL_RCC_OscConfig+0x52e>
 800cbd4:	40023800 	.word	0x40023800
 800cbd8:	42470000 	.word	0x42470000
 800cbdc:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800cbe0:	4b8a      	ldr	r3, [pc, #552]	@ (800ce0c <HAL_RCC_OscConfig+0x4ac>)
 800cbe2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800cbe4:	f003 0302 	and.w	r3, r3, #2
 800cbe8:	2b00      	cmp	r3, #0
 800cbea:	d1ea      	bne.n	800cbc2 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800cbec:	687b      	ldr	r3, [r7, #4]
 800cbee:	681b      	ldr	r3, [r3, #0]
 800cbf0:	f003 0304 	and.w	r3, r3, #4
 800cbf4:	2b00      	cmp	r3, #0
 800cbf6:	f000 8097 	beq.w	800cd28 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800cbfa:	2300      	movs	r3, #0
 800cbfc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800cbfe:	4b83      	ldr	r3, [pc, #524]	@ (800ce0c <HAL_RCC_OscConfig+0x4ac>)
 800cc00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cc02:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800cc06:	2b00      	cmp	r3, #0
 800cc08:	d10f      	bne.n	800cc2a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800cc0a:	2300      	movs	r3, #0
 800cc0c:	60bb      	str	r3, [r7, #8]
 800cc0e:	4b7f      	ldr	r3, [pc, #508]	@ (800ce0c <HAL_RCC_OscConfig+0x4ac>)
 800cc10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cc12:	4a7e      	ldr	r2, [pc, #504]	@ (800ce0c <HAL_RCC_OscConfig+0x4ac>)
 800cc14:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800cc18:	6413      	str	r3, [r2, #64]	@ 0x40
 800cc1a:	4b7c      	ldr	r3, [pc, #496]	@ (800ce0c <HAL_RCC_OscConfig+0x4ac>)
 800cc1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cc1e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800cc22:	60bb      	str	r3, [r7, #8]
 800cc24:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800cc26:	2301      	movs	r3, #1
 800cc28:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800cc2a:	4b79      	ldr	r3, [pc, #484]	@ (800ce10 <HAL_RCC_OscConfig+0x4b0>)
 800cc2c:	681b      	ldr	r3, [r3, #0]
 800cc2e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800cc32:	2b00      	cmp	r3, #0
 800cc34:	d118      	bne.n	800cc68 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800cc36:	4b76      	ldr	r3, [pc, #472]	@ (800ce10 <HAL_RCC_OscConfig+0x4b0>)
 800cc38:	681b      	ldr	r3, [r3, #0]
 800cc3a:	4a75      	ldr	r2, [pc, #468]	@ (800ce10 <HAL_RCC_OscConfig+0x4b0>)
 800cc3c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800cc40:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800cc42:	f7fd fe05 	bl	800a850 <HAL_GetTick>
 800cc46:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800cc48:	e008      	b.n	800cc5c <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800cc4a:	f7fd fe01 	bl	800a850 <HAL_GetTick>
 800cc4e:	4602      	mov	r2, r0
 800cc50:	693b      	ldr	r3, [r7, #16]
 800cc52:	1ad3      	subs	r3, r2, r3
 800cc54:	2b02      	cmp	r3, #2
 800cc56:	d901      	bls.n	800cc5c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 800cc58:	2303      	movs	r3, #3
 800cc5a:	e118      	b.n	800ce8e <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800cc5c:	4b6c      	ldr	r3, [pc, #432]	@ (800ce10 <HAL_RCC_OscConfig+0x4b0>)
 800cc5e:	681b      	ldr	r3, [r3, #0]
 800cc60:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800cc64:	2b00      	cmp	r3, #0
 800cc66:	d0f0      	beq.n	800cc4a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800cc68:	687b      	ldr	r3, [r7, #4]
 800cc6a:	689b      	ldr	r3, [r3, #8]
 800cc6c:	2b01      	cmp	r3, #1
 800cc6e:	d106      	bne.n	800cc7e <HAL_RCC_OscConfig+0x31e>
 800cc70:	4b66      	ldr	r3, [pc, #408]	@ (800ce0c <HAL_RCC_OscConfig+0x4ac>)
 800cc72:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800cc74:	4a65      	ldr	r2, [pc, #404]	@ (800ce0c <HAL_RCC_OscConfig+0x4ac>)
 800cc76:	f043 0301 	orr.w	r3, r3, #1
 800cc7a:	6713      	str	r3, [r2, #112]	@ 0x70
 800cc7c:	e01c      	b.n	800ccb8 <HAL_RCC_OscConfig+0x358>
 800cc7e:	687b      	ldr	r3, [r7, #4]
 800cc80:	689b      	ldr	r3, [r3, #8]
 800cc82:	2b05      	cmp	r3, #5
 800cc84:	d10c      	bne.n	800cca0 <HAL_RCC_OscConfig+0x340>
 800cc86:	4b61      	ldr	r3, [pc, #388]	@ (800ce0c <HAL_RCC_OscConfig+0x4ac>)
 800cc88:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800cc8a:	4a60      	ldr	r2, [pc, #384]	@ (800ce0c <HAL_RCC_OscConfig+0x4ac>)
 800cc8c:	f043 0304 	orr.w	r3, r3, #4
 800cc90:	6713      	str	r3, [r2, #112]	@ 0x70
 800cc92:	4b5e      	ldr	r3, [pc, #376]	@ (800ce0c <HAL_RCC_OscConfig+0x4ac>)
 800cc94:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800cc96:	4a5d      	ldr	r2, [pc, #372]	@ (800ce0c <HAL_RCC_OscConfig+0x4ac>)
 800cc98:	f043 0301 	orr.w	r3, r3, #1
 800cc9c:	6713      	str	r3, [r2, #112]	@ 0x70
 800cc9e:	e00b      	b.n	800ccb8 <HAL_RCC_OscConfig+0x358>
 800cca0:	4b5a      	ldr	r3, [pc, #360]	@ (800ce0c <HAL_RCC_OscConfig+0x4ac>)
 800cca2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800cca4:	4a59      	ldr	r2, [pc, #356]	@ (800ce0c <HAL_RCC_OscConfig+0x4ac>)
 800cca6:	f023 0301 	bic.w	r3, r3, #1
 800ccaa:	6713      	str	r3, [r2, #112]	@ 0x70
 800ccac:	4b57      	ldr	r3, [pc, #348]	@ (800ce0c <HAL_RCC_OscConfig+0x4ac>)
 800ccae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ccb0:	4a56      	ldr	r2, [pc, #344]	@ (800ce0c <HAL_RCC_OscConfig+0x4ac>)
 800ccb2:	f023 0304 	bic.w	r3, r3, #4
 800ccb6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800ccb8:	687b      	ldr	r3, [r7, #4]
 800ccba:	689b      	ldr	r3, [r3, #8]
 800ccbc:	2b00      	cmp	r3, #0
 800ccbe:	d015      	beq.n	800ccec <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ccc0:	f7fd fdc6 	bl	800a850 <HAL_GetTick>
 800ccc4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800ccc6:	e00a      	b.n	800ccde <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ccc8:	f7fd fdc2 	bl	800a850 <HAL_GetTick>
 800cccc:	4602      	mov	r2, r0
 800ccce:	693b      	ldr	r3, [r7, #16]
 800ccd0:	1ad3      	subs	r3, r2, r3
 800ccd2:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ccd6:	4293      	cmp	r3, r2
 800ccd8:	d901      	bls.n	800ccde <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800ccda:	2303      	movs	r3, #3
 800ccdc:	e0d7      	b.n	800ce8e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800ccde:	4b4b      	ldr	r3, [pc, #300]	@ (800ce0c <HAL_RCC_OscConfig+0x4ac>)
 800cce0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800cce2:	f003 0302 	and.w	r3, r3, #2
 800cce6:	2b00      	cmp	r3, #0
 800cce8:	d0ee      	beq.n	800ccc8 <HAL_RCC_OscConfig+0x368>
 800ccea:	e014      	b.n	800cd16 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ccec:	f7fd fdb0 	bl	800a850 <HAL_GetTick>
 800ccf0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800ccf2:	e00a      	b.n	800cd0a <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ccf4:	f7fd fdac 	bl	800a850 <HAL_GetTick>
 800ccf8:	4602      	mov	r2, r0
 800ccfa:	693b      	ldr	r3, [r7, #16]
 800ccfc:	1ad3      	subs	r3, r2, r3
 800ccfe:	f241 3288 	movw	r2, #5000	@ 0x1388
 800cd02:	4293      	cmp	r3, r2
 800cd04:	d901      	bls.n	800cd0a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800cd06:	2303      	movs	r3, #3
 800cd08:	e0c1      	b.n	800ce8e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800cd0a:	4b40      	ldr	r3, [pc, #256]	@ (800ce0c <HAL_RCC_OscConfig+0x4ac>)
 800cd0c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800cd0e:	f003 0302 	and.w	r3, r3, #2
 800cd12:	2b00      	cmp	r3, #0
 800cd14:	d1ee      	bne.n	800ccf4 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800cd16:	7dfb      	ldrb	r3, [r7, #23]
 800cd18:	2b01      	cmp	r3, #1
 800cd1a:	d105      	bne.n	800cd28 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800cd1c:	4b3b      	ldr	r3, [pc, #236]	@ (800ce0c <HAL_RCC_OscConfig+0x4ac>)
 800cd1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cd20:	4a3a      	ldr	r2, [pc, #232]	@ (800ce0c <HAL_RCC_OscConfig+0x4ac>)
 800cd22:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800cd26:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800cd28:	687b      	ldr	r3, [r7, #4]
 800cd2a:	699b      	ldr	r3, [r3, #24]
 800cd2c:	2b00      	cmp	r3, #0
 800cd2e:	f000 80ad 	beq.w	800ce8c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800cd32:	4b36      	ldr	r3, [pc, #216]	@ (800ce0c <HAL_RCC_OscConfig+0x4ac>)
 800cd34:	689b      	ldr	r3, [r3, #8]
 800cd36:	f003 030c 	and.w	r3, r3, #12
 800cd3a:	2b08      	cmp	r3, #8
 800cd3c:	d060      	beq.n	800ce00 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800cd3e:	687b      	ldr	r3, [r7, #4]
 800cd40:	699b      	ldr	r3, [r3, #24]
 800cd42:	2b02      	cmp	r3, #2
 800cd44:	d145      	bne.n	800cdd2 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800cd46:	4b33      	ldr	r3, [pc, #204]	@ (800ce14 <HAL_RCC_OscConfig+0x4b4>)
 800cd48:	2200      	movs	r2, #0
 800cd4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cd4c:	f7fd fd80 	bl	800a850 <HAL_GetTick>
 800cd50:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800cd52:	e008      	b.n	800cd66 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800cd54:	f7fd fd7c 	bl	800a850 <HAL_GetTick>
 800cd58:	4602      	mov	r2, r0
 800cd5a:	693b      	ldr	r3, [r7, #16]
 800cd5c:	1ad3      	subs	r3, r2, r3
 800cd5e:	2b02      	cmp	r3, #2
 800cd60:	d901      	bls.n	800cd66 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800cd62:	2303      	movs	r3, #3
 800cd64:	e093      	b.n	800ce8e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800cd66:	4b29      	ldr	r3, [pc, #164]	@ (800ce0c <HAL_RCC_OscConfig+0x4ac>)
 800cd68:	681b      	ldr	r3, [r3, #0]
 800cd6a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800cd6e:	2b00      	cmp	r3, #0
 800cd70:	d1f0      	bne.n	800cd54 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800cd72:	687b      	ldr	r3, [r7, #4]
 800cd74:	69da      	ldr	r2, [r3, #28]
 800cd76:	687b      	ldr	r3, [r7, #4]
 800cd78:	6a1b      	ldr	r3, [r3, #32]
 800cd7a:	431a      	orrs	r2, r3
 800cd7c:	687b      	ldr	r3, [r7, #4]
 800cd7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cd80:	019b      	lsls	r3, r3, #6
 800cd82:	431a      	orrs	r2, r3
 800cd84:	687b      	ldr	r3, [r7, #4]
 800cd86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cd88:	085b      	lsrs	r3, r3, #1
 800cd8a:	3b01      	subs	r3, #1
 800cd8c:	041b      	lsls	r3, r3, #16
 800cd8e:	431a      	orrs	r2, r3
 800cd90:	687b      	ldr	r3, [r7, #4]
 800cd92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cd94:	061b      	lsls	r3, r3, #24
 800cd96:	431a      	orrs	r2, r3
 800cd98:	687b      	ldr	r3, [r7, #4]
 800cd9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cd9c:	071b      	lsls	r3, r3, #28
 800cd9e:	491b      	ldr	r1, [pc, #108]	@ (800ce0c <HAL_RCC_OscConfig+0x4ac>)
 800cda0:	4313      	orrs	r3, r2
 800cda2:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800cda4:	4b1b      	ldr	r3, [pc, #108]	@ (800ce14 <HAL_RCC_OscConfig+0x4b4>)
 800cda6:	2201      	movs	r2, #1
 800cda8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cdaa:	f7fd fd51 	bl	800a850 <HAL_GetTick>
 800cdae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800cdb0:	e008      	b.n	800cdc4 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800cdb2:	f7fd fd4d 	bl	800a850 <HAL_GetTick>
 800cdb6:	4602      	mov	r2, r0
 800cdb8:	693b      	ldr	r3, [r7, #16]
 800cdba:	1ad3      	subs	r3, r2, r3
 800cdbc:	2b02      	cmp	r3, #2
 800cdbe:	d901      	bls.n	800cdc4 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 800cdc0:	2303      	movs	r3, #3
 800cdc2:	e064      	b.n	800ce8e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800cdc4:	4b11      	ldr	r3, [pc, #68]	@ (800ce0c <HAL_RCC_OscConfig+0x4ac>)
 800cdc6:	681b      	ldr	r3, [r3, #0]
 800cdc8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800cdcc:	2b00      	cmp	r3, #0
 800cdce:	d0f0      	beq.n	800cdb2 <HAL_RCC_OscConfig+0x452>
 800cdd0:	e05c      	b.n	800ce8c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800cdd2:	4b10      	ldr	r3, [pc, #64]	@ (800ce14 <HAL_RCC_OscConfig+0x4b4>)
 800cdd4:	2200      	movs	r2, #0
 800cdd6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cdd8:	f7fd fd3a 	bl	800a850 <HAL_GetTick>
 800cddc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800cdde:	e008      	b.n	800cdf2 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800cde0:	f7fd fd36 	bl	800a850 <HAL_GetTick>
 800cde4:	4602      	mov	r2, r0
 800cde6:	693b      	ldr	r3, [r7, #16]
 800cde8:	1ad3      	subs	r3, r2, r3
 800cdea:	2b02      	cmp	r3, #2
 800cdec:	d901      	bls.n	800cdf2 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800cdee:	2303      	movs	r3, #3
 800cdf0:	e04d      	b.n	800ce8e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800cdf2:	4b06      	ldr	r3, [pc, #24]	@ (800ce0c <HAL_RCC_OscConfig+0x4ac>)
 800cdf4:	681b      	ldr	r3, [r3, #0]
 800cdf6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800cdfa:	2b00      	cmp	r3, #0
 800cdfc:	d1f0      	bne.n	800cde0 <HAL_RCC_OscConfig+0x480>
 800cdfe:	e045      	b.n	800ce8c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800ce00:	687b      	ldr	r3, [r7, #4]
 800ce02:	699b      	ldr	r3, [r3, #24]
 800ce04:	2b01      	cmp	r3, #1
 800ce06:	d107      	bne.n	800ce18 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 800ce08:	2301      	movs	r3, #1
 800ce0a:	e040      	b.n	800ce8e <HAL_RCC_OscConfig+0x52e>
 800ce0c:	40023800 	.word	0x40023800
 800ce10:	40007000 	.word	0x40007000
 800ce14:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800ce18:	4b1f      	ldr	r3, [pc, #124]	@ (800ce98 <HAL_RCC_OscConfig+0x538>)
 800ce1a:	685b      	ldr	r3, [r3, #4]
 800ce1c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800ce1e:	687b      	ldr	r3, [r7, #4]
 800ce20:	699b      	ldr	r3, [r3, #24]
 800ce22:	2b01      	cmp	r3, #1
 800ce24:	d030      	beq.n	800ce88 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800ce26:	68fb      	ldr	r3, [r7, #12]
 800ce28:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800ce2c:	687b      	ldr	r3, [r7, #4]
 800ce2e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800ce30:	429a      	cmp	r2, r3
 800ce32:	d129      	bne.n	800ce88 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800ce34:	68fb      	ldr	r3, [r7, #12]
 800ce36:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800ce3a:	687b      	ldr	r3, [r7, #4]
 800ce3c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800ce3e:	429a      	cmp	r2, r3
 800ce40:	d122      	bne.n	800ce88 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800ce42:	68fa      	ldr	r2, [r7, #12]
 800ce44:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800ce48:	4013      	ands	r3, r2
 800ce4a:	687a      	ldr	r2, [r7, #4]
 800ce4c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800ce4e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800ce50:	4293      	cmp	r3, r2
 800ce52:	d119      	bne.n	800ce88 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800ce54:	68fb      	ldr	r3, [r7, #12]
 800ce56:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800ce5a:	687b      	ldr	r3, [r7, #4]
 800ce5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ce5e:	085b      	lsrs	r3, r3, #1
 800ce60:	3b01      	subs	r3, #1
 800ce62:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800ce64:	429a      	cmp	r2, r3
 800ce66:	d10f      	bne.n	800ce88 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800ce68:	68fb      	ldr	r3, [r7, #12]
 800ce6a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800ce6e:	687b      	ldr	r3, [r7, #4]
 800ce70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ce72:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800ce74:	429a      	cmp	r2, r3
 800ce76:	d107      	bne.n	800ce88 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800ce78:	68fb      	ldr	r3, [r7, #12]
 800ce7a:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800ce7e:	687b      	ldr	r3, [r7, #4]
 800ce80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ce82:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800ce84:	429a      	cmp	r2, r3
 800ce86:	d001      	beq.n	800ce8c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800ce88:	2301      	movs	r3, #1
 800ce8a:	e000      	b.n	800ce8e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 800ce8c:	2300      	movs	r3, #0
}
 800ce8e:	4618      	mov	r0, r3
 800ce90:	3718      	adds	r7, #24
 800ce92:	46bd      	mov	sp, r7
 800ce94:	bd80      	pop	{r7, pc}
 800ce96:	bf00      	nop
 800ce98:	40023800 	.word	0x40023800

0800ce9c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800ce9c:	b580      	push	{r7, lr}
 800ce9e:	b082      	sub	sp, #8
 800cea0:	af00      	add	r7, sp, #0
 800cea2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800cea4:	687b      	ldr	r3, [r7, #4]
 800cea6:	2b00      	cmp	r3, #0
 800cea8:	d101      	bne.n	800ceae <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800ceaa:	2301      	movs	r3, #1
 800ceac:	e07b      	b.n	800cfa6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ceb2:	2b00      	cmp	r3, #0
 800ceb4:	d108      	bne.n	800cec8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800ceb6:	687b      	ldr	r3, [r7, #4]
 800ceb8:	685b      	ldr	r3, [r3, #4]
 800ceba:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800cebe:	d009      	beq.n	800ced4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800cec0:	687b      	ldr	r3, [r7, #4]
 800cec2:	2200      	movs	r2, #0
 800cec4:	61da      	str	r2, [r3, #28]
 800cec6:	e005      	b.n	800ced4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800cec8:	687b      	ldr	r3, [r7, #4]
 800ceca:	2200      	movs	r2, #0
 800cecc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800cece:	687b      	ldr	r3, [r7, #4]
 800ced0:	2200      	movs	r2, #0
 800ced2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800ced4:	687b      	ldr	r3, [r7, #4]
 800ced6:	2200      	movs	r2, #0
 800ced8:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800ceda:	687b      	ldr	r3, [r7, #4]
 800cedc:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800cee0:	b2db      	uxtb	r3, r3
 800cee2:	2b00      	cmp	r3, #0
 800cee4:	d106      	bne.n	800cef4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800cee6:	687b      	ldr	r3, [r7, #4]
 800cee8:	2200      	movs	r2, #0
 800ceea:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800ceee:	6878      	ldr	r0, [r7, #4]
 800cef0:	f7f4 fb40 	bl	8001574 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800cef4:	687b      	ldr	r3, [r7, #4]
 800cef6:	2202      	movs	r2, #2
 800cef8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800cefc:	687b      	ldr	r3, [r7, #4]
 800cefe:	681b      	ldr	r3, [r3, #0]
 800cf00:	681a      	ldr	r2, [r3, #0]
 800cf02:	687b      	ldr	r3, [r7, #4]
 800cf04:	681b      	ldr	r3, [r3, #0]
 800cf06:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800cf0a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800cf0c:	687b      	ldr	r3, [r7, #4]
 800cf0e:	685b      	ldr	r3, [r3, #4]
 800cf10:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800cf14:	687b      	ldr	r3, [r7, #4]
 800cf16:	689b      	ldr	r3, [r3, #8]
 800cf18:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800cf1c:	431a      	orrs	r2, r3
 800cf1e:	687b      	ldr	r3, [r7, #4]
 800cf20:	68db      	ldr	r3, [r3, #12]
 800cf22:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800cf26:	431a      	orrs	r2, r3
 800cf28:	687b      	ldr	r3, [r7, #4]
 800cf2a:	691b      	ldr	r3, [r3, #16]
 800cf2c:	f003 0302 	and.w	r3, r3, #2
 800cf30:	431a      	orrs	r2, r3
 800cf32:	687b      	ldr	r3, [r7, #4]
 800cf34:	695b      	ldr	r3, [r3, #20]
 800cf36:	f003 0301 	and.w	r3, r3, #1
 800cf3a:	431a      	orrs	r2, r3
 800cf3c:	687b      	ldr	r3, [r7, #4]
 800cf3e:	699b      	ldr	r3, [r3, #24]
 800cf40:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800cf44:	431a      	orrs	r2, r3
 800cf46:	687b      	ldr	r3, [r7, #4]
 800cf48:	69db      	ldr	r3, [r3, #28]
 800cf4a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800cf4e:	431a      	orrs	r2, r3
 800cf50:	687b      	ldr	r3, [r7, #4]
 800cf52:	6a1b      	ldr	r3, [r3, #32]
 800cf54:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800cf58:	ea42 0103 	orr.w	r1, r2, r3
 800cf5c:	687b      	ldr	r3, [r7, #4]
 800cf5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cf60:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800cf64:	687b      	ldr	r3, [r7, #4]
 800cf66:	681b      	ldr	r3, [r3, #0]
 800cf68:	430a      	orrs	r2, r1
 800cf6a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800cf6c:	687b      	ldr	r3, [r7, #4]
 800cf6e:	699b      	ldr	r3, [r3, #24]
 800cf70:	0c1b      	lsrs	r3, r3, #16
 800cf72:	f003 0104 	and.w	r1, r3, #4
 800cf76:	687b      	ldr	r3, [r7, #4]
 800cf78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cf7a:	f003 0210 	and.w	r2, r3, #16
 800cf7e:	687b      	ldr	r3, [r7, #4]
 800cf80:	681b      	ldr	r3, [r3, #0]
 800cf82:	430a      	orrs	r2, r1
 800cf84:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800cf86:	687b      	ldr	r3, [r7, #4]
 800cf88:	681b      	ldr	r3, [r3, #0]
 800cf8a:	69da      	ldr	r2, [r3, #28]
 800cf8c:	687b      	ldr	r3, [r7, #4]
 800cf8e:	681b      	ldr	r3, [r3, #0]
 800cf90:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800cf94:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800cf96:	687b      	ldr	r3, [r7, #4]
 800cf98:	2200      	movs	r2, #0
 800cf9a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800cf9c:	687b      	ldr	r3, [r7, #4]
 800cf9e:	2201      	movs	r2, #1
 800cfa0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800cfa4:	2300      	movs	r3, #0
}
 800cfa6:	4618      	mov	r0, r3
 800cfa8:	3708      	adds	r7, #8
 800cfaa:	46bd      	mov	sp, r7
 800cfac:	bd80      	pop	{r7, pc}

0800cfae <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800cfae:	b580      	push	{r7, lr}
 800cfb0:	b088      	sub	sp, #32
 800cfb2:	af00      	add	r7, sp, #0
 800cfb4:	60f8      	str	r0, [r7, #12]
 800cfb6:	60b9      	str	r1, [r7, #8]
 800cfb8:	603b      	str	r3, [r7, #0]
 800cfba:	4613      	mov	r3, r2
 800cfbc:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800cfbe:	f7fd fc47 	bl	800a850 <HAL_GetTick>
 800cfc2:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 800cfc4:	88fb      	ldrh	r3, [r7, #6]
 800cfc6:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 800cfc8:	68fb      	ldr	r3, [r7, #12]
 800cfca:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800cfce:	b2db      	uxtb	r3, r3
 800cfd0:	2b01      	cmp	r3, #1
 800cfd2:	d001      	beq.n	800cfd8 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 800cfd4:	2302      	movs	r3, #2
 800cfd6:	e12a      	b.n	800d22e <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 800cfd8:	68bb      	ldr	r3, [r7, #8]
 800cfda:	2b00      	cmp	r3, #0
 800cfdc:	d002      	beq.n	800cfe4 <HAL_SPI_Transmit+0x36>
 800cfde:	88fb      	ldrh	r3, [r7, #6]
 800cfe0:	2b00      	cmp	r3, #0
 800cfe2:	d101      	bne.n	800cfe8 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 800cfe4:	2301      	movs	r3, #1
 800cfe6:	e122      	b.n	800d22e <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800cfe8:	68fb      	ldr	r3, [r7, #12]
 800cfea:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800cfee:	2b01      	cmp	r3, #1
 800cff0:	d101      	bne.n	800cff6 <HAL_SPI_Transmit+0x48>
 800cff2:	2302      	movs	r3, #2
 800cff4:	e11b      	b.n	800d22e <HAL_SPI_Transmit+0x280>
 800cff6:	68fb      	ldr	r3, [r7, #12]
 800cff8:	2201      	movs	r2, #1
 800cffa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800cffe:	68fb      	ldr	r3, [r7, #12]
 800d000:	2203      	movs	r2, #3
 800d002:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800d006:	68fb      	ldr	r3, [r7, #12]
 800d008:	2200      	movs	r2, #0
 800d00a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800d00c:	68fb      	ldr	r3, [r7, #12]
 800d00e:	68ba      	ldr	r2, [r7, #8]
 800d010:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800d012:	68fb      	ldr	r3, [r7, #12]
 800d014:	88fa      	ldrh	r2, [r7, #6]
 800d016:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 800d018:	68fb      	ldr	r3, [r7, #12]
 800d01a:	88fa      	ldrh	r2, [r7, #6]
 800d01c:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800d01e:	68fb      	ldr	r3, [r7, #12]
 800d020:	2200      	movs	r2, #0
 800d022:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 800d024:	68fb      	ldr	r3, [r7, #12]
 800d026:	2200      	movs	r2, #0
 800d028:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 800d02a:	68fb      	ldr	r3, [r7, #12]
 800d02c:	2200      	movs	r2, #0
 800d02e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 800d030:	68fb      	ldr	r3, [r7, #12]
 800d032:	2200      	movs	r2, #0
 800d034:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 800d036:	68fb      	ldr	r3, [r7, #12]
 800d038:	2200      	movs	r2, #0
 800d03a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800d03c:	68fb      	ldr	r3, [r7, #12]
 800d03e:	689b      	ldr	r3, [r3, #8]
 800d040:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800d044:	d10f      	bne.n	800d066 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800d046:	68fb      	ldr	r3, [r7, #12]
 800d048:	681b      	ldr	r3, [r3, #0]
 800d04a:	681a      	ldr	r2, [r3, #0]
 800d04c:	68fb      	ldr	r3, [r7, #12]
 800d04e:	681b      	ldr	r3, [r3, #0]
 800d050:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800d054:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800d056:	68fb      	ldr	r3, [r7, #12]
 800d058:	681b      	ldr	r3, [r3, #0]
 800d05a:	681a      	ldr	r2, [r3, #0]
 800d05c:	68fb      	ldr	r3, [r7, #12]
 800d05e:	681b      	ldr	r3, [r3, #0]
 800d060:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800d064:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800d066:	68fb      	ldr	r3, [r7, #12]
 800d068:	681b      	ldr	r3, [r3, #0]
 800d06a:	681b      	ldr	r3, [r3, #0]
 800d06c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d070:	2b40      	cmp	r3, #64	@ 0x40
 800d072:	d007      	beq.n	800d084 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800d074:	68fb      	ldr	r3, [r7, #12]
 800d076:	681b      	ldr	r3, [r3, #0]
 800d078:	681a      	ldr	r2, [r3, #0]
 800d07a:	68fb      	ldr	r3, [r7, #12]
 800d07c:	681b      	ldr	r3, [r3, #0]
 800d07e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800d082:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800d084:	68fb      	ldr	r3, [r7, #12]
 800d086:	68db      	ldr	r3, [r3, #12]
 800d088:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800d08c:	d152      	bne.n	800d134 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800d08e:	68fb      	ldr	r3, [r7, #12]
 800d090:	685b      	ldr	r3, [r3, #4]
 800d092:	2b00      	cmp	r3, #0
 800d094:	d002      	beq.n	800d09c <HAL_SPI_Transmit+0xee>
 800d096:	8b7b      	ldrh	r3, [r7, #26]
 800d098:	2b01      	cmp	r3, #1
 800d09a:	d145      	bne.n	800d128 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800d09c:	68fb      	ldr	r3, [r7, #12]
 800d09e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d0a0:	881a      	ldrh	r2, [r3, #0]
 800d0a2:	68fb      	ldr	r3, [r7, #12]
 800d0a4:	681b      	ldr	r3, [r3, #0]
 800d0a6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800d0a8:	68fb      	ldr	r3, [r7, #12]
 800d0aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d0ac:	1c9a      	adds	r2, r3, #2
 800d0ae:	68fb      	ldr	r3, [r7, #12]
 800d0b0:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800d0b2:	68fb      	ldr	r3, [r7, #12]
 800d0b4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800d0b6:	b29b      	uxth	r3, r3
 800d0b8:	3b01      	subs	r3, #1
 800d0ba:	b29a      	uxth	r2, r3
 800d0bc:	68fb      	ldr	r3, [r7, #12]
 800d0be:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800d0c0:	e032      	b.n	800d128 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800d0c2:	68fb      	ldr	r3, [r7, #12]
 800d0c4:	681b      	ldr	r3, [r3, #0]
 800d0c6:	689b      	ldr	r3, [r3, #8]
 800d0c8:	f003 0302 	and.w	r3, r3, #2
 800d0cc:	2b02      	cmp	r3, #2
 800d0ce:	d112      	bne.n	800d0f6 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800d0d0:	68fb      	ldr	r3, [r7, #12]
 800d0d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d0d4:	881a      	ldrh	r2, [r3, #0]
 800d0d6:	68fb      	ldr	r3, [r7, #12]
 800d0d8:	681b      	ldr	r3, [r3, #0]
 800d0da:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800d0dc:	68fb      	ldr	r3, [r7, #12]
 800d0de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d0e0:	1c9a      	adds	r2, r3, #2
 800d0e2:	68fb      	ldr	r3, [r7, #12]
 800d0e4:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800d0e6:	68fb      	ldr	r3, [r7, #12]
 800d0e8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800d0ea:	b29b      	uxth	r3, r3
 800d0ec:	3b01      	subs	r3, #1
 800d0ee:	b29a      	uxth	r2, r3
 800d0f0:	68fb      	ldr	r3, [r7, #12]
 800d0f2:	86da      	strh	r2, [r3, #54]	@ 0x36
 800d0f4:	e018      	b.n	800d128 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d0f6:	f7fd fbab 	bl	800a850 <HAL_GetTick>
 800d0fa:	4602      	mov	r2, r0
 800d0fc:	69fb      	ldr	r3, [r7, #28]
 800d0fe:	1ad3      	subs	r3, r2, r3
 800d100:	683a      	ldr	r2, [r7, #0]
 800d102:	429a      	cmp	r2, r3
 800d104:	d803      	bhi.n	800d10e <HAL_SPI_Transmit+0x160>
 800d106:	683b      	ldr	r3, [r7, #0]
 800d108:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d10c:	d102      	bne.n	800d114 <HAL_SPI_Transmit+0x166>
 800d10e:	683b      	ldr	r3, [r7, #0]
 800d110:	2b00      	cmp	r3, #0
 800d112:	d109      	bne.n	800d128 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800d114:	68fb      	ldr	r3, [r7, #12]
 800d116:	2201      	movs	r2, #1
 800d118:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800d11c:	68fb      	ldr	r3, [r7, #12]
 800d11e:	2200      	movs	r2, #0
 800d120:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800d124:	2303      	movs	r3, #3
 800d126:	e082      	b.n	800d22e <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800d128:	68fb      	ldr	r3, [r7, #12]
 800d12a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800d12c:	b29b      	uxth	r3, r3
 800d12e:	2b00      	cmp	r3, #0
 800d130:	d1c7      	bne.n	800d0c2 <HAL_SPI_Transmit+0x114>
 800d132:	e053      	b.n	800d1dc <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800d134:	68fb      	ldr	r3, [r7, #12]
 800d136:	685b      	ldr	r3, [r3, #4]
 800d138:	2b00      	cmp	r3, #0
 800d13a:	d002      	beq.n	800d142 <HAL_SPI_Transmit+0x194>
 800d13c:	8b7b      	ldrh	r3, [r7, #26]
 800d13e:	2b01      	cmp	r3, #1
 800d140:	d147      	bne.n	800d1d2 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800d142:	68fb      	ldr	r3, [r7, #12]
 800d144:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800d146:	68fb      	ldr	r3, [r7, #12]
 800d148:	681b      	ldr	r3, [r3, #0]
 800d14a:	330c      	adds	r3, #12
 800d14c:	7812      	ldrb	r2, [r2, #0]
 800d14e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800d150:	68fb      	ldr	r3, [r7, #12]
 800d152:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d154:	1c5a      	adds	r2, r3, #1
 800d156:	68fb      	ldr	r3, [r7, #12]
 800d158:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800d15a:	68fb      	ldr	r3, [r7, #12]
 800d15c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800d15e:	b29b      	uxth	r3, r3
 800d160:	3b01      	subs	r3, #1
 800d162:	b29a      	uxth	r2, r3
 800d164:	68fb      	ldr	r3, [r7, #12]
 800d166:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 800d168:	e033      	b.n	800d1d2 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800d16a:	68fb      	ldr	r3, [r7, #12]
 800d16c:	681b      	ldr	r3, [r3, #0]
 800d16e:	689b      	ldr	r3, [r3, #8]
 800d170:	f003 0302 	and.w	r3, r3, #2
 800d174:	2b02      	cmp	r3, #2
 800d176:	d113      	bne.n	800d1a0 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800d178:	68fb      	ldr	r3, [r7, #12]
 800d17a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800d17c:	68fb      	ldr	r3, [r7, #12]
 800d17e:	681b      	ldr	r3, [r3, #0]
 800d180:	330c      	adds	r3, #12
 800d182:	7812      	ldrb	r2, [r2, #0]
 800d184:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800d186:	68fb      	ldr	r3, [r7, #12]
 800d188:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d18a:	1c5a      	adds	r2, r3, #1
 800d18c:	68fb      	ldr	r3, [r7, #12]
 800d18e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800d190:	68fb      	ldr	r3, [r7, #12]
 800d192:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800d194:	b29b      	uxth	r3, r3
 800d196:	3b01      	subs	r3, #1
 800d198:	b29a      	uxth	r2, r3
 800d19a:	68fb      	ldr	r3, [r7, #12]
 800d19c:	86da      	strh	r2, [r3, #54]	@ 0x36
 800d19e:	e018      	b.n	800d1d2 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d1a0:	f7fd fb56 	bl	800a850 <HAL_GetTick>
 800d1a4:	4602      	mov	r2, r0
 800d1a6:	69fb      	ldr	r3, [r7, #28]
 800d1a8:	1ad3      	subs	r3, r2, r3
 800d1aa:	683a      	ldr	r2, [r7, #0]
 800d1ac:	429a      	cmp	r2, r3
 800d1ae:	d803      	bhi.n	800d1b8 <HAL_SPI_Transmit+0x20a>
 800d1b0:	683b      	ldr	r3, [r7, #0]
 800d1b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d1b6:	d102      	bne.n	800d1be <HAL_SPI_Transmit+0x210>
 800d1b8:	683b      	ldr	r3, [r7, #0]
 800d1ba:	2b00      	cmp	r3, #0
 800d1bc:	d109      	bne.n	800d1d2 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800d1be:	68fb      	ldr	r3, [r7, #12]
 800d1c0:	2201      	movs	r2, #1
 800d1c2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800d1c6:	68fb      	ldr	r3, [r7, #12]
 800d1c8:	2200      	movs	r2, #0
 800d1ca:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800d1ce:	2303      	movs	r3, #3
 800d1d0:	e02d      	b.n	800d22e <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800d1d2:	68fb      	ldr	r3, [r7, #12]
 800d1d4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800d1d6:	b29b      	uxth	r3, r3
 800d1d8:	2b00      	cmp	r3, #0
 800d1da:	d1c6      	bne.n	800d16a <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800d1dc:	69fa      	ldr	r2, [r7, #28]
 800d1de:	6839      	ldr	r1, [r7, #0]
 800d1e0:	68f8      	ldr	r0, [r7, #12]
 800d1e2:	f000 fa59 	bl	800d698 <SPI_EndRxTxTransaction>
 800d1e6:	4603      	mov	r3, r0
 800d1e8:	2b00      	cmp	r3, #0
 800d1ea:	d002      	beq.n	800d1f2 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800d1ec:	68fb      	ldr	r3, [r7, #12]
 800d1ee:	2220      	movs	r2, #32
 800d1f0:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800d1f2:	68fb      	ldr	r3, [r7, #12]
 800d1f4:	689b      	ldr	r3, [r3, #8]
 800d1f6:	2b00      	cmp	r3, #0
 800d1f8:	d10a      	bne.n	800d210 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800d1fa:	2300      	movs	r3, #0
 800d1fc:	617b      	str	r3, [r7, #20]
 800d1fe:	68fb      	ldr	r3, [r7, #12]
 800d200:	681b      	ldr	r3, [r3, #0]
 800d202:	68db      	ldr	r3, [r3, #12]
 800d204:	617b      	str	r3, [r7, #20]
 800d206:	68fb      	ldr	r3, [r7, #12]
 800d208:	681b      	ldr	r3, [r3, #0]
 800d20a:	689b      	ldr	r3, [r3, #8]
 800d20c:	617b      	str	r3, [r7, #20]
 800d20e:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 800d210:	68fb      	ldr	r3, [r7, #12]
 800d212:	2201      	movs	r2, #1
 800d214:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800d218:	68fb      	ldr	r3, [r7, #12]
 800d21a:	2200      	movs	r2, #0
 800d21c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800d220:	68fb      	ldr	r3, [r7, #12]
 800d222:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d224:	2b00      	cmp	r3, #0
 800d226:	d001      	beq.n	800d22c <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 800d228:	2301      	movs	r3, #1
 800d22a:	e000      	b.n	800d22e <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 800d22c:	2300      	movs	r3, #0
  }
}
 800d22e:	4618      	mov	r0, r3
 800d230:	3720      	adds	r7, #32
 800d232:	46bd      	mov	sp, r7
 800d234:	bd80      	pop	{r7, pc}

0800d236 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800d236:	b580      	push	{r7, lr}
 800d238:	b08a      	sub	sp, #40	@ 0x28
 800d23a:	af00      	add	r7, sp, #0
 800d23c:	60f8      	str	r0, [r7, #12]
 800d23e:	60b9      	str	r1, [r7, #8]
 800d240:	607a      	str	r2, [r7, #4]
 800d242:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800d244:	2301      	movs	r3, #1
 800d246:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800d248:	f7fd fb02 	bl	800a850 <HAL_GetTick>
 800d24c:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800d24e:	68fb      	ldr	r3, [r7, #12]
 800d250:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800d254:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 800d256:	68fb      	ldr	r3, [r7, #12]
 800d258:	685b      	ldr	r3, [r3, #4]
 800d25a:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800d25c:	887b      	ldrh	r3, [r7, #2]
 800d25e:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800d260:	7ffb      	ldrb	r3, [r7, #31]
 800d262:	2b01      	cmp	r3, #1
 800d264:	d00c      	beq.n	800d280 <HAL_SPI_TransmitReceive+0x4a>
 800d266:	69bb      	ldr	r3, [r7, #24]
 800d268:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800d26c:	d106      	bne.n	800d27c <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800d26e:	68fb      	ldr	r3, [r7, #12]
 800d270:	689b      	ldr	r3, [r3, #8]
 800d272:	2b00      	cmp	r3, #0
 800d274:	d102      	bne.n	800d27c <HAL_SPI_TransmitReceive+0x46>
 800d276:	7ffb      	ldrb	r3, [r7, #31]
 800d278:	2b04      	cmp	r3, #4
 800d27a:	d001      	beq.n	800d280 <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 800d27c:	2302      	movs	r3, #2
 800d27e:	e17f      	b.n	800d580 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800d280:	68bb      	ldr	r3, [r7, #8]
 800d282:	2b00      	cmp	r3, #0
 800d284:	d005      	beq.n	800d292 <HAL_SPI_TransmitReceive+0x5c>
 800d286:	687b      	ldr	r3, [r7, #4]
 800d288:	2b00      	cmp	r3, #0
 800d28a:	d002      	beq.n	800d292 <HAL_SPI_TransmitReceive+0x5c>
 800d28c:	887b      	ldrh	r3, [r7, #2]
 800d28e:	2b00      	cmp	r3, #0
 800d290:	d101      	bne.n	800d296 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 800d292:	2301      	movs	r3, #1
 800d294:	e174      	b.n	800d580 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800d296:	68fb      	ldr	r3, [r7, #12]
 800d298:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800d29c:	2b01      	cmp	r3, #1
 800d29e:	d101      	bne.n	800d2a4 <HAL_SPI_TransmitReceive+0x6e>
 800d2a0:	2302      	movs	r3, #2
 800d2a2:	e16d      	b.n	800d580 <HAL_SPI_TransmitReceive+0x34a>
 800d2a4:	68fb      	ldr	r3, [r7, #12]
 800d2a6:	2201      	movs	r2, #1
 800d2a8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800d2ac:	68fb      	ldr	r3, [r7, #12]
 800d2ae:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800d2b2:	b2db      	uxtb	r3, r3
 800d2b4:	2b04      	cmp	r3, #4
 800d2b6:	d003      	beq.n	800d2c0 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800d2b8:	68fb      	ldr	r3, [r7, #12]
 800d2ba:	2205      	movs	r2, #5
 800d2bc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800d2c0:	68fb      	ldr	r3, [r7, #12]
 800d2c2:	2200      	movs	r2, #0
 800d2c4:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800d2c6:	68fb      	ldr	r3, [r7, #12]
 800d2c8:	687a      	ldr	r2, [r7, #4]
 800d2ca:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 800d2cc:	68fb      	ldr	r3, [r7, #12]
 800d2ce:	887a      	ldrh	r2, [r7, #2]
 800d2d0:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 800d2d2:	68fb      	ldr	r3, [r7, #12]
 800d2d4:	887a      	ldrh	r2, [r7, #2]
 800d2d6:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800d2d8:	68fb      	ldr	r3, [r7, #12]
 800d2da:	68ba      	ldr	r2, [r7, #8]
 800d2dc:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 800d2de:	68fb      	ldr	r3, [r7, #12]
 800d2e0:	887a      	ldrh	r2, [r7, #2]
 800d2e2:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 800d2e4:	68fb      	ldr	r3, [r7, #12]
 800d2e6:	887a      	ldrh	r2, [r7, #2]
 800d2e8:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800d2ea:	68fb      	ldr	r3, [r7, #12]
 800d2ec:	2200      	movs	r2, #0
 800d2ee:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800d2f0:	68fb      	ldr	r3, [r7, #12]
 800d2f2:	2200      	movs	r2, #0
 800d2f4:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800d2f6:	68fb      	ldr	r3, [r7, #12]
 800d2f8:	681b      	ldr	r3, [r3, #0]
 800d2fa:	681b      	ldr	r3, [r3, #0]
 800d2fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d300:	2b40      	cmp	r3, #64	@ 0x40
 800d302:	d007      	beq.n	800d314 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800d304:	68fb      	ldr	r3, [r7, #12]
 800d306:	681b      	ldr	r3, [r3, #0]
 800d308:	681a      	ldr	r2, [r3, #0]
 800d30a:	68fb      	ldr	r3, [r7, #12]
 800d30c:	681b      	ldr	r3, [r3, #0]
 800d30e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800d312:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800d314:	68fb      	ldr	r3, [r7, #12]
 800d316:	68db      	ldr	r3, [r3, #12]
 800d318:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800d31c:	d17e      	bne.n	800d41c <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800d31e:	68fb      	ldr	r3, [r7, #12]
 800d320:	685b      	ldr	r3, [r3, #4]
 800d322:	2b00      	cmp	r3, #0
 800d324:	d002      	beq.n	800d32c <HAL_SPI_TransmitReceive+0xf6>
 800d326:	8afb      	ldrh	r3, [r7, #22]
 800d328:	2b01      	cmp	r3, #1
 800d32a:	d16c      	bne.n	800d406 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800d32c:	68fb      	ldr	r3, [r7, #12]
 800d32e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d330:	881a      	ldrh	r2, [r3, #0]
 800d332:	68fb      	ldr	r3, [r7, #12]
 800d334:	681b      	ldr	r3, [r3, #0]
 800d336:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800d338:	68fb      	ldr	r3, [r7, #12]
 800d33a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d33c:	1c9a      	adds	r2, r3, #2
 800d33e:	68fb      	ldr	r3, [r7, #12]
 800d340:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800d342:	68fb      	ldr	r3, [r7, #12]
 800d344:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800d346:	b29b      	uxth	r3, r3
 800d348:	3b01      	subs	r3, #1
 800d34a:	b29a      	uxth	r2, r3
 800d34c:	68fb      	ldr	r3, [r7, #12]
 800d34e:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800d350:	e059      	b.n	800d406 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800d352:	68fb      	ldr	r3, [r7, #12]
 800d354:	681b      	ldr	r3, [r3, #0]
 800d356:	689b      	ldr	r3, [r3, #8]
 800d358:	f003 0302 	and.w	r3, r3, #2
 800d35c:	2b02      	cmp	r3, #2
 800d35e:	d11b      	bne.n	800d398 <HAL_SPI_TransmitReceive+0x162>
 800d360:	68fb      	ldr	r3, [r7, #12]
 800d362:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800d364:	b29b      	uxth	r3, r3
 800d366:	2b00      	cmp	r3, #0
 800d368:	d016      	beq.n	800d398 <HAL_SPI_TransmitReceive+0x162>
 800d36a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d36c:	2b01      	cmp	r3, #1
 800d36e:	d113      	bne.n	800d398 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800d370:	68fb      	ldr	r3, [r7, #12]
 800d372:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d374:	881a      	ldrh	r2, [r3, #0]
 800d376:	68fb      	ldr	r3, [r7, #12]
 800d378:	681b      	ldr	r3, [r3, #0]
 800d37a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800d37c:	68fb      	ldr	r3, [r7, #12]
 800d37e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d380:	1c9a      	adds	r2, r3, #2
 800d382:	68fb      	ldr	r3, [r7, #12]
 800d384:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800d386:	68fb      	ldr	r3, [r7, #12]
 800d388:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800d38a:	b29b      	uxth	r3, r3
 800d38c:	3b01      	subs	r3, #1
 800d38e:	b29a      	uxth	r2, r3
 800d390:	68fb      	ldr	r3, [r7, #12]
 800d392:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800d394:	2300      	movs	r3, #0
 800d396:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800d398:	68fb      	ldr	r3, [r7, #12]
 800d39a:	681b      	ldr	r3, [r3, #0]
 800d39c:	689b      	ldr	r3, [r3, #8]
 800d39e:	f003 0301 	and.w	r3, r3, #1
 800d3a2:	2b01      	cmp	r3, #1
 800d3a4:	d119      	bne.n	800d3da <HAL_SPI_TransmitReceive+0x1a4>
 800d3a6:	68fb      	ldr	r3, [r7, #12]
 800d3a8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800d3aa:	b29b      	uxth	r3, r3
 800d3ac:	2b00      	cmp	r3, #0
 800d3ae:	d014      	beq.n	800d3da <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800d3b0:	68fb      	ldr	r3, [r7, #12]
 800d3b2:	681b      	ldr	r3, [r3, #0]
 800d3b4:	68da      	ldr	r2, [r3, #12]
 800d3b6:	68fb      	ldr	r3, [r7, #12]
 800d3b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d3ba:	b292      	uxth	r2, r2
 800d3bc:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800d3be:	68fb      	ldr	r3, [r7, #12]
 800d3c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d3c2:	1c9a      	adds	r2, r3, #2
 800d3c4:	68fb      	ldr	r3, [r7, #12]
 800d3c6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800d3c8:	68fb      	ldr	r3, [r7, #12]
 800d3ca:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800d3cc:	b29b      	uxth	r3, r3
 800d3ce:	3b01      	subs	r3, #1
 800d3d0:	b29a      	uxth	r2, r3
 800d3d2:	68fb      	ldr	r3, [r7, #12]
 800d3d4:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800d3d6:	2301      	movs	r3, #1
 800d3d8:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800d3da:	f7fd fa39 	bl	800a850 <HAL_GetTick>
 800d3de:	4602      	mov	r2, r0
 800d3e0:	6a3b      	ldr	r3, [r7, #32]
 800d3e2:	1ad3      	subs	r3, r2, r3
 800d3e4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d3e6:	429a      	cmp	r2, r3
 800d3e8:	d80d      	bhi.n	800d406 <HAL_SPI_TransmitReceive+0x1d0>
 800d3ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d3ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d3f0:	d009      	beq.n	800d406 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800d3f2:	68fb      	ldr	r3, [r7, #12]
 800d3f4:	2201      	movs	r2, #1
 800d3f6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 800d3fa:	68fb      	ldr	r3, [r7, #12]
 800d3fc:	2200      	movs	r2, #0
 800d3fe:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 800d402:	2303      	movs	r3, #3
 800d404:	e0bc      	b.n	800d580 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800d406:	68fb      	ldr	r3, [r7, #12]
 800d408:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800d40a:	b29b      	uxth	r3, r3
 800d40c:	2b00      	cmp	r3, #0
 800d40e:	d1a0      	bne.n	800d352 <HAL_SPI_TransmitReceive+0x11c>
 800d410:	68fb      	ldr	r3, [r7, #12]
 800d412:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800d414:	b29b      	uxth	r3, r3
 800d416:	2b00      	cmp	r3, #0
 800d418:	d19b      	bne.n	800d352 <HAL_SPI_TransmitReceive+0x11c>
 800d41a:	e082      	b.n	800d522 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800d41c:	68fb      	ldr	r3, [r7, #12]
 800d41e:	685b      	ldr	r3, [r3, #4]
 800d420:	2b00      	cmp	r3, #0
 800d422:	d002      	beq.n	800d42a <HAL_SPI_TransmitReceive+0x1f4>
 800d424:	8afb      	ldrh	r3, [r7, #22]
 800d426:	2b01      	cmp	r3, #1
 800d428:	d171      	bne.n	800d50e <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800d42a:	68fb      	ldr	r3, [r7, #12]
 800d42c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800d42e:	68fb      	ldr	r3, [r7, #12]
 800d430:	681b      	ldr	r3, [r3, #0]
 800d432:	330c      	adds	r3, #12
 800d434:	7812      	ldrb	r2, [r2, #0]
 800d436:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800d438:	68fb      	ldr	r3, [r7, #12]
 800d43a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d43c:	1c5a      	adds	r2, r3, #1
 800d43e:	68fb      	ldr	r3, [r7, #12]
 800d440:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800d442:	68fb      	ldr	r3, [r7, #12]
 800d444:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800d446:	b29b      	uxth	r3, r3
 800d448:	3b01      	subs	r3, #1
 800d44a:	b29a      	uxth	r2, r3
 800d44c:	68fb      	ldr	r3, [r7, #12]
 800d44e:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800d450:	e05d      	b.n	800d50e <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800d452:	68fb      	ldr	r3, [r7, #12]
 800d454:	681b      	ldr	r3, [r3, #0]
 800d456:	689b      	ldr	r3, [r3, #8]
 800d458:	f003 0302 	and.w	r3, r3, #2
 800d45c:	2b02      	cmp	r3, #2
 800d45e:	d11c      	bne.n	800d49a <HAL_SPI_TransmitReceive+0x264>
 800d460:	68fb      	ldr	r3, [r7, #12]
 800d462:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800d464:	b29b      	uxth	r3, r3
 800d466:	2b00      	cmp	r3, #0
 800d468:	d017      	beq.n	800d49a <HAL_SPI_TransmitReceive+0x264>
 800d46a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d46c:	2b01      	cmp	r3, #1
 800d46e:	d114      	bne.n	800d49a <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800d470:	68fb      	ldr	r3, [r7, #12]
 800d472:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800d474:	68fb      	ldr	r3, [r7, #12]
 800d476:	681b      	ldr	r3, [r3, #0]
 800d478:	330c      	adds	r3, #12
 800d47a:	7812      	ldrb	r2, [r2, #0]
 800d47c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800d47e:	68fb      	ldr	r3, [r7, #12]
 800d480:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d482:	1c5a      	adds	r2, r3, #1
 800d484:	68fb      	ldr	r3, [r7, #12]
 800d486:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800d488:	68fb      	ldr	r3, [r7, #12]
 800d48a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800d48c:	b29b      	uxth	r3, r3
 800d48e:	3b01      	subs	r3, #1
 800d490:	b29a      	uxth	r2, r3
 800d492:	68fb      	ldr	r3, [r7, #12]
 800d494:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800d496:	2300      	movs	r3, #0
 800d498:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800d49a:	68fb      	ldr	r3, [r7, #12]
 800d49c:	681b      	ldr	r3, [r3, #0]
 800d49e:	689b      	ldr	r3, [r3, #8]
 800d4a0:	f003 0301 	and.w	r3, r3, #1
 800d4a4:	2b01      	cmp	r3, #1
 800d4a6:	d119      	bne.n	800d4dc <HAL_SPI_TransmitReceive+0x2a6>
 800d4a8:	68fb      	ldr	r3, [r7, #12]
 800d4aa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800d4ac:	b29b      	uxth	r3, r3
 800d4ae:	2b00      	cmp	r3, #0
 800d4b0:	d014      	beq.n	800d4dc <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800d4b2:	68fb      	ldr	r3, [r7, #12]
 800d4b4:	681b      	ldr	r3, [r3, #0]
 800d4b6:	68da      	ldr	r2, [r3, #12]
 800d4b8:	68fb      	ldr	r3, [r7, #12]
 800d4ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d4bc:	b2d2      	uxtb	r2, r2
 800d4be:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800d4c0:	68fb      	ldr	r3, [r7, #12]
 800d4c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d4c4:	1c5a      	adds	r2, r3, #1
 800d4c6:	68fb      	ldr	r3, [r7, #12]
 800d4c8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800d4ca:	68fb      	ldr	r3, [r7, #12]
 800d4cc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800d4ce:	b29b      	uxth	r3, r3
 800d4d0:	3b01      	subs	r3, #1
 800d4d2:	b29a      	uxth	r2, r3
 800d4d4:	68fb      	ldr	r3, [r7, #12]
 800d4d6:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800d4d8:	2301      	movs	r3, #1
 800d4da:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800d4dc:	f7fd f9b8 	bl	800a850 <HAL_GetTick>
 800d4e0:	4602      	mov	r2, r0
 800d4e2:	6a3b      	ldr	r3, [r7, #32]
 800d4e4:	1ad3      	subs	r3, r2, r3
 800d4e6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d4e8:	429a      	cmp	r2, r3
 800d4ea:	d803      	bhi.n	800d4f4 <HAL_SPI_TransmitReceive+0x2be>
 800d4ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d4ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d4f2:	d102      	bne.n	800d4fa <HAL_SPI_TransmitReceive+0x2c4>
 800d4f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d4f6:	2b00      	cmp	r3, #0
 800d4f8:	d109      	bne.n	800d50e <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800d4fa:	68fb      	ldr	r3, [r7, #12]
 800d4fc:	2201      	movs	r2, #1
 800d4fe:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 800d502:	68fb      	ldr	r3, [r7, #12]
 800d504:	2200      	movs	r2, #0
 800d506:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 800d50a:	2303      	movs	r3, #3
 800d50c:	e038      	b.n	800d580 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800d50e:	68fb      	ldr	r3, [r7, #12]
 800d510:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800d512:	b29b      	uxth	r3, r3
 800d514:	2b00      	cmp	r3, #0
 800d516:	d19c      	bne.n	800d452 <HAL_SPI_TransmitReceive+0x21c>
 800d518:	68fb      	ldr	r3, [r7, #12]
 800d51a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800d51c:	b29b      	uxth	r3, r3
 800d51e:	2b00      	cmp	r3, #0
 800d520:	d197      	bne.n	800d452 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800d522:	6a3a      	ldr	r2, [r7, #32]
 800d524:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800d526:	68f8      	ldr	r0, [r7, #12]
 800d528:	f000 f8b6 	bl	800d698 <SPI_EndRxTxTransaction>
 800d52c:	4603      	mov	r3, r0
 800d52e:	2b00      	cmp	r3, #0
 800d530:	d008      	beq.n	800d544 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800d532:	68fb      	ldr	r3, [r7, #12]
 800d534:	2220      	movs	r2, #32
 800d536:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 800d538:	68fb      	ldr	r3, [r7, #12]
 800d53a:	2200      	movs	r2, #0
 800d53c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 800d540:	2301      	movs	r3, #1
 800d542:	e01d      	b.n	800d580 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800d544:	68fb      	ldr	r3, [r7, #12]
 800d546:	689b      	ldr	r3, [r3, #8]
 800d548:	2b00      	cmp	r3, #0
 800d54a:	d10a      	bne.n	800d562 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800d54c:	2300      	movs	r3, #0
 800d54e:	613b      	str	r3, [r7, #16]
 800d550:	68fb      	ldr	r3, [r7, #12]
 800d552:	681b      	ldr	r3, [r3, #0]
 800d554:	68db      	ldr	r3, [r3, #12]
 800d556:	613b      	str	r3, [r7, #16]
 800d558:	68fb      	ldr	r3, [r7, #12]
 800d55a:	681b      	ldr	r3, [r3, #0]
 800d55c:	689b      	ldr	r3, [r3, #8]
 800d55e:	613b      	str	r3, [r7, #16]
 800d560:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 800d562:	68fb      	ldr	r3, [r7, #12]
 800d564:	2201      	movs	r2, #1
 800d566:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800d56a:	68fb      	ldr	r3, [r7, #12]
 800d56c:	2200      	movs	r2, #0
 800d56e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800d572:	68fb      	ldr	r3, [r7, #12]
 800d574:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d576:	2b00      	cmp	r3, #0
 800d578:	d001      	beq.n	800d57e <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 800d57a:	2301      	movs	r3, #1
 800d57c:	e000      	b.n	800d580 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 800d57e:	2300      	movs	r3, #0
  }
}
 800d580:	4618      	mov	r0, r3
 800d582:	3728      	adds	r7, #40	@ 0x28
 800d584:	46bd      	mov	sp, r7
 800d586:	bd80      	pop	{r7, pc}

0800d588 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800d588:	b580      	push	{r7, lr}
 800d58a:	b088      	sub	sp, #32
 800d58c:	af00      	add	r7, sp, #0
 800d58e:	60f8      	str	r0, [r7, #12]
 800d590:	60b9      	str	r1, [r7, #8]
 800d592:	603b      	str	r3, [r7, #0]
 800d594:	4613      	mov	r3, r2
 800d596:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800d598:	f7fd f95a 	bl	800a850 <HAL_GetTick>
 800d59c:	4602      	mov	r2, r0
 800d59e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d5a0:	1a9b      	subs	r3, r3, r2
 800d5a2:	683a      	ldr	r2, [r7, #0]
 800d5a4:	4413      	add	r3, r2
 800d5a6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800d5a8:	f7fd f952 	bl	800a850 <HAL_GetTick>
 800d5ac:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800d5ae:	4b39      	ldr	r3, [pc, #228]	@ (800d694 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800d5b0:	681b      	ldr	r3, [r3, #0]
 800d5b2:	015b      	lsls	r3, r3, #5
 800d5b4:	0d1b      	lsrs	r3, r3, #20
 800d5b6:	69fa      	ldr	r2, [r7, #28]
 800d5b8:	fb02 f303 	mul.w	r3, r2, r3
 800d5bc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800d5be:	e054      	b.n	800d66a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800d5c0:	683b      	ldr	r3, [r7, #0]
 800d5c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d5c6:	d050      	beq.n	800d66a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800d5c8:	f7fd f942 	bl	800a850 <HAL_GetTick>
 800d5cc:	4602      	mov	r2, r0
 800d5ce:	69bb      	ldr	r3, [r7, #24]
 800d5d0:	1ad3      	subs	r3, r2, r3
 800d5d2:	69fa      	ldr	r2, [r7, #28]
 800d5d4:	429a      	cmp	r2, r3
 800d5d6:	d902      	bls.n	800d5de <SPI_WaitFlagStateUntilTimeout+0x56>
 800d5d8:	69fb      	ldr	r3, [r7, #28]
 800d5da:	2b00      	cmp	r3, #0
 800d5dc:	d13d      	bne.n	800d65a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800d5de:	68fb      	ldr	r3, [r7, #12]
 800d5e0:	681b      	ldr	r3, [r3, #0]
 800d5e2:	685a      	ldr	r2, [r3, #4]
 800d5e4:	68fb      	ldr	r3, [r7, #12]
 800d5e6:	681b      	ldr	r3, [r3, #0]
 800d5e8:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800d5ec:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800d5ee:	68fb      	ldr	r3, [r7, #12]
 800d5f0:	685b      	ldr	r3, [r3, #4]
 800d5f2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800d5f6:	d111      	bne.n	800d61c <SPI_WaitFlagStateUntilTimeout+0x94>
 800d5f8:	68fb      	ldr	r3, [r7, #12]
 800d5fa:	689b      	ldr	r3, [r3, #8]
 800d5fc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800d600:	d004      	beq.n	800d60c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800d602:	68fb      	ldr	r3, [r7, #12]
 800d604:	689b      	ldr	r3, [r3, #8]
 800d606:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d60a:	d107      	bne.n	800d61c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800d60c:	68fb      	ldr	r3, [r7, #12]
 800d60e:	681b      	ldr	r3, [r3, #0]
 800d610:	681a      	ldr	r2, [r3, #0]
 800d612:	68fb      	ldr	r3, [r7, #12]
 800d614:	681b      	ldr	r3, [r3, #0]
 800d616:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800d61a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800d61c:	68fb      	ldr	r3, [r7, #12]
 800d61e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d620:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800d624:	d10f      	bne.n	800d646 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800d626:	68fb      	ldr	r3, [r7, #12]
 800d628:	681b      	ldr	r3, [r3, #0]
 800d62a:	681a      	ldr	r2, [r3, #0]
 800d62c:	68fb      	ldr	r3, [r7, #12]
 800d62e:	681b      	ldr	r3, [r3, #0]
 800d630:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800d634:	601a      	str	r2, [r3, #0]
 800d636:	68fb      	ldr	r3, [r7, #12]
 800d638:	681b      	ldr	r3, [r3, #0]
 800d63a:	681a      	ldr	r2, [r3, #0]
 800d63c:	68fb      	ldr	r3, [r7, #12]
 800d63e:	681b      	ldr	r3, [r3, #0]
 800d640:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800d644:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800d646:	68fb      	ldr	r3, [r7, #12]
 800d648:	2201      	movs	r2, #1
 800d64a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800d64e:	68fb      	ldr	r3, [r7, #12]
 800d650:	2200      	movs	r2, #0
 800d652:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800d656:	2303      	movs	r3, #3
 800d658:	e017      	b.n	800d68a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800d65a:	697b      	ldr	r3, [r7, #20]
 800d65c:	2b00      	cmp	r3, #0
 800d65e:	d101      	bne.n	800d664 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800d660:	2300      	movs	r3, #0
 800d662:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800d664:	697b      	ldr	r3, [r7, #20]
 800d666:	3b01      	subs	r3, #1
 800d668:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800d66a:	68fb      	ldr	r3, [r7, #12]
 800d66c:	681b      	ldr	r3, [r3, #0]
 800d66e:	689a      	ldr	r2, [r3, #8]
 800d670:	68bb      	ldr	r3, [r7, #8]
 800d672:	4013      	ands	r3, r2
 800d674:	68ba      	ldr	r2, [r7, #8]
 800d676:	429a      	cmp	r2, r3
 800d678:	bf0c      	ite	eq
 800d67a:	2301      	moveq	r3, #1
 800d67c:	2300      	movne	r3, #0
 800d67e:	b2db      	uxtb	r3, r3
 800d680:	461a      	mov	r2, r3
 800d682:	79fb      	ldrb	r3, [r7, #7]
 800d684:	429a      	cmp	r2, r3
 800d686:	d19b      	bne.n	800d5c0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800d688:	2300      	movs	r3, #0
}
 800d68a:	4618      	mov	r0, r3
 800d68c:	3720      	adds	r7, #32
 800d68e:	46bd      	mov	sp, r7
 800d690:	bd80      	pop	{r7, pc}
 800d692:	bf00      	nop
 800d694:	20000000 	.word	0x20000000

0800d698 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800d698:	b580      	push	{r7, lr}
 800d69a:	b088      	sub	sp, #32
 800d69c:	af02      	add	r7, sp, #8
 800d69e:	60f8      	str	r0, [r7, #12]
 800d6a0:	60b9      	str	r1, [r7, #8]
 800d6a2:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 800d6a4:	687b      	ldr	r3, [r7, #4]
 800d6a6:	9300      	str	r3, [sp, #0]
 800d6a8:	68bb      	ldr	r3, [r7, #8]
 800d6aa:	2201      	movs	r2, #1
 800d6ac:	2102      	movs	r1, #2
 800d6ae:	68f8      	ldr	r0, [r7, #12]
 800d6b0:	f7ff ff6a 	bl	800d588 <SPI_WaitFlagStateUntilTimeout>
 800d6b4:	4603      	mov	r3, r0
 800d6b6:	2b00      	cmp	r3, #0
 800d6b8:	d007      	beq.n	800d6ca <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800d6ba:	68fb      	ldr	r3, [r7, #12]
 800d6bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d6be:	f043 0220 	orr.w	r2, r3, #32
 800d6c2:	68fb      	ldr	r3, [r7, #12]
 800d6c4:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800d6c6:	2303      	movs	r3, #3
 800d6c8:	e032      	b.n	800d730 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800d6ca:	4b1b      	ldr	r3, [pc, #108]	@ (800d738 <SPI_EndRxTxTransaction+0xa0>)
 800d6cc:	681b      	ldr	r3, [r3, #0]
 800d6ce:	4a1b      	ldr	r2, [pc, #108]	@ (800d73c <SPI_EndRxTxTransaction+0xa4>)
 800d6d0:	fba2 2303 	umull	r2, r3, r2, r3
 800d6d4:	0d5b      	lsrs	r3, r3, #21
 800d6d6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800d6da:	fb02 f303 	mul.w	r3, r2, r3
 800d6de:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800d6e0:	68fb      	ldr	r3, [r7, #12]
 800d6e2:	685b      	ldr	r3, [r3, #4]
 800d6e4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800d6e8:	d112      	bne.n	800d710 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800d6ea:	687b      	ldr	r3, [r7, #4]
 800d6ec:	9300      	str	r3, [sp, #0]
 800d6ee:	68bb      	ldr	r3, [r7, #8]
 800d6f0:	2200      	movs	r2, #0
 800d6f2:	2180      	movs	r1, #128	@ 0x80
 800d6f4:	68f8      	ldr	r0, [r7, #12]
 800d6f6:	f7ff ff47 	bl	800d588 <SPI_WaitFlagStateUntilTimeout>
 800d6fa:	4603      	mov	r3, r0
 800d6fc:	2b00      	cmp	r3, #0
 800d6fe:	d016      	beq.n	800d72e <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800d700:	68fb      	ldr	r3, [r7, #12]
 800d702:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d704:	f043 0220 	orr.w	r2, r3, #32
 800d708:	68fb      	ldr	r3, [r7, #12]
 800d70a:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800d70c:	2303      	movs	r3, #3
 800d70e:	e00f      	b.n	800d730 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800d710:	697b      	ldr	r3, [r7, #20]
 800d712:	2b00      	cmp	r3, #0
 800d714:	d00a      	beq.n	800d72c <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 800d716:	697b      	ldr	r3, [r7, #20]
 800d718:	3b01      	subs	r3, #1
 800d71a:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800d71c:	68fb      	ldr	r3, [r7, #12]
 800d71e:	681b      	ldr	r3, [r3, #0]
 800d720:	689b      	ldr	r3, [r3, #8]
 800d722:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d726:	2b80      	cmp	r3, #128	@ 0x80
 800d728:	d0f2      	beq.n	800d710 <SPI_EndRxTxTransaction+0x78>
 800d72a:	e000      	b.n	800d72e <SPI_EndRxTxTransaction+0x96>
        break;
 800d72c:	bf00      	nop
  }

  return HAL_OK;
 800d72e:	2300      	movs	r3, #0
}
 800d730:	4618      	mov	r0, r3
 800d732:	3718      	adds	r7, #24
 800d734:	46bd      	mov	sp, r7
 800d736:	bd80      	pop	{r7, pc}
 800d738:	20000000 	.word	0x20000000
 800d73c:	165e9f81 	.word	0x165e9f81

0800d740 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800d740:	b580      	push	{r7, lr}
 800d742:	b082      	sub	sp, #8
 800d744:	af00      	add	r7, sp, #0
 800d746:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d748:	687b      	ldr	r3, [r7, #4]
 800d74a:	2b00      	cmp	r3, #0
 800d74c:	d101      	bne.n	800d752 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800d74e:	2301      	movs	r3, #1
 800d750:	e041      	b.n	800d7d6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d752:	687b      	ldr	r3, [r7, #4]
 800d754:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800d758:	b2db      	uxtb	r3, r3
 800d75a:	2b00      	cmp	r3, #0
 800d75c:	d106      	bne.n	800d76c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d75e:	687b      	ldr	r3, [r7, #4]
 800d760:	2200      	movs	r2, #0
 800d762:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800d766:	6878      	ldr	r0, [r7, #4]
 800d768:	f7f3 ff82 	bl	8001670 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d76c:	687b      	ldr	r3, [r7, #4]
 800d76e:	2202      	movs	r2, #2
 800d770:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d774:	687b      	ldr	r3, [r7, #4]
 800d776:	681a      	ldr	r2, [r3, #0]
 800d778:	687b      	ldr	r3, [r7, #4]
 800d77a:	3304      	adds	r3, #4
 800d77c:	4619      	mov	r1, r3
 800d77e:	4610      	mov	r0, r2
 800d780:	f000 fa7e 	bl	800dc80 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d784:	687b      	ldr	r3, [r7, #4]
 800d786:	2201      	movs	r2, #1
 800d788:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d78c:	687b      	ldr	r3, [r7, #4]
 800d78e:	2201      	movs	r2, #1
 800d790:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800d794:	687b      	ldr	r3, [r7, #4]
 800d796:	2201      	movs	r2, #1
 800d798:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800d79c:	687b      	ldr	r3, [r7, #4]
 800d79e:	2201      	movs	r2, #1
 800d7a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800d7a4:	687b      	ldr	r3, [r7, #4]
 800d7a6:	2201      	movs	r2, #1
 800d7a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d7ac:	687b      	ldr	r3, [r7, #4]
 800d7ae:	2201      	movs	r2, #1
 800d7b0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800d7b4:	687b      	ldr	r3, [r7, #4]
 800d7b6:	2201      	movs	r2, #1
 800d7b8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800d7bc:	687b      	ldr	r3, [r7, #4]
 800d7be:	2201      	movs	r2, #1
 800d7c0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800d7c4:	687b      	ldr	r3, [r7, #4]
 800d7c6:	2201      	movs	r2, #1
 800d7c8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d7cc:	687b      	ldr	r3, [r7, #4]
 800d7ce:	2201      	movs	r2, #1
 800d7d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800d7d4:	2300      	movs	r3, #0
}
 800d7d6:	4618      	mov	r0, r3
 800d7d8:	3708      	adds	r7, #8
 800d7da:	46bd      	mov	sp, r7
 800d7dc:	bd80      	pop	{r7, pc}
	...

0800d7e0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800d7e0:	b480      	push	{r7}
 800d7e2:	b085      	sub	sp, #20
 800d7e4:	af00      	add	r7, sp, #0
 800d7e6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800d7e8:	687b      	ldr	r3, [r7, #4]
 800d7ea:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800d7ee:	b2db      	uxtb	r3, r3
 800d7f0:	2b01      	cmp	r3, #1
 800d7f2:	d001      	beq.n	800d7f8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800d7f4:	2301      	movs	r3, #1
 800d7f6:	e04e      	b.n	800d896 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d7f8:	687b      	ldr	r3, [r7, #4]
 800d7fa:	2202      	movs	r2, #2
 800d7fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800d800:	687b      	ldr	r3, [r7, #4]
 800d802:	681b      	ldr	r3, [r3, #0]
 800d804:	68da      	ldr	r2, [r3, #12]
 800d806:	687b      	ldr	r3, [r7, #4]
 800d808:	681b      	ldr	r3, [r3, #0]
 800d80a:	f042 0201 	orr.w	r2, r2, #1
 800d80e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d810:	687b      	ldr	r3, [r7, #4]
 800d812:	681b      	ldr	r3, [r3, #0]
 800d814:	4a23      	ldr	r2, [pc, #140]	@ (800d8a4 <HAL_TIM_Base_Start_IT+0xc4>)
 800d816:	4293      	cmp	r3, r2
 800d818:	d022      	beq.n	800d860 <HAL_TIM_Base_Start_IT+0x80>
 800d81a:	687b      	ldr	r3, [r7, #4]
 800d81c:	681b      	ldr	r3, [r3, #0]
 800d81e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d822:	d01d      	beq.n	800d860 <HAL_TIM_Base_Start_IT+0x80>
 800d824:	687b      	ldr	r3, [r7, #4]
 800d826:	681b      	ldr	r3, [r3, #0]
 800d828:	4a1f      	ldr	r2, [pc, #124]	@ (800d8a8 <HAL_TIM_Base_Start_IT+0xc8>)
 800d82a:	4293      	cmp	r3, r2
 800d82c:	d018      	beq.n	800d860 <HAL_TIM_Base_Start_IT+0x80>
 800d82e:	687b      	ldr	r3, [r7, #4]
 800d830:	681b      	ldr	r3, [r3, #0]
 800d832:	4a1e      	ldr	r2, [pc, #120]	@ (800d8ac <HAL_TIM_Base_Start_IT+0xcc>)
 800d834:	4293      	cmp	r3, r2
 800d836:	d013      	beq.n	800d860 <HAL_TIM_Base_Start_IT+0x80>
 800d838:	687b      	ldr	r3, [r7, #4]
 800d83a:	681b      	ldr	r3, [r3, #0]
 800d83c:	4a1c      	ldr	r2, [pc, #112]	@ (800d8b0 <HAL_TIM_Base_Start_IT+0xd0>)
 800d83e:	4293      	cmp	r3, r2
 800d840:	d00e      	beq.n	800d860 <HAL_TIM_Base_Start_IT+0x80>
 800d842:	687b      	ldr	r3, [r7, #4]
 800d844:	681b      	ldr	r3, [r3, #0]
 800d846:	4a1b      	ldr	r2, [pc, #108]	@ (800d8b4 <HAL_TIM_Base_Start_IT+0xd4>)
 800d848:	4293      	cmp	r3, r2
 800d84a:	d009      	beq.n	800d860 <HAL_TIM_Base_Start_IT+0x80>
 800d84c:	687b      	ldr	r3, [r7, #4]
 800d84e:	681b      	ldr	r3, [r3, #0]
 800d850:	4a19      	ldr	r2, [pc, #100]	@ (800d8b8 <HAL_TIM_Base_Start_IT+0xd8>)
 800d852:	4293      	cmp	r3, r2
 800d854:	d004      	beq.n	800d860 <HAL_TIM_Base_Start_IT+0x80>
 800d856:	687b      	ldr	r3, [r7, #4]
 800d858:	681b      	ldr	r3, [r3, #0]
 800d85a:	4a18      	ldr	r2, [pc, #96]	@ (800d8bc <HAL_TIM_Base_Start_IT+0xdc>)
 800d85c:	4293      	cmp	r3, r2
 800d85e:	d111      	bne.n	800d884 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d860:	687b      	ldr	r3, [r7, #4]
 800d862:	681b      	ldr	r3, [r3, #0]
 800d864:	689b      	ldr	r3, [r3, #8]
 800d866:	f003 0307 	and.w	r3, r3, #7
 800d86a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d86c:	68fb      	ldr	r3, [r7, #12]
 800d86e:	2b06      	cmp	r3, #6
 800d870:	d010      	beq.n	800d894 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800d872:	687b      	ldr	r3, [r7, #4]
 800d874:	681b      	ldr	r3, [r3, #0]
 800d876:	681a      	ldr	r2, [r3, #0]
 800d878:	687b      	ldr	r3, [r7, #4]
 800d87a:	681b      	ldr	r3, [r3, #0]
 800d87c:	f042 0201 	orr.w	r2, r2, #1
 800d880:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d882:	e007      	b.n	800d894 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800d884:	687b      	ldr	r3, [r7, #4]
 800d886:	681b      	ldr	r3, [r3, #0]
 800d888:	681a      	ldr	r2, [r3, #0]
 800d88a:	687b      	ldr	r3, [r7, #4]
 800d88c:	681b      	ldr	r3, [r3, #0]
 800d88e:	f042 0201 	orr.w	r2, r2, #1
 800d892:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800d894:	2300      	movs	r3, #0
}
 800d896:	4618      	mov	r0, r3
 800d898:	3714      	adds	r7, #20
 800d89a:	46bd      	mov	sp, r7
 800d89c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8a0:	4770      	bx	lr
 800d8a2:	bf00      	nop
 800d8a4:	40010000 	.word	0x40010000
 800d8a8:	40000400 	.word	0x40000400
 800d8ac:	40000800 	.word	0x40000800
 800d8b0:	40000c00 	.word	0x40000c00
 800d8b4:	40010400 	.word	0x40010400
 800d8b8:	40014000 	.word	0x40014000
 800d8bc:	40001800 	.word	0x40001800

0800d8c0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800d8c0:	b580      	push	{r7, lr}
 800d8c2:	b084      	sub	sp, #16
 800d8c4:	af00      	add	r7, sp, #0
 800d8c6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800d8c8:	687b      	ldr	r3, [r7, #4]
 800d8ca:	681b      	ldr	r3, [r3, #0]
 800d8cc:	68db      	ldr	r3, [r3, #12]
 800d8ce:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800d8d0:	687b      	ldr	r3, [r7, #4]
 800d8d2:	681b      	ldr	r3, [r3, #0]
 800d8d4:	691b      	ldr	r3, [r3, #16]
 800d8d6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800d8d8:	68bb      	ldr	r3, [r7, #8]
 800d8da:	f003 0302 	and.w	r3, r3, #2
 800d8de:	2b00      	cmp	r3, #0
 800d8e0:	d020      	beq.n	800d924 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800d8e2:	68fb      	ldr	r3, [r7, #12]
 800d8e4:	f003 0302 	and.w	r3, r3, #2
 800d8e8:	2b00      	cmp	r3, #0
 800d8ea:	d01b      	beq.n	800d924 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800d8ec:	687b      	ldr	r3, [r7, #4]
 800d8ee:	681b      	ldr	r3, [r3, #0]
 800d8f0:	f06f 0202 	mvn.w	r2, #2
 800d8f4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800d8f6:	687b      	ldr	r3, [r7, #4]
 800d8f8:	2201      	movs	r2, #1
 800d8fa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800d8fc:	687b      	ldr	r3, [r7, #4]
 800d8fe:	681b      	ldr	r3, [r3, #0]
 800d900:	699b      	ldr	r3, [r3, #24]
 800d902:	f003 0303 	and.w	r3, r3, #3
 800d906:	2b00      	cmp	r3, #0
 800d908:	d003      	beq.n	800d912 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800d90a:	6878      	ldr	r0, [r7, #4]
 800d90c:	f000 f999 	bl	800dc42 <HAL_TIM_IC_CaptureCallback>
 800d910:	e005      	b.n	800d91e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800d912:	6878      	ldr	r0, [r7, #4]
 800d914:	f000 f98b 	bl	800dc2e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d918:	6878      	ldr	r0, [r7, #4]
 800d91a:	f000 f99c 	bl	800dc56 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d91e:	687b      	ldr	r3, [r7, #4]
 800d920:	2200      	movs	r2, #0
 800d922:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800d924:	68bb      	ldr	r3, [r7, #8]
 800d926:	f003 0304 	and.w	r3, r3, #4
 800d92a:	2b00      	cmp	r3, #0
 800d92c:	d020      	beq.n	800d970 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800d92e:	68fb      	ldr	r3, [r7, #12]
 800d930:	f003 0304 	and.w	r3, r3, #4
 800d934:	2b00      	cmp	r3, #0
 800d936:	d01b      	beq.n	800d970 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800d938:	687b      	ldr	r3, [r7, #4]
 800d93a:	681b      	ldr	r3, [r3, #0]
 800d93c:	f06f 0204 	mvn.w	r2, #4
 800d940:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800d942:	687b      	ldr	r3, [r7, #4]
 800d944:	2202      	movs	r2, #2
 800d946:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800d948:	687b      	ldr	r3, [r7, #4]
 800d94a:	681b      	ldr	r3, [r3, #0]
 800d94c:	699b      	ldr	r3, [r3, #24]
 800d94e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800d952:	2b00      	cmp	r3, #0
 800d954:	d003      	beq.n	800d95e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d956:	6878      	ldr	r0, [r7, #4]
 800d958:	f000 f973 	bl	800dc42 <HAL_TIM_IC_CaptureCallback>
 800d95c:	e005      	b.n	800d96a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d95e:	6878      	ldr	r0, [r7, #4]
 800d960:	f000 f965 	bl	800dc2e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d964:	6878      	ldr	r0, [r7, #4]
 800d966:	f000 f976 	bl	800dc56 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d96a:	687b      	ldr	r3, [r7, #4]
 800d96c:	2200      	movs	r2, #0
 800d96e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800d970:	68bb      	ldr	r3, [r7, #8]
 800d972:	f003 0308 	and.w	r3, r3, #8
 800d976:	2b00      	cmp	r3, #0
 800d978:	d020      	beq.n	800d9bc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800d97a:	68fb      	ldr	r3, [r7, #12]
 800d97c:	f003 0308 	and.w	r3, r3, #8
 800d980:	2b00      	cmp	r3, #0
 800d982:	d01b      	beq.n	800d9bc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800d984:	687b      	ldr	r3, [r7, #4]
 800d986:	681b      	ldr	r3, [r3, #0]
 800d988:	f06f 0208 	mvn.w	r2, #8
 800d98c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800d98e:	687b      	ldr	r3, [r7, #4]
 800d990:	2204      	movs	r2, #4
 800d992:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800d994:	687b      	ldr	r3, [r7, #4]
 800d996:	681b      	ldr	r3, [r3, #0]
 800d998:	69db      	ldr	r3, [r3, #28]
 800d99a:	f003 0303 	and.w	r3, r3, #3
 800d99e:	2b00      	cmp	r3, #0
 800d9a0:	d003      	beq.n	800d9aa <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d9a2:	6878      	ldr	r0, [r7, #4]
 800d9a4:	f000 f94d 	bl	800dc42 <HAL_TIM_IC_CaptureCallback>
 800d9a8:	e005      	b.n	800d9b6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d9aa:	6878      	ldr	r0, [r7, #4]
 800d9ac:	f000 f93f 	bl	800dc2e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d9b0:	6878      	ldr	r0, [r7, #4]
 800d9b2:	f000 f950 	bl	800dc56 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d9b6:	687b      	ldr	r3, [r7, #4]
 800d9b8:	2200      	movs	r2, #0
 800d9ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800d9bc:	68bb      	ldr	r3, [r7, #8]
 800d9be:	f003 0310 	and.w	r3, r3, #16
 800d9c2:	2b00      	cmp	r3, #0
 800d9c4:	d020      	beq.n	800da08 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800d9c6:	68fb      	ldr	r3, [r7, #12]
 800d9c8:	f003 0310 	and.w	r3, r3, #16
 800d9cc:	2b00      	cmp	r3, #0
 800d9ce:	d01b      	beq.n	800da08 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800d9d0:	687b      	ldr	r3, [r7, #4]
 800d9d2:	681b      	ldr	r3, [r3, #0]
 800d9d4:	f06f 0210 	mvn.w	r2, #16
 800d9d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800d9da:	687b      	ldr	r3, [r7, #4]
 800d9dc:	2208      	movs	r2, #8
 800d9de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800d9e0:	687b      	ldr	r3, [r7, #4]
 800d9e2:	681b      	ldr	r3, [r3, #0]
 800d9e4:	69db      	ldr	r3, [r3, #28]
 800d9e6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800d9ea:	2b00      	cmp	r3, #0
 800d9ec:	d003      	beq.n	800d9f6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d9ee:	6878      	ldr	r0, [r7, #4]
 800d9f0:	f000 f927 	bl	800dc42 <HAL_TIM_IC_CaptureCallback>
 800d9f4:	e005      	b.n	800da02 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d9f6:	6878      	ldr	r0, [r7, #4]
 800d9f8:	f000 f919 	bl	800dc2e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d9fc:	6878      	ldr	r0, [r7, #4]
 800d9fe:	f000 f92a 	bl	800dc56 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800da02:	687b      	ldr	r3, [r7, #4]
 800da04:	2200      	movs	r2, #0
 800da06:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800da08:	68bb      	ldr	r3, [r7, #8]
 800da0a:	f003 0301 	and.w	r3, r3, #1
 800da0e:	2b00      	cmp	r3, #0
 800da10:	d00c      	beq.n	800da2c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800da12:	68fb      	ldr	r3, [r7, #12]
 800da14:	f003 0301 	and.w	r3, r3, #1
 800da18:	2b00      	cmp	r3, #0
 800da1a:	d007      	beq.n	800da2c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800da1c:	687b      	ldr	r3, [r7, #4]
 800da1e:	681b      	ldr	r3, [r3, #0]
 800da20:	f06f 0201 	mvn.w	r2, #1
 800da24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800da26:	6878      	ldr	r0, [r7, #4]
 800da28:	f7f3 fca8 	bl	800137c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800da2c:	68bb      	ldr	r3, [r7, #8]
 800da2e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800da32:	2b00      	cmp	r3, #0
 800da34:	d00c      	beq.n	800da50 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800da36:	68fb      	ldr	r3, [r7, #12]
 800da38:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800da3c:	2b00      	cmp	r3, #0
 800da3e:	d007      	beq.n	800da50 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800da40:	687b      	ldr	r3, [r7, #4]
 800da42:	681b      	ldr	r3, [r3, #0]
 800da44:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800da48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800da4a:	6878      	ldr	r0, [r7, #4]
 800da4c:	f000 fae4 	bl	800e018 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800da50:	68bb      	ldr	r3, [r7, #8]
 800da52:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800da56:	2b00      	cmp	r3, #0
 800da58:	d00c      	beq.n	800da74 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800da5a:	68fb      	ldr	r3, [r7, #12]
 800da5c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800da60:	2b00      	cmp	r3, #0
 800da62:	d007      	beq.n	800da74 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800da64:	687b      	ldr	r3, [r7, #4]
 800da66:	681b      	ldr	r3, [r3, #0]
 800da68:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800da6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800da6e:	6878      	ldr	r0, [r7, #4]
 800da70:	f000 f8fb 	bl	800dc6a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800da74:	68bb      	ldr	r3, [r7, #8]
 800da76:	f003 0320 	and.w	r3, r3, #32
 800da7a:	2b00      	cmp	r3, #0
 800da7c:	d00c      	beq.n	800da98 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800da7e:	68fb      	ldr	r3, [r7, #12]
 800da80:	f003 0320 	and.w	r3, r3, #32
 800da84:	2b00      	cmp	r3, #0
 800da86:	d007      	beq.n	800da98 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800da88:	687b      	ldr	r3, [r7, #4]
 800da8a:	681b      	ldr	r3, [r3, #0]
 800da8c:	f06f 0220 	mvn.w	r2, #32
 800da90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800da92:	6878      	ldr	r0, [r7, #4]
 800da94:	f000 fab6 	bl	800e004 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800da98:	bf00      	nop
 800da9a:	3710      	adds	r7, #16
 800da9c:	46bd      	mov	sp, r7
 800da9e:	bd80      	pop	{r7, pc}

0800daa0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800daa0:	b580      	push	{r7, lr}
 800daa2:	b084      	sub	sp, #16
 800daa4:	af00      	add	r7, sp, #0
 800daa6:	6078      	str	r0, [r7, #4]
 800daa8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800daaa:	2300      	movs	r3, #0
 800daac:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800daae:	687b      	ldr	r3, [r7, #4]
 800dab0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800dab4:	2b01      	cmp	r3, #1
 800dab6:	d101      	bne.n	800dabc <HAL_TIM_ConfigClockSource+0x1c>
 800dab8:	2302      	movs	r3, #2
 800daba:	e0b4      	b.n	800dc26 <HAL_TIM_ConfigClockSource+0x186>
 800dabc:	687b      	ldr	r3, [r7, #4]
 800dabe:	2201      	movs	r2, #1
 800dac0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800dac4:	687b      	ldr	r3, [r7, #4]
 800dac6:	2202      	movs	r2, #2
 800dac8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800dacc:	687b      	ldr	r3, [r7, #4]
 800dace:	681b      	ldr	r3, [r3, #0]
 800dad0:	689b      	ldr	r3, [r3, #8]
 800dad2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800dad4:	68bb      	ldr	r3, [r7, #8]
 800dad6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800dada:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800dadc:	68bb      	ldr	r3, [r7, #8]
 800dade:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800dae2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800dae4:	687b      	ldr	r3, [r7, #4]
 800dae6:	681b      	ldr	r3, [r3, #0]
 800dae8:	68ba      	ldr	r2, [r7, #8]
 800daea:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800daec:	683b      	ldr	r3, [r7, #0]
 800daee:	681b      	ldr	r3, [r3, #0]
 800daf0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800daf4:	d03e      	beq.n	800db74 <HAL_TIM_ConfigClockSource+0xd4>
 800daf6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800dafa:	f200 8087 	bhi.w	800dc0c <HAL_TIM_ConfigClockSource+0x16c>
 800dafe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800db02:	f000 8086 	beq.w	800dc12 <HAL_TIM_ConfigClockSource+0x172>
 800db06:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800db0a:	d87f      	bhi.n	800dc0c <HAL_TIM_ConfigClockSource+0x16c>
 800db0c:	2b70      	cmp	r3, #112	@ 0x70
 800db0e:	d01a      	beq.n	800db46 <HAL_TIM_ConfigClockSource+0xa6>
 800db10:	2b70      	cmp	r3, #112	@ 0x70
 800db12:	d87b      	bhi.n	800dc0c <HAL_TIM_ConfigClockSource+0x16c>
 800db14:	2b60      	cmp	r3, #96	@ 0x60
 800db16:	d050      	beq.n	800dbba <HAL_TIM_ConfigClockSource+0x11a>
 800db18:	2b60      	cmp	r3, #96	@ 0x60
 800db1a:	d877      	bhi.n	800dc0c <HAL_TIM_ConfigClockSource+0x16c>
 800db1c:	2b50      	cmp	r3, #80	@ 0x50
 800db1e:	d03c      	beq.n	800db9a <HAL_TIM_ConfigClockSource+0xfa>
 800db20:	2b50      	cmp	r3, #80	@ 0x50
 800db22:	d873      	bhi.n	800dc0c <HAL_TIM_ConfigClockSource+0x16c>
 800db24:	2b40      	cmp	r3, #64	@ 0x40
 800db26:	d058      	beq.n	800dbda <HAL_TIM_ConfigClockSource+0x13a>
 800db28:	2b40      	cmp	r3, #64	@ 0x40
 800db2a:	d86f      	bhi.n	800dc0c <HAL_TIM_ConfigClockSource+0x16c>
 800db2c:	2b30      	cmp	r3, #48	@ 0x30
 800db2e:	d064      	beq.n	800dbfa <HAL_TIM_ConfigClockSource+0x15a>
 800db30:	2b30      	cmp	r3, #48	@ 0x30
 800db32:	d86b      	bhi.n	800dc0c <HAL_TIM_ConfigClockSource+0x16c>
 800db34:	2b20      	cmp	r3, #32
 800db36:	d060      	beq.n	800dbfa <HAL_TIM_ConfigClockSource+0x15a>
 800db38:	2b20      	cmp	r3, #32
 800db3a:	d867      	bhi.n	800dc0c <HAL_TIM_ConfigClockSource+0x16c>
 800db3c:	2b00      	cmp	r3, #0
 800db3e:	d05c      	beq.n	800dbfa <HAL_TIM_ConfigClockSource+0x15a>
 800db40:	2b10      	cmp	r3, #16
 800db42:	d05a      	beq.n	800dbfa <HAL_TIM_ConfigClockSource+0x15a>
 800db44:	e062      	b.n	800dc0c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800db46:	687b      	ldr	r3, [r7, #4]
 800db48:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800db4a:	683b      	ldr	r3, [r7, #0]
 800db4c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800db4e:	683b      	ldr	r3, [r7, #0]
 800db50:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800db52:	683b      	ldr	r3, [r7, #0]
 800db54:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800db56:	f000 f9b9 	bl	800decc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800db5a:	687b      	ldr	r3, [r7, #4]
 800db5c:	681b      	ldr	r3, [r3, #0]
 800db5e:	689b      	ldr	r3, [r3, #8]
 800db60:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800db62:	68bb      	ldr	r3, [r7, #8]
 800db64:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800db68:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800db6a:	687b      	ldr	r3, [r7, #4]
 800db6c:	681b      	ldr	r3, [r3, #0]
 800db6e:	68ba      	ldr	r2, [r7, #8]
 800db70:	609a      	str	r2, [r3, #8]
      break;
 800db72:	e04f      	b.n	800dc14 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800db74:	687b      	ldr	r3, [r7, #4]
 800db76:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800db78:	683b      	ldr	r3, [r7, #0]
 800db7a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800db7c:	683b      	ldr	r3, [r7, #0]
 800db7e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800db80:	683b      	ldr	r3, [r7, #0]
 800db82:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800db84:	f000 f9a2 	bl	800decc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800db88:	687b      	ldr	r3, [r7, #4]
 800db8a:	681b      	ldr	r3, [r3, #0]
 800db8c:	689a      	ldr	r2, [r3, #8]
 800db8e:	687b      	ldr	r3, [r7, #4]
 800db90:	681b      	ldr	r3, [r3, #0]
 800db92:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800db96:	609a      	str	r2, [r3, #8]
      break;
 800db98:	e03c      	b.n	800dc14 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800db9a:	687b      	ldr	r3, [r7, #4]
 800db9c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800db9e:	683b      	ldr	r3, [r7, #0]
 800dba0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800dba2:	683b      	ldr	r3, [r7, #0]
 800dba4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800dba6:	461a      	mov	r2, r3
 800dba8:	f000 f916 	bl	800ddd8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800dbac:	687b      	ldr	r3, [r7, #4]
 800dbae:	681b      	ldr	r3, [r3, #0]
 800dbb0:	2150      	movs	r1, #80	@ 0x50
 800dbb2:	4618      	mov	r0, r3
 800dbb4:	f000 f96f 	bl	800de96 <TIM_ITRx_SetConfig>
      break;
 800dbb8:	e02c      	b.n	800dc14 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800dbba:	687b      	ldr	r3, [r7, #4]
 800dbbc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800dbbe:	683b      	ldr	r3, [r7, #0]
 800dbc0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800dbc2:	683b      	ldr	r3, [r7, #0]
 800dbc4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800dbc6:	461a      	mov	r2, r3
 800dbc8:	f000 f935 	bl	800de36 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800dbcc:	687b      	ldr	r3, [r7, #4]
 800dbce:	681b      	ldr	r3, [r3, #0]
 800dbd0:	2160      	movs	r1, #96	@ 0x60
 800dbd2:	4618      	mov	r0, r3
 800dbd4:	f000 f95f 	bl	800de96 <TIM_ITRx_SetConfig>
      break;
 800dbd8:	e01c      	b.n	800dc14 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800dbda:	687b      	ldr	r3, [r7, #4]
 800dbdc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800dbde:	683b      	ldr	r3, [r7, #0]
 800dbe0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800dbe2:	683b      	ldr	r3, [r7, #0]
 800dbe4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800dbe6:	461a      	mov	r2, r3
 800dbe8:	f000 f8f6 	bl	800ddd8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800dbec:	687b      	ldr	r3, [r7, #4]
 800dbee:	681b      	ldr	r3, [r3, #0]
 800dbf0:	2140      	movs	r1, #64	@ 0x40
 800dbf2:	4618      	mov	r0, r3
 800dbf4:	f000 f94f 	bl	800de96 <TIM_ITRx_SetConfig>
      break;
 800dbf8:	e00c      	b.n	800dc14 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800dbfa:	687b      	ldr	r3, [r7, #4]
 800dbfc:	681a      	ldr	r2, [r3, #0]
 800dbfe:	683b      	ldr	r3, [r7, #0]
 800dc00:	681b      	ldr	r3, [r3, #0]
 800dc02:	4619      	mov	r1, r3
 800dc04:	4610      	mov	r0, r2
 800dc06:	f000 f946 	bl	800de96 <TIM_ITRx_SetConfig>
      break;
 800dc0a:	e003      	b.n	800dc14 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800dc0c:	2301      	movs	r3, #1
 800dc0e:	73fb      	strb	r3, [r7, #15]
      break;
 800dc10:	e000      	b.n	800dc14 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800dc12:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800dc14:	687b      	ldr	r3, [r7, #4]
 800dc16:	2201      	movs	r2, #1
 800dc18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800dc1c:	687b      	ldr	r3, [r7, #4]
 800dc1e:	2200      	movs	r2, #0
 800dc20:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800dc24:	7bfb      	ldrb	r3, [r7, #15]
}
 800dc26:	4618      	mov	r0, r3
 800dc28:	3710      	adds	r7, #16
 800dc2a:	46bd      	mov	sp, r7
 800dc2c:	bd80      	pop	{r7, pc}

0800dc2e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800dc2e:	b480      	push	{r7}
 800dc30:	b083      	sub	sp, #12
 800dc32:	af00      	add	r7, sp, #0
 800dc34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800dc36:	bf00      	nop
 800dc38:	370c      	adds	r7, #12
 800dc3a:	46bd      	mov	sp, r7
 800dc3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc40:	4770      	bx	lr

0800dc42 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800dc42:	b480      	push	{r7}
 800dc44:	b083      	sub	sp, #12
 800dc46:	af00      	add	r7, sp, #0
 800dc48:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800dc4a:	bf00      	nop
 800dc4c:	370c      	adds	r7, #12
 800dc4e:	46bd      	mov	sp, r7
 800dc50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc54:	4770      	bx	lr

0800dc56 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800dc56:	b480      	push	{r7}
 800dc58:	b083      	sub	sp, #12
 800dc5a:	af00      	add	r7, sp, #0
 800dc5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800dc5e:	bf00      	nop
 800dc60:	370c      	adds	r7, #12
 800dc62:	46bd      	mov	sp, r7
 800dc64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc68:	4770      	bx	lr

0800dc6a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800dc6a:	b480      	push	{r7}
 800dc6c:	b083      	sub	sp, #12
 800dc6e:	af00      	add	r7, sp, #0
 800dc70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800dc72:	bf00      	nop
 800dc74:	370c      	adds	r7, #12
 800dc76:	46bd      	mov	sp, r7
 800dc78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc7c:	4770      	bx	lr
	...

0800dc80 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800dc80:	b480      	push	{r7}
 800dc82:	b085      	sub	sp, #20
 800dc84:	af00      	add	r7, sp, #0
 800dc86:	6078      	str	r0, [r7, #4]
 800dc88:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800dc8a:	687b      	ldr	r3, [r7, #4]
 800dc8c:	681b      	ldr	r3, [r3, #0]
 800dc8e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800dc90:	687b      	ldr	r3, [r7, #4]
 800dc92:	4a46      	ldr	r2, [pc, #280]	@ (800ddac <TIM_Base_SetConfig+0x12c>)
 800dc94:	4293      	cmp	r3, r2
 800dc96:	d013      	beq.n	800dcc0 <TIM_Base_SetConfig+0x40>
 800dc98:	687b      	ldr	r3, [r7, #4]
 800dc9a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800dc9e:	d00f      	beq.n	800dcc0 <TIM_Base_SetConfig+0x40>
 800dca0:	687b      	ldr	r3, [r7, #4]
 800dca2:	4a43      	ldr	r2, [pc, #268]	@ (800ddb0 <TIM_Base_SetConfig+0x130>)
 800dca4:	4293      	cmp	r3, r2
 800dca6:	d00b      	beq.n	800dcc0 <TIM_Base_SetConfig+0x40>
 800dca8:	687b      	ldr	r3, [r7, #4]
 800dcaa:	4a42      	ldr	r2, [pc, #264]	@ (800ddb4 <TIM_Base_SetConfig+0x134>)
 800dcac:	4293      	cmp	r3, r2
 800dcae:	d007      	beq.n	800dcc0 <TIM_Base_SetConfig+0x40>
 800dcb0:	687b      	ldr	r3, [r7, #4]
 800dcb2:	4a41      	ldr	r2, [pc, #260]	@ (800ddb8 <TIM_Base_SetConfig+0x138>)
 800dcb4:	4293      	cmp	r3, r2
 800dcb6:	d003      	beq.n	800dcc0 <TIM_Base_SetConfig+0x40>
 800dcb8:	687b      	ldr	r3, [r7, #4]
 800dcba:	4a40      	ldr	r2, [pc, #256]	@ (800ddbc <TIM_Base_SetConfig+0x13c>)
 800dcbc:	4293      	cmp	r3, r2
 800dcbe:	d108      	bne.n	800dcd2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800dcc0:	68fb      	ldr	r3, [r7, #12]
 800dcc2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800dcc6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800dcc8:	683b      	ldr	r3, [r7, #0]
 800dcca:	685b      	ldr	r3, [r3, #4]
 800dccc:	68fa      	ldr	r2, [r7, #12]
 800dcce:	4313      	orrs	r3, r2
 800dcd0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800dcd2:	687b      	ldr	r3, [r7, #4]
 800dcd4:	4a35      	ldr	r2, [pc, #212]	@ (800ddac <TIM_Base_SetConfig+0x12c>)
 800dcd6:	4293      	cmp	r3, r2
 800dcd8:	d02b      	beq.n	800dd32 <TIM_Base_SetConfig+0xb2>
 800dcda:	687b      	ldr	r3, [r7, #4]
 800dcdc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800dce0:	d027      	beq.n	800dd32 <TIM_Base_SetConfig+0xb2>
 800dce2:	687b      	ldr	r3, [r7, #4]
 800dce4:	4a32      	ldr	r2, [pc, #200]	@ (800ddb0 <TIM_Base_SetConfig+0x130>)
 800dce6:	4293      	cmp	r3, r2
 800dce8:	d023      	beq.n	800dd32 <TIM_Base_SetConfig+0xb2>
 800dcea:	687b      	ldr	r3, [r7, #4]
 800dcec:	4a31      	ldr	r2, [pc, #196]	@ (800ddb4 <TIM_Base_SetConfig+0x134>)
 800dcee:	4293      	cmp	r3, r2
 800dcf0:	d01f      	beq.n	800dd32 <TIM_Base_SetConfig+0xb2>
 800dcf2:	687b      	ldr	r3, [r7, #4]
 800dcf4:	4a30      	ldr	r2, [pc, #192]	@ (800ddb8 <TIM_Base_SetConfig+0x138>)
 800dcf6:	4293      	cmp	r3, r2
 800dcf8:	d01b      	beq.n	800dd32 <TIM_Base_SetConfig+0xb2>
 800dcfa:	687b      	ldr	r3, [r7, #4]
 800dcfc:	4a2f      	ldr	r2, [pc, #188]	@ (800ddbc <TIM_Base_SetConfig+0x13c>)
 800dcfe:	4293      	cmp	r3, r2
 800dd00:	d017      	beq.n	800dd32 <TIM_Base_SetConfig+0xb2>
 800dd02:	687b      	ldr	r3, [r7, #4]
 800dd04:	4a2e      	ldr	r2, [pc, #184]	@ (800ddc0 <TIM_Base_SetConfig+0x140>)
 800dd06:	4293      	cmp	r3, r2
 800dd08:	d013      	beq.n	800dd32 <TIM_Base_SetConfig+0xb2>
 800dd0a:	687b      	ldr	r3, [r7, #4]
 800dd0c:	4a2d      	ldr	r2, [pc, #180]	@ (800ddc4 <TIM_Base_SetConfig+0x144>)
 800dd0e:	4293      	cmp	r3, r2
 800dd10:	d00f      	beq.n	800dd32 <TIM_Base_SetConfig+0xb2>
 800dd12:	687b      	ldr	r3, [r7, #4]
 800dd14:	4a2c      	ldr	r2, [pc, #176]	@ (800ddc8 <TIM_Base_SetConfig+0x148>)
 800dd16:	4293      	cmp	r3, r2
 800dd18:	d00b      	beq.n	800dd32 <TIM_Base_SetConfig+0xb2>
 800dd1a:	687b      	ldr	r3, [r7, #4]
 800dd1c:	4a2b      	ldr	r2, [pc, #172]	@ (800ddcc <TIM_Base_SetConfig+0x14c>)
 800dd1e:	4293      	cmp	r3, r2
 800dd20:	d007      	beq.n	800dd32 <TIM_Base_SetConfig+0xb2>
 800dd22:	687b      	ldr	r3, [r7, #4]
 800dd24:	4a2a      	ldr	r2, [pc, #168]	@ (800ddd0 <TIM_Base_SetConfig+0x150>)
 800dd26:	4293      	cmp	r3, r2
 800dd28:	d003      	beq.n	800dd32 <TIM_Base_SetConfig+0xb2>
 800dd2a:	687b      	ldr	r3, [r7, #4]
 800dd2c:	4a29      	ldr	r2, [pc, #164]	@ (800ddd4 <TIM_Base_SetConfig+0x154>)
 800dd2e:	4293      	cmp	r3, r2
 800dd30:	d108      	bne.n	800dd44 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800dd32:	68fb      	ldr	r3, [r7, #12]
 800dd34:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800dd38:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800dd3a:	683b      	ldr	r3, [r7, #0]
 800dd3c:	68db      	ldr	r3, [r3, #12]
 800dd3e:	68fa      	ldr	r2, [r7, #12]
 800dd40:	4313      	orrs	r3, r2
 800dd42:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800dd44:	68fb      	ldr	r3, [r7, #12]
 800dd46:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800dd4a:	683b      	ldr	r3, [r7, #0]
 800dd4c:	695b      	ldr	r3, [r3, #20]
 800dd4e:	4313      	orrs	r3, r2
 800dd50:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800dd52:	687b      	ldr	r3, [r7, #4]
 800dd54:	68fa      	ldr	r2, [r7, #12]
 800dd56:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800dd58:	683b      	ldr	r3, [r7, #0]
 800dd5a:	689a      	ldr	r2, [r3, #8]
 800dd5c:	687b      	ldr	r3, [r7, #4]
 800dd5e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800dd60:	683b      	ldr	r3, [r7, #0]
 800dd62:	681a      	ldr	r2, [r3, #0]
 800dd64:	687b      	ldr	r3, [r7, #4]
 800dd66:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800dd68:	687b      	ldr	r3, [r7, #4]
 800dd6a:	4a10      	ldr	r2, [pc, #64]	@ (800ddac <TIM_Base_SetConfig+0x12c>)
 800dd6c:	4293      	cmp	r3, r2
 800dd6e:	d003      	beq.n	800dd78 <TIM_Base_SetConfig+0xf8>
 800dd70:	687b      	ldr	r3, [r7, #4]
 800dd72:	4a12      	ldr	r2, [pc, #72]	@ (800ddbc <TIM_Base_SetConfig+0x13c>)
 800dd74:	4293      	cmp	r3, r2
 800dd76:	d103      	bne.n	800dd80 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800dd78:	683b      	ldr	r3, [r7, #0]
 800dd7a:	691a      	ldr	r2, [r3, #16]
 800dd7c:	687b      	ldr	r3, [r7, #4]
 800dd7e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800dd80:	687b      	ldr	r3, [r7, #4]
 800dd82:	2201      	movs	r2, #1
 800dd84:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800dd86:	687b      	ldr	r3, [r7, #4]
 800dd88:	691b      	ldr	r3, [r3, #16]
 800dd8a:	f003 0301 	and.w	r3, r3, #1
 800dd8e:	2b01      	cmp	r3, #1
 800dd90:	d105      	bne.n	800dd9e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800dd92:	687b      	ldr	r3, [r7, #4]
 800dd94:	691b      	ldr	r3, [r3, #16]
 800dd96:	f023 0201 	bic.w	r2, r3, #1
 800dd9a:	687b      	ldr	r3, [r7, #4]
 800dd9c:	611a      	str	r2, [r3, #16]
  }
}
 800dd9e:	bf00      	nop
 800dda0:	3714      	adds	r7, #20
 800dda2:	46bd      	mov	sp, r7
 800dda4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dda8:	4770      	bx	lr
 800ddaa:	bf00      	nop
 800ddac:	40010000 	.word	0x40010000
 800ddb0:	40000400 	.word	0x40000400
 800ddb4:	40000800 	.word	0x40000800
 800ddb8:	40000c00 	.word	0x40000c00
 800ddbc:	40010400 	.word	0x40010400
 800ddc0:	40014000 	.word	0x40014000
 800ddc4:	40014400 	.word	0x40014400
 800ddc8:	40014800 	.word	0x40014800
 800ddcc:	40001800 	.word	0x40001800
 800ddd0:	40001c00 	.word	0x40001c00
 800ddd4:	40002000 	.word	0x40002000

0800ddd8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ddd8:	b480      	push	{r7}
 800ddda:	b087      	sub	sp, #28
 800dddc:	af00      	add	r7, sp, #0
 800ddde:	60f8      	str	r0, [r7, #12]
 800dde0:	60b9      	str	r1, [r7, #8]
 800dde2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800dde4:	68fb      	ldr	r3, [r7, #12]
 800dde6:	6a1b      	ldr	r3, [r3, #32]
 800dde8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ddea:	68fb      	ldr	r3, [r7, #12]
 800ddec:	6a1b      	ldr	r3, [r3, #32]
 800ddee:	f023 0201 	bic.w	r2, r3, #1
 800ddf2:	68fb      	ldr	r3, [r7, #12]
 800ddf4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ddf6:	68fb      	ldr	r3, [r7, #12]
 800ddf8:	699b      	ldr	r3, [r3, #24]
 800ddfa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800ddfc:	693b      	ldr	r3, [r7, #16]
 800ddfe:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800de02:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800de04:	687b      	ldr	r3, [r7, #4]
 800de06:	011b      	lsls	r3, r3, #4
 800de08:	693a      	ldr	r2, [r7, #16]
 800de0a:	4313      	orrs	r3, r2
 800de0c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800de0e:	697b      	ldr	r3, [r7, #20]
 800de10:	f023 030a 	bic.w	r3, r3, #10
 800de14:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800de16:	697a      	ldr	r2, [r7, #20]
 800de18:	68bb      	ldr	r3, [r7, #8]
 800de1a:	4313      	orrs	r3, r2
 800de1c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800de1e:	68fb      	ldr	r3, [r7, #12]
 800de20:	693a      	ldr	r2, [r7, #16]
 800de22:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800de24:	68fb      	ldr	r3, [r7, #12]
 800de26:	697a      	ldr	r2, [r7, #20]
 800de28:	621a      	str	r2, [r3, #32]
}
 800de2a:	bf00      	nop
 800de2c:	371c      	adds	r7, #28
 800de2e:	46bd      	mov	sp, r7
 800de30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de34:	4770      	bx	lr

0800de36 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800de36:	b480      	push	{r7}
 800de38:	b087      	sub	sp, #28
 800de3a:	af00      	add	r7, sp, #0
 800de3c:	60f8      	str	r0, [r7, #12]
 800de3e:	60b9      	str	r1, [r7, #8]
 800de40:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800de42:	68fb      	ldr	r3, [r7, #12]
 800de44:	6a1b      	ldr	r3, [r3, #32]
 800de46:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800de48:	68fb      	ldr	r3, [r7, #12]
 800de4a:	6a1b      	ldr	r3, [r3, #32]
 800de4c:	f023 0210 	bic.w	r2, r3, #16
 800de50:	68fb      	ldr	r3, [r7, #12]
 800de52:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800de54:	68fb      	ldr	r3, [r7, #12]
 800de56:	699b      	ldr	r3, [r3, #24]
 800de58:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800de5a:	693b      	ldr	r3, [r7, #16]
 800de5c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800de60:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800de62:	687b      	ldr	r3, [r7, #4]
 800de64:	031b      	lsls	r3, r3, #12
 800de66:	693a      	ldr	r2, [r7, #16]
 800de68:	4313      	orrs	r3, r2
 800de6a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800de6c:	697b      	ldr	r3, [r7, #20]
 800de6e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800de72:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800de74:	68bb      	ldr	r3, [r7, #8]
 800de76:	011b      	lsls	r3, r3, #4
 800de78:	697a      	ldr	r2, [r7, #20]
 800de7a:	4313      	orrs	r3, r2
 800de7c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800de7e:	68fb      	ldr	r3, [r7, #12]
 800de80:	693a      	ldr	r2, [r7, #16]
 800de82:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800de84:	68fb      	ldr	r3, [r7, #12]
 800de86:	697a      	ldr	r2, [r7, #20]
 800de88:	621a      	str	r2, [r3, #32]
}
 800de8a:	bf00      	nop
 800de8c:	371c      	adds	r7, #28
 800de8e:	46bd      	mov	sp, r7
 800de90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de94:	4770      	bx	lr

0800de96 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800de96:	b480      	push	{r7}
 800de98:	b085      	sub	sp, #20
 800de9a:	af00      	add	r7, sp, #0
 800de9c:	6078      	str	r0, [r7, #4]
 800de9e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800dea0:	687b      	ldr	r3, [r7, #4]
 800dea2:	689b      	ldr	r3, [r3, #8]
 800dea4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800dea6:	68fb      	ldr	r3, [r7, #12]
 800dea8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800deac:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800deae:	683a      	ldr	r2, [r7, #0]
 800deb0:	68fb      	ldr	r3, [r7, #12]
 800deb2:	4313      	orrs	r3, r2
 800deb4:	f043 0307 	orr.w	r3, r3, #7
 800deb8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800deba:	687b      	ldr	r3, [r7, #4]
 800debc:	68fa      	ldr	r2, [r7, #12]
 800debe:	609a      	str	r2, [r3, #8]
}
 800dec0:	bf00      	nop
 800dec2:	3714      	adds	r7, #20
 800dec4:	46bd      	mov	sp, r7
 800dec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800deca:	4770      	bx	lr

0800decc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800decc:	b480      	push	{r7}
 800dece:	b087      	sub	sp, #28
 800ded0:	af00      	add	r7, sp, #0
 800ded2:	60f8      	str	r0, [r7, #12]
 800ded4:	60b9      	str	r1, [r7, #8]
 800ded6:	607a      	str	r2, [r7, #4]
 800ded8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800deda:	68fb      	ldr	r3, [r7, #12]
 800dedc:	689b      	ldr	r3, [r3, #8]
 800dede:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800dee0:	697b      	ldr	r3, [r7, #20]
 800dee2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800dee6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800dee8:	683b      	ldr	r3, [r7, #0]
 800deea:	021a      	lsls	r2, r3, #8
 800deec:	687b      	ldr	r3, [r7, #4]
 800deee:	431a      	orrs	r2, r3
 800def0:	68bb      	ldr	r3, [r7, #8]
 800def2:	4313      	orrs	r3, r2
 800def4:	697a      	ldr	r2, [r7, #20]
 800def6:	4313      	orrs	r3, r2
 800def8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800defa:	68fb      	ldr	r3, [r7, #12]
 800defc:	697a      	ldr	r2, [r7, #20]
 800defe:	609a      	str	r2, [r3, #8]
}
 800df00:	bf00      	nop
 800df02:	371c      	adds	r7, #28
 800df04:	46bd      	mov	sp, r7
 800df06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df0a:	4770      	bx	lr

0800df0c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800df0c:	b480      	push	{r7}
 800df0e:	b085      	sub	sp, #20
 800df10:	af00      	add	r7, sp, #0
 800df12:	6078      	str	r0, [r7, #4]
 800df14:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800df16:	687b      	ldr	r3, [r7, #4]
 800df18:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800df1c:	2b01      	cmp	r3, #1
 800df1e:	d101      	bne.n	800df24 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800df20:	2302      	movs	r3, #2
 800df22:	e05a      	b.n	800dfda <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800df24:	687b      	ldr	r3, [r7, #4]
 800df26:	2201      	movs	r2, #1
 800df28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800df2c:	687b      	ldr	r3, [r7, #4]
 800df2e:	2202      	movs	r2, #2
 800df30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800df34:	687b      	ldr	r3, [r7, #4]
 800df36:	681b      	ldr	r3, [r3, #0]
 800df38:	685b      	ldr	r3, [r3, #4]
 800df3a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800df3c:	687b      	ldr	r3, [r7, #4]
 800df3e:	681b      	ldr	r3, [r3, #0]
 800df40:	689b      	ldr	r3, [r3, #8]
 800df42:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800df44:	68fb      	ldr	r3, [r7, #12]
 800df46:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800df4a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800df4c:	683b      	ldr	r3, [r7, #0]
 800df4e:	681b      	ldr	r3, [r3, #0]
 800df50:	68fa      	ldr	r2, [r7, #12]
 800df52:	4313      	orrs	r3, r2
 800df54:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800df56:	687b      	ldr	r3, [r7, #4]
 800df58:	681b      	ldr	r3, [r3, #0]
 800df5a:	68fa      	ldr	r2, [r7, #12]
 800df5c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800df5e:	687b      	ldr	r3, [r7, #4]
 800df60:	681b      	ldr	r3, [r3, #0]
 800df62:	4a21      	ldr	r2, [pc, #132]	@ (800dfe8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800df64:	4293      	cmp	r3, r2
 800df66:	d022      	beq.n	800dfae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800df68:	687b      	ldr	r3, [r7, #4]
 800df6a:	681b      	ldr	r3, [r3, #0]
 800df6c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800df70:	d01d      	beq.n	800dfae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800df72:	687b      	ldr	r3, [r7, #4]
 800df74:	681b      	ldr	r3, [r3, #0]
 800df76:	4a1d      	ldr	r2, [pc, #116]	@ (800dfec <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800df78:	4293      	cmp	r3, r2
 800df7a:	d018      	beq.n	800dfae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800df7c:	687b      	ldr	r3, [r7, #4]
 800df7e:	681b      	ldr	r3, [r3, #0]
 800df80:	4a1b      	ldr	r2, [pc, #108]	@ (800dff0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800df82:	4293      	cmp	r3, r2
 800df84:	d013      	beq.n	800dfae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800df86:	687b      	ldr	r3, [r7, #4]
 800df88:	681b      	ldr	r3, [r3, #0]
 800df8a:	4a1a      	ldr	r2, [pc, #104]	@ (800dff4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800df8c:	4293      	cmp	r3, r2
 800df8e:	d00e      	beq.n	800dfae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800df90:	687b      	ldr	r3, [r7, #4]
 800df92:	681b      	ldr	r3, [r3, #0]
 800df94:	4a18      	ldr	r2, [pc, #96]	@ (800dff8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800df96:	4293      	cmp	r3, r2
 800df98:	d009      	beq.n	800dfae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800df9a:	687b      	ldr	r3, [r7, #4]
 800df9c:	681b      	ldr	r3, [r3, #0]
 800df9e:	4a17      	ldr	r2, [pc, #92]	@ (800dffc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800dfa0:	4293      	cmp	r3, r2
 800dfa2:	d004      	beq.n	800dfae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800dfa4:	687b      	ldr	r3, [r7, #4]
 800dfa6:	681b      	ldr	r3, [r3, #0]
 800dfa8:	4a15      	ldr	r2, [pc, #84]	@ (800e000 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800dfaa:	4293      	cmp	r3, r2
 800dfac:	d10c      	bne.n	800dfc8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800dfae:	68bb      	ldr	r3, [r7, #8]
 800dfb0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800dfb4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800dfb6:	683b      	ldr	r3, [r7, #0]
 800dfb8:	685b      	ldr	r3, [r3, #4]
 800dfba:	68ba      	ldr	r2, [r7, #8]
 800dfbc:	4313      	orrs	r3, r2
 800dfbe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800dfc0:	687b      	ldr	r3, [r7, #4]
 800dfc2:	681b      	ldr	r3, [r3, #0]
 800dfc4:	68ba      	ldr	r2, [r7, #8]
 800dfc6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800dfc8:	687b      	ldr	r3, [r7, #4]
 800dfca:	2201      	movs	r2, #1
 800dfcc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800dfd0:	687b      	ldr	r3, [r7, #4]
 800dfd2:	2200      	movs	r2, #0
 800dfd4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800dfd8:	2300      	movs	r3, #0
}
 800dfda:	4618      	mov	r0, r3
 800dfdc:	3714      	adds	r7, #20
 800dfde:	46bd      	mov	sp, r7
 800dfe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfe4:	4770      	bx	lr
 800dfe6:	bf00      	nop
 800dfe8:	40010000 	.word	0x40010000
 800dfec:	40000400 	.word	0x40000400
 800dff0:	40000800 	.word	0x40000800
 800dff4:	40000c00 	.word	0x40000c00
 800dff8:	40010400 	.word	0x40010400
 800dffc:	40014000 	.word	0x40014000
 800e000:	40001800 	.word	0x40001800

0800e004 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800e004:	b480      	push	{r7}
 800e006:	b083      	sub	sp, #12
 800e008:	af00      	add	r7, sp, #0
 800e00a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800e00c:	bf00      	nop
 800e00e:	370c      	adds	r7, #12
 800e010:	46bd      	mov	sp, r7
 800e012:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e016:	4770      	bx	lr

0800e018 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800e018:	b480      	push	{r7}
 800e01a:	b083      	sub	sp, #12
 800e01c:	af00      	add	r7, sp, #0
 800e01e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800e020:	bf00      	nop
 800e022:	370c      	adds	r7, #12
 800e024:	46bd      	mov	sp, r7
 800e026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e02a:	4770      	bx	lr

0800e02c <memset>:
 800e02c:	4402      	add	r2, r0
 800e02e:	4603      	mov	r3, r0
 800e030:	4293      	cmp	r3, r2
 800e032:	d100      	bne.n	800e036 <memset+0xa>
 800e034:	4770      	bx	lr
 800e036:	f803 1b01 	strb.w	r1, [r3], #1
 800e03a:	e7f9      	b.n	800e030 <memset+0x4>

0800e03c <__errno>:
 800e03c:	4b01      	ldr	r3, [pc, #4]	@ (800e044 <__errno+0x8>)
 800e03e:	6818      	ldr	r0, [r3, #0]
 800e040:	4770      	bx	lr
 800e042:	bf00      	nop
 800e044:	20000010 	.word	0x20000010

0800e048 <__libc_init_array>:
 800e048:	b570      	push	{r4, r5, r6, lr}
 800e04a:	4d0d      	ldr	r5, [pc, #52]	@ (800e080 <__libc_init_array+0x38>)
 800e04c:	4c0d      	ldr	r4, [pc, #52]	@ (800e084 <__libc_init_array+0x3c>)
 800e04e:	1b64      	subs	r4, r4, r5
 800e050:	10a4      	asrs	r4, r4, #2
 800e052:	2600      	movs	r6, #0
 800e054:	42a6      	cmp	r6, r4
 800e056:	d109      	bne.n	800e06c <__libc_init_array+0x24>
 800e058:	4d0b      	ldr	r5, [pc, #44]	@ (800e088 <__libc_init_array+0x40>)
 800e05a:	4c0c      	ldr	r4, [pc, #48]	@ (800e08c <__libc_init_array+0x44>)
 800e05c:	f000 fd06 	bl	800ea6c <_init>
 800e060:	1b64      	subs	r4, r4, r5
 800e062:	10a4      	asrs	r4, r4, #2
 800e064:	2600      	movs	r6, #0
 800e066:	42a6      	cmp	r6, r4
 800e068:	d105      	bne.n	800e076 <__libc_init_array+0x2e>
 800e06a:	bd70      	pop	{r4, r5, r6, pc}
 800e06c:	f855 3b04 	ldr.w	r3, [r5], #4
 800e070:	4798      	blx	r3
 800e072:	3601      	adds	r6, #1
 800e074:	e7ee      	b.n	800e054 <__libc_init_array+0xc>
 800e076:	f855 3b04 	ldr.w	r3, [r5], #4
 800e07a:	4798      	blx	r3
 800e07c:	3601      	adds	r6, #1
 800e07e:	e7f2      	b.n	800e066 <__libc_init_array+0x1e>
 800e080:	0800eac0 	.word	0x0800eac0
 800e084:	0800eac0 	.word	0x0800eac0
 800e088:	0800eac0 	.word	0x0800eac0
 800e08c:	0800eac4 	.word	0x0800eac4

0800e090 <logf>:
 800e090:	b508      	push	{r3, lr}
 800e092:	ed2d 8b02 	vpush	{d8}
 800e096:	eeb0 8a40 	vmov.f32	s16, s0
 800e09a:	f000 f88f 	bl	800e1bc <__ieee754_logf>
 800e09e:	eeb4 8a48 	vcmp.f32	s16, s16
 800e0a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e0a6:	d60f      	bvs.n	800e0c8 <logf+0x38>
 800e0a8:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800e0ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e0b0:	dc0a      	bgt.n	800e0c8 <logf+0x38>
 800e0b2:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800e0b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e0ba:	d108      	bne.n	800e0ce <logf+0x3e>
 800e0bc:	f7ff ffbe 	bl	800e03c <__errno>
 800e0c0:	2322      	movs	r3, #34	@ 0x22
 800e0c2:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 800e0e4 <logf+0x54>
 800e0c6:	6003      	str	r3, [r0, #0]
 800e0c8:	ecbd 8b02 	vpop	{d8}
 800e0cc:	bd08      	pop	{r3, pc}
 800e0ce:	f7ff ffb5 	bl	800e03c <__errno>
 800e0d2:	ecbd 8b02 	vpop	{d8}
 800e0d6:	2321      	movs	r3, #33	@ 0x21
 800e0d8:	6003      	str	r3, [r0, #0]
 800e0da:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800e0de:	4802      	ldr	r0, [pc, #8]	@ (800e0e8 <logf+0x58>)
 800e0e0:	f000 b866 	b.w	800e1b0 <nanf>
 800e0e4:	ff800000 	.word	0xff800000
 800e0e8:	0800ea9d 	.word	0x0800ea9d

0800e0ec <powf>:
 800e0ec:	b508      	push	{r3, lr}
 800e0ee:	ed2d 8b04 	vpush	{d8-d9}
 800e0f2:	eeb0 8a60 	vmov.f32	s16, s1
 800e0f6:	eeb0 9a40 	vmov.f32	s18, s0
 800e0fa:	f000 f951 	bl	800e3a0 <__ieee754_powf>
 800e0fe:	eeb4 8a48 	vcmp.f32	s16, s16
 800e102:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e106:	eef0 8a40 	vmov.f32	s17, s0
 800e10a:	d63e      	bvs.n	800e18a <powf+0x9e>
 800e10c:	eeb5 9a40 	vcmp.f32	s18, #0.0
 800e110:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e114:	d112      	bne.n	800e13c <powf+0x50>
 800e116:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800e11a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e11e:	d039      	beq.n	800e194 <powf+0xa8>
 800e120:	eeb0 0a48 	vmov.f32	s0, s16
 800e124:	f000 f839 	bl	800e19a <finitef>
 800e128:	b378      	cbz	r0, 800e18a <powf+0x9e>
 800e12a:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800e12e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e132:	d52a      	bpl.n	800e18a <powf+0x9e>
 800e134:	f7ff ff82 	bl	800e03c <__errno>
 800e138:	2322      	movs	r3, #34	@ 0x22
 800e13a:	e014      	b.n	800e166 <powf+0x7a>
 800e13c:	f000 f82d 	bl	800e19a <finitef>
 800e140:	b998      	cbnz	r0, 800e16a <powf+0x7e>
 800e142:	eeb0 0a49 	vmov.f32	s0, s18
 800e146:	f000 f828 	bl	800e19a <finitef>
 800e14a:	b170      	cbz	r0, 800e16a <powf+0x7e>
 800e14c:	eeb0 0a48 	vmov.f32	s0, s16
 800e150:	f000 f823 	bl	800e19a <finitef>
 800e154:	b148      	cbz	r0, 800e16a <powf+0x7e>
 800e156:	eef4 8a68 	vcmp.f32	s17, s17
 800e15a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e15e:	d7e9      	bvc.n	800e134 <powf+0x48>
 800e160:	f7ff ff6c 	bl	800e03c <__errno>
 800e164:	2321      	movs	r3, #33	@ 0x21
 800e166:	6003      	str	r3, [r0, #0]
 800e168:	e00f      	b.n	800e18a <powf+0x9e>
 800e16a:	eef5 8a40 	vcmp.f32	s17, #0.0
 800e16e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e172:	d10a      	bne.n	800e18a <powf+0x9e>
 800e174:	eeb0 0a49 	vmov.f32	s0, s18
 800e178:	f000 f80f 	bl	800e19a <finitef>
 800e17c:	b128      	cbz	r0, 800e18a <powf+0x9e>
 800e17e:	eeb0 0a48 	vmov.f32	s0, s16
 800e182:	f000 f80a 	bl	800e19a <finitef>
 800e186:	2800      	cmp	r0, #0
 800e188:	d1d4      	bne.n	800e134 <powf+0x48>
 800e18a:	eeb0 0a68 	vmov.f32	s0, s17
 800e18e:	ecbd 8b04 	vpop	{d8-d9}
 800e192:	bd08      	pop	{r3, pc}
 800e194:	eef7 8a00 	vmov.f32	s17, #112	@ 0x3f800000  1.0
 800e198:	e7f7      	b.n	800e18a <powf+0x9e>

0800e19a <finitef>:
 800e19a:	ee10 3a10 	vmov	r3, s0
 800e19e:	f023 4000 	bic.w	r0, r3, #2147483648	@ 0x80000000
 800e1a2:	f1b0 4fff 	cmp.w	r0, #2139095040	@ 0x7f800000
 800e1a6:	bfac      	ite	ge
 800e1a8:	2000      	movge	r0, #0
 800e1aa:	2001      	movlt	r0, #1
 800e1ac:	4770      	bx	lr
	...

0800e1b0 <nanf>:
 800e1b0:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800e1b8 <nanf+0x8>
 800e1b4:	4770      	bx	lr
 800e1b6:	bf00      	nop
 800e1b8:	7fc00000 	.word	0x7fc00000

0800e1bc <__ieee754_logf>:
 800e1bc:	ee10 3a10 	vmov	r3, s0
 800e1c0:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 800e1c4:	d106      	bne.n	800e1d4 <__ieee754_logf+0x18>
 800e1c6:	ed9f 7a66 	vldr	s14, [pc, #408]	@ 800e360 <__ieee754_logf+0x1a4>
 800e1ca:	eddf 7a66 	vldr	s15, [pc, #408]	@ 800e364 <__ieee754_logf+0x1a8>
 800e1ce:	ee87 0a27 	vdiv.f32	s0, s14, s15
 800e1d2:	4770      	bx	lr
 800e1d4:	2b00      	cmp	r3, #0
 800e1d6:	461a      	mov	r2, r3
 800e1d8:	da02      	bge.n	800e1e0 <__ieee754_logf+0x24>
 800e1da:	ee30 7a40 	vsub.f32	s14, s0, s0
 800e1de:	e7f4      	b.n	800e1ca <__ieee754_logf+0xe>
 800e1e0:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800e1e4:	db02      	blt.n	800e1ec <__ieee754_logf+0x30>
 800e1e6:	ee30 0a00 	vadd.f32	s0, s0, s0
 800e1ea:	4770      	bx	lr
 800e1ec:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800e1f0:	bfb8      	it	lt
 800e1f2:	eddf 7a5d 	vldrlt	s15, [pc, #372]	@ 800e368 <__ieee754_logf+0x1ac>
 800e1f6:	485d      	ldr	r0, [pc, #372]	@ (800e36c <__ieee754_logf+0x1b0>)
 800e1f8:	bfbe      	ittt	lt
 800e1fa:	ee60 7a27 	vmullt.f32	s15, s0, s15
 800e1fe:	f06f 0118 	mvnlt.w	r1, #24
 800e202:	ee17 2a90 	vmovlt	r2, s15
 800e206:	ea4f 53e2 	mov.w	r3, r2, asr #23
 800e20a:	f3c2 0216 	ubfx	r2, r2, #0, #23
 800e20e:	4410      	add	r0, r2
 800e210:	bfa8      	it	ge
 800e212:	2100      	movge	r1, #0
 800e214:	3b7f      	subs	r3, #127	@ 0x7f
 800e216:	440b      	add	r3, r1
 800e218:	f400 0100 	and.w	r1, r0, #8388608	@ 0x800000
 800e21c:	f081 517e 	eor.w	r1, r1, #1065353216	@ 0x3f800000
 800e220:	4311      	orrs	r1, r2
 800e222:	ee00 1a10 	vmov	s0, r1
 800e226:	4952      	ldr	r1, [pc, #328]	@ (800e370 <__ieee754_logf+0x1b4>)
 800e228:	eb03 53d0 	add.w	r3, r3, r0, lsr #23
 800e22c:	f102 000f 	add.w	r0, r2, #15
 800e230:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800e234:	4001      	ands	r1, r0
 800e236:	ee30 0a67 	vsub.f32	s0, s0, s15
 800e23a:	bb89      	cbnz	r1, 800e2a0 <__ieee754_logf+0xe4>
 800e23c:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800e240:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e244:	d10f      	bne.n	800e266 <__ieee754_logf+0xaa>
 800e246:	2b00      	cmp	r3, #0
 800e248:	f000 8087 	beq.w	800e35a <__ieee754_logf+0x19e>
 800e24c:	ee07 3a90 	vmov	s15, r3
 800e250:	ed9f 0a48 	vldr	s0, [pc, #288]	@ 800e374 <__ieee754_logf+0x1b8>
 800e254:	ed9f 7a48 	vldr	s14, [pc, #288]	@ 800e378 <__ieee754_logf+0x1bc>
 800e258:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e25c:	ee27 0a80 	vmul.f32	s0, s15, s0
 800e260:	eea7 0a87 	vfma.f32	s0, s15, s14
 800e264:	4770      	bx	lr
 800e266:	eddf 6a45 	vldr	s13, [pc, #276]	@ 800e37c <__ieee754_logf+0x1c0>
 800e26a:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800e26e:	eee0 7a66 	vfms.f32	s15, s0, s13
 800e272:	ee20 7a00 	vmul.f32	s14, s0, s0
 800e276:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e27a:	b913      	cbnz	r3, 800e282 <__ieee754_logf+0xc6>
 800e27c:	ee30 0a47 	vsub.f32	s0, s0, s14
 800e280:	4770      	bx	lr
 800e282:	ee07 3a90 	vmov	s15, r3
 800e286:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 800e374 <__ieee754_logf+0x1b8>
 800e28a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e28e:	eea7 7ae6 	vfms.f32	s14, s15, s13
 800e292:	ee37 0a40 	vsub.f32	s0, s14, s0
 800e296:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 800e378 <__ieee754_logf+0x1bc>
 800e29a:	ee97 0a87 	vfnms.f32	s0, s15, s14
 800e29e:	4770      	bx	lr
 800e2a0:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 800e2a4:	ee70 7a27 	vadd.f32	s15, s0, s15
 800e2a8:	eddf 5a35 	vldr	s11, [pc, #212]	@ 800e380 <__ieee754_logf+0x1c4>
 800e2ac:	eddf 4a35 	vldr	s9, [pc, #212]	@ 800e384 <__ieee754_logf+0x1c8>
 800e2b0:	4935      	ldr	r1, [pc, #212]	@ (800e388 <__ieee754_logf+0x1cc>)
 800e2b2:	ee80 6a27 	vdiv.f32	s12, s0, s15
 800e2b6:	4411      	add	r1, r2
 800e2b8:	f5c2 1257 	rsb	r2, r2, #3522560	@ 0x35c000
 800e2bc:	f502 7222 	add.w	r2, r2, #648	@ 0x288
 800e2c0:	430a      	orrs	r2, r1
 800e2c2:	2a00      	cmp	r2, #0
 800e2c4:	ee07 3a90 	vmov	s15, r3
 800e2c8:	ee26 5a06 	vmul.f32	s10, s12, s12
 800e2cc:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800e2d0:	ee25 7a05 	vmul.f32	s14, s10, s10
 800e2d4:	eddf 7a2d 	vldr	s15, [pc, #180]	@ 800e38c <__ieee754_logf+0x1d0>
 800e2d8:	eee7 7a25 	vfma.f32	s15, s14, s11
 800e2dc:	eddf 5a2c 	vldr	s11, [pc, #176]	@ 800e390 <__ieee754_logf+0x1d4>
 800e2e0:	eee7 5a87 	vfma.f32	s11, s15, s14
 800e2e4:	eddf 7a2b 	vldr	s15, [pc, #172]	@ 800e394 <__ieee754_logf+0x1d8>
 800e2e8:	eee7 7a24 	vfma.f32	s15, s14, s9
 800e2ec:	eddf 4a2a 	vldr	s9, [pc, #168]	@ 800e398 <__ieee754_logf+0x1dc>
 800e2f0:	eee7 4a87 	vfma.f32	s9, s15, s14
 800e2f4:	eddf 7a29 	vldr	s15, [pc, #164]	@ 800e39c <__ieee754_logf+0x1e0>
 800e2f8:	eee4 7a87 	vfma.f32	s15, s9, s14
 800e2fc:	ee67 7a85 	vmul.f32	s15, s15, s10
 800e300:	eee5 7a87 	vfma.f32	s15, s11, s14
 800e304:	dd1a      	ble.n	800e33c <__ieee754_logf+0x180>
 800e306:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800e30a:	ee20 7a07 	vmul.f32	s14, s0, s14
 800e30e:	ee27 7a00 	vmul.f32	s14, s14, s0
 800e312:	ee77 7a87 	vadd.f32	s15, s15, s14
 800e316:	ee67 7a86 	vmul.f32	s15, s15, s12
 800e31a:	b913      	cbnz	r3, 800e322 <__ieee754_logf+0x166>
 800e31c:	ee37 7a67 	vsub.f32	s14, s14, s15
 800e320:	e7ac      	b.n	800e27c <__ieee754_logf+0xc0>
 800e322:	ed9f 6a14 	vldr	s12, [pc, #80]	@ 800e374 <__ieee754_logf+0x1b8>
 800e326:	eee6 7a86 	vfma.f32	s15, s13, s12
 800e32a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800e32e:	ee37 0a40 	vsub.f32	s0, s14, s0
 800e332:	eddf 7a11 	vldr	s15, [pc, #68]	@ 800e378 <__ieee754_logf+0x1bc>
 800e336:	ee96 0aa7 	vfnms.f32	s0, s13, s15
 800e33a:	4770      	bx	lr
 800e33c:	ee70 7a67 	vsub.f32	s15, s0, s15
 800e340:	ee67 7a86 	vmul.f32	s15, s15, s12
 800e344:	b913      	cbnz	r3, 800e34c <__ieee754_logf+0x190>
 800e346:	ee30 0a67 	vsub.f32	s0, s0, s15
 800e34a:	4770      	bx	lr
 800e34c:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 800e374 <__ieee754_logf+0x1b8>
 800e350:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800e354:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800e358:	e7eb      	b.n	800e332 <__ieee754_logf+0x176>
 800e35a:	ed9f 0a02 	vldr	s0, [pc, #8]	@ 800e364 <__ieee754_logf+0x1a8>
 800e35e:	4770      	bx	lr
 800e360:	cc000000 	.word	0xcc000000
 800e364:	00000000 	.word	0x00000000
 800e368:	4c000000 	.word	0x4c000000
 800e36c:	004afb20 	.word	0x004afb20
 800e370:	007ffff0 	.word	0x007ffff0
 800e374:	3717f7d1 	.word	0x3717f7d1
 800e378:	3f317180 	.word	0x3f317180
 800e37c:	3eaaaaab 	.word	0x3eaaaaab
 800e380:	3e1cd04f 	.word	0x3e1cd04f
 800e384:	3e178897 	.word	0x3e178897
 800e388:	ffcf5c30 	.word	0xffcf5c30
 800e38c:	3e638e29 	.word	0x3e638e29
 800e390:	3ecccccd 	.word	0x3ecccccd
 800e394:	3e3a3325 	.word	0x3e3a3325
 800e398:	3e924925 	.word	0x3e924925
 800e39c:	3f2aaaab 	.word	0x3f2aaaab

0800e3a0 <__ieee754_powf>:
 800e3a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e3a4:	ee10 4a90 	vmov	r4, s1
 800e3a8:	f034 4900 	bics.w	r9, r4, #2147483648	@ 0x80000000
 800e3ac:	ed2d 8b02 	vpush	{d8}
 800e3b0:	ee10 6a10 	vmov	r6, s0
 800e3b4:	eeb0 8a40 	vmov.f32	s16, s0
 800e3b8:	eef0 8a60 	vmov.f32	s17, s1
 800e3bc:	d10c      	bne.n	800e3d8 <__ieee754_powf+0x38>
 800e3be:	f486 0680 	eor.w	r6, r6, #4194304	@ 0x400000
 800e3c2:	0076      	lsls	r6, r6, #1
 800e3c4:	f516 0f00 	cmn.w	r6, #8388608	@ 0x800000
 800e3c8:	f240 8274 	bls.w	800e8b4 <__ieee754_powf+0x514>
 800e3cc:	ee38 0a28 	vadd.f32	s0, s16, s17
 800e3d0:	ecbd 8b02 	vpop	{d8}
 800e3d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e3d8:	f026 4800 	bic.w	r8, r6, #2147483648	@ 0x80000000
 800e3dc:	f1b8 4fff 	cmp.w	r8, #2139095040	@ 0x7f800000
 800e3e0:	d802      	bhi.n	800e3e8 <__ieee754_powf+0x48>
 800e3e2:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 800e3e6:	d908      	bls.n	800e3fa <__ieee754_powf+0x5a>
 800e3e8:	f1b6 5f7e 	cmp.w	r6, #1065353216	@ 0x3f800000
 800e3ec:	d1ee      	bne.n	800e3cc <__ieee754_powf+0x2c>
 800e3ee:	f484 0480 	eor.w	r4, r4, #4194304	@ 0x400000
 800e3f2:	0064      	lsls	r4, r4, #1
 800e3f4:	f514 0f00 	cmn.w	r4, #8388608	@ 0x800000
 800e3f8:	e7e6      	b.n	800e3c8 <__ieee754_powf+0x28>
 800e3fa:	2e00      	cmp	r6, #0
 800e3fc:	da1f      	bge.n	800e43e <__ieee754_powf+0x9e>
 800e3fe:	f1b9 4f97 	cmp.w	r9, #1266679808	@ 0x4b800000
 800e402:	f080 8260 	bcs.w	800e8c6 <__ieee754_powf+0x526>
 800e406:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 800e40a:	d32f      	bcc.n	800e46c <__ieee754_powf+0xcc>
 800e40c:	ea4f 53e9 	mov.w	r3, r9, asr #23
 800e410:	f1c3 0396 	rsb	r3, r3, #150	@ 0x96
 800e414:	fa49 f503 	asr.w	r5, r9, r3
 800e418:	fa05 f303 	lsl.w	r3, r5, r3
 800e41c:	454b      	cmp	r3, r9
 800e41e:	d123      	bne.n	800e468 <__ieee754_powf+0xc8>
 800e420:	f005 0501 	and.w	r5, r5, #1
 800e424:	f1c5 0502 	rsb	r5, r5, #2
 800e428:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 800e42c:	d11f      	bne.n	800e46e <__ieee754_powf+0xce>
 800e42e:	2c00      	cmp	r4, #0
 800e430:	f280 8246 	bge.w	800e8c0 <__ieee754_powf+0x520>
 800e434:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800e438:	ee87 0a88 	vdiv.f32	s0, s15, s16
 800e43c:	e7c8      	b.n	800e3d0 <__ieee754_powf+0x30>
 800e43e:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 800e442:	d111      	bne.n	800e468 <__ieee754_powf+0xc8>
 800e444:	f1b8 5f7e 	cmp.w	r8, #1065353216	@ 0x3f800000
 800e448:	f000 8234 	beq.w	800e8b4 <__ieee754_powf+0x514>
 800e44c:	d906      	bls.n	800e45c <__ieee754_powf+0xbc>
 800e44e:	ed9f 0ac5 	vldr	s0, [pc, #788]	@ 800e764 <__ieee754_powf+0x3c4>
 800e452:	2c00      	cmp	r4, #0
 800e454:	bfa8      	it	ge
 800e456:	eeb0 0a68 	vmovge.f32	s0, s17
 800e45a:	e7b9      	b.n	800e3d0 <__ieee754_powf+0x30>
 800e45c:	2c00      	cmp	r4, #0
 800e45e:	f280 822c 	bge.w	800e8ba <__ieee754_powf+0x51a>
 800e462:	eeb1 0a68 	vneg.f32	s0, s17
 800e466:	e7b3      	b.n	800e3d0 <__ieee754_powf+0x30>
 800e468:	2500      	movs	r5, #0
 800e46a:	e7dd      	b.n	800e428 <__ieee754_powf+0x88>
 800e46c:	2500      	movs	r5, #0
 800e46e:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 800e472:	d102      	bne.n	800e47a <__ieee754_powf+0xda>
 800e474:	ee28 0a08 	vmul.f32	s0, s16, s16
 800e478:	e7aa      	b.n	800e3d0 <__ieee754_powf+0x30>
 800e47a:	f1b4 5f7c 	cmp.w	r4, #1056964608	@ 0x3f000000
 800e47e:	f040 8227 	bne.w	800e8d0 <__ieee754_powf+0x530>
 800e482:	2e00      	cmp	r6, #0
 800e484:	f2c0 8224 	blt.w	800e8d0 <__ieee754_powf+0x530>
 800e488:	eeb0 0a48 	vmov.f32	s0, s16
 800e48c:	ecbd 8b02 	vpop	{d8}
 800e490:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e494:	f000 bae6 	b.w	800ea64 <__ieee754_sqrtf>
 800e498:	2d01      	cmp	r5, #1
 800e49a:	d199      	bne.n	800e3d0 <__ieee754_powf+0x30>
 800e49c:	eeb1 0a40 	vneg.f32	s0, s0
 800e4a0:	e796      	b.n	800e3d0 <__ieee754_powf+0x30>
 800e4a2:	0ff0      	lsrs	r0, r6, #31
 800e4a4:	3801      	subs	r0, #1
 800e4a6:	ea55 0300 	orrs.w	r3, r5, r0
 800e4aa:	d104      	bne.n	800e4b6 <__ieee754_powf+0x116>
 800e4ac:	ee38 8a48 	vsub.f32	s16, s16, s16
 800e4b0:	ee88 0a08 	vdiv.f32	s0, s16, s16
 800e4b4:	e78c      	b.n	800e3d0 <__ieee754_powf+0x30>
 800e4b6:	f1b9 4f9a 	cmp.w	r9, #1291845632	@ 0x4d000000
 800e4ba:	d96d      	bls.n	800e598 <__ieee754_powf+0x1f8>
 800e4bc:	4baa      	ldr	r3, [pc, #680]	@ (800e768 <__ieee754_powf+0x3c8>)
 800e4be:	4598      	cmp	r8, r3
 800e4c0:	d808      	bhi.n	800e4d4 <__ieee754_powf+0x134>
 800e4c2:	2c00      	cmp	r4, #0
 800e4c4:	da0b      	bge.n	800e4de <__ieee754_powf+0x13e>
 800e4c6:	2000      	movs	r0, #0
 800e4c8:	ecbd 8b02 	vpop	{d8}
 800e4cc:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e4d0:	f000 bac2 	b.w	800ea58 <__math_oflowf>
 800e4d4:	4ba5      	ldr	r3, [pc, #660]	@ (800e76c <__ieee754_powf+0x3cc>)
 800e4d6:	4598      	cmp	r8, r3
 800e4d8:	d908      	bls.n	800e4ec <__ieee754_powf+0x14c>
 800e4da:	2c00      	cmp	r4, #0
 800e4dc:	dcf3      	bgt.n	800e4c6 <__ieee754_powf+0x126>
 800e4de:	2000      	movs	r0, #0
 800e4e0:	ecbd 8b02 	vpop	{d8}
 800e4e4:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e4e8:	f000 bab0 	b.w	800ea4c <__math_uflowf>
 800e4ec:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800e4f0:	ee30 0a67 	vsub.f32	s0, s0, s15
 800e4f4:	eddf 6a9e 	vldr	s13, [pc, #632]	@ 800e770 <__ieee754_powf+0x3d0>
 800e4f8:	eef5 7a00 	vmov.f32	s15, #80	@ 0x3e800000  0.250
 800e4fc:	eee0 6a67 	vfms.f32	s13, s0, s15
 800e500:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800e504:	eee6 7ac0 	vfms.f32	s15, s13, s0
 800e508:	ee20 7a00 	vmul.f32	s14, s0, s0
 800e50c:	eddf 6a99 	vldr	s13, [pc, #612]	@ 800e774 <__ieee754_powf+0x3d4>
 800e510:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e514:	eddf 7a98 	vldr	s15, [pc, #608]	@ 800e778 <__ieee754_powf+0x3d8>
 800e518:	ee67 7ac7 	vnmul.f32	s15, s15, s14
 800e51c:	ed9f 7a97 	vldr	s14, [pc, #604]	@ 800e77c <__ieee754_powf+0x3dc>
 800e520:	eee0 7a07 	vfma.f32	s15, s0, s14
 800e524:	eeb0 7a67 	vmov.f32	s14, s15
 800e528:	eea0 7a26 	vfma.f32	s14, s0, s13
 800e52c:	ee17 3a10 	vmov	r3, s14
 800e530:	f36f 030b 	bfc	r3, #0, #12
 800e534:	ee07 3a10 	vmov	s14, r3
 800e538:	eeb0 6a47 	vmov.f32	s12, s14
 800e53c:	eea0 6a66 	vfms.f32	s12, s0, s13
 800e540:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800e544:	3d01      	subs	r5, #1
 800e546:	4305      	orrs	r5, r0
 800e548:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800e54c:	eebf 8a00 	vmov.f32	s16, #240	@ 0xbf800000 -1.0
 800e550:	f36f 040b 	bfc	r4, #0, #12
 800e554:	bf18      	it	ne
 800e556:	eeb0 8a66 	vmovne.f32	s16, s13
 800e55a:	ee06 4a90 	vmov	s13, r4
 800e55e:	ee67 0aa8 	vmul.f32	s1, s15, s17
 800e562:	ee38 6ae6 	vsub.f32	s12, s17, s13
 800e566:	ee67 7a26 	vmul.f32	s15, s14, s13
 800e56a:	eee6 0a07 	vfma.f32	s1, s12, s14
 800e56e:	ee30 7aa7 	vadd.f32	s14, s1, s15
 800e572:	ee17 1a10 	vmov	r1, s14
 800e576:	2900      	cmp	r1, #0
 800e578:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800e57c:	f340 80dd 	ble.w	800e73a <__ieee754_powf+0x39a>
 800e580:	f1b3 4f86 	cmp.w	r3, #1124073472	@ 0x43000000
 800e584:	f240 80ca 	bls.w	800e71c <__ieee754_powf+0x37c>
 800e588:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800e58c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e590:	bf4c      	ite	mi
 800e592:	2001      	movmi	r0, #1
 800e594:	2000      	movpl	r0, #0
 800e596:	e797      	b.n	800e4c8 <__ieee754_powf+0x128>
 800e598:	f016 4fff 	tst.w	r6, #2139095040	@ 0x7f800000
 800e59c:	bf01      	itttt	eq
 800e59e:	eddf 7a78 	vldreq	s15, [pc, #480]	@ 800e780 <__ieee754_powf+0x3e0>
 800e5a2:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 800e5a6:	f06f 0317 	mvneq.w	r3, #23
 800e5aa:	ee17 7a90 	vmoveq	r7, s15
 800e5ae:	ea4f 52e7 	mov.w	r2, r7, asr #23
 800e5b2:	bf18      	it	ne
 800e5b4:	2300      	movne	r3, #0
 800e5b6:	3a7f      	subs	r2, #127	@ 0x7f
 800e5b8:	441a      	add	r2, r3
 800e5ba:	4b72      	ldr	r3, [pc, #456]	@ (800e784 <__ieee754_powf+0x3e4>)
 800e5bc:	f3c7 0716 	ubfx	r7, r7, #0, #23
 800e5c0:	429f      	cmp	r7, r3
 800e5c2:	f047 517e 	orr.w	r1, r7, #1065353216	@ 0x3f800000
 800e5c6:	dd06      	ble.n	800e5d6 <__ieee754_powf+0x236>
 800e5c8:	4b6f      	ldr	r3, [pc, #444]	@ (800e788 <__ieee754_powf+0x3e8>)
 800e5ca:	429f      	cmp	r7, r3
 800e5cc:	f340 80a4 	ble.w	800e718 <__ieee754_powf+0x378>
 800e5d0:	3201      	adds	r2, #1
 800e5d2:	f5a1 0100 	sub.w	r1, r1, #8388608	@ 0x800000
 800e5d6:	2600      	movs	r6, #0
 800e5d8:	4b6c      	ldr	r3, [pc, #432]	@ (800e78c <__ieee754_powf+0x3ec>)
 800e5da:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 800e5de:	ee07 1a10 	vmov	s14, r1
 800e5e2:	edd3 5a00 	vldr	s11, [r3]
 800e5e6:	4b6a      	ldr	r3, [pc, #424]	@ (800e790 <__ieee754_powf+0x3f0>)
 800e5e8:	ee75 7a87 	vadd.f32	s15, s11, s14
 800e5ec:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800e5f0:	eec6 4aa7 	vdiv.f32	s9, s13, s15
 800e5f4:	1049      	asrs	r1, r1, #1
 800e5f6:	f041 5100 	orr.w	r1, r1, #536870912	@ 0x20000000
 800e5fa:	f501 2180 	add.w	r1, r1, #262144	@ 0x40000
 800e5fe:	eb01 5146 	add.w	r1, r1, r6, lsl #21
 800e602:	ee37 6a65 	vsub.f32	s12, s14, s11
 800e606:	ee07 1a90 	vmov	s15, r1
 800e60a:	ee26 5a24 	vmul.f32	s10, s12, s9
 800e60e:	ee77 5ae5 	vsub.f32	s11, s15, s11
 800e612:	ee15 7a10 	vmov	r7, s10
 800e616:	401f      	ands	r7, r3
 800e618:	ee06 7a90 	vmov	s13, r7
 800e61c:	eea6 6ae7 	vfms.f32	s12, s13, s15
 800e620:	ee37 7a65 	vsub.f32	s14, s14, s11
 800e624:	ee65 7a05 	vmul.f32	s15, s10, s10
 800e628:	eea6 6ac7 	vfms.f32	s12, s13, s14
 800e62c:	eddf 5a59 	vldr	s11, [pc, #356]	@ 800e794 <__ieee754_powf+0x3f4>
 800e630:	ed9f 7a59 	vldr	s14, [pc, #356]	@ 800e798 <__ieee754_powf+0x3f8>
 800e634:	eee7 5a87 	vfma.f32	s11, s15, s14
 800e638:	ed9f 7a58 	vldr	s14, [pc, #352]	@ 800e79c <__ieee754_powf+0x3fc>
 800e63c:	eea5 7aa7 	vfma.f32	s14, s11, s15
 800e640:	eddf 5a4b 	vldr	s11, [pc, #300]	@ 800e770 <__ieee754_powf+0x3d0>
 800e644:	eee7 5a27 	vfma.f32	s11, s14, s15
 800e648:	ed9f 7a55 	vldr	s14, [pc, #340]	@ 800e7a0 <__ieee754_powf+0x400>
 800e64c:	eea5 7aa7 	vfma.f32	s14, s11, s15
 800e650:	eddf 5a54 	vldr	s11, [pc, #336]	@ 800e7a4 <__ieee754_powf+0x404>
 800e654:	ee26 6a24 	vmul.f32	s12, s12, s9
 800e658:	eee7 5a27 	vfma.f32	s11, s14, s15
 800e65c:	ee35 7a26 	vadd.f32	s14, s10, s13
 800e660:	ee67 4aa7 	vmul.f32	s9, s15, s15
 800e664:	ee27 7a06 	vmul.f32	s14, s14, s12
 800e668:	eef0 7a08 	vmov.f32	s15, #8	@ 0x40400000  3.0
 800e66c:	eea4 7aa5 	vfma.f32	s14, s9, s11
 800e670:	eef0 5a67 	vmov.f32	s11, s15
 800e674:	eee6 5aa6 	vfma.f32	s11, s13, s13
 800e678:	ee75 5a87 	vadd.f32	s11, s11, s14
 800e67c:	ee15 1a90 	vmov	r1, s11
 800e680:	4019      	ands	r1, r3
 800e682:	ee05 1a90 	vmov	s11, r1
 800e686:	ee75 7ae7 	vsub.f32	s15, s11, s15
 800e68a:	eee6 7ae6 	vfms.f32	s15, s13, s13
 800e68e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800e692:	ee67 7a85 	vmul.f32	s15, s15, s10
 800e696:	eee6 7a25 	vfma.f32	s15, s12, s11
 800e69a:	eeb0 6a67 	vmov.f32	s12, s15
 800e69e:	eea6 6aa5 	vfma.f32	s12, s13, s11
 800e6a2:	ee16 1a10 	vmov	r1, s12
 800e6a6:	4019      	ands	r1, r3
 800e6a8:	ee06 1a10 	vmov	s12, r1
 800e6ac:	eeb0 7a46 	vmov.f32	s14, s12
 800e6b0:	eea6 7ae5 	vfms.f32	s14, s13, s11
 800e6b4:	493c      	ldr	r1, [pc, #240]	@ (800e7a8 <__ieee754_powf+0x408>)
 800e6b6:	eb01 0186 	add.w	r1, r1, r6, lsl #2
 800e6ba:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800e6be:	ed9f 7a3b 	vldr	s14, [pc, #236]	@ 800e7ac <__ieee754_powf+0x40c>
 800e6c2:	eddf 5a3b 	vldr	s11, [pc, #236]	@ 800e7b0 <__ieee754_powf+0x410>
 800e6c6:	ee67 7a87 	vmul.f32	s15, s15, s14
 800e6ca:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 800e7b4 <__ieee754_powf+0x414>
 800e6ce:	eee6 7a07 	vfma.f32	s15, s12, s14
 800e6d2:	ed91 7a00 	vldr	s14, [r1]
 800e6d6:	ee77 7a87 	vadd.f32	s15, s15, s14
 800e6da:	ee07 2a10 	vmov	s14, r2
 800e6de:	4a36      	ldr	r2, [pc, #216]	@ (800e7b8 <__ieee754_powf+0x418>)
 800e6e0:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 800e6e4:	eeb0 7a67 	vmov.f32	s14, s15
 800e6e8:	eea6 7a25 	vfma.f32	s14, s12, s11
 800e6ec:	eb02 0286 	add.w	r2, r2, r6, lsl #2
 800e6f0:	ed92 5a00 	vldr	s10, [r2]
 800e6f4:	ee37 7a05 	vadd.f32	s14, s14, s10
 800e6f8:	ee37 7a26 	vadd.f32	s14, s14, s13
 800e6fc:	ee17 2a10 	vmov	r2, s14
 800e700:	401a      	ands	r2, r3
 800e702:	ee07 2a10 	vmov	s14, r2
 800e706:	ee77 6a66 	vsub.f32	s13, s14, s13
 800e70a:	ee76 6ac5 	vsub.f32	s13, s13, s10
 800e70e:	eee6 6a65 	vfms.f32	s13, s12, s11
 800e712:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800e716:	e715      	b.n	800e544 <__ieee754_powf+0x1a4>
 800e718:	2601      	movs	r6, #1
 800e71a:	e75d      	b.n	800e5d8 <__ieee754_powf+0x238>
 800e71c:	d152      	bne.n	800e7c4 <__ieee754_powf+0x424>
 800e71e:	eddf 6a27 	vldr	s13, [pc, #156]	@ 800e7bc <__ieee754_powf+0x41c>
 800e722:	ee37 7a67 	vsub.f32	s14, s14, s15
 800e726:	ee70 6aa6 	vadd.f32	s13, s1, s13
 800e72a:	eef4 6ac7 	vcmpe.f32	s13, s14
 800e72e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e732:	f73f af29 	bgt.w	800e588 <__ieee754_powf+0x1e8>
 800e736:	2386      	movs	r3, #134	@ 0x86
 800e738:	e048      	b.n	800e7cc <__ieee754_powf+0x42c>
 800e73a:	4a21      	ldr	r2, [pc, #132]	@ (800e7c0 <__ieee754_powf+0x420>)
 800e73c:	4293      	cmp	r3, r2
 800e73e:	d907      	bls.n	800e750 <__ieee754_powf+0x3b0>
 800e740:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800e744:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e748:	bf4c      	ite	mi
 800e74a:	2001      	movmi	r0, #1
 800e74c:	2000      	movpl	r0, #0
 800e74e:	e6c7      	b.n	800e4e0 <__ieee754_powf+0x140>
 800e750:	d138      	bne.n	800e7c4 <__ieee754_powf+0x424>
 800e752:	ee37 7a67 	vsub.f32	s14, s14, s15
 800e756:	eeb4 7ae0 	vcmpe.f32	s14, s1
 800e75a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e75e:	dbea      	blt.n	800e736 <__ieee754_powf+0x396>
 800e760:	e7ee      	b.n	800e740 <__ieee754_powf+0x3a0>
 800e762:	bf00      	nop
 800e764:	00000000 	.word	0x00000000
 800e768:	3f7ffff3 	.word	0x3f7ffff3
 800e76c:	3f800007 	.word	0x3f800007
 800e770:	3eaaaaab 	.word	0x3eaaaaab
 800e774:	3fb8aa00 	.word	0x3fb8aa00
 800e778:	3fb8aa3b 	.word	0x3fb8aa3b
 800e77c:	36eca570 	.word	0x36eca570
 800e780:	4b800000 	.word	0x4b800000
 800e784:	001cc471 	.word	0x001cc471
 800e788:	005db3d6 	.word	0x005db3d6
 800e78c:	0800eab0 	.word	0x0800eab0
 800e790:	fffff000 	.word	0xfffff000
 800e794:	3e6c3255 	.word	0x3e6c3255
 800e798:	3e53f142 	.word	0x3e53f142
 800e79c:	3e8ba305 	.word	0x3e8ba305
 800e7a0:	3edb6db7 	.word	0x3edb6db7
 800e7a4:	3f19999a 	.word	0x3f19999a
 800e7a8:	0800eaa0 	.word	0x0800eaa0
 800e7ac:	3f76384f 	.word	0x3f76384f
 800e7b0:	3f763800 	.word	0x3f763800
 800e7b4:	369dc3a0 	.word	0x369dc3a0
 800e7b8:	0800eaa8 	.word	0x0800eaa8
 800e7bc:	3338aa3c 	.word	0x3338aa3c
 800e7c0:	43160000 	.word	0x43160000
 800e7c4:	f1b3 5f7c 	cmp.w	r3, #1056964608	@ 0x3f000000
 800e7c8:	d96f      	bls.n	800e8aa <__ieee754_powf+0x50a>
 800e7ca:	15db      	asrs	r3, r3, #23
 800e7cc:	3b7e      	subs	r3, #126	@ 0x7e
 800e7ce:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 800e7d2:	4118      	asrs	r0, r3
 800e7d4:	4408      	add	r0, r1
 800e7d6:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800e7da:	4a4e      	ldr	r2, [pc, #312]	@ (800e914 <__ieee754_powf+0x574>)
 800e7dc:	3b7f      	subs	r3, #127	@ 0x7f
 800e7de:	411a      	asrs	r2, r3
 800e7e0:	4002      	ands	r2, r0
 800e7e2:	ee07 2a10 	vmov	s14, r2
 800e7e6:	f3c0 0016 	ubfx	r0, r0, #0, #23
 800e7ea:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800e7ee:	f1c3 0317 	rsb	r3, r3, #23
 800e7f2:	4118      	asrs	r0, r3
 800e7f4:	2900      	cmp	r1, #0
 800e7f6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800e7fa:	bfb8      	it	lt
 800e7fc:	4240      	neglt	r0, r0
 800e7fe:	ee77 6aa0 	vadd.f32	s13, s15, s1
 800e802:	ed9f 7a45 	vldr	s14, [pc, #276]	@ 800e918 <__ieee754_powf+0x578>
 800e806:	ed9f 6a45 	vldr	s12, [pc, #276]	@ 800e91c <__ieee754_powf+0x57c>
 800e80a:	ee16 3a90 	vmov	r3, s13
 800e80e:	f36f 030b 	bfc	r3, #0, #12
 800e812:	ee06 3a90 	vmov	s13, r3
 800e816:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800e81a:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800e81e:	ee70 0ae7 	vsub.f32	s1, s1, s15
 800e822:	eddf 7a3f 	vldr	s15, [pc, #252]	@ 800e920 <__ieee754_powf+0x580>
 800e826:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e82a:	eee0 7a87 	vfma.f32	s15, s1, s14
 800e82e:	eeb0 7a67 	vmov.f32	s14, s15
 800e832:	eea6 7a86 	vfma.f32	s14, s13, s12
 800e836:	eef0 5a47 	vmov.f32	s11, s14
 800e83a:	eee6 5ac6 	vfms.f32	s11, s13, s12
 800e83e:	ee67 6a07 	vmul.f32	s13, s14, s14
 800e842:	ee77 7ae5 	vsub.f32	s15, s15, s11
 800e846:	ed9f 6a37 	vldr	s12, [pc, #220]	@ 800e924 <__ieee754_powf+0x584>
 800e84a:	eddf 5a37 	vldr	s11, [pc, #220]	@ 800e928 <__ieee754_powf+0x588>
 800e84e:	eea6 6aa5 	vfma.f32	s12, s13, s11
 800e852:	eddf 5a36 	vldr	s11, [pc, #216]	@ 800e92c <__ieee754_powf+0x58c>
 800e856:	eee6 5a26 	vfma.f32	s11, s12, s13
 800e85a:	ed9f 6a35 	vldr	s12, [pc, #212]	@ 800e930 <__ieee754_powf+0x590>
 800e85e:	eea5 6aa6 	vfma.f32	s12, s11, s13
 800e862:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800e934 <__ieee754_powf+0x594>
 800e866:	eee6 5a26 	vfma.f32	s11, s12, s13
 800e86a:	eeb0 6a47 	vmov.f32	s12, s14
 800e86e:	eea5 6ae6 	vfms.f32	s12, s11, s13
 800e872:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800e876:	ee67 5a06 	vmul.f32	s11, s14, s12
 800e87a:	ee36 6a66 	vsub.f32	s12, s12, s13
 800e87e:	eee7 7a27 	vfma.f32	s15, s14, s15
 800e882:	eec5 6a86 	vdiv.f32	s13, s11, s12
 800e886:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800e88a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800e88e:	ee30 0a67 	vsub.f32	s0, s0, s15
 800e892:	ee10 3a10 	vmov	r3, s0
 800e896:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 800e89a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800e89e:	da06      	bge.n	800e8ae <__ieee754_powf+0x50e>
 800e8a0:	f000 f854 	bl	800e94c <scalbnf>
 800e8a4:	ee20 0a08 	vmul.f32	s0, s0, s16
 800e8a8:	e592      	b.n	800e3d0 <__ieee754_powf+0x30>
 800e8aa:	2000      	movs	r0, #0
 800e8ac:	e7a7      	b.n	800e7fe <__ieee754_powf+0x45e>
 800e8ae:	ee00 3a10 	vmov	s0, r3
 800e8b2:	e7f7      	b.n	800e8a4 <__ieee754_powf+0x504>
 800e8b4:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800e8b8:	e58a      	b.n	800e3d0 <__ieee754_powf+0x30>
 800e8ba:	ed9f 0a1f 	vldr	s0, [pc, #124]	@ 800e938 <__ieee754_powf+0x598>
 800e8be:	e587      	b.n	800e3d0 <__ieee754_powf+0x30>
 800e8c0:	eeb0 0a48 	vmov.f32	s0, s16
 800e8c4:	e584      	b.n	800e3d0 <__ieee754_powf+0x30>
 800e8c6:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 800e8ca:	f43f adbb 	beq.w	800e444 <__ieee754_powf+0xa4>
 800e8ce:	2502      	movs	r5, #2
 800e8d0:	eeb0 0a48 	vmov.f32	s0, s16
 800e8d4:	f000 f832 	bl	800e93c <fabsf>
 800e8d8:	f026 4340 	bic.w	r3, r6, #3221225472	@ 0xc0000000
 800e8dc:	f1b3 5f7e 	cmp.w	r3, #1065353216	@ 0x3f800000
 800e8e0:	4647      	mov	r7, r8
 800e8e2:	d003      	beq.n	800e8ec <__ieee754_powf+0x54c>
 800e8e4:	f1b8 0f00 	cmp.w	r8, #0
 800e8e8:	f47f addb 	bne.w	800e4a2 <__ieee754_powf+0x102>
 800e8ec:	2c00      	cmp	r4, #0
 800e8ee:	bfbc      	itt	lt
 800e8f0:	eef7 7a00 	vmovlt.f32	s15, #112	@ 0x3f800000  1.0
 800e8f4:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 800e8f8:	2e00      	cmp	r6, #0
 800e8fa:	f6bf ad69 	bge.w	800e3d0 <__ieee754_powf+0x30>
 800e8fe:	f1a8 587e 	sub.w	r8, r8, #1065353216	@ 0x3f800000
 800e902:	ea58 0805 	orrs.w	r8, r8, r5
 800e906:	f47f adc7 	bne.w	800e498 <__ieee754_powf+0xf8>
 800e90a:	ee70 7a40 	vsub.f32	s15, s0, s0
 800e90e:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 800e912:	e55d      	b.n	800e3d0 <__ieee754_powf+0x30>
 800e914:	ff800000 	.word	0xff800000
 800e918:	3f317218 	.word	0x3f317218
 800e91c:	3f317200 	.word	0x3f317200
 800e920:	35bfbe8c 	.word	0x35bfbe8c
 800e924:	b5ddea0e 	.word	0xb5ddea0e
 800e928:	3331bb4c 	.word	0x3331bb4c
 800e92c:	388ab355 	.word	0x388ab355
 800e930:	bb360b61 	.word	0xbb360b61
 800e934:	3e2aaaab 	.word	0x3e2aaaab
 800e938:	00000000 	.word	0x00000000

0800e93c <fabsf>:
 800e93c:	ee10 3a10 	vmov	r3, s0
 800e940:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800e944:	ee00 3a10 	vmov	s0, r3
 800e948:	4770      	bx	lr
	...

0800e94c <scalbnf>:
 800e94c:	ee10 3a10 	vmov	r3, s0
 800e950:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 800e954:	d02b      	beq.n	800e9ae <scalbnf+0x62>
 800e956:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 800e95a:	d302      	bcc.n	800e962 <scalbnf+0x16>
 800e95c:	ee30 0a00 	vadd.f32	s0, s0, s0
 800e960:	4770      	bx	lr
 800e962:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 800e966:	d123      	bne.n	800e9b0 <scalbnf+0x64>
 800e968:	4b24      	ldr	r3, [pc, #144]	@ (800e9fc <scalbnf+0xb0>)
 800e96a:	eddf 7a25 	vldr	s15, [pc, #148]	@ 800ea00 <scalbnf+0xb4>
 800e96e:	4298      	cmp	r0, r3
 800e970:	ee20 0a27 	vmul.f32	s0, s0, s15
 800e974:	db17      	blt.n	800e9a6 <scalbnf+0x5a>
 800e976:	ee10 3a10 	vmov	r3, s0
 800e97a:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800e97e:	3a19      	subs	r2, #25
 800e980:	f24c 3150 	movw	r1, #50000	@ 0xc350
 800e984:	4288      	cmp	r0, r1
 800e986:	dd15      	ble.n	800e9b4 <scalbnf+0x68>
 800e988:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 800ea04 <scalbnf+0xb8>
 800e98c:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 800ea08 <scalbnf+0xbc>
 800e990:	ee10 3a10 	vmov	r3, s0
 800e994:	eeb0 7a67 	vmov.f32	s14, s15
 800e998:	2b00      	cmp	r3, #0
 800e99a:	bfb8      	it	lt
 800e99c:	eef0 7a66 	vmovlt.f32	s15, s13
 800e9a0:	ee27 0a87 	vmul.f32	s0, s15, s14
 800e9a4:	4770      	bx	lr
 800e9a6:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800ea0c <scalbnf+0xc0>
 800e9aa:	ee27 0a80 	vmul.f32	s0, s15, s0
 800e9ae:	4770      	bx	lr
 800e9b0:	0dd2      	lsrs	r2, r2, #23
 800e9b2:	e7e5      	b.n	800e980 <scalbnf+0x34>
 800e9b4:	4410      	add	r0, r2
 800e9b6:	28fe      	cmp	r0, #254	@ 0xfe
 800e9b8:	dce6      	bgt.n	800e988 <scalbnf+0x3c>
 800e9ba:	2800      	cmp	r0, #0
 800e9bc:	dd06      	ble.n	800e9cc <scalbnf+0x80>
 800e9be:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800e9c2:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800e9c6:	ee00 3a10 	vmov	s0, r3
 800e9ca:	4770      	bx	lr
 800e9cc:	f110 0f16 	cmn.w	r0, #22
 800e9d0:	da09      	bge.n	800e9e6 <scalbnf+0x9a>
 800e9d2:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 800ea0c <scalbnf+0xc0>
 800e9d6:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 800ea10 <scalbnf+0xc4>
 800e9da:	ee10 3a10 	vmov	r3, s0
 800e9de:	eeb0 7a67 	vmov.f32	s14, s15
 800e9e2:	2b00      	cmp	r3, #0
 800e9e4:	e7d9      	b.n	800e99a <scalbnf+0x4e>
 800e9e6:	3019      	adds	r0, #25
 800e9e8:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800e9ec:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800e9f0:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 800ea14 <scalbnf+0xc8>
 800e9f4:	ee07 3a90 	vmov	s15, r3
 800e9f8:	e7d7      	b.n	800e9aa <scalbnf+0x5e>
 800e9fa:	bf00      	nop
 800e9fc:	ffff3cb0 	.word	0xffff3cb0
 800ea00:	4c000000 	.word	0x4c000000
 800ea04:	7149f2ca 	.word	0x7149f2ca
 800ea08:	f149f2ca 	.word	0xf149f2ca
 800ea0c:	0da24260 	.word	0x0da24260
 800ea10:	8da24260 	.word	0x8da24260
 800ea14:	33000000 	.word	0x33000000

0800ea18 <with_errnof>:
 800ea18:	b510      	push	{r4, lr}
 800ea1a:	ed2d 8b02 	vpush	{d8}
 800ea1e:	eeb0 8a40 	vmov.f32	s16, s0
 800ea22:	4604      	mov	r4, r0
 800ea24:	f7ff fb0a 	bl	800e03c <__errno>
 800ea28:	eeb0 0a48 	vmov.f32	s0, s16
 800ea2c:	ecbd 8b02 	vpop	{d8}
 800ea30:	6004      	str	r4, [r0, #0]
 800ea32:	bd10      	pop	{r4, pc}

0800ea34 <xflowf>:
 800ea34:	b130      	cbz	r0, 800ea44 <xflowf+0x10>
 800ea36:	eef1 7a40 	vneg.f32	s15, s0
 800ea3a:	ee27 0a80 	vmul.f32	s0, s15, s0
 800ea3e:	2022      	movs	r0, #34	@ 0x22
 800ea40:	f7ff bfea 	b.w	800ea18 <with_errnof>
 800ea44:	eef0 7a40 	vmov.f32	s15, s0
 800ea48:	e7f7      	b.n	800ea3a <xflowf+0x6>
	...

0800ea4c <__math_uflowf>:
 800ea4c:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800ea54 <__math_uflowf+0x8>
 800ea50:	f7ff bff0 	b.w	800ea34 <xflowf>
 800ea54:	10000000 	.word	0x10000000

0800ea58 <__math_oflowf>:
 800ea58:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800ea60 <__math_oflowf+0x8>
 800ea5c:	f7ff bfea 	b.w	800ea34 <xflowf>
 800ea60:	70000000 	.word	0x70000000

0800ea64 <__ieee754_sqrtf>:
 800ea64:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800ea68:	4770      	bx	lr
	...

0800ea6c <_init>:
 800ea6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ea6e:	bf00      	nop
 800ea70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ea72:	bc08      	pop	{r3}
 800ea74:	469e      	mov	lr, r3
 800ea76:	4770      	bx	lr

0800ea78 <_fini>:
 800ea78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ea7a:	bf00      	nop
 800ea7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ea7e:	bc08      	pop	{r3}
 800ea80:	469e      	mov	lr, r3
 800ea82:	4770      	bx	lr
